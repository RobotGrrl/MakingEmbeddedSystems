
AccioRange_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b70c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020c0  0801b8bc  0801b8bc  0002b8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d97c  0801d97c  0003074c  2**0
                  CONTENTS
  4 .ARM          00000008  0801d97c  0801d97c  0002d97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d984  0801d984  0003074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d984  0801d984  0002d984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d988  0801d988  0002d988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000074c  20000000  0801d98c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030dc  2000074c  0801e0d8  0003074c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003828  0801e0d8  00033828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003074c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047426  00000000  00000000  0003077c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008bc7  00000000  00000000  00077ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000038f8  00000000  00000000  00080770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003560  00000000  00000000  00084068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003af4b  00000000  00000000  000875c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046fb0  00000000  00000000  000c2513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013fe7e  00000000  00000000  001094c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00249341  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fca0  00000000  00000000  00249394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000074c 	.word	0x2000074c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801b8a4 	.word	0x0801b8a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000750 	.word	0x20000750
 80001ec:	0801b8a4 	.word	0x0801b8a4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000af0:	f000 b974 	b.w	8000ddc <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	468e      	mov	lr, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d14d      	bne.n	8000bb6 <__udivmoddi4+0xaa>
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	d969      	bls.n	8000bf4 <__udivmoddi4+0xe8>
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	b152      	cbz	r2, 8000b3c <__udivmoddi4+0x30>
 8000b26:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2a:	f1c2 0120 	rsb	r1, r2, #32
 8000b2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b36:	ea41 0e03 	orr.w	lr, r1, r3
 8000b3a:	4094      	lsls	r4, r2
 8000b3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b40:	0c21      	lsrs	r1, r4, #16
 8000b42:	fbbe f6f8 	udiv	r6, lr, r8
 8000b46:	fa1f f78c 	uxth.w	r7, ip
 8000b4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b52:	fb06 f107 	mul.w	r1, r6, r7
 8000b56:	4299      	cmp	r1, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x64>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b62:	f080 811f 	bcs.w	8000da4 <__udivmoddi4+0x298>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 811c 	bls.w	8000da4 <__udivmoddi4+0x298>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	4463      	add	r3, ip
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b78:	fb08 3310 	mls	r3, r8, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 f707 	mul.w	r7, r0, r7
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x92>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b90:	f080 810a 	bcs.w	8000da8 <__udivmoddi4+0x29c>
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	f240 8107 	bls.w	8000da8 <__udivmoddi4+0x29c>
 8000b9a:	4464      	add	r4, ip
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba2:	1be4      	subs	r4, r4, r7
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	b11d      	cbz	r5, 8000bb0 <__udivmoddi4+0xa4>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0xc2>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	f000 80ef 	beq.w	8000d9e <__udivmoddi4+0x292>
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	4631      	mov	r1, r6
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	fab3 f683 	clz	r6, r3
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d14a      	bne.n	8000c6c <__udivmoddi4+0x160>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xd4>
 8000bda:	4282      	cmp	r2, r0
 8000bdc:	f200 80f9 	bhi.w	8000dd2 <__udivmoddi4+0x2c6>
 8000be0:	1a84      	subs	r4, r0, r2
 8000be2:	eb61 0303 	sbc.w	r3, r1, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	469e      	mov	lr, r3
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d0e0      	beq.n	8000bb0 <__udivmoddi4+0xa4>
 8000bee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bf2:	e7dd      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000bf4:	b902      	cbnz	r2, 8000bf8 <__udivmoddi4+0xec>
 8000bf6:	deff      	udf	#255	; 0xff
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	f040 8092 	bne.w	8000d26 <__udivmoddi4+0x21a>
 8000c02:	eba1 010c 	sub.w	r1, r1, ip
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f fe8c 	uxth.w	lr, ip
 8000c0e:	2601      	movs	r6, #1
 8000c10:	0c20      	lsrs	r0, r4, #16
 8000c12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c16:	fb07 1113 	mls	r1, r7, r3, r1
 8000c1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c1e:	fb0e f003 	mul.w	r0, lr, r3
 8000c22:	4288      	cmp	r0, r1
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x12c>
 8000c26:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x12a>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f200 80cb 	bhi.w	8000dcc <__udivmoddi4+0x2c0>
 8000c36:	4643      	mov	r3, r8
 8000c38:	1a09      	subs	r1, r1, r0
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c40:	fb07 1110 	mls	r1, r7, r0, r1
 8000c44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c48:	fb0e fe00 	mul.w	lr, lr, r0
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x156>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c58:	d202      	bcs.n	8000c60 <__udivmoddi4+0x154>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f200 80bb 	bhi.w	8000dd6 <__udivmoddi4+0x2ca>
 8000c60:	4608      	mov	r0, r1
 8000c62:	eba4 040e 	sub.w	r4, r4, lr
 8000c66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c6a:	e79c      	b.n	8000ba6 <__udivmoddi4+0x9a>
 8000c6c:	f1c6 0720 	rsb	r7, r6, #32
 8000c70:	40b3      	lsls	r3, r6
 8000c72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c82:	431c      	orrs	r4, r3
 8000c84:	40f9      	lsrs	r1, r7
 8000c86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c92:	0c20      	lsrs	r0, r4, #16
 8000c94:	fa1f fe8c 	uxth.w	lr, ip
 8000c98:	fb09 1118 	mls	r1, r9, r8, r1
 8000c9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	fa02 f206 	lsl.w	r2, r2, r6
 8000caa:	d90b      	bls.n	8000cc4 <__udivmoddi4+0x1b8>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cb4:	f080 8088 	bcs.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	f240 8085 	bls.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc2:	4461      	add	r1, ip
 8000cc4:	1a09      	subs	r1, r1, r0
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ccc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd8:	458e      	cmp	lr, r1
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x1e2>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ce4:	d26c      	bcs.n	8000dc0 <__udivmoddi4+0x2b4>
 8000ce6:	458e      	cmp	lr, r1
 8000ce8:	d96a      	bls.n	8000dc0 <__udivmoddi4+0x2b4>
 8000cea:	3802      	subs	r0, #2
 8000cec:	4461      	add	r1, ip
 8000cee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cf6:	eba1 010e 	sub.w	r1, r1, lr
 8000cfa:	42a1      	cmp	r1, r4
 8000cfc:	46c8      	mov	r8, r9
 8000cfe:	46a6      	mov	lr, r4
 8000d00:	d356      	bcc.n	8000db0 <__udivmoddi4+0x2a4>
 8000d02:	d053      	beq.n	8000dac <__udivmoddi4+0x2a0>
 8000d04:	b15d      	cbz	r5, 8000d1e <__udivmoddi4+0x212>
 8000d06:	ebb3 0208 	subs.w	r2, r3, r8
 8000d0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d12:	fa22 f306 	lsr.w	r3, r2, r6
 8000d16:	40f1      	lsrs	r1, r6
 8000d18:	431f      	orrs	r7, r3
 8000d1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d1e:	2600      	movs	r6, #0
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	f1c2 0320 	rsb	r3, r2, #32
 8000d2a:	40d8      	lsrs	r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	fa21 f303 	lsr.w	r3, r1, r3
 8000d34:	4091      	lsls	r1, r2
 8000d36:	4301      	orrs	r1, r0
 8000d38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3c:	fa1f fe8c 	uxth.w	lr, ip
 8000d40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d44:	fb07 3610 	mls	r6, r7, r0, r3
 8000d48:	0c0b      	lsrs	r3, r1, #16
 8000d4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d52:	429e      	cmp	r6, r3
 8000d54:	fa04 f402 	lsl.w	r4, r4, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x260>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d62:	d22f      	bcs.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d64:	429e      	cmp	r6, r3
 8000d66:	d92d      	bls.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	b289      	uxth	r1, r1
 8000d70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d74:	fb07 3316 	mls	r3, r7, r6, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x28a>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d8c:	d216      	bcs.n	8000dbc <__udivmoddi4+0x2b0>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d914      	bls.n	8000dbc <__udivmoddi4+0x2b0>
 8000d92:	3e02      	subs	r6, #2
 8000d94:	4461      	add	r1, ip
 8000d96:	1ac9      	subs	r1, r1, r3
 8000d98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d9c:	e738      	b.n	8000c10 <__udivmoddi4+0x104>
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e705      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e3      	b.n	8000b70 <__udivmoddi4+0x64>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6f8      	b.n	8000b9e <__udivmoddi4+0x92>
 8000dac:	454b      	cmp	r3, r9
 8000dae:	d2a9      	bcs.n	8000d04 <__udivmoddi4+0x1f8>
 8000db0:	ebb9 0802 	subs.w	r8, r9, r2
 8000db4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7a3      	b.n	8000d04 <__udivmoddi4+0x1f8>
 8000dbc:	4646      	mov	r6, r8
 8000dbe:	e7ea      	b.n	8000d96 <__udivmoddi4+0x28a>
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	e794      	b.n	8000cee <__udivmoddi4+0x1e2>
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	e7d1      	b.n	8000d6c <__udivmoddi4+0x260>
 8000dc8:	46d0      	mov	r8, sl
 8000dca:	e77b      	b.n	8000cc4 <__udivmoddi4+0x1b8>
 8000dcc:	3b02      	subs	r3, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	e732      	b.n	8000c38 <__udivmoddi4+0x12c>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e709      	b.n	8000bea <__udivmoddi4+0xde>
 8000dd6:	4464      	add	r4, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	e742      	b.n	8000c62 <__udivmoddi4+0x156>

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e02:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e04:	4a2f      	ldr	r2, [pc, #188]	; (8000ec4 <MX_ADC1_Init+0xe4>)
 8000e06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000e0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e10:	2208      	movs	r2, #8
 8000e12:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e14:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e22:	2204      	movs	r2, #4
 8000e24:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e38:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e62:	4817      	ldr	r0, [pc, #92]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e64:	f00b fb50 	bl	800c508 <HAL_ADC_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e6e:	f001 ffa3 	bl	8002db8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4810      	ldr	r0, [pc, #64]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000e7e:	f00c faf5 	bl	800d46c <HAL_ADCEx_MultiModeConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e88:	f001 ff96 	bl	8002db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_ADC1_Init+0xe8>)
 8000e8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e90:	2306      	movs	r3, #6
 8000e92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e98:	237f      	movs	r3, #127	; 0x7f
 8000e9a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_ADC1_Init+0xe0>)
 8000eaa:	f00b fe27 	bl	800cafc <HAL_ADC_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000eb4:	f001 ff80 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3728      	adds	r7, #40	; 0x28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000768 	.word	0x20000768
 8000ec4:	50040000 	.word	0x50040000
 8000ec8:	36902000 	.word	0x36902000

08000ecc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000ee4:	4a29      	ldr	r2, [pc, #164]	; (8000f8c <MX_ADC2_Init+0xc0>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000efa:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f02:	2204      	movs	r2, #4
 8000f04:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f44:	f00b fae0 	bl	800c508 <HAL_ADC_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000f4e:	f001 ff33 	bl	8002db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_ADC2_Init+0xc4>)
 8000f54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f56:	2306      	movs	r3, #6
 8000f58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f5e:	237f      	movs	r3, #127	; 0x7f
 8000f60:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f62:	2304      	movs	r3, #4
 8000f64:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_ADC2_Init+0xbc>)
 8000f70:	f00b fdc4 	bl	800cafc <HAL_ADC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000f7a:	f001 ff1d 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200007d0 	.word	0x200007d0
 8000f8c:	50040100 	.word	0x50040100
 8000f90:	25b00200 	.word	0x25b00200

08000f94 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
 8000fa8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fac:	4a29      	ldr	r2, [pc, #164]	; (8001054 <MX_ADC3_Init+0xc0>)
 8000fae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fca:	2204      	movs	r2, #4
 8000fcc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_ADC3_Init+0xbc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_ADC3_Init+0xbc>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800100a:	4811      	ldr	r0, [pc, #68]	; (8001050 <MX_ADC3_Init+0xbc>)
 800100c:	f00b fa7c 	bl	800c508 <HAL_ADC_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001016:	f001 fecf 	bl	8002db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_ADC3_Init+0xc4>)
 800101c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800101e:	2306      	movs	r3, #6
 8001020:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001026:	237f      	movs	r3, #127	; 0x7f
 8001028:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800102a:	2304      	movs	r3, #4
 800102c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <MX_ADC3_Init+0xbc>)
 8001038:	f00b fd60 	bl	800cafc <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001042:	f001 feb9 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000838 	.word	0x20000838
 8001054:	50040200 	.word	0x50040200
 8001058:	36902000 	.word	0x36902000

0800105c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08e      	sub	sp, #56	; 0x38
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a59      	ldr	r2, [pc, #356]	; (80011e0 <HAL_ADC_MspInit+0x184>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d12d      	bne.n	80010da <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800107e:	4b59      	ldr	r3, [pc, #356]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	4a57      	ldr	r2, [pc, #348]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 8001086:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001088:	4b56      	ldr	r3, [pc, #344]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d10b      	bne.n	80010a8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001090:	4b55      	ldr	r3, [pc, #340]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	4a54      	ldr	r2, [pc, #336]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001096:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800109a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109c:	4b52      	ldr	r3, [pc, #328]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 800109e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a4:	623b      	str	r3, [r7, #32]
 80010a6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a8:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ac:	4a4e      	ldr	r2, [pc, #312]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b4:	4b4c      	ldr	r3, [pc, #304]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 80010c0:	2318      	movs	r3, #24
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010c4:	230b      	movs	r3, #11
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	4846      	ldr	r0, [pc, #280]	; (80011ec <HAL_ADC_MspInit+0x190>)
 80010d4:	f00c fd50 	bl	800db78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80010d8:	e07e      	b.n	80011d8 <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC2)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a44      	ldr	r2, [pc, #272]	; (80011f0 <HAL_ADC_MspInit+0x194>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d146      	bne.n	8001172 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 80010e4:	4b3f      	ldr	r3, [pc, #252]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	4a3e      	ldr	r2, [pc, #248]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 80010ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80010ee:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d10b      	bne.n	800110e <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80010f6:	4b3c      	ldr	r3, [pc, #240]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a3b      	ldr	r2, [pc, #236]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80010fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b39      	ldr	r3, [pc, #228]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a35      	ldr	r2, [pc, #212]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 800113e:	2303      	movs	r3, #3
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001142:	230b      	movs	r3, #11
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	4826      	ldr	r0, [pc, #152]	; (80011ec <HAL_ADC_MspInit+0x190>)
 8001152:	f00c fd11 	bl	800db78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8001156:	2312      	movs	r3, #18
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800115a:	230b      	movs	r3, #11
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f00c fd04 	bl	800db78 <HAL_GPIO_Init>
}
 8001170:	e032      	b.n	80011d8 <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC3)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <HAL_ADC_MspInit+0x198>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d12d      	bne.n	80011d8 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 8001184:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_ADC_MspInit+0x188>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d10b      	bne.n	80011a6 <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 8001194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80011ac:	f043 0320 	orr.w	r3, r3, #32
 80011b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_ADC_MspInit+0x18c>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f003 0320 	and.w	r3, r3, #32
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 80011be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011c4:	230b      	movs	r3, #11
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d0:	4619      	mov	r1, r3
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <HAL_ADC_MspInit+0x19c>)
 80011d4:	f00c fcd0 	bl	800db78 <HAL_GPIO_Init>
}
 80011d8:	bf00      	nop
 80011da:	3738      	adds	r7, #56	; 0x38
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	50040000 	.word	0x50040000
 80011e4:	200008a0 	.word	0x200008a0
 80011e8:	40021000 	.word	0x40021000
 80011ec:	48000800 	.word	0x48000800
 80011f0:	50040100 	.word	0x50040100
 80011f4:	50040200 	.word	0x50040200
 80011f8:	48001400 	.word	0x48001400

080011fc <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_DCMI_Init+0x60>)
 8001202:	4a17      	ldr	r2, [pc, #92]	; (8001260 <MX_DCMI_Init+0x64>)
 8001204:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_DCMI_Init+0x60>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_DCMI_Init+0x60>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_DCMI_Init+0x60>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <MX_DCMI_Init+0x60>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_DCMI_Init+0x60>)
 8001220:	2200      	movs	r2, #0
 8001222:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <MX_DCMI_Init+0x60>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_DCMI_Init+0x60>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <MX_DCMI_Init+0x60>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_DCMI_Init+0x60>)
 8001238:	2200      	movs	r2, #0
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <MX_DCMI_Init+0x60>)
 800123e:	2200      	movs	r2, #0
 8001240:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_DCMI_Init+0x60>)
 8001244:	2200      	movs	r2, #0
 8001246:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_DCMI_Init+0x60>)
 800124a:	f00c fb03 	bl	800d854 <HAL_DCMI_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001254:	f001 fdb0 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200008a4 	.word	0x200008a4
 8001260:	50050000 	.word	0x50050000

08001264 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a33      	ldr	r2, [pc, #204]	; (8001350 <HAL_DCMI_MspInit+0xec>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d160      	bne.n	8001348 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001286:	4b33      	ldr	r3, [pc, #204]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a32      	ldr	r2, [pc, #200]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b30      	ldr	r3, [pc, #192]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	4a2c      	ldr	r2, [pc, #176]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012aa:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80012b6:	4b27      	ldr	r3, [pc, #156]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	4a26      	ldr	r2, [pc, #152]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	4a20      	ldr	r2, [pc, #128]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012d4:	f043 0310 	orr.w	r3, r3, #16
 80012d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <HAL_DCMI_MspInit+0xf0>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 80012e6:	f645 7320 	movw	r3, #24352	; 0x5f20
 80012ea:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80012f8:	230a      	movs	r3, #10
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	4815      	ldr	r0, [pc, #84]	; (8001358 <HAL_DCMI_MspInit+0xf4>)
 8001304:	f00c fc38 	bl	800db78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8001308:	23b0      	movs	r3, #176	; 0xb0
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001318:	230a      	movs	r3, #10
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	480e      	ldr	r0, [pc, #56]	; (800135c <HAL_DCMI_MspInit+0xf8>)
 8001324:	f00c fc28 	bl	800db78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8001328:	2320      	movs	r3, #32
 800132a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001338:	230a      	movs	r3, #10
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4807      	ldr	r0, [pc, #28]	; (8001360 <HAL_DCMI_MspInit+0xfc>)
 8001344:	f00c fc18 	bl	800db78 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8001348:	bf00      	nop
 800134a:	3730      	adds	r7, #48	; 0x30
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	50050000 	.word	0x50050000
 8001354:	40021000 	.word	0x40021000
 8001358:	48001c00 	.word	0x48001c00
 800135c:	48002000 	.word	0x48002000
 8001360:	48001000 	.word	0x48001000

08001364 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001368:	4b30      	ldr	r3, [pc, #192]	; (800142c <MX_DFSDM1_Init+0xc8>)
 800136a:	4a31      	ldr	r2, [pc, #196]	; (8001430 <MX_DFSDM1_Init+0xcc>)
 800136c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800136e:	4b2f      	ldr	r3, [pc, #188]	; (800142c <MX_DFSDM1_Init+0xc8>)
 8001370:	2201      	movs	r2, #1
 8001372:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001374:	4b2d      	ldr	r3, [pc, #180]	; (800142c <MX_DFSDM1_Init+0xc8>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <MX_DFSDM1_Init+0xc8>)
 800137c:	2202      	movs	r2, #2
 800137e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001380:	4b2a      	ldr	r3, [pc, #168]	; (800142c <MX_DFSDM1_Init+0xc8>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001386:	4b29      	ldr	r3, [pc, #164]	; (800142c <MX_DFSDM1_Init+0xc8>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <MX_DFSDM1_Init+0xc8>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <MX_DFSDM1_Init+0xc8>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <MX_DFSDM1_Init+0xc8>)
 800139a:	2204      	movs	r2, #4
 800139c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <MX_DFSDM1_Init+0xc8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_DFSDM1_Init+0xc8>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <MX_DFSDM1_Init+0xc8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_DFSDM1_Init+0xc8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80013b6:	481d      	ldr	r0, [pc, #116]	; (800142c <MX_DFSDM1_Init+0xc8>)
 80013b8:	f00c fad2 	bl	800d960 <HAL_DFSDM_ChannelInit>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80013c2:	f001 fcf9 	bl	8002db8 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013c8:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <MX_DFSDM1_Init+0xd4>)
 80013ca:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013da:	2202      	movs	r2, #2
 80013dc:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 80013fa:	2204      	movs	r2, #4
 80013fc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 8001400:	2200      	movs	r2, #0
 8001402:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 8001406:	2201      	movs	r2, #1
 8001408:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 800140c:	2200      	movs	r2, #0
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 8001412:	2200      	movs	r2, #0
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001416:	4807      	ldr	r0, [pc, #28]	; (8001434 <MX_DFSDM1_Init+0xd0>)
 8001418:	f00c faa2 	bl	800d960 <HAL_DFSDM_ChannelInit>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8001422:	f001 fcc9 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000908 	.word	0x20000908
 8001430:	40016020 	.word	0x40016020
 8001434:	20000940 	.word	0x20000940
 8001438:	40016040 	.word	0x40016040

0800143c <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0ae      	sub	sp, #184	; 0xb8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001454:	f107 0318 	add.w	r3, r7, #24
 8001458:	228c      	movs	r2, #140	; 0x8c
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f019 f83f 	bl	801a4e0 <memset>
  if(DFSDM1_Init == 0)
 8001462:	4b36      	ldr	r3, [pc, #216]	; (800153c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d163      	bne.n	8001532 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800146a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800146e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001476:	f107 0318 	add.w	r3, r7, #24
 800147a:	4618      	mov	r0, r3
 800147c:	f010 f9bc 	bl	80117f8 <HAL_RCCEx_PeriphCLKConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001486:	f001 fc97 	bl	8002db8 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	4a2c      	ldr	r2, [pc, #176]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001490:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001494:	6613      	str	r3, [r2, #96]	; 0x60
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	4a26      	ldr	r2, [pc, #152]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	4a20      	ldr	r2, [pc, #128]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 80014d2:	2384      	movs	r3, #132	; 0x84
 80014d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014ea:	2306      	movs	r3, #6
 80014ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014f4:	4619      	mov	r1, r3
 80014f6:	4813      	ldr	r0, [pc, #76]	; (8001544 <HAL_DFSDM_ChannelMspInit+0x108>)
 80014f8:	f00c fb3e 	bl	800db78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80014fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001500:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001516:	2306      	movs	r3, #6
 8001518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001520:	4619      	mov	r1, r3
 8001522:	4809      	ldr	r0, [pc, #36]	; (8001548 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001524:	f00c fb28 	bl	800db78 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <HAL_DFSDM_ChannelMspInit+0x100>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	4a03      	ldr	r2, [pc, #12]	; (800153c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001530:	6013      	str	r3, [r2, #0]
  }
}
 8001532:	bf00      	nop
 8001534:	37b8      	adds	r7, #184	; 0xb8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000978 	.word	0x20000978
 8001540:	40021000 	.word	0x40021000
 8001544:	48000800 	.word	0x48000800
 8001548:	48000400 	.word	0x48000400

0800154c <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SRAM_HandleTypeDef hsram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001552:	463b      	mov	r3, r7
 8001554:	2220      	movs	r2, #32
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f018 ffc1 	bl	801a4e0 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800155e:	4b4f      	ldr	r3, [pc, #316]	; (800169c <MX_FMC_Init+0x150>)
 8001560:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001564:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001566:	4b4d      	ldr	r3, [pc, #308]	; (800169c <MX_FMC_Init+0x150>)
 8001568:	4a4d      	ldr	r2, [pc, #308]	; (80016a0 <MX_FMC_Init+0x154>)
 800156a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 800156c:	4b4b      	ldr	r3, [pc, #300]	; (800169c <MX_FMC_Init+0x150>)
 800156e:	2202      	movs	r2, #2
 8001570:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001572:	4b4a      	ldr	r3, [pc, #296]	; (800169c <MX_FMC_Init+0x150>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001578:	4b48      	ldr	r3, [pc, #288]	; (800169c <MX_FMC_Init+0x150>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800157e:	4b47      	ldr	r3, [pc, #284]	; (800169c <MX_FMC_Init+0x150>)
 8001580:	2210      	movs	r2, #16
 8001582:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001584:	4b45      	ldr	r3, [pc, #276]	; (800169c <MX_FMC_Init+0x150>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800158a:	4b44      	ldr	r3, [pc, #272]	; (800169c <MX_FMC_Init+0x150>)
 800158c:	2200      	movs	r2, #0
 800158e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001590:	4b42      	ldr	r3, [pc, #264]	; (800169c <MX_FMC_Init+0x150>)
 8001592:	2200      	movs	r2, #0
 8001594:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001596:	4b41      	ldr	r3, [pc, #260]	; (800169c <MX_FMC_Init+0x150>)
 8001598:	2200      	movs	r2, #0
 800159a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800159c:	4b3f      	ldr	r3, [pc, #252]	; (800169c <MX_FMC_Init+0x150>)
 800159e:	2200      	movs	r2, #0
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80015a2:	4b3e      	ldr	r3, [pc, #248]	; (800169c <MX_FMC_Init+0x150>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80015a8:	4b3c      	ldr	r3, [pc, #240]	; (800169c <MX_FMC_Init+0x150>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80015ae:	4b3b      	ldr	r3, [pc, #236]	; (800169c <MX_FMC_Init+0x150>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80015b4:	4b39      	ldr	r3, [pc, #228]	; (800169c <MX_FMC_Init+0x150>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80015ba:	4b38      	ldr	r3, [pc, #224]	; (800169c <MX_FMC_Init+0x150>)
 80015bc:	2200      	movs	r2, #0
 80015be:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <MX_FMC_Init+0x150>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80015c6:	230f      	movs	r3, #15
 80015c8:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80015ca:	230f      	movs	r3, #15
 80015cc:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80015ce:	23ff      	movs	r3, #255	; 0xff
 80015d0:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 80015d2:	230f      	movs	r3, #15
 80015d4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80015d6:	2310      	movs	r3, #16
 80015d8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80015da:	2311      	movs	r3, #17
 80015dc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80015e2:	463b      	mov	r3, r7
 80015e4:	2200      	movs	r2, #0
 80015e6:	4619      	mov	r1, r3
 80015e8:	482c      	ldr	r0, [pc, #176]	; (800169c <MX_FMC_Init+0x150>)
 80015ea:	f012 fcda 	bl	8013fa2 <HAL_SRAM_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 80015f4:	f001 fbe0 	bl	8002db8 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 80015f8:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <MX_FMC_Init+0x158>)
 80015fa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80015fe:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <MX_FMC_Init+0x158>)
 8001602:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <MX_FMC_Init+0x154>)
 8001604:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <MX_FMC_Init+0x158>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <MX_FMC_Init+0x158>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001612:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <MX_FMC_Init+0x158>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <MX_FMC_Init+0x158>)
 800161a:	2210      	movs	r2, #16
 800161c:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <MX_FMC_Init+0x158>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_FMC_Init+0x158>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_FMC_Init+0x158>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_FMC_Init+0x158>)
 8001632:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_FMC_Init+0x158>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_FMC_Init+0x158>)
 8001640:	2200      	movs	r2, #0
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_FMC_Init+0x158>)
 8001646:	2200      	movs	r2, #0
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_FMC_Init+0x158>)
 800164c:	2200      	movs	r2, #0
 800164e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_FMC_Init+0x158>)
 8001652:	2200      	movs	r2, #0
 8001654:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <MX_FMC_Init+0x158>)
 8001658:	2200      	movs	r2, #0
 800165a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_FMC_Init+0x158>)
 800165e:	2200      	movs	r2, #0
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001662:	230f      	movs	r3, #15
 8001664:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001666:	230f      	movs	r3, #15
 8001668:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800166a:	23ff      	movs	r3, #255	; 0xff
 800166c:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800166e:	230f      	movs	r3, #15
 8001670:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001672:	2310      	movs	r3, #16
 8001674:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001676:	2311      	movs	r3, #17
 8001678:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800167e:	463b      	mov	r3, r7
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <MX_FMC_Init+0x158>)
 8001686:	f012 fc8c 	bl	8013fa2 <HAL_SRAM_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8001690:	f001 fb92 	bl	8002db8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001694:	bf00      	nop
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	2000097c 	.word	0x2000097c
 80016a0:	a0000104 	.word	0xa0000104
 80016a4:	200009cc 	.word	0x200009cc

080016a8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80016bc:	4b2b      	ldr	r3, [pc, #172]	; (800176c <HAL_FMC_MspInit+0xc4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d14f      	bne.n	8001764 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <HAL_FMC_MspInit+0xc4>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80016ca:	4b29      	ldr	r3, [pc, #164]	; (8001770 <HAL_FMC_MspInit+0xc8>)
 80016cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ce:	4a28      	ldr	r2, [pc, #160]	; (8001770 <HAL_FMC_MspInit+0xc8>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6513      	str	r3, [r2, #80]	; 0x50
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_FMC_MspInit+0xc8>)
 80016d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 80016e2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80016e6:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016f4:	230c      	movs	r3, #12
 80016f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4619      	mov	r1, r3
 80016fc:	481d      	ldr	r0, [pc, #116]	; (8001774 <HAL_FMC_MspInit+0xcc>)
 80016fe:	f00c fa3b 	bl	800db78 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8001702:	f240 233f 	movw	r3, #575	; 0x23f
 8001706:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001714:	230c      	movs	r3, #12
 8001716:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4816      	ldr	r0, [pc, #88]	; (8001778 <HAL_FMC_MspInit+0xd0>)
 800171e:	f00c fa2b 	bl	800db78 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8001722:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8001726:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001734:	230c      	movs	r3, #12
 8001736:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	480f      	ldr	r0, [pc, #60]	; (800177c <HAL_FMC_MspInit+0xd4>)
 800173e:	f00c fa1b 	bl	800db78 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001742:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001746:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001754:	230c      	movs	r3, #12
 8001756:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	4808      	ldr	r0, [pc, #32]	; (8001780 <HAL_FMC_MspInit+0xd8>)
 800175e:	f00c fa0b 	bl	800db78 <HAL_GPIO_Init>
 8001762:	e000      	b.n	8001766 <HAL_FMC_MspInit+0xbe>
    return;
 8001764:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000a1c 	.word	0x20000a1c
 8001770:	40021000 	.word	0x40021000
 8001774:	48001000 	.word	0x48001000
 8001778:	48001800 	.word	0x48001800
 800177c:	48000c00 	.word	0x48000c00
 8001780:	48001400 	.word	0x48001400

08001784 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800178c:	f7ff ff8c 	bl	80016a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <MX_GPIO_Init>:
     PH13   ------> TIM8_CH1N
     PB9   ------> S_TIM4_CH4
     PA8   ------> LPTIM2_OUT
*/
void MX_GPIO_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	; 0x38
 800179c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017ae:	4bb4      	ldr	r3, [pc, #720]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	4ab3      	ldr	r2, [pc, #716]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ba:	4bb1      	ldr	r3, [pc, #708]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c6:	4bae      	ldr	r3, [pc, #696]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	4aad      	ldr	r2, [pc, #692]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d2:	4bab      	ldr	r3, [pc, #684]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017de:	4ba8      	ldr	r3, [pc, #672]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	4aa7      	ldr	r2, [pc, #668]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017e4:	f043 0310 	orr.w	r3, r3, #16
 80017e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ea:	4ba5      	ldr	r3, [pc, #660]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	61bb      	str	r3, [r7, #24]
 80017f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	4ba2      	ldr	r3, [pc, #648]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	4aa1      	ldr	r2, [pc, #644]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001802:	4b9f      	ldr	r3, [pc, #636]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b9c      	ldr	r3, [pc, #624]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	4a9b      	ldr	r2, [pc, #620]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181a:	4b99      	ldr	r3, [pc, #612]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001826:	4b96      	ldr	r3, [pc, #600]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a95      	ldr	r2, [pc, #596]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 800182c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b93      	ldr	r3, [pc, #588]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800183e:	f00f f883 	bl	8010948 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001842:	4b8f      	ldr	r3, [pc, #572]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	4a8e      	ldr	r2, [pc, #568]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001848:	f043 0308 	orr.w	r3, r3, #8
 800184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184e:	4b8c      	ldr	r3, [pc, #560]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185a:	4b89      	ldr	r3, [pc, #548]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	4a88      	ldr	r2, [pc, #544]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001866:	4b86      	ldr	r3, [pc, #536]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001872:	4b83      	ldr	r3, [pc, #524]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	4a82      	ldr	r2, [pc, #520]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001878:	f043 0320 	orr.w	r3, r3, #32
 800187c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187e:	4b80      	ldr	r3, [pc, #512]	; (8001a80 <MX_GPIO_Init+0x2e8>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LCD_BL_Pin|ARD_D4_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	f640 0101 	movw	r1, #2049	; 0x801
 8001890:	487c      	ldr	r0, [pc, #496]	; (8001a84 <MX_GPIO_Init+0x2ec>)
 8001892:	f00c fbf5 	bl	800e080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2143      	movs	r1, #67	; 0x43
 800189a:	487b      	ldr	r0, [pc, #492]	; (8001a88 <MX_GPIO_Init+0x2f0>)
 800189c:	f00c fbf0 	bl	800e080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2140      	movs	r1, #64	; 0x40
 80018a4:	4879      	ldr	r0, [pc, #484]	; (8001a8c <MX_GPIO_Init+0x2f4>)
 80018a6:	f00c fbeb 	bl	800e080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARD_D2_Pin|ARD_D7_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 80018b0:	4877      	ldr	r0, [pc, #476]	; (8001a90 <MX_GPIO_Init+0x2f8>)
 80018b2:	f00c fbe5 	bl	800e080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018bc:	4875      	ldr	r0, [pc, #468]	; (8001a94 <MX_GPIO_Init+0x2fc>)
 80018be:	f00c fbdf 	bl	800e080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 80018c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ce:	2302      	movs	r3, #2
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d6:	4619      	mov	r1, r3
 80018d8:	486a      	ldr	r0, [pc, #424]	; (8001a84 <MX_GPIO_Init+0x2ec>)
 80018da:	f00c f94d 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 80018de:	2304      	movs	r3, #4
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	4865      	ldr	r0, [pc, #404]	; (8001a88 <MX_GPIO_Init+0x2f0>)
 80018f4:	f00c f940 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|ARD_D4_Pin;
 80018f8:	f640 0301 	movw	r3, #2049	; 0x801
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800190a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190e:	4619      	mov	r1, r3
 8001910:	485c      	ldr	r0, [pc, #368]	; (8001a84 <MX_GPIO_Init+0x2ec>)
 8001912:	f00c f931 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin;
 8001916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800191c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001922:	2302      	movs	r3, #2
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192a:	4619      	mov	r1, r3
 800192c:	4855      	ldr	r0, [pc, #340]	; (8001a84 <MX_GPIO_Init+0x2ec>)
 800192e:	f00c f923 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001932:	2340      	movs	r3, #64	; 0x40
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001942:	2303      	movs	r3, #3
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194a:	4619      	mov	r1, r3
 800194c:	484d      	ldr	r0, [pc, #308]	; (8001a84 <MX_GPIO_Init+0x2ec>)
 800194e:	f00c f913 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8001952:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001964:	2303      	movs	r3, #3
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196c:	4619      	mov	r1, r3
 800196e:	4846      	ldr	r0, [pc, #280]	; (8001a88 <MX_GPIO_Init+0x2f0>)
 8001970:	f00c f902 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_UP_Pin;
 8001974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197a:	2300      	movs	r3, #0
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800197e:	2302      	movs	r3, #2
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_UP_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001986:	4619      	mov	r1, r3
 8001988:	483e      	ldr	r0, [pc, #248]	; (8001a84 <MX_GPIO_Init+0x2ec>)
 800198a:	f00c f8f5 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800198e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019a0:	2302      	movs	r3, #2
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	4619      	mov	r1, r3
 80019aa:	483a      	ldr	r0, [pc, #232]	; (8001a94 <MX_GPIO_Init+0x2fc>)
 80019ac:	f00c f8e4 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c0:	4619      	mov	r1, r3
 80019c2:	4831      	ldr	r0, [pc, #196]	; (8001a88 <MX_GPIO_Init+0x2f0>)
 80019c4:	f00c f8d8 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 80019c8:	2343      	movs	r3, #67	; 0x43
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019dc:	4619      	mov	r1, r3
 80019de:	482a      	ldr	r0, [pc, #168]	; (8001a88 <MX_GPIO_Init+0x2f0>)
 80019e0:	f00c f8ca 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80019e4:	2340      	movs	r3, #64	; 0x40
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	4619      	mov	r1, r3
 80019fa:	4824      	ldr	r0, [pc, #144]	; (8001a8c <MX_GPIO_Init+0x2f4>)
 80019fc:	f00c f8bc 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001a00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a14:	4619      	mov	r1, r3
 8001a16:	481e      	ldr	r0, [pc, #120]	; (8001a90 <MX_GPIO_Init+0x2f8>)
 8001a18:	f00c f8ae 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARD_D2_Pin|ARD_D7_Pin;
 8001a1c:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a32:	4619      	mov	r1, r3
 8001a34:	4816      	ldr	r0, [pc, #88]	; (8001a90 <MX_GPIO_Init+0x2f8>)
 8001a36:	f00c f89f 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 8001a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8001a4c:	230e      	movs	r3, #14
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a54:	4619      	mov	r1, r3
 8001a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5a:	f00c f88d 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001a5e:	2320      	movs	r3, #32
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	; (8001a8c <MX_GPIO_Init+0x2f4>)
 8001a74:	f00c f880 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8001a78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a7c:	e00c      	b.n	8001a98 <MX_GPIO_Init+0x300>
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48002000 	.word	0x48002000
 8001a88:	48001c00 	.word	0x48001c00
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	48001800 	.word	0x48001800
 8001a94:	48000400 	.word	0x48000400
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4819      	ldr	r0, [pc, #100]	; (8001b10 <MX_GPIO_Init+0x378>)
 8001aac:	f00c f864 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4814      	ldr	r0, [pc, #80]	; (8001b14 <MX_GPIO_Init+0x37c>)
 8001ac4:	f00c f858 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ace:	2311      	movs	r3, #17
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480c      	ldr	r0, [pc, #48]	; (8001b14 <MX_GPIO_Init+0x37c>)
 8001ae2:	f00c f849 	bl	800db78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2017      	movs	r0, #23
 8001aec:	f00b fe6d 	bl	800d7ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001af0:	2017      	movs	r0, #23
 8001af2:	f00b fe86 	bl	800d802 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	2028      	movs	r0, #40	; 0x28
 8001afc:	f00b fe65 	bl	800d7ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b00:	2028      	movs	r0, #40	; 0x28
 8001b02:	f00b fe7e 	bl	800d802 <HAL_NVIC_EnableIRQ>

}
 8001b06:	bf00      	nop
 8001b08:	3738      	adds	r7, #56	; 0x38
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	48001400 	.word	0x48001400
 8001b14:	48000400 	.word	0x48000400

08001b18 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <MX_I2C1_Init+0x78>)
 8001b20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b24:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <MX_I2C1_Init+0x7c>)
 8001b26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b52:	480e      	ldr	r0, [pc, #56]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b54:	f00c fade 	bl	800e114 <HAL_I2C_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b5e:	f001 f92b 	bl	8002db8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b62:	2100      	movs	r1, #0
 8001b64:	4809      	ldr	r0, [pc, #36]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b66:	f00d fbe1 	bl	800f32c <HAL_I2CEx_ConfigAnalogFilter>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b70:	f001 f922 	bl	8002db8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b74:	2100      	movs	r1, #0
 8001b76:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b78:	f00d fc23 	bl	800f3c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b82:	f001 f919 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000a20 	.word	0x20000a20
 8001b90:	40005400 	.word	0x40005400
 8001b94:	20303e5d 	.word	0x20303e5d

08001b98 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <MX_I2C2_Init+0x78>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001ba4:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <MX_I2C2_Init+0x7c>)
 8001ba6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb4:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bd2:	480e      	ldr	r0, [pc, #56]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bd4:	f00c fa9e 	bl	800e114 <HAL_I2C_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001bde:	f001 f8eb 	bl	8002db8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001be2:	2100      	movs	r1, #0
 8001be4:	4809      	ldr	r0, [pc, #36]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001be6:	f00d fba1 	bl	800f32c <HAL_I2CEx_ConfigAnalogFilter>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001bf0:	f001 f8e2 	bl	8002db8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_I2C2_Init+0x74>)
 8001bf8:	f00d fbe3 	bl	800f3c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001c02:	f001 f8d9 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000a74 	.word	0x20000a74
 8001c10:	40005800 	.word	0x40005800
 8001c14:	20303e5d 	.word	0x20303e5d

08001c18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0b0      	sub	sp, #192	; 0xc0
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c30:	f107 0320 	add.w	r3, r7, #32
 8001c34:	228c      	movs	r2, #140	; 0x8c
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 fc51 	bl	801a4e0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a53      	ldr	r2, [pc, #332]	; (8001d90 <HAL_I2C_MspInit+0x178>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d13c      	bne.n	8001cc2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c48:	2340      	movs	r3, #64	; 0x40
 8001c4a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c50:	f107 0320 	add.w	r3, r7, #32
 8001c54:	4618      	mov	r0, r3
 8001c56:	f00f fdcf 	bl	80117f8 <HAL_RCCEx_PeriphCLKConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c60:	f001 f8aa 	bl	8002db8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c64:	4b4b      	ldr	r3, [pc, #300]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	4a4a      	ldr	r2, [pc, #296]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c70:	4b48      	ldr	r3, [pc, #288]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001c7c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c84:	2312      	movs	r3, #18
 8001c86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c96:	2304      	movs	r3, #4
 8001c98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	483d      	ldr	r0, [pc, #244]	; (8001d98 <HAL_I2C_MspInit+0x180>)
 8001ca4:	f00b ff68 	bl	800db78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ca8:	4b3a      	ldr	r3, [pc, #232]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	4a39      	ldr	r2, [pc, #228]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001cae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb4:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001cc0:	e061      	b.n	8001d86 <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a35      	ldr	r2, [pc, #212]	; (8001d9c <HAL_I2C_MspInit+0x184>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d15c      	bne.n	8001d86 <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd4:	f107 0320 	add.w	r3, r7, #32
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f00f fd8d 	bl	80117f8 <HAL_RCCEx_PeriphCLKConfig>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001ce4:	f001 f868 	bl	8002db8 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce8:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cec:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf4:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d00:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d04:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001d06:	f043 0302 	orr.w	r3, r3, #2
 8001d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001d18:	2310      	movs	r3, #16
 8001d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1e:	2312      	movs	r3, #18
 8001d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d30:	2304      	movs	r3, #4
 8001d32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4818      	ldr	r0, [pc, #96]	; (8001da0 <HAL_I2C_MspInit+0x188>)
 8001d3e:	f00b ff1b 	bl	800db78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4a:	2312      	movs	r3, #18
 8001d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d50:	2301      	movs	r3, #1
 8001d52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001d62:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d66:	4619      	mov	r1, r3
 8001d68:	480b      	ldr	r0, [pc, #44]	; (8001d98 <HAL_I2C_MspInit+0x180>)
 8001d6a:	f00b ff05 	bl	800db78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d78:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_I2C_MspInit+0x17c>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
}
 8001d86:	bf00      	nop
 8001d88:	37c0      	adds	r7, #192	; 0xc0
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40005400 	.word	0x40005400
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000400 	.word	0x48000400
 8001d9c:	40005800 	.word	0x40005800
 8001da0:	48001c00 	.word	0x48001c00

08001da4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a15      	ldr	r2, [pc, #84]	; (8001e08 <HAL_I2C_MspDeInit+0x64>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d10f      	bne.n	8001dd6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_I2C_MspDeInit+0x68>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <HAL_I2C_MspDeInit+0x68>)
 8001dbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dc0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001dc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc6:	4812      	ldr	r0, [pc, #72]	; (8001e10 <HAL_I2C_MspDeInit+0x6c>)
 8001dc8:	f00c f868 	bl	800de9c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	4810      	ldr	r0, [pc, #64]	; (8001e10 <HAL_I2C_MspDeInit+0x6c>)
 8001dd0:	f00c f864 	bl	800de9c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001dd4:	e013      	b.n	8001dfe <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C2)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_I2C_MspDeInit+0x70>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d10e      	bne.n	8001dfe <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_I2C_MspDeInit+0x68>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_I2C_MspDeInit+0x68>)
 8001de6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001dea:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin);
 8001dec:	2110      	movs	r1, #16
 8001dee:	480a      	ldr	r0, [pc, #40]	; (8001e18 <HAL_I2C_MspDeInit+0x74>)
 8001df0:	f00c f854 	bl	800de9c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin);
 8001df4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <HAL_I2C_MspDeInit+0x6c>)
 8001dfa:	f00c f84f 	bl	800de9c <HAL_GPIO_DeInit>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40005400 	.word	0x40005400
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	48000400 	.word	0x48000400
 8001e14:	40005800 	.word	0x40005800
 8001e18:	48001c00 	.word	0x48001c00

08001e1c <HAL_TIM_PeriodElapsedCallback>:
    char msg[16];
    sprintf(msg,"Er%d", err);
    while(1){};
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

	if(htim == &htim6) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d106      	bne.n	8001e3a <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL_GPIO_TogglePin(ARD_D7_GPIO_Port, ARD_D7_Pin); // test point for profiling
 8001e2c:	2140      	movs	r1, #64	; 0x40
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001e30:	f00c f93e 	bl	800e0b0 <HAL_GPIO_TogglePin>
		SAMPLE_SENSOR = true;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
	}

}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200017d0 	.word	0x200017d0
 8001e48:	48001800 	.word	0x48001800
 8001e4c:	20000ad8 	.word	0x20000ad8

08001e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b091      	sub	sp, #68	; 0x44
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e56:	f00a f8a9 	bl	800bfac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e5a:	f000 fcf1 	bl	8002840 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e5e:	f000 fd51 	bl	8002904 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e62:	f7ff fc99 	bl	8001798 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001e66:	f7fe ffbb 	bl	8000de0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001e6a:	f7ff f82f 	bl	8000ecc <MX_ADC2_Init>
  MX_ADC3_Init();
 8001e6e:	f7ff f891 	bl	8000f94 <MX_ADC3_Init>
  MX_DCMI_Init();
 8001e72:	f7ff f9c3 	bl	80011fc <MX_DCMI_Init>
  MX_DFSDM1_Init();
 8001e76:	f7ff fa75 	bl	8001364 <MX_DFSDM1_Init>
  MX_FMC_Init();
 8001e7a:	f7ff fb67 	bl	800154c <MX_FMC_Init>
  MX_I2C1_Init();
 8001e7e:	f7ff fe4b 	bl	8001b18 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001e82:	f7ff fe89 	bl	8001b98 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8001e86:	f001 fc97 	bl	80037b8 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001e8a:	f001 fcc3 	bl	8003814 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001e8e:	f001 fcf1 	bl	8003874 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8001e92:	f000 ff97 	bl	8002dc4 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001e96:	f001 f823 	bl	8002ee0 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8001e9a:	f001 f943 	bl	8003124 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8001e9e:	f001 f9d3 	bl	8003248 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001ea2:	f001 fa0f 	bl	80032c4 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8001ea6:	f017 fcd9 	bl	801985c <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8001eaa:	f001 fc29 	bl	8003700 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // above: MX_SDMMC1_SD_Init(); has to be commented out to not be called

  // lcd init
	if (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE) == LCD_ERROR) {
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f009 f86c 	bl	800af8c <BSP_LCD_InitEx>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <main+0x6e>
		Error_Handler();
 8001eba:	f000 ff7d 	bl	8002db8 <Error_Handler>
	}

	// touchscreen init
	if(BSP_TS_InitEx(BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), LCD_ORIENTATION_LANDSCAPE) != TS_OK) {
 8001ebe:	f009 f90b 	bl	800b0d8 <BSP_LCD_GetXSize>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b29c      	uxth	r4, r3
 8001ec6:	f009 f913 	bl	800b0f0 <BSP_LCD_GetYSize>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f009 fe4c 	bl	800bb70 <BSP_TS_InitEx>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <main+0x92>
		Error_Handler();
 8001ede:	f000 ff6b 	bl	8002db8 <Error_Handler>
	}

	// LED GPIO
	BSP_LED_Init(LED2_PIN); // LD1
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f008 f9fc 	bl	800a2e0 <BSP_LED_Init>
	BSP_LED_On(LED2_PIN); // LD1 orange turns on
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f008 fa47 	bl	800a37c <BSP_LED_On>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET); // LD2 green turns on
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef4:	48a8      	ldr	r0, [pc, #672]	; (8002198 <main+0x348>)
 8001ef6:	f00c f8c3 	bl	800e080 <HAL_GPIO_WritePin>
	// LD3 is attached to ARD_D13, which is not an output, it's attached to SPI
	HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET); // laser
 8001efa:	2200      	movs	r2, #0
 8001efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f00:	48a6      	ldr	r0, [pc, #664]	; (800219c <main+0x34c>)
 8001f02:	f00c f8bd 	bl	800e080 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET); // test point: timer frequency
 8001f06:	2200      	movs	r2, #0
 8001f08:	2140      	movs	r1, #64	; 0x40
 8001f0a:	48a5      	ldr	r0, [pc, #660]	; (80021a0 <main+0x350>)
 8001f0c:	f00c f8b8 	bl	800e080 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET); // turn on BT pwr transistor
 8001f10:	2201      	movs	r2, #1
 8001f12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f16:	48a2      	ldr	r0, [pc, #648]	; (80021a0 <main+0x350>)
 8001f18:	f00c f8b2 	bl	800e080 <HAL_GPIO_WritePin>


	// tof related
	VL53L0X_Dev_t *pDev;
	pDev = &VL53L0XDev;
 8001f1c:	4ba1      	ldr	r3, [pc, #644]	; (80021a4 <main+0x354>)
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	tofTestRegisterRead();
 8001f20:	f000 fd26 	bl	8002970 <tofTestRegisterRead>
	//tofInit();

	pDev->I2cDevAddr = 0x52;
 8001f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f26:	2252      	movs	r2, #82	; 0x52
 8001f28:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	pDev->Present = 0;
 8001f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

	int status = VL53L0X_DataInit(pDev);
 8001f34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f36:	f003 fe3f 	bl	8005bb8 <VL53L0X_DataInit>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
	if(status == 0) {
 8001f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d12d      	bne.n	8001fa0 <main+0x150>
			pDev->Present = 1;
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f46:	2201      	movs	r2, #1
 8001f48:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	} else {
			printf("VL53L0X_DataInit fail\n");
			return;
	}
	printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 8001f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f54:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4893      	ldr	r0, [pc, #588]	; (80021a8 <main+0x358>)
 8001f5c:	f018 fba8 	bl	801a6b0 <iprintf>
	pDev->Present = 1;
 8001f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f62:	2201      	movs	r2, #1
 8001f64:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

	// Initialize the device in continuous ranging mode
	VL53L0X_StaticInit(pDev);
 8001f68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f6a:	f003 ff89 	bl	8005e80 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 8001f6e:	4a8f      	ldr	r2, [pc, #572]	; (80021ac <main+0x35c>)
 8001f70:	498f      	ldr	r1, [pc, #572]	; (80021b0 <main+0x360>)
 8001f72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f74:	f004 fe34 	bl	8006be0 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 8001f78:	4a8e      	ldr	r2, [pc, #568]	; (80021b4 <main+0x364>)
 8001f7a:	498f      	ldr	r1, [pc, #572]	; (80021b8 <main+0x368>)
 8001f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f7e:	f005 fabd 	bl	80074fc <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, TIMED_RANGING_PERIOD);
 8001f82:	2132      	movs	r1, #50	; 0x32
 8001f84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f86:	f004 fb75 	bl	8006674 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
	VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 8001f8a:	2103      	movs	r1, #3
 8001f8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f8e:	f004 f989 	bl	80062a4 <VL53L0X_SetDeviceMode>
	VL53L0X_StartMeasurement(pDev);
 8001f92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f94:	f004 fea0 	bl	8006cd8 <VL53L0X_StartMeasurement>


	// sampling related
	for(uint8_t i=0; i<num_rangers; i++) {
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001f9e:	e054      	b.n	800204a <main+0x1fa>
			printf("VL53L0X_DataInit fail\n");
 8001fa0:	4886      	ldr	r0, [pc, #536]	; (80021bc <main+0x36c>)
 8001fa2:	f018 fc0b 	bl	801a7bc <puts>
			return;
 8001fa6:	f000 bc3b 	b.w	8002820 <main+0x9d0>
		struct Ranger *r = &rangers[i];
 8001faa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fae:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	4a82      	ldr	r2, [pc, #520]	; (80021c0 <main+0x370>)
 8001fb8:	4413      	add	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
		r->max = 0;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	801a      	strh	r2, [r3, #0]
		r->min = 0;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	805a      	strh	r2, [r3, #2]
		r->raw = 0;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	809a      	strh	r2, [r3, #4]
		r->raw_mm = 0.0;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
		r->raw_sum = 0.0;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
		r->sum_count = 0;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	821a      	strh	r2, [r3, #16]
		r->sum_skip = 0;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	825a      	strh	r2, [r3, #18]
		r->mm_avg = 0.0;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	615a      	str	r2, [r3, #20]
		r->record_index = 0;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	831a      	strh	r2, [r3, #24]
		for(uint16_t j=0; j<MAX_RECORDS; j++) {
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001ffc:	e00b      	b.n	8002016 <main+0x1c6>
			r->records[j] = 0.0;
 8001ffe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	3306      	adds	r3, #6
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	3304      	adds	r3, #4
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
		for(uint16_t j=0; j<MAX_RECORDS; j++) {
 8002010:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002012:	3301      	adds	r3, #1
 8002014:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002016:	4b6b      	ldr	r3, [pc, #428]	; (80021c4 <main+0x374>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800201c:	429a      	cmp	r2, r3
 800201e:	d3ee      	bcc.n	8001ffe <main+0x1ae>
		}
		r->process_records = false;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
		r->record_sum = 0.0;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
		r->val = 0.0;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f203 43d4 	addw	r3, r3, #1236	; 0x4d4
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<num_rangers; i++) {
 8002040:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002044:	3301      	adds	r3, #1
 8002046:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800204a:	4b5f      	ldr	r3, [pc, #380]	; (80021c8 <main+0x378>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002052:	429a      	cmp	r2, r3
 8002054:	d3a9      	bcc.n	8001faa <main+0x15a>
	}
	rangers[0].max = 3000; // mm sonar
 8002056:	4b5a      	ldr	r3, [pc, #360]	; (80021c0 <main+0x370>)
 8002058:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800205c:	801a      	strh	r2, [r3, #0]
	rangers[0].min = 150;
 800205e:	4b58      	ldr	r3, [pc, #352]	; (80021c0 <main+0x370>)
 8002060:	2296      	movs	r2, #150	; 0x96
 8002062:	805a      	strh	r2, [r3, #2]
	rangers[1].max = 500; // mm tof
 8002064:	4b56      	ldr	r3, [pc, #344]	; (80021c0 <main+0x370>)
 8002066:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800206a:	f8a3 24d8 	strh.w	r2, [r3, #1240]	; 0x4d8
	rangers[1].min = 10;
 800206e:	4b54      	ldr	r3, [pc, #336]	; (80021c0 <main+0x370>)
 8002070:	220a      	movs	r2, #10
 8002072:	f8a3 24da 	strh.w	r2, [r3, #1242]	; 0x4da


	// ui related
	uiSetup();
 8002076:	f000 fd07 	bl	8002a88 <uiSetup>


	// start timer
  HAL_TIM_Base_Start_IT(&htim6);
 800207a:	4854      	ldr	r0, [pc, #336]	; (80021cc <main+0x37c>)
 800207c:	f012 f830 	bl	80140e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	// wake from event, the first thing seen after exiting sleep mode
  	if(SLEEP_MODE_ACTIVE) {
 8002080:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <main+0x380>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d021      	beq.n	80020cc <main+0x27c>
			reconfigureFromSleep();
 8002088:	f000 fd9a 	bl	8002bc0 <reconfigureFromSleep>
			awakeFromSleep();
 800208c:	f000 fda6 	bl	8002bdc <awakeFromSleep>
			// refresh ui
			for(uint8_t i=0; i<num_bubbles; i++) {
 8002090:	2300      	movs	r3, #0
 8002092:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002096:	e010      	b.n	80020ba <main+0x26a>
				struct Bubble *b = &ui_bubbles[i];
 8002098:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4a4b      	ldr	r2, [pc, #300]	; (80021d4 <main+0x384>)
 80020a6:	4413      	add	r3, r2
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
				b->redraw = true;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	2201      	movs	r2, #1
 80020ae:	739a      	strb	r2, [r3, #14]
			for(uint8_t i=0; i<num_bubbles; i++) {
 80020b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80020b4:	3301      	adds	r3, #1
 80020b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80020ba:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <main+0x388>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d3e8      	bcc.n	8002098 <main+0x248>
			}
			bubble_label_redraw = true;
 80020c6:	4b45      	ldr	r3, [pc, #276]	; (80021dc <main+0x38c>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
		}


  	// flag set from interrupt to enter in to sleep mode
  	if(ENTER_SLEEP_MODE) {
 80020cc:	4b44      	ldr	r3, [pc, #272]	; (80021e0 <main+0x390>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <main+0x294>
  		enterSleep();
 80020d4:	f000 fdd2 	bl	8002c7c <enterSleep>
  		HAL_SuspendTick();
 80020d8:	f00a f800 	bl	800c0dc <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE); // left button configured as event
 80020dc:	2102      	movs	r1, #2
 80020de:	2000      	movs	r0, #0
 80020e0:	f00e fb8a 	bl	80107f8 <HAL_PWR_EnterSLEEPMode>


  	// processing the sensor data
  	// sampling every 50 ms
  	// flag set from timer
  	if(SAMPLE_SENSOR) {
 80020e4:	4b3f      	ldr	r3, [pc, #252]	; (80021e4 <main+0x394>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8138 	beq.w	800235e <main+0x50e>

  		// get sonar adc value
			// "10-bit ADC, divide the ADC output by 2 for the range in inches."
			HAL_ADC_Start(&hadc1);
 80020ee:	483e      	ldr	r0, [pc, #248]	; (80021e8 <main+0x398>)
 80020f0:	f00a fb64 	bl	800c7bc <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020f8:	483b      	ldr	r0, [pc, #236]	; (80021e8 <main+0x398>)
 80020fa:	f00a fc19 	bl	800c930 <HAL_ADC_PollForConversion>
			rangers[0].raw = HAL_ADC_GetValue(&hadc1);
 80020fe:	483a      	ldr	r0, [pc, #232]	; (80021e8 <main+0x398>)
 8002100:	f00a fcee 	bl	800cae0 <HAL_ADC_GetValue>
 8002104:	4603      	mov	r3, r0
 8002106:	b29a      	uxth	r2, r3
 8002108:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <main+0x370>)
 800210a:	809a      	strh	r2, [r3, #4]
			rangers[0].raw_mm = (float)(rangers[0].raw/2.0)*2.54*10;
 800210c:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <main+0x370>)
 800210e:	889b      	ldrh	r3, [r3, #4]
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fa17 	bl	8000544 <__aeabi_i2d>
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800211e:	f7fe fba5 	bl	800086c <__aeabi_ddiv>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	f7fe fc87 	bl	8000a3c <__aeabi_d2f>
 800212e:	4603      	mov	r3, r0
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fa19 	bl	8000568 <__aeabi_f2d>
 8002136:	a316      	add	r3, pc, #88	; (adr r3, 8002190 <main+0x340>)
 8002138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213c:	f7fe fa6c 	bl	8000618 <__aeabi_dmul>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <main+0x39c>)
 800214e:	f7fe fa63 	bl	8000618 <__aeabi_dmul>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	f7fe fc6f 	bl	8000a3c <__aeabi_d2f>
 800215e:	4603      	mov	r3, r0
 8002160:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <main+0x370>)
 8002162:	6093      	str	r3, [r2, #8]

			// get time of flight i2c value
			VL53L0X_GetRangingMeasurementData(pDev, &RangingMeasurementData);
 8002164:	4922      	ldr	r1, [pc, #136]	; (80021f0 <main+0x3a0>)
 8002166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002168:	f004 feb8 	bl	8006edc <VL53L0X_GetRangingMeasurementData>
			rangers[1].raw_mm = RangingMeasurementData.RangeMilliMeter; // mm
 800216c:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <main+0x3a0>)
 800216e:	891b      	ldrh	r3, [r3, #8]
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <main+0x370>)
 800217a:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 800217e:	edc3 7a00 	vstr	s15, [r3]

			// RAN_

			for(uint8_t i=0; i<num_rangers; i++) {
 8002182:	2300      	movs	r3, #0
 8002184:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002188:	e0df      	b.n	800234a <main+0x4fa>
 800218a:	bf00      	nop
 800218c:	f3af 8000 	nop.w
 8002190:	851eb852 	.word	0x851eb852
 8002194:	400451eb 	.word	0x400451eb
 8002198:	48000400 	.word	0x48000400
 800219c:	48002000 	.word	0x48002000
 80021a0:	48001800 	.word	0x48001800
 80021a4:	20000004 	.word	0x20000004
 80021a8:	0801b8dc 	.word	0x0801b8dc
 80021ac:	20000b5d 	.word	0x20000b5d
 80021b0:	20000b5c 	.word	0x20000b5c
 80021b4:	20000b64 	.word	0x20000b64
 80021b8:	20000b60 	.word	0x20000b60
 80021bc:	0801b8c4 	.word	0x0801b8c4
 80021c0:	20000b68 	.word	0x20000b68
 80021c4:	20000198 	.word	0x20000198
 80021c8:	20000194 	.word	0x20000194
 80021cc:	200017d0 	.word	0x200017d0
 80021d0:	20000ada 	.word	0x20000ada
 80021d4:	20000af0 	.word	0x20000af0
 80021d8:	20000001 	.word	0x20000001
 80021dc:	20000002 	.word	0x20000002
 80021e0:	20000adb 	.word	0x20000adb
 80021e4:	20000ad8 	.word	0x20000ad8
 80021e8:	20000768 	.word	0x20000768
 80021ec:	40240000 	.word	0x40240000
 80021f0:	20000b40 	.word	0x20000b40
				struct Ranger *r = &rangers[i];
 80021f4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80021f8:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	4a7a      	ldr	r2, [pc, #488]	; (80023ec <main+0x59c>)
 8002202:	4413      	add	r3, r2
 8002204:	623b      	str	r3, [r7, #32]

				// clamp the values between a min and max
				// if it doesn't fit, skip it
				if(r->raw_mm < r->max && r->raw_mm > r->min) {
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	ed93 7a02 	vldr	s14, [r3, #8]
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	ee07 3a90 	vmov	s15, r3
 8002214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002220:	d525      	bpl.n	800226e <main+0x41e>
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	ed93 7a02 	vldr	s14, [r3, #8]
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	885b      	ldrh	r3, [r3, #2]
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	dd17      	ble.n	800226e <main+0x41e>
					r->raw_sum += r->raw_mm;
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	ed93 7a03 	vldr	s14, [r3, #12]
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	edd3 7a02 	vldr	s15, [r3, #8]
 800224a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	edc3 7a03 	vstr	s15, [r3, #12]
					r->sum_count++;
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	8a1b      	ldrh	r3, [r3, #16]
 8002258:	3301      	adds	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	821a      	strh	r2, [r3, #16]
					HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_SET); // laser on
 8002260:	2201      	movs	r2, #1
 8002262:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002266:	4862      	ldr	r0, [pc, #392]	; (80023f0 <main+0x5a0>)
 8002268:	f00b ff0a 	bl	800e080 <HAL_GPIO_WritePin>
 800226c:	e00b      	b.n	8002286 <main+0x436>
				} else {
					r->sum_skip++;
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	8a5b      	ldrh	r3, [r3, #18]
 8002272:	3301      	adds	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	825a      	strh	r2, [r3, #18]
					HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET); // laser off
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002280:	485b      	ldr	r0, [pc, #364]	; (80023f0 <main+0x5a0>)
 8002282:	f00b fefd 	bl	800e080 <HAL_GPIO_WritePin>
				}

				uint16_t total_sum = r->sum_count + r->sum_skip;
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	8a1a      	ldrh	r2, [r3, #16]
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	8a5b      	ldrh	r3, [r3, #18]
 800228e:	4413      	add	r3, r2
 8002290:	83fb      	strh	r3, [r7, #30]

				// check for when the count matches the sample rate
				if(total_sum >= RANGER_SAMPLE_RATE) {
 8002292:	8bfb      	ldrh	r3, [r7, #30]
 8002294:	2b13      	cmp	r3, #19
 8002296:	d942      	bls.n	800231e <main+0x4ce>

					if(r->sum_count > 0) {
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	8a1b      	ldrh	r3, [r3, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00e      	beq.n	80022be <main+0x46e>
						r->mm_avg = r->raw_sum / (float)r->sum_count; // get the average
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	edd3 6a03 	vldr	s13, [r3, #12]
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	8a1b      	ldrh	r3, [r3, #16]
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	edc3 7a05 	vstr	s15, [r3, #20]
 80022bc:	e003      	b.n	80022c6 <main+0x476>
					} else {
						r->mm_avg = 0.0; // clamp to 0 if there was nothing added
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	615a      	str	r2, [r3, #20]
					}

					// reset the counters
					r->raw_sum = 0;
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
					r->sum_count = 0;
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	2200      	movs	r2, #0
 80022d2:	821a      	strh	r2, [r3, #16]
					r->sum_skip = 0;
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	2200      	movs	r2, #0
 80022d8:	825a      	strh	r2, [r3, #18]

					// see if there's enough records ready to make the readout
					if(r->record_index < NUM_RECORDS && r->record_index < MAX_RECORDS) {
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	8b1a      	ldrh	r2, [r3, #24]
 80022de:	4b45      	ldr	r3, [pc, #276]	; (80023f4 <main+0x5a4>)
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d217      	bcs.n	8002316 <main+0x4c6>
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	8b1a      	ldrh	r2, [r3, #24]
 80022ea:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <main+0x5a8>)
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d211      	bcs.n	8002316 <main+0x4c6>
						r->records[r->record_index] = r->mm_avg;
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	8b1b      	ldrh	r3, [r3, #24]
 80022f6:	4618      	mov	r0, r3
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	6a39      	ldr	r1, [r7, #32]
 80022fe:	1d83      	adds	r3, r0, #6
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	3304      	adds	r3, #4
 8002306:	601a      	str	r2, [r3, #0]
						r->record_index++;
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	8b1b      	ldrh	r3, [r3, #24]
 800230c:	3301      	adds	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	831a      	strh	r2, [r3, #24]
 8002314:	e003      	b.n	800231e <main+0x4ce>
					} else {
						r->process_records = true;
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
					}

				}

				// update our live variables
				if(i==0) {
 800231e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002322:	2b00      	cmp	r3, #0
 8002324:	d104      	bne.n	8002330 <main+0x4e0>
					sonar_mm_avg = r->mm_avg;
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	4a34      	ldr	r2, [pc, #208]	; (80023fc <main+0x5ac>)
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e007      	b.n	8002340 <main+0x4f0>
				} else if(i==1) {
 8002330:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002334:	2b01      	cmp	r3, #1
 8002336:	d103      	bne.n	8002340 <main+0x4f0>
					tof_mm_avg = r->mm_avg;
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	4a30      	ldr	r2, [pc, #192]	; (8002400 <main+0x5b0>)
 800233e:	6013      	str	r3, [r2, #0]
			for(uint8_t i=0; i<num_rangers; i++) {
 8002340:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002344:	3301      	adds	r3, #1
 8002346:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800234a:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <main+0x5b4>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002352:	429a      	cmp	r2, r3
 8002354:	f4ff af4e 	bcc.w	80021f4 <main+0x3a4>

			} // end of rangers loop

			// hope all of this takes < 50 ms

  		SAMPLE_SENSOR = false; // set to true by timer
 8002358:	4b2b      	ldr	r3, [pc, #172]	; (8002408 <main+0x5b8>)
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]




  	// process the records
  	bool ready_to_process = false;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  	uint8_t ready_count = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  	for(uint8_t i=0; i<num_rangers; i++) {
 800236a:	2300      	movs	r3, #0
 800236c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002370:	e017      	b.n	80023a2 <main+0x552>
  		struct Ranger *r = &rangers[i];
 8002372:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002376:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <main+0x59c>)
 8002380:	4413      	add	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]
  		if(r->process_records == true) {
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800238a:	2b00      	cmp	r3, #0
 800238c:	d004      	beq.n	8002398 <main+0x548>
  			ready_count++;
 800238e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002392:	3301      	adds	r3, #1
 8002394:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  	for(uint8_t i=0; i<num_rangers; i++) {
 8002398:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800239c:	3301      	adds	r3, #1
 800239e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <main+0x5b4>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d3e1      	bcc.n	8002372 <main+0x522>
  		}
  	}
  	if(ready_count == num_rangers) {
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <main+0x5b4>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d102      	bne.n	80023c0 <main+0x570>
  		ready_to_process = true;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  	}
  	if(ready_to_process) {
 80023c0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8087 	beq.w	80024d8 <main+0x688>

  		for(uint8_t i=0; i<num_rangers; i++) {
 80023ca:	2300      	movs	r3, #0
 80023cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80023d0:	e05c      	b.n	800248c <main+0x63c>
				struct Ranger *r = &rangers[i];
 80023d2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80023d6:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	4a03      	ldr	r2, [pc, #12]	; (80023ec <main+0x59c>)
 80023e0:	4413      	add	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]

				for(uint16_t j=0; j<r->record_index; j++) {
 80023e4:	2300      	movs	r3, #0
 80023e6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80023e8:	e027      	b.n	800243a <main+0x5ea>
 80023ea:	bf00      	nop
 80023ec:	20000b68 	.word	0x20000b68
 80023f0:	48002000 	.word	0x48002000
 80023f4:	20000196 	.word	0x20000196
 80023f8:	20000198 	.word	0x20000198
 80023fc:	20001518 	.word	0x20001518
 8002400:	2000151c 	.word	0x2000151c
 8002404:	20000194 	.word	0x20000194
 8002408:	20000ad8 	.word	0x20000ad8
					r->record_sum += r->records[j];
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8002412:	ed93 7a00 	vldr	s14, [r3]
 8002416:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	3306      	adds	r3, #6
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	3304      	adds	r3, #4
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8002430:	edc3 7a00 	vstr	s15, [r3]
				for(uint16_t j=0; j<r->record_index; j++) {
 8002434:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002436:	3301      	adds	r3, #1
 8002438:	86bb      	strh	r3, [r7, #52]	; 0x34
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	8b1b      	ldrh	r3, [r3, #24]
 800243e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002440:	429a      	cmp	r2, r3
 8002442:	d3e3      	bcc.n	800240c <main+0x5bc>
				}

				// record average
				r->val = r->record_sum/r->record_index;
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 800244a:	edd3 6a00 	vldr	s13, [r3]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	8b1b      	ldrh	r3, [r3, #24]
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800245a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f203 43d4 	addw	r3, r3, #1236	; 0x4d4
 8002464:	edc3 7a00 	vstr	s15, [r3]

				// reset counters
				r->record_index = 0;
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2200      	movs	r2, #0
 800246c:	831a      	strh	r2, [r3, #24]
				r->record_sum = 0.0;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	601a      	str	r2, [r3, #0]

				// reset this flag
				r->process_records = false;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  		for(uint8_t i=0; i<num_rangers; i++) {
 8002482:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002486:	3301      	adds	r3, #1
 8002488:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800248c:	4b97      	ldr	r3, [pc, #604]	; (80026ec <main+0x89c>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002494:	429a      	cmp	r2, r3
 8002496:	d39c      	bcc.n	80023d2 <main+0x582>
			}

  		// hooray! we have the value!
  		result_distance = (alpha*rangers[1].val) + ( (1-alpha)*rangers[0].val);
 8002498:	4b95      	ldr	r3, [pc, #596]	; (80026f0 <main+0x8a0>)
 800249a:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 800249e:	ed93 7a00 	vldr	s14, [r3]
 80024a2:	4b94      	ldr	r3, [pc, #592]	; (80026f4 <main+0x8a4>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ac:	4b91      	ldr	r3, [pc, #580]	; (80026f4 <main+0x8a4>)
 80024ae:	edd3 7a00 	vldr	s15, [r3]
 80024b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024ba:	4b8d      	ldr	r3, [pc, #564]	; (80026f0 <main+0x8a0>)
 80024bc:	f203 43d4 	addw	r3, r3, #1236	; 0x4d4
 80024c0:	edd3 7a00 	vldr	s15, [r3]
 80024c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024cc:	4b8a      	ldr	r3, [pc, #552]	; (80026f8 <main+0x8a8>)
 80024ce:	edc3 7a00 	vstr	s15, [r3]
  		UPDATE_RESULT = true;
 80024d2:	4b8a      	ldr	r3, [pc, #552]	; (80026fc <main+0x8ac>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]




  	// send the result distance over bt to our app
  	if(UPDATE_RESULT) {
 80024d8:	4b88      	ldr	r3, [pc, #544]	; (80026fc <main+0x8ac>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d02f      	beq.n	8002540 <main+0x6f0>

			// this should already be on, but let's do it again just in case...
			// turn on BT pwr transistor
  		HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET);
 80024e0:	2201      	movs	r2, #1
 80024e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024e6:	4886      	ldr	r0, [pc, #536]	; (8002700 <main+0x8b0>)
 80024e8:	f00b fdca 	bl	800e080 <HAL_GPIO_WritePin>

  		// send to uart
  		if(result_distance > 0) {
 80024ec:	4b82      	ldr	r3, [pc, #520]	; (80026f8 <main+0x8a8>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fa:	dd0d      	ble.n	8002518 <main+0x6c8>
				sprintf((char*)buf, "%d;", (uint16_t)result_distance);
 80024fc:	4b7e      	ldr	r3, [pc, #504]	; (80026f8 <main+0x8a8>)
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002506:	ee17 3a90 	vmov	r3, s15
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	497d      	ldr	r1, [pc, #500]	; (8002704 <main+0x8b4>)
 8002510:	487d      	ldr	r0, [pc, #500]	; (8002708 <main+0x8b8>)
 8002512:	f018 f96b 	bl	801a7ec <siprintf>
 8002516:	e005      	b.n	8002524 <main+0x6d4>
			} else {
				sprintf((char*)buf, "%d;", -1);
 8002518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800251c:	4979      	ldr	r1, [pc, #484]	; (8002704 <main+0x8b4>)
 800251e:	487a      	ldr	r0, [pc, #488]	; (8002708 <main+0x8b8>)
 8002520:	f018 f964 	bl	801a7ec <siprintf>
			}
			HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8002524:	4878      	ldr	r0, [pc, #480]	; (8002708 <main+0x8b8>)
 8002526:	f7fd fe63 	bl	80001f0 <strlen>
 800252a:	4603      	mov	r3, r0
 800252c:	b29a      	uxth	r2, r3
 800252e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002532:	4975      	ldr	r1, [pc, #468]	; (8002708 <main+0x8b8>)
 8002534:	4875      	ldr	r0, [pc, #468]	; (800270c <main+0x8bc>)
 8002536:	f012 ff1d 	bl	8015374 <HAL_UART_Transmit>

  		// update lcd
			// TODO

  		UPDATE_RESULT = false;
 800253a:	4b70      	ldr	r3, [pc, #448]	; (80026fc <main+0x8ac>)
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]




		// update ui
		for(uint8_t i=0; i<num_bubbles; i++) {
 8002540:	2300      	movs	r3, #0
 8002542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002546:	e00f      	b.n	8002568 <main+0x718>
			drawBubble(&ui_bubbles[i]);
 8002548:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4a6e      	ldr	r2, [pc, #440]	; (8002710 <main+0x8c0>)
 8002556:	4413      	add	r3, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fa29 	bl	80029b0 <drawBubble>
		for(uint8_t i=0; i<num_bubbles; i++) {
 800255e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002562:	3301      	adds	r3, #1
 8002564:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002568:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <main+0x8c4>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002570:	429a      	cmp	r2, r3
 8002572:	d3e9      	bcc.n	8002548 <main+0x6f8>
		}
		if(bubble_label_redraw) {
 8002574:	4b68      	ldr	r3, [pc, #416]	; (8002718 <main+0x8c8>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00f      	beq.n	800259c <main+0x74c>
			BSP_LCD_SetTextColor( LCD_COLOR_DARKGREEN );
 800257c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002580:	f008 fdc2 	bl	800b108 <BSP_LCD_SetTextColor>
			BSP_LCD_SetFont(&Font24);
 8002584:	4865      	ldr	r0, [pc, #404]	; (800271c <main+0x8cc>)
 8002586:	f008 fdcf 	bl	800b128 <BSP_LCD_SetFont>
			//BSP_LCD_DisplayStringAt(0, 90, (uint8_t *)" 10   30   90", LEFT_MODE);
			BSP_LCD_DisplayStringAt(0, 90, (uint8_t *)" 2   5   10", LEFT_MODE);
 800258a:	2303      	movs	r3, #3
 800258c:	4a64      	ldr	r2, [pc, #400]	; (8002720 <main+0x8d0>)
 800258e:	215a      	movs	r1, #90	; 0x5a
 8002590:	2000      	movs	r0, #0
 8002592:	f008 fe39 	bl	800b208 <BSP_LCD_DisplayStringAt>
			bubble_label_redraw = false;
 8002596:	4b60      	ldr	r3, [pc, #384]	; (8002718 <main+0x8c8>)
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
		}

		// update ts
		BSP_TS_GetState(&ts_result);
 800259c:	4861      	ldr	r0, [pc, #388]	; (8002724 <main+0x8d4>)
 800259e:	f009 fb6f 	bl	800bc80 <BSP_TS_GetState>
		uint8_t num_touches = ts_result.touchDetected;
 80025a2:	4b60      	ldr	r3, [pc, #384]	; (8002724 <main+0x8d4>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	75fb      	strb	r3, [r7, #23]

		// wake up the screen on touch
		if(num_touches > 0 && DIMMED_SCREEN == true) {
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00d      	beq.n	80025ca <main+0x77a>
 80025ae:	4b5e      	ldr	r3, [pc, #376]	; (8002728 <main+0x8d8>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d009      	beq.n	80025ca <main+0x77a>
			BSP_LCD_ScreenDimmingOff();
 80025b6:	f009 f997 	bl	800b8e8 <BSP_LCD_ScreenDimmingOff>
			DIMMED_SCREEN = false;
 80025ba:	4b5b      	ldr	r3, [pc, #364]	; (8002728 <main+0x8d8>)
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
			last_ts = HAL_GetTick();
 80025c0:	f009 fd5c 	bl	800c07c <HAL_GetTick>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4a59      	ldr	r2, [pc, #356]	; (800272c <main+0x8dc>)
 80025c8:	6013      	str	r3, [r2, #0]
		}

		// hit testing selected bubbles
		for(uint8_t i=0; i<num_touches; i++) {
 80025ca:	2300      	movs	r3, #0
 80025cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80025d0:	e0e4      	b.n	800279c <main+0x94c>
			Point touch;
			touch.X = ts_result.touchX[i];
 80025d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80025d6:	4a53      	ldr	r2, [pc, #332]	; (8002724 <main+0x8d4>)
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	885b      	ldrh	r3, [r3, #2]
 80025de:	b21b      	sxth	r3, r3
 80025e0:	80bb      	strh	r3, [r7, #4]
			touch.Y = ts_result.touchY[i];
 80025e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80025e6:	4a4f      	ldr	r2, [pc, #316]	; (8002724 <main+0x8d4>)
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4413      	add	r3, r2
 80025ec:	88db      	ldrh	r3, [r3, #6]
 80025ee:	b21b      	sxth	r3, r3
 80025f0:	80fb      	strh	r3, [r7, #6]

			for(uint8_t j=0; j<num_bubbles; j++) {
 80025f2:	2300      	movs	r3, #0
 80025f4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80025f8:	e0c4      	b.n	8002784 <main+0x934>
				struct Bubble *b = &ui_bubbles[j];
 80025fa:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4a42      	ldr	r2, [pc, #264]	; (8002710 <main+0x8c0>)
 8002608:	4413      	add	r3, r2
 800260a:	613b      	str	r3, [r7, #16]

				// hit testing
				if(touch.X < b->x + b->hit_diameter && touch.X > b->x - b->hit_diameter) {
 800260c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002610:	461a      	mov	r2, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	4619      	mov	r1, r3
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	88db      	ldrh	r3, [r3, #6]
 800261c:	440b      	add	r3, r1
 800261e:	429a      	cmp	r2, r3
 8002620:	f280 80ab 	bge.w	800277a <main+0x92a>
 8002624:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002628:	461a      	mov	r2, r3
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	4619      	mov	r1, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	88db      	ldrh	r3, [r3, #6]
 8002634:	1acb      	subs	r3, r1, r3
 8002636:	429a      	cmp	r2, r3
 8002638:	f340 809f 	ble.w	800277a <main+0x92a>
					if(touch.Y < b->y + b->hit_diameter && touch.Y > b->y - b->hit_diameter) {
 800263c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002640:	461a      	mov	r2, r3
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	885b      	ldrh	r3, [r3, #2]
 8002646:	4619      	mov	r1, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	88db      	ldrh	r3, [r3, #6]
 800264c:	440b      	add	r3, r1
 800264e:	429a      	cmp	r2, r3
 8002650:	f280 8093 	bge.w	800277a <main+0x92a>
 8002654:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002658:	461a      	mov	r2, r3
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	885b      	ldrh	r3, [r3, #2]
 800265e:	4619      	mov	r1, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	88db      	ldrh	r3, [r3, #6]
 8002664:	1acb      	subs	r3, r1, r3
 8002666:	429a      	cmp	r2, r3
 8002668:	f340 8087 	ble.w	800277a <main+0x92a>

						if(b->type == 1) { // ui bubbles
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	7bdb      	ldrb	r3, [r3, #15]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d15f      	bne.n	8002734 <main+0x8e4>

							if(!b->selected) { // not selected prior
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	7a1b      	ldrb	r3, [r3, #8]
 8002678:	f083 0301 	eor.w	r3, r3, #1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d07b      	beq.n	800277a <main+0x92a>
								b->selected = !b->selected;
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	7a1b      	ldrb	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	bf14      	ite	ne
 800268a:	2301      	movne	r3, #1
 800268c:	2300      	moveq	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	b2da      	uxtb	r2, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	721a      	strb	r2, [r3, #8]
								deselectBubbles(j); // "single touch"
 80026a0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f9bb 	bl	8002a20 <deselectBubbles>
								b->redraw = true;
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2201      	movs	r2, #1
 80026ae:	739a      	strb	r2, [r3, #14]
								b->last_selected = HAL_GetTick();
 80026b0:	f009 fce4 	bl	800c07c <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	611a      	str	r2, [r3, #16]

								// update the number of records
								if(j==0) {
 80026ba:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d103      	bne.n	80026ca <main+0x87a>
									NUM_RECORDS = 2;
 80026c2:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <main+0x8e0>)
 80026c4:	2202      	movs	r2, #2
 80026c6:	801a      	strh	r2, [r3, #0]
 80026c8:	e057      	b.n	800277a <main+0x92a>
								} else if(j==1) {
 80026ca:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d103      	bne.n	80026da <main+0x88a>
									NUM_RECORDS = 5;
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <main+0x8e0>)
 80026d4:	2205      	movs	r2, #5
 80026d6:	801a      	strh	r2, [r3, #0]
 80026d8:	e04f      	b.n	800277a <main+0x92a>
								} else if(j==2) {
 80026da:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d14b      	bne.n	800277a <main+0x92a>
									NUM_RECORDS = 10;
 80026e2:	4b13      	ldr	r3, [pc, #76]	; (8002730 <main+0x8e0>)
 80026e4:	220a      	movs	r2, #10
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	e047      	b.n	800277a <main+0x92a>
 80026ea:	bf00      	nop
 80026ec:	20000194 	.word	0x20000194
 80026f0:	20000b68 	.word	0x20000b68
 80026f4:	2000019c 	.word	0x2000019c
 80026f8:	20001520 	.word	0x20001520
 80026fc:	20001524 	.word	0x20001524
 8002700:	48001800 	.word	0x48001800
 8002704:	0801b90c 	.word	0x0801b90c
 8002708:	20000ae4 	.word	0x20000ae4
 800270c:	200018a0 	.word	0x200018a0
 8002710:	20000af0 	.word	0x20000af0
 8002714:	20000001 	.word	0x20000001
 8002718:	20000002 	.word	0x20000002
 800271c:	20000540 	.word	0x20000540
 8002720:	0801b910 	.word	0x0801b910
 8002724:	20000ac8 	.word	0x20000ac8
 8002728:	20000ad9 	.word	0x20000ad9
 800272c:	20000ad4 	.word	0x20000ad4
 8002730:	20000196 	.word	0x20000196
								}

							}

						} else if(b->type == 2) { // go bubble
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	7bdb      	ldrb	r3, [r3, #15]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d11e      	bne.n	800277a <main+0x92a>

							if(HAL_GetTick()-b->last_selected > 80) { // 80 ms debounce
 800273c:	f009 fc9e 	bl	800c07c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b50      	cmp	r3, #80	; 0x50
 800274a:	d916      	bls.n	800277a <main+0x92a>
								b->selected = !b->selected;
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	7a1b      	ldrb	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f083 0301 	eor.w	r3, r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	b2da      	uxtb	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	721a      	strb	r2, [r3, #8]
								b->redraw = true;
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2201      	movs	r2, #1
 800276e:	739a      	strb	r2, [r3, #14]
								b->last_selected = HAL_GetTick();
 8002770:	f009 fc84 	bl	800c07c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	611a      	str	r2, [r3, #16]
			for(uint8_t j=0; j<num_bubbles; j++) {
 800277a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800277e:	3301      	adds	r3, #1
 8002780:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8002784:	4b29      	ldr	r3, [pc, #164]	; (800282c <main+0x9dc>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800278c:	429a      	cmp	r2, r3
 800278e:	f4ff af34 	bcc.w	80025fa <main+0x7aa>
		for(uint8_t i=0; i<num_touches; i++) {
 8002792:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002796:	3301      	adds	r3, #1
 8002798:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800279c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	f4ff af15 	bcc.w	80025d2 <main+0x782>
		// imagine the case where gettick has overflowed, but last_ts has not
		// eg 100-30000
		// abs could be used to prevent this from being a negative number, however
		// in this case, it is not needed, because two unsigned integers being
		// subtracted results in an unsigned integer
		if( HAL_GetTick()-last_ts >= 5000 && DIMMED_SCREEN == false) {
 80027a8:	f009 fc68 	bl	800c07c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <main+0x9e0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3287 	movw	r2, #4999	; 0x1387
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d911      	bls.n	80027e0 <main+0x990>
 80027bc:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <main+0x9e4>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	f083 0301 	eor.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <main+0x990>
			//BSP_LCD_ScreenDimmingConfig(100, 5, 5, 20); // 100-5=95/5=19*20=380ms
			BSP_LCD_ScreenDimmingConfig(100, 5, 5, 1); // 100-5=95/5=19*20=380ms
 80027ca:	2301      	movs	r3, #1
 80027cc:	2205      	movs	r2, #5
 80027ce:	2105      	movs	r1, #5
 80027d0:	2064      	movs	r0, #100	; 0x64
 80027d2:	f008 ff5d 	bl	800b690 <BSP_LCD_ScreenDimmingConfig>
			BSP_LCD_ScreenDimmingOn();
 80027d6:	f008 ff8d 	bl	800b6f4 <BSP_LCD_ScreenDimmingOn>
			DIMMED_SCREEN = true;
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <main+0x9e4>)
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
		}


		// led heartbeat
		if(TimingDelay == 0) {
 80027e0:	4b15      	ldr	r3, [pc, #84]	; (8002838 <main+0x9e8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f47f ac4b 	bne.w	8002080 <main+0x230>
			if(led_on) {
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <main+0x9ec>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <main+0x9aa>
				BSP_LED_On(LED2_PIN); // LD1 orange
 80027f2:	2000      	movs	r0, #0
 80027f4:	f007 fdc2 	bl	800a37c <BSP_LED_On>
 80027f8:	e002      	b.n	8002800 <main+0x9b0>
			} else {
				BSP_LED_Off(LED2_PIN); // LD1 orange
 80027fa:	2000      	movs	r0, #0
 80027fc:	f007 fde0 	bl	800a3c0 <BSP_LED_Off>
			}
			led_on = !led_on;
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <main+0x9ec>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf14      	ite	ne
 8002808:	2301      	movne	r3, #1
 800280a:	2300      	moveq	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f083 0301 	eor.w	r3, r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <main+0x9ec>)
 800281c:	701a      	strb	r2, [r3, #0]
  {
 800281e:	e42f      	b.n	8002080 <main+0x230>
			return;
 8002820:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8002822:	4618      	mov	r0, r3
 8002824:	3744      	adds	r7, #68	; 0x44
 8002826:	46bd      	mov	sp, r7
 8002828:	bd90      	pop	{r4, r7, pc}
 800282a:	bf00      	nop
 800282c:	20000001 	.word	0x20000001
 8002830:	20000ad4 	.word	0x20000ad4
 8002834:	20000ad9 	.word	0x20000ad9
 8002838:	20000ae0 	.word	0x20000ae0
 800283c:	20000adc 	.word	0x20000adc

08002840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b096      	sub	sp, #88	; 0x58
 8002844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	2244      	movs	r2, #68	; 0x44
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f017 fe46 	bl	801a4e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002854:	463b      	mov	r3, r7
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	60da      	str	r2, [r3, #12]
 8002860:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002862:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002866:	f00e f809 	bl	801087c <HAL_PWREx_ControlVoltageScaling>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002870:	f000 faa2 	bl	8002db8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002874:	f00d ffb0 	bl	80107d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002878:	4b21      	ldr	r3, [pc, #132]	; (8002900 <SystemClock_Config+0xc0>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	4a20      	ldr	r2, [pc, #128]	; (8002900 <SystemClock_Config+0xc0>)
 8002880:	f023 0318 	bic.w	r3, r3, #24
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002888:	2314      	movs	r3, #20
 800288a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800288c:	2301      	movs	r3, #1
 800288e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002890:	2301      	movs	r3, #1
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002898:	2360      	movs	r3, #96	; 0x60
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800289c:	2302      	movs	r3, #2
 800289e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80028a0:	2301      	movs	r3, #1
 80028a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80028a4:	2301      	movs	r3, #1
 80028a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80028a8:	2318      	movs	r3, #24
 80028aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028ac:	2302      	movs	r3, #2
 80028ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80028b0:	2302      	movs	r3, #2
 80028b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028b4:	2302      	movs	r3, #2
 80028b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	4618      	mov	r0, r3
 80028be:	f00e f95d 	bl	8010b7c <HAL_RCC_OscConfig>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80028c8:	f000 fa76 	bl	8002db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028cc:	230f      	movs	r3, #15
 80028ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028d0:	2303      	movs	r3, #3
 80028d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028e0:	463b      	mov	r3, r7
 80028e2:	2102      	movs	r1, #2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f00e fd63 	bl	80113b0 <HAL_RCC_ClockConfig>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80028f0:	f000 fa62 	bl	8002db8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80028f4:	f010 f834 	bl	8012960 <HAL_RCCEx_EnableMSIPLLMode>
}
 80028f8:	bf00      	nop
 80028fa:	3758      	adds	r7, #88	; 0x58
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000

08002904 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b0a4      	sub	sp, #144	; 0x90
 8002908:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	228c      	movs	r2, #140	; 0x8c
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f017 fde5 	bl	801a4e0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 8002916:	4b14      	ldr	r3, [pc, #80]	; (8002968 <PeriphCommonClock_Config+0x64>)
 8002918:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800291a:	2300      	movs	r3, #0
 800291c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800291e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002922:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002926:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800292a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800292c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002930:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002932:	2301      	movs	r3, #1
 8002934:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002936:	2301      	movs	r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800293a:	2318      	movs	r3, #24
 800293c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800293e:	2302      	movs	r3, #2
 8002940:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002942:	2302      	movs	r3, #2
 8002944:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002946:	2302      	movs	r3, #2
 8002948:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <PeriphCommonClock_Config+0x68>)
 800294c:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800294e:	1d3b      	adds	r3, r7, #4
 8002950:	4618      	mov	r0, r3
 8002952:	f00e ff51 	bl	80117f8 <HAL_RCCEx_PeriphCLKConfig>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800295c:	f000 fa2c 	bl	8002db8 <Error_Handler>
  }
}
 8002960:	bf00      	nop
 8002962:	3790      	adds	r7, #144	; 0x90
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	00086800 	.word	0x00086800
 800296c:	01110000 	.word	0x01110000

08002970 <tofTestRegisterRead>:

/* USER CODE BEGIN 4 */

void tofTestRegisterRead(void) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;
	uint8_t pData;
	status = HAL_I2C_Mem_Read(&hi2c1, 0x52, 0xC0, 1, &pData, 1, HAL_TIMEOUT);
 8002976:	2303      	movs	r3, #3
 8002978:	9302      	str	r3, [sp, #8]
 800297a:	2301      	movs	r3, #1
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	1dbb      	adds	r3, r7, #6
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	2301      	movs	r3, #1
 8002984:	22c0      	movs	r2, #192	; 0xc0
 8002986:	2152      	movs	r1, #82	; 0x52
 8002988:	4807      	ldr	r0, [pc, #28]	; (80029a8 <tofTestRegisterRead+0x38>)
 800298a:	f00b ff7f 	bl	800e88c <HAL_I2C_Mem_Read>
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
	// pData should be 0xEE
	if(status == HAL_OK) {
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <tofTestRegisterRead+0x2e>
		printf("good");
 8002998:	4804      	ldr	r0, [pc, #16]	; (80029ac <tofTestRegisterRead+0x3c>)
 800299a:	f017 fe89 	bl	801a6b0 <iprintf>
	}
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000a20 	.word	0x20000a20
 80029ac:	0801b91c 	.word	0x0801b91c

080029b0 <drawBubble>:



// UI123

void drawBubble(struct Bubble *bubble) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

	if(!bubble->redraw) return;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	7b9b      	ldrb	r3, [r3, #14]
 80029bc:	f083 0301 	eor.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d127      	bne.n	8002a16 <drawBubble+0x66>

	if(!bubble->selected) {
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7a1b      	ldrb	r3, [r3, #8]
 80029ca:	f083 0301 	eor.w	r3, r3, #1
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00e      	beq.n	80029f2 <drawBubble+0x42>
		BSP_LCD_SetTextColor( bubble->colour_active );
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	895b      	ldrh	r3, [r3, #10]
 80029d8:	4618      	mov	r0, r3
 80029da:	f008 fb95 	bl	800b108 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(bubble->x, bubble->y, bubble->radius);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	8818      	ldrh	r0, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	8859      	ldrh	r1, [r3, #2]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	889b      	ldrh	r3, [r3, #4]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f008 fdaa 	bl	800b544 <BSP_LCD_FillCircle>
 80029f0:	e00d      	b.n	8002a0e <drawBubble+0x5e>
	} else {
		BSP_LCD_SetTextColor( bubble->colour_inactive );
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	899b      	ldrh	r3, [r3, #12]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f008 fb86 	bl	800b108 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(bubble->x, bubble->y, bubble->radius);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8818      	ldrh	r0, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8859      	ldrh	r1, [r3, #2]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	889b      	ldrh	r3, [r3, #4]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f008 fd9b 	bl	800b544 <BSP_LCD_FillCircle>
	}

	bubble->redraw = false;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	739a      	strb	r2, [r3, #14]
 8002a14:	e000      	b.n	8002a18 <drawBubble+0x68>
	if(!bubble->redraw) return;
 8002a16:	bf00      	nop

}
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <deselectBubbles>:

void deselectBubbles(uint8_t skip) {
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i=0; i<num_bubbles; i++) {
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	e01a      	b.n	8002a66 <deselectBubbles+0x46>
		struct Bubble *b = &ui_bubbles[i];
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4a11      	ldr	r2, [pc, #68]	; (8002a80 <deselectBubbles+0x60>)
 8002a3c:	4413      	add	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
		if(b->type == 1) { // ui bubbles
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	7bdb      	ldrb	r3, [r3, #15]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d10b      	bne.n	8002a60 <deselectBubbles+0x40>
			if(i == skip) continue;
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d006      	beq.n	8002a5e <deselectBubbles+0x3e>
			b->selected = false;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2200      	movs	r2, #0
 8002a54:	721a      	strb	r2, [r3, #8]
			b->redraw = true;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	739a      	strb	r2, [r3, #14]
 8002a5c:	e000      	b.n	8002a60 <deselectBubbles+0x40>
			if(i == skip) continue;
 8002a5e:	bf00      	nop
	for(uint8_t i=0; i<num_bubbles; i++) {
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	3301      	adds	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <deselectBubbles+0x64>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d3df      	bcc.n	8002a30 <deselectBubbles+0x10>
		}
	}

}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000af0 	.word	0x20000af0
 8002a84:	20000001 	.word	0x20000001

08002a88 <uiSetup>:

void uiSetup(void) {
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0

	uint16_t radius = 30;
 8002a8e:	231e      	movs	r3, #30
 8002a90:	80fb      	strh	r3, [r7, #6]
	uint16_t hit_diameter = 35;
 8002a92:	2323      	movs	r3, #35	; 0x23
 8002a94:	80bb      	strh	r3, [r7, #4]
	uint16_t y = 50;
 8002a96:	2332      	movs	r3, #50	; 0x32
 8002a98:	807b      	strh	r3, [r7, #2]

	// left bubble
	ui_bubbles[0].x = 40;
 8002a9a:	4b48      	ldr	r3, [pc, #288]	; (8002bbc <uiSetup+0x134>)
 8002a9c:	2228      	movs	r2, #40	; 0x28
 8002a9e:	801a      	strh	r2, [r3, #0]
	ui_bubbles[0].y = y;
 8002aa0:	4a46      	ldr	r2, [pc, #280]	; (8002bbc <uiSetup+0x134>)
 8002aa2:	887b      	ldrh	r3, [r7, #2]
 8002aa4:	8053      	strh	r3, [r2, #2]
	ui_bubbles[0].radius = radius;
 8002aa6:	4a45      	ldr	r2, [pc, #276]	; (8002bbc <uiSetup+0x134>)
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	8093      	strh	r3, [r2, #4]
	ui_bubbles[0].hit_diameter = hit_diameter;
 8002aac:	4a43      	ldr	r2, [pc, #268]	; (8002bbc <uiSetup+0x134>)
 8002aae:	88bb      	ldrh	r3, [r7, #4]
 8002ab0:	80d3      	strh	r3, [r2, #6]
	ui_bubbles[0].selected = false;
 8002ab2:	4b42      	ldr	r3, [pc, #264]	; (8002bbc <uiSetup+0x134>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	721a      	strb	r2, [r3, #8]
	ui_bubbles[0].colour_active = LCD_COLOR_CYAN;
 8002ab8:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <uiSetup+0x134>)
 8002aba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002abe:	815a      	strh	r2, [r3, #10]
	ui_bubbles[0].colour_inactive = LCD_COLOR_GREEN;
 8002ac0:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <uiSetup+0x134>)
 8002ac2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002ac6:	819a      	strh	r2, [r3, #12]
	ui_bubbles[0].redraw = true;
 8002ac8:	4b3c      	ldr	r3, [pc, #240]	; (8002bbc <uiSetup+0x134>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	739a      	strb	r2, [r3, #14]
	ui_bubbles[0].type = 1;
 8002ace:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <uiSetup+0x134>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	73da      	strb	r2, [r3, #15]
	ui_bubbles[0].last_selected = 0;
 8002ad4:	4b39      	ldr	r3, [pc, #228]	; (8002bbc <uiSetup+0x134>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	611a      	str	r2, [r3, #16]

	// middle bubble
	ui_bubbles[1].x = 120;
 8002ada:	4b38      	ldr	r3, [pc, #224]	; (8002bbc <uiSetup+0x134>)
 8002adc:	2278      	movs	r2, #120	; 0x78
 8002ade:	829a      	strh	r2, [r3, #20]
	ui_bubbles[1].y = y;
 8002ae0:	4a36      	ldr	r2, [pc, #216]	; (8002bbc <uiSetup+0x134>)
 8002ae2:	887b      	ldrh	r3, [r7, #2]
 8002ae4:	82d3      	strh	r3, [r2, #22]
	ui_bubbles[1].radius = radius;
 8002ae6:	4a35      	ldr	r2, [pc, #212]	; (8002bbc <uiSetup+0x134>)
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	8313      	strh	r3, [r2, #24]
	ui_bubbles[1].hit_diameter = hit_diameter;
 8002aec:	4a33      	ldr	r2, [pc, #204]	; (8002bbc <uiSetup+0x134>)
 8002aee:	88bb      	ldrh	r3, [r7, #4]
 8002af0:	8353      	strh	r3, [r2, #26]
	ui_bubbles[1].selected = true;
 8002af2:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <uiSetup+0x134>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	771a      	strb	r2, [r3, #28]
	ui_bubbles[1].colour_active = LCD_COLOR_LIGHTBLUE;
 8002af8:	4b30      	ldr	r3, [pc, #192]	; (8002bbc <uiSetup+0x134>)
 8002afa:	f248 421f 	movw	r2, #33823	; 0x841f
 8002afe:	83da      	strh	r2, [r3, #30]
	ui_bubbles[1].colour_inactive = LCD_COLOR_GREEN;
 8002b00:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <uiSetup+0x134>)
 8002b02:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002b06:	841a      	strh	r2, [r3, #32]
	ui_bubbles[1].redraw = true;
 8002b08:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <uiSetup+0x134>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ui_bubbles[1].type = 1;
 8002b10:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <uiSetup+0x134>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ui_bubbles[1].last_selected = 0;
 8002b18:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <uiSetup+0x134>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24

	// right bubble
	ui_bubbles[2].x = 200;
 8002b1e:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <uiSetup+0x134>)
 8002b20:	22c8      	movs	r2, #200	; 0xc8
 8002b22:	851a      	strh	r2, [r3, #40]	; 0x28
	ui_bubbles[2].y = y;
 8002b24:	4a25      	ldr	r2, [pc, #148]	; (8002bbc <uiSetup+0x134>)
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	8553      	strh	r3, [r2, #42]	; 0x2a
	ui_bubbles[2].radius = radius;
 8002b2a:	4a24      	ldr	r2, [pc, #144]	; (8002bbc <uiSetup+0x134>)
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	8593      	strh	r3, [r2, #44]	; 0x2c
	ui_bubbles[2].hit_diameter = hit_diameter;
 8002b30:	4a22      	ldr	r2, [pc, #136]	; (8002bbc <uiSetup+0x134>)
 8002b32:	88bb      	ldrh	r3, [r7, #4]
 8002b34:	85d3      	strh	r3, [r2, #46]	; 0x2e
	ui_bubbles[2].selected = false;
 8002b36:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <uiSetup+0x134>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	ui_bubbles[2].colour_active = LCD_COLOR_LIGHTMAGENTA;
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <uiSetup+0x134>)
 8002b40:	f64f 421f 	movw	r2, #64543	; 0xfc1f
 8002b44:	865a      	strh	r2, [r3, #50]	; 0x32
	ui_bubbles[2].colour_inactive = LCD_COLOR_GREEN;
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <uiSetup+0x134>)
 8002b48:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002b4c:	869a      	strh	r2, [r3, #52]	; 0x34
	ui_bubbles[2].redraw = true;
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <uiSetup+0x134>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	ui_bubbles[2].type = 1;
 8002b56:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <uiSetup+0x134>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	ui_bubbles[2].last_selected = 0;
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <uiSetup+0x134>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	639a      	str	r2, [r3, #56]	; 0x38

	// go bubble
	ui_bubbles[3].x = 120;
 8002b64:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <uiSetup+0x134>)
 8002b66:	2278      	movs	r2, #120	; 0x78
 8002b68:	879a      	strh	r2, [r3, #60]	; 0x3c
	ui_bubbles[3].y = 170;
 8002b6a:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <uiSetup+0x134>)
 8002b6c:	22aa      	movs	r2, #170	; 0xaa
 8002b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
	ui_bubbles[3].radius = 45;
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <uiSetup+0x134>)
 8002b72:	222d      	movs	r2, #45	; 0x2d
 8002b74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	ui_bubbles[3].hit_diameter = 50;
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <uiSetup+0x134>)
 8002b7a:	2232      	movs	r2, #50	; 0x32
 8002b7c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	ui_bubbles[3].selected = true;
 8002b80:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <uiSetup+0x134>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	ui_bubbles[3].colour_active = LCD_COLOR_GREEN;
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <uiSetup+0x134>)
 8002b8a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002b8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ui_bubbles[3].colour_inactive = LCD_COLOR_BLUE;
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <uiSetup+0x134>)
 8002b94:	221f      	movs	r2, #31
 8002b96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	ui_bubbles[3].redraw = true;
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <uiSetup+0x134>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	ui_bubbles[3].type = 2;
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <uiSetup+0x134>)
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	ui_bubbles[3].last_selected = 0;
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <uiSetup+0x134>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	64da      	str	r2, [r3, #76]	; 0x4c

}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	20000af0 	.word	0x20000af0

08002bc0 <reconfigureFromSleep>:





void reconfigureFromSleep(void) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
	/* System is Low Power Run mode when exiting Low Power Sleep mode,
		 disable low power run mode and reset the clock to initialization configuration */
	HAL_PWREx_DisableLowPowerRunMode();
 8002bc4:	f00d fee0 	bl	8010988 <HAL_PWREx_DisableLowPowerRunMode>

	/* Configure the system clock for the RUN mode */
	SystemClock_Config();
 8002bc8:	f7ff fe3a 	bl	8002840 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8002bcc:	f7ff fe9a 	bl	8002904 <PeriphCommonClock_Config>

	/* Re-init GPIOs */
	MX_GPIO_Init();
 8002bd0:	f7fe fde2 	bl	8001798 <MX_GPIO_Init>

	/* Resume Tick interrupt if disabled prior to Low Power Sleep mode entry */
	HAL_ResumeTick();
 8002bd4:	f009 fa92 	bl	800c0fc <HAL_ResumeTick>
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <awakeFromSleep>:


void awakeFromSleep(void) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0

	// turn on LD1, LD2
	BSP_LED_On(LED2_PIN); // LD1 orange turns on
 8002be0:	2000      	movs	r0, #0
 8002be2:	f007 fbcb 	bl	800a37c <BSP_LED_On>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET); // LD2 green turns on
 8002be6:	2200      	movs	r2, #0
 8002be8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bec:	481c      	ldr	r0, [pc, #112]	; (8002c60 <awakeFromSleep+0x84>)
 8002bee:	f00b fa47 	bl	800e080 <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bf6:	f009 fa4d 	bl	800c094 <HAL_Delay>

	// turn on lcd
	BSP_LCD_DisplayOn();
 8002bfa:	f008 fd35 	bl	800b668 <BSP_LCD_DisplayOn>
	DIMMED_SCREEN = false;
 8002bfe:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <awakeFromSleep+0x88>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002c04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c08:	f009 fa44 	bl	800c094 <HAL_Delay>

	// turn on laser and test point
	HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_SET); // laser
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c12:	4815      	ldr	r0, [pc, #84]	; (8002c68 <awakeFromSleep+0x8c>)
 8002c14:	f00b fa34 	bl	800e080 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_SET); // test point: timer frequency
 8002c18:	2201      	movs	r2, #1
 8002c1a:	2140      	movs	r1, #64	; 0x40
 8002c1c:	4813      	ldr	r0, [pc, #76]	; (8002c6c <awakeFromSleep+0x90>)
 8002c1e:	f00b fa2f 	bl	800e080 <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c26:	f009 fa35 	bl	800c094 <HAL_Delay>

	// turn on ts
	BSP_TS_ITConfig();
 8002c2a:	f008 fff9 	bl	800bc20 <BSP_TS_ITConfig>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002c2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c32:	f009 fa2f 	bl	800c094 <HAL_Delay>

	// turn on BT pwr transistor
	HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET);
 8002c36:	2201      	movs	r2, #1
 8002c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c3c:	480b      	ldr	r0, [pc, #44]	; (8002c6c <awakeFromSleep+0x90>)
 8002c3e:	f00b fa1f 	bl	800e080 <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c46:	f009 fa25 	bl	800c094 <HAL_Delay>

	// set flags
	BT_ENABLED = true;
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <awakeFromSleep+0x94>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	701a      	strb	r2, [r3, #0]
	ENTER_SLEEP_MODE = false;
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <awakeFromSleep+0x98>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
	SLEEP_MODE_ACTIVE = false;
 8002c56:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <awakeFromSleep+0x9c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]

}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	48000400 	.word	0x48000400
 8002c64:	20000ad9 	.word	0x20000ad9
 8002c68:	48002000 	.word	0x48002000
 8002c6c:	48001800 	.word	0x48001800
 8002c70:	20000000 	.word	0x20000000
 8002c74:	20000adb 	.word	0x20000adb
 8002c78:	20000ada 	.word	0x20000ada

08002c7c <enterSleep>:


void enterSleep(void) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0

	// turn off ts
	BSP_TS_ITDeConfig();
 8002c80:	f008 ffe6 	bl	800bc50 <BSP_TS_ITDeConfig>

	// turn off lcd
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002c84:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002c88:	f008 fa5e 	bl	800b148 <BSP_LCD_Clear>
	if(DIMMED_SCREEN == true) {
 8002c8c:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <enterSleep+0xac>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <enterSleep+0x1c>
		BSP_LCD_ScreenDimmingOff();
 8002c94:	f008 fe28 	bl	800b8e8 <BSP_LCD_ScreenDimmingOff>
	}
	BSP_LCD_ScreenDimmingConfig(100, 0, 5, 20);
 8002c98:	2314      	movs	r3, #20
 8002c9a:	2205      	movs	r2, #5
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	2064      	movs	r0, #100	; 0x64
 8002ca0:	f008 fcf6 	bl	800b690 <BSP_LCD_ScreenDimmingConfig>
	BSP_LCD_ScreenDimmingOn();
 8002ca4:	f008 fd26 	bl	800b6f4 <BSP_LCD_ScreenDimmingOn>
	BSP_LCD_DisplayOff();
 8002ca8:	f008 fce8 	bl	800b67c <BSP_LCD_DisplayOff>
	DIMMED_SCREEN = true;
 8002cac:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <enterSleep+0xac>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000); // wait for fade to finish
 8002cb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cb6:	f009 f9ed 	bl	800c094 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_RESET); // force the backlight off
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	481b      	ldr	r0, [pc, #108]	; (8002d2c <enterSleep+0xb0>)
 8002cc0:	f00b f9de 	bl	800e080 <HAL_GPIO_WritePin>

	// turn off BT pwr transistor
	HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_RESET);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cca:	4819      	ldr	r0, [pc, #100]	; (8002d30 <enterSleep+0xb4>)
 8002ccc:	f00b f9d8 	bl	800e080 <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002cd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cd4:	f009 f9de 	bl	800c094 <HAL_Delay>

	// turn off LD1, LD2
	BSP_LED_Off(LED2_PIN); // LD1 orange turns off
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f007 fb71 	bl	800a3c0 <BSP_LED_Off>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_SET); // LD2 green turns off
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ce4:	4813      	ldr	r0, [pc, #76]	; (8002d34 <enterSleep+0xb8>)
 8002ce6:	f00b f9cb 	bl	800e080 <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002cea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cee:	f009 f9d1 	bl	800c094 <HAL_Delay>

	// turn off laser and test point
	HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET); // laser
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <enterSleep+0xb0>)
 8002cfa:	f00b f9c1 	bl	800e080 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET); // test point: timer frequency
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2140      	movs	r1, #64	; 0x40
 8002d02:	480b      	ldr	r0, [pc, #44]	; (8002d30 <enterSleep+0xb4>)
 8002d04:	f00b f9bc 	bl	800e080 <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d0c:	f009 f9c2 	bl	800c094 <HAL_Delay>

	// set flags
	BT_ENABLED = false;
 8002d10:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <enterSleep+0xbc>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
	ENTER_SLEEP_MODE = false;
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <enterSleep+0xc0>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
	SLEEP_MODE_ACTIVE = true;
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <enterSleep+0xc4>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]

}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000ad9 	.word	0x20000ad9
 8002d2c:	48002000 	.word	0x48002000
 8002d30:	48001800 	.word	0x48001800
 8002d34:	48000400 	.word	0x48000400
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	20000adb 	.word	0x20000adb
 8002d40:	20000ada 	.word	0x20000ada

08002d44 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	80fb      	strh	r3, [r7, #6]

	// DOWN: enter sleep mode
	// LEFT: wake up (event)
	// RIGHT: toggle bt enabled

	if(GPIO_Pin == JOY_DOWN_Pin) {
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d54:	d102      	bne.n	8002d5c <HAL_GPIO_EXTI_Callback+0x18>
		// set flag to enter sleep mode
		ENTER_SLEEP_MODE = true;
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_GPIO_EXTI_Callback+0x68>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == JOY_RIGHT_Pin) {
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d62:	d11f      	bne.n	8002da4 <HAL_GPIO_EXTI_Callback+0x60>

		if(BT_ENABLED) {
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d006      	beq.n	8002d7a <HAL_GPIO_EXTI_Callback+0x36>
			HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_RESET); // turn off BT pwr transistor
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d72:	4810      	ldr	r0, [pc, #64]	; (8002db4 <HAL_GPIO_EXTI_Callback+0x70>)
 8002d74:	f00b f984 	bl	800e080 <HAL_GPIO_WritePin>
 8002d78:	e005      	b.n	8002d86 <HAL_GPIO_EXTI_Callback+0x42>
		} else {
			HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET); // turn on BT pwr transistor
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d80:	480c      	ldr	r0, [pc, #48]	; (8002db4 <HAL_GPIO_EXTI_Callback+0x70>)
 8002d82:	f00b f97d 	bl	800e080 <HAL_GPIO_WritePin>
		}

		BT_ENABLED = !BT_ENABLED;
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bf14      	ite	ne
 8002d8e:	2301      	movne	r3, #1
 8002d90:	2300      	moveq	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f083 0301 	eor.w	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002da2:	701a      	strb	r2, [r3, #0]

	}

}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000adb 	.word	0x20000adb
 8002db0:	20000000 	.word	0x20000000
 8002db4:	48001800 	.word	0x48001800

08002db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dbc:	b672      	cpsid	i
}
 8002dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <Error_Handler+0x8>
	...

08002dc4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <MX_QUADSPI_Init+0x50>)
 8002dca:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <MX_QUADSPI_Init+0x54>)
 8002dcc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <MX_QUADSPI_Init+0x50>)
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <MX_QUADSPI_Init+0x50>)
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <MX_QUADSPI_Init+0x50>)
 8002ddc:	2210      	movs	r2, #16
 8002dde:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <MX_QUADSPI_Init+0x50>)
 8002de2:	2217      	movs	r2, #23
 8002de4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002de6:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <MX_QUADSPI_Init+0x50>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <MX_QUADSPI_Init+0x50>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <MX_QUADSPI_Init+0x50>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <MX_QUADSPI_Init+0x50>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002dfe:	4805      	ldr	r0, [pc, #20]	; (8002e14 <MX_QUADSPI_Init+0x50>)
 8002e00:	f00d fdfa 	bl	80109f8 <HAL_QSPI_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002e0a:	f7ff ffd5 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20001528 	.word	0x20001528
 8002e18:	a0001000 	.word	0xa0001000

08002e1c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a26      	ldr	r2, [pc, #152]	; (8002ed4 <HAL_QSPI_MspInit+0xb8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d145      	bne.n	8002eca <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002e3e:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <HAL_QSPI_MspInit+0xbc>)
 8002e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e42:	4a25      	ldr	r2, [pc, #148]	; (8002ed8 <HAL_QSPI_MspInit+0xbc>)
 8002e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e48:	6513      	str	r3, [r2, #80]	; 0x50
 8002e4a:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <HAL_QSPI_MspInit+0xbc>)
 8002e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_QSPI_MspInit+0xbc>)
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	4a1f      	ldr	r2, [pc, #124]	; (8002ed8 <HAL_QSPI_MspInit+0xbc>)
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e62:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <HAL_QSPI_MspInit+0xbc>)
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <HAL_QSPI_MspInit+0xbc>)
 8002e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e72:	4a19      	ldr	r2, [pc, #100]	; (8002ed8 <HAL_QSPI_MspInit+0xbc>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e7a:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <HAL_QSPI_MspInit+0xbc>)
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8002e86:	f640 0303 	movw	r3, #2051	; 0x803
 8002e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e94:	2303      	movs	r3, #3
 8002e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002e98:	230a      	movs	r3, #10
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	480e      	ldr	r0, [pc, #56]	; (8002edc <HAL_QSPI_MspInit+0xc0>)
 8002ea4:	f00a fe68 	bl	800db78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8002ea8:	23c8      	movs	r3, #200	; 0xc8
 8002eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eac:	2302      	movs	r3, #2
 8002eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002eb8:	230a      	movs	r3, #10
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ec6:	f00a fe57 	bl	800db78 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002eca:	bf00      	nop
 8002ecc:	3728      	adds	r7, #40	; 0x28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	a0001000 	.word	0xa0001000
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	48000400 	.word	0x48000400

08002ee0 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002ee4:	4b4d      	ldr	r3, [pc, #308]	; (800301c <MX_SAI1_Init+0x13c>)
 8002ee6:	4a4e      	ldr	r2, [pc, #312]	; (8003020 <MX_SAI1_Init+0x140>)
 8002ee8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002eea:	4b4c      	ldr	r3, [pc, #304]	; (800301c <MX_SAI1_Init+0x13c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002ef0:	4b4a      	ldr	r3, [pc, #296]	; (800301c <MX_SAI1_Init+0x13c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8002ef6:	4b49      	ldr	r3, [pc, #292]	; (800301c <MX_SAI1_Init+0x13c>)
 8002ef8:	2240      	movs	r2, #64	; 0x40
 8002efa:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002efc:	4b47      	ldr	r3, [pc, #284]	; (800301c <MX_SAI1_Init+0x13c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002f02:	4b46      	ldr	r3, [pc, #280]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002f08:	4b44      	ldr	r3, [pc, #272]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002f0e:	4b43      	ldr	r3, [pc, #268]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002f14:	4b41      	ldr	r3, [pc, #260]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002f1a:	4b40      	ldr	r3, [pc, #256]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002f20:	4b3e      	ldr	r3, [pc, #248]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f22:	4a40      	ldr	r2, [pc, #256]	; (8003024 <MX_SAI1_Init+0x144>)
 8002f24:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002f26:	4b3d      	ldr	r3, [pc, #244]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002f2c:	4b3b      	ldr	r3, [pc, #236]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002f32:	4b3a      	ldr	r3, [pc, #232]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002f38:	4b38      	ldr	r3, [pc, #224]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8002f3e:	4b37      	ldr	r3, [pc, #220]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f40:	2208      	movs	r2, #8
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002f44:	4b35      	ldr	r3, [pc, #212]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002f4a:	4b34      	ldr	r3, [pc, #208]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002f50:	4b32      	ldr	r3, [pc, #200]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002f56:	4b31      	ldr	r3, [pc, #196]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002f5c:	4b2f      	ldr	r3, [pc, #188]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002f62:	4b2e      	ldr	r3, [pc, #184]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8002f68:	4b2c      	ldr	r3, [pc, #176]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8002f6e:	4b2b      	ldr	r3, [pc, #172]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002f74:	4829      	ldr	r0, [pc, #164]	; (800301c <MX_SAI1_Init+0x13c>)
 8002f76:	f00f ffd3 	bl	8012f20 <HAL_SAI_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8002f80:	f7ff ff1a 	bl	8002db8 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8002f84:	4b28      	ldr	r3, [pc, #160]	; (8003028 <MX_SAI1_Init+0x148>)
 8002f86:	4a29      	ldr	r2, [pc, #164]	; (800302c <MX_SAI1_Init+0x14c>)
 8002f88:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002f8a:	4b27      	ldr	r3, [pc, #156]	; (8003028 <MX_SAI1_Init+0x148>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002f90:	4b25      	ldr	r3, [pc, #148]	; (8003028 <MX_SAI1_Init+0x148>)
 8002f92:	2203      	movs	r2, #3
 8002f94:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8002f96:	4b24      	ldr	r3, [pc, #144]	; (8003028 <MX_SAI1_Init+0x148>)
 8002f98:	2240      	movs	r2, #64	; 0x40
 8002f9a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002f9c:	4b22      	ldr	r3, [pc, #136]	; (8003028 <MX_SAI1_Init+0x148>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002fa2:	4b21      	ldr	r3, [pc, #132]	; (8003028 <MX_SAI1_Init+0x148>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002fa8:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <MX_SAI1_Init+0x148>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002fae:	4b1e      	ldr	r3, [pc, #120]	; (8003028 <MX_SAI1_Init+0x148>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002fb4:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <MX_SAI1_Init+0x148>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002fba:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <MX_SAI1_Init+0x148>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <MX_SAI1_Init+0x148>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002fc6:	4b18      	ldr	r3, [pc, #96]	; (8003028 <MX_SAI1_Init+0x148>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002fcc:	4b16      	ldr	r3, [pc, #88]	; (8003028 <MX_SAI1_Init+0x148>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <MX_SAI1_Init+0x148>)
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8002fd8:	4b13      	ldr	r3, [pc, #76]	; (8003028 <MX_SAI1_Init+0x148>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <MX_SAI1_Init+0x148>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002fe4:	4b10      	ldr	r3, [pc, #64]	; (8003028 <MX_SAI1_Init+0x148>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <MX_SAI1_Init+0x148>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <MX_SAI1_Init+0x148>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <MX_SAI1_Init+0x148>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <MX_SAI1_Init+0x148>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <MX_SAI1_Init+0x148>)
 8003004:	2200      	movs	r2, #0
 8003006:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8003008:	4807      	ldr	r0, [pc, #28]	; (8003028 <MX_SAI1_Init+0x148>)
 800300a:	f00f ff89 	bl	8012f20 <HAL_SAI_Init>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8003014:	f7ff fed0 	bl	8002db8 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20001574 	.word	0x20001574
 8003020:	40015404 	.word	0x40015404
 8003024:	0002ee00 	.word	0x0002ee00
 8003028:	200015f8 	.word	0x200015f8
 800302c:	40015424 	.word	0x40015424

08003030 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a33      	ldr	r2, [pc, #204]	; (800310c <HAL_SAI_MspInit+0xdc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d135      	bne.n	80030ae <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8003042:	4b33      	ldr	r3, [pc, #204]	; (8003110 <HAL_SAI_MspInit+0xe0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10b      	bne.n	8003062 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800304a:	4b32      	ldr	r3, [pc, #200]	; (8003114 <HAL_SAI_MspInit+0xe4>)
 800304c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304e:	4a31      	ldr	r2, [pc, #196]	; (8003114 <HAL_SAI_MspInit+0xe4>)
 8003050:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003054:	6613      	str	r3, [r2, #96]	; 0x60
 8003056:	4b2f      	ldr	r3, [pc, #188]	; (8003114 <HAL_SAI_MspInit+0xe4>)
 8003058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8003062:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <HAL_SAI_MspInit+0xe0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3301      	adds	r3, #1
 8003068:	4a29      	ldr	r2, [pc, #164]	; (8003110 <HAL_SAI_MspInit+0xe0>)
 800306a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 800306c:	2354      	movs	r3, #84	; 0x54
 800306e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	2302      	movs	r3, #2
 8003072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003078:	2300      	movs	r3, #0
 800307a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800307c:	230d      	movs	r3, #13
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	4619      	mov	r1, r3
 8003086:	4824      	ldr	r0, [pc, #144]	; (8003118 <HAL_SAI_MspInit+0xe8>)
 8003088:	f00a fd76 	bl	800db78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800308c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309a:	2300      	movs	r3, #0
 800309c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800309e:	230d      	movs	r3, #13
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	4619      	mov	r1, r3
 80030a8:	481c      	ldr	r0, [pc, #112]	; (800311c <HAL_SAI_MspInit+0xec>)
 80030aa:	f00a fd65 	bl	800db78 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <HAL_SAI_MspInit+0xf0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d124      	bne.n	8003102 <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80030b8:	4b15      	ldr	r3, [pc, #84]	; (8003110 <HAL_SAI_MspInit+0xe0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10b      	bne.n	80030d8 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80030c0:	4b14      	ldr	r3, [pc, #80]	; (8003114 <HAL_SAI_MspInit+0xe4>)
 80030c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c4:	4a13      	ldr	r2, [pc, #76]	; (8003114 <HAL_SAI_MspInit+0xe4>)
 80030c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030ca:	6613      	str	r3, [r2, #96]	; 0x60
 80030cc:	4b11      	ldr	r3, [pc, #68]	; (8003114 <HAL_SAI_MspInit+0xe4>)
 80030ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <HAL_SAI_MspInit+0xe0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	4a0c      	ldr	r2, [pc, #48]	; (8003110 <HAL_SAI_MspInit+0xe0>)
 80030e0:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 80030e2:	2308      	movs	r3, #8
 80030e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e6:	2302      	movs	r3, #2
 80030e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ee:	2300      	movs	r3, #0
 80030f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80030f2:	230d      	movs	r3, #13
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 80030f6:	f107 0314 	add.w	r3, r7, #20
 80030fa:	4619      	mov	r1, r3
 80030fc:	4806      	ldr	r0, [pc, #24]	; (8003118 <HAL_SAI_MspInit+0xe8>)
 80030fe:	f00a fd3b 	bl	800db78 <HAL_GPIO_Init>

    }
}
 8003102:	bf00      	nop
 8003104:	3728      	adds	r7, #40	; 0x28
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40015404 	.word	0x40015404
 8003110:	2000167c 	.word	0x2000167c
 8003114:	40021000 	.word	0x40021000
 8003118:	48001000 	.word	0x48001000
 800311c:	48000400 	.word	0x48000400
 8003120:	40015424 	.word	0x40015424

08003124 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003128:	4b14      	ldr	r3, [pc, #80]	; (800317c <MX_SDMMC1_SD_Init+0x58>)
 800312a:	4a15      	ldr	r2, [pc, #84]	; (8003180 <MX_SDMMC1_SD_Init+0x5c>)
 800312c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800312e:	4b13      	ldr	r3, [pc, #76]	; (800317c <MX_SDMMC1_SD_Init+0x58>)
 8003130:	2200      	movs	r2, #0
 8003132:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003134:	4b11      	ldr	r3, [pc, #68]	; (800317c <MX_SDMMC1_SD_Init+0x58>)
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <MX_SDMMC1_SD_Init+0x58>)
 800313c:	2200      	movs	r2, #0
 800313e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003140:	4b0e      	ldr	r3, [pc, #56]	; (800317c <MX_SDMMC1_SD_Init+0x58>)
 8003142:	2200      	movs	r2, #0
 8003144:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003146:	4b0d      	ldr	r3, [pc, #52]	; (800317c <MX_SDMMC1_SD_Init+0x58>)
 8003148:	2200      	movs	r2, #0
 800314a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <MX_SDMMC1_SD_Init+0x58>)
 800314e:	2200      	movs	r2, #0
 8003150:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8003152:	480a      	ldr	r0, [pc, #40]	; (800317c <MX_SDMMC1_SD_Init+0x58>)
 8003154:	f010 f890 	bl	8013278 <HAL_SD_Init>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 800315e:	f7ff fe2b 	bl	8002db8 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8003162:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003166:	4805      	ldr	r0, [pc, #20]	; (800317c <MX_SDMMC1_SD_Init+0x58>)
 8003168:	f010 fb00 	bl	801376c <HAL_SD_ConfigWideBusOperation>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8003172:	f7ff fe21 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20001680 	.word	0x20001680
 8003180:	40012800 	.word	0x40012800

08003184 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	; 0x28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 0314 	add.w	r3, r7, #20
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a25      	ldr	r2, [pc, #148]	; (8003238 <HAL_SD_MspInit+0xb4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d144      	bne.n	8003230 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80031a6:	4b25      	ldr	r3, [pc, #148]	; (800323c <HAL_SD_MspInit+0xb8>)
 80031a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031aa:	4a24      	ldr	r2, [pc, #144]	; (800323c <HAL_SD_MspInit+0xb8>)
 80031ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031b0:	6613      	str	r3, [r2, #96]	; 0x60
 80031b2:	4b22      	ldr	r3, [pc, #136]	; (800323c <HAL_SD_MspInit+0xb8>)
 80031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031be:	4b1f      	ldr	r3, [pc, #124]	; (800323c <HAL_SD_MspInit+0xb8>)
 80031c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c2:	4a1e      	ldr	r2, [pc, #120]	; (800323c <HAL_SD_MspInit+0xb8>)
 80031c4:	f043 0308 	orr.w	r3, r3, #8
 80031c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <HAL_SD_MspInit+0xb8>)
 80031cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031d6:	4b19      	ldr	r3, [pc, #100]	; (800323c <HAL_SD_MspInit+0xb8>)
 80031d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031da:	4a18      	ldr	r2, [pc, #96]	; (800323c <HAL_SD_MspInit+0xb8>)
 80031dc:	f043 0304 	orr.w	r3, r3, #4
 80031e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031e2:	4b16      	ldr	r3, [pc, #88]	; (800323c <HAL_SD_MspInit+0xb8>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80031ee:	2304      	movs	r3, #4
 80031f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f2:	2302      	movs	r3, #2
 80031f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fa:	2303      	movs	r3, #3
 80031fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80031fe:	230c      	movs	r3, #12
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8003202:	f107 0314 	add.w	r3, r7, #20
 8003206:	4619      	mov	r1, r3
 8003208:	480d      	ldr	r0, [pc, #52]	; (8003240 <HAL_SD_MspInit+0xbc>)
 800320a:	f00a fcb5 	bl	800db78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 800320e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003212:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321c:	2303      	movs	r3, #3
 800321e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003220:	230c      	movs	r3, #12
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	4619      	mov	r1, r3
 800322a:	4806      	ldr	r0, [pc, #24]	; (8003244 <HAL_SD_MspInit+0xc0>)
 800322c:	f00a fca4 	bl	800db78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8003230:	bf00      	nop
 8003232:	3728      	adds	r7, #40	; 0x28
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40012800 	.word	0x40012800
 800323c:	40021000 	.word	0x40021000
 8003240:	48000c00 	.word	0x48000c00
 8003244:	48000800 	.word	0x48000800

08003248 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800324c:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <MX_SPI1_Init+0x74>)
 800324e:	4a1c      	ldr	r2, [pc, #112]	; (80032c0 <MX_SPI1_Init+0x78>)
 8003250:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003252:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <MX_SPI1_Init+0x74>)
 8003254:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003258:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800325a:	4b18      	ldr	r3, [pc, #96]	; (80032bc <MX_SPI1_Init+0x74>)
 800325c:	2200      	movs	r2, #0
 800325e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003260:	4b16      	ldr	r3, [pc, #88]	; (80032bc <MX_SPI1_Init+0x74>)
 8003262:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003266:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003268:	4b14      	ldr	r3, [pc, #80]	; (80032bc <MX_SPI1_Init+0x74>)
 800326a:	2200      	movs	r2, #0
 800326c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <MX_SPI1_Init+0x74>)
 8003270:	2200      	movs	r2, #0
 8003272:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <MX_SPI1_Init+0x74>)
 8003276:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800327a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <MX_SPI1_Init+0x74>)
 800327e:	2200      	movs	r2, #0
 8003280:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <MX_SPI1_Init+0x74>)
 8003284:	2200      	movs	r2, #0
 8003286:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <MX_SPI1_Init+0x74>)
 800328a:	2200      	movs	r2, #0
 800328c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <MX_SPI1_Init+0x74>)
 8003290:	2200      	movs	r2, #0
 8003292:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <MX_SPI1_Init+0x74>)
 8003296:	2207      	movs	r2, #7
 8003298:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <MX_SPI1_Init+0x74>)
 800329c:	2200      	movs	r2, #0
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <MX_SPI1_Init+0x74>)
 80032a2:	2208      	movs	r2, #8
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032a6:	4805      	ldr	r0, [pc, #20]	; (80032bc <MX_SPI1_Init+0x74>)
 80032a8:	f010 fdd8 	bl	8013e5c <HAL_SPI_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80032b2:	f7ff fd81 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20001704 	.word	0x20001704
 80032c0:	40013000 	.word	0x40013000

080032c4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80032c8:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <MX_SPI2_Init+0x74>)
 80032ca:	4a1c      	ldr	r2, [pc, #112]	; (800333c <MX_SPI2_Init+0x78>)
 80032cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80032ce:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <MX_SPI2_Init+0x74>)
 80032d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80032d6:	4b18      	ldr	r3, [pc, #96]	; (8003338 <MX_SPI2_Init+0x74>)
 80032d8:	2200      	movs	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80032dc:	4b16      	ldr	r3, [pc, #88]	; (8003338 <MX_SPI2_Init+0x74>)
 80032de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80032e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032e4:	4b14      	ldr	r3, [pc, #80]	; (8003338 <MX_SPI2_Init+0x74>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032ea:	4b13      	ldr	r3, [pc, #76]	; (8003338 <MX_SPI2_Init+0x74>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80032f0:	4b11      	ldr	r3, [pc, #68]	; (8003338 <MX_SPI2_Init+0x74>)
 80032f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <MX_SPI2_Init+0x74>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032fe:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <MX_SPI2_Init+0x74>)
 8003300:	2200      	movs	r2, #0
 8003302:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <MX_SPI2_Init+0x74>)
 8003306:	2200      	movs	r2, #0
 8003308:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800330a:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <MX_SPI2_Init+0x74>)
 800330c:	2200      	movs	r2, #0
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003310:	4b09      	ldr	r3, [pc, #36]	; (8003338 <MX_SPI2_Init+0x74>)
 8003312:	2207      	movs	r2, #7
 8003314:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003316:	4b08      	ldr	r3, [pc, #32]	; (8003338 <MX_SPI2_Init+0x74>)
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <MX_SPI2_Init+0x74>)
 800331e:	2208      	movs	r2, #8
 8003320:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003322:	4805      	ldr	r0, [pc, #20]	; (8003338 <MX_SPI2_Init+0x74>)
 8003324:	f010 fd9a 	bl	8013e5c <HAL_SPI_Init>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800332e:	f7ff fd43 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20001768 	.word	0x20001768
 800333c:	40003800 	.word	0x40003800

08003340 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08e      	sub	sp, #56	; 0x38
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a4b      	ldr	r2, [pc, #300]	; (800348c <HAL_SPI_MspInit+0x14c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d146      	bne.n	80033f0 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003362:	4b4b      	ldr	r3, [pc, #300]	; (8003490 <HAL_SPI_MspInit+0x150>)
 8003364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003366:	4a4a      	ldr	r2, [pc, #296]	; (8003490 <HAL_SPI_MspInit+0x150>)
 8003368:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800336c:	6613      	str	r3, [r2, #96]	; 0x60
 800336e:	4b48      	ldr	r3, [pc, #288]	; (8003490 <HAL_SPI_MspInit+0x150>)
 8003370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003372:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003376:	623b      	str	r3, [r7, #32]
 8003378:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337a:	4b45      	ldr	r3, [pc, #276]	; (8003490 <HAL_SPI_MspInit+0x150>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	4a44      	ldr	r2, [pc, #272]	; (8003490 <HAL_SPI_MspInit+0x150>)
 8003380:	f043 0302 	orr.w	r3, r3, #2
 8003384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003386:	4b42      	ldr	r3, [pc, #264]	; (8003490 <HAL_SPI_MspInit+0x150>)
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	61fb      	str	r3, [r7, #28]
 8003390:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003392:	4b3f      	ldr	r3, [pc, #252]	; (8003490 <HAL_SPI_MspInit+0x150>)
 8003394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003396:	4a3e      	ldr	r2, [pc, #248]	; (8003490 <HAL_SPI_MspInit+0x150>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800339e:	4b3c      	ldr	r3, [pc, #240]	; (8003490 <HAL_SPI_MspInit+0x150>)
 80033a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	61bb      	str	r3, [r7, #24]
 80033a8:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80033aa:	2330      	movs	r3, #48	; 0x30
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b6:	2303      	movs	r3, #3
 80033b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033ba:	2305      	movs	r3, #5
 80033bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c2:	4619      	mov	r1, r3
 80033c4:	4833      	ldr	r0, [pc, #204]	; (8003494 <HAL_SPI_MspInit+0x154>)
 80033c6:	f00a fbd7 	bl	800db78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 80033ca:	f248 0320 	movw	r3, #32800	; 0x8020
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d8:	2303      	movs	r3, #3
 80033da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033dc:	2305      	movs	r3, #5
 80033de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e4:	4619      	mov	r1, r3
 80033e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ea:	f00a fbc5 	bl	800db78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80033ee:	e049      	b.n	8003484 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a28      	ldr	r2, [pc, #160]	; (8003498 <HAL_SPI_MspInit+0x158>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d144      	bne.n	8003484 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033fa:	4b25      	ldr	r3, [pc, #148]	; (8003490 <HAL_SPI_MspInit+0x150>)
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	4a24      	ldr	r2, [pc, #144]	; (8003490 <HAL_SPI_MspInit+0x150>)
 8003400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003404:	6593      	str	r3, [r2, #88]	; 0x58
 8003406:	4b22      	ldr	r3, [pc, #136]	; (8003490 <HAL_SPI_MspInit+0x150>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003412:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <HAL_SPI_MspInit+0x150>)
 8003414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003416:	4a1e      	ldr	r2, [pc, #120]	; (8003490 <HAL_SPI_MspInit+0x150>)
 8003418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800341e:	4b1c      	ldr	r3, [pc, #112]	; (8003490 <HAL_SPI_MspInit+0x150>)
 8003420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342a:	4b19      	ldr	r3, [pc, #100]	; (8003490 <HAL_SPI_MspInit+0x150>)
 800342c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342e:	4a18      	ldr	r2, [pc, #96]	; (8003490 <HAL_SPI_MspInit+0x150>)
 8003430:	f043 0302 	orr.w	r3, r3, #2
 8003434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003436:	4b16      	ldr	r3, [pc, #88]	; (8003490 <HAL_SPI_MspInit+0x150>)
 8003438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8003442:	2306      	movs	r3, #6
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003446:	2302      	movs	r3, #2
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344a:	2300      	movs	r3, #0
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344e:	2303      	movs	r3, #3
 8003450:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003452:	2305      	movs	r3, #5
 8003454:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800345a:	4619      	mov	r1, r3
 800345c:	480f      	ldr	r0, [pc, #60]	; (800349c <HAL_SPI_MspInit+0x15c>)
 800345e:	f00a fb8b 	bl	800db78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8003462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003468:	2302      	movs	r3, #2
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003470:	2303      	movs	r3, #3
 8003472:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003474:	2305      	movs	r3, #5
 8003476:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8003478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800347c:	4619      	mov	r1, r3
 800347e:	4805      	ldr	r0, [pc, #20]	; (8003494 <HAL_SPI_MspInit+0x154>)
 8003480:	f00a fb7a 	bl	800db78 <HAL_GPIO_Init>
}
 8003484:	bf00      	nop
 8003486:	3738      	adds	r7, #56	; 0x38
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40013000 	.word	0x40013000
 8003490:	40021000 	.word	0x40021000
 8003494:	48000400 	.word	0x48000400
 8003498:	40003800 	.word	0x40003800
 800349c:	48002000 	.word	0x48002000

080034a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <HAL_MspInit+0x44>)
 80034a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034aa:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <HAL_MspInit+0x44>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6613      	str	r3, [r2, #96]	; 0x60
 80034b2:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <HAL_MspInit+0x44>)
 80034b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	607b      	str	r3, [r7, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034be:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_MspInit+0x44>)
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <HAL_MspInit+0x44>)
 80034c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c8:	6593      	str	r3, [r2, #88]	; 0x58
 80034ca:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <HAL_MspInit+0x44>)
 80034cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000

080034e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034ec:	e7fe      	b.n	80034ec <NMI_Handler+0x4>

080034ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034f2:	e7fe      	b.n	80034f2 <HardFault_Handler+0x4>

080034f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034f8:	e7fe      	b.n	80034f8 <MemManage_Handler+0x4>

080034fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034fa:	b480      	push	{r7}
 80034fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034fe:	e7fe      	b.n	80034fe <BusFault_Handler+0x4>

08003500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003504:	e7fe      	b.n	8003504 <UsageFault_Handler+0x4>

08003506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003534:	f008 fd8e 	bl	800c054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003538:	bf00      	nop
 800353a:	bd80      	pop	{r7, pc}

0800353c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQ_OUT_Pin);
 8003540:	2020      	movs	r0, #32
 8003542:	f00a fdcf 	bl	800e0e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}

0800354a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 800354e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003552:	f00a fdc7 	bl	800e0e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 8003556:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800355a:	f00a fdc3 	bl	800e0e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 800355e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003562:	f00a fdbf 	bl	800e0e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003570:	4802      	ldr	r0, [pc, #8]	; (800357c <TIM6_DAC_IRQHandler+0x10>)
 8003572:	f011 f819 	bl	80145a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200017d0 	.word	0x200017d0

08003580 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003584:	4802      	ldr	r0, [pc, #8]	; (8003590 <OTG_FS_IRQHandler+0x10>)
 8003586:	f00c f8bb 	bl	800f700 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	200030ec 	.word	0x200030ec

08003594 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	e00a      	b.n	80035bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035a6:	f3af 8000 	nop.w
 80035aa:	4601      	mov	r1, r0
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	60ba      	str	r2, [r7, #8]
 80035b2:	b2ca      	uxtb	r2, r1
 80035b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	3301      	adds	r3, #1
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	dbf0      	blt.n	80035a6 <_read+0x12>
	}

return len;
 80035c4:	687b      	ldr	r3, [r7, #4]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e009      	b.n	80035f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	60ba      	str	r2, [r7, #8]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	3301      	adds	r3, #1
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	dbf1      	blt.n	80035e0 <_write+0x12>
	}
	return len;
 80035fc:	687b      	ldr	r3, [r7, #4]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <_close>:

int _close(int file)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
	return -1;
 800360e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800362e:	605a      	str	r2, [r3, #4]
	return 0;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <_isatty>:

int _isatty(int file)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
	return 1;
 8003646:	2301      	movs	r3, #1
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
	return 0;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003678:	4a14      	ldr	r2, [pc, #80]	; (80036cc <_sbrk+0x5c>)
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <_sbrk+0x60>)
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <_sbrk+0x64>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <_sbrk+0x64>)
 800368e:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <_sbrk+0x68>)
 8003690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <_sbrk+0x64>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	429a      	cmp	r2, r3
 800369e:	d207      	bcs.n	80036b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036a0:	f016 fee6 	bl	801a470 <__errno>
 80036a4:	4603      	mov	r3, r0
 80036a6:	220c      	movs	r2, #12
 80036a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036ae:	e009      	b.n	80036c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036b0:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <_sbrk+0x64>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036b6:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <_sbrk+0x64>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <_sbrk+0x64>)
 80036c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036c2:	68fb      	ldr	r3, [r7, #12]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20050000 	.word	0x20050000
 80036d0:	00000400 	.word	0x00000400
 80036d4:	200017cc 	.word	0x200017cc
 80036d8:	20003828 	.word	0x20003828

080036dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <SystemInit+0x20>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e6:	4a05      	ldr	r2, [pc, #20]	; (80036fc <SystemInit+0x20>)
 80036e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80036f0:	bf00      	nop
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	e000ed00 	.word	0xe000ed00

08003700 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003710:	4b14      	ldr	r3, [pc, #80]	; (8003764 <MX_TIM6_Init+0x64>)
 8003712:	4a15      	ldr	r2, [pc, #84]	; (8003768 <MX_TIM6_Init+0x68>)
 8003714:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8003716:	4b13      	ldr	r3, [pc, #76]	; (8003764 <MX_TIM6_Init+0x64>)
 8003718:	2263      	movs	r2, #99	; 0x63
 800371a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800371c:	4b11      	ldr	r3, [pc, #68]	; (8003764 <MX_TIM6_Init+0x64>)
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19200-1;
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <MX_TIM6_Init+0x64>)
 8003724:	f644 22ff 	movw	r2, #19199	; 0x4aff
 8003728:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <MX_TIM6_Init+0x64>)
 800372c:	2200      	movs	r2, #0
 800372e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003730:	480c      	ldr	r0, [pc, #48]	; (8003764 <MX_TIM6_Init+0x64>)
 8003732:	f010 fc7e 	bl	8014032 <HAL_TIM_Base_Init>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800373c:	f7ff fb3c 	bl	8002db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003740:	2300      	movs	r3, #0
 8003742:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	4619      	mov	r1, r3
 800374c:	4805      	ldr	r0, [pc, #20]	; (8003764 <MX_TIM6_Init+0x64>)
 800374e:	f011 fd1d 	bl	801518c <HAL_TIMEx_MasterConfigSynchronization>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003758:	f7ff fb2e 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200017d0 	.word	0x200017d0
 8003768:	40001000 	.word	0x40001000

0800376c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a0d      	ldr	r2, [pc, #52]	; (80037b0 <HAL_TIM_Base_MspInit+0x44>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d113      	bne.n	80037a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800377e:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <HAL_TIM_Base_MspInit+0x48>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	4a0c      	ldr	r2, [pc, #48]	; (80037b4 <HAL_TIM_Base_MspInit+0x48>)
 8003784:	f043 0310 	orr.w	r3, r3, #16
 8003788:	6593      	str	r3, [r2, #88]	; 0x58
 800378a:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <HAL_TIM_Base_MspInit+0x48>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003796:	2200      	movs	r2, #0
 8003798:	2100      	movs	r1, #0
 800379a:	2036      	movs	r0, #54	; 0x36
 800379c:	f00a f815 	bl	800d7ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80037a0:	2036      	movs	r0, #54	; 0x36
 80037a2:	f00a f82e 	bl	800d802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40001000 	.word	0x40001000
 80037b4:	40021000 	.word	0x40021000

080037b8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80037bc:	4b12      	ldr	r3, [pc, #72]	; (8003808 <MX_LPUART1_UART_Init+0x50>)
 80037be:	4a13      	ldr	r2, [pc, #76]	; (800380c <MX_LPUART1_UART_Init+0x54>)
 80037c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80037c2:	4b11      	ldr	r3, [pc, #68]	; (8003808 <MX_LPUART1_UART_Init+0x50>)
 80037c4:	4a12      	ldr	r2, [pc, #72]	; (8003810 <MX_LPUART1_UART_Init+0x58>)
 80037c6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037c8:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <MX_LPUART1_UART_Init+0x50>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <MX_LPUART1_UART_Init+0x50>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <MX_LPUART1_UART_Init+0x50>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80037da:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <MX_LPUART1_UART_Init+0x50>)
 80037dc:	220c      	movs	r2, #12
 80037de:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037e0:	4b09      	ldr	r3, [pc, #36]	; (8003808 <MX_LPUART1_UART_Init+0x50>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037e6:	4b08      	ldr	r3, [pc, #32]	; (8003808 <MX_LPUART1_UART_Init+0x50>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <MX_LPUART1_UART_Init+0x50>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80037f2:	4805      	ldr	r0, [pc, #20]	; (8003808 <MX_LPUART1_UART_Init+0x50>)
 80037f4:	f011 fd70 	bl	80152d8 <HAL_UART_Init>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 80037fe:	f7ff fadb 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	2000181c 	.word	0x2000181c
 800380c:	40008000 	.word	0x40008000
 8003810:	00033324 	.word	0x00033324

08003814 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003818:	4b14      	ldr	r3, [pc, #80]	; (800386c <MX_USART1_UART_Init+0x58>)
 800381a:	4a15      	ldr	r2, [pc, #84]	; (8003870 <MX_USART1_UART_Init+0x5c>)
 800381c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800381e:	4b13      	ldr	r3, [pc, #76]	; (800386c <MX_USART1_UART_Init+0x58>)
 8003820:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003826:	4b11      	ldr	r3, [pc, #68]	; (800386c <MX_USART1_UART_Init+0x58>)
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <MX_USART1_UART_Init+0x58>)
 800382e:	2200      	movs	r2, #0
 8003830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003832:	4b0e      	ldr	r3, [pc, #56]	; (800386c <MX_USART1_UART_Init+0x58>)
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003838:	4b0c      	ldr	r3, [pc, #48]	; (800386c <MX_USART1_UART_Init+0x58>)
 800383a:	220c      	movs	r2, #12
 800383c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800383e:	4b0b      	ldr	r3, [pc, #44]	; (800386c <MX_USART1_UART_Init+0x58>)
 8003840:	2200      	movs	r2, #0
 8003842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <MX_USART1_UART_Init+0x58>)
 8003846:	2200      	movs	r2, #0
 8003848:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800384a:	4b08      	ldr	r3, [pc, #32]	; (800386c <MX_USART1_UART_Init+0x58>)
 800384c:	2200      	movs	r2, #0
 800384e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <MX_USART1_UART_Init+0x58>)
 8003852:	2200      	movs	r2, #0
 8003854:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003856:	4805      	ldr	r0, [pc, #20]	; (800386c <MX_USART1_UART_Init+0x58>)
 8003858:	f011 fd3e 	bl	80152d8 <HAL_UART_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003862:	f7ff faa9 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	200018a0 	.word	0x200018a0
 8003870:	40013800 	.word	0x40013800

08003874 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <MX_USART2_UART_Init+0x58>)
 800387a:	4a15      	ldr	r2, [pc, #84]	; (80038d0 <MX_USART2_UART_Init+0x5c>)
 800387c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800387e:	4b13      	ldr	r3, [pc, #76]	; (80038cc <MX_USART2_UART_Init+0x58>)
 8003880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <MX_USART2_UART_Init+0x58>)
 8003888:	2200      	movs	r2, #0
 800388a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <MX_USART2_UART_Init+0x58>)
 800388e:	2200      	movs	r2, #0
 8003890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <MX_USART2_UART_Init+0x58>)
 8003894:	2200      	movs	r2, #0
 8003896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <MX_USART2_UART_Init+0x58>)
 800389a:	220c      	movs	r2, #12
 800389c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <MX_USART2_UART_Init+0x58>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <MX_USART2_UART_Init+0x58>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <MX_USART2_UART_Init+0x58>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <MX_USART2_UART_Init+0x58>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038b6:	4805      	ldr	r0, [pc, #20]	; (80038cc <MX_USART2_UART_Init+0x58>)
 80038b8:	f011 fd0e 	bl	80152d8 <HAL_UART_Init>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80038c2:	f7ff fa79 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20001924 	.word	0x20001924
 80038d0:	40004400 	.word	0x40004400

080038d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b0b2      	sub	sp, #200	; 0xc8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038f0:	228c      	movs	r2, #140	; 0x8c
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f016 fdf3 	bl	801a4e0 <memset>
  if(uartHandle->Instance==LPUART1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a86      	ldr	r2, [pc, #536]	; (8003b18 <HAL_UART_MspInit+0x244>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d13e      	bne.n	8003982 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003904:	2320      	movs	r3, #32
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003908:	2300      	movs	r3, #0
 800390a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800390c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003910:	4618      	mov	r0, r3
 8003912:	f00d ff71 	bl	80117f8 <HAL_RCCEx_PeriphCLKConfig>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800391c:	f7ff fa4c 	bl	8002db8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003920:	4b7e      	ldr	r3, [pc, #504]	; (8003b1c <HAL_UART_MspInit+0x248>)
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	4a7d      	ldr	r2, [pc, #500]	; (8003b1c <HAL_UART_MspInit+0x248>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800392c:	4b7b      	ldr	r3, [pc, #492]	; (8003b1c <HAL_UART_MspInit+0x248>)
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003938:	4b78      	ldr	r3, [pc, #480]	; (8003b1c <HAL_UART_MspInit+0x248>)
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	4a77      	ldr	r2, [pc, #476]	; (8003b1c <HAL_UART_MspInit+0x248>)
 800393e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003944:	4b75      	ldr	r3, [pc, #468]	; (8003b1c <HAL_UART_MspInit+0x248>)
 8003946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	623b      	str	r3, [r7, #32]
 800394e:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8003950:	f00c fffa 	bl	8010948 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8003954:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395c:	2302      	movs	r3, #2
 800395e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003962:	2300      	movs	r3, #0
 8003964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003968:	2303      	movs	r3, #3
 800396a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800396e:	2308      	movs	r3, #8
 8003970:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003974:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003978:	4619      	mov	r1, r3
 800397a:	4869      	ldr	r0, [pc, #420]	; (8003b20 <HAL_UART_MspInit+0x24c>)
 800397c:	f00a f8fc 	bl	800db78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003980:	e0c6      	b.n	8003b10 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a67      	ldr	r2, [pc, #412]	; (8003b24 <HAL_UART_MspInit+0x250>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d15f      	bne.n	8003a4c <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800398c:	2301      	movs	r3, #1
 800398e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003990:	2300      	movs	r3, #0
 8003992:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003994:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003998:	4618      	mov	r0, r3
 800399a:	f00d ff2d 	bl	80117f8 <HAL_RCCEx_PeriphCLKConfig>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80039a4:	f7ff fa08 	bl	8002db8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80039a8:	4b5c      	ldr	r3, [pc, #368]	; (8003b1c <HAL_UART_MspInit+0x248>)
 80039aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ac:	4a5b      	ldr	r2, [pc, #364]	; (8003b1c <HAL_UART_MspInit+0x248>)
 80039ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039b2:	6613      	str	r3, [r2, #96]	; 0x60
 80039b4:	4b59      	ldr	r3, [pc, #356]	; (8003b1c <HAL_UART_MspInit+0x248>)
 80039b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c0:	4b56      	ldr	r3, [pc, #344]	; (8003b1c <HAL_UART_MspInit+0x248>)
 80039c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c4:	4a55      	ldr	r2, [pc, #340]	; (8003b1c <HAL_UART_MspInit+0x248>)
 80039c6:	f043 0302 	orr.w	r3, r3, #2
 80039ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039cc:	4b53      	ldr	r3, [pc, #332]	; (8003b1c <HAL_UART_MspInit+0x248>)
 80039ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039d8:	4b50      	ldr	r3, [pc, #320]	; (8003b1c <HAL_UART_MspInit+0x248>)
 80039da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039dc:	4a4f      	ldr	r2, [pc, #316]	; (8003b1c <HAL_UART_MspInit+0x248>)
 80039de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039e4:	4b4d      	ldr	r3, [pc, #308]	; (8003b1c <HAL_UART_MspInit+0x248>)
 80039e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 80039f0:	f00c ffaa 	bl	8010948 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 80039f4:	2340      	movs	r3, #64	; 0x40
 80039f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fa:	2302      	movs	r3, #2
 80039fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a06:	2303      	movs	r3, #3
 8003a08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a0c:	2307      	movs	r3, #7
 8003a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003a12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003a16:	4619      	mov	r1, r3
 8003a18:	4843      	ldr	r0, [pc, #268]	; (8003b28 <HAL_UART_MspInit+0x254>)
 8003a1a:	f00a f8ad 	bl	800db78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8003a1e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a26:	2302      	movs	r3, #2
 8003a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a32:	2303      	movs	r3, #3
 8003a34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a38:	2307      	movs	r3, #7
 8003a3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a3e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003a42:	4619      	mov	r1, r3
 8003a44:	4836      	ldr	r0, [pc, #216]	; (8003b20 <HAL_UART_MspInit+0x24c>)
 8003a46:	f00a f897 	bl	800db78 <HAL_GPIO_Init>
}
 8003a4a:	e061      	b.n	8003b10 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a36      	ldr	r2, [pc, #216]	; (8003b2c <HAL_UART_MspInit+0x258>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d15c      	bne.n	8003b10 <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a56:	2302      	movs	r3, #2
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a62:	4618      	mov	r0, r3
 8003a64:	f00d fec8 	bl	80117f8 <HAL_RCCEx_PeriphCLKConfig>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8003a6e:	f7ff f9a3 	bl	8002db8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a72:	4b2a      	ldr	r3, [pc, #168]	; (8003b1c <HAL_UART_MspInit+0x248>)
 8003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a76:	4a29      	ldr	r2, [pc, #164]	; (8003b1c <HAL_UART_MspInit+0x248>)
 8003a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a7e:	4b27      	ldr	r3, [pc, #156]	; (8003b1c <HAL_UART_MspInit+0x248>)
 8003a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a8a:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <HAL_UART_MspInit+0x248>)
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8e:	4a23      	ldr	r2, [pc, #140]	; (8003b1c <HAL_UART_MspInit+0x248>)
 8003a90:	f043 0308 	orr.w	r3, r3, #8
 8003a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a96:	4b21      	ldr	r3, [pc, #132]	; (8003b1c <HAL_UART_MspInit+0x248>)
 8003a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <HAL_UART_MspInit+0x248>)
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa6:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <HAL_UART_MspInit+0x248>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aae:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_UART_MspInit+0x248>)
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8003aba:	2340      	movs	r3, #64	; 0x40
 8003abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003acc:	2303      	movs	r3, #3
 8003ace:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ad2:	2307      	movs	r3, #7
 8003ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8003ad8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003adc:	4619      	mov	r1, r3
 8003ade:	4814      	ldr	r0, [pc, #80]	; (8003b30 <HAL_UART_MspInit+0x25c>)
 8003ae0:	f00a f84a 	bl	800db78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aea:	2302      	movs	r3, #2
 8003aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af6:	2303      	movs	r3, #3
 8003af8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003afc:	2307      	movs	r3, #7
 8003afe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8003b02:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b06:	4619      	mov	r1, r3
 8003b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b0c:	f00a f834 	bl	800db78 <HAL_GPIO_Init>
}
 8003b10:	bf00      	nop
 8003b12:	37c8      	adds	r7, #200	; 0xc8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40008000 	.word	0x40008000
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	48001800 	.word	0x48001800
 8003b24:	40013800 	.word	0x40013800
 8003b28:	48000400 	.word	0x48000400
 8003b2c:	40004400 	.word	0x40004400
 8003b30:	48000c00 	.word	0x48000c00

08003b34 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	330a      	adds	r3, #10
 8003b44:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8003b52:	b299      	uxth	r1, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	f00a fb96 	bl	800e290 <HAL_I2C_Master_Transmit>
 8003b64:	4603      	mov	r3, r0
 8003b66:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8003b68:	693b      	ldr	r3, [r7, #16]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b088      	sub	sp, #32
 8003b76:	af02      	add	r7, sp, #8
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	330a      	adds	r3, #10
 8003b82:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	b299      	uxth	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	f00a fc68 	bl	800e478 <HAL_I2C_Master_Receive>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8003bac:	693b      	ldr	r3, [r7, #16]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b3f      	cmp	r3, #63	; 0x3f
 8003bd0:	d902      	bls.n	8003bd8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8003bd2:	f06f 0303 	mvn.w	r3, #3
 8003bd6:	e016      	b.n	8003c06 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8003bd8:	4a0d      	ldr	r2, [pc, #52]	; (8003c10 <VL53L0X_WriteMulti+0x58>)
 8003bda:	7afb      	ldrb	r3, [r7, #11]
 8003bdc:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	480c      	ldr	r0, [pc, #48]	; (8003c14 <VL53L0X_WriteMulti+0x5c>)
 8003be4:	f016 fc6e 	bl	801a4c4 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	3301      	adds	r3, #1
 8003bec:	461a      	mov	r2, r3
 8003bee:	4908      	ldr	r1, [pc, #32]	; (8003c10 <VL53L0X_WriteMulti+0x58>)
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7ff ff9f 	bl	8003b34 <_I2CWrite>
 8003bf6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003bfe:	23ec      	movs	r3, #236	; 0xec
 8003c00:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8003c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	200019a8 	.word	0x200019a8
 8003c14:	200019a9 	.word	0x200019a9

08003c18 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	607a      	str	r2, [r7, #4]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	460b      	mov	r3, r1
 8003c26:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8003c2c:	f107 030b 	add.w	r3, r7, #11
 8003c30:	2201      	movs	r2, #1
 8003c32:	4619      	mov	r1, r3
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7ff ff7d 	bl	8003b34 <_I2CWrite>
 8003c3a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003c42:	23ec      	movs	r3, #236	; 0xec
 8003c44:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003c46:	e00c      	b.n	8003c62 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f7ff ff90 	bl	8003b72 <_I2CRead>
 8003c52:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003c5a:	23ec      	movs	r3, #236	; 0xec
 8003c5c:	75fb      	strb	r3, [r7, #23]
 8003c5e:	e000      	b.n	8003c62 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8003c60:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8003c62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8003c84:	4a0b      	ldr	r2, [pc, #44]	; (8003cb4 <VL53L0X_WrByte+0x44>)
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <VL53L0X_WrByte+0x44>)
 8003c8c:	78bb      	ldrb	r3, [r7, #2]
 8003c8e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8003c90:	2202      	movs	r2, #2
 8003c92:	4908      	ldr	r1, [pc, #32]	; (8003cb4 <VL53L0X_WrByte+0x44>)
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff ff4d 	bl	8003b34 <_I2CWrite>
 8003c9a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003ca2:	23ec      	movs	r3, #236	; 0xec
 8003ca4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8003ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	200019a8 	.word	0x200019a8

08003cb8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	70fb      	strb	r3, [r7, #3]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8003ccc:	4a0e      	ldr	r2, [pc, #56]	; (8003d08 <VL53L0X_WrWord+0x50>)
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8003cd2:	883b      	ldrh	r3, [r7, #0]
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <VL53L0X_WrWord+0x50>)
 8003cdc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8003cde:	883b      	ldrh	r3, [r7, #0]
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <VL53L0X_WrWord+0x50>)
 8003ce4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	4907      	ldr	r1, [pc, #28]	; (8003d08 <VL53L0X_WrWord+0x50>)
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff ff22 	bl	8003b34 <_I2CWrite>
 8003cf0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003cf8:	23ec      	movs	r3, #236	; 0xec
 8003cfa:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8003cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	200019a8 	.word	0x200019a8

08003d0c <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	460b      	mov	r3, r1
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    _I2CBuffer[0] = index;
 8003d1e:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <VL53L0X_WrDWord+0x60>)
 8003d20:	7afb      	ldrb	r3, [r7, #11]
 8003d22:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = (data >> 24) & 0xFF;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	0e1b      	lsrs	r3, r3, #24
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <VL53L0X_WrDWord+0x60>)
 8003d2c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 16) & 0xFF;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	0c1b      	lsrs	r3, r3, #16
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <VL53L0X_WrDWord+0x60>)
 8003d36:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 8)  & 0xFF;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	0a1b      	lsrs	r3, r3, #8
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <VL53L0X_WrDWord+0x60>)
 8003d40:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 0 ) & 0xFF;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <VL53L0X_WrDWord+0x60>)
 8003d48:	711a      	strb	r2, [r3, #4]
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 5);
 8003d4a:	2205      	movs	r2, #5
 8003d4c:	4907      	ldr	r1, [pc, #28]	; (8003d6c <VL53L0X_WrDWord+0x60>)
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7ff fef0 	bl	8003b34 <_I2CWrite>
 8003d54:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <VL53L0X_WrDWord+0x54>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003d5c:	23ec      	movs	r3, #236	; 0xec
 8003d5e:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8003d60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	200019a8 	.word	0x200019a8

08003d70 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	4608      	mov	r0, r1
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4603      	mov	r3, r0
 8003d80:	70fb      	strb	r3, [r7, #3]
 8003d82:	460b      	mov	r3, r1
 8003d84:	70bb      	strb	r3, [r7, #2]
 8003d86:	4613      	mov	r3, r2
 8003d88:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8003d8e:	f107 020e 	add.w	r2, r7, #14
 8003d92:	78fb      	ldrb	r3, [r7, #3]
 8003d94:	4619      	mov	r1, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f81e 	bl	8003dd8 <VL53L0X_RdByte>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8003da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d110      	bne.n	8003dca <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8003da8:	7bba      	ldrb	r2, [r7, #14]
 8003daa:	78bb      	ldrb	r3, [r7, #2]
 8003dac:	4013      	ands	r3, r2
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	787b      	ldrb	r3, [r7, #1]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8003db8:	7bba      	ldrb	r2, [r7, #14]
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff ff56 	bl	8003c70 <VL53L0X_WrByte>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	73fb      	strb	r3, [r7, #15]
 8003dc8:	e000      	b.n	8003dcc <VL53L0X_UpdateByte+0x5c>
        goto done;
 8003dca:	bf00      	nop
done:
    return Status;
 8003dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	460b      	mov	r3, r1
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8003dea:	f107 030b 	add.w	r3, r7, #11
 8003dee:	2201      	movs	r2, #1
 8003df0:	4619      	mov	r1, r3
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff fe9e 	bl	8003b34 <_I2CWrite>
 8003df8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003e00:	23ec      	movs	r3, #236	; 0xec
 8003e02:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003e04:	e00c      	b.n	8003e20 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8003e06:	2201      	movs	r2, #1
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f7ff feb1 	bl	8003b72 <_I2CRead>
 8003e10:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003e18:	23ec      	movs	r3, #236	; 0xec
 8003e1a:	75fb      	strb	r3, [r7, #23]
 8003e1c:	e000      	b.n	8003e20 <VL53L0X_RdByte+0x48>
    }
done:
 8003e1e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8003e20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	460b      	mov	r3, r1
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8003e3e:	f107 030b 	add.w	r3, r7, #11
 8003e42:	2201      	movs	r2, #1
 8003e44:	4619      	mov	r1, r3
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7ff fe74 	bl	8003b34 <_I2CWrite>
 8003e4c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003e54:	23ec      	movs	r3, #236	; 0xec
 8003e56:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003e58:	e017      	b.n	8003e8a <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	490e      	ldr	r1, [pc, #56]	; (8003e98 <VL53L0X_RdWord+0x6c>)
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff fe87 	bl	8003b72 <_I2CRead>
 8003e64:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003e6c:	23ec      	movs	r3, #236	; 0xec
 8003e6e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003e70:	e00b      	b.n	8003e8a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <VL53L0X_RdWord+0x6c>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <VL53L0X_RdWord+0x6c>)
 8003e7e:	785b      	ldrb	r3, [r3, #1]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	4413      	add	r3, r2
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8003e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	200019a8 	.word	0x200019a8

08003e9c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8003eae:	f107 030b 	add.w	r3, r7, #11
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff fe3c 	bl	8003b34 <_I2CWrite>
 8003ebc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003ec4:	23ec      	movs	r3, #236	; 0xec
 8003ec6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003ec8:	e01b      	b.n	8003f02 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8003eca:	2204      	movs	r2, #4
 8003ecc:	4910      	ldr	r1, [pc, #64]	; (8003f10 <VL53L0X_RdDWord+0x74>)
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f7ff fe4f 	bl	8003b72 <_I2CRead>
 8003ed4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003edc:	23ec      	movs	r3, #236	; 0xec
 8003ede:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003ee0:	e00f      	b.n	8003f02 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <VL53L0X_RdDWord+0x74>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	061a      	lsls	r2, r3, #24
 8003ee8:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <VL53L0X_RdDWord+0x74>)
 8003eea:	785b      	ldrb	r3, [r3, #1]
 8003eec:	041b      	lsls	r3, r3, #16
 8003eee:	441a      	add	r2, r3
 8003ef0:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <VL53L0X_RdDWord+0x74>)
 8003ef2:	789b      	ldrb	r3, [r3, #2]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	4413      	add	r3, r2
 8003ef8:	4a05      	ldr	r2, [pc, #20]	; (8003f10 <VL53L0X_RdDWord+0x74>)
 8003efa:	78d2      	ldrb	r2, [r2, #3]
 8003efc:	441a      	add	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8003f02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	200019a8 	.word	0x200019a8

08003f14 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8003f20:	2002      	movs	r0, #2
 8003f22:	f008 f8b7 	bl	800c094 <HAL_Delay>
    return status;
 8003f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f38:	f7ff fbd0 	bl	80036dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f3c:	480c      	ldr	r0, [pc, #48]	; (8003f70 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f3e:	490d      	ldr	r1, [pc, #52]	; (8003f74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f40:	4a0d      	ldr	r2, [pc, #52]	; (8003f78 <LoopForever+0xe>)
  movs r3, #0
 8003f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f44:	e002      	b.n	8003f4c <LoopCopyDataInit>

08003f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f4a:	3304      	adds	r3, #4

08003f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f50:	d3f9      	bcc.n	8003f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f52:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f54:	4c0a      	ldr	r4, [pc, #40]	; (8003f80 <LoopForever+0x16>)
  movs r3, #0
 8003f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f58:	e001      	b.n	8003f5e <LoopFillZerobss>

08003f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f5c:	3204      	adds	r2, #4

08003f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f60:	d3fb      	bcc.n	8003f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f62:	f016 fa8b 	bl	801a47c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f66:	f7fd ff73 	bl	8001e50 <main>

08003f6a <LoopForever>:

LoopForever:
    b LoopForever
 8003f6a:	e7fe      	b.n	8003f6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003f6c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f74:	2000074c 	.word	0x2000074c
  ldr r2, =_sidata
 8003f78:	0801d98c 	.word	0x0801d98c
  ldr r2, =_sbss
 8003f7c:	2000074c 	.word	0x2000074c
  ldr r4, =_ebss
 8003f80:	20003828 	.word	0x20003828

08003f84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f84:	e7fe      	b.n	8003f84 <ADC1_2_IRQHandler>
	...

08003f88 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 f90d 	bl	80041b4 <ft6x06_GetInstance>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	2bff      	cmp	r3, #255	; 0xff
 8003fa2:	d10e      	bne.n	8003fc2 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	f000 f905 	bl	80041b4 <ft6x06_GetInstance>
 8003faa:	4603      	mov	r3, r0
 8003fac:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8003fae:	7bbb      	ldrb	r3, [r7, #14]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d806      	bhi.n	8003fc2 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8003fb4:	7bbb      	ldrb	r3, [r7, #14]
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	b2d1      	uxtb	r1, r2
 8003fba:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <ft6x06_Init+0x44>)
 8003fbc:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8003fbe:	f006 fee7 	bl	800ad90 <TS_IO_Init>
    }
  }
}
 8003fc2:	bf00      	nop
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	200019e8 	.word	0x200019e8

08003fd0 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	4603      	mov	r3, r0
 8003fee:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8003ff0:	f006 fece 	bl	800ad90 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8003ff4:	88fb      	ldrh	r3, [r7, #6]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	21a8      	movs	r1, #168	; 0xa8
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f006 ff0e 	bl	800ae1c <TS_IO_Read>
 8004000:	4603      	mov	r3, r0
 8004002:	b29b      	uxth	r3, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f8bc 	bl	8004196 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	4618      	mov	r0, r3
 8004022:	f000 f88d 	bl	8004140 <ft6x06_TS_DisableIT>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2102      	movs	r1, #2
 8004044:	4618      	mov	r0, r3
 8004046:	f006 fee9 	bl	800ae1c <TS_IO_Read>
 800404a:	4603      	mov	r3, r0
 800404c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	b2db      	uxtb	r3, r3
 8004058:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <ft6x06_TS_DetectTouch+0x50>)
 800406c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 800406e:	4b04      	ldr	r3, [pc, #16]	; (8004080 <ft6x06_TS_DetectTouch+0x50>)
 8004070:	2200      	movs	r2, #0
 8004072:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	b2db      	uxtb	r3, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	200019ec 	.word	0x200019ec

08004084 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8004096:	4b1f      	ldr	r3, [pc, #124]	; (8004114 <ft6x06_TS_GetXY+0x90>)
 8004098:	789a      	ldrb	r2, [r3, #2]
 800409a:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <ft6x06_TS_GetXY+0x90>)
 800409c:	785b      	ldrb	r3, [r3, #1]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d234      	bcs.n	800410c <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80040a2:	4b1c      	ldr	r3, [pc, #112]	; (8004114 <ft6x06_TS_GetXY+0x90>)
 80040a4:	789b      	ldrb	r3, [r3, #2]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <ft6x06_TS_GetXY+0x2c>
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d003      	beq.n	80040b6 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 80040ae:	e005      	b.n	80040bc <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 80040b0:	2303      	movs	r3, #3
 80040b2:	75fb      	strb	r3, [r7, #23]
      break;
 80040b4:	e002      	b.n	80040bc <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 80040b6:	2309      	movs	r3, #9
 80040b8:	75fb      	strb	r3, [r7, #23]
      break;
 80040ba:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 80040bc:	89fb      	ldrh	r3, [r7, #14]
 80040be:	b2d8      	uxtb	r0, r3
 80040c0:	f107 0210 	add.w	r2, r7, #16
 80040c4:	7df9      	ldrb	r1, [r7, #23]
 80040c6:	2304      	movs	r3, #4
 80040c8:	f006 febe 	bl	800ae48 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80040cc:	7c3b      	ldrb	r3, [r7, #16]
 80040ce:	021b      	lsls	r3, r3, #8
 80040d0:	b21b      	sxth	r3, r3
 80040d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80040d6:	b21a      	sxth	r2, r3
 80040d8:	7c7b      	ldrb	r3, [r7, #17]
 80040da:	b21b      	sxth	r3, r3
 80040dc:	4313      	orrs	r3, r2
 80040de:	b21b      	sxth	r3, r3
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80040e6:	7cbb      	ldrb	r3, [r7, #18]
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	b21b      	sxth	r3, r3
 80040ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80040f0:	b21a      	sxth	r2, r3
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	b21b      	sxth	r3, r3
 80040f6:	4313      	orrs	r3, r2
 80040f8:	b21b      	sxth	r3, r3
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <ft6x06_TS_GetXY+0x90>)
 8004102:	789b      	ldrb	r3, [r3, #2]
 8004104:	3301      	adds	r3, #1
 8004106:	b2da      	uxtb	r2, r3
 8004108:	4b02      	ldr	r3, [pc, #8]	; (8004114 <ft6x06_TS_GetXY+0x90>)
 800410a:	709a      	strb	r2, [r3, #2]
  }
}
 800410c:	bf00      	nop
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	200019ec 	.word	0x200019ec

08004118 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	7bfa      	ldrb	r2, [r7, #15]
 8004130:	21a4      	movs	r1, #164	; 0xa4
 8004132:	4618      	mov	r0, r3
 8004134:	f006 fe58 	bl	800ade8 <TS_IO_Write>
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	7bfa      	ldrb	r2, [r7, #15]
 8004158:	21a4      	movs	r1, #164	; 0xa4
 800415a:	4618      	mov	r0, r3
 800415c:	f006 fe44 	bl	800ade8 <TS_IO_Write>
}
 8004160:	bf00      	nop
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8004196:	b480      	push	{r7}
 8004198:	b085      	sub	sp, #20
 800419a:	af00      	add	r7, sp, #0
 800419c:	4603      	mov	r3, r0
 800419e:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80041a4:	68fb      	ldr	r3, [r7, #12]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
 80041c6:	e00b      	b.n	80041e0 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	4a0a      	ldr	r2, [pc, #40]	; (80041f4 <ft6x06_GetInstance+0x40>)
 80041cc:	5cd3      	ldrb	r3, [r2, r3]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	88fa      	ldrh	r2, [r7, #6]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d101      	bne.n	80041da <ft6x06_GetInstance+0x26>
    {
      return idx; 
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	e006      	b.n	80041e8 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	3301      	adds	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d9f0      	bls.n	80041c8 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80041e6:	23ff      	movs	r3, #255	; 0xff
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	200019e8 	.word	0x200019e8

080041f8 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	4618      	mov	r0, r3
 8004206:	f000 ffd1 	bl	80051ac <mfxstm32l152_GetInstance>
 800420a:	4603      	mov	r3, r0
 800420c:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	2bff      	cmp	r3, #255	; 0xff
 8004212:	d10e      	bne.n	8004232 <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8004214:	2000      	movs	r0, #0
 8004216:	f000 ffc9 	bl	80051ac <mfxstm32l152_GetInstance>
 800421a:	4603      	mov	r3, r0
 800421c:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 800421e:	7bbb      	ldrb	r3, [r7, #14]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d806      	bhi.n	8004232 <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8004224:	7bbb      	ldrb	r3, [r7, #14]
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	b2d1      	uxtb	r1, r2
 800422a:	4a09      	ldr	r2, [pc, #36]	; (8004250 <mfxstm32l152_Init+0x58>)
 800422c:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 800422e:	f006 fb81 	bl	800a934 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	2102      	movs	r1, #2
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f8db 	bl	80043f2 <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 800423c:	88fb      	ldrh	r3, [r7, #6]
 800423e:	2101      	movs	r1, #1
 8004240:	4618      	mov	r0, r3
 8004242:	f000 f8fc 	bl	800443e <mfxstm32l152_SetIrqOutPinType>
}
 8004246:	bf00      	nop
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	200019f0 	.word	0x200019f0

08004254 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	4618      	mov	r0, r3
 8004262:	f000 ffc3 	bl	80051ec <mfxstm32l152_ReleaseInstance>
 8004266:	4603      	mov	r3, r0
 8004268:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	2bff      	cmp	r3, #255	; 0xff
 800426e:	d001      	beq.n	8004274 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 8004270:	f006 fb70 	bl	800a954 <MFX_IO_DeInit>
  }
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	2280      	movs	r2, #128	; 0x80
 800428a:	2140      	movs	r1, #64	; 0x40
 800428c:	4618      	mov	r0, r3
 800428e:	f006 fc03 	bl	800aa98 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8004292:	200a      	movs	r0, #10
 8004294:	f006 fc42 	bl	800ab1c <MFX_IO_Delay>
}
 8004298:	bf00      	nop
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	2240      	movs	r2, #64	; 0x40
 80042ae:	2140      	movs	r1, #64	; 0x40
 80042b0:	4618      	mov	r0, r3
 80042b2:	f006 fbf1 	bl	800aa98 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 80042b6:	f006 fbb7 	bl	800aa28 <MFX_IO_EnableWakeupPin>
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	4603      	mov	r3, r0
 80042ca:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 ff6c 	bl	80051ac <mfxstm32l152_GetInstance>
 80042d4:	4603      	mov	r3, r0
 80042d6:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2bff      	cmp	r3, #255	; 0xff
 80042dc:	d101      	bne.n	80042e2 <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 80042de:	f006 fba3 	bl	800aa28 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 80042e2:	f006 fbc5 	bl	800aa70 <MFX_IO_Wakeup>
}
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	4603      	mov	r3, r0
 80042f6:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 80042f8:	2001      	movs	r0, #1
 80042fa:	f006 fc0f 	bl	800ab1c <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 80042fe:	f006 fb19 	bl	800a934 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f006 fbda 	bl	800aac0 <MFX_IO_Read>
 800430c:	4603      	mov	r3, r0
 800430e:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	b29b      	uxth	r3, r3
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	460a      	mov	r2, r1
 8004326:	80fb      	strh	r3, [r7, #6]
 8004328:	4613      	mov	r3, r2
 800432a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	2142      	movs	r1, #66	; 0x42
 8004334:	4618      	mov	r0, r3
 8004336:	f006 fbc3 	bl	800aac0 <MFX_IO_Read>
 800433a:	4603      	mov	r3, r0
 800433c:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	797b      	ldrb	r3, [r7, #5]
 8004342:	4313      	orrs	r3, r2
 8004344:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8004346:	7bfa      	ldrb	r2, [r7, #15]
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	2142      	movs	r1, #66	; 0x42
 800434c:	4618      	mov	r0, r3
 800434e:	f006 fba3 	bl	800aa98 <MFX_IO_Write>
}
 8004352:	bf00      	nop
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	4603      	mov	r3, r0
 8004362:	460a      	mov	r2, r1
 8004364:	80fb      	strh	r3, [r7, #6]
 8004366:	4613      	mov	r3, r2
 8004368:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800436a:	2300      	movs	r3, #0
 800436c:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	2142      	movs	r1, #66	; 0x42
 8004372:	4618      	mov	r0, r3
 8004374:	f006 fba4 	bl	800aac0 <MFX_IO_Read>
 8004378:	4603      	mov	r3, r0
 800437a:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 800437c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004380:	43db      	mvns	r3, r3
 8004382:	b25a      	sxtb	r2, r3
 8004384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004388:	4013      	ands	r3, r2
 800438a:	b25b      	sxtb	r3, r3
 800438c:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 800438e:	7bfa      	ldrb	r2, [r7, #15]
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	2142      	movs	r1, #66	; 0x42
 8004394:	4618      	mov	r0, r3
 8004396:	f006 fb7f 	bl	800aa98 <MFX_IO_Write>
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	4603      	mov	r3, r0
 80043aa:	460a      	mov	r2, r1
 80043ac:	80fb      	strh	r3, [r7, #6]
 80043ae:	4613      	mov	r3, r2
 80043b0:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	2108      	movs	r1, #8
 80043b6:	4618      	mov	r0, r3
 80043b8:	f006 fb82 	bl	800aac0 <MFX_IO_Read>
 80043bc:	4603      	mov	r3, r0
 80043be:	461a      	mov	r2, r3
 80043c0:	797b      	ldrb	r3, [r7, #5]
 80043c2:	4013      	ands	r3, r2
 80043c4:	b2db      	uxtb	r3, r3
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	4603      	mov	r3, r0
 80043d6:	460a      	mov	r2, r1
 80043d8:	80fb      	strh	r3, [r7, #6]
 80043da:	4613      	mov	r3, r2
 80043dc:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 80043de:	797a      	ldrb	r2, [r7, #5]
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	2144      	movs	r1, #68	; 0x44
 80043e4:	4618      	mov	r0, r3
 80043e6:	f006 fb57 	bl	800aa98 <MFX_IO_Write>
}
 80043ea:	bf00      	nop
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	4603      	mov	r3, r0
 80043fa:	460a      	mov	r2, r1
 80043fc:	80fb      	strh	r3, [r7, #6]
 80043fe:	4613      	mov	r3, r2
 8004400:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	2141      	movs	r1, #65	; 0x41
 800440a:	4618      	mov	r0, r3
 800440c:	f006 fb58 	bl	800aac0 <MFX_IO_Read>
 8004410:	4603      	mov	r3, r0
 8004412:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	f023 0302 	bic.w	r3, r3, #2
 800441a:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 800441c:	7bfa      	ldrb	r2, [r7, #15]
 800441e:	797b      	ldrb	r3, [r7, #5]
 8004420:	4313      	orrs	r3, r2
 8004422:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8004424:	7bfa      	ldrb	r2, [r7, #15]
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	2141      	movs	r1, #65	; 0x41
 800442a:	4618      	mov	r0, r3
 800442c:	f006 fb34 	bl	800aa98 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8004430:	2001      	movs	r0, #1
 8004432:	f006 fb73 	bl	800ab1c <MFX_IO_Delay>

}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	4603      	mov	r3, r0
 8004446:	460a      	mov	r2, r1
 8004448:	80fb      	strh	r3, [r7, #6]
 800444a:	4613      	mov	r3, r2
 800444c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800444e:	2300      	movs	r3, #0
 8004450:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	2141      	movs	r1, #65	; 0x41
 8004456:	4618      	mov	r0, r3
 8004458:	f006 fb32 	bl	800aac0 <MFX_IO_Read>
 800445c:	4603      	mov	r3, r0
 800445e:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	f023 0301 	bic.w	r3, r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8004468:	7bfa      	ldrb	r2, [r7, #15]
 800446a:	797b      	ldrb	r3, [r7, #5]
 800446c:	4313      	orrs	r3, r2
 800446e:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8004470:	7bfa      	ldrb	r2, [r7, #15]
 8004472:	88fb      	ldrh	r3, [r7, #6]
 8004474:	2141      	movs	r1, #65	; 0x41
 8004476:	4618      	mov	r0, r3
 8004478:	f006 fb0e 	bl	800aa98 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 800447c:	2001      	movs	r0, #1
 800447e:	f006 fb4d 	bl	800ab1c <MFX_IO_Delay>

}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	4603      	mov	r3, r0
 8004492:	6039      	str	r1, [r7, #0]
 8004494:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	2140      	movs	r1, #64	; 0x40
 800449a:	4618      	mov	r0, r3
 800449c:	f006 fb10 	bl	800aac0 <MFX_IO_Read>
 80044a0:	4603      	mov	r3, r0
 80044a2:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b2:	d304      	bcc.n	80044be <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	f043 0308 	orr.w	r3, r3, #8
 80044ba:	73fb      	strb	r3, [r7, #15]
 80044bc:	e003      	b.n	80044c6 <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	f023 0308 	bic.w	r3, r3, #8
 80044c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80044c6:	7bfa      	ldrb	r2, [r7, #15]
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	2140      	movs	r1, #64	; 0x40
 80044cc:	4618      	mov	r0, r3
 80044ce:	f006 fae3 	bl	800aa98 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80044d2:	2001      	movs	r0, #1
 80044d4:	f006 fb22 	bl	800ab1c <MFX_IO_Delay>
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	6039      	str	r1, [r7, #0]
 80044ea:	80fb      	strh	r3, [r7, #6]
 80044ec:	4613      	mov	r3, r2
 80044ee:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 80044f4:	797b      	ldrb	r3, [r7, #5]
 80044f6:	2b17      	cmp	r3, #23
 80044f8:	f200 82d4 	bhi.w	8004aa4 <mfxstm32l152_IO_Config+0x5c4>
 80044fc:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <mfxstm32l152_IO_Config+0x24>)
 80044fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004502:	bf00      	nop
 8004504:	08004595 	.word	0x08004595
 8004508:	08004625 	.word	0x08004625
 800450c:	080046e5 	.word	0x080046e5
 8004510:	080047d5 	.word	0x080047d5
 8004514:	080048c5 	.word	0x080048c5
 8004518:	080049b5 	.word	0x080049b5
 800451c:	08004565 	.word	0x08004565
 8004520:	08004565 	.word	0x08004565
 8004524:	080045c5 	.word	0x080045c5
 8004528:	080045f5 	.word	0x080045f5
 800452c:	08004aa5 	.word	0x08004aa5
 8004530:	080046b5 	.word	0x080046b5
 8004534:	08004685 	.word	0x08004685
 8004538:	08004aa5 	.word	0x08004aa5
 800453c:	08004655 	.word	0x08004655
 8004540:	08004625 	.word	0x08004625
 8004544:	08004735 	.word	0x08004735
 8004548:	08004785 	.word	0x08004785
 800454c:	08004825 	.word	0x08004825
 8004550:	08004875 	.word	0x08004875
 8004554:	08004915 	.word	0x08004915
 8004558:	08004965 	.word	0x08004965
 800455c:	08004a05 	.word	0x08004a05
 8004560:	08004a55 	.word	0x08004a55
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8004564:	88fb      	ldrh	r3, [r7, #6]
 8004566:	6839      	ldr	r1, [r7, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fb67 	bl	8004c3c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	2200      	movs	r2, #0
 8004572:	6839      	ldr	r1, [r7, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fa9d 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800457a:	88f8      	ldrh	r0, [r7, #6]
 800457c:	2300      	movs	r3, #0
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	2164      	movs	r1, #100	; 0x64
 8004582:	f000 fe57 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8004586:	88f8      	ldrh	r0, [r7, #6]
 8004588:	2300      	movs	r3, #0
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	2168      	movs	r1, #104	; 0x68
 800458e:	f000 fe51 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    break;
 8004592:	e28a      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8004594:	88fb      	ldrh	r3, [r7, #6]
 8004596:	6839      	ldr	r1, [r7, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f000 fb4f 	bl	8004c3c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	2200      	movs	r2, #0
 80045a2:	6839      	ldr	r1, [r7, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fa85 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80045aa:	88f8      	ldrh	r0, [r7, #6]
 80045ac:	2300      	movs	r3, #0
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	2164      	movs	r1, #100	; 0x64
 80045b2:	f000 fe3f 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80045b6:	88f8      	ldrh	r0, [r7, #6]
 80045b8:	2301      	movs	r3, #1
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	2168      	movs	r1, #104	; 0x68
 80045be:	f000 fe39 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    break;
 80045c2:	e272      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	6839      	ldr	r1, [r7, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fb37 	bl	8004c3c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	2200      	movs	r2, #0
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fa6d 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80045da:	88f8      	ldrh	r0, [r7, #6]
 80045dc:	2301      	movs	r3, #1
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	2164      	movs	r1, #100	; 0x64
 80045e2:	f000 fe27 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80045e6:	88f8      	ldrh	r0, [r7, #6]
 80045e8:	2301      	movs	r3, #1
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	2168      	movs	r1, #104	; 0x68
 80045ee:	f000 fe21 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    break;
 80045f2:	e25a      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80045f4:	88fb      	ldrh	r3, [r7, #6]
 80045f6:	6839      	ldr	r1, [r7, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 fb1f 	bl	8004c3c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	2200      	movs	r2, #0
 8004602:	6839      	ldr	r1, [r7, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fa55 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800460a:	88f8      	ldrh	r0, [r7, #6]
 800460c:	2301      	movs	r3, #1
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	2164      	movs	r1, #100	; 0x64
 8004612:	f000 fe0f 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8004616:	88f8      	ldrh	r0, [r7, #6]
 8004618:	2300      	movs	r3, #0
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	2168      	movs	r1, #104	; 0x68
 800461e:	f000 fe09 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    break;
 8004622:	e242      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	6839      	ldr	r1, [r7, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fb07 	bl	8004c3c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	2201      	movs	r2, #1
 8004632:	6839      	ldr	r1, [r7, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fa3d 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 800463a:	88f8      	ldrh	r0, [r7, #6]
 800463c:	2300      	movs	r3, #0
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	2164      	movs	r1, #100	; 0x64
 8004642:	f000 fdf7 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8004646:	88f8      	ldrh	r0, [r7, #6]
 8004648:	2300      	movs	r3, #0
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	2168      	movs	r1, #104	; 0x68
 800464e:	f000 fdf1 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    break;
 8004652:	e22a      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8004654:	88fb      	ldrh	r3, [r7, #6]
 8004656:	6839      	ldr	r1, [r7, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f000 faef 	bl	8004c3c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	2201      	movs	r2, #1
 8004662:	6839      	ldr	r1, [r7, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fa25 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 800466a:	88f8      	ldrh	r0, [r7, #6]
 800466c:	2300      	movs	r3, #0
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	2164      	movs	r1, #100	; 0x64
 8004672:	f000 fddf 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8004676:	88f8      	ldrh	r0, [r7, #6]
 8004678:	2301      	movs	r3, #1
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	2168      	movs	r1, #104	; 0x68
 800467e:	f000 fdd9 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    break;
 8004682:	e212      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8004684:	88fb      	ldrh	r3, [r7, #6]
 8004686:	6839      	ldr	r1, [r7, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fad7 	bl	8004c3c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	2201      	movs	r2, #1
 8004692:	6839      	ldr	r1, [r7, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fa0d 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 800469a:	88f8      	ldrh	r0, [r7, #6]
 800469c:	2301      	movs	r3, #1
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	2164      	movs	r1, #100	; 0x64
 80046a2:	f000 fdc7 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80046a6:	88f8      	ldrh	r0, [r7, #6]
 80046a8:	2300      	movs	r3, #0
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	2168      	movs	r1, #104	; 0x68
 80046ae:	f000 fdc1 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    break;
 80046b2:	e1fa      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	6839      	ldr	r1, [r7, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fabf 	bl	8004c3c <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80046be:	88fb      	ldrh	r3, [r7, #6]
 80046c0:	2201      	movs	r2, #1
 80046c2:	6839      	ldr	r1, [r7, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 f9f5 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80046ca:	88f8      	ldrh	r0, [r7, #6]
 80046cc:	2301      	movs	r3, #1
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	2164      	movs	r1, #100	; 0x64
 80046d2:	f000 fdaf 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80046d6:	88f8      	ldrh	r0, [r7, #6]
 80046d8:	2301      	movs	r3, #1
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	2168      	movs	r1, #104	; 0x68
 80046de:	f000 fda9 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    break;
 80046e2:	e1e2      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fa7a 	bl	8004be0 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	2200      	movs	r2, #0
 80046f0:	6839      	ldr	r1, [r7, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 f9de 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80046f8:	88f8      	ldrh	r0, [r7, #6]
 80046fa:	2300      	movs	r3, #0
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	2164      	movs	r1, #100	; 0x64
 8004700:	f000 fd98 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8004704:	88f8      	ldrh	r0, [r7, #6]
 8004706:	2301      	movs	r3, #1
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	2168      	movs	r1, #104	; 0x68
 800470c:	f000 fd92 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8004710:	88fb      	ldrh	r3, [r7, #6]
 8004712:	2201      	movs	r2, #1
 8004714:	6839      	ldr	r1, [r7, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f9de 	bl	8004ad8 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	2201      	movs	r2, #1
 8004720:	6839      	ldr	r1, [r7, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f9ed 	bl	8004b02 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	6839      	ldr	r1, [r7, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fa75 	bl	8004c1c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004732:	e1ba      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004734:	88fb      	ldrh	r3, [r7, #6]
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fa52 	bl	8004be0 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	2200      	movs	r2, #0
 8004740:	6839      	ldr	r1, [r7, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 f9b6 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004748:	88f8      	ldrh	r0, [r7, #6]
 800474a:	2301      	movs	r3, #1
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	2164      	movs	r1, #100	; 0x64
 8004750:	f000 fd70 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8004754:	88f8      	ldrh	r0, [r7, #6]
 8004756:	2301      	movs	r3, #1
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	2168      	movs	r1, #104	; 0x68
 800475c:	f000 fd6a 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	2201      	movs	r2, #1
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f9b6 	bl	8004ad8 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	2201      	movs	r2, #1
 8004770:	6839      	ldr	r1, [r7, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 f9c5 	bl	8004b02 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004778:	88fb      	ldrh	r3, [r7, #6]
 800477a:	6839      	ldr	r1, [r7, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fa4d 	bl	8004c1c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004782:	e192      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fa2a 	bl	8004be0 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	2200      	movs	r2, #0
 8004790:	6839      	ldr	r1, [r7, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 f98e 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004798:	88f8      	ldrh	r0, [r7, #6]
 800479a:	2301      	movs	r3, #1
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	2164      	movs	r1, #100	; 0x64
 80047a0:	f000 fd48 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80047a4:	88f8      	ldrh	r0, [r7, #6]
 80047a6:	2300      	movs	r3, #0
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	2168      	movs	r1, #104	; 0x68
 80047ac:	f000 fd42 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	2201      	movs	r2, #1
 80047b4:	6839      	ldr	r1, [r7, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f98e 	bl	8004ad8 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80047bc:	88fb      	ldrh	r3, [r7, #6]
 80047be:	2201      	movs	r2, #1
 80047c0:	6839      	ldr	r1, [r7, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 f99d 	bl	8004b02 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	6839      	ldr	r1, [r7, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fa25 	bl	8004c1c <mfxstm32l152_IO_EnablePinIT>
    break;
 80047d2:	e16a      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fa02 	bl	8004be0 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80047dc:	88fb      	ldrh	r3, [r7, #6]
 80047de:	2200      	movs	r2, #0
 80047e0:	6839      	ldr	r1, [r7, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f966 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80047e8:	88f8      	ldrh	r0, [r7, #6]
 80047ea:	2300      	movs	r3, #0
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	2164      	movs	r1, #100	; 0x64
 80047f0:	f000 fd20 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80047f4:	88f8      	ldrh	r0, [r7, #6]
 80047f6:	2301      	movs	r3, #1
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	2168      	movs	r1, #104	; 0x68
 80047fc:	f000 fd1a 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8004800:	88fb      	ldrh	r3, [r7, #6]
 8004802:	2201      	movs	r2, #1
 8004804:	6839      	ldr	r1, [r7, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f966 	bl	8004ad8 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 800480c:	88fb      	ldrh	r3, [r7, #6]
 800480e:	2200      	movs	r2, #0
 8004810:	6839      	ldr	r1, [r7, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f975 	bl	8004b02 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	6839      	ldr	r1, [r7, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f000 f9fd 	bl	8004c1c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004822:	e142      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f9da 	bl	8004be0 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	2200      	movs	r2, #0
 8004830:	6839      	ldr	r1, [r7, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f93e 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004838:	88f8      	ldrh	r0, [r7, #6]
 800483a:	2301      	movs	r3, #1
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	2164      	movs	r1, #100	; 0x64
 8004840:	f000 fcf8 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8004844:	88f8      	ldrh	r0, [r7, #6]
 8004846:	2301      	movs	r3, #1
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	2168      	movs	r1, #104	; 0x68
 800484c:	f000 fcf2 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	2201      	movs	r2, #1
 8004854:	6839      	ldr	r1, [r7, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f93e 	bl	8004ad8 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 800485c:	88fb      	ldrh	r3, [r7, #6]
 800485e:	2200      	movs	r2, #0
 8004860:	6839      	ldr	r1, [r7, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f000 f94d 	bl	8004b02 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	6839      	ldr	r1, [r7, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f000 f9d5 	bl	8004c1c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004872:	e11a      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 f9b2 	bl	8004be0 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	2200      	movs	r2, #0
 8004880:	6839      	ldr	r1, [r7, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f916 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004888:	88f8      	ldrh	r0, [r7, #6]
 800488a:	2301      	movs	r3, #1
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	2164      	movs	r1, #100	; 0x64
 8004890:	f000 fcd0 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8004894:	88f8      	ldrh	r0, [r7, #6]
 8004896:	2300      	movs	r3, #0
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	2168      	movs	r1, #104	; 0x68
 800489c:	f000 fcca 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80048a0:	88fb      	ldrh	r3, [r7, #6]
 80048a2:	2201      	movs	r2, #1
 80048a4:	6839      	ldr	r1, [r7, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f916 	bl	8004ad8 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	2200      	movs	r2, #0
 80048b0:	6839      	ldr	r1, [r7, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 f925 	bl	8004b02 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	6839      	ldr	r1, [r7, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 f9ad 	bl	8004c1c <mfxstm32l152_IO_EnablePinIT>
    break;
 80048c2:	e0f2      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f98a 	bl	8004be0 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	2200      	movs	r2, #0
 80048d0:	6839      	ldr	r1, [r7, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f8ee 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80048d8:	88f8      	ldrh	r0, [r7, #6]
 80048da:	2300      	movs	r3, #0
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	2164      	movs	r1, #100	; 0x64
 80048e0:	f000 fca8 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80048e4:	88f8      	ldrh	r0, [r7, #6]
 80048e6:	2301      	movs	r3, #1
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	2168      	movs	r1, #104	; 0x68
 80048ec:	f000 fca2 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	2200      	movs	r2, #0
 80048f4:	6839      	ldr	r1, [r7, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f8ee 	bl	8004ad8 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80048fc:	88fb      	ldrh	r3, [r7, #6]
 80048fe:	2200      	movs	r2, #0
 8004900:	6839      	ldr	r1, [r7, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f8fd 	bl	8004b02 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	6839      	ldr	r1, [r7, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f000 f985 	bl	8004c1c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004912:	e0ca      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f962 	bl	8004be0 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	2200      	movs	r2, #0
 8004920:	6839      	ldr	r1, [r7, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f8c6 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004928:	88f8      	ldrh	r0, [r7, #6]
 800492a:	2301      	movs	r3, #1
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	2164      	movs	r1, #100	; 0x64
 8004930:	f000 fc80 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8004934:	88f8      	ldrh	r0, [r7, #6]
 8004936:	2301      	movs	r3, #1
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	2168      	movs	r1, #104	; 0x68
 800493c:	f000 fc7a 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004940:	88fb      	ldrh	r3, [r7, #6]
 8004942:	2200      	movs	r2, #0
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f000 f8c6 	bl	8004ad8 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	2200      	movs	r2, #0
 8004950:	6839      	ldr	r1, [r7, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f000 f8d5 	bl	8004b02 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004958:	88fb      	ldrh	r3, [r7, #6]
 800495a:	6839      	ldr	r1, [r7, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f95d 	bl	8004c1c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004962:	e0a2      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004964:	88fb      	ldrh	r3, [r7, #6]
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f93a 	bl	8004be0 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800496c:	88fb      	ldrh	r3, [r7, #6]
 800496e:	2200      	movs	r2, #0
 8004970:	6839      	ldr	r1, [r7, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 f89e 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004978:	88f8      	ldrh	r0, [r7, #6]
 800497a:	2301      	movs	r3, #1
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	2164      	movs	r1, #100	; 0x64
 8004980:	f000 fc58 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8004984:	88f8      	ldrh	r0, [r7, #6]
 8004986:	2300      	movs	r3, #0
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	2168      	movs	r1, #104	; 0x68
 800498c:	f000 fc52 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004990:	88fb      	ldrh	r3, [r7, #6]
 8004992:	2200      	movs	r2, #0
 8004994:	6839      	ldr	r1, [r7, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f89e 	bl	8004ad8 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	2200      	movs	r2, #0
 80049a0:	6839      	ldr	r1, [r7, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 f8ad 	bl	8004b02 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	6839      	ldr	r1, [r7, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 f935 	bl	8004c1c <mfxstm32l152_IO_EnablePinIT>
    break;
 80049b2:	e07a      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80049b4:	88fb      	ldrh	r3, [r7, #6]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 f912 	bl	8004be0 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	2200      	movs	r2, #0
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f876 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80049c8:	88f8      	ldrh	r0, [r7, #6]
 80049ca:	2300      	movs	r3, #0
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	2164      	movs	r1, #100	; 0x64
 80049d0:	f000 fc30 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80049d4:	88f8      	ldrh	r0, [r7, #6]
 80049d6:	2301      	movs	r3, #1
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	2168      	movs	r1, #104	; 0x68
 80049dc:	f000 fc2a 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	2200      	movs	r2, #0
 80049e4:	6839      	ldr	r1, [r7, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f876 	bl	8004ad8 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	2201      	movs	r2, #1
 80049f0:	6839      	ldr	r1, [r7, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 f885 	bl	8004b02 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	6839      	ldr	r1, [r7, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 f90d 	bl	8004c1c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004a02:	e052      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f8ea 	bl	8004be0 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	6839      	ldr	r1, [r7, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 f84e 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004a18:	88f8      	ldrh	r0, [r7, #6]
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	2164      	movs	r1, #100	; 0x64
 8004a20:	f000 fc08 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8004a24:	88f8      	ldrh	r0, [r7, #6]
 8004a26:	2301      	movs	r3, #1
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	2168      	movs	r1, #104	; 0x68
 8004a2c:	f000 fc02 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004a30:	88fb      	ldrh	r3, [r7, #6]
 8004a32:	2200      	movs	r2, #0
 8004a34:	6839      	ldr	r1, [r7, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 f84e 	bl	8004ad8 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	6839      	ldr	r1, [r7, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f85d 	bl	8004b02 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	6839      	ldr	r1, [r7, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 f8e5 	bl	8004c1c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004a52:	e02a      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8004a54:	88fb      	ldrh	r3, [r7, #6]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f8c2 	bl	8004be0 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004a5c:	88fb      	ldrh	r3, [r7, #6]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f826 	bl	8004ab4 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004a68:	88f8      	ldrh	r0, [r7, #6]
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	2164      	movs	r1, #100	; 0x64
 8004a70:	f000 fbe0 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8004a74:	88f8      	ldrh	r0, [r7, #6]
 8004a76:	2300      	movs	r3, #0
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	2168      	movs	r1, #104	; 0x68
 8004a7c:	f000 fbda 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004a80:	88fb      	ldrh	r3, [r7, #6]
 8004a82:	2200      	movs	r2, #0
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 f826 	bl	8004ad8 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	6839      	ldr	r1, [r7, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f835 	bl	8004b02 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004a98:	88fb      	ldrh	r3, [r7, #6]
 8004a9a:	6839      	ldr	r1, [r7, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 f8bd 	bl	8004c1c <mfxstm32l152_IO_EnablePinIT>
    break;
 8004aa2:	e002      	b.n	8004aaa <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 8004aa4:	797b      	ldrb	r3, [r7, #5]
 8004aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8004aa8:	bf00      	nop
  }

  return error_code;
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	6039      	str	r1, [r7, #0]
 8004abe:	80fb      	strh	r3, [r7, #6]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8004ac4:	797b      	ldrb	r3, [r7, #5]
 8004ac6:	88f8      	ldrh	r0, [r7, #6]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	2160      	movs	r1, #96	; 0x60
 8004acc:	f000 fbb2 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	6039      	str	r1, [r7, #0]
 8004ae2:	80fb      	strh	r3, [r7, #6]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8004ae8:	797b      	ldrb	r3, [r7, #5]
 8004aea:	88f8      	ldrh	r0, [r7, #6]
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	214c      	movs	r1, #76	; 0x4c
 8004af0:	f000 fba0 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8004af4:	2001      	movs	r0, #1
 8004af6:	f006 f811 	bl	800ab1c <MFX_IO_Delay>
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b082      	sub	sp, #8
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	4603      	mov	r3, r0
 8004b0a:	6039      	str	r1, [r7, #0]
 8004b0c:	80fb      	strh	r3, [r7, #6]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8004b12:	797b      	ldrb	r3, [r7, #5]
 8004b14:	88f8      	ldrh	r0, [r7, #6]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	2150      	movs	r1, #80	; 0x50
 8004b1a:	f000 fb8b 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8004b1e:	2001      	movs	r0, #1
 8004b20:	f005 fffc 	bl	800ab1c <MFX_IO_Delay>
}
 8004b24:	bf00      	nop
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	6039      	str	r1, [r7, #0]
 8004b36:	80fb      	strh	r3, [r7, #6]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8004b3c:	797b      	ldrb	r3, [r7, #5]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d006      	beq.n	8004b50 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8004b42:	88f8      	ldrh	r0, [r7, #6]
 8004b44:	2301      	movs	r3, #1
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	216c      	movs	r1, #108	; 0x6c
 8004b4a:	f000 fb73 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8004b4e:	e005      	b.n	8004b5c <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8004b50:	88f8      	ldrh	r0, [r7, #6]
 8004b52:	2301      	movs	r3, #1
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	2170      	movs	r1, #112	; 0x70
 8004b58:	f000 fb6c 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	6039      	str	r1, [r7, #0]
 8004b6e:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d006      	beq.n	8004b92 <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8004b84:	88fb      	ldrh	r3, [r7, #6]
 8004b86:	2110      	movs	r1, #16
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f005 ff99 	bl	800aac0 <MFX_IO_Read>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d006      	beq.n	8004baa <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	2111      	movs	r1, #17
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f005 ff8d 	bl	800aac0 <MFX_IO_Read>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d006      	beq.n	8004bc2 <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8004bb4:	88fb      	ldrh	r3, [r7, #6]
 8004bb6:	2112      	movs	r1, #18
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f005 ff81 	bl	800aac0 <MFX_IO_Read>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	021a      	lsls	r2, r3, #8
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	441a      	add	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	041b      	lsls	r3, r3, #16
 8004bce:	4413      	add	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	4013      	ands	r3, r2
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8004bea:	f005 feef 	bl	800a9cc <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff fb92 	bl	800431c <mfxstm32l152_EnableITSource>
}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fba3 	bl	800435a <mfxstm32l152_DisableITSource>
}
 8004c14:	bf00      	nop
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	6039      	str	r1, [r7, #0]
 8004c26:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8004c28:	88f8      	ldrh	r0, [r7, #6]
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	2148      	movs	r1, #72	; 0x48
 8004c30:	f000 fb00 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	6039      	str	r1, [r7, #0]
 8004c46:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8004c48:	88f8      	ldrh	r0, [r7, #6]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	2148      	movs	r1, #72	; 0x48
 8004c50:	f000 faf0 	bl	8005234 <mfxstm32l152_reg24_setPinValue>
}
 8004c54:	bf00      	nop
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	6039      	str	r1, [r7, #0]
 8004c66:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d006      	beq.n	8004c8a <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8004c7c:	88fb      	ldrh	r3, [r7, #6]
 8004c7e:	210c      	movs	r1, #12
 8004c80:	4618      	mov	r0, r3
 8004c82:	f005 ff1d 	bl	800aac0 <MFX_IO_Read>
 8004c86:	4603      	mov	r3, r0
 8004c88:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c90:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d006      	beq.n	8004ca6 <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	210d      	movs	r1, #13
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f005 ff0f 	bl	800aac0 <MFX_IO_Read>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d006      	beq.n	8004cbe <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	210e      	movs	r1, #14
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f005 ff03 	bl	800aac0 <MFX_IO_Read>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8004cbe:	7bfa      	ldrb	r2, [r7, #15]
 8004cc0:	89bb      	ldrh	r3, [r7, #12]
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	4413      	add	r3, r2
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	041b      	lsls	r3, r3, #16
 8004ccc:	4413      	add	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	4013      	ands	r3, r2
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	6039      	str	r1, [r7, #0]
 8004ce8:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	0a1b      	lsrs	r3, r3, #8
 8004cf2:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	0c1b      	lsrs	r3, r3, #16
 8004cf8:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8004d00:	7bfa      	ldrb	r2, [r7, #15]
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	2154      	movs	r1, #84	; 0x54
 8004d06:	4618      	mov	r0, r3
 8004d08:	f005 fec6 	bl	800aa98 <MFX_IO_Write>
  }
  if (pin_8_15)
 8004d0c:	7bbb      	ldrb	r3, [r7, #14]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8004d12:	7bba      	ldrb	r2, [r7, #14]
 8004d14:	88fb      	ldrh	r3, [r7, #6]
 8004d16:	2155      	movs	r1, #85	; 0x55
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f005 febd 	bl	800aa98 <MFX_IO_Write>
  }
  if (pin_16_23)
 8004d1e:	7b7b      	ldrb	r3, [r7, #13]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8004d24:	7b7a      	ldrb	r2, [r7, #13]
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	2156      	movs	r1, #86	; 0x56
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f005 feb4 	bl	800aa98 <MFX_IO_Write>
  }
}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2180      	movs	r1, #128	; 0x80
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f005 feb6 	bl	800aac0 <MFX_IO_Read>
 8004d54:	4603      	mov	r3, r0
 8004d56:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8004d60:	88fb      	ldrh	r3, [r7, #6]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	7bfa      	ldrb	r2, [r7, #15]
 8004d68:	2180      	movs	r1, #128	; 0x80
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f005 fe94 	bl	800aa98 <MFX_IO_Write>
}
 8004d70:	bf00      	nop
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 8004d78:	b084      	sub	sp, #16
 8004d7a:	b590      	push	{r4, r7, lr}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	4604      	mov	r4, r0
 8004d82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2140      	movs	r1, #64	; 0x40
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f005 fe8e 	bl	800aac0 <MFX_IO_Read>
 8004da4:	4603      	mov	r3, r0
 8004da6:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8004da8:	7bbb      	ldrb	r3, [r7, #14]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10b      	bne.n	8004dca <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 8004db2:	7bbb      	ldrb	r3, [r7, #14]
 8004db4:	f043 0304 	orr.w	r3, r3, #4
 8004db8:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	7bba      	ldrb	r2, [r7, #14]
 8004dc2:	2140      	movs	r1, #64	; 0x40
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f005 fe67 	bl	800aa98 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8004dca:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	f003 030e 	and.w	r3, r3, #14
 8004dd6:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8004dd8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004ddc:	b25b      	sxtb	r3, r3
 8004dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de2:	b25a      	sxtb	r2, r3
 8004de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	b25b      	sxtb	r3, r3
 8004dec:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8004dee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004df2:	b25b      	sxtb	r3, r3
 8004df4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004df8:	b25a      	sxtb	r2, r3
 8004dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	b25b      	sxtb	r3, r3
 8004e02:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	7bfa      	ldrb	r2, [r7, #15]
 8004e0c:	2180      	movs	r1, #128	; 0x80
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f005 fe42 	bl	800aa98 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8004e14:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004e18:	b25b      	sxtb	r3, r3
 8004e1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e1e:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8004e20:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004e24:	b25b      	sxtb	r3, r3
 8004e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e2a:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	b25b      	sxtb	r3, r3
 8004e30:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	7bfa      	ldrb	r2, [r7, #15]
 8004e3a:	2181      	movs	r1, #129	; 0x81
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f005 fe2b 	bl	800aa98 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8004e42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e44:	0a1b      	lsrs	r3, r3, #8
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8004e4a:	88fb      	ldrh	r3, [r7, #6]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	7bfa      	ldrb	r2, [r7, #15]
 8004e52:	2182      	movs	r1, #130	; 0x82
 8004e54:	4618      	mov	r0, r3
 8004e56:	f005 fe1f 	bl	800aa98 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8004e5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e5c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8004e5e:	88fb      	ldrh	r3, [r7, #6]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	7bfa      	ldrb	r2, [r7, #15]
 8004e66:	2183      	movs	r1, #131	; 0x83
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f005 fe15 	bl	800aa98 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8004e6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e70:	0a1b      	lsrs	r3, r3, #8
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 8004e76:	88fb      	ldrh	r3, [r7, #6]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	7bfa      	ldrb	r2, [r7, #15]
 8004e7e:	2184      	movs	r1, #132	; 0x84
 8004e80:	4618      	mov	r0, r3
 8004e82:	f005 fe09 	bl	800aa98 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 8004e86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e88:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 8004e8a:	88fb      	ldrh	r3, [r7, #6]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	7bfa      	ldrb	r2, [r7, #15]
 8004e92:	2185      	movs	r1, #133	; 0x85
 8004e94:	4618      	mov	r0, r3
 8004e96:	f005 fdff 	bl	800aa98 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 8004e9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e9c:	0a1b      	lsrs	r3, r3, #8
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 8004ea2:	88fb      	ldrh	r3, [r7, #6]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	7bfa      	ldrb	r2, [r7, #15]
 8004eaa:	2186      	movs	r1, #134	; 0x86
 8004eac:	4618      	mov	r0, r3
 8004eae:	f005 fdf3 	bl	800aa98 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 8004eb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004eb4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	7bfa      	ldrb	r2, [r7, #15]
 8004ebe:	2187      	movs	r1, #135	; 0x87
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f005 fde9 	bl	800aa98 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8004ec6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	7bfa      	ldrb	r2, [r7, #15]
 8004ed6:	2188      	movs	r1, #136	; 0x88
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f005 fddd 	bl	800aa98 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 8004ede:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ee0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	7bfa      	ldrb	r2, [r7, #15]
 8004eea:	2189      	movs	r1, #137	; 0x89
 8004eec:	4618      	mov	r0, r3
 8004eee:	f005 fdd3 	bl	800aa98 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 8004ef2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ef4:	0a1b      	lsrs	r3, r3, #8
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	7bfa      	ldrb	r2, [r7, #15]
 8004f02:	218a      	movs	r1, #138	; 0x8a
 8004f04:	4618      	mov	r0, r3
 8004f06:	f005 fdc7 	bl	800aa98 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8004f0a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f0c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	7bfa      	ldrb	r2, [r7, #15]
 8004f16:	218b      	movs	r1, #139	; 0x8b
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f005 fdbd 	bl	800aa98 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8004f1e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004f20:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	7bfa      	ldrb	r2, [r7, #15]
 8004f2a:	2190      	movs	r1, #144	; 0x90
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f005 fdb3 	bl	800aa98 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8004f32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f34:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	7bfa      	ldrb	r2, [r7, #15]
 8004f3e:	2191      	movs	r1, #145	; 0x91
 8004f40:	4618      	mov	r0, r3
 8004f42:	f005 fda9 	bl	800aa98 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8004f46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f48:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	7bfa      	ldrb	r2, [r7, #15]
 8004f52:	2192      	movs	r1, #146	; 0x92
 8004f54:	4618      	mov	r0, r3
 8004f56:	f005 fd9f 	bl	800aa98 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8004f5a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f5c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	7bfa      	ldrb	r2, [r7, #15]
 8004f66:	2193      	movs	r1, #147	; 0x93
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f005 fd95 	bl	800aa98 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8004f6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f70:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8004f72:	88fb      	ldrh	r3, [r7, #6]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	7bfa      	ldrb	r2, [r7, #15]
 8004f7a:	2194      	movs	r1, #148	; 0x94
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f005 fd8b 	bl	800aa98 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8004f82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f84:	0a1b      	lsrs	r3, r3, #8
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	7bfa      	ldrb	r2, [r7, #15]
 8004f92:	218c      	movs	r1, #140	; 0x8c
 8004f94:	4618      	mov	r0, r3
 8004f96:	f005 fd7f 	bl	800aa98 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 8004f9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f9c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 8004f9e:	88fb      	ldrh	r3, [r7, #6]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	7bfa      	ldrb	r2, [r7, #15]
 8004fa6:	218d      	movs	r1, #141	; 0x8d
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f005 fd75 	bl	800aa98 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 8004fae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fb0:	0a1b      	lsrs	r3, r3, #8
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8004fb6:	88fb      	ldrh	r3, [r7, #6]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	7bfa      	ldrb	r2, [r7, #15]
 8004fbe:	218e      	movs	r1, #142	; 0x8e
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f005 fd69 	bl	800aa98 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8004fc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fc8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8004fca:	88fb      	ldrh	r3, [r7, #6]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	7bfa      	ldrb	r2, [r7, #15]
 8004fd2:	218f      	movs	r1, #143	; 0x8f
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f005 fd5f 	bl	800aa98 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8004fda:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004fde:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	7bfa      	ldrb	r2, [r7, #15]
 8004fe8:	2196      	movs	r1, #150	; 0x96
 8004fea:	4618      	mov	r0, r3
 8004fec:	f005 fd54 	bl	800aa98 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8004ff0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ff4:	b25b      	sxtb	r3, r3
 8004ff6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ffa:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8004ffc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005000:	b25b      	sxtb	r3, r3
 8005002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005006:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8005008:	4313      	orrs	r3, r2
 800500a:	b25b      	sxtb	r3, r3
 800500c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	b29b      	uxth	r3, r3
 8005014:	7bfa      	ldrb	r2, [r7, #15]
 8005016:	2197      	movs	r1, #151	; 0x97
 8005018:	4618      	mov	r0, r3
 800501a:	f005 fd3d 	bl	800aa98 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 800501e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005022:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8005024:	88fb      	ldrh	r3, [r7, #6]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	b29b      	uxth	r3, r3
 800502a:	7bfa      	ldrb	r2, [r7, #15]
 800502c:	2198      	movs	r1, #152	; 0x98
 800502e:	4618      	mov	r0, r3
 8005030:	f005 fd32 	bl	800aa98 <MFX_IO_Write>
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800503e:	b004      	add	sp, #16
 8005040:	4770      	bx	lr

08005042 <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	4603      	mov	r3, r0
 800504a:	6039      	str	r1, [r7, #0]
 800504c:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	b298      	uxth	r0, r3
 8005054:	f107 020c 	add.w	r2, r7, #12
 8005058:	2303      	movs	r3, #3
 800505a:	2114      	movs	r1, #20
 800505c:	f005 fd44 	bl	800aae8 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8005060:	7b3b      	ldrb	r3, [r7, #12]
 8005062:	041a      	lsls	r2, r3, #16
 8005064:	7b7b      	ldrb	r3, [r7, #13]
 8005066:	021b      	lsls	r3, r3, #8
 8005068:	4313      	orrs	r3, r2
 800506a:	7bba      	ldrb	r2, [r7, #14]
 800506c:	4313      	orrs	r3, r2
 800506e:	461a      	mov	r2, r3
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	601a      	str	r2, [r3, #0]

}
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8005086:	f005 fca1 	bl	800a9cc <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	2102      	movs	r1, #2
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff f944 	bl	800431c <mfxstm32l152_EnableITSource>
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	4603      	mov	r3, r0
 80050a4:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	2102      	movs	r1, #2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff f98f 	bl	80043ce <mfxstm32l152_ClearGlobalIT>
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	2102      	movs	r1, #2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff f96b 	bl	80043a2 <mfxstm32l152_GlobalITStatus>
 80050cc:	4603      	mov	r3, r0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	4603      	mov	r3, r0
 80050de:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80050e0:	88fb      	ldrh	r3, [r7, #6]
 80050e2:	2102      	movs	r1, #2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff f938 	bl	800435a <mfxstm32l152_DisableITSource>
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	4603      	mov	r3, r0
 80050fa:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 80050fc:	88fb      	ldrh	r3, [r7, #6]
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	b29b      	uxth	r3, r3
 8005102:	2103      	movs	r1, #3
 8005104:	4618      	mov	r0, r3
 8005106:	f005 fcdb 	bl	800aac0 <MFX_IO_Read>
 800510a:	4603      	mov	r3, r0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	4603      	mov	r3, r0
 800511c:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 800511e:	88fb      	ldrh	r3, [r7, #6]
 8005120:	b2db      	uxtb	r3, r3
 8005122:	b29b      	uxth	r3, r3
 8005124:	2104      	movs	r1, #4
 8005126:	4618      	mov	r0, r3
 8005128:	f005 fcca 	bl	800aac0 <MFX_IO_Read>
 800512c:	4603      	mov	r3, r0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	4603      	mov	r3, r0
 800513e:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8005140:	f005 fc44 	bl	800a9cc <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	2104      	movs	r1, #4
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff f8e7 	bl	800431c <mfxstm32l152_EnableITSource>
}
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	4603      	mov	r3, r0
 800515e:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	2104      	movs	r1, #4
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff f932 	bl	80043ce <mfxstm32l152_ClearGlobalIT>
}
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	4603      	mov	r3, r0
 800517a:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	2104      	movs	r1, #4
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff f90e 	bl	80043a2 <mfxstm32l152_GlobalITStatus>
 8005186:	4603      	mov	r3, r0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	4603      	mov	r3, r0
 8005198:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 800519a:	88fb      	ldrh	r3, [r7, #6]
 800519c:	2104      	movs	r1, #4
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff f8db 	bl	800435a <mfxstm32l152_DisableITSource>
}
 80051a4:	bf00      	nop
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80051b6:	2300      	movs	r3, #0
 80051b8:	73fb      	strb	r3, [r7, #15]
 80051ba:	e00b      	b.n	80051d4 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	4a0a      	ldr	r2, [pc, #40]	; (80051e8 <mfxstm32l152_GetInstance+0x3c>)
 80051c0:	5cd3      	ldrb	r3, [r2, r3]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	88fa      	ldrh	r2, [r7, #6]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d101      	bne.n	80051ce <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	e006      	b.n	80051dc <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	3301      	adds	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d9f0      	bls.n	80051bc <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 80051da:	23ff      	movs	r3, #255	; 0xff
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	200019f0 	.word	0x200019f0

080051ec <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]
 80051fa:	e00f      	b.n	800521c <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	4a0c      	ldr	r2, [pc, #48]	; (8005230 <mfxstm32l152_ReleaseInstance+0x44>)
 8005200:	5cd3      	ldrb	r3, [r2, r3]
 8005202:	b29b      	uxth	r3, r3
 8005204:	88fa      	ldrh	r2, [r7, #6]
 8005206:	429a      	cmp	r2, r3
 8005208:	d105      	bne.n	8005216 <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	4a08      	ldr	r2, [pc, #32]	; (8005230 <mfxstm32l152_ReleaseInstance+0x44>)
 800520e:	2100      	movs	r1, #0
 8005210:	54d1      	strb	r1, [r2, r3]
      return idx;
 8005212:	7bfb      	ldrb	r3, [r7, #15]
 8005214:	e006      	b.n	8005224 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	3301      	adds	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d9ec      	bls.n	80051fc <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 8005222:	23ff      	movs	r3, #255	; 0xff
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	200019f0 	.word	0x200019f0

08005234 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	603a      	str	r2, [r7, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	4603      	mov	r3, r0
 8005240:	80fb      	strh	r3, [r7, #6]
 8005242:	460b      	mov	r3, r1
 8005244:	717b      	strb	r3, [r7, #5]
 8005246:	4613      	mov	r3, r2
 8005248:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 800524a:	2300      	movs	r3, #0
 800524c:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	0a1b      	lsrs	r3, r3, #8
 8005256:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	0c1b      	lsrs	r3, r3, #16
 800525c:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 800525e:	7bbb      	ldrb	r3, [r7, #14]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01e      	beq.n	80052a2 <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8005264:	797a      	ldrb	r2, [r7, #5]
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	4611      	mov	r1, r2
 800526a:	4618      	mov	r0, r3
 800526c:	f005 fc28 	bl	800aac0 <MFX_IO_Read>
 8005270:	4603      	mov	r3, r0
 8005272:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8005274:	793b      	ldrb	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d004      	beq.n	8005284 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 800527a:	7bfa      	ldrb	r2, [r7, #15]
 800527c:	7bbb      	ldrb	r3, [r7, #14]
 800527e:	4313      	orrs	r3, r2
 8005280:	73fb      	strb	r3, [r7, #15]
 8005282:	e008      	b.n	8005296 <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8005284:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005288:	43db      	mvns	r3, r3
 800528a:	b25a      	sxtb	r2, r3
 800528c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005290:	4013      	ands	r3, r2
 8005292:	b25b      	sxtb	r3, r3
 8005294:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 8005296:	7bfa      	ldrb	r2, [r7, #15]
 8005298:	7979      	ldrb	r1, [r7, #5]
 800529a:	88fb      	ldrh	r3, [r7, #6]
 800529c:	4618      	mov	r0, r3
 800529e:	f005 fbfb 	bl	800aa98 <MFX_IO_Write>
  }

  if (pin_8_15)
 80052a2:	7b7b      	ldrb	r3, [r7, #13]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d022      	beq.n	80052ee <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 80052a8:	797b      	ldrb	r3, [r7, #5]
 80052aa:	3301      	adds	r3, #1
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	4611      	mov	r1, r2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f005 fc04 	bl	800aac0 <MFX_IO_Read>
 80052b8:	4603      	mov	r3, r0
 80052ba:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80052bc:	793b      	ldrb	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d004      	beq.n	80052cc <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 80052c2:	7bfa      	ldrb	r2, [r7, #15]
 80052c4:	7b7b      	ldrb	r3, [r7, #13]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	73fb      	strb	r3, [r7, #15]
 80052ca:	e008      	b.n	80052de <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 80052cc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80052d0:	43db      	mvns	r3, r3
 80052d2:	b25a      	sxtb	r2, r3
 80052d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052d8:	4013      	ands	r3, r2
 80052da:	b25b      	sxtb	r3, r3
 80052dc:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 80052de:	797b      	ldrb	r3, [r7, #5]
 80052e0:	3301      	adds	r3, #1
 80052e2:	b2d9      	uxtb	r1, r3
 80052e4:	7bfa      	ldrb	r2, [r7, #15]
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f005 fbd5 	bl	800aa98 <MFX_IO_Write>
  }

  if (pin_16_23)
 80052ee:	7b3b      	ldrb	r3, [r7, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d022      	beq.n	800533a <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 80052f4:	797b      	ldrb	r3, [r7, #5]
 80052f6:	3302      	adds	r3, #2
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	4611      	mov	r1, r2
 80052fe:	4618      	mov	r0, r3
 8005300:	f005 fbde 	bl	800aac0 <MFX_IO_Read>
 8005304:	4603      	mov	r3, r0
 8005306:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8005308:	793b      	ldrb	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d004      	beq.n	8005318 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 800530e:	7bfa      	ldrb	r2, [r7, #15]
 8005310:	7b3b      	ldrb	r3, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	73fb      	strb	r3, [r7, #15]
 8005316:	e008      	b.n	800532a <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8005318:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800531c:	43db      	mvns	r3, r3
 800531e:	b25a      	sxtb	r2, r3
 8005320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005324:	4013      	ands	r3, r2
 8005326:	b25b      	sxtb	r3, r3
 8005328:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 800532a:	797b      	ldrb	r3, [r7, #5]
 800532c:	3302      	adds	r3, #2
 800532e:	b2d9      	uxtb	r1, r3
 8005330:	7bfa      	ldrb	r2, [r7, #15]
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	4618      	mov	r0, r3
 8005336:	f005 fbaf 	bl	800aa98 <MFX_IO_Write>
  }
}
 800533a:	bf00      	nop
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8005348:	f005 fcf0 	bl	800ad2c <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 800534c:	2200      	movs	r2, #0
 800534e:	2100      	movs	r1, #0
 8005350:	2010      	movs	r0, #16
 8005352:	f000 f9e4 	bl	800571e <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8005356:	200a      	movs	r0, #10
 8005358:	f005 fd0f 	bl	800ad7a <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 800535c:	2200      	movs	r2, #0
 800535e:	2100      	movs	r1, #0
 8005360:	2001      	movs	r0, #1
 8005362:	f000 f9dc 	bl	800571e <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8005366:	20c8      	movs	r0, #200	; 0xc8
 8005368:	f005 fd07 	bl	800ad7a <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 800536c:	2200      	movs	r2, #0
 800536e:	2100      	movs	r1, #0
 8005370:	2011      	movs	r0, #17
 8005372:	f000 f9d4 	bl	800571e <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8005376:	2078      	movs	r0, #120	; 0x78
 8005378:	f005 fcff 	bl	800ad7a <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 800537c:	2300      	movs	r3, #0
 800537e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8005380:	463b      	mov	r3, r7
 8005382:	2201      	movs	r2, #1
 8005384:	4619      	mov	r1, r3
 8005386:	2036      	movs	r0, #54	; 0x36
 8005388:	f000 f9c9 	bl	800571e <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 800538c:	2305      	movs	r3, #5
 800538e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8005390:	463b      	mov	r3, r7
 8005392:	2201      	movs	r2, #1
 8005394:	4619      	mov	r1, r3
 8005396:	203a      	movs	r0, #58	; 0x3a
 8005398:	f000 f9c1 	bl	800571e <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 800539c:	2200      	movs	r2, #0
 800539e:	2100      	movs	r1, #0
 80053a0:	2021      	movs	r0, #33	; 0x21
 80053a2:	f000 f9bc 	bl	800571e <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 80053a6:	2300      	movs	r3, #0
 80053a8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80053aa:	2300      	movs	r3, #0
 80053ac:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80053ae:	2300      	movs	r3, #0
 80053b0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80053b2:	23ef      	movs	r3, #239	; 0xef
 80053b4:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80053b6:	463b      	mov	r3, r7
 80053b8:	2204      	movs	r2, #4
 80053ba:	4619      	mov	r1, r3
 80053bc:	202a      	movs	r0, #42	; 0x2a
 80053be:	f000 f9ae 	bl	800571e <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 80053c2:	2300      	movs	r3, #0
 80053c4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80053c6:	2300      	movs	r3, #0
 80053c8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80053ca:	2300      	movs	r3, #0
 80053cc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80053ce:	23ef      	movs	r3, #239	; 0xef
 80053d0:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80053d2:	463b      	mov	r3, r7
 80053d4:	2204      	movs	r2, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	202b      	movs	r0, #43	; 0x2b
 80053da:	f000 f9a0 	bl	800571e <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 80053de:	230c      	movs	r3, #12
 80053e0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 80053e2:	230c      	movs	r3, #12
 80053e4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80053e6:	2300      	movs	r3, #0
 80053e8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 80053ea:	2333      	movs	r3, #51	; 0x33
 80053ec:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 80053ee:	2333      	movs	r3, #51	; 0x33
 80053f0:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 80053f2:	463b      	mov	r3, r7
 80053f4:	2205      	movs	r2, #5
 80053f6:	4619      	mov	r1, r3
 80053f8:	20b2      	movs	r0, #178	; 0xb2
 80053fa:	f000 f990 	bl	800571e <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 80053fe:	2335      	movs	r3, #53	; 0x35
 8005400:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8005402:	463b      	mov	r3, r7
 8005404:	2201      	movs	r2, #1
 8005406:	4619      	mov	r1, r3
 8005408:	20b7      	movs	r0, #183	; 0xb7
 800540a:	f000 f988 	bl	800571e <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 800540e:	231f      	movs	r3, #31
 8005410:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8005412:	463b      	mov	r3, r7
 8005414:	2201      	movs	r2, #1
 8005416:	4619      	mov	r1, r3
 8005418:	20bb      	movs	r0, #187	; 0xbb
 800541a:	f000 f980 	bl	800571e <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 800541e:	232c      	movs	r3, #44	; 0x2c
 8005420:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8005422:	463b      	mov	r3, r7
 8005424:	2201      	movs	r2, #1
 8005426:	4619      	mov	r1, r3
 8005428:	20c0      	movs	r0, #192	; 0xc0
 800542a:	f000 f978 	bl	800571e <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 800542e:	2301      	movs	r3, #1
 8005430:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8005432:	23c3      	movs	r3, #195	; 0xc3
 8005434:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8005436:	463b      	mov	r3, r7
 8005438:	2202      	movs	r2, #2
 800543a:	4619      	mov	r1, r3
 800543c:	20c2      	movs	r0, #194	; 0xc2
 800543e:	f000 f96e 	bl	800571e <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8005442:	2320      	movs	r3, #32
 8005444:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8005446:	463b      	mov	r3, r7
 8005448:	2201      	movs	r2, #1
 800544a:	4619      	mov	r1, r3
 800544c:	20c4      	movs	r0, #196	; 0xc4
 800544e:	f000 f966 	bl	800571e <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8005452:	230f      	movs	r3, #15
 8005454:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8005456:	463b      	mov	r3, r7
 8005458:	2201      	movs	r2, #1
 800545a:	4619      	mov	r1, r3
 800545c:	20c6      	movs	r0, #198	; 0xc6
 800545e:	f000 f95e 	bl	800571e <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8005462:	23a4      	movs	r3, #164	; 0xa4
 8005464:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8005466:	23a1      	movs	r3, #161	; 0xa1
 8005468:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 800546a:	463b      	mov	r3, r7
 800546c:	2202      	movs	r2, #2
 800546e:	4619      	mov	r1, r3
 8005470:	20d0      	movs	r0, #208	; 0xd0
 8005472:	f000 f954 	bl	800571e <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8005476:	23d0      	movs	r3, #208	; 0xd0
 8005478:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800547a:	2308      	movs	r3, #8
 800547c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 800547e:	2311      	movs	r3, #17
 8005480:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8005482:	2308      	movs	r3, #8
 8005484:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8005486:	230c      	movs	r3, #12
 8005488:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 800548a:	2315      	movs	r3, #21
 800548c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800548e:	2339      	movs	r3, #57	; 0x39
 8005490:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8005492:	2333      	movs	r3, #51	; 0x33
 8005494:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8005496:	2350      	movs	r3, #80	; 0x50
 8005498:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 800549a:	2336      	movs	r3, #54	; 0x36
 800549c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 800549e:	2313      	movs	r3, #19
 80054a0:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80054a2:	2314      	movs	r3, #20
 80054a4:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 80054a6:	2329      	movs	r3, #41	; 0x29
 80054a8:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 80054aa:	232d      	movs	r3, #45	; 0x2d
 80054ac:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 80054ae:	463b      	mov	r3, r7
 80054b0:	220e      	movs	r2, #14
 80054b2:	4619      	mov	r1, r3
 80054b4:	20e0      	movs	r0, #224	; 0xe0
 80054b6:	f000 f932 	bl	800571e <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 80054ba:	23d0      	movs	r3, #208	; 0xd0
 80054bc:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80054be:	2308      	movs	r3, #8
 80054c0:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 80054c2:	2310      	movs	r3, #16
 80054c4:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80054c6:	2308      	movs	r3, #8
 80054c8:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 80054ca:	2306      	movs	r3, #6
 80054cc:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 80054ce:	2306      	movs	r3, #6
 80054d0:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80054d2:	2339      	movs	r3, #57	; 0x39
 80054d4:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 80054d6:	2344      	movs	r3, #68	; 0x44
 80054d8:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 80054da:	2351      	movs	r3, #81	; 0x51
 80054dc:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 80054de:	230b      	movs	r3, #11
 80054e0:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 80054e2:	2316      	movs	r3, #22
 80054e4:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80054e6:	2314      	movs	r3, #20
 80054e8:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 80054ea:	232f      	movs	r3, #47	; 0x2f
 80054ec:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 80054ee:	2331      	movs	r3, #49	; 0x31
 80054f0:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80054f2:	463b      	mov	r3, r7
 80054f4:	220e      	movs	r2, #14
 80054f6:	4619      	mov	r1, r3
 80054f8:	20e1      	movs	r0, #225	; 0xe1
 80054fa:	f000 f910 	bl	800571e <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 80054fe:	f000 f847 	bl	8005590 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8005502:	2300      	movs	r3, #0
 8005504:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8005506:	463b      	mov	r3, r7
 8005508:	2201      	movs	r2, #1
 800550a:	4619      	mov	r1, r3
 800550c:	2035      	movs	r0, #53	; 0x35
 800550e:	f000 f906 	bl	800571e <ST7789H2_WriteReg>

}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d102      	bne.n	800552e <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8005528:	2300      	movs	r3, #0
 800552a:	723b      	strb	r3, [r7, #8]
 800552c:	e025      	b.n	800557a <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d120      	bne.n	8005576 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8005534:	2300      	movs	r3, #0
 8005536:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8005538:	2300      	movs	r3, #0
 800553a:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 800553c:	2301      	movs	r3, #1
 800553e:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8005540:	23f0      	movs	r3, #240	; 0xf0
 8005542:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8005544:	2300      	movs	r3, #0
 8005546:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8005548:	2300      	movs	r3, #0
 800554a:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 800554c:	f107 0308 	add.w	r3, r7, #8
 8005550:	2206      	movs	r2, #6
 8005552:	4619      	mov	r1, r3
 8005554:	2033      	movs	r0, #51	; 0x33
 8005556:	f000 f8e2 	bl	800571e <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 800555a:	2300      	movs	r3, #0
 800555c:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 800555e:	2350      	movs	r3, #80	; 0x50
 8005560:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8005562:	f107 0308 	add.w	r3, r7, #8
 8005566:	2202      	movs	r2, #2
 8005568:	4619      	mov	r1, r3
 800556a:	2037      	movs	r0, #55	; 0x37
 800556c:	f000 f8d7 	bl	800571e <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8005570:	23c0      	movs	r3, #192	; 0xc0
 8005572:	723b      	strb	r3, [r7, #8]
 8005574:	e001      	b.n	800557a <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8005576:	2360      	movs	r3, #96	; 0x60
 8005578:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 800557a:	f107 0308 	add.w	r3, r7, #8
 800557e:	2201      	movs	r2, #1
 8005580:	4619      	mov	r1, r3
 8005582:	2036      	movs	r0, #54	; 0x36
 8005584:	f000 f8cb 	bl	800571e <ST7789H2_WriteReg>
}
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8005594:	2200      	movs	r2, #0
 8005596:	2100      	movs	r1, #0
 8005598:	2029      	movs	r0, #41	; 0x29
 800559a:	f000 f8c0 	bl	800571e <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 800559e:	2200      	movs	r2, #0
 80055a0:	2100      	movs	r1, #0
 80055a2:	2011      	movs	r0, #17
 80055a4:	f000 f8bb 	bl	800571e <ST7789H2_WriteReg>
}
 80055a8:	bf00      	nop
 80055aa:	bd80      	pop	{r7, pc}

080055ac <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 80055b2:	23fe      	movs	r3, #254	; 0xfe
 80055b4:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 80055b6:	1d3b      	adds	r3, r7, #4
 80055b8:	2201      	movs	r2, #1
 80055ba:	4619      	mov	r1, r3
 80055bc:	20bd      	movs	r0, #189	; 0xbd
 80055be:	f000 f8ae 	bl	800571e <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80055c2:	2200      	movs	r2, #0
 80055c4:	2100      	movs	r1, #0
 80055c6:	2010      	movs	r0, #16
 80055c8:	f000 f8a9 	bl	800571e <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80055cc:	200a      	movs	r0, #10
 80055ce:	f005 fbd4 	bl	800ad7a <LCD_IO_Delay>
}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 80055da:	b480      	push	{r7}
 80055dc:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 80055de:	23f0      	movs	r3, #240	; 0xf0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 80055ea:	b480      	push	{r7}
 80055ec:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 80055ee:	23f0      	movs	r3, #240	; 0xf0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80055fe:	f005 fb95 	bl	800ad2c <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8005602:	2004      	movs	r0, #4
 8005604:	f000 f8ae 	bl	8005764 <ST7789H2_ReadReg>
 8005608:	4603      	mov	r3, r0
 800560a:	b29b      	uxth	r3, r3
}
 800560c:	4618      	mov	r0, r3
 800560e:	bd80      	pop	{r7, pc}

08005610 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	460a      	mov	r2, r1
 800561a:	80fb      	strh	r3, [r7, #6]
 800561c:	4613      	mov	r3, r2
 800561e:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8005620:	2300      	movs	r3, #0
 8005622:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8005624:	88fb      	ldrh	r3, [r7, #6]
 8005626:	b2db      	uxtb	r3, r3
 8005628:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800562a:	2300      	movs	r3, #0
 800562c:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	3b11      	subs	r3, #17
 8005634:	b2db      	uxtb	r3, r3
 8005636:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8005638:	f107 030c 	add.w	r3, r7, #12
 800563c:	2204      	movs	r2, #4
 800563e:	4619      	mov	r1, r3
 8005640:	202a      	movs	r0, #42	; 0x2a
 8005642:	f000 f86c 	bl	800571e <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8005646:	2300      	movs	r3, #0
 8005648:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 800564a:	88bb      	ldrh	r3, [r7, #4]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8005650:	2300      	movs	r3, #0
 8005652:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8005654:	88bb      	ldrh	r3, [r7, #4]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	3b11      	subs	r3, #17
 800565a:	b2db      	uxtb	r3, r3
 800565c:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800565e:	f107 030c 	add.w	r3, r7, #12
 8005662:	2204      	movs	r2, #4
 8005664:	4619      	mov	r1, r3
 8005666:	202b      	movs	r0, #43	; 0x2b
 8005668:	f000 f859 	bl	800571e <ST7789H2_WriteReg>
}
 800566c:	bf00      	nop
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	80fb      	strh	r3, [r7, #6]
 800567e:	460b      	mov	r3, r1
 8005680:	80bb      	strh	r3, [r7, #4]
 8005682:	4613      	mov	r3, r2
 8005684:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8005686:	88ba      	ldrh	r2, [r7, #4]
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	4611      	mov	r1, r2
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff ffbf 	bl	8005610 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8005692:	2200      	movs	r2, #0
 8005694:	2100      	movs	r1, #0
 8005696:	202c      	movs	r0, #44	; 0x2c
 8005698:	f000 f841 	bl	800571e <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 800569c:	887b      	ldrh	r3, [r7, #2]
 800569e:	4618      	mov	r0, r3
 80056a0:	f005 fb4a 	bl	800ad38 <LCD_IO_WriteData>
}
 80056a4:	bf00      	nop
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	460a      	mov	r2, r1
 80056b6:	80fb      	strh	r3, [r7, #6]
 80056b8:	4613      	mov	r3, r2
 80056ba:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80056bc:	88ba      	ldrh	r2, [r7, #4]
 80056be:	88fb      	ldrh	r3, [r7, #6]
 80056c0:	4611      	mov	r1, r2
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff ffa4 	bl	8005610 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 80056c8:	88ba      	ldrh	r2, [r7, #4]
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	4611      	mov	r1, r2
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f9c0 	bl	8005a54 <ST7789H2_ReadPixel_rgb888>
 80056d4:	4603      	mov	r3, r0
 80056d6:	461a      	mov	r2, r3
 80056d8:	733a      	strb	r2, [r7, #12]
 80056da:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80056de:	737a      	strb	r2, [r7, #13]
 80056e0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80056e4:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 80056e6:	7b3b      	ldrb	r3, [r7, #12]
 80056e8:	08db      	lsrs	r3, r3, #3
 80056ea:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 80056ec:	7b7b      	ldrb	r3, [r7, #13]
 80056ee:	089b      	lsrs	r3, r3, #2
 80056f0:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 80056f2:	7bbb      	ldrb	r3, [r7, #14]
 80056f4:	08db      	lsrs	r3, r3, #3
 80056f6:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	02db      	lsls	r3, r3, #11
 80056fe:	b29a      	uxth	r2, r3
 8005700:	7dbb      	ldrb	r3, [r7, #22]
 8005702:	b29b      	uxth	r3, r3
 8005704:	015b      	lsls	r3, r3, #5
 8005706:	b29b      	uxth	r3, r3
 8005708:	4413      	add	r3, r2
 800570a:	b29a      	uxth	r2, r3
 800570c:	7d7b      	ldrb	r3, [r7, #21]
 800570e:	b29b      	uxth	r3, r3
 8005710:	4413      	add	r3, r2
 8005712:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8005714:	8a7b      	ldrh	r3, [r7, #18]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	4603      	mov	r3, r0
 8005726:	6039      	str	r1, [r7, #0]
 8005728:	71fb      	strb	r3, [r7, #7]
 800572a:	4613      	mov	r3, r2
 800572c:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	4618      	mov	r0, r3
 8005732:	f005 fb0e 	bl	800ad52 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8005736:	2300      	movs	r3, #0
 8005738:	73fb      	strb	r3, [r7, #15]
 800573a:	e00a      	b.n	8005752 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	4413      	add	r3, r2
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	b29b      	uxth	r3, r3
 8005746:	4618      	mov	r0, r3
 8005748:	f005 faf6 	bl	800ad38 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	3301      	adds	r3, #1
 8005750:	73fb      	strb	r3, [r7, #15]
 8005752:	7bfa      	ldrb	r2, [r7, #15]
 8005754:	79bb      	ldrb	r3, [r7, #6]
 8005756:	429a      	cmp	r2, r3
 8005758:	d3f0      	bcc.n	800573c <ST7789H2_WriteReg+0x1e>
  }
}
 800575a:	bf00      	nop
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	4618      	mov	r0, r3
 8005772:	f005 faee 	bl	800ad52 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8005776:	f005 faf9 	bl	800ad6c <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 800577a:	f005 faf7 	bl	800ad6c <LCD_IO_ReadData>
 800577e:	4603      	mov	r3, r0
 8005780:	b2db      	uxtb	r3, r3
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800578c:	b490      	push	{r4, r7}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	4604      	mov	r4, r0
 8005794:	4608      	mov	r0, r1
 8005796:	4611      	mov	r1, r2
 8005798:	461a      	mov	r2, r3
 800579a:	4623      	mov	r3, r4
 800579c:	80fb      	strh	r3, [r7, #6]
 800579e:	4603      	mov	r3, r0
 80057a0:	80bb      	strh	r3, [r7, #4]
 80057a2:	460b      	mov	r3, r1
 80057a4:	807b      	strh	r3, [r7, #2]
 80057a6:	4613      	mov	r3, r2
 80057a8:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	2bef      	cmp	r3, #239	; 0xef
 80057ae:	d803      	bhi.n	80057b8 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80057b0:	4a1b      	ldr	r2, [pc, #108]	; (8005820 <ST7789H2_SetDisplayWindow+0x94>)
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	8013      	strh	r3, [r2, #0]
 80057b6:	e002      	b.n	80057be <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80057b8:	4b19      	ldr	r3, [pc, #100]	; (8005820 <ST7789H2_SetDisplayWindow+0x94>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 80057be:	88bb      	ldrh	r3, [r7, #4]
 80057c0:	2bef      	cmp	r3, #239	; 0xef
 80057c2:	d803      	bhi.n	80057cc <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80057c4:	4a17      	ldr	r2, [pc, #92]	; (8005824 <ST7789H2_SetDisplayWindow+0x98>)
 80057c6:	88bb      	ldrh	r3, [r7, #4]
 80057c8:	8013      	strh	r3, [r2, #0]
 80057ca:	e002      	b.n	80057d2 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 80057cc:	4b15      	ldr	r3, [pc, #84]	; (8005824 <ST7789H2_SetDisplayWindow+0x98>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 80057d2:	887a      	ldrh	r2, [r7, #2]
 80057d4:	88fb      	ldrh	r3, [r7, #6]
 80057d6:	4413      	add	r3, r2
 80057d8:	2bf0      	cmp	r3, #240	; 0xf0
 80057da:	dc08      	bgt.n	80057ee <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 80057dc:	887a      	ldrh	r2, [r7, #2]
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	4413      	add	r3, r2
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <ST7789H2_SetDisplayWindow+0x9c>)
 80057ea:	801a      	strh	r2, [r3, #0]
 80057ec:	e002      	b.n	80057f4 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 80057ee:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <ST7789H2_SetDisplayWindow+0x9c>)
 80057f0:	22ef      	movs	r2, #239	; 0xef
 80057f2:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 80057f4:	883a      	ldrh	r2, [r7, #0]
 80057f6:	88bb      	ldrh	r3, [r7, #4]
 80057f8:	4413      	add	r3, r2
 80057fa:	2bf0      	cmp	r3, #240	; 0xf0
 80057fc:	dc08      	bgt.n	8005810 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 80057fe:	883a      	ldrh	r2, [r7, #0]
 8005800:	88bb      	ldrh	r3, [r7, #4]
 8005802:	4413      	add	r3, r2
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	4b08      	ldr	r3, [pc, #32]	; (800582c <ST7789H2_SetDisplayWindow+0xa0>)
 800580c:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 800580e:	e002      	b.n	8005816 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8005810:	4b06      	ldr	r3, [pc, #24]	; (800582c <ST7789H2_SetDisplayWindow+0xa0>)
 8005812:	22ef      	movs	r2, #239	; 0xef
 8005814:	801a      	strh	r2, [r3, #0]
}
 8005816:	bf00      	nop
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bc90      	pop	{r4, r7}
 800581e:	4770      	bx	lr
 8005820:	200019f4 	.word	0x200019f4
 8005824:	200019f6 	.word	0x200019f6
 8005828:	2000027c 	.word	0x2000027c
 800582c:	2000027e 	.word	0x2000027e

08005830 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005830:	b590      	push	{r4, r7, lr}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	4604      	mov	r4, r0
 8005838:	4608      	mov	r0, r1
 800583a:	4611      	mov	r1, r2
 800583c:	461a      	mov	r2, r3
 800583e:	4623      	mov	r3, r4
 8005840:	80fb      	strh	r3, [r7, #6]
 8005842:	4603      	mov	r3, r0
 8005844:	80bb      	strh	r3, [r7, #4]
 8005846:	460b      	mov	r3, r1
 8005848:	807b      	strh	r3, [r7, #2]
 800584a:	4613      	mov	r3, r2
 800584c:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 800584e:	887a      	ldrh	r2, [r7, #2]
 8005850:	88bb      	ldrh	r3, [r7, #4]
 8005852:	4611      	mov	r1, r2
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff fedb 	bl	8005610 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800585a:	2200      	movs	r2, #0
 800585c:	2100      	movs	r1, #0
 800585e:	202c      	movs	r0, #44	; 0x2c
 8005860:	f7ff ff5d 	bl	800571e <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8005864:	2300      	movs	r3, #0
 8005866:	81fb      	strh	r3, [r7, #14]
 8005868:	e006      	b.n	8005878 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	4618      	mov	r0, r3
 800586e:	f005 fa63 	bl	800ad38 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8005872:	89fb      	ldrh	r3, [r7, #14]
 8005874:	3301      	adds	r3, #1
 8005876:	81fb      	strh	r3, [r7, #14]
 8005878:	89fa      	ldrh	r2, [r7, #14]
 800587a:	883b      	ldrh	r3, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d3f4      	bcc.n	800586a <ST7789H2_DrawHLine+0x3a>
  }  
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	bd90      	pop	{r4, r7, pc}

0800588a <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800588a:	b590      	push	{r4, r7, lr}
 800588c:	b085      	sub	sp, #20
 800588e:	af00      	add	r7, sp, #0
 8005890:	4604      	mov	r4, r0
 8005892:	4608      	mov	r0, r1
 8005894:	4611      	mov	r1, r2
 8005896:	461a      	mov	r2, r3
 8005898:	4623      	mov	r3, r4
 800589a:	80fb      	strh	r3, [r7, #6]
 800589c:	4603      	mov	r3, r0
 800589e:	80bb      	strh	r3, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	807b      	strh	r3, [r7, #2]
 80058a4:	4613      	mov	r3, r2
 80058a6:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80058a8:	887a      	ldrh	r2, [r7, #2]
 80058aa:	88bb      	ldrh	r3, [r7, #4]
 80058ac:	4611      	mov	r1, r2
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff feae 	bl	8005610 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80058b4:	2200      	movs	r2, #0
 80058b6:	2100      	movs	r1, #0
 80058b8:	202c      	movs	r0, #44	; 0x2c
 80058ba:	f7ff ff30 	bl	800571e <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80058be:	2300      	movs	r3, #0
 80058c0:	81fb      	strh	r3, [r7, #14]
 80058c2:	e00b      	b.n	80058dc <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 80058c4:	887a      	ldrh	r2, [r7, #2]
 80058c6:	89fb      	ldrh	r3, [r7, #14]
 80058c8:	4413      	add	r3, r2
 80058ca:	b299      	uxth	r1, r3
 80058cc:	88fa      	ldrh	r2, [r7, #6]
 80058ce:	88bb      	ldrh	r3, [r7, #4]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff fecf 	bl	8005674 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 80058d6:	89fb      	ldrh	r3, [r7, #14]
 80058d8:	3301      	adds	r3, #1
 80058da:	81fb      	strh	r3, [r7, #14]
 80058dc:	89fa      	ldrh	r2, [r7, #14]
 80058de:	883b      	ldrh	r3, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d3ef      	bcc.n	80058c4 <ST7789H2_DrawVLine+0x3a>
  }
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd90      	pop	{r4, r7, pc}
	...

080058f0 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	4603      	mov	r3, r0
 80058f8:	603a      	str	r2, [r7, #0]
 80058fa:	80fb      	strh	r3, [r7, #6]
 80058fc:	460b      	mov	r3, r1
 80058fe:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	2300      	movs	r3, #0
 8005906:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8005908:	2300      	movs	r3, #0
 800590a:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 800590c:	4b30      	ldr	r3, [pc, #192]	; (80059d0 <ST7789H2_DrawBitmap+0xe0>)
 800590e:	881a      	ldrh	r2, [r3, #0]
 8005910:	4b30      	ldr	r3, [pc, #192]	; (80059d4 <ST7789H2_DrawBitmap+0xe4>)
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	b29b      	uxth	r3, r3
 8005918:	3301      	adds	r3, #1
 800591a:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 800591c:	4b2e      	ldr	r3, [pc, #184]	; (80059d8 <ST7789H2_DrawBitmap+0xe8>)
 800591e:	881a      	ldrh	r2, [r3, #0]
 8005920:	4b2e      	ldr	r3, [pc, #184]	; (80059dc <ST7789H2_DrawBitmap+0xec>)
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	b29b      	uxth	r3, r3
 8005928:	3301      	adds	r3, #1
 800592a:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	3302      	adds	r3, #2
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	b29b      	uxth	r3, r3
 8005934:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	3304      	adds	r3, #4
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	b29b      	uxth	r3, r3
 800593e:	041b      	lsls	r3, r3, #16
 8005940:	461a      	mov	r2, r3
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	330a      	adds	r3, #10
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	330c      	adds	r3, #12
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29b      	uxth	r3, r3
 800595a:	041b      	lsls	r3, r3, #16
 800595c:	461a      	mov	r2, r3
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	085b      	lsrs	r3, r3, #1
 800596c:	613b      	str	r3, [r7, #16]
  pbmp += index;
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	4413      	add	r3, r2
 8005974:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8005976:	88ba      	ldrh	r2, [r7, #4]
 8005978:	89bb      	ldrh	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	61fb      	str	r3, [r7, #28]
 800597e:	e01d      	b.n	80059bc <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	4611      	mov	r1, r2
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff fe3f 	bl	8005610 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	b29b      	uxth	r3, r3
 8005996:	3b01      	subs	r3, #1
 8005998:	b299      	uxth	r1, r3
 800599a:	89fb      	ldrh	r3, [r7, #14]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	fb02 f303 	mul.w	r3, r2, r3
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	4413      	add	r3, r2
 80059a8:	89fa      	ldrh	r2, [r7, #14]
 80059aa:	88f8      	ldrh	r0, [r7, #6]
 80059ac:	f000 f89c 	bl	8005ae8 <ST7789H2_DrawRGBHLine>
    nb_line++;
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	3301      	adds	r3, #1
 80059b4:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	88bb      	ldrh	r3, [r7, #4]
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d8dd      	bhi.n	8005980 <ST7789H2_DrawBitmap+0x90>
  }
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop
 80059c8:	3720      	adds	r7, #32
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	2000027c 	.word	0x2000027c
 80059d4:	200019f4 	.word	0x200019f4
 80059d8:	2000027e 	.word	0x2000027e
 80059dc:	200019f6 	.word	0x200019f6

080059e0 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 80059e0:	b590      	push	{r4, r7, lr}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4604      	mov	r4, r0
 80059e8:	4608      	mov	r0, r1
 80059ea:	4611      	mov	r1, r2
 80059ec:	461a      	mov	r2, r3
 80059ee:	4623      	mov	r3, r4
 80059f0:	80fb      	strh	r3, [r7, #6]
 80059f2:	4603      	mov	r3, r0
 80059f4:	80bb      	strh	r3, [r7, #4]
 80059f6:	460b      	mov	r3, r1
 80059f8:	807b      	strh	r3, [r7, #2]
 80059fa:	4613      	mov	r3, r2
 80059fc:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8005a02:	88bb      	ldrh	r3, [r7, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	e019      	b.n	8005a3c <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	4611      	mov	r1, r2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff fdfd 	bl	8005610 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	b299      	uxth	r1, r3
 8005a1a:	887b      	ldrh	r3, [r7, #2]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	fb02 f303 	mul.w	r3, r2, r3
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	6a3a      	ldr	r2, [r7, #32]
 8005a26:	4413      	add	r3, r2
 8005a28:	887a      	ldrh	r2, [r7, #2]
 8005a2a:	88f8      	ldrh	r0, [r7, #6]
 8005a2c:	f000 f85c 	bl	8005ae8 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	3301      	adds	r3, #1
 8005a34:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	88ba      	ldrh	r2, [r7, #4]
 8005a3e:	883b      	ldrh	r3, [r7, #0]
 8005a40:	4413      	add	r3, r2
 8005a42:	461a      	mov	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d3de      	bcc.n	8005a08 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8005a4a:	bf00      	nop
 8005a4c:	bf00      	nop
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd90      	pop	{r4, r7, pc}

08005a54 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	460a      	mov	r2, r1
 8005a5e:	80fb      	strh	r3, [r7, #6]
 8005a60:	4613      	mov	r3, r2
 8005a62:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8005a64:	88ba      	ldrh	r2, [r7, #4]
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	4611      	mov	r1, r2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff fdd0 	bl	8005610 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8005a70:	2200      	movs	r2, #0
 8005a72:	2100      	movs	r1, #0
 8005a74:	202e      	movs	r0, #46	; 0x2e
 8005a76:	f7ff fe52 	bl	800571e <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8005a7a:	f005 f977 	bl	800ad6c <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8005a7e:	f005 f975 	bl	800ad6c <LCD_IO_ReadData>
 8005a82:	4603      	mov	r3, r0
 8005a84:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8005a86:	f005 f971 	bl	800ad6c <LCD_IO_ReadData>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8005a8e:	8afb      	ldrh	r3, [r7, #22]
 8005a90:	121b      	asrs	r3, r3, #8
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f023 0303 	bic.w	r3, r3, #3
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8005a9c:	8afb      	ldrh	r3, [r7, #22]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	f023 0303 	bic.w	r3, r3, #3
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8005aa8:	8abb      	ldrh	r3, [r7, #20]
 8005aaa:	121b      	asrs	r3, r3, #8
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	f023 0303 	bic.w	r3, r3, #3
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8005ab6:	f107 0310 	add.w	r3, r7, #16
 8005aba:	f107 020c 	add.w	r2, r7, #12
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	8019      	strh	r1, [r3, #0]
 8005ac4:	3302      	adds	r3, #2
 8005ac6:	0c12      	lsrs	r2, r2, #16
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	2300      	movs	r3, #0
 8005acc:	7c3a      	ldrb	r2, [r7, #16]
 8005ace:	f362 0307 	bfi	r3, r2, #0, #8
 8005ad2:	7c7a      	ldrb	r2, [r7, #17]
 8005ad4:	f362 230f 	bfi	r3, r2, #8, #8
 8005ad8:	7cba      	ldrb	r2, [r7, #18]
 8005ada:	f362 4317 	bfi	r3, r2, #16, #8
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	607b      	str	r3, [r7, #4]
 8005af0:	4603      	mov	r3, r0
 8005af2:	81fb      	strh	r3, [r7, #14]
 8005af4:	460b      	mov	r3, r1
 8005af6:	81bb      	strh	r3, [r7, #12]
 8005af8:	4613      	mov	r3, r2
 8005afa:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8005b04:	2200      	movs	r2, #0
 8005b06:	2100      	movs	r1, #0
 8005b08:	202c      	movs	r0, #44	; 0x2c
 8005b0a:	f7ff fe08 	bl	800571e <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8005b0e:	89fb      	ldrh	r3, [r7, #14]
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	e029      	b.n	8005b68 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8005b14:	4b1a      	ldr	r3, [pc, #104]	; (8005b80 <ST7789H2_DrawRGBHLine+0x98>)
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d320      	bcc.n	8005b62 <ST7789H2_DrawRGBHLine+0x7a>
 8005b20:	4b18      	ldr	r3, [pc, #96]	; (8005b84 <ST7789H2_DrawRGBHLine+0x9c>)
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	89ba      	ldrh	r2, [r7, #12]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d31b      	bcc.n	8005b62 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8005b2a:	4b17      	ldr	r3, [pc, #92]	; (8005b88 <ST7789H2_DrawRGBHLine+0xa0>)
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d815      	bhi.n	8005b62 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8005b36:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <ST7789H2_DrawRGBHLine+0xa4>)
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	89ba      	ldrh	r2, [r7, #12]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d810      	bhi.n	8005b62 <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8005b40:	897a      	ldrh	r2, [r7, #10]
 8005b42:	89fb      	ldrh	r3, [r7, #14]
 8005b44:	441a      	add	r2, r3
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d007      	beq.n	8005b5c <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4413      	add	r3, r2
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f005 f8ee 	bl	800ad38 <LCD_IO_WriteData>
      }      
      i++;
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	3301      	adds	r3, #1
 8005b66:	61bb      	str	r3, [r7, #24]
 8005b68:	897a      	ldrh	r2, [r7, #10]
 8005b6a:	89fb      	ldrh	r3, [r7, #14]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	461a      	mov	r2, r3
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d3ce      	bcc.n	8005b14 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	3720      	adds	r7, #32
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	200019f4 	.word	0x200019f4
 8005b84:	200019f6 	.word	0x200019f6
 8005b88:	2000027c 	.word	0x2000027c
 8005b8c:	2000027e 	.word	0x2000027e

08005b90 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f001 fcc0 	bl	8007526 <VL53L0X_get_offset_calibration_data_micro_meter>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8005baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8005bb8:	b5b0      	push	{r4, r5, r7, lr}
 8005bba:	b096      	sub	sp, #88	; 0x58
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8005bc6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2188      	movs	r1, #136	; 0x88
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fe f84c 	bl	8003c70 <VL53L0X_WrByte>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bec:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005bf6:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a9e      	ldr	r2, [pc, #632]	; (8005e78 <VL53L0X_DataInit+0x2c0>)
 8005bfe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a9d      	ldr	r2, [pc, #628]	; (8005e7c <VL53L0X_DataInit+0x2c4>)
 8005c06:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005c10:	f107 0310 	add.w	r3, r7, #16
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fab4 	bl	8006184 <VL53L0X_GetDeviceParameters>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8005c22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d112      	bne.n	8005c50 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f103 0410 	add.w	r4, r3, #16
 8005c38:	f107 0510 	add.w	r5, r7, #16
 8005c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005c4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2264      	movs	r2, #100	; 0x64
 8005c54:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005c5e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005c68:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005c72:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005c7e:	2201      	movs	r2, #1
 8005c80:	2180      	movs	r1, #128	; 0x80
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fd fff4 	bl	8003c70 <VL53L0X_WrByte>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005c96:	2201      	movs	r2, #1
 8005c98:	21ff      	movs	r1, #255	; 0xff
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fd ffe8 	bl	8003c70 <VL53L0X_WrByte>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fd ffdc 	bl	8003c70 <VL53L0X_WrByte>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8005cc6:	f107 030f 	add.w	r3, r7, #15
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2191      	movs	r1, #145	; 0x91
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fe f882 	bl	8003dd8 <VL53L0X_RdByte>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8005ce2:	7bfa      	ldrb	r2, [r7, #15]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005cea:	2201      	movs	r2, #1
 8005cec:	2100      	movs	r1, #0
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fd ffbe 	bl	8003c70 <VL53L0X_WrByte>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005d02:	2200      	movs	r2, #0
 8005d04:	21ff      	movs	r1, #255	; 0xff
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fd ffb2 	bl	8003c70 <VL53L0X_WrByte>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2180      	movs	r1, #128	; 0x80
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fd ffa6 	bl	8003c70 <VL53L0X_WrByte>
 8005d24:	4603      	mov	r3, r0
 8005d26:	461a      	mov	r2, r3
 8005d28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005d32:	2300      	movs	r3, #0
 8005d34:	653b      	str	r3, [r7, #80]	; 0x50
 8005d36:	e014      	b.n	8005d62 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8005d38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d114      	bne.n	8005d6a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2201      	movs	r2, #1
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fd43 	bl	80067d4 <VL53L0X_SetLimitCheckEnable>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	461a      	mov	r2, r3
 8005d52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d5e:	3301      	adds	r3, #1
 8005d60:	653b      	str	r3, [r7, #80]	; 0x50
 8005d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d64:	2b05      	cmp	r3, #5
 8005d66:	dde7      	ble.n	8005d38 <VL53L0X_DataInit+0x180>
 8005d68:	e000      	b.n	8005d6c <VL53L0X_DataInit+0x1b4>
		else
			break;
 8005d6a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005d6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d107      	bne.n	8005d84 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005d74:	2200      	movs	r2, #0
 8005d76:	2102      	movs	r1, #2
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fd2b 	bl	80067d4 <VL53L0X_SetLimitCheckEnable>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005d84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d107      	bne.n	8005d9c <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2103      	movs	r1, #3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fd1f 	bl	80067d4 <VL53L0X_SetLimitCheckEnable>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005d9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d107      	bne.n	8005db4 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005da4:	2200      	movs	r2, #0
 8005da6:	2104      	movs	r1, #4
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fd13 	bl	80067d4 <VL53L0X_SetLimitCheckEnable>
 8005dae:	4603      	mov	r3, r0
 8005db0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005db4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d107      	bne.n	8005dcc <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2105      	movs	r1, #5
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fd07 	bl	80067d4 <VL53L0X_SetLimitCheckEnable>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8005dcc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d108      	bne.n	8005de6 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005dd4:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005dd8:	2100      	movs	r1, #0
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fdaa 	bl	8006934 <VL53L0X_SetLimitCheckValue>
 8005de0:	4603      	mov	r3, r0
 8005de2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005de6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d108      	bne.n	8005e00 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005dee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005df2:	2101      	movs	r1, #1
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fd9d 	bl	8006934 <VL53L0X_SetLimitCheckValue>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005e00:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d108      	bne.n	8005e1a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005e08:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005e0c:	2102      	movs	r1, #2
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fd90 	bl	8006934 <VL53L0X_SetLimitCheckValue>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005e1a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d107      	bne.n	8005e32 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005e22:	2200      	movs	r2, #0
 8005e24:	2103      	movs	r1, #3
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fd84 	bl	8006934 <VL53L0X_SetLimitCheckValue>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005e32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10f      	bne.n	8005e5a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	22ff      	movs	r2, #255	; 0xff
 8005e3e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005e42:	22ff      	movs	r2, #255	; 0xff
 8005e44:	2101      	movs	r1, #1
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fd ff12 	bl	8003c70 <VL53L0X_WrByte>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005e5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8005e6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3758      	adds	r7, #88	; 0x58
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bdb0      	pop	{r4, r5, r7, pc}
 8005e76:	bf00      	nop
 8005e78:	00016b85 	.word	0x00016b85
 8005e7c:	000970a4 	.word	0x000970a4

08005e80 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8005e80:	b5b0      	push	{r4, r5, r7, lr}
 8005e82:	b09e      	sub	sp, #120	; 0x78
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8005e8e:	f107 031c 	add.w	r3, r7, #28
 8005e92:	2240      	movs	r2, #64	; 0x40
 8005e94:	2100      	movs	r1, #0
 8005e96:	4618      	mov	r0, r3
 8005e98:	f014 fb22 	bl	801a4e0 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f002 fa74 	bl	80083ac <VL53L0X_get_info_from_device>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8005ed0:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8005ed8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8005edc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d80d      	bhi.n	8005f00 <VL53L0X_StaticInit+0x80>
 8005ee4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d102      	bne.n	8005ef2 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8005eec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eee:	2b20      	cmp	r3, #32
 8005ef0:	d806      	bhi.n	8005f00 <VL53L0X_StaticInit+0x80>
 8005ef2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10e      	bne.n	8005f18 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8005efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005efc:	2b0c      	cmp	r3, #12
 8005efe:	d90b      	bls.n	8005f18 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8005f00:	f107 0218 	add.w	r2, r7, #24
 8005f04:	f107 0314 	add.w	r3, r7, #20
 8005f08:	4619      	mov	r1, r3
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f001 fd06 	bl	800791c <VL53L0X_perform_ref_spad_management>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8005f16:	e009      	b.n	8005f2c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8005f18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f001 ff07 	bl	8007d34 <VL53L0X_set_reference_spads>
 8005f26:	4603      	mov	r3, r0
 8005f28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8005f2c:	4b94      	ldr	r3, [pc, #592]	; (8006180 <VL53L0X_StaticInit+0x300>)
 8005f2e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8005f30:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10f      	bne.n	8005f58 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005f3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8005f42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d104      	bne.n	8005f54 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005f50:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f52:	e001      	b.n	8005f58 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8005f54:	4b8a      	ldr	r3, [pc, #552]	; (8006180 <VL53L0X_StaticInit+0x300>)
 8005f56:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005f58:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d106      	bne.n	8005f6e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8005f60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f003 fb40 	bl	80095e8 <VL53L0X_load_tuning_settings>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8005f6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10a      	bne.n	8005f8c <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8005f76:	2300      	movs	r3, #0
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	2304      	movs	r3, #4
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2100      	movs	r1, #0
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 f8ff 	bl	8007184 <VL53L0X_SetGpioConfig>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f8c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d121      	bne.n	8005fd8 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005f94:	2201      	movs	r2, #1
 8005f96:	21ff      	movs	r1, #255	; 0xff
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7fd fe69 	bl	8003c70 <VL53L0X_WrByte>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8005fa4:	f107 031a 	add.w	r3, r7, #26
 8005fa8:	461a      	mov	r2, r3
 8005faa:	2184      	movs	r1, #132	; 0x84
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7fd ff3d 	bl	8003e2c <VL53L0X_RdWord>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	21ff      	movs	r1, #255	; 0xff
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7fd fe53 	bl	8003c70 <VL53L0X_WrByte>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	461a      	mov	r2, r3
 8005fce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005fd8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d105      	bne.n	8005fec <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8005fe0:	8b7b      	ldrh	r3, [r7, #26]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8005fec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d108      	bne.n	8006006 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005ff4:	f107 031c 	add.w	r3, r7, #28
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f8c2 	bl	8006184 <VL53L0X_GetDeviceParameters>
 8006000:	4603      	mov	r3, r0
 8006002:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006006:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800600a:	2b00      	cmp	r3, #0
 800600c:	d110      	bne.n	8006030 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800600e:	f107 0319 	add.w	r3, r7, #25
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f984 	bl	8006322 <VL53L0X_GetFractionEnable>
 800601a:	4603      	mov	r3, r0
 800601c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8006020:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006024:	2b00      	cmp	r3, #0
 8006026:	d103      	bne.n	8006030 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8006028:	7e7a      	ldrb	r2, [r7, #25]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006030:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10e      	bne.n	8006056 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f103 0410 	add.w	r4, r3, #16
 800603e:	f107 051c 	add.w	r5, r7, #28
 8006042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800604a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800604c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800604e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006052:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8006056:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800605a:	2b00      	cmp	r3, #0
 800605c:	d111      	bne.n	8006082 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800605e:	f107 0319 	add.w	r3, r7, #25
 8006062:	461a      	mov	r2, r3
 8006064:	2101      	movs	r1, #1
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fd feb6 	bl	8003dd8 <VL53L0X_RdByte>
 800606c:	4603      	mov	r3, r0
 800606e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8006072:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006076:	2b00      	cmp	r3, #0
 8006078:	d103      	bne.n	8006082 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800607a:	7e7a      	ldrb	r2, [r7, #25]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8006082:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006086:	2b00      	cmp	r3, #0
 8006088:	d107      	bne.n	800609a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800608a:	2200      	movs	r2, #0
 800608c:	2100      	movs	r1, #0
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f9a4 	bl	80063dc <VL53L0X_SetSequenceStepEnable>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800609a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d107      	bne.n	80060b2 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80060a2:	2200      	movs	r2, #0
 80060a4:	2102      	movs	r1, #2
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f998 	bl	80063dc <VL53L0X_SetSequenceStepEnable>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80060b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d103      	bne.n	80060c2 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2203      	movs	r2, #3
 80060be:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80060c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d109      	bne.n	80060de <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80060ca:	f107 0313 	add.w	r3, r7, #19
 80060ce:	461a      	mov	r2, r3
 80060d0:	2100      	movs	r1, #0
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f96a 	bl	80063ac <VL53L0X_GetVcselPulsePeriod>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80060de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d103      	bne.n	80060ee <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80060e6:	7cfa      	ldrb	r2, [r7, #19]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80060ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80060f6:	f107 0313 	add.w	r3, r7, #19
 80060fa:	461a      	mov	r2, r3
 80060fc:	2101      	movs	r1, #1
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f954 	bl	80063ac <VL53L0X_GetVcselPulsePeriod>
 8006104:	4603      	mov	r3, r0
 8006106:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800610a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800610e:	2b00      	cmp	r3, #0
 8006110:	d103      	bne.n	800611a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006112:	7cfa      	ldrb	r2, [r7, #19]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800611a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800611e:	2b00      	cmp	r3, #0
 8006120:	d109      	bne.n	8006136 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8006122:	f107 030c 	add.w	r3, r7, #12
 8006126:	461a      	mov	r2, r3
 8006128:	2103      	movs	r1, #3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f002 fec0 	bl	8008eb0 <get_sequence_step_timeout>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006136:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006146:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800614a:	2b00      	cmp	r3, #0
 800614c:	d109      	bne.n	8006162 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800614e:	f107 030c 	add.w	r3, r7, #12
 8006152:	461a      	mov	r2, r3
 8006154:	2104      	movs	r1, #4
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f002 feaa 	bl	8008eb0 <get_sequence_step_timeout>
 800615c:	4603      	mov	r3, r0
 800615e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006162:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006166:	2b00      	cmp	r3, #0
 8006168:	d103      	bne.n	8006172 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006172:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8006176:	4618      	mov	r0, r3
 8006178:	3770      	adds	r7, #112	; 0x70
 800617a:	46bd      	mov	sp, r7
 800617c:	bdb0      	pop	{r4, r5, r7, pc}
 800617e:	bf00      	nop
 8006180:	20000280 	.word	0x20000280

08006184 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f8b0 	bl	80062fc <VL53L0X_GetDeviceMode>
 800619c:	4603      	mov	r3, r0
 800619e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80061a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d107      	bne.n	80061b8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	3308      	adds	r3, #8
 80061ac:	4619      	mov	r1, r3
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fa94 	bl	80066dc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80061b4:	4603      	mov	r3, r0
 80061b6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80061b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d102      	bne.n	80061c6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2200      	movs	r2, #0
 80061c4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80061c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d107      	bne.n	80061de <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	3310      	adds	r3, #16
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 faca 	bl	800676e <VL53L0X_GetXTalkCompensationRateMegaCps>
 80061da:	4603      	mov	r3, r0
 80061dc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80061de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d107      	bne.n	80061f6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	3314      	adds	r3, #20
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff fccf 	bl	8005b90 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80061f2:	4603      	mov	r3, r0
 80061f4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80061f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d134      	bne.n	8006268 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80061fe:	2300      	movs	r3, #0
 8006200:	60bb      	str	r3, [r7, #8]
 8006202:	e02a      	b.n	800625a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d12a      	bne.n	8006262 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	b299      	uxth	r1, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	3308      	adds	r3, #8
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	4413      	add	r3, r2
 800621a:	3304      	adds	r3, #4
 800621c:	461a      	mov	r2, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fbea 	bl	80069f8 <VL53L0X_GetLimitCheckValue>
 8006224:	4603      	mov	r3, r0
 8006226:	461a      	mov	r2, r3
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	4313      	orrs	r3, r2
 800622c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800622e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d117      	bne.n	8006266 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	b299      	uxth	r1, r3
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	3318      	adds	r3, #24
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	4413      	add	r3, r2
 8006242:	461a      	mov	r2, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fb51 	bl	80068ec <VL53L0X_GetLimitCheckEnable>
 800624a:	4603      	mov	r3, r0
 800624c:	461a      	mov	r2, r3
 800624e:	7bfb      	ldrb	r3, [r7, #15]
 8006250:	4313      	orrs	r3, r2
 8006252:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	3301      	adds	r3, #1
 8006258:	60bb      	str	r3, [r7, #8]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b05      	cmp	r3, #5
 800625e:	ddd1      	ble.n	8006204 <VL53L0X_GetDeviceParameters+0x80>
 8006260:	e002      	b.n	8006268 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8006262:	bf00      	nop
 8006264:	e000      	b.n	8006268 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8006266:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d107      	bne.n	8006280 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	333c      	adds	r3, #60	; 0x3c
 8006274:	4619      	mov	r1, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fc4c 	bl	8006b14 <VL53L0X_GetWrapAroundCheckEnable>
 800627c:	4603      	mov	r3, r0
 800627e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d107      	bne.n	8006298 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	3304      	adds	r3, #4
 800628c:	4619      	mov	r1, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f879 	bl	8006386 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006294:	4603      	mov	r3, r0
 8006296:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006298:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062b0:	2300      	movs	r3, #0
 80062b2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	2b15      	cmp	r3, #21
 80062b8:	bf8c      	ite	hi
 80062ba:	2201      	movhi	r2, #1
 80062bc:	2200      	movls	r2, #0
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	2a00      	cmp	r2, #0
 80062c2:	d10e      	bne.n	80062e2 <VL53L0X_SetDeviceMode+0x3e>
 80062c4:	2201      	movs	r2, #1
 80062c6:	409a      	lsls	r2, r3
 80062c8:	4b0b      	ldr	r3, [pc, #44]	; (80062f8 <VL53L0X_SetDeviceMode+0x54>)
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bf14      	ite	ne
 80062d0:	2301      	movne	r3, #1
 80062d2:	2300      	moveq	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	78fa      	ldrb	r2, [r7, #3]
 80062de:	741a      	strb	r2, [r3, #16]
		break;
 80062e0:	e001      	b.n	80062e6 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80062e2:	23f8      	movs	r3, #248	; 0xf8
 80062e4:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	0030000b 	.word	0x0030000b

080062fc <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006306:	2300      	movs	r3, #0
 8006308:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	7c1a      	ldrb	r2, [r3, #16]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006312:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800632c:	2300      	movs	r3, #0
 800632e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	2109      	movs	r1, #9
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7fd fd4f 	bl	8003dd8 <VL53L0X_RdByte>
 800633a:	4603      	mov	r3, r0
 800633c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800633e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	b2da      	uxtb	r2, r3
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006354:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f002 ffa7 	bl	80092c4 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006376:	4603      	mov	r3, r0
 8006378:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800637a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006390:	2300      	movs	r3, #0
 8006392:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f003 f874 	bl	8009484 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800639c:	4603      	mov	r3, r0
 800639e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80063a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	460b      	mov	r3, r1
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80063be:	7afb      	ldrb	r3, [r7, #11]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	4619      	mov	r1, r3
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f002 ff46 	bl	8009256 <VL53L0X_get_vcsel_pulse_period>
 80063ca:	4603      	mov	r3, r0
 80063cc:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80063ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	70fb      	strb	r3, [r7, #3]
 80063e8:	4613      	mov	r3, r2
 80063ea:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80063f0:	2300      	movs	r3, #0
 80063f2:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80063f4:	2300      	movs	r3, #0
 80063f6:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80063f8:	f107 030f 	add.w	r3, r7, #15
 80063fc:	461a      	mov	r2, r3
 80063fe:	2101      	movs	r1, #1
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7fd fce9 	bl	8003dd8 <VL53L0X_RdByte>
 8006406:	4603      	mov	r3, r0
 8006408:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800640e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d15a      	bne.n	80064cc <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8006416:	78bb      	ldrb	r3, [r7, #2]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d12b      	bne.n	8006474 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800641c:	78fb      	ldrb	r3, [r7, #3]
 800641e:	2b04      	cmp	r3, #4
 8006420:	d825      	bhi.n	800646e <VL53L0X_SetSequenceStepEnable+0x92>
 8006422:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	0800643d 	.word	0x0800643d
 800642c:	08006447 	.word	0x08006447
 8006430:	08006451 	.word	0x08006451
 8006434:	0800645b 	.word	0x0800645b
 8006438:	08006465 	.word	0x08006465
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800643c:	7dbb      	ldrb	r3, [r7, #22]
 800643e:	f043 0310 	orr.w	r3, r3, #16
 8006442:	75bb      	strb	r3, [r7, #22]
				break;
 8006444:	e043      	b.n	80064ce <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006446:	7dbb      	ldrb	r3, [r7, #22]
 8006448:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800644c:	75bb      	strb	r3, [r7, #22]
				break;
 800644e:	e03e      	b.n	80064ce <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006450:	7dbb      	ldrb	r3, [r7, #22]
 8006452:	f043 0304 	orr.w	r3, r3, #4
 8006456:	75bb      	strb	r3, [r7, #22]
				break;
 8006458:	e039      	b.n	80064ce <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800645a:	7dbb      	ldrb	r3, [r7, #22]
 800645c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006460:	75bb      	strb	r3, [r7, #22]
				break;
 8006462:	e034      	b.n	80064ce <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006464:	7dbb      	ldrb	r3, [r7, #22]
 8006466:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800646a:	75bb      	strb	r3, [r7, #22]
				break;
 800646c:	e02f      	b.n	80064ce <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800646e:	23fc      	movs	r3, #252	; 0xfc
 8006470:	75fb      	strb	r3, [r7, #23]
 8006472:	e02c      	b.n	80064ce <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	2b04      	cmp	r3, #4
 8006478:	d825      	bhi.n	80064c6 <VL53L0X_SetSequenceStepEnable+0xea>
 800647a:	a201      	add	r2, pc, #4	; (adr r2, 8006480 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800647c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006480:	08006495 	.word	0x08006495
 8006484:	0800649f 	.word	0x0800649f
 8006488:	080064a9 	.word	0x080064a9
 800648c:	080064b3 	.word	0x080064b3
 8006490:	080064bd 	.word	0x080064bd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006494:	7dbb      	ldrb	r3, [r7, #22]
 8006496:	f023 0310 	bic.w	r3, r3, #16
 800649a:	75bb      	strb	r3, [r7, #22]
				break;
 800649c:	e017      	b.n	80064ce <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800649e:	7dbb      	ldrb	r3, [r7, #22]
 80064a0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80064a4:	75bb      	strb	r3, [r7, #22]
				break;
 80064a6:	e012      	b.n	80064ce <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80064a8:	7dbb      	ldrb	r3, [r7, #22]
 80064aa:	f023 0304 	bic.w	r3, r3, #4
 80064ae:	75bb      	strb	r3, [r7, #22]
				break;
 80064b0:	e00d      	b.n	80064ce <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80064b2:	7dbb      	ldrb	r3, [r7, #22]
 80064b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b8:	75bb      	strb	r3, [r7, #22]
				break;
 80064ba:	e008      	b.n	80064ce <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80064bc:	7dbb      	ldrb	r3, [r7, #22]
 80064be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c2:	75bb      	strb	r3, [r7, #22]
				break;
 80064c4:	e003      	b.n	80064ce <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80064c6:	23fc      	movs	r3, #252	; 0xfc
 80064c8:	75fb      	strb	r3, [r7, #23]
 80064ca:	e000      	b.n	80064ce <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80064cc:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	7dba      	ldrb	r2, [r7, #22]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d01e      	beq.n	8006514 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80064d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d107      	bne.n	80064ee <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80064de:	7dbb      	ldrb	r3, [r7, #22]
 80064e0:	461a      	mov	r2, r3
 80064e2:	2101      	movs	r1, #1
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7fd fbc3 	bl	8003c70 <VL53L0X_WrByte>
 80064ea:	4603      	mov	r3, r0
 80064ec:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80064ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d103      	bne.n	80064fe <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	7dba      	ldrb	r2, [r7, #22]
 80064fa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80064fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800650c:	6939      	ldr	r1, [r7, #16]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff ff26 	bl	8006360 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006514:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	607b      	str	r3, [r7, #4]
 800652a:	460b      	mov	r3, r1
 800652c:	72fb      	strb	r3, [r7, #11]
 800652e:	4613      	mov	r3, r2
 8006530:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006532:	2300      	movs	r3, #0
 8006534:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800653c:	7afb      	ldrb	r3, [r7, #11]
 800653e:	2b04      	cmp	r3, #4
 8006540:	d836      	bhi.n	80065b0 <sequence_step_enabled+0x90>
 8006542:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <sequence_step_enabled+0x28>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	0800655d 	.word	0x0800655d
 800654c:	0800656f 	.word	0x0800656f
 8006550:	08006581 	.word	0x08006581
 8006554:	08006593 	.word	0x08006593
 8006558:	080065a5 	.word	0x080065a5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800655c:	7abb      	ldrb	r3, [r7, #10]
 800655e:	111b      	asrs	r3, r3, #4
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	b2da      	uxtb	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	701a      	strb	r2, [r3, #0]
		break;
 800656c:	e022      	b.n	80065b4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800656e:	7abb      	ldrb	r3, [r7, #10]
 8006570:	10db      	asrs	r3, r3, #3
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	b2da      	uxtb	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	701a      	strb	r2, [r3, #0]
		break;
 800657e:	e019      	b.n	80065b4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006580:	7abb      	ldrb	r3, [r7, #10]
 8006582:	109b      	asrs	r3, r3, #2
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	b2da      	uxtb	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	701a      	strb	r2, [r3, #0]
		break;
 8006590:	e010      	b.n	80065b4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006592:	7abb      	ldrb	r3, [r7, #10]
 8006594:	119b      	asrs	r3, r3, #6
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	b2da      	uxtb	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	701a      	strb	r2, [r3, #0]
		break;
 80065a2:	e007      	b.n	80065b4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80065a4:	7abb      	ldrb	r3, [r7, #10]
 80065a6:	09db      	lsrs	r3, r3, #7
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	701a      	strb	r2, [r3, #0]
		break;
 80065ae:	e001      	b.n	80065b4 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80065b0:	23fc      	movs	r3, #252	; 0xfc
 80065b2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80065b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	371c      	adds	r7, #28
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80065d6:	f107 030e 	add.w	r3, r7, #14
 80065da:	461a      	mov	r2, r3
 80065dc:	2101      	movs	r1, #1
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7fd fbfa 	bl	8003dd8 <VL53L0X_RdByte>
 80065e4:	4603      	mov	r3, r0
 80065e6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80065e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d107      	bne.n	8006600 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80065f0:	7bba      	ldrb	r2, [r7, #14]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2100      	movs	r1, #0
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff ff92 	bl	8006520 <sequence_step_enabled>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d108      	bne.n	800661a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8006608:	7bba      	ldrb	r2, [r7, #14]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	3302      	adds	r3, #2
 800660e:	2101      	movs	r1, #1
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff ff85 	bl	8006520 <sequence_step_enabled>
 8006616:	4603      	mov	r3, r0
 8006618:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800661a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d108      	bne.n	8006634 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8006622:	7bba      	ldrb	r2, [r7, #14]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	3301      	adds	r3, #1
 8006628:	2102      	movs	r1, #2
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff ff78 	bl	8006520 <sequence_step_enabled>
 8006630:	4603      	mov	r3, r0
 8006632:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d108      	bne.n	800664e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800663c:	7bba      	ldrb	r2, [r7, #14]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	3303      	adds	r3, #3
 8006642:	2103      	movs	r1, #3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff ff6b 	bl	8006520 <sequence_step_enabled>
 800664a:	4603      	mov	r3, r0
 800664c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800664e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d108      	bne.n	8006668 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8006656:	7bba      	ldrb	r2, [r7, #14]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	3304      	adds	r3, #4
 800665c:	2104      	movs	r1, #4
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff ff5e 	bl	8006520 <sequence_step_enabled>
 8006664:	4603      	mov	r3, r0
 8006666:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006668:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800667e:	2300      	movs	r3, #0
 8006680:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8006682:	f107 030e 	add.w	r3, r7, #14
 8006686:	461a      	mov	r2, r3
 8006688:	21f8      	movs	r1, #248	; 0xf8
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fd fbce 	bl	8003e2c <VL53L0X_RdWord>
 8006690:	4603      	mov	r3, r0
 8006692:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006694:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d112      	bne.n	80066c2 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 800669c:	89fb      	ldrh	r3, [r7, #14]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d006      	beq.n	80066b0 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 80066a2:	89fb      	ldrh	r3, [r7, #14]
 80066a4:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	fb02 f303 	mul.w	r3, r2, r3
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	e001      	b.n	80066b4 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	2104      	movs	r1, #4
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7fd fb27 	bl	8003d0c <VL53L0X_WrDWord>
 80066be:	4603      	mov	r3, r0
 80066c0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80066c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d102      	bne.n	80066d0 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80066d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066e6:	2300      	movs	r3, #0
 80066e8:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80066ea:	f107 030c 	add.w	r3, r7, #12
 80066ee:	461a      	mov	r2, r3
 80066f0:	21f8      	movs	r1, #248	; 0xf8
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fd fb9a 	bl	8003e2c <VL53L0X_RdWord>
 80066f8:	4603      	mov	r3, r0
 80066fa:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80066fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d108      	bne.n	8006716 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8006704:	f107 0308 	add.w	r3, r7, #8
 8006708:	461a      	mov	r2, r3
 800670a:	2104      	movs	r1, #4
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7fd fbc5 	bl	8003e9c <VL53L0X_RdDWord>
 8006712:	4603      	mov	r3, r0
 8006714:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10c      	bne.n	8006738 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800671e:	89bb      	ldrh	r3, [r7, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	89ba      	ldrh	r2, [r7, #12]
 8006728:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006738:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800674e:	2300      	movs	r3, #0
 8006750:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	7f1b      	ldrb	r3, [r3, #28]
 8006756:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	7bba      	ldrb	r2, [r7, #14]
 800675c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800675e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b086      	sub	sp, #24
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006778:	2300      	movs	r3, #0
 800677a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800677c:	f107 030e 	add.w	r3, r7, #14
 8006780:	461a      	mov	r2, r3
 8006782:	2120      	movs	r1, #32
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7fd fb51 	bl	8003e2c <VL53L0X_RdWord>
 800678a:	4603      	mov	r3, r0
 800678c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800678e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d118      	bne.n	80067c8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006796:	89fb      	ldrh	r3, [r7, #14]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d109      	bne.n	80067b0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	771a      	strb	r2, [r3, #28]
 80067ae:	e00b      	b.n	80067c8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80067b0:	89fb      	ldrh	r3, [r7, #14]
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80067c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	807b      	strh	r3, [r7, #2]
 80067e0:	4613      	mov	r3, r2
 80067e2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067e4:	2300      	movs	r3, #0
 80067e6:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80067f4:	887b      	ldrh	r3, [r7, #2]
 80067f6:	2b05      	cmp	r3, #5
 80067f8:	d902      	bls.n	8006800 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80067fa:	23fc      	movs	r3, #252	; 0xfc
 80067fc:	75fb      	strb	r3, [r7, #23]
 80067fe:	e05b      	b.n	80068b8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006800:	787b      	ldrb	r3, [r7, #1]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d106      	bne.n	8006814 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8006806:	2300      	movs	r3, #0
 8006808:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800680e:	2301      	movs	r3, #1
 8006810:	73bb      	strb	r3, [r7, #14]
 8006812:	e00a      	b.n	800682a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006814:	887b      	ldrh	r3, [r7, #2]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	330c      	adds	r3, #12
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8006826:	2301      	movs	r3, #1
 8006828:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800682a:	887b      	ldrh	r3, [r7, #2]
 800682c:	2b05      	cmp	r3, #5
 800682e:	d841      	bhi.n	80068b4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8006830:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <VL53L0X_SetLimitCheckEnable+0x64>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	08006851 	.word	0x08006851
 800683c:	0800685b 	.word	0x0800685b
 8006840:	08006871 	.word	0x08006871
 8006844:	0800687b 	.word	0x0800687b
 8006848:	08006885 	.word	0x08006885
 800684c:	0800689d 	.word	0x0800689d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	7bfa      	ldrb	r2, [r7, #15]
 8006854:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006858:	e02e      	b.n	80068b8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800685e:	b29b      	uxth	r3, r3
 8006860:	461a      	mov	r2, r3
 8006862:	2144      	movs	r1, #68	; 0x44
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7fd fa27 	bl	8003cb8 <VL53L0X_WrWord>
 800686a:	4603      	mov	r3, r0
 800686c:	75fb      	strb	r3, [r7, #23]

			break;
 800686e:	e023      	b.n	80068b8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	7bfa      	ldrb	r2, [r7, #15]
 8006874:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006878:	e01e      	b.n	80068b8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	7bfa      	ldrb	r2, [r7, #15]
 800687e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8006882:	e019      	b.n	80068b8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006884:	7bbb      	ldrb	r3, [r7, #14]
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800688a:	7b7b      	ldrb	r3, [r7, #13]
 800688c:	22fe      	movs	r2, #254	; 0xfe
 800688e:	2160      	movs	r1, #96	; 0x60
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7fd fa6d 	bl	8003d70 <VL53L0X_UpdateByte>
 8006896:	4603      	mov	r3, r0
 8006898:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800689a:	e00d      	b.n	80068b8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800689c:	7bbb      	ldrb	r3, [r7, #14]
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80068a2:	7b7b      	ldrb	r3, [r7, #13]
 80068a4:	22ef      	movs	r2, #239	; 0xef
 80068a6:	2160      	movs	r1, #96	; 0x60
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7fd fa61 	bl	8003d70 <VL53L0X_UpdateByte>
 80068ae:	4603      	mov	r3, r0
 80068b0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80068b2:	e001      	b.n	80068b8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80068b4:	23fc      	movs	r3, #252	; 0xfc
 80068b6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80068b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10f      	bne.n	80068e0 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80068c0:	787b      	ldrb	r3, [r7, #1]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d106      	bne.n	80068d4 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80068c6:	887b      	ldrh	r3, [r7, #2]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	4413      	add	r3, r2
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80068d2:	e005      	b.n	80068e0 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80068d4:	887b      	ldrh	r3, [r7, #2]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	4413      	add	r3, r2
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80068e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	460b      	mov	r3, r1
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068fa:	2300      	movs	r3, #0
 80068fc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80068fe:	897b      	ldrh	r3, [r7, #10]
 8006900:	2b05      	cmp	r3, #5
 8006902:	d905      	bls.n	8006910 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006904:	23fc      	movs	r3, #252	; 0xfc
 8006906:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	701a      	strb	r2, [r3, #0]
 800690e:	e008      	b.n	8006922 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006910:	897b      	ldrh	r3, [r7, #10]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4413      	add	r3, r2
 8006916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800691a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	7dba      	ldrb	r2, [r7, #22]
 8006920:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006922:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006926:	4618      	mov	r0, r3
 8006928:	371c      	adds	r7, #28
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
	...

08006934 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	460b      	mov	r3, r1
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006942:	2300      	movs	r3, #0
 8006944:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8006946:	897b      	ldrh	r3, [r7, #10]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006950:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8006952:	7dbb      	ldrb	r3, [r7, #22]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d107      	bne.n	8006968 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006958:	897b      	ldrh	r3, [r7, #10]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	330c      	adds	r3, #12
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	605a      	str	r2, [r3, #4]
 8006966:	e040      	b.n	80069ea <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006968:	897b      	ldrh	r3, [r7, #10]
 800696a:	2b05      	cmp	r3, #5
 800696c:	d830      	bhi.n	80069d0 <VL53L0X_SetLimitCheckValue+0x9c>
 800696e:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <VL53L0X_SetLimitCheckValue+0x40>)
 8006970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006974:	0800698d 	.word	0x0800698d
 8006978:	08006995 	.word	0x08006995
 800697c:	080069ab 	.word	0x080069ab
 8006980:	080069b3 	.word	0x080069b3
 8006984:	080069bb 	.word	0x080069bb
 8006988:	080069bb 	.word	0x080069bb

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8006992:	e01f      	b.n	80069d4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006998:	b29b      	uxth	r3, r3
 800699a:	461a      	mov	r2, r3
 800699c:	2144      	movs	r1, #68	; 0x44
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7fd f98a 	bl	8003cb8 <VL53L0X_WrWord>
 80069a4:	4603      	mov	r3, r0
 80069a6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80069a8:	e014      	b.n	80069d4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80069b0:	e010      	b.n	80069d4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80069b8:	e00c      	b.n	80069d4 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80069be:	b29b      	uxth	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	2164      	movs	r1, #100	; 0x64
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f7fd f977 	bl	8003cb8 <VL53L0X_WrWord>
 80069ca:	4603      	mov	r3, r0
 80069cc:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80069ce:	e001      	b.n	80069d4 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80069d0:	23fc      	movs	r3, #252	; 0xfc
 80069d2:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80069d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d106      	bne.n	80069ea <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80069dc:	897b      	ldrh	r3, [r7, #10]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	330c      	adds	r3, #12
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80069ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop

080069f8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	460b      	mov	r3, r1
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a06:	2300      	movs	r3, #0
 8006a08:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8006a0e:	897b      	ldrh	r3, [r7, #10]
 8006a10:	2b05      	cmp	r3, #5
 8006a12:	d847      	bhi.n	8006aa4 <VL53L0X_GetLimitCheckValue+0xac>
 8006a14:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <VL53L0X_GetLimitCheckValue+0x24>)
 8006a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1a:	bf00      	nop
 8006a1c:	08006a35 	.word	0x08006a35
 8006a20:	08006a41 	.word	0x08006a41
 8006a24:	08006a67 	.word	0x08006a67
 8006a28:	08006a73 	.word	0x08006a73
 8006a2c:	08006a7f 	.word	0x08006a7f
 8006a30:	08006a7f 	.word	0x08006a7f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a38:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	77bb      	strb	r3, [r7, #30]
		break;
 8006a3e:	e033      	b.n	8006aa8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006a40:	f107 0316 	add.w	r3, r7, #22
 8006a44:	461a      	mov	r2, r3
 8006a46:	2144      	movs	r1, #68	; 0x44
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f7fd f9ef 	bl	8003e2c <VL53L0X_RdWord>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006a52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d102      	bne.n	8006a60 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006a5a:	8afb      	ldrh	r3, [r7, #22]
 8006a5c:	025b      	lsls	r3, r3, #9
 8006a5e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8006a60:	2301      	movs	r3, #1
 8006a62:	77bb      	strb	r3, [r7, #30]
		break;
 8006a64:	e020      	b.n	8006aa8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	77bb      	strb	r3, [r7, #30]
		break;
 8006a70:	e01a      	b.n	8006aa8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	77bb      	strb	r3, [r7, #30]
		break;
 8006a7c:	e014      	b.n	8006aa8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006a7e:	f107 0316 	add.w	r3, r7, #22
 8006a82:	461a      	mov	r2, r3
 8006a84:	2164      	movs	r1, #100	; 0x64
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7fd f9d0 	bl	8003e2c <VL53L0X_RdWord>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006a90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d102      	bne.n	8006a9e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006a98:	8afb      	ldrh	r3, [r7, #22]
 8006a9a:	025b      	lsls	r3, r3, #9
 8006a9c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	77bb      	strb	r3, [r7, #30]
		break;
 8006aa2:	e001      	b.n	8006aa8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006aa4:	23fc      	movs	r3, #252	; 0xfc
 8006aa6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006aa8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d12a      	bne.n	8006b06 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8006ab0:	7fbb      	ldrb	r3, [r7, #30]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d124      	bne.n	8006b00 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d110      	bne.n	8006ade <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8006abc:	897b      	ldrh	r3, [r7, #10]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	330c      	adds	r3, #12
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006ad0:	897b      	ldrh	r3, [r7, #10]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006adc:	e013      	b.n	8006b06 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006ae4:	897b      	ldrh	r3, [r7, #10]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	330c      	adds	r3, #12
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006af2:	897b      	ldrh	r3, [r7, #10]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006afe:	e002      	b.n	8006b06 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006b06:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3720      	adds	r7, #32
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop

08006b14 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8006b22:	f107 030e 	add.w	r3, r7, #14
 8006b26:	461a      	mov	r2, r3
 8006b28:	2101      	movs	r1, #1
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7fd f954 	bl	8003dd8 <VL53L0X_RdByte>
 8006b30:	4603      	mov	r3, r0
 8006b32:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8006b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10e      	bne.n	8006b5a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006b3c:	7bba      	ldrb	r2, [r7, #14]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	b25b      	sxtb	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	da03      	bge.n	8006b54 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	e002      	b.n	8006b5a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2200      	movs	r2, #0
 8006b58:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d104      	bne.n	8006b6c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781a      	ldrb	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b80:	2300      	movs	r3, #0
 8006b82:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006b84:	f107 030e 	add.w	r3, r7, #14
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff fbb6 	bl	80062fc <VL53L0X_GetDeviceMode>
 8006b90:	4603      	mov	r3, r0
 8006b92:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d107      	bne.n	8006bac <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d104      	bne.n	8006bac <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f898 	bl	8006cd8 <VL53L0X_StartMeasurement>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d104      	bne.n	8006bbe <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 fb3f 	bl	8008238 <VL53L0X_measurement_poll_for_completion>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d106      	bne.n	8006bd4 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006bc6:	7bbb      	ldrb	r3, [r7, #14]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d103      	bne.n	8006bd4 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2203      	movs	r2, #3
 8006bd0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8006bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bec:	2300      	movs	r3, #0
 8006bee:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f001 fae1 	bl	80081be <VL53L0X_perform_ref_calibration>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8006c00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006c22:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8006c24:	7dbb      	ldrb	r3, [r7, #22]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d005      	beq.n	8006c36 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8006c2a:	7dbb      	ldrb	r3, [r7, #22]
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d002      	beq.n	8006c36 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8006c30:	7dbb      	ldrb	r3, [r7, #22]
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d147      	bne.n	8006cc6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8006c36:	f107 030c 	add.w	r3, r7, #12
 8006c3a:	f107 0210 	add.w	r2, r7, #16
 8006c3e:	2101      	movs	r1, #1
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fbc3 	bl	80073cc <VL53L0X_GetInterruptThresholds>
 8006c46:	4603      	mov	r3, r0
 8006c48:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006c50:	d803      	bhi.n	8006c5a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8006c52:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8006c54:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006c58:	d935      	bls.n	8006cc6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8006c5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d131      	bne.n	8006cc6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d006      	beq.n	8006c76 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006c68:	491a      	ldr	r1, [pc, #104]	; (8006cd4 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f002 fcbc 	bl	80095e8 <VL53L0X_load_tuning_settings>
 8006c70:	4603      	mov	r3, r0
 8006c72:	75fb      	strb	r3, [r7, #23]
 8006c74:	e027      	b.n	8006cc6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006c76:	2204      	movs	r2, #4
 8006c78:	21ff      	movs	r1, #255	; 0xff
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fc fff8 	bl	8003c70 <VL53L0X_WrByte>
 8006c80:	4603      	mov	r3, r0
 8006c82:	461a      	mov	r2, r3
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2170      	movs	r1, #112	; 0x70
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fc ffee 	bl	8003c70 <VL53L0X_WrByte>
 8006c94:	4603      	mov	r3, r0
 8006c96:	461a      	mov	r2, r3
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	21ff      	movs	r1, #255	; 0xff
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fc ffe4 	bl	8003c70 <VL53L0X_WrByte>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	461a      	mov	r2, r3
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2180      	movs	r1, #128	; 0x80
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7fc ffda 	bl	8003c70 <VL53L0X_WrByte>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8006cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000374 	.word	0x20000374

08006cd8 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006ce8:	f107 030e 	add.w	r3, r7, #14
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff fb04 	bl	80062fc <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	2180      	movs	r1, #128	; 0x80
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7fc ffb9 	bl	8003c70 <VL53L0X_WrByte>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006d02:	2201      	movs	r2, #1
 8006d04:	21ff      	movs	r1, #255	; 0xff
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fc ffb2 	bl	8003c70 <VL53L0X_WrByte>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006d10:	2200      	movs	r2, #0
 8006d12:	2100      	movs	r1, #0
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7fc ffab 	bl	8003c70 <VL53L0X_WrByte>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006d24:	461a      	mov	r2, r3
 8006d26:	2191      	movs	r1, #145	; 0x91
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7fc ffa1 	bl	8003c70 <VL53L0X_WrByte>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006d32:	2201      	movs	r2, #1
 8006d34:	2100      	movs	r1, #0
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7fc ff9a 	bl	8003c70 <VL53L0X_WrByte>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006d40:	2200      	movs	r2, #0
 8006d42:	21ff      	movs	r1, #255	; 0xff
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7fc ff93 	bl	8003c70 <VL53L0X_WrByte>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2180      	movs	r1, #128	; 0x80
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fc ff8c 	bl	8003c70 <VL53L0X_WrByte>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8006d5c:	7bbb      	ldrb	r3, [r7, #14]
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d054      	beq.n	8006e0c <VL53L0X_StartMeasurement+0x134>
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	dc6c      	bgt.n	8006e40 <VL53L0X_StartMeasurement+0x168>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <VL53L0X_StartMeasurement+0x98>
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d034      	beq.n	8006dd8 <VL53L0X_StartMeasurement+0x100>
 8006d6e:	e067      	b.n	8006e40 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006d70:	2201      	movs	r2, #1
 8006d72:	2100      	movs	r1, #0
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7fc ff7b 	bl	8003c70 <VL53L0X_WrByte>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8006d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d15d      	bne.n	8006e46 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d008      	beq.n	8006da6 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8006d94:	f107 030d 	add.w	r3, r7, #13
 8006d98:	461a      	mov	r2, r3
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7fd f81b 	bl	8003dd8 <VL53L0X_RdByte>
 8006da2:	4603      	mov	r3, r0
 8006da4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	3301      	adds	r3, #1
 8006daa:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8006dac:	7b7a      	ldrb	r2, [r7, #13]
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	4013      	ands	r3, r2
 8006db2:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006db4:	7bfa      	ldrb	r2, [r7, #15]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d107      	bne.n	8006dca <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8006dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d103      	bne.n	8006dca <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006dc8:	d3e1      	bcc.n	8006d8e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006dd0:	d339      	bcc.n	8006e46 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8006dd2:	23f9      	movs	r3, #249	; 0xf9
 8006dd4:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8006dd6:	e036      	b.n	8006e46 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006dd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d105      	bne.n	8006dec <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006de0:	2101      	movs	r1, #1
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7ff ff12 	bl	8006c0c <VL53L0X_CheckAndLoadInterruptSettings>
 8006de8:	4603      	mov	r3, r0
 8006dea:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006dec:	2202      	movs	r2, #2
 8006dee:	2100      	movs	r1, #0
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7fc ff3d 	bl	8003c70 <VL53L0X_WrByte>
 8006df6:	4603      	mov	r3, r0
 8006df8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8006dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d123      	bne.n	8006e4a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2204      	movs	r2, #4
 8006e06:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006e0a:	e01e      	b.n	8006e4a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006e0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d105      	bne.n	8006e20 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006e14:	2101      	movs	r1, #1
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff fef8 	bl	8006c0c <VL53L0X_CheckAndLoadInterruptSettings>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006e20:	2204      	movs	r2, #4
 8006e22:	2100      	movs	r1, #0
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7fc ff23 	bl	8003c70 <VL53L0X_WrByte>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8006e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10b      	bne.n	8006e4e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2204      	movs	r2, #4
 8006e3a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006e3e:	e006      	b.n	8006e4e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006e40:	23f8      	movs	r3, #248	; 0xf8
 8006e42:	75fb      	strb	r3, [r7, #23]
 8006e44:	e004      	b.n	8006e50 <VL53L0X_StartMeasurement+0x178>
		break;
 8006e46:	bf00      	nop
 8006e48:	e002      	b.n	8006e50 <VL53L0X_StartMeasurement+0x178>
		break;
 8006e4a:	bf00      	nop
 8006e4c:	e000      	b.n	8006e50 <VL53L0X_StartMeasurement+0x178>
		break;
 8006e4e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8006e50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006e70:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d112      	bne.n	8006e9e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8006e78:	f107 0308 	add.w	r3, r7, #8
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fb1a 	bl	80074b8 <VL53L0X_GetInterruptMaskStatus>
 8006e84:	4603      	mov	r3, r0
 8006e86:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d103      	bne.n	8006e96 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2201      	movs	r2, #1
 8006e92:	701a      	strb	r2, [r3, #0]
 8006e94:	e01c      	b.n	8006ed0 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	701a      	strb	r2, [r3, #0]
 8006e9c:	e018      	b.n	8006ed0 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8006e9e:	f107 030d 	add.w	r3, r7, #13
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	2114      	movs	r1, #20
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fc ff96 	bl	8003dd8 <VL53L0X_RdByte>
 8006eac:	4603      	mov	r3, r0
 8006eae:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8006eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10b      	bne.n	8006ed0 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8006eb8:	7b7b      	ldrb	r3, [r7, #13]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	701a      	strb	r2, [r3, #0]
 8006ec8:	e002      	b.n	8006ed0 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006edc:	b5b0      	push	{r4, r5, r7, lr}
 8006ede:	b096      	sub	sp, #88	; 0x58
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8006eec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006ef0:	230c      	movs	r3, #12
 8006ef2:	2114      	movs	r1, #20
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7fc fe8f 	bl	8003c18 <VL53L0X_ReadMulti>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8006f00:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f040 80d1 	bne.w	80070ac <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8006f16:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	021b      	lsls	r3, r3, #8
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	4413      	add	r3, r2
 8006f28:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8006f32:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	021b      	lsls	r3, r3, #8
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	4413      	add	r3, r2
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	025b      	lsls	r3, r3, #9
 8006f48:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f4e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8006f50:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	021b      	lsls	r3, r3, #8
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	4413      	add	r3, r2
 8006f62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8006f66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006f6a:	025b      	lsls	r3, r3, #9
 8006f6c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8006f72:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	021b      	lsls	r3, r3, #8
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	4413      	add	r3, r2
 8006f84:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006f8e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8006f90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8006f9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006fa6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8006faa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fb0:	d046      	beq.n	8007040 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8006fb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006fb4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006fb8:	fb02 f303 	mul.w	r3, r2, r3
 8006fbc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006fc0:	4a57      	ldr	r2, [pc, #348]	; (8007120 <VL53L0X_GetRangingMeasurementData+0x244>)
 8006fc2:	fb82 1203 	smull	r1, r2, r2, r3
 8006fc6:	1192      	asrs	r2, r2, #6
 8006fc8:	17db      	asrs	r3, r3, #31
 8006fca:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8006fcc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	7f1b      	ldrb	r3, [r3, #28]
 8006fda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8006fde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d02c      	beq.n	8007040 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8006fe6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006fe8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006fec:	fb02 f303 	mul.w	r3, r2, r3
 8006ff0:	121a      	asrs	r2, r3, #8
					<= 0) {
 8006ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d10d      	bne.n	8007014 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8006ff8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d004      	beq.n	800700a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8007000:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007004:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007008:	e016      	b.n	8007038 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800700a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800700e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007012:	e011      	b.n	8007038 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007014:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007018:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800701a:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800701e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007020:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007024:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007028:	121b      	asrs	r3, r3, #8
 800702a:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800702c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800702e:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8007030:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8007034:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8007038:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800703c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007040:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00d      	beq.n	8007064 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8007048:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800704c:	089b      	lsrs	r3, r3, #2
 800704e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8007054:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007058:	b2db      	uxtb	r3, r3
 800705a:	019b      	lsls	r3, r3, #6
 800705c:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	75da      	strb	r2, [r3, #23]
 8007062:	e006      	b.n	8007072 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800706a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2200      	movs	r2, #0
 8007070:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8007072:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007076:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800707a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800707e:	9301      	str	r3, [sp, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	4613      	mov	r3, r2
 8007086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f002 ff4b 	bl	8009f24 <VL53L0X_get_pal_range_status>
 800708e:	4603      	mov	r3, r0
 8007090:	461a      	mov	r2, r3
 8007092:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007096:	4313      	orrs	r3, r2
 8007098:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800709c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d103      	bne.n	80070ac <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80070a4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070ac:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d12f      	bne.n	8007114 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f107 040c 	add.w	r4, r7, #12
 80070ba:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80070be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80070c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80070ce:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80070d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80070dc:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80070e2:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80070e8:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80070ee:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80070f4:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80070fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007104:	f107 050c 	add.w	r5, r7, #12
 8007108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800710a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800710c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007110:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007114:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007118:	4618      	mov	r0, r3
 800711a:	3750      	adds	r7, #80	; 0x50
 800711c:	46bd      	mov	sp, r7
 800711e:	bdb0      	pop	{r4, r5, r7, pc}
 8007120:	10624dd3 	.word	0x10624dd3

08007124 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8007132:	2100      	movs	r1, #0
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff f8b5 	bl	80062a4 <VL53L0X_SetDeviceMode>
 800713a:	4603      	mov	r3, r0
 800713c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800713e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d104      	bne.n	8007150 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fd16 	bl	8006b78 <VL53L0X_PerformSingleMeasurement>
 800714c:	4603      	mov	r3, r0
 800714e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d105      	bne.n	8007164 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7ff febe 	bl	8006edc <VL53L0X_GetRangingMeasurementData>
 8007160:	4603      	mov	r3, r0
 8007162:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8007164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d105      	bne.n	8007178 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800716c:	2100      	movs	r1, #0
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f962 	bl	8007438 <VL53L0X_ClearInterruptMask>
 8007174:	4603      	mov	r3, r0
 8007176:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8007178:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	4608      	mov	r0, r1
 800718e:	4611      	mov	r1, r2
 8007190:	461a      	mov	r2, r3
 8007192:	4603      	mov	r3, r0
 8007194:	70fb      	strb	r3, [r7, #3]
 8007196:	460b      	mov	r3, r1
 8007198:	70bb      	strb	r3, [r7, #2]
 800719a:	4613      	mov	r3, r2
 800719c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80071a2:	78fb      	ldrb	r3, [r7, #3]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80071a8:	23f6      	movs	r3, #246	; 0xf6
 80071aa:	73fb      	strb	r3, [r7, #15]
 80071ac:	e107      	b.n	80073be <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80071ae:	78bb      	ldrb	r3, [r7, #2]
 80071b0:	2b14      	cmp	r3, #20
 80071b2:	d110      	bne.n	80071d6 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80071b4:	7e3b      	ldrb	r3, [r7, #24]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d102      	bne.n	80071c0 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80071ba:	2310      	movs	r3, #16
 80071bc:	73bb      	strb	r3, [r7, #14]
 80071be:	e001      	b.n	80071c4 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80071c0:	2301      	movs	r3, #1
 80071c2:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
 80071c6:	461a      	mov	r2, r3
 80071c8:	2184      	movs	r1, #132	; 0x84
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7fc fd50 	bl	8003c70 <VL53L0X_WrByte>
 80071d0:	4603      	mov	r3, r0
 80071d2:	73fb      	strb	r3, [r7, #15]
 80071d4:	e0f3      	b.n	80073be <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80071d6:	78bb      	ldrb	r3, [r7, #2]
 80071d8:	2b15      	cmp	r3, #21
 80071da:	f040 8097 	bne.w	800730c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80071de:	2201      	movs	r2, #1
 80071e0:	21ff      	movs	r1, #255	; 0xff
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fc fd44 	bl	8003c70 <VL53L0X_WrByte>
 80071e8:	4603      	mov	r3, r0
 80071ea:	461a      	mov	r2, r3
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80071f2:	2200      	movs	r2, #0
 80071f4:	2100      	movs	r1, #0
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7fc fd3a 	bl	8003c70 <VL53L0X_WrByte>
 80071fc:	4603      	mov	r3, r0
 80071fe:	461a      	mov	r2, r3
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	4313      	orrs	r3, r2
 8007204:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007206:	2200      	movs	r2, #0
 8007208:	21ff      	movs	r1, #255	; 0xff
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7fc fd30 	bl	8003c70 <VL53L0X_WrByte>
 8007210:	4603      	mov	r3, r0
 8007212:	461a      	mov	r2, r3
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	4313      	orrs	r3, r2
 8007218:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800721a:	2201      	movs	r2, #1
 800721c:	2180      	movs	r1, #128	; 0x80
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7fc fd26 	bl	8003c70 <VL53L0X_WrByte>
 8007224:	4603      	mov	r3, r0
 8007226:	461a      	mov	r2, r3
 8007228:	7bfb      	ldrb	r3, [r7, #15]
 800722a:	4313      	orrs	r3, r2
 800722c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800722e:	2202      	movs	r2, #2
 8007230:	2185      	movs	r1, #133	; 0x85
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7fc fd1c 	bl	8003c70 <VL53L0X_WrByte>
 8007238:	4603      	mov	r3, r0
 800723a:	461a      	mov	r2, r3
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	4313      	orrs	r3, r2
 8007240:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8007242:	2204      	movs	r2, #4
 8007244:	21ff      	movs	r1, #255	; 0xff
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7fc fd12 	bl	8003c70 <VL53L0X_WrByte>
 800724c:	4603      	mov	r3, r0
 800724e:	461a      	mov	r2, r3
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	4313      	orrs	r3, r2
 8007254:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8007256:	2200      	movs	r2, #0
 8007258:	21cd      	movs	r1, #205	; 0xcd
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fc fd08 	bl	8003c70 <VL53L0X_WrByte>
 8007260:	4603      	mov	r3, r0
 8007262:	461a      	mov	r2, r3
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	4313      	orrs	r3, r2
 8007268:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800726a:	2211      	movs	r2, #17
 800726c:	21cc      	movs	r1, #204	; 0xcc
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7fc fcfe 	bl	8003c70 <VL53L0X_WrByte>
 8007274:	4603      	mov	r3, r0
 8007276:	461a      	mov	r2, r3
 8007278:	7bfb      	ldrb	r3, [r7, #15]
 800727a:	4313      	orrs	r3, r2
 800727c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800727e:	2207      	movs	r2, #7
 8007280:	21ff      	movs	r1, #255	; 0xff
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7fc fcf4 	bl	8003c70 <VL53L0X_WrByte>
 8007288:	4603      	mov	r3, r0
 800728a:	461a      	mov	r2, r3
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	4313      	orrs	r3, r2
 8007290:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8007292:	2200      	movs	r2, #0
 8007294:	21be      	movs	r1, #190	; 0xbe
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7fc fcea 	bl	8003c70 <VL53L0X_WrByte>
 800729c:	4603      	mov	r3, r0
 800729e:	461a      	mov	r2, r3
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80072a6:	2206      	movs	r2, #6
 80072a8:	21ff      	movs	r1, #255	; 0xff
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7fc fce0 	bl	8003c70 <VL53L0X_WrByte>
 80072b0:	4603      	mov	r3, r0
 80072b2:	461a      	mov	r2, r3
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80072ba:	2209      	movs	r2, #9
 80072bc:	21cc      	movs	r1, #204	; 0xcc
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7fc fcd6 	bl	8003c70 <VL53L0X_WrByte>
 80072c4:	4603      	mov	r3, r0
 80072c6:	461a      	mov	r2, r3
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80072ce:	2200      	movs	r2, #0
 80072d0:	21ff      	movs	r1, #255	; 0xff
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7fc fccc 	bl	8003c70 <VL53L0X_WrByte>
 80072d8:	4603      	mov	r3, r0
 80072da:	461a      	mov	r2, r3
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	4313      	orrs	r3, r2
 80072e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80072e2:	2201      	movs	r2, #1
 80072e4:	21ff      	movs	r1, #255	; 0xff
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7fc fcc2 	bl	8003c70 <VL53L0X_WrByte>
 80072ec:	4603      	mov	r3, r0
 80072ee:	461a      	mov	r2, r3
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80072f6:	2200      	movs	r2, #0
 80072f8:	2100      	movs	r1, #0
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7fc fcb8 	bl	8003c70 <VL53L0X_WrByte>
 8007300:	4603      	mov	r3, r0
 8007302:	461a      	mov	r2, r3
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	4313      	orrs	r3, r2
 8007308:	73fb      	strb	r3, [r7, #15]
 800730a:	e058      	b.n	80073be <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800730c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d121      	bne.n	8007358 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007314:	787b      	ldrb	r3, [r7, #1]
 8007316:	2b04      	cmp	r3, #4
 8007318:	d81b      	bhi.n	8007352 <VL53L0X_SetGpioConfig+0x1ce>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <VL53L0X_SetGpioConfig+0x19c>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007335 	.word	0x08007335
 8007324:	0800733b 	.word	0x0800733b
 8007328:	08007341 	.word	0x08007341
 800732c:	08007347 	.word	0x08007347
 8007330:	0800734d 	.word	0x0800734d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8007334:	2300      	movs	r3, #0
 8007336:	73bb      	strb	r3, [r7, #14]
				break;
 8007338:	e00f      	b.n	800735a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800733a:	2301      	movs	r3, #1
 800733c:	73bb      	strb	r3, [r7, #14]
				break;
 800733e:	e00c      	b.n	800735a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8007340:	2302      	movs	r3, #2
 8007342:	73bb      	strb	r3, [r7, #14]
				break;
 8007344:	e009      	b.n	800735a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8007346:	2303      	movs	r3, #3
 8007348:	73bb      	strb	r3, [r7, #14]
				break;
 800734a:	e006      	b.n	800735a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800734c:	2304      	movs	r3, #4
 800734e:	73bb      	strb	r3, [r7, #14]
				break;
 8007350:	e003      	b.n	800735a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8007352:	23f5      	movs	r3, #245	; 0xf5
 8007354:	73fb      	strb	r3, [r7, #15]
 8007356:	e000      	b.n	800735a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8007358:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800735a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d107      	bne.n	8007372 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	461a      	mov	r2, r3
 8007366:	210a      	movs	r1, #10
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7fc fc81 	bl	8003c70 <VL53L0X_WrByte>
 800736e:	4603      	mov	r3, r0
 8007370:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8007372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10f      	bne.n	800739a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800737a:	7e3b      	ldrb	r3, [r7, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	73bb      	strb	r3, [r7, #14]
 8007384:	e001      	b.n	800738a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8007386:	2310      	movs	r3, #16
 8007388:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	22ef      	movs	r2, #239	; 0xef
 800738e:	2184      	movs	r1, #132	; 0x84
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7fc fced 	bl	8003d70 <VL53L0X_UpdateByte>
 8007396:	4603      	mov	r3, r0
 8007398:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800739a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d103      	bne.n	80073aa <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	787a      	ldrb	r2, [r7, #1]
 80073a6:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80073aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d105      	bne.n	80073be <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80073b2:	2100      	movs	r1, #0
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f83f 	bl	8007438 <VL53L0X_ClearInterruptMask>
 80073ba:	4603      	mov	r3, r0
 80073bc:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80073be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop

080073cc <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	607a      	str	r2, [r7, #4]
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	460b      	mov	r3, r1
 80073da:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073dc:	2300      	movs	r3, #0
 80073de:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80073e0:	f107 0314 	add.w	r3, r7, #20
 80073e4:	461a      	mov	r2, r3
 80073e6:	210e      	movs	r1, #14
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f7fc fd1f 	bl	8003e2c <VL53L0X_RdWord>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80073f2:	8abb      	ldrh	r3, [r7, #20]
 80073f4:	045b      	lsls	r3, r3, #17
 80073f6:	461a      	mov	r2, r3
 80073f8:	4b0e      	ldr	r3, [pc, #56]	; (8007434 <VL53L0X_GetInterruptThresholds+0x68>)
 80073fa:	4013      	ands	r3, r2
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007400:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10f      	bne.n	8007428 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007408:	f107 0314 	add.w	r3, r7, #20
 800740c:	461a      	mov	r2, r3
 800740e:	210c      	movs	r1, #12
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f7fc fd0b 	bl	8003e2c <VL53L0X_RdWord>
 8007416:	4603      	mov	r3, r0
 8007418:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800741a:	8abb      	ldrh	r3, [r7, #20]
 800741c:	045b      	lsls	r3, r3, #17
 800741e:	461a      	mov	r2, r3
 8007420:	4b04      	ldr	r3, [pc, #16]	; (8007434 <VL53L0X_GetInterruptThresholds+0x68>)
 8007422:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007428:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	1ffe0000 	.word	0x1ffe0000

08007438 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800744a:	2201      	movs	r2, #1
 800744c:	210b      	movs	r1, #11
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7fc fc0e 	bl	8003c70 <VL53L0X_WrByte>
 8007454:	4603      	mov	r3, r0
 8007456:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8007458:	2200      	movs	r2, #0
 800745a:	210b      	movs	r1, #11
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7fc fc07 	bl	8003c70 <VL53L0X_WrByte>
 8007462:	4603      	mov	r3, r0
 8007464:	461a      	mov	r2, r3
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	4313      	orrs	r3, r2
 800746a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800746c:	f107 030d 	add.w	r3, r7, #13
 8007470:	461a      	mov	r2, r3
 8007472:	2113      	movs	r1, #19
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7fc fcaf 	bl	8003dd8 <VL53L0X_RdByte>
 800747a:	4603      	mov	r3, r0
 800747c:	461a      	mov	r2, r3
 800747e:	7bfb      	ldrb	r3, [r7, #15]
 8007480:	4313      	orrs	r3, r2
 8007482:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007484:	7bbb      	ldrb	r3, [r7, #14]
 8007486:	3301      	adds	r3, #1
 8007488:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800748a:	7b7b      	ldrb	r3, [r7, #13]
 800748c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007490:	2b00      	cmp	r3, #0
 8007492:	d006      	beq.n	80074a2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	2b02      	cmp	r3, #2
 8007498:	d803      	bhi.n	80074a2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800749a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0d3      	beq.n	800744a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d901      	bls.n	80074ac <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80074a8:	23f4      	movs	r3, #244	; 0xf4
 80074aa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80074ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80074c6:	f107 030e 	add.w	r3, r7, #14
 80074ca:	461a      	mov	r2, r3
 80074cc:	2113      	movs	r1, #19
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fc fc82 	bl	8003dd8 <VL53L0X_RdByte>
 80074d4:	4603      	mov	r3, r0
 80074d6:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	f003 0207 	and.w	r2, r3, #7
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	f003 0318 	and.w	r3, r3, #24
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80074ec:	23fa      	movs	r3, #250	; 0xfa
 80074ee:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80074f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007508:	2300      	movs	r3, #0
 800750a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	68b9      	ldr	r1, [r7, #8]
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 fa03 	bl	800791c <VL53L0X_perform_ref_spad_management>
 8007516:	4603      	mov	r3, r0
 8007518:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800751a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007530:	2300      	movs	r3, #0
 8007532:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007534:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007538:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800753a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800753e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007540:	f107 0308 	add.w	r3, r7, #8
 8007544:	461a      	mov	r2, r3
 8007546:	2128      	movs	r1, #40	; 0x28
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7fc fc6f 	bl	8003e2c <VL53L0X_RdWord>
 800754e:	4603      	mov	r3, r0
 8007550:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8007552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d11e      	bne.n	8007598 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800755a:	893b      	ldrh	r3, [r7, #8]
 800755c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007560:	b29b      	uxth	r3, r3
 8007562:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8007564:	893b      	ldrh	r3, [r7, #8]
 8007566:	461a      	mov	r2, r3
 8007568:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800756c:	429a      	cmp	r2, r3
 800756e:	dd0b      	ble.n	8007588 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8007570:	893a      	ldrh	r2, [r7, #8]
 8007572:	897b      	ldrh	r3, [r7, #10]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	b29b      	uxth	r3, r3
 8007578:	b21b      	sxth	r3, r3
 800757a:	461a      	mov	r2, r3
					* 250;
 800757c:	23fa      	movs	r3, #250	; 0xfa
 800757e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	e007      	b.n	8007598 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007588:	893b      	ldrh	r3, [r7, #8]
 800758a:	b21b      	sxth	r3, r3
 800758c:	461a      	mov	r2, r3
 800758e:	23fa      	movs	r3, #250	; 0xfa
 8007590:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007598:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b08b      	sub	sp, #44	; 0x2c
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80075b2:	2308      	movs	r3, #8
 80075b4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075c0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ca:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80075d4:	69b9      	ldr	r1, [r7, #24]
 80075d6:	fb01 f202 	mul.w	r2, r1, r2
 80075da:	1a9b      	subs	r3, r3, r2
 80075dc:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
 80075e2:	e030      	b.n	8007646 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	4413      	add	r3, r2
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80075f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d11e      	bne.n	8007638 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80075fa:	7ffa      	ldrb	r2, [r7, #31]
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	fa42 f303 	asr.w	r3, r2, r3
 8007602:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007608:	e016      	b.n	8007638 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800760a:	7ffb      	ldrb	r3, [r7, #31]
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <get_next_good_spad+0x88>
				success = 1;
 8007614:	2301      	movs	r3, #1
 8007616:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	69ba      	ldr	r2, [r7, #24]
 800761c:	fb03 f202 	mul.w	r2, r3, r2
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	4413      	add	r3, r2
 8007624:	461a      	mov	r2, r3
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	601a      	str	r2, [r3, #0]
				break;
 800762a:	e009      	b.n	8007640 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800762c:	7ffb      	ldrb	r3, [r7, #31]
 800762e:	085b      	lsrs	r3, r3, #1
 8007630:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	3301      	adds	r3, #1
 8007636:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007638:	6a3a      	ldr	r2, [r7, #32]
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	429a      	cmp	r2, r3
 800763e:	d3e4      	bcc.n	800760a <get_next_good_spad+0x66>
				coarseIndex++) {
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	3301      	adds	r3, #1
 8007644:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	429a      	cmp	r2, r3
 800764c:	d202      	bcs.n	8007654 <get_next_good_spad+0xb0>
 800764e:	7fbb      	ldrb	r3, [r7, #30]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d0c7      	beq.n	80075e4 <get_next_good_spad+0x40>
		}
	}
}
 8007654:	bf00      	nop
 8007656:	372c      	adds	r7, #44	; 0x2c
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8007668:	2301      	movs	r3, #1
 800766a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	099b      	lsrs	r3, r3, #6
 8007670:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8007672:	4a07      	ldr	r2, [pc, #28]	; (8007690 <is_aperture+0x30>)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <is_aperture+0x22>
		isAperture = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8007682:	7bfb      	ldrb	r3, [r7, #15]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	2000052c 	.word	0x2000052c

08007694 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007694:	b480      	push	{r7}
 8007696:	b089      	sub	sp, #36	; 0x24
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80076a0:	2300      	movs	r3, #0
 80076a2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80076a4:	2308      	movs	r3, #8
 80076a6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	69ba      	ldr	r2, [r7, #24]
 80076b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80076ba:	69b9      	ldr	r1, [r7, #24]
 80076bc:	fb01 f202 	mul.w	r2, r1, r2
 80076c0:	1a9b      	subs	r3, r3, r2
 80076c2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d302      	bcc.n	80076d2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80076cc:	23ce      	movs	r3, #206	; 0xce
 80076ce:	77fb      	strb	r3, [r7, #31]
 80076d0:	e010      	b.n	80076f4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	4413      	add	r3, r2
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	b25a      	sxtb	r2, r3
 80076dc:	2101      	movs	r1, #1
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	fa01 f303 	lsl.w	r3, r1, r3
 80076e4:	b25b      	sxtb	r3, r3
 80076e6:	4313      	orrs	r3, r2
 80076e8:	b259      	sxtb	r1, r3
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	4413      	add	r3, r2
 80076f0:	b2ca      	uxtb	r2, r1
 80076f2:	701a      	strb	r2, [r3, #0]

	return status;
 80076f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3724      	adds	r7, #36	; 0x24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800770e:	2306      	movs	r3, #6
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	21b0      	movs	r1, #176	; 0xb0
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7fc fa4f 	bl	8003bb8 <VL53L0X_WriteMulti>
 800771a:	4603      	mov	r3, r0
 800771c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800771e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b084      	sub	sp, #16
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8007734:	2306      	movs	r3, #6
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	21b0      	movs	r1, #176	; 0xb0
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7fc fa6c 	bl	8003c18 <VL53L0X_ReadMulti>
 8007740:	4603      	mov	r3, r0
 8007742:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8007744:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08c      	sub	sp, #48	; 0x30
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	607a      	str	r2, [r7, #4]
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	460b      	mov	r3, r1
 800775e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007760:	2300      	movs	r3, #0
 8007762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8007766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007768:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800776a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800776c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800776e:	2300      	movs	r3, #0
 8007770:	62bb      	str	r3, [r7, #40]	; 0x28
 8007772:	e02b      	b.n	80077cc <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8007774:	f107 031c 	add.w	r3, r7, #28
 8007778:	6a3a      	ldr	r2, [r7, #32]
 800777a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff ff11 	bl	80075a4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007788:	d103      	bne.n	8007792 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800778a:	23ce      	movs	r3, #206	; 0xce
 800778c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007790:	e020      	b.n	80077d4 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	461a      	mov	r2, r3
 8007796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007798:	4413      	add	r3, r2
 800779a:	4618      	mov	r0, r3
 800779c:	f7ff ff60 	bl	8007660 <is_aperture>
 80077a0:	4603      	mov	r3, r0
 80077a2:	461a      	mov	r2, r3
 80077a4:	7afb      	ldrb	r3, [r7, #11]
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d003      	beq.n	80077b2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80077aa:	23ce      	movs	r3, #206	; 0xce
 80077ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80077b0:	e010      	b.n	80077d4 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80077b6:	6a3a      	ldr	r2, [r7, #32]
 80077b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077ba:	6838      	ldr	r0, [r7, #0]
 80077bc:	f7ff ff6a 	bl	8007694 <enable_spad_bit>
		currentSpad++;
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	3301      	adds	r3, #1
 80077c4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80077c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c8:	3301      	adds	r3, #1
 80077ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80077cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d3cf      	bcc.n	8007774 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80077d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077d6:	6a3a      	ldr	r2, [r7, #32]
 80077d8:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80077da:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d106      	bne.n	80077f0 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f7ff ff8d 	bl	8007704 <set_ref_spad_map>
 80077ea:	4603      	mov	r3, r0
 80077ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80077f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d121      	bne.n	800783c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80077f8:	f107 0314 	add.w	r3, r7, #20
 80077fc:	4619      	mov	r1, r3
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7ff ff93 	bl	800772a <get_ref_spad_map>
 8007804:	4603      	mov	r3, r0
 8007806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800780e:	e011      	b.n	8007834 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	4413      	add	r3, r2
 8007816:	781a      	ldrb	r2, [r3, #0]
 8007818:	f107 0114 	add.w	r1, r7, #20
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	440b      	add	r3, r1
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d003      	beq.n	800782e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007826:	23ce      	movs	r3, #206	; 0xce
 8007828:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800782c:	e006      	b.n	800783c <enable_ref_spads+0xec>
			}
			i++;
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	3301      	adds	r3, #1
 8007832:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8007834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	429a      	cmp	r2, r3
 800783a:	d3e9      	bcc.n	8007810 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800783c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007840:	4618      	mov	r0, r3
 8007842:	3730      	adds	r7, #48	; 0x30
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08a      	sub	sp, #40	; 0x28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007852:	2300      	movs	r3, #0
 8007854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007864:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8007868:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800786c:	2b00      	cmp	r3, #0
 800786e:	d107      	bne.n	8007880 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8007870:	22c0      	movs	r2, #192	; 0xc0
 8007872:	2101      	movs	r1, #1
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7fc f9fb 	bl	8003c70 <VL53L0X_WrByte>
 800787a:	4603      	mov	r3, r0
 800787c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8007880:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007884:	2b00      	cmp	r3, #0
 8007886:	d108      	bne.n	800789a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007888:	f107 0308 	add.w	r3, r7, #8
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff fc48 	bl	8007124 <VL53L0X_PerformSingleRangingMeasurement>
 8007894:	4603      	mov	r3, r0
 8007896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800789a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d107      	bne.n	80078b2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80078a2:	2201      	movs	r2, #1
 80078a4:	21ff      	movs	r1, #255	; 0xff
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fc f9e2 	bl	8003c70 <VL53L0X_WrByte>
 80078ac:	4603      	mov	r3, r0
 80078ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80078b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d107      	bne.n	80078ca <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	21b6      	movs	r1, #182	; 0xb6
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7fc fab4 	bl	8003e2c <VL53L0X_RdWord>
 80078c4:	4603      	mov	r3, r0
 80078c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80078ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d107      	bne.n	80078e2 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80078d2:	2200      	movs	r2, #0
 80078d4:	21ff      	movs	r1, #255	; 0xff
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7fc f9ca 	bl	8003c70 <VL53L0X_WrByte>
 80078dc:	4603      	mov	r3, r0
 80078de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80078e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d112      	bne.n	8007910 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80078ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80078ee:	461a      	mov	r2, r3
 80078f0:	2101      	movs	r1, #1
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7fc f9bc 	bl	8003c70 <VL53L0X_WrByte>
 80078f8:	4603      	mov	r3, r0
 80078fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80078fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007902:	2b00      	cmp	r3, #0
 8007904:	d104      	bne.n	8007910 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800790c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8007910:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007914:	4618      	mov	r0, r3
 8007916:	3728      	adds	r7, #40	; 0x28
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800791c:	b590      	push	{r4, r7, lr}
 800791e:	b09d      	sub	sp, #116	; 0x74
 8007920:	af06      	add	r7, sp, #24
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007928:	2300      	movs	r3, #0
 800792a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800792e:	23b4      	movs	r3, #180	; 0xb4
 8007930:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8007934:	2303      	movs	r3, #3
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8007938:	232c      	movs	r3, #44	; 0x2c
 800793a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8007944:	2300      	movs	r3, #0
 8007946:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8007948:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800794c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800794e:	2300      	movs	r3, #0
 8007950:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8007952:	2300      	movs	r3, #0
 8007954:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8007956:	2306      	movs	r3, #6
 8007958:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800795e:	2300      	movs	r3, #0
 8007960:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8007962:	2300      	movs	r3, #0
 8007964:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8007968:	2300      	movs	r3, #0
 800796a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007970:	2300      	movs	r3, #0
 8007972:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8007980:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8007982:	2300      	movs	r3, #0
 8007984:	64bb      	str	r3, [r7, #72]	; 0x48
 8007986:	e009      	b.n	800799c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800798c:	4413      	add	r3, r2
 800798e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007998:	3301      	adds	r3, #1
 800799a:	64bb      	str	r3, [r7, #72]	; 0x48
 800799c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d3f1      	bcc.n	8007988 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80079a4:	2201      	movs	r2, #1
 80079a6:	21ff      	movs	r1, #255	; 0xff
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f7fc f961 	bl	8003c70 <VL53L0X_WrByte>
 80079ae:	4603      	mov	r3, r0
 80079b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80079b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d107      	bne.n	80079cc <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80079bc:	2200      	movs	r2, #0
 80079be:	214f      	movs	r1, #79	; 0x4f
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f7fc f955 	bl	8003c70 <VL53L0X_WrByte>
 80079c6:	4603      	mov	r3, r0
 80079c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80079cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d107      	bne.n	80079e4 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80079d4:	222c      	movs	r2, #44	; 0x2c
 80079d6:	214e      	movs	r1, #78	; 0x4e
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f7fc f949 	bl	8003c70 <VL53L0X_WrByte>
 80079de:	4603      	mov	r3, r0
 80079e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80079e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d107      	bne.n	80079fc <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80079ec:	2200      	movs	r2, #0
 80079ee:	21ff      	movs	r1, #255	; 0xff
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f7fc f93d 	bl	8003c70 <VL53L0X_WrByte>
 80079f6:	4603      	mov	r3, r0
 80079f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80079fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d109      	bne.n	8007a18 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8007a04:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007a08:	461a      	mov	r2, r3
 8007a0a:	21b6      	movs	r1, #182	; 0xb6
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f7fc f92f 	bl	8003c70 <VL53L0X_WrByte>
 8007a12:	4603      	mov	r3, r0
 8007a14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8007a18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d107      	bne.n	8007a30 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8007a20:	2200      	movs	r2, #0
 8007a22:	2180      	movs	r1, #128	; 0x80
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f7fc f923 	bl	8003c70 <VL53L0X_WrByte>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8007a30:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10a      	bne.n	8007a4e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8007a38:	f107 0210 	add.w	r2, r7, #16
 8007a3c:	f107 0111 	add.w	r1, r7, #17
 8007a40:	2300      	movs	r3, #0
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f000 fbbb 	bl	80081be <VL53L0X_perform_ref_calibration>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8007a4e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d121      	bne.n	8007a9a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8007a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a5c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8007a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a64:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8007a72:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007a76:	f107 0218 	add.w	r2, r7, #24
 8007a7a:	9204      	str	r2, [sp, #16]
 8007a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a7e:	9203      	str	r2, [sp, #12]
 8007a80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a82:	9202      	str	r2, [sp, #8]
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	4623      	mov	r3, r4
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f7ff fe5e 	bl	8007750 <enable_ref_spads>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007a9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d174      	bne.n	8007b8c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007aa6:	f107 0312 	add.w	r3, r7, #18
 8007aaa:	4619      	mov	r1, r3
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f7ff fecb 	bl	8007848 <perform_ref_signal_measurement>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007ab8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d161      	bne.n	8007b84 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8007ac0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007ac2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d25d      	bcs.n	8007b84 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8007ac8:	2300      	movs	r3, #0
 8007aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8007acc:	e009      	b.n	8007ae2 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8007adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ade:	3301      	adds	r3, #1
 8007ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d3f1      	bcc.n	8007ace <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8007aea:	e002      	b.n	8007af2 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8007aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aee:	3301      	adds	r3, #1
 8007af0:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8007af2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8007af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007af8:	4413      	add	r3, r2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff fdb0 	bl	8007660 <is_aperture>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d103      	bne.n	8007b0e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8007b06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d3ee      	bcc.n	8007aec <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8007b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b14:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8007b22:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007b26:	f107 0218 	add.w	r2, r7, #24
 8007b2a:	9204      	str	r2, [sp, #16]
 8007b2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b2e:	9203      	str	r2, [sp, #12]
 8007b30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b32:	9202      	str	r2, [sp, #8]
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	4623      	mov	r3, r4
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f7ff fe06 	bl	8007750 <enable_ref_spads>
 8007b44:	4603      	mov	r3, r0
 8007b46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007b4a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d11b      	bne.n	8007b8a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8007b56:	f107 0312 	add.w	r3, r7, #18
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f7ff fe73 	bl	8007848 <perform_ref_signal_measurement>
 8007b62:	4603      	mov	r3, r0
 8007b64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007b68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10c      	bne.n	8007b8a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007b70:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8007b72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d208      	bcs.n	8007b8a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8007b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b80:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8007b82:	e002      	b.n	8007b8a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b88:	e000      	b.n	8007b8c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8007b8a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007b8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f040 80af 	bne.w	8007cf4 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007b96:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007b98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	f240 80aa 	bls.w	8007cf4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8007ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8007bb0:	f107 031c 	add.w	r3, r7, #28
 8007bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f012 fc84 	bl	801a4c4 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8007bbc:	8a7b      	ldrh	r3, [r7, #18]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	bfb8      	it	lt
 8007bc8:	425b      	neglt	r3, r3
 8007bca:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8007bd2:	e086      	b.n	8007ce2 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8007bda:	f107 0314 	add.w	r3, r7, #20
 8007bde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007be2:	f7ff fcdf 	bl	80075a4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bec:	d103      	bne.n	8007bf6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007bee:	23ce      	movs	r3, #206	; 0xce
 8007bf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007bf4:	e07e      	b.n	8007cf4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8007bf6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7ff fd2e 	bl	8007660 <is_aperture>
 8007c04:	4603      	mov	r3, r0
 8007c06:	461a      	mov	r2, r3
 8007c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d003      	beq.n	8007c16 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8007c14:	e06e      	b.n	8007cf4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8007c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c18:	3301      	adds	r3, #1
 8007c1a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8007c26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7ff fd32 	bl	8007694 <enable_spad_bit>
 8007c30:	4603      	mov	r3, r0
 8007c32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007c36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10c      	bne.n	8007c58 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8007c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c40:	3301      	adds	r3, #1
 8007c42:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7ff fd59 	bl	8007704 <set_ref_spad_map>
 8007c52:	4603      	mov	r3, r0
 8007c54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8007c58:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d146      	bne.n	8007cee <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8007c60:	f107 0312 	add.w	r3, r7, #18
 8007c64:	4619      	mov	r1, r3
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7ff fdee 	bl	8007848 <perform_ref_signal_measurement>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007c72:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d13b      	bne.n	8007cf2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8007c7a:	8a7b      	ldrh	r3, [r7, #18]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	bfb8      	it	lt
 8007c86:	425b      	neglt	r3, r3
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8007c8a:	8a7b      	ldrh	r3, [r7, #18]
 8007c8c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d21c      	bcs.n	8007ccc <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d914      	bls.n	8007cc4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8007c9a:	f107 031c 	add.w	r3, r7, #28
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f7ff fd2f 	bl	8007704 <set_ref_spad_map>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8007cb2:	f107 011c 	add.w	r1, r7, #28
 8007cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f012 fc03 	bl	801a4c4 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8007cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cca:	e00a      	b.n	8007ce2 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8007cd6:	f107 031c 	add.w	r3, r7, #28
 8007cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f012 fbf1 	bl	801a4c4 <memcpy>
		while (!complete) {
 8007ce2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f43f af74 	beq.w	8007bd4 <VL53L0X_perform_ref_spad_management+0x2b8>
 8007cec:	e002      	b.n	8007cf4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007cee:	bf00      	nop
 8007cf0:	e000      	b.n	8007cf4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007cf2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007cf4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d115      	bne.n	8007d28 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d00:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8007d08:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	781a      	ldrb	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8007d28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	375c      	adds	r7, #92	; 0x5c
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd90      	pop	{r4, r7, pc}

08007d34 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8007d34:	b590      	push	{r4, r7, lr}
 8007d36:	b093      	sub	sp, #76	; 0x4c
 8007d38:	af06      	add	r7, sp, #24
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d42:	2300      	movs	r3, #0
 8007d44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8007d4c:	23b4      	movs	r3, #180	; 0xb4
 8007d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8007d52:	2306      	movs	r3, #6
 8007d54:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8007d56:	232c      	movs	r3, #44	; 0x2c
 8007d58:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	21ff      	movs	r1, #255	; 0xff
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f7fb ff86 	bl	8003c70 <VL53L0X_WrByte>
 8007d64:	4603      	mov	r3, r0
 8007d66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007d6a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d107      	bne.n	8007d82 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8007d72:	2200      	movs	r2, #0
 8007d74:	214f      	movs	r1, #79	; 0x4f
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f7fb ff7a 	bl	8003c70 <VL53L0X_WrByte>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007d82:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d107      	bne.n	8007d9a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8007d8a:	222c      	movs	r2, #44	; 0x2c
 8007d8c:	214e      	movs	r1, #78	; 0x4e
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f7fb ff6e 	bl	8003c70 <VL53L0X_WrByte>
 8007d94:	4603      	mov	r3, r0
 8007d96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007d9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d107      	bne.n	8007db2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007da2:	2200      	movs	r2, #0
 8007da4:	21ff      	movs	r1, #255	; 0xff
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f7fb ff62 	bl	8003c70 <VL53L0X_WrByte>
 8007dac:	4603      	mov	r3, r0
 8007dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007db2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d109      	bne.n	8007dce <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8007dba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	21b6      	movs	r1, #182	; 0xb6
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f7fb ff54 	bl	8003c70 <VL53L0X_WrByte>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8007dce:	2300      	movs	r3, #0
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd2:	e009      	b.n	8007de8 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007dde:	2200      	movs	r2, #0
 8007de0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	3301      	adds	r3, #1
 8007de6:	627b      	str	r3, [r7, #36]	; 0x24
 8007de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d3f1      	bcc.n	8007dd4 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d011      	beq.n	8007e1a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007df6:	e002      	b.n	8007dfe <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8007df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007dfe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	4413      	add	r3, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7ff fc2a 	bl	8007660 <is_aperture>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <VL53L0X_set_reference_spads+0xe6>
 8007e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d3ee      	bcc.n	8007df8 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8007e26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e2a:	79f9      	ldrb	r1, [r7, #7]
 8007e2c:	f107 0214 	add.w	r2, r7, #20
 8007e30:	9204      	str	r2, [sp, #16]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	9203      	str	r2, [sp, #12]
 8007e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e38:	9202      	str	r2, [sp, #8]
 8007e3a:	9301      	str	r3, [sp, #4]
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	4623      	mov	r3, r4
 8007e42:	4602      	mov	r2, r0
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f7ff fc83 	bl	8007750 <enable_ref_spads>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8007e50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10c      	bne.n	8007e72 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	79fa      	ldrb	r2, [r7, #7]
 8007e6e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8007e72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3734      	adds	r7, #52	; 0x34
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd90      	pop	{r4, r7, pc}

08007e7e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10a      	bne.n	8007eac <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8007e96:	78fb      	ldrb	r3, [r7, #3]
 8007e98:	f043 0301 	orr.w	r3, r3, #1
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fb fee4 	bl	8003c70 <VL53L0X_WrByte>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8007eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d104      	bne.n	8007ebe <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f9bf 	bl	8008238 <VL53L0X_measurement_poll_for_completion>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d105      	bne.n	8007ed2 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff fab5 	bl	8007438 <VL53L0X_ClearInterruptMask>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8007eda:	2200      	movs	r2, #0
 8007edc:	2100      	movs	r1, #0
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7fb fec6 	bl	8003c70 <VL53L0X_WrByte>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	73fb      	strb	r3, [r7, #15]

	return Status;
 8007ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	4608      	mov	r0, r1
 8007efe:	4611      	mov	r1, r2
 8007f00:	461a      	mov	r2, r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	70fb      	strb	r3, [r7, #3]
 8007f06:	460b      	mov	r3, r1
 8007f08:	70bb      	strb	r3, [r7, #2]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007f16:	2201      	movs	r2, #1
 8007f18:	21ff      	movs	r1, #255	; 0xff
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7fb fea8 	bl	8003c70 <VL53L0X_WrByte>
 8007f20:	4603      	mov	r3, r0
 8007f22:	461a      	mov	r2, r3
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7fb fe9e 	bl	8003c70 <VL53L0X_WrByte>
 8007f34:	4603      	mov	r3, r0
 8007f36:	461a      	mov	r2, r3
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007f3e:	2200      	movs	r2, #0
 8007f40:	21ff      	movs	r1, #255	; 0xff
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7fb fe94 	bl	8003c70 <VL53L0X_WrByte>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8007f52:	78fb      	ldrb	r3, [r7, #3]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d01e      	beq.n	8007f96 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8007f58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d009      	beq.n	8007f74 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	21cb      	movs	r1, #203	; 0xcb
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7fb ff37 	bl	8003dd8 <VL53L0X_RdByte>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007f74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d02a      	beq.n	8007fd2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8007f7c:	f107 030e 	add.w	r3, r7, #14
 8007f80:	461a      	mov	r2, r3
 8007f82:	21ee      	movs	r1, #238	; 0xee
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7fb ff27 	bl	8003dd8 <VL53L0X_RdByte>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	73fb      	strb	r3, [r7, #15]
 8007f94:	e01d      	b.n	8007fd2 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8007f96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8007f9e:	78bb      	ldrb	r3, [r7, #2]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	21cb      	movs	r1, #203	; 0xcb
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7fb fe63 	bl	8003c70 <VL53L0X_WrByte>
 8007faa:	4603      	mov	r3, r0
 8007fac:	461a      	mov	r2, r3
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007fb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00a      	beq.n	8007fd2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8007fbc:	787b      	ldrb	r3, [r7, #1]
 8007fbe:	2280      	movs	r2, #128	; 0x80
 8007fc0:	21ee      	movs	r1, #238	; 0xee
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7fb fed4 	bl	8003d70 <VL53L0X_UpdateByte>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	461a      	mov	r2, r3
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	21ff      	movs	r1, #255	; 0xff
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7fb fe4a 	bl	8003c70 <VL53L0X_WrByte>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	461a      	mov	r2, r3
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	2100      	movs	r1, #0
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7fb fe40 	bl	8003c70 <VL53L0X_WrByte>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	21ff      	movs	r1, #255	; 0xff
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7fb fe36 	bl	8003c70 <VL53L0X_WrByte>
 8008004:	4603      	mov	r3, r0
 8008006:	461a      	mov	r2, r3
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	4313      	orrs	r3, r2
 800800c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	f023 0310 	bic.w	r3, r3, #16
 8008014:	b2da      	uxtb	r2, r3
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	701a      	strb	r2, [r3, #0]

	return Status;
 800801a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b08a      	sub	sp, #40	; 0x28
 800802a:	af04      	add	r7, sp, #16
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	4611      	mov	r1, r2
 8008032:	461a      	mov	r2, r3
 8008034:	460b      	mov	r3, r1
 8008036:	71fb      	strb	r3, [r7, #7]
 8008038:	4613      	mov	r3, r2
 800803a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800803c:	2300      	movs	r3, #0
 800803e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008040:	2300      	movs	r3, #0
 8008042:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008048:	2300      	movs	r3, #0
 800804a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008050:	79bb      	ldrb	r3, [r7, #6]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800805c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800805e:	2201      	movs	r2, #1
 8008060:	2101      	movs	r1, #1
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f7fb fe04 	bl	8003c70 <VL53L0X_WrByte>
 8008068:	4603      	mov	r3, r0
 800806a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800806c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d105      	bne.n	8008080 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8008074:	2140      	movs	r1, #64	; 0x40
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff ff01 	bl	8007e7e <VL53L0X_perform_single_ref_calibration>
 800807c:	4603      	mov	r3, r0
 800807e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008080:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d115      	bne.n	80080b4 <VL53L0X_perform_vhv_calibration+0x8e>
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d112      	bne.n	80080b4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800808e:	7d39      	ldrb	r1, [r7, #20]
 8008090:	7d7a      	ldrb	r2, [r7, #21]
 8008092:	2300      	movs	r3, #0
 8008094:	9303      	str	r3, [sp, #12]
 8008096:	2301      	movs	r3, #1
 8008098:	9302      	str	r3, [sp, #8]
 800809a:	f107 0313 	add.w	r3, r7, #19
 800809e:	9301      	str	r3, [sp, #4]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	460b      	mov	r3, r1
 80080a6:	2101      	movs	r1, #1
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f7ff ff23 	bl	8007ef4 <VL53L0X_ref_calibration_io>
 80080ae:	4603      	mov	r3, r0
 80080b0:	75fb      	strb	r3, [r7, #23]
 80080b2:	e002      	b.n	80080ba <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2200      	movs	r2, #0
 80080b8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80080ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d112      	bne.n	80080e8 <VL53L0X_perform_vhv_calibration+0xc2>
 80080c2:	79bb      	ldrb	r3, [r7, #6]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00f      	beq.n	80080e8 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80080c8:	7dbb      	ldrb	r3, [r7, #22]
 80080ca:	461a      	mov	r2, r3
 80080cc:	2101      	movs	r1, #1
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f7fb fdce 	bl	8003c70 <VL53L0X_WrByte>
 80080d4:	4603      	mov	r3, r0
 80080d6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80080d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d103      	bne.n	80080e8 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	7dba      	ldrb	r2, [r7, #22]
 80080e4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80080e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b08a      	sub	sp, #40	; 0x28
 80080f8:	af04      	add	r7, sp, #16
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	4611      	mov	r1, r2
 8008100:	461a      	mov	r2, r3
 8008102:	460b      	mov	r3, r1
 8008104:	71fb      	strb	r3, [r7, #7]
 8008106:	4613      	mov	r3, r2
 8008108:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800810a:	2300      	movs	r3, #0
 800810c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800810e:	2300      	movs	r3, #0
 8008110:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800811a:	79bb      	ldrb	r3, [r7, #6]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008126:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8008128:	2202      	movs	r2, #2
 800812a:	2101      	movs	r1, #1
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7fb fd9f 	bl	8003c70 <VL53L0X_WrByte>
 8008132:	4603      	mov	r3, r0
 8008134:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008136:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d105      	bne.n	800814a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800813e:	2100      	movs	r1, #0
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f7ff fe9c 	bl	8007e7e <VL53L0X_perform_single_ref_calibration>
 8008146:	4603      	mov	r3, r0
 8008148:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800814a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d115      	bne.n	800817e <VL53L0X_perform_phase_calibration+0x8a>
 8008152:	79fb      	ldrb	r3, [r7, #7]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d112      	bne.n	800817e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008158:	7d39      	ldrb	r1, [r7, #20]
 800815a:	7d7a      	ldrb	r2, [r7, #21]
 800815c:	2301      	movs	r3, #1
 800815e:	9303      	str	r3, [sp, #12]
 8008160:	2300      	movs	r3, #0
 8008162:	9302      	str	r3, [sp, #8]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	9301      	str	r3, [sp, #4]
 8008168:	f107 0313 	add.w	r3, r7, #19
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	460b      	mov	r3, r1
 8008170:	2101      	movs	r1, #1
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f7ff febe 	bl	8007ef4 <VL53L0X_ref_calibration_io>
 8008178:	4603      	mov	r3, r0
 800817a:	75fb      	strb	r3, [r7, #23]
 800817c:	e002      	b.n	8008184 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d112      	bne.n	80081b2 <VL53L0X_perform_phase_calibration+0xbe>
 800818c:	79bb      	ldrb	r3, [r7, #6]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00f      	beq.n	80081b2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008192:	7dbb      	ldrb	r3, [r7, #22]
 8008194:	461a      	mov	r2, r3
 8008196:	2101      	movs	r1, #1
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f7fb fd69 	bl	8003c70 <VL53L0X_WrByte>
 800819e:	4603      	mov	r3, r0
 80081a0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80081a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d103      	bne.n	80081b2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	7dba      	ldrb	r2, [r7, #22]
 80081ae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80081b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b086      	sub	sp, #24
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	607a      	str	r2, [r7, #4]
 80081ca:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081cc:	2300      	movs	r3, #0
 80081ce:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80081da:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80081dc:	78fa      	ldrb	r2, [r7, #3]
 80081de:	2300      	movs	r3, #0
 80081e0:	68b9      	ldr	r1, [r7, #8]
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f7ff ff1f 	bl	8008026 <VL53L0X_perform_vhv_calibration>
 80081e8:	4603      	mov	r3, r0
 80081ea:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80081ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d107      	bne.n	8008204 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80081f4:	78fa      	ldrb	r2, [r7, #3]
 80081f6:	2300      	movs	r3, #0
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f7ff ff7a 	bl	80080f4 <VL53L0X_perform_phase_calibration>
 8008200:	4603      	mov	r3, r0
 8008202:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008204:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10f      	bne.n	800822c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800820c:	7dbb      	ldrb	r3, [r7, #22]
 800820e:	461a      	mov	r2, r3
 8008210:	2101      	movs	r1, #1
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f7fb fd2c 	bl	8003c70 <VL53L0X_WrByte>
 8008218:	4603      	mov	r3, r0
 800821a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800821c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d103      	bne.n	800822c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	7dba      	ldrb	r2, [r7, #22]
 8008228:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800822c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008240:	2300      	movs	r3, #0
 8008242:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8008248:	2300      	movs	r3, #0
 800824a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800824c:	f107 030f 	add.w	r3, r7, #15
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7fe fe02 	bl	8006e5c <VL53L0X_GetMeasurementDataReady>
 8008258:	4603      	mov	r3, r0
 800825a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800825c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d110      	bne.n	8008286 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d00f      	beq.n	800828a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	3301      	adds	r3, #1
 800826e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008276:	d302      	bcc.n	800827e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008278:	23f9      	movs	r3, #249	; 0xf9
 800827a:	75fb      	strb	r3, [r7, #23]
			break;
 800827c:	e006      	b.n	800828c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7fb fe48 	bl	8003f14 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008284:	e7e2      	b.n	800824c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8008286:	bf00      	nop
 8008288:	e000      	b.n	800828c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800828a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800828c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3718      	adds	r7, #24
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	3301      	adds	r3, #1
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80082be:	b480      	push	{r7}
 80082c0:	b085      	sub	sp, #20
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80082ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082ce:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80082d0:	e002      	b.n	80082d8 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	089b      	lsrs	r3, r3, #2
 80082d6:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d8f8      	bhi.n	80082d2 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80082e0:	e017      	b.n	8008312 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	4413      	add	r3, r2
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d30b      	bcc.n	8008306 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	4413      	add	r3, r2
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	085b      	lsrs	r3, r3, #1
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	4413      	add	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	e002      	b.n	800830c <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	085b      	lsrs	r3, r3, #1
 800830a:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	089b      	lsrs	r3, r3, #2
 8008310:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1e4      	bne.n	80082e2 <VL53L0X_isqrt+0x24>
	}

	return res;
 8008318:	68fb      	ldr	r3, [r7, #12]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b086      	sub	sp, #24
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800832e:	2300      	movs	r3, #0
 8008330:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8008332:	2200      	movs	r2, #0
 8008334:	2183      	movs	r1, #131	; 0x83
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7fb fc9a 	bl	8003c70 <VL53L0X_WrByte>
 800833c:	4603      	mov	r3, r0
 800833e:	461a      	mov	r2, r3
 8008340:	7dfb      	ldrb	r3, [r7, #23]
 8008342:	4313      	orrs	r3, r2
 8008344:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8008346:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d11e      	bne.n	800838c <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008352:	f107 030f 	add.w	r3, r7, #15
 8008356:	461a      	mov	r2, r3
 8008358:	2183      	movs	r1, #131	; 0x83
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7fb fd3c 	bl	8003dd8 <VL53L0X_RdByte>
 8008360:	4603      	mov	r3, r0
 8008362:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10a      	bne.n	8008380 <VL53L0X_device_read_strobe+0x5a>
 800836a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d106      	bne.n	8008380 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	3301      	adds	r3, #1
 8008376:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800837e:	d3e8      	bcc.n	8008352 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008386:	d301      	bcc.n	800838c <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008388:	23f9      	movs	r3, #249	; 0xf9
 800838a:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800838c:	2201      	movs	r2, #1
 800838e:	2183      	movs	r1, #131	; 0x83
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7fb fc6d 	bl	8003c70 <VL53L0X_WrByte>
 8008396:	4603      	mov	r3, r0
 8008398:	461a      	mov	r2, r3
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	4313      	orrs	r3, r2
 800839e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80083a0:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b098      	sub	sp, #96	; 0x60
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083b8:	2300      	movs	r3, #0
 80083ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80083dc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80083e0:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80083f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80083f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80083fc:	2b07      	cmp	r3, #7
 80083fe:	f000 8408 	beq.w	8008c12 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008402:	2201      	movs	r2, #1
 8008404:	2180      	movs	r1, #128	; 0x80
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7fb fc32 	bl	8003c70 <VL53L0X_WrByte>
 800840c:	4603      	mov	r3, r0
 800840e:	461a      	mov	r2, r3
 8008410:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008414:	4313      	orrs	r3, r2
 8008416:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800841a:	2201      	movs	r2, #1
 800841c:	21ff      	movs	r1, #255	; 0xff
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7fb fc26 	bl	8003c70 <VL53L0X_WrByte>
 8008424:	4603      	mov	r3, r0
 8008426:	461a      	mov	r2, r3
 8008428:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800842c:	4313      	orrs	r3, r2
 800842e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008432:	2200      	movs	r2, #0
 8008434:	2100      	movs	r1, #0
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7fb fc1a 	bl	8003c70 <VL53L0X_WrByte>
 800843c:	4603      	mov	r3, r0
 800843e:	461a      	mov	r2, r3
 8008440:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008444:	4313      	orrs	r3, r2
 8008446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800844a:	2206      	movs	r2, #6
 800844c:	21ff      	movs	r1, #255	; 0xff
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7fb fc0e 	bl	8003c70 <VL53L0X_WrByte>
 8008454:	4603      	mov	r3, r0
 8008456:	461a      	mov	r2, r3
 8008458:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800845c:	4313      	orrs	r3, r2
 800845e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008462:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008466:	461a      	mov	r2, r3
 8008468:	2183      	movs	r1, #131	; 0x83
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7fb fcb4 	bl	8003dd8 <VL53L0X_RdByte>
 8008470:	4603      	mov	r3, r0
 8008472:	461a      	mov	r2, r3
 8008474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008478:	4313      	orrs	r3, r2
 800847a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800847e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008482:	f043 0304 	orr.w	r3, r3, #4
 8008486:	b2db      	uxtb	r3, r3
 8008488:	461a      	mov	r2, r3
 800848a:	2183      	movs	r1, #131	; 0x83
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f7fb fbef 	bl	8003c70 <VL53L0X_WrByte>
 8008492:	4603      	mov	r3, r0
 8008494:	461a      	mov	r2, r3
 8008496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800849a:	4313      	orrs	r3, r2
 800849c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80084a0:	2207      	movs	r2, #7
 80084a2:	21ff      	movs	r1, #255	; 0xff
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7fb fbe3 	bl	8003c70 <VL53L0X_WrByte>
 80084aa:	4603      	mov	r3, r0
 80084ac:	461a      	mov	r2, r3
 80084ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084b2:	4313      	orrs	r3, r2
 80084b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80084b8:	2201      	movs	r2, #1
 80084ba:	2181      	movs	r1, #129	; 0x81
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7fb fbd7 	bl	8003c70 <VL53L0X_WrByte>
 80084c2:	4603      	mov	r3, r0
 80084c4:	461a      	mov	r2, r3
 80084c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084ca:	4313      	orrs	r3, r2
 80084cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7fb fd1f 	bl	8003f14 <VL53L0X_PollingDelay>
 80084d6:	4603      	mov	r3, r0
 80084d8:	461a      	mov	r2, r3
 80084da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084de:	4313      	orrs	r3, r2
 80084e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80084e4:	2201      	movs	r2, #1
 80084e6:	2180      	movs	r1, #128	; 0x80
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7fb fbc1 	bl	8003c70 <VL53L0X_WrByte>
 80084ee:	4603      	mov	r3, r0
 80084f0:	461a      	mov	r2, r3
 80084f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084f6:	4313      	orrs	r3, r2
 80084f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80084fc:	78fb      	ldrb	r3, [r7, #3]
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 8098 	beq.w	8008638 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008508:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800850c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008510:	2b00      	cmp	r3, #0
 8008512:	f040 8091 	bne.w	8008638 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8008516:	226b      	movs	r2, #107	; 0x6b
 8008518:	2194      	movs	r1, #148	; 0x94
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7fb fba8 	bl	8003c70 <VL53L0X_WrByte>
 8008520:	4603      	mov	r3, r0
 8008522:	461a      	mov	r2, r3
 8008524:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008528:	4313      	orrs	r3, r2
 800852a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7ff fef9 	bl	8008326 <VL53L0X_device_read_strobe>
 8008534:	4603      	mov	r3, r0
 8008536:	461a      	mov	r2, r3
 8008538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800853c:	4313      	orrs	r3, r2
 800853e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008546:	461a      	mov	r2, r3
 8008548:	2190      	movs	r1, #144	; 0x90
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7fb fca6 	bl	8003e9c <VL53L0X_RdDWord>
 8008550:	4603      	mov	r3, r0
 8008552:	461a      	mov	r2, r3
 8008554:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008558:	4313      	orrs	r3, r2
 800855a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	0a1b      	lsrs	r3, r3, #8
 8008562:	b2db      	uxtb	r3, r3
 8008564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008568:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	0bdb      	lsrs	r3, r3, #15
 8008570:	b2db      	uxtb	r3, r3
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800857a:	2224      	movs	r2, #36	; 0x24
 800857c:	2194      	movs	r1, #148	; 0x94
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7fb fb76 	bl	8003c70 <VL53L0X_WrByte>
 8008584:	4603      	mov	r3, r0
 8008586:	461a      	mov	r2, r3
 8008588:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800858c:	4313      	orrs	r3, r2
 800858e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff fec7 	bl	8008326 <VL53L0X_device_read_strobe>
 8008598:	4603      	mov	r3, r0
 800859a:	461a      	mov	r2, r3
 800859c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085a0:	4313      	orrs	r3, r2
 80085a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80085a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085aa:	461a      	mov	r2, r3
 80085ac:	2190      	movs	r1, #144	; 0x90
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7fb fc74 	bl	8003e9c <VL53L0X_RdDWord>
 80085b4:	4603      	mov	r3, r0
 80085b6:	461a      	mov	r2, r3
 80085b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085bc:	4313      	orrs	r3, r2
 80085be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	0e1b      	lsrs	r3, r3, #24
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	0c1b      	lsrs	r3, r3, #16
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	0a1b      	lsrs	r3, r3, #8
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80085e0:	2225      	movs	r2, #37	; 0x25
 80085e2:	2194      	movs	r1, #148	; 0x94
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7fb fb43 	bl	8003c70 <VL53L0X_WrByte>
 80085ea:	4603      	mov	r3, r0
 80085ec:	461a      	mov	r2, r3
 80085ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085f2:	4313      	orrs	r3, r2
 80085f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff fe94 	bl	8008326 <VL53L0X_device_read_strobe>
 80085fe:	4603      	mov	r3, r0
 8008600:	461a      	mov	r2, r3
 8008602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008606:	4313      	orrs	r3, r2
 8008608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800860c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008610:	461a      	mov	r2, r3
 8008612:	2190      	movs	r1, #144	; 0x90
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7fb fc41 	bl	8003e9c <VL53L0X_RdDWord>
 800861a:	4603      	mov	r3, r0
 800861c:	461a      	mov	r2, r3
 800861e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008622:	4313      	orrs	r3, r2
 8008624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8008628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862a:	0e1b      	lsrs	r3, r3, #24
 800862c:	b2db      	uxtb	r3, r3
 800862e:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	0c1b      	lsrs	r3, r3, #16
 8008634:	b2db      	uxtb	r3, r3
 8008636:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8008638:	78fb      	ldrb	r3, [r7, #3]
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 8189 	beq.w	8008956 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008644:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008648:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800864c:	2b00      	cmp	r3, #0
 800864e:	f040 8182 	bne.w	8008956 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8008652:	2202      	movs	r2, #2
 8008654:	2194      	movs	r1, #148	; 0x94
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7fb fb0a 	bl	8003c70 <VL53L0X_WrByte>
 800865c:	4603      	mov	r3, r0
 800865e:	461a      	mov	r2, r3
 8008660:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008664:	4313      	orrs	r3, r2
 8008666:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff fe5b 	bl	8008326 <VL53L0X_device_read_strobe>
 8008670:	4603      	mov	r3, r0
 8008672:	461a      	mov	r2, r3
 8008674:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008678:	4313      	orrs	r3, r2
 800867a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800867e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008682:	461a      	mov	r2, r3
 8008684:	2190      	movs	r1, #144	; 0x90
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7fb fba6 	bl	8003dd8 <VL53L0X_RdByte>
 800868c:	4603      	mov	r3, r0
 800868e:	461a      	mov	r2, r3
 8008690:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008694:	4313      	orrs	r3, r2
 8008696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800869a:	227b      	movs	r2, #123	; 0x7b
 800869c:	2194      	movs	r1, #148	; 0x94
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7fb fae6 	bl	8003c70 <VL53L0X_WrByte>
 80086a4:	4603      	mov	r3, r0
 80086a6:	461a      	mov	r2, r3
 80086a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086ac:	4313      	orrs	r3, r2
 80086ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7ff fe37 	bl	8008326 <VL53L0X_device_read_strobe>
 80086b8:	4603      	mov	r3, r0
 80086ba:	461a      	mov	r2, r3
 80086bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086c0:	4313      	orrs	r3, r2
 80086c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80086c6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80086ca:	461a      	mov	r2, r3
 80086cc:	2190      	movs	r1, #144	; 0x90
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7fb fb82 	bl	8003dd8 <VL53L0X_RdByte>
 80086d4:	4603      	mov	r3, r0
 80086d6:	461a      	mov	r2, r3
 80086d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086dc:	4313      	orrs	r3, r2
 80086de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80086e2:	2277      	movs	r2, #119	; 0x77
 80086e4:	2194      	movs	r1, #148	; 0x94
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7fb fac2 	bl	8003c70 <VL53L0X_WrByte>
 80086ec:	4603      	mov	r3, r0
 80086ee:	461a      	mov	r2, r3
 80086f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086f4:	4313      	orrs	r3, r2
 80086f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff fe13 	bl	8008326 <VL53L0X_device_read_strobe>
 8008700:	4603      	mov	r3, r0
 8008702:	461a      	mov	r2, r3
 8008704:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008708:	4313      	orrs	r3, r2
 800870a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800870e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008712:	461a      	mov	r2, r3
 8008714:	2190      	movs	r1, #144	; 0x90
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7fb fbc0 	bl	8003e9c <VL53L0X_RdDWord>
 800871c:	4603      	mov	r3, r0
 800871e:	461a      	mov	r2, r3
 8008720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008724:	4313      	orrs	r3, r2
 8008726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	0e5b      	lsrs	r3, r3, #25
 800872e:	b2db      	uxtb	r3, r3
 8008730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008734:	b2db      	uxtb	r3, r3
 8008736:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8008738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873a:	0c9b      	lsrs	r3, r3, #18
 800873c:	b2db      	uxtb	r3, r3
 800873e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008742:	b2db      	uxtb	r3, r3
 8008744:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8008746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008748:	0adb      	lsrs	r3, r3, #11
 800874a:	b2db      	uxtb	r3, r3
 800874c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008750:	b2db      	uxtb	r3, r3
 8008752:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8008754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008756:	091b      	lsrs	r3, r3, #4
 8008758:	b2db      	uxtb	r3, r3
 800875a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800875e:	b2db      	uxtb	r3, r3
 8008760:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	b2db      	uxtb	r3, r3
 8008766:	00db      	lsls	r3, r3, #3
 8008768:	b2db      	uxtb	r3, r3
 800876a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800876e:	b2db      	uxtb	r3, r3
 8008770:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8008774:	2278      	movs	r2, #120	; 0x78
 8008776:	2194      	movs	r1, #148	; 0x94
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7fb fa79 	bl	8003c70 <VL53L0X_WrByte>
 800877e:	4603      	mov	r3, r0
 8008780:	461a      	mov	r2, r3
 8008782:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008786:	4313      	orrs	r3, r2
 8008788:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff fdca 	bl	8008326 <VL53L0X_device_read_strobe>
 8008792:	4603      	mov	r3, r0
 8008794:	461a      	mov	r2, r3
 8008796:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800879a:	4313      	orrs	r3, r2
 800879c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80087a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087a4:	461a      	mov	r2, r3
 80087a6:	2190      	movs	r1, #144	; 0x90
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7fb fb77 	bl	8003e9c <VL53L0X_RdDWord>
 80087ae:	4603      	mov	r3, r0
 80087b0:	461a      	mov	r2, r3
 80087b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087b6:	4313      	orrs	r3, r2
 80087b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80087bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087be:	0f5b      	lsrs	r3, r3, #29
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c6:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80087c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087cc:	4413      	add	r3, r2
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	0d9b      	lsrs	r3, r3, #22
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80087e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e2:	0bdb      	lsrs	r3, r3, #15
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	0a1b      	lsrs	r3, r3, #8
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80087fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fe:	085b      	lsrs	r3, r3, #1
 8008800:	b2db      	uxtb	r3, r3
 8008802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008806:	b2db      	uxtb	r3, r3
 8008808:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	b2db      	uxtb	r3, r3
 800880e:	019b      	lsls	r3, r3, #6
 8008810:	b2db      	uxtb	r3, r3
 8008812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008816:	b2db      	uxtb	r3, r3
 8008818:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800881c:	2279      	movs	r2, #121	; 0x79
 800881e:	2194      	movs	r1, #148	; 0x94
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7fb fa25 	bl	8003c70 <VL53L0X_WrByte>
 8008826:	4603      	mov	r3, r0
 8008828:	461a      	mov	r2, r3
 800882a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800882e:	4313      	orrs	r3, r2
 8008830:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7ff fd76 	bl	8008326 <VL53L0X_device_read_strobe>
 800883a:	4603      	mov	r3, r0
 800883c:	461a      	mov	r2, r3
 800883e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008842:	4313      	orrs	r3, r2
 8008844:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008848:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800884c:	461a      	mov	r2, r3
 800884e:	2190      	movs	r1, #144	; 0x90
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7fb fb23 	bl	8003e9c <VL53L0X_RdDWord>
 8008856:	4603      	mov	r3, r0
 8008858:	461a      	mov	r2, r3
 800885a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800885e:	4313      	orrs	r3, r2
 8008860:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8008864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008866:	0e9b      	lsrs	r3, r3, #26
 8008868:	b2db      	uxtb	r3, r3
 800886a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800886e:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008870:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008874:	4413      	add	r3, r2
 8008876:	b2db      	uxtb	r3, r3
 8008878:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	0cdb      	lsrs	r3, r3, #19
 800887e:	b2db      	uxtb	r3, r3
 8008880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008884:	b2db      	uxtb	r3, r3
 8008886:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	0b1b      	lsrs	r3, r3, #12
 800888c:	b2db      	uxtb	r3, r3
 800888e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008892:	b2db      	uxtb	r3, r3
 8008894:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	095b      	lsrs	r3, r3, #5
 800889a:	b2db      	uxtb	r3, r3
 800889c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80088a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80088b6:	227a      	movs	r2, #122	; 0x7a
 80088b8:	2194      	movs	r1, #148	; 0x94
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7fb f9d8 	bl	8003c70 <VL53L0X_WrByte>
 80088c0:	4603      	mov	r3, r0
 80088c2:	461a      	mov	r2, r3
 80088c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088c8:	4313      	orrs	r3, r2
 80088ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff fd29 	bl	8008326 <VL53L0X_device_read_strobe>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088dc:	4313      	orrs	r3, r2
 80088de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80088e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088e6:	461a      	mov	r2, r3
 80088e8:	2190      	movs	r1, #144	; 0x90
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7fb fad6 	bl	8003e9c <VL53L0X_RdDWord>
 80088f0:	4603      	mov	r3, r0
 80088f2:	461a      	mov	r2, r3
 80088f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088f8:	4313      	orrs	r3, r2
 80088fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	0f9b      	lsrs	r3, r3, #30
 8008902:	b2db      	uxtb	r3, r3
 8008904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008908:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800890a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800890e:	4413      	add	r3, r2
 8008910:	b2db      	uxtb	r3, r3
 8008912:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8008914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008916:	0ddb      	lsrs	r3, r3, #23
 8008918:	b2db      	uxtb	r3, r3
 800891a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800891e:	b2db      	uxtb	r3, r3
 8008920:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	0c1b      	lsrs	r3, r3, #16
 8008926:	b2db      	uxtb	r3, r3
 8008928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800892c:	b2db      	uxtb	r3, r3
 800892e:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8008930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008932:	0a5b      	lsrs	r3, r3, #9
 8008934:	b2db      	uxtb	r3, r3
 8008936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800893a:	b2db      	uxtb	r3, r3
 800893c:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	089b      	lsrs	r3, r3, #2
 8008944:	b2db      	uxtb	r3, r3
 8008946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800894a:	b2db      	uxtb	r3, r3
 800894c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8008950:	2300      	movs	r3, #0
 8008952:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8008956:	78fb      	ldrb	r3, [r7, #3]
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 80f1 	beq.w	8008b44 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008962:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008966:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800896a:	2b00      	cmp	r3, #0
 800896c:	f040 80ea 	bne.w	8008b44 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008970:	227b      	movs	r2, #123	; 0x7b
 8008972:	2194      	movs	r1, #148	; 0x94
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7fb f97b 	bl	8003c70 <VL53L0X_WrByte>
 800897a:	4603      	mov	r3, r0
 800897c:	461a      	mov	r2, r3
 800897e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008982:	4313      	orrs	r3, r2
 8008984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff fccc 	bl	8008326 <VL53L0X_device_read_strobe>
 800898e:	4603      	mov	r3, r0
 8008990:	461a      	mov	r2, r3
 8008992:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008996:	4313      	orrs	r3, r2
 8008998:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800899c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089a0:	461a      	mov	r2, r3
 80089a2:	2190      	movs	r1, #144	; 0x90
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7fb fa79 	bl	8003e9c <VL53L0X_RdDWord>
 80089aa:	4603      	mov	r3, r0
 80089ac:	461a      	mov	r2, r3
 80089ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089b2:	4313      	orrs	r3, r2
 80089b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80089b8:	227c      	movs	r2, #124	; 0x7c
 80089ba:	2194      	movs	r1, #148	; 0x94
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7fb f957 	bl	8003c70 <VL53L0X_WrByte>
 80089c2:	4603      	mov	r3, r0
 80089c4:	461a      	mov	r2, r3
 80089c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089ca:	4313      	orrs	r3, r2
 80089cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff fca8 	bl	8008326 <VL53L0X_device_read_strobe>
 80089d6:	4603      	mov	r3, r0
 80089d8:	461a      	mov	r2, r3
 80089da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089de:	4313      	orrs	r3, r2
 80089e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80089e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089e8:	461a      	mov	r2, r3
 80089ea:	2190      	movs	r1, #144	; 0x90
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7fb fa55 	bl	8003e9c <VL53L0X_RdDWord>
 80089f2:	4603      	mov	r3, r0
 80089f4:	461a      	mov	r2, r3
 80089f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089fa:	4313      	orrs	r3, r2
 80089fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8008a00:	2273      	movs	r2, #115	; 0x73
 8008a02:	2194      	movs	r1, #148	; 0x94
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7fb f933 	bl	8003c70 <VL53L0X_WrByte>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a12:	4313      	orrs	r3, r2
 8008a14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff fc84 	bl	8008326 <VL53L0X_device_read_strobe>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	461a      	mov	r2, r3
 8008a22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a26:	4313      	orrs	r3, r2
 8008a28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008a2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a30:	461a      	mov	r2, r3
 8008a32:	2190      	movs	r1, #144	; 0x90
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7fb fa31 	bl	8003e9c <VL53L0X_RdDWord>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a42:	4313      	orrs	r3, r2
 8008a44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8008a50:	2274      	movs	r2, #116	; 0x74
 8008a52:	2194      	movs	r1, #148	; 0x94
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7fb f90b 	bl	8003c70 <VL53L0X_WrByte>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a62:	4313      	orrs	r3, r2
 8008a64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7ff fc5c 	bl	8008326 <VL53L0X_device_read_strobe>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	461a      	mov	r2, r3
 8008a72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a76:	4313      	orrs	r3, r2
 8008a78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008a7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a80:	461a      	mov	r2, r3
 8008a82:	2190      	movs	r1, #144	; 0x90
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7fb fa09 	bl	8003e9c <VL53L0X_RdDWord>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a92:	4313      	orrs	r3, r2
 8008a94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8008a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9a:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8008a9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8008aa2:	2275      	movs	r2, #117	; 0x75
 8008aa4:	2194      	movs	r1, #148	; 0x94
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7fb f8e2 	bl	8003c70 <VL53L0X_WrByte>
 8008aac:	4603      	mov	r3, r0
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7ff fc33 	bl	8008326 <VL53L0X_device_read_strobe>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008ace:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	2190      	movs	r1, #144	; 0x90
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7fb f9e0 	bl	8003e9c <VL53L0X_RdDWord>
 8008adc:	4603      	mov	r3, r0
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8008af2:	2276      	movs	r2, #118	; 0x76
 8008af4:	2194      	movs	r1, #148	; 0x94
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7fb f8ba 	bl	8003c70 <VL53L0X_WrByte>
 8008afc:	4603      	mov	r3, r0
 8008afe:	461a      	mov	r2, r3
 8008b00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b04:	4313      	orrs	r3, r2
 8008b06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff fc0b 	bl	8008326 <VL53L0X_device_read_strobe>
 8008b10:	4603      	mov	r3, r0
 8008b12:	461a      	mov	r2, r3
 8008b14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008b1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b22:	461a      	mov	r2, r3
 8008b24:	2190      	movs	r1, #144	; 0x90
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7fb f9b8 	bl	8003e9c <VL53L0X_RdDWord>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b34:	4313      	orrs	r3, r2
 8008b36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8008b3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b40:	4313      	orrs	r3, r2
 8008b42:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8008b44:	2200      	movs	r2, #0
 8008b46:	2181      	movs	r1, #129	; 0x81
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7fb f891 	bl	8003c70 <VL53L0X_WrByte>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	461a      	mov	r2, r3
 8008b52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b56:	4313      	orrs	r3, r2
 8008b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008b5c:	2206      	movs	r2, #6
 8008b5e:	21ff      	movs	r1, #255	; 0xff
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7fb f885 	bl	8003c70 <VL53L0X_WrByte>
 8008b66:	4603      	mov	r3, r0
 8008b68:	461a      	mov	r2, r3
 8008b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008b74:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008b78:	461a      	mov	r2, r3
 8008b7a:	2183      	movs	r1, #131	; 0x83
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7fb f92b 	bl	8003dd8 <VL53L0X_RdByte>
 8008b82:	4603      	mov	r3, r0
 8008b84:	461a      	mov	r2, r3
 8008b86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8008b90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b94:	f023 0304 	bic.w	r3, r3, #4
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	2183      	movs	r1, #131	; 0x83
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7fb f866 	bl	8003c70 <VL53L0X_WrByte>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bac:	4313      	orrs	r3, r2
 8008bae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	21ff      	movs	r1, #255	; 0xff
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7fb f85a 	bl	8003c70 <VL53L0X_WrByte>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008bca:	2201      	movs	r2, #1
 8008bcc:	2100      	movs	r1, #0
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7fb f84e 	bl	8003c70 <VL53L0X_WrByte>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008be2:	2200      	movs	r2, #0
 8008be4:	21ff      	movs	r1, #255	; 0xff
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7fb f842 	bl	8003c70 <VL53L0X_WrByte>
 8008bec:	4603      	mov	r3, r0
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	2180      	movs	r1, #128	; 0x80
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7fb f836 	bl	8003c70 <VL53L0X_WrByte>
 8008c04:	4603      	mov	r3, r0
 8008c06:	461a      	mov	r2, r3
 8008c08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008c12:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f040 808f 	bne.w	8008d3a <VL53L0X_get_info_from_device+0x98e>
 8008c1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c20:	2b07      	cmp	r3, #7
 8008c22:	f000 808a 	beq.w	8008d3a <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8008c26:	78fb      	ldrb	r3, [r7, #3]
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d024      	beq.n	8008c7a <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008c30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c34:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d11e      	bne.n	8008c7a <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008c42:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8008c4c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008c50:	2300      	movs	r3, #0
 8008c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c54:	e00e      	b.n	8008c74 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8008c56:	f107 0208 	add.w	r2, r7, #8
 8008c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c5c:	4413      	add	r3, r2
 8008c5e:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008c6a:	460a      	mov	r2, r1
 8008c6c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c70:	3301      	adds	r3, #1
 8008c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c76:	2b05      	cmp	r3, #5
 8008c78:	dded      	ble.n	8008c56 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8008c7a:	78fb      	ldrb	r3, [r7, #3]
 8008c7c:	f003 0302 	and.w	r3, r3, #2
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d018      	beq.n	8008cb6 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008c84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c88:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d112      	bne.n	8008cb6 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c90:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c9a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	33f3      	adds	r3, #243	; 0xf3
 8008ca8:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8008caa:	f107 0310 	add.w	r3, r7, #16
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cb2:	f011 fdbb 	bl	801a82c <strcpy>

		}

		if (((option & 4) == 4) &&
 8008cb6:	78fb      	ldrb	r3, [r7, #3]
 8008cb8:	f003 0304 	and.w	r3, r3, #4
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d030      	beq.n	8008d22 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008cc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cc4:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d12a      	bne.n	8008d22 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8008cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cde:	025b      	lsls	r3, r3, #9
 8008ce0:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ce6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8008cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d011      	beq.n	8008d1a <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8008cf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8008cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d04:	fb02 f303 	mul.w	r3, r2, r3
 8008d08:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8008d0a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8008d0e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008d12:	425b      	negs	r3, r3
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8008d1a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8008d22:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008d26:	78fb      	ldrb	r3, [r7, #3]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8008d30:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008d3a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3760      	adds	r7, #96	; 0x60
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b087      	sub	sp, #28
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008d52:	f240 6277 	movw	r2, #1655	; 0x677
 8008d56:	f04f 0300 	mov.w	r3, #0
 8008d5a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8008d5e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008d62:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008d64:	78fb      	ldrb	r3, [r7, #3]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	fb02 f303 	mul.w	r3, r2, r3
 8008d72:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8008d74:	68bb      	ldr	r3, [r7, #8]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	371c      	adds	r7, #28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b087      	sub	sp, #28
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d017      	beq.n	8008dcc <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008da2:	e005      	b.n	8008db0 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	085b      	lsrs	r3, r3, #1
 8008da8:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008daa:	89fb      	ldrh	r3, [r7, #14]
 8008dac:	3301      	adds	r3, #1
 8008dae:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1f4      	bne.n	8008da4 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008dba:	89fb      	ldrh	r3, [r7, #14]
 8008dbc:	021b      	lsls	r3, r3, #8
 8008dbe:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008dc8:	4413      	add	r3, r2
 8008dca:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008dcc:	8afb      	ldrh	r3, [r7, #22]

}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b085      	sub	sp, #20
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	4603      	mov	r3, r0
 8008de2:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008de8:	88fb      	ldrh	r3, [r7, #6]
 8008dea:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008dec:	88fa      	ldrh	r2, [r7, #6]
 8008dee:	0a12      	lsrs	r2, r2, #8
 8008df0:	b292      	uxth	r2, r2
 8008df2:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008df4:	3301      	adds	r3, #1
 8008df6:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008df8:	68fb      	ldr	r3, [r7, #12]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
	...

08008e08 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b088      	sub	sp, #32
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	4613      	mov	r3, r2
 8008e14:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008e1a:	79fb      	ldrb	r3, [r7, #7]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f7ff ff91 	bl	8008d46 <VL53L0X_calc_macro_period_ps>
 8008e24:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008e2c:	4a0a      	ldr	r2, [pc, #40]	; (8008e58 <VL53L0X_calc_timeout_mclks+0x50>)
 8008e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e32:	099b      	lsrs	r3, r3, #6
 8008e34:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e3c:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	085b      	lsrs	r3, r3, #1
 8008e44:	441a      	add	r2, r3
	timeout_period_mclks =
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e4c:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8008e4e:	69fb      	ldr	r3, [r7, #28]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3720      	adds	r7, #32
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	10624dd3 	.word	0x10624dd3

08008e5c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	807b      	strh	r3, [r7, #2]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008e70:	787b      	ldrb	r3, [r7, #1]
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7ff ff66 	bl	8008d46 <VL53L0X_calc_macro_period_ps>
 8008e7a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008e82:	4a0a      	ldr	r2, [pc, #40]	; (8008eac <VL53L0X_calc_timeout_us+0x50>)
 8008e84:	fba2 2303 	umull	r2, r3, r2, r3
 8008e88:	099b      	lsrs	r3, r3, #6
 8008e8a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8008e8c:	887b      	ldrh	r3, [r7, #2]
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	fb02 f303 	mul.w	r3, r2, r3
 8008e94:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8008e98:	4a04      	ldr	r2, [pc, #16]	; (8008eac <VL53L0X_calc_timeout_us+0x50>)
 8008e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9e:	099b      	lsrs	r3, r3, #6
 8008ea0:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8008ea2:	697b      	ldr	r3, [r7, #20]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3718      	adds	r7, #24
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	10624dd3 	.word	0x10624dd3

08008eb0 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b08c      	sub	sp, #48	; 0x30
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	607a      	str	r2, [r7, #4]
 8008ebc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008ed6:	7afb      	ldrb	r3, [r7, #11]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d005      	beq.n	8008ee8 <get_sequence_step_timeout+0x38>
 8008edc:	7afb      	ldrb	r3, [r7, #11]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d002      	beq.n	8008ee8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008ee2:	7afb      	ldrb	r3, [r7, #11]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d128      	bne.n	8008f3a <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008ee8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008eec:	461a      	mov	r2, r3
 8008eee:	2100      	movs	r1, #0
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f7fd fa5b 	bl	80063ac <VL53L0X_GetVcselPulsePeriod>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8008efc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d109      	bne.n	8008f18 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8008f04:	f107 0320 	add.w	r3, r7, #32
 8008f08:	461a      	mov	r2, r3
 8008f0a:	2146      	movs	r1, #70	; 0x46
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f7fa ff63 	bl	8003dd8 <VL53L0X_RdByte>
 8008f12:	4603      	mov	r3, r0
 8008f14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8008f18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7ff ff5b 	bl	8008dda <VL53L0X_decode_timeout>
 8008f24:	4603      	mov	r3, r0
 8008f26:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008f28:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008f2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f2e:	4619      	mov	r1, r3
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f7ff ff93 	bl	8008e5c <VL53L0X_calc_timeout_us>
 8008f36:	62b8      	str	r0, [r7, #40]	; 0x28
 8008f38:	e092      	b.n	8009060 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008f3a:	7afb      	ldrb	r3, [r7, #11]
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d135      	bne.n	8008fac <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008f40:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008f44:	461a      	mov	r2, r3
 8008f46:	2100      	movs	r1, #0
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f7fd fa2f 	bl	80063ac <VL53L0X_GetVcselPulsePeriod>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008f54:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f040 8081 	bne.w	8009060 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008f5e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008f62:	461a      	mov	r2, r3
 8008f64:	2100      	movs	r1, #0
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f7fd fa20 	bl	80063ac <VL53L0X_GetVcselPulsePeriod>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8008f72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d109      	bne.n	8008f8e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8008f7a:	f107 031e 	add.w	r3, r7, #30
 8008f7e:	461a      	mov	r2, r3
 8008f80:	2151      	movs	r1, #81	; 0x51
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f7fa ff52 	bl	8003e2c <VL53L0X_RdWord>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008f8e:	8bfb      	ldrh	r3, [r7, #30]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7ff ff22 	bl	8008dda <VL53L0X_decode_timeout>
 8008f96:	4603      	mov	r3, r0
 8008f98:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008f9a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008f9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f7ff ff5a 	bl	8008e5c <VL53L0X_calc_timeout_us>
 8008fa8:	62b8      	str	r0, [r7, #40]	; 0x28
 8008faa:	e059      	b.n	8009060 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008fac:	7afb      	ldrb	r3, [r7, #11]
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	d156      	bne.n	8009060 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008fb2:	f107 0314 	add.w	r3, r7, #20
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f7fd fb03 	bl	80065c4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d01d      	beq.n	8009004 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008fc8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008fcc:	461a      	mov	r2, r3
 8008fce:	2100      	movs	r1, #0
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f7fd f9eb 	bl	80063ac <VL53L0X_GetVcselPulsePeriod>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8008fdc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10f      	bne.n	8009004 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8008fe4:	f107 031e 	add.w	r3, r7, #30
 8008fe8:	461a      	mov	r2, r3
 8008fea:	2151      	movs	r1, #81	; 0x51
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f7fa ff1d 	bl	8003e2c <VL53L0X_RdWord>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008ff8:	8bfb      	ldrh	r3, [r7, #30]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7ff feed 	bl	8008dda <VL53L0X_decode_timeout>
 8009000:	4603      	mov	r3, r0
 8009002:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009004:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009008:	2b00      	cmp	r3, #0
 800900a:	d109      	bne.n	8009020 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800900c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009010:	461a      	mov	r2, r3
 8009012:	2101      	movs	r1, #1
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f7fd f9c9 	bl	80063ac <VL53L0X_GetVcselPulsePeriod>
 800901a:	4603      	mov	r3, r0
 800901c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009020:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10f      	bne.n	8009048 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8009028:	f107 031c 	add.w	r3, r7, #28
 800902c:	461a      	mov	r2, r3
 800902e:	2171      	movs	r1, #113	; 0x71
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f7fa fefb 	bl	8003e2c <VL53L0X_RdWord>
 8009036:	4603      	mov	r3, r0
 8009038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800903c:	8bbb      	ldrh	r3, [r7, #28]
 800903e:	4618      	mov	r0, r3
 8009040:	f7ff fecb 	bl	8008dda <VL53L0X_decode_timeout>
 8009044:	4603      	mov	r3, r0
 8009046:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8009048:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800904a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009050:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009056:	4619      	mov	r1, r3
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f7ff feff 	bl	8008e5c <VL53L0X_calc_timeout_us>
 800905e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009064:	601a      	str	r2, [r3, #0]

	return Status;
 8009066:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800906a:	4618      	mov	r0, r3
 800906c:	3730      	adds	r7, #48	; 0x30
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b08a      	sub	sp, #40	; 0x28
 8009076:	af00      	add	r7, sp, #0
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	460b      	mov	r3, r1
 800907c:	607a      	str	r2, [r7, #4]
 800907e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009080:	2300      	movs	r3, #0
 8009082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009086:	7afb      	ldrb	r3, [r7, #11]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d005      	beq.n	8009098 <set_sequence_step_timeout+0x26>
 800908c:	7afb      	ldrb	r3, [r7, #11]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d002      	beq.n	8009098 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009092:	7afb      	ldrb	r3, [r7, #11]
 8009094:	2b02      	cmp	r3, #2
 8009096:	d138      	bne.n	800910a <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009098:	f107 031b 	add.w	r3, r7, #27
 800909c:	461a      	mov	r2, r3
 800909e:	2100      	movs	r1, #0
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f7fd f983 	bl	80063ac <VL53L0X_GetVcselPulsePeriod>
 80090a6:	4603      	mov	r3, r0
 80090a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80090ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d11a      	bne.n	80090ea <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80090b4:	7efb      	ldrb	r3, [r7, #27]
 80090b6:	461a      	mov	r2, r3
 80090b8:	6879      	ldr	r1, [r7, #4]
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f7ff fea4 	bl	8008e08 <VL53L0X_calc_timeout_mclks>
 80090c0:	4603      	mov	r3, r0
 80090c2:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80090c4:	8bbb      	ldrh	r3, [r7, #28]
 80090c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ca:	d903      	bls.n	80090d4 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80090cc:	23ff      	movs	r3, #255	; 0xff
 80090ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80090d2:	e004      	b.n	80090de <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80090d4:	8bbb      	ldrh	r3, [r7, #28]
 80090d6:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80090d8:	3b01      	subs	r3, #1
 80090da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80090de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80090ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f040 80ab 	bne.w	800924a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80090f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090f8:	461a      	mov	r2, r3
 80090fa:	2146      	movs	r1, #70	; 0x46
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f7fa fdb7 	bl	8003c70 <VL53L0X_WrByte>
 8009102:	4603      	mov	r3, r0
 8009104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8009108:	e09f      	b.n	800924a <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800910a:	7afb      	ldrb	r3, [r7, #11]
 800910c:	2b03      	cmp	r3, #3
 800910e:	d135      	bne.n	800917c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8009110:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009114:	2b00      	cmp	r3, #0
 8009116:	d11b      	bne.n	8009150 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009118:	f107 031b 	add.w	r3, r7, #27
 800911c:	461a      	mov	r2, r3
 800911e:	2100      	movs	r1, #0
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f7fd f943 	bl	80063ac <VL53L0X_GetVcselPulsePeriod>
 8009126:	4603      	mov	r3, r0
 8009128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800912c:	7efb      	ldrb	r3, [r7, #27]
 800912e:	461a      	mov	r2, r3
 8009130:	6879      	ldr	r1, [r7, #4]
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f7ff fe68 	bl	8008e08 <VL53L0X_calc_timeout_mclks>
 8009138:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800913a:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800913c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff fe1f 	bl	8008d82 <VL53L0X_encode_timeout>
 8009144:	4603      	mov	r3, r0
 8009146:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009148:	8b3a      	ldrh	r2, [r7, #24]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009150:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009154:	2b00      	cmp	r3, #0
 8009156:	d108      	bne.n	800916a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8009158:	8b3b      	ldrh	r3, [r7, #24]
 800915a:	461a      	mov	r2, r3
 800915c:	2151      	movs	r1, #81	; 0x51
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f7fa fdaa 	bl	8003cb8 <VL53L0X_WrWord>
 8009164:	4603      	mov	r3, r0
 8009166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800916a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800916e:	2b00      	cmp	r3, #0
 8009170:	d16b      	bne.n	800924a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800917a:	e066      	b.n	800924a <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800917c:	7afb      	ldrb	r3, [r7, #11]
 800917e:	2b04      	cmp	r3, #4
 8009180:	d160      	bne.n	8009244 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009182:	f107 0310 	add.w	r3, r7, #16
 8009186:	4619      	mov	r1, r3
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f7fd fa1b 	bl	80065c4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800918e:	2300      	movs	r3, #0
 8009190:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009192:	7cfb      	ldrb	r3, [r7, #19]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d01d      	beq.n	80091d4 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009198:	f107 031b 	add.w	r3, r7, #27
 800919c:	461a      	mov	r2, r3
 800919e:	2100      	movs	r1, #0
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f7fd f903 	bl	80063ac <VL53L0X_GetVcselPulsePeriod>
 80091a6:	4603      	mov	r3, r0
 80091a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80091ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10f      	bne.n	80091d4 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80091b4:	f107 0318 	add.w	r3, r7, #24
 80091b8:	461a      	mov	r2, r3
 80091ba:	2151      	movs	r1, #81	; 0x51
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f7fa fe35 	bl	8003e2c <VL53L0X_RdWord>
 80091c2:	4603      	mov	r3, r0
 80091c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80091c8:	8b3b      	ldrh	r3, [r7, #24]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7ff fe05 	bl	8008dda <VL53L0X_decode_timeout>
 80091d0:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80091d2:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80091d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d109      	bne.n	80091f0 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80091dc:	f107 031b 	add.w	r3, r7, #27
 80091e0:	461a      	mov	r2, r3
 80091e2:	2101      	movs	r1, #1
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f7fd f8e1 	bl	80063ac <VL53L0X_GetVcselPulsePeriod>
 80091ea:	4603      	mov	r3, r0
 80091ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80091f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d128      	bne.n	800924a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80091f8:	7efb      	ldrb	r3, [r7, #27]
 80091fa:	461a      	mov	r2, r3
 80091fc:	6879      	ldr	r1, [r7, #4]
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f7ff fe02 	bl	8008e08 <VL53L0X_calc_timeout_mclks>
 8009204:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8009206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009208:	6a3a      	ldr	r2, [r7, #32]
 800920a:	4413      	add	r3, r2
 800920c:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800920e:	6a38      	ldr	r0, [r7, #32]
 8009210:	f7ff fdb7 	bl	8008d82 <VL53L0X_encode_timeout>
 8009214:	4603      	mov	r3, r0
 8009216:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8009218:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800921c:	2b00      	cmp	r3, #0
 800921e:	d108      	bne.n	8009232 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8009220:	8bfb      	ldrh	r3, [r7, #30]
 8009222:	461a      	mov	r2, r3
 8009224:	2171      	movs	r1, #113	; 0x71
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f7fa fd46 	bl	8003cb8 <VL53L0X_WrWord>
 800922c:	4603      	mov	r3, r0
 800922e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8009232:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009236:	2b00      	cmp	r3, #0
 8009238:	d107      	bne.n	800924a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009242:	e002      	b.n	800924a <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009244:	23fc      	movs	r3, #252	; 0xfc
 8009246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800924a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800924e:	4618      	mov	r0, r3
 8009250:	3728      	adds	r7, #40	; 0x28
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b086      	sub	sp, #24
 800925a:	af00      	add	r7, sp, #0
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	460b      	mov	r3, r1
 8009260:	607a      	str	r2, [r7, #4]
 8009262:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009264:	2300      	movs	r3, #0
 8009266:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8009268:	7afb      	ldrb	r3, [r7, #11]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d002      	beq.n	8009274 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800926e:	2b01      	cmp	r3, #1
 8009270:	d00a      	beq.n	8009288 <VL53L0X_get_vcsel_pulse_period+0x32>
 8009272:	e013      	b.n	800929c <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009274:	f107 0316 	add.w	r3, r7, #22
 8009278:	461a      	mov	r2, r3
 800927a:	2150      	movs	r1, #80	; 0x50
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7fa fdab 	bl	8003dd8 <VL53L0X_RdByte>
 8009282:	4603      	mov	r3, r0
 8009284:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009286:	e00b      	b.n	80092a0 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009288:	f107 0316 	add.w	r3, r7, #22
 800928c:	461a      	mov	r2, r3
 800928e:	2170      	movs	r1, #112	; 0x70
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f7fa fda1 	bl	8003dd8 <VL53L0X_RdByte>
 8009296:	4603      	mov	r3, r0
 8009298:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800929a:	e001      	b.n	80092a0 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800929c:	23fc      	movs	r3, #252	; 0xfc
 800929e:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80092a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d107      	bne.n	80092b8 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80092a8:	7dbb      	ldrb	r3, [r7, #22]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe fff4 	bl	8008298 <VL53L0X_decode_vcsel_period>
 80092b0:	4603      	mov	r3, r0
 80092b2:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	701a      	strb	r2, [r3, #0]

	return Status;
 80092b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b092      	sub	sp, #72	; 0x48
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092ce:	2300      	movs	r3, #0
 80092d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80092d4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80092d8:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80092da:	f240 7376 	movw	r3, #1910	; 0x776
 80092de:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80092e0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80092e4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80092e6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80092ea:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80092ec:	f240 234e 	movw	r3, #590	; 0x24e
 80092f0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80092f2:	f240 23b2 	movw	r3, #690	; 0x2b2
 80092f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80092f8:	f44f 7325 	mov.w	r3, #660	; 0x294
 80092fc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80092fe:	f240 2326 	movw	r3, #550	; 0x226
 8009302:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009304:	2300      	movs	r3, #0
 8009306:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8009308:	f644 6320 	movw	r3, #20000	; 0x4e20
 800930c:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	6a3b      	ldr	r3, [r7, #32]
 8009316:	429a      	cmp	r2, r3
 8009318:	d205      	bcs.n	8009326 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800931a:	23fc      	movs	r3, #252	; 0xfc
 800931c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8009320:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009324:	e0aa      	b.n	800947c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8009326:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932a:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009332:	f107 0314 	add.w	r3, r7, #20
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7fd f943 	bl	80065c4 <VL53L0X_GetSequenceStepEnables>
 800933e:	4603      	mov	r3, r0
 8009340:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8009344:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009348:	2b00      	cmp	r3, #0
 800934a:	d15b      	bne.n	8009404 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800934c:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800934e:	2b00      	cmp	r3, #0
 8009350:	d105      	bne.n	800935e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8009352:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8009354:	2b00      	cmp	r3, #0
 8009356:	d102      	bne.n	800935e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8009358:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800935a:	2b00      	cmp	r3, #0
 800935c:	d052      	beq.n	8009404 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800935e:	f107 0310 	add.w	r3, r7, #16
 8009362:	461a      	mov	r2, r3
 8009364:	2102      	movs	r1, #2
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7ff fda2 	bl	8008eb0 <get_sequence_step_timeout>
 800936c:	4603      	mov	r3, r0
 800936e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009372:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009376:	2b00      	cmp	r3, #0
 8009378:	d002      	beq.n	8009380 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800937a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800937e:	e07d      	b.n	800947c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009380:	7d3b      	ldrb	r3, [r7, #20]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00f      	beq.n	80093a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8009386:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8009388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800938a:	4413      	add	r3, r2
 800938c:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800938e:	69fa      	ldr	r2, [r7, #28]
 8009390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009392:	429a      	cmp	r2, r3
 8009394:	d204      	bcs.n	80093a0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009396:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	643b      	str	r3, [r7, #64]	; 0x40
 800939e:	e002      	b.n	80093a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80093a0:	23fc      	movs	r3, #252	; 0xfc
 80093a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80093a6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 80093ae:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80093b2:	e063      	b.n	800947c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80093b4:	7dbb      	ldrb	r3, [r7, #22]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d011      	beq.n	80093de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093be:	4413      	add	r3, r2
 80093c0:	005b      	lsls	r3, r3, #1
 80093c2:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80093c4:	69fa      	ldr	r2, [r7, #28]
 80093c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d204      	bcs.n	80093d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80093cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	643b      	str	r3, [r7, #64]	; 0x40
 80093d4:	e016      	b.n	8009404 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80093d6:	23fc      	movs	r3, #252	; 0xfc
 80093d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80093dc:	e012      	b.n	8009404 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80093de:	7d7b      	ldrb	r3, [r7, #21]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00f      	beq.n	8009404 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093e8:	4413      	add	r3, r2
 80093ea:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80093ec:	69fa      	ldr	r2, [r7, #28]
 80093ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d204      	bcs.n	80093fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80093f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	643b      	str	r3, [r7, #64]	; 0x40
 80093fc:	e002      	b.n	8009404 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80093fe:	23fc      	movs	r3, #252	; 0xfc
 8009400:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009404:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800940c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009410:	e034      	b.n	800947c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8009412:	7dfb      	ldrb	r3, [r7, #23]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d019      	beq.n	800944c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8009418:	f107 030c 	add.w	r3, r7, #12
 800941c:	461a      	mov	r2, r3
 800941e:	2103      	movs	r1, #3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7ff fd45 	bl	8008eb0 <get_sequence_step_timeout>
 8009426:	4603      	mov	r3, r0
 8009428:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009430:	4413      	add	r3, r2
 8009432:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009434:	69fa      	ldr	r2, [r7, #28]
 8009436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009438:	429a      	cmp	r2, r3
 800943a:	d204      	bcs.n	8009446 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800943c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	643b      	str	r3, [r7, #64]	; 0x40
 8009444:	e002      	b.n	800944c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009446:	23fc      	movs	r3, #252	; 0xfc
 8009448:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800944c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009450:	2b00      	cmp	r3, #0
 8009452:	d111      	bne.n	8009478 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8009454:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00e      	beq.n	8009478 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800945a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8009462:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009464:	2104      	movs	r1, #4
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7ff fe03 	bl	8009072 <set_sequence_step_timeout>
 800946c:	4603      	mov	r3, r0
 800946e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009478:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800947c:	4618      	mov	r0, r3
 800947e:	3748      	adds	r7, #72	; 0x48
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b090      	sub	sp, #64	; 0x40
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800948e:	2300      	movs	r3, #0
 8009490:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009494:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009498:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800949a:	f240 7376 	movw	r3, #1910	; 0x776
 800949e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80094a0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80094a6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80094aa:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80094ac:	f240 234e 	movw	r3, #590	; 0x24e
 80094b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80094b2:	f240 23b2 	movw	r3, #690	; 0x2b2
 80094b6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80094b8:	f44f 7325 	mov.w	r3, #660	; 0x294
 80094bc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80094be:	f240 2326 	movw	r3, #550	; 0x226
 80094c2:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80094c4:	2300      	movs	r3, #0
 80094c6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80094c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094cc:	441a      	add	r2, r3
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80094d2:	f107 0318 	add.w	r3, r7, #24
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7fd f873 	bl	80065c4 <VL53L0X_GetSequenceStepEnables>
 80094de:	4603      	mov	r3, r0
 80094e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80094e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d002      	beq.n	80094f2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80094ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094f0:	e075      	b.n	80095de <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80094f2:	7e3b      	ldrb	r3, [r7, #24]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d105      	bne.n	8009504 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80094f8:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d102      	bne.n	8009504 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80094fe:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8009500:	2b00      	cmp	r3, #0
 8009502:	d030      	beq.n	8009566 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8009504:	f107 0310 	add.w	r3, r7, #16
 8009508:	461a      	mov	r2, r3
 800950a:	2102      	movs	r1, #2
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7ff fccf 	bl	8008eb0 <get_sequence_step_timeout>
 8009512:	4603      	mov	r3, r0
 8009514:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8009518:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800951c:	2b00      	cmp	r3, #0
 800951e:	d122      	bne.n	8009566 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8009520:	7e3b      	ldrb	r3, [r7, #24]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d007      	beq.n	8009536 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800952a:	6939      	ldr	r1, [r7, #16]
 800952c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952e:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009530:	441a      	add	r2, r3
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8009536:	7ebb      	ldrb	r3, [r7, #26]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d009      	beq.n	8009550 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009540:	6939      	ldr	r1, [r7, #16]
 8009542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009544:	440b      	add	r3, r1
 8009546:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009548:	441a      	add	r2, r3
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	e00a      	b.n	8009566 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009550:	7e7b      	ldrb	r3, [r7, #25]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d007      	beq.n	8009566 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800955a:	6939      	ldr	r1, [r7, #16]
 800955c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955e:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009560:	441a      	add	r2, r3
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009566:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800956a:	2b00      	cmp	r3, #0
 800956c:	d114      	bne.n	8009598 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800956e:	7efb      	ldrb	r3, [r7, #27]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d011      	beq.n	8009598 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8009574:	f107 030c 	add.w	r3, r7, #12
 8009578:	461a      	mov	r2, r3
 800957a:	2103      	movs	r1, #3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f7ff fc97 	bl	8008eb0 <get_sequence_step_timeout>
 8009582:	4603      	mov	r3, r0
 8009584:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800958c:	68f9      	ldr	r1, [r7, #12]
 800958e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009590:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009592:	441a      	add	r2, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009598:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800959c:	2b00      	cmp	r3, #0
 800959e:	d114      	bne.n	80095ca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80095a0:	7f3b      	ldrb	r3, [r7, #28]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d011      	beq.n	80095ca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80095a6:	f107 0314 	add.w	r3, r7, #20
 80095aa:	461a      	mov	r2, r3
 80095ac:	2104      	movs	r1, #4
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7ff fc7e 	bl	8008eb0 <get_sequence_step_timeout>
 80095b4:	4603      	mov	r3, r0
 80095b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80095be:	6979      	ldr	r1, [r7, #20]
 80095c0:	6a3b      	ldr	r3, [r7, #32]
 80095c2:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80095c4:	441a      	add	r2, r3
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80095ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d103      	bne.n	80095da <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80095da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3740      	adds	r7, #64	; 0x40
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b088      	sub	sp, #32
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095f2:	2300      	movs	r3, #0
 80095f4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80095fa:	e0c6      	b.n	800978a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	4413      	add	r3, r2
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	74fb      	strb	r3, [r7, #19]
		Index++;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	3301      	adds	r3, #1
 800960a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800960c:	7cfb      	ldrb	r3, [r7, #19]
 800960e:	2bff      	cmp	r3, #255	; 0xff
 8009610:	f040 808d 	bne.w	800972e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	4413      	add	r3, r2
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	747b      	strb	r3, [r7, #17]
			Index++;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	3301      	adds	r3, #1
 8009622:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8009624:	7c7b      	ldrb	r3, [r7, #17]
 8009626:	2b03      	cmp	r3, #3
 8009628:	d87e      	bhi.n	8009728 <VL53L0X_load_tuning_settings+0x140>
 800962a:	a201      	add	r2, pc, #4	; (adr r2, 8009630 <VL53L0X_load_tuning_settings+0x48>)
 800962c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009630:	08009641 	.word	0x08009641
 8009634:	0800967b 	.word	0x0800967b
 8009638:	080096b5 	.word	0x080096b5
 800963c:	080096ef 	.word	0x080096ef
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	4413      	add	r3, r2
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	743b      	strb	r3, [r7, #16]
				Index++;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	3301      	adds	r3, #1
 800964e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	4413      	add	r3, r2
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	73fb      	strb	r3, [r7, #15]
				Index++;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	3301      	adds	r3, #1
 800965e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009660:	7c3b      	ldrb	r3, [r7, #16]
 8009662:	b29b      	uxth	r3, r3
 8009664:	021b      	lsls	r3, r3, #8
 8009666:	b29a      	uxth	r2, r3
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	b29b      	uxth	r3, r3
 800966c:	4413      	add	r3, r2
 800966e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	89ba      	ldrh	r2, [r7, #12]
 8009674:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8009678:	e087      	b.n	800978a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	4413      	add	r3, r2
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	743b      	strb	r3, [r7, #16]
				Index++;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	3301      	adds	r3, #1
 8009688:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	4413      	add	r3, r2
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	3301      	adds	r3, #1
 8009698:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800969a:	7c3b      	ldrb	r3, [r7, #16]
 800969c:	b29b      	uxth	r3, r3
 800969e:	021b      	lsls	r3, r3, #8
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	7bfb      	ldrb	r3, [r7, #15]
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	4413      	add	r3, r2
 80096a8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	89ba      	ldrh	r2, [r7, #12]
 80096ae:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 80096b2:	e06a      	b.n	800978a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	4413      	add	r3, r2
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	743b      	strb	r3, [r7, #16]
				Index++;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	3301      	adds	r3, #1
 80096c2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	4413      	add	r3, r2
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	73fb      	strb	r3, [r7, #15]
				Index++;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	3301      	adds	r3, #1
 80096d2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80096d4:	7c3b      	ldrb	r3, [r7, #16]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	021b      	lsls	r3, r3, #8
 80096da:	b29a      	uxth	r2, r3
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	4413      	add	r3, r2
 80096e2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	89ba      	ldrh	r2, [r7, #12]
 80096e8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80096ec:	e04d      	b.n	800978a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	4413      	add	r3, r2
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	743b      	strb	r3, [r7, #16]
				Index++;
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	3301      	adds	r3, #1
 80096fc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	683a      	ldr	r2, [r7, #0]
 8009702:	4413      	add	r3, r2
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	3301      	adds	r3, #1
 800970c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800970e:	7c3b      	ldrb	r3, [r7, #16]
 8009710:	b29b      	uxth	r3, r3
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	b29a      	uxth	r2, r3
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	b29b      	uxth	r3, r3
 800971a:	4413      	add	r3, r2
 800971c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	89ba      	ldrh	r2, [r7, #12]
 8009722:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8009726:	e030      	b.n	800978a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009728:	23fc      	movs	r3, #252	; 0xfc
 800972a:	77fb      	strb	r3, [r7, #31]
 800972c:	e02d      	b.n	800978a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800972e:	7cfb      	ldrb	r3, [r7, #19]
 8009730:	2b04      	cmp	r3, #4
 8009732:	d828      	bhi.n	8009786 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	4413      	add	r3, r2
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	74bb      	strb	r3, [r7, #18]
			Index++;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	3301      	adds	r3, #1
 8009742:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8009744:	2300      	movs	r3, #0
 8009746:	61bb      	str	r3, [r7, #24]
 8009748:	e00f      	b.n	800976a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	683a      	ldr	r2, [r7, #0]
 800974e:	4413      	add	r3, r2
 8009750:	7819      	ldrb	r1, [r3, #0]
 8009752:	f107 0208 	add.w	r2, r7, #8
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	4413      	add	r3, r2
 800975a:	460a      	mov	r2, r1
 800975c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	3301      	adds	r3, #1
 8009762:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	3301      	adds	r3, #1
 8009768:	61bb      	str	r3, [r7, #24]
 800976a:	7cfb      	ldrb	r3, [r7, #19]
 800976c:	69ba      	ldr	r2, [r7, #24]
 800976e:	429a      	cmp	r2, r3
 8009770:	dbeb      	blt.n	800974a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8009772:	7cfb      	ldrb	r3, [r7, #19]
 8009774:	f107 0208 	add.w	r2, r7, #8
 8009778:	7cb9      	ldrb	r1, [r7, #18]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7fa fa1c 	bl	8003bb8 <VL53L0X_WriteMulti>
 8009780:	4603      	mov	r3, r0
 8009782:	77fb      	strb	r3, [r7, #31]
 8009784:	e001      	b.n	800978a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009786:	23fc      	movs	r3, #252	; 0xfc
 8009788:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	4413      	add	r3, r2
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d004      	beq.n	80097a0 <VL53L0X_load_tuning_settings+0x1b8>
 8009796:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800979a:	2b00      	cmp	r3, #0
 800979c:	f43f af2e 	beq.w	80095fc <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80097a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3720      	adds	r7, #32
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b088      	sub	sp, #32
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097b8:	2300      	movs	r3, #0
 80097ba:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80097c2:	f107 0313 	add.w	r3, r7, #19
 80097c6:	4619      	mov	r1, r3
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f7fc ffbb 	bl	8006744 <VL53L0X_GetXTalkCompensationEnable>
 80097ce:	4603      	mov	r3, r0
 80097d0:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80097d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d111      	bne.n	80097fe <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80097da:	7cfb      	ldrb	r3, [r7, #19]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00e      	beq.n	80097fe <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6a1b      	ldr	r3, [r3, #32]
 80097e4:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	8a9b      	ldrh	r3, [r3, #20]
 80097ea:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	fb02 f303 	mul.w	r3, r2, r3
 80097f2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	3380      	adds	r3, #128	; 0x80
 80097f8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80097fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3720      	adds	r7, #32
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b086      	sub	sp, #24
 800980e:	af00      	add	r7, sp, #0
 8009810:	60f8      	str	r0, [r7, #12]
 8009812:	60b9      	str	r1, [r7, #8]
 8009814:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009816:	2300      	movs	r3, #0
 8009818:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8009822:	f107 0310 	add.w	r3, r7, #16
 8009826:	461a      	mov	r2, r3
 8009828:	68b9      	ldr	r1, [r7, #8]
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f7ff ffbe 	bl	80097ac <VL53L0X_get_total_xtalk_rate>
 8009830:	4603      	mov	r3, r0
 8009832:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8009834:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d105      	bne.n	8009848 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	441a      	add	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	601a      	str	r2, [r3, #0]

	return Status;
 8009848:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b09a      	sub	sp, #104	; 0x68
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
 8009860:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8009862:	2312      	movs	r3, #18
 8009864:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8009866:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800986a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800986c:	2342      	movs	r3, #66	; 0x42
 800986e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8009870:	2306      	movs	r3, #6
 8009872:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8009874:	2307      	movs	r3, #7
 8009876:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009878:	2300      	movs	r3, #0
 800987a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8009884:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800988c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800988e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009892:	fb02 f303 	mul.w	r3, r2, r3
 8009896:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8009898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800989a:	3380      	adds	r3, #128	; 0x80
 800989c:	0a1b      	lsrs	r3, r3, #8
 800989e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 80098a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098a4:	fb02 f303 	mul.w	r3, r2, r3
 80098a8:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d01a      	beq.n	80098ea <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	029b      	lsls	r3, r3, #10
 80098b8:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80098be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098c0:	4413      	add	r3, r2
 80098c2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80098c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098cc:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80098ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80098d0:	4613      	mov	r3, r2
 80098d2:	005b      	lsls	r3, r3, #1
 80098d4:	4413      	add	r3, r2
 80098d6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80098d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098da:	fb03 f303 	mul.w	r3, r3, r3
 80098de:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80098e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098e2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80098e6:	0c1b      	lsrs	r3, r3, #16
 80098e8:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80098ee:	fb02 f303 	mul.w	r3, r2, r3
 80098f2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80098f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80098fa:	0c1b      	lsrs	r3, r3, #16
 80098fc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80098fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009900:	fb03 f303 	mul.w	r3, r3, r3
 8009904:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8009906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009908:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800990c:	0c1b      	lsrs	r3, r3, #16
 800990e:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8009910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009912:	085a      	lsrs	r2, r3, #1
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	441a      	add	r2, r3
 8009918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800991a:	fbb2 f3f3 	udiv	r3, r2, r3
 800991e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8009920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009922:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009924:	fb02 f303 	mul.w	r3, r2, r3
 8009928:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800992a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009930:	d302      	bcc.n	8009938 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8009932:	4b54      	ldr	r3, [pc, #336]	; (8009a84 <VL53L0X_calc_dmax+0x230>)
 8009934:	663b      	str	r3, [r7, #96]	; 0x60
 8009936:	e015      	b.n	8009964 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8009938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800993a:	085a      	lsrs	r2, r3, #1
 800993c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800993e:	441a      	add	r2, r3
 8009940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009942:	fbb2 f3f3 	udiv	r3, r2, r3
 8009946:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8009948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800994a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800994c:	fb02 f303 	mul.w	r3, r2, r3
 8009950:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8009952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009954:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009958:	0c1b      	lsrs	r3, r3, #16
 800995a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800995c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800995e:	fb03 f303 	mul.w	r3, r3, r3
 8009962:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8009964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009966:	039b      	lsls	r3, r3, #14
 8009968:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800996c:	4a46      	ldr	r2, [pc, #280]	; (8009a88 <VL53L0X_calc_dmax+0x234>)
 800996e:	fba2 2303 	umull	r2, r3, r2, r3
 8009972:	099b      	lsrs	r3, r3, #6
 8009974:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	fb03 f303 	mul.w	r3, r3, r3
 800997c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800997e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009980:	fb03 f303 	mul.w	r3, r3, r3
 8009984:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	3308      	adds	r3, #8
 800998a:	091b      	lsrs	r3, r3, #4
 800998c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800998e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009990:	6a3b      	ldr	r3, [r7, #32]
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8009996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009998:	4613      	mov	r3, r2
 800999a:	005b      	lsls	r3, r3, #1
 800999c:	4413      	add	r3, r2
 800999e:	011b      	lsls	r3, r3, #4
 80099a0:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80099a8:	0b9b      	lsrs	r3, r3, #14
 80099aa:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 80099ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099b0:	4413      	add	r3, r2
 80099b2:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80099b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099b6:	085b      	lsrs	r3, r3, #1
 80099b8:	69ba      	ldr	r2, [r7, #24]
 80099ba:	4413      	add	r3, r2
 80099bc:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 80099be:	69ba      	ldr	r2, [r7, #24]
 80099c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c6:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	039b      	lsls	r3, r3, #14
 80099cc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	085b      	lsrs	r3, r3, #1
 80099d2:	69ba      	ldr	r2, [r7, #24]
 80099d4:	4413      	add	r3, r2
 80099d6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80099d8:	69ba      	ldr	r2, [r7, #24]
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e0:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80099e6:	fb02 f303 	mul.w	r3, r2, r3
 80099ea:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80099f2:	4a25      	ldr	r2, [pc, #148]	; (8009a88 <VL53L0X_calc_dmax+0x234>)
 80099f4:	fba2 2303 	umull	r2, r3, r2, r3
 80099f8:	099b      	lsrs	r3, r3, #6
 80099fa:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	011b      	lsls	r3, r3, #4
 8009a00:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009a08:	4a1f      	ldr	r2, [pc, #124]	; (8009a88 <VL53L0X_calc_dmax+0x234>)
 8009a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a0e:	099b      	lsrs	r3, r3, #6
 8009a10:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8009a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a14:	3380      	adds	r3, #128	; 0x80
 8009a16:	0a1b      	lsrs	r3, r3, #8
 8009a18:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d008      	beq.n	8009a32 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	085a      	lsrs	r2, r3, #1
 8009a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a26:	441a      	add	r2, r3
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a30:	e001      	b.n	8009a36 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8009a36:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009a38:	f7fe fc41 	bl	80082be <VL53L0X_isqrt>
 8009a3c:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d008      	beq.n	8009a56 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	085a      	lsrs	r2, r3, #1
 8009a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a4a:	441a      	add	r2, r3
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a54:	e001      	b.n	8009a5a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8009a56:	2300      	movs	r3, #0
 8009a58:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8009a5a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009a5c:	f7fe fc2f 	bl	80082be <VL53L0X_isqrt>
 8009a60:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8009a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d902      	bls.n	8009a76 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8009a70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a74:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8009a76:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3768      	adds	r7, #104	; 0x68
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	fff00000 	.word	0xfff00000
 8009a88:	10624dd3 	.word	0x10624dd3

08009a8c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b0b4      	sub	sp, #208	; 0xd0
 8009a90:	af04      	add	r7, sp, #16
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8009a9a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009a9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8009aa2:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009aa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8009aaa:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8009aae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8009ab2:	f241 235c 	movw	r3, #4700	; 0x125c
 8009ab6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8009aba:	4b9e      	ldr	r3, [pc, #632]	; (8009d34 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8009abc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8009ac0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009ac4:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8009ac6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8009aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ad2:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8009ad4:	4b98      	ldr	r3, [pc, #608]	; (8009d38 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8009ad6:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8009ad8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009adc:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8009ade:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8009ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8009ae4:	f240 6377 	movw	r3, #1655	; 0x677
 8009ae8:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009aea:	2300      	movs	r3, #0
 8009aec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6a1b      	ldr	r3, [r3, #32]
 8009af4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009afe:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8009b02:	0c1b      	lsrs	r3, r3, #16
 8009b04:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8009b0c:	f107 0310 	add.w	r3, r7, #16
 8009b10:	461a      	mov	r2, r3
 8009b12:	68b9      	ldr	r1, [r7, #8]
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f7ff fe78 	bl	800980a <VL53L0X_get_total_signal_rate>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8009b20:	f107 0314 	add.w	r3, r7, #20
 8009b24:	461a      	mov	r2, r3
 8009b26:	68b9      	ldr	r1, [r7, #8]
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f7ff fe3f 	bl	80097ac <VL53L0X_get_total_xtalk_rate>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b3a:	fb02 f303 	mul.w	r3, r2, r3
 8009b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8009b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b42:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009b46:	0c1b      	lsrs	r3, r3, #16
 8009b48:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b50:	fb02 f303 	mul.w	r3, r2, r3
 8009b54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8009b58:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d902      	bls.n	8009b68 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8009b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8009b68:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d168      	bne.n	8009c42 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009b76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8009b80:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009b84:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009b88:	461a      	mov	r2, r3
 8009b8a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f7ff f93a 	bl	8008e08 <VL53L0X_calc_timeout_mclks>
 8009b94:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8009ba6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009baa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f7ff f927 	bl	8008e08 <VL53L0X_calc_timeout_mclks>
 8009bba:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8009bc2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009bc6:	2b08      	cmp	r3, #8
 8009bc8:	d102      	bne.n	8009bd0 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8009bca:	2302      	movs	r3, #2
 8009bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8009bd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bd4:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8009bd6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009bda:	fb02 f303 	mul.w	r3, r2, r3
 8009bde:	02db      	lsls	r3, r3, #11
 8009be0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009be4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009be8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009bec:	4a53      	ldr	r2, [pc, #332]	; (8009d3c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009bee:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf2:	099b      	lsrs	r3, r3, #6
 8009bf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8009bf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009bfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009bfe:	fb02 f303 	mul.w	r3, r2, r3
 8009c02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009c06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c0a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009c0e:	4a4b      	ldr	r2, [pc, #300]	; (8009d3c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009c10:	fba2 2303 	umull	r2, r3, r2, r3
 8009c14:	099b      	lsrs	r3, r3, #6
 8009c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	3380      	adds	r3, #128	; 0x80
 8009c1e:	0a1b      	lsrs	r3, r3, #8
 8009c20:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c28:	fb02 f303 	mul.w	r3, r2, r3
 8009c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8009c30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009c34:	3380      	adds	r3, #128	; 0x80
 8009c36:	0a1b      	lsrs	r3, r3, #8
 8009c38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	021b      	lsls	r3, r3, #8
 8009c40:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009c42:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d002      	beq.n	8009c50 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8009c4a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009c4e:	e15e      	b.n	8009f0e <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8009c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10c      	bne.n	8009c70 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c5c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c64:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	e14c      	b.n	8009f0a <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8009c70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d102      	bne.n	8009c7e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8009c7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c82:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c86:	041a      	lsls	r2, r3, #16
 8009c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8009c92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d902      	bls.n	8009ca2 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8009c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8009ca2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009ca6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009caa:	fb02 f303 	mul.w	r3, r2, r3
 8009cae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8009cb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	4413      	add	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fe fafd 	bl	80082be <VL53L0X_isqrt>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	005b      	lsls	r3, r3, #1
 8009cc8:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	891b      	ldrh	r3, [r3, #8]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cd2:	fb02 f303 	mul.w	r3, r2, r3
 8009cd6:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cda:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009cdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ce0:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009ce2:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009ce4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009ce8:	4a14      	ldr	r2, [pc, #80]	; (8009d3c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009cea:	fba2 2303 	umull	r2, r3, r2, r3
 8009cee:	099b      	lsrs	r3, r3, #6
 8009cf0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8009cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cf4:	041b      	lsls	r3, r3, #16
 8009cf6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009cfa:	4a10      	ldr	r2, [pc, #64]	; (8009d3c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009d00:	099b      	lsrs	r3, r3, #6
 8009d02:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8009d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d06:	021b      	lsls	r3, r3, #8
 8009d08:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8009d0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	bfb8      	it	lt
 8009d16:	425b      	neglt	r3, r3
 8009d18:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8009d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d1c:	021b      	lsls	r3, r3, #8
 8009d1e:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	7e1b      	ldrb	r3, [r3, #24]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00b      	beq.n	8009d40 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8009d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d30:	e033      	b.n	8009d9a <VL53L0X_calc_sigma_estimate+0x30e>
 8009d32:	bf00      	nop
 8009d34:	028f87ae 	.word	0x028f87ae
 8009d38:	0006999a 	.word	0x0006999a
 8009d3c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8009d40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8009d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d50:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d58:	fb02 f303 	mul.w	r3, r2, r3
 8009d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8009d60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009d64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d66:	4413      	add	r3, r2
 8009d68:	0c1b      	lsrs	r3, r3, #16
 8009d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8009d6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d72:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009d76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8009d7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d7e:	085b      	lsrs	r3, r3, #1
 8009d80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8009d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d88:	fb03 f303 	mul.w	r3, r3, r3
 8009d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8009d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d94:	0b9b      	lsrs	r3, r3, #14
 8009d96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8009d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009da0:	fb02 f303 	mul.w	r3, r2, r3
 8009da4:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8009da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009dac:	0c1b      	lsrs	r3, r3, #16
 8009dae:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8009db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db2:	fb03 f303 	mul.w	r3, r3, r3
 8009db6:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8009db8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009dbc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8009dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009dc4:	0c1b      	lsrs	r3, r3, #16
 8009dc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8009dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dca:	fb03 f303 	mul.w	r3, r3, r3
 8009dce:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8009dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd4:	4413      	add	r3, r2
 8009dd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8009dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dda:	f7fe fa70 	bl	80082be <VL53L0X_isqrt>
 8009dde:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	041b      	lsls	r3, r3, #16
 8009de4:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	3332      	adds	r3, #50	; 0x32
 8009dea:	4a4b      	ldr	r2, [pc, #300]	; (8009f18 <VL53L0X_calc_sigma_estimate+0x48c>)
 8009dec:	fba2 2303 	umull	r2, r3, r2, r3
 8009df0:	095a      	lsrs	r2, r3, #5
 8009df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009df8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8009dfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e00:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8009e04:	fb02 f303 	mul.w	r3, r2, r3
 8009e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8009e0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e10:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009e14:	3308      	adds	r3, #8
 8009e16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8009e1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e1e:	4a3f      	ldr	r2, [pc, #252]	; (8009f1c <VL53L0X_calc_sigma_estimate+0x490>)
 8009e20:	fba2 2303 	umull	r2, r3, r2, r3
 8009e24:	0b5b      	lsrs	r3, r3, #13
 8009e26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8009e2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009e2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d902      	bls.n	8009e3a <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8009e34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009e36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8009e3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009e3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8009e48:	4a35      	ldr	r2, [pc, #212]	; (8009f20 <VL53L0X_calc_sigma_estimate+0x494>)
 8009e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e4e:	099b      	lsrs	r3, r3, #6
 8009e50:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8009e56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e5a:	441a      	add	r2, r3
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fe fa2b 	bl	80082be <VL53L0X_isqrt>
 8009e68:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	021b      	lsls	r3, r3, #8
 8009e6e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009e76:	4a2a      	ldr	r2, [pc, #168]	; (8009f20 <VL53L0X_calc_sigma_estimate+0x494>)
 8009e78:	fba2 2303 	umull	r2, r3, r2, r3
 8009e7c:	099b      	lsrs	r3, r3, #6
 8009e7e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8009e80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e84:	fb03 f303 	mul.w	r3, r3, r3
 8009e88:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	fb03 f303 	mul.w	r3, r3, r3
 8009e90:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8009e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e96:	4413      	add	r3, r2
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fe fa10 	bl	80082be <VL53L0X_isqrt>
 8009e9e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ea6:	fb02 f303 	mul.w	r3, r2, r3
 8009eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8009eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d009      	beq.n	8009ec8 <VL53L0X_calc_sigma_estimate+0x43c>
 8009eb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d005      	beq.n	8009ec8 <VL53L0X_calc_sigma_estimate+0x43c>
 8009ebc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009ec0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d903      	bls.n	8009ed0 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8009ec8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009ed6:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8009ee2:	6939      	ldr	r1, [r7, #16]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	9303      	str	r3, [sp, #12]
 8009ee8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009eec:	9302      	str	r3, [sp, #8]
 8009eee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009ef2:	9301      	str	r3, [sp, #4]
 8009ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009efc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f7ff fca8 	bl	8009854 <VL53L0X_calc_dmax>
 8009f04:	4603      	mov	r3, r0
 8009f06:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f0a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	37c0      	adds	r7, #192	; 0xc0
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	51eb851f 	.word	0x51eb851f
 8009f1c:	d1b71759 	.word	0xd1b71759
 8009f20:	10624dd3 	.word	0x10624dd3

08009f24 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b090      	sub	sp, #64	; 0x40
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	607a      	str	r2, [r7, #4]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	460b      	mov	r3, r1
 8009f32:	72fb      	strb	r3, [r7, #11]
 8009f34:	4613      	mov	r3, r2
 8009f36:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8009f44:	2300      	movs	r3, #0
 8009f46:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8009f56:	2300      	movs	r3, #0
 8009f58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8009f62:	2300      	movs	r3, #0
 8009f64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8009f72:	2300      	movs	r3, #0
 8009f74:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8009f76:	7afb      	ldrb	r3, [r7, #11]
 8009f78:	10db      	asrs	r3, r3, #3
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	f003 030f 	and.w	r3, r3, #15
 8009f80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009f84:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d017      	beq.n	8009fbc <VL53L0X_get_pal_range_status+0x98>
 8009f8c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009f90:	2b05      	cmp	r3, #5
 8009f92:	d013      	beq.n	8009fbc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8009f94:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009f98:	2b07      	cmp	r3, #7
 8009f9a:	d00f      	beq.n	8009fbc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8009f9c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009fa0:	2b0c      	cmp	r3, #12
 8009fa2:	d00b      	beq.n	8009fbc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8009fa4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009fa8:	2b0d      	cmp	r3, #13
 8009faa:	d007      	beq.n	8009fbc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8009fac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009fb0:	2b0e      	cmp	r3, #14
 8009fb2:	d003      	beq.n	8009fbc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8009fb4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009fb8:	2b0f      	cmp	r3, #15
 8009fba:	d103      	bne.n	8009fc4 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009fc2:	e002      	b.n	8009fca <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009fca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d109      	bne.n	8009fe6 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009fd2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	2100      	movs	r1, #0
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f7fc fc86 	bl	80068ec <VL53L0X_GetLimitCheckEnable>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8009fe6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d02e      	beq.n	800a04c <VL53L0X_get_pal_range_status+0x128>
 8009fee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d12a      	bne.n	800a04c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8009ff6:	f107 0310 	add.w	r3, r7, #16
 8009ffa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009ffe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f7ff fd43 	bl	8009a8c <VL53L0X_calc_sigma_estimate>
 800a006:	4603      	mov	r3, r0
 800a008:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800a00c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a010:	2b00      	cmp	r3, #0
 800a012:	d103      	bne.n	800a01c <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	b29a      	uxth	r2, r3
 800a018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a01a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800a01c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a020:	2b00      	cmp	r3, #0
 800a022:	d113      	bne.n	800a04c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800a024:	f107 0320 	add.w	r3, r7, #32
 800a028:	461a      	mov	r2, r3
 800a02a:	2100      	movs	r1, #0
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f7fc fce3 	bl	80069f8 <VL53L0X_GetLimitCheckValue>
 800a032:	4603      	mov	r3, r0
 800a034:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800a038:	6a3b      	ldr	r3, [r7, #32]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d006      	beq.n	800a04c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800a03e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a040:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800a042:	429a      	cmp	r2, r3
 800a044:	d902      	bls.n	800a04c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800a046:	2301      	movs	r3, #1
 800a048:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a04c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a050:	2b00      	cmp	r3, #0
 800a052:	d109      	bne.n	800a068 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a054:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800a058:	461a      	mov	r2, r3
 800a05a:	2102      	movs	r1, #2
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f7fc fc45 	bl	80068ec <VL53L0X_GetLimitCheckEnable>
 800a062:	4603      	mov	r3, r0
 800a064:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800a068:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d044      	beq.n	800a0fa <VL53L0X_get_pal_range_status+0x1d6>
 800a070:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a074:	2b00      	cmp	r3, #0
 800a076:	d140      	bne.n	800a0fa <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a078:	f107 031c 	add.w	r3, r7, #28
 800a07c:	461a      	mov	r2, r3
 800a07e:	2102      	movs	r1, #2
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f7fc fcb9 	bl	80069f8 <VL53L0X_GetLimitCheckValue>
 800a086:	4603      	mov	r3, r0
 800a088:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800a08c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a090:	2b00      	cmp	r3, #0
 800a092:	d107      	bne.n	800a0a4 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a094:	2201      	movs	r2, #1
 800a096:	21ff      	movs	r1, #255	; 0xff
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f7f9 fde9 	bl	8003c70 <VL53L0X_WrByte>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800a0a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d109      	bne.n	800a0c0 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800a0ac:	f107 0316 	add.w	r3, r7, #22
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	21b6      	movs	r1, #182	; 0xb6
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f7f9 feb9 	bl	8003e2c <VL53L0X_RdWord>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800a0c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d107      	bne.n	800a0d8 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	21ff      	movs	r1, #255	; 0xff
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f7f9 fdcf 	bl	8003c70 <VL53L0X_WrByte>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800a0d8:	8afb      	ldrh	r3, [r7, #22]
 800a0da:	025b      	lsls	r3, r3, #9
 800a0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0e2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d006      	beq.n	800a0fa <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800a0ec:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800a0ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d902      	bls.n	800a0fa <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a0fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d109      	bne.n	800a116 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a106:	461a      	mov	r2, r3
 800a108:	2103      	movs	r1, #3
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f7fc fbee 	bl	80068ec <VL53L0X_GetLimitCheckEnable>
 800a110:	4603      	mov	r3, r0
 800a112:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800a116:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d023      	beq.n	800a166 <VL53L0X_get_pal_range_status+0x242>
 800a11e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a122:	2b00      	cmp	r3, #0
 800a124:	d11f      	bne.n	800a166 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800a126:	893b      	ldrh	r3, [r7, #8]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d102      	bne.n	800a132 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	637b      	str	r3, [r7, #52]	; 0x34
 800a130:	e005      	b.n	800a13e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	021a      	lsls	r2, r3, #8
 800a136:	893b      	ldrh	r3, [r7, #8]
 800a138:	fbb2 f3f3 	udiv	r3, r2, r3
 800a13c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a13e:	f107 0318 	add.w	r3, r7, #24
 800a142:	461a      	mov	r2, r3
 800a144:	2103      	movs	r1, #3
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f7fc fc56 	bl	80069f8 <VL53L0X_GetLimitCheckValue>
 800a14c:	4603      	mov	r3, r0
 800a14e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d006      	beq.n	800a166 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800a158:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800a15a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d202      	bcs.n	800a166 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800a160:	2301      	movs	r3, #1
 800a162:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a166:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d14a      	bne.n	800a204 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800a16e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a172:	2b01      	cmp	r3, #1
 800a174:	d103      	bne.n	800a17e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800a176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a178:	22ff      	movs	r2, #255	; 0xff
 800a17a:	701a      	strb	r2, [r3, #0]
 800a17c:	e042      	b.n	800a204 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800a17e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a182:	2b01      	cmp	r3, #1
 800a184:	d007      	beq.n	800a196 <VL53L0X_get_pal_range_status+0x272>
 800a186:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d003      	beq.n	800a196 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800a18e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a192:	2b03      	cmp	r3, #3
 800a194:	d103      	bne.n	800a19e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800a196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a198:	2205      	movs	r2, #5
 800a19a:	701a      	strb	r2, [r3, #0]
 800a19c:	e032      	b.n	800a204 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800a19e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a1a2:	2b06      	cmp	r3, #6
 800a1a4:	d003      	beq.n	800a1ae <VL53L0X_get_pal_range_status+0x28a>
 800a1a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a1aa:	2b09      	cmp	r3, #9
 800a1ac:	d103      	bne.n	800a1b6 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800a1ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1b0:	2204      	movs	r2, #4
 800a1b2:	701a      	strb	r2, [r3, #0]
 800a1b4:	e026      	b.n	800a204 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800a1b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a1ba:	2b08      	cmp	r3, #8
 800a1bc:	d007      	beq.n	800a1ce <VL53L0X_get_pal_range_status+0x2aa>
 800a1be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a1c2:	2b0a      	cmp	r3, #10
 800a1c4:	d003      	beq.n	800a1ce <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800a1c6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d103      	bne.n	800a1d6 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800a1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1d0:	2203      	movs	r2, #3
 800a1d2:	701a      	strb	r2, [r3, #0]
 800a1d4:	e016      	b.n	800a204 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800a1d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a1da:	2b04      	cmp	r3, #4
 800a1dc:	d003      	beq.n	800a1e6 <VL53L0X_get_pal_range_status+0x2c2>
 800a1de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d103      	bne.n	800a1ee <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800a1e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1e8:	2202      	movs	r2, #2
 800a1ea:	701a      	strb	r2, [r3, #0]
 800a1ec:	e00a      	b.n	800a204 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800a1ee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d103      	bne.n	800a1fe <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800a1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	701a      	strb	r2, [r3, #0]
 800a1fc:	e002      	b.n	800a204 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800a1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a200:	2200      	movs	r2, #0
 800a202:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800a204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d102      	bne.n	800a212 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800a20c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a20e:	2200      	movs	r2, #0
 800a210:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a212:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800a216:	461a      	mov	r2, r3
 800a218:	2101      	movs	r1, #1
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f7fc fb66 	bl	80068ec <VL53L0X_GetLimitCheckEnable>
 800a220:	4603      	mov	r3, r0
 800a222:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800a226:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d14f      	bne.n	800a2ce <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800a22e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a232:	2b00      	cmp	r3, #0
 800a234:	d003      	beq.n	800a23e <VL53L0X_get_pal_range_status+0x31a>
 800a236:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d103      	bne.n	800a246 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800a23e:	2301      	movs	r3, #1
 800a240:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a244:	e002      	b.n	800a24c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a252:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800a256:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a25a:	2b04      	cmp	r3, #4
 800a25c:	d003      	beq.n	800a266 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800a25e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800a262:	2b00      	cmp	r3, #0
 800a264:	d103      	bne.n	800a26e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800a266:	2301      	movs	r3, #1
 800a268:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a26c:	e002      	b.n	800a274 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800a26e:	2300      	movs	r3, #0
 800a270:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a27a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800a27e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <VL53L0X_get_pal_range_status+0x36a>
 800a286:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d103      	bne.n	800a296 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800a28e:	2301      	movs	r3, #1
 800a290:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a294:	e002      	b.n	800a29c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a2a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800a2a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d003      	beq.n	800a2b6 <VL53L0X_get_pal_range_status+0x392>
 800a2ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d103      	bne.n	800a2be <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2bc:	e002      	b.n	800a2c4 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a2ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a2ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3740      	adds	r7, #64	; 0x40
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	af00      	add	r7, sp, #0
  while (1);
 800a2de:	e7fe      	b.n	800a2de <BSP_ErrorHandler+0x4>

0800a2e0 <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b088      	sub	sp, #32
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  if (Led == LED2)
 800a2ea:	79fb      	ldrb	r3, [r7, #7]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d124      	bne.n	800a33a <BSP_LED_Init+0x5a>
  {
    /* Enable the GPIO_LED clock */
    LED2_GPIO_CLK_ENABLE();
 800a2f0:	4b1f      	ldr	r3, [pc, #124]	; (800a370 <BSP_LED_Init+0x90>)
 800a2f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2f4:	4a1e      	ldr	r2, [pc, #120]	; (800a370 <BSP_LED_Init+0x90>)
 800a2f6:	f043 0302 	orr.w	r3, r3, #2
 800a2fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a2fc:	4b1c      	ldr	r3, [pc, #112]	; (800a370 <BSP_LED_Init+0x90>)
 800a2fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a300:	f003 0302 	and.w	r3, r3, #2
 800a304:	60bb      	str	r3, [r7, #8]
 800a306:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.Pin = LED_PIN[Led];
 800a308:	79fb      	ldrb	r3, [r7, #7]
 800a30a:	4a1a      	ldr	r2, [pc, #104]	; (800a374 <BSP_LED_Init+0x94>)
 800a30c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a310:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800a312:	2301      	movs	r3, #1
 800a314:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 800a316:	2300      	movs	r3, #0
 800a318:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a31a:	2303      	movs	r3, #3
 800a31c:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 800a31e:	f107 030c 	add.w	r3, r7, #12
 800a322:	4619      	mov	r1, r3
 800a324:	4814      	ldr	r0, [pc, #80]	; (800a378 <BSP_LED_Init+0x98>)
 800a326:	f003 fc27 	bl	800db78 <HAL_GPIO_Init>
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, GPIO_InitStructure.Pin, GPIO_PIN_SET);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	2201      	movs	r2, #1
 800a330:	4619      	mov	r1, r3
 800a332:	4811      	ldr	r0, [pc, #68]	; (800a378 <BSP_LED_Init+0x98>)
 800a334:	f003 fea4 	bl	800e080 <HAL_GPIO_WritePin>

    /* By default, turn off LED */
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }

}
 800a338:	e016      	b.n	800a368 <BSP_LED_Init+0x88>
    if (BSP_IO_Init() == IO_ERROR)
 800a33a:	f000 fda3 	bl	800ae84 <BSP_IO_Init>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b01      	cmp	r3, #1
 800a342:	d101      	bne.n	800a348 <BSP_LED_Init+0x68>
      BSP_ErrorHandler();
 800a344:	f7ff ffc9 	bl	800a2da <BSP_ErrorHandler>
    BSP_IO_ConfigPin(LED_PIN[Led], IO_MODE_OUTPUT);
 800a348:	79fb      	ldrb	r3, [r7, #7]
 800a34a:	4a0a      	ldr	r2, [pc, #40]	; (800a374 <BSP_LED_Init+0x94>)
 800a34c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a350:	2101      	movs	r1, #1
 800a352:	4618      	mov	r0, r3
 800a354:	f000 fdda 	bl	800af0c <BSP_IO_ConfigPin>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 800a358:	79fb      	ldrb	r3, [r7, #7]
 800a35a:	4a06      	ldr	r2, [pc, #24]	; (800a374 <BSP_LED_Init+0x94>)
 800a35c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a360:	2101      	movs	r1, #1
 800a362:	4618      	mov	r0, r3
 800a364:	f000 fdee 	bl	800af44 <BSP_IO_WritePin>
}
 800a368:	bf00      	nop
 800a36a:	3720      	adds	r7, #32
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	40021000 	.word	0x40021000
 800a374:	0801b9b4 	.word	0x0801b9b4
 800a378:	48000400 	.word	0x48000400

0800a37c <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	4603      	mov	r3, r0
 800a384:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 800a386:	79fb      	ldrb	r3, [r7, #7]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d109      	bne.n	800a3a0 <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 800a38c:	79fb      	ldrb	r3, [r7, #7]
 800a38e:	4a0a      	ldr	r2, [pc, #40]	; (800a3b8 <BSP_LED_On+0x3c>)
 800a390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a394:	2200      	movs	r2, #0
 800a396:	4619      	mov	r1, r3
 800a398:	4808      	ldr	r0, [pc, #32]	; (800a3bc <BSP_LED_On+0x40>)
 800a39a:	f003 fe71 	bl	800e080 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 800a39e:	e007      	b.n	800a3b0 <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 800a3a0:	79fb      	ldrb	r3, [r7, #7]
 800a3a2:	4a05      	ldr	r2, [pc, #20]	; (800a3b8 <BSP_LED_On+0x3c>)
 800a3a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f000 fdca 	bl	800af44 <BSP_IO_WritePin>
}
 800a3b0:	bf00      	nop
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	0801b9b4 	.word	0x0801b9b4
 800a3bc:	48000400 	.word	0x48000400

0800a3c0 <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 800a3ca:	79fb      	ldrb	r3, [r7, #7]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d109      	bne.n	800a3e4 <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 800a3d0:	79fb      	ldrb	r3, [r7, #7]
 800a3d2:	4a0a      	ldr	r2, [pc, #40]	; (800a3fc <BSP_LED_Off+0x3c>)
 800a3d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	4619      	mov	r1, r3
 800a3dc:	4808      	ldr	r0, [pc, #32]	; (800a400 <BSP_LED_Off+0x40>)
 800a3de:	f003 fe4f 	bl	800e080 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 800a3e2:	e007      	b.n	800a3f4 <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 800a3e4:	79fb      	ldrb	r3, [r7, #7]
 800a3e6:	4a05      	ldr	r2, [pc, #20]	; (800a3fc <BSP_LED_Off+0x3c>)
 800a3e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 fda8 	bl	800af44 <BSP_IO_WritePin>
}
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	0801b9b4 	.word	0x0801b9b4
 800a400:	48000400 	.word	0x48000400

0800a404 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 800a408:	4812      	ldr	r0, [pc, #72]	; (800a454 <I2C2_Init+0x50>)
 800a40a:	f004 fc60 	bl	800ecce <HAL_I2C_GetState>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d11d      	bne.n	800a450 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 800a414:	4b0f      	ldr	r3, [pc, #60]	; (800a454 <I2C2_Init+0x50>)
 800a416:	4a10      	ldr	r2, [pc, #64]	; (800a458 <I2C2_Init+0x54>)
 800a418:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 800a41a:	4b0e      	ldr	r3, [pc, #56]	; (800a454 <I2C2_Init+0x50>)
 800a41c:	4a0f      	ldr	r2, [pc, #60]	; (800a45c <I2C2_Init+0x58>)
 800a41e:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 800a420:	4b0c      	ldr	r3, [pc, #48]	; (800a454 <I2C2_Init+0x50>)
 800a422:	2270      	movs	r2, #112	; 0x70
 800a424:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a426:	4b0b      	ldr	r3, [pc, #44]	; (800a454 <I2C2_Init+0x50>)
 800a428:	2201      	movs	r2, #1
 800a42a:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a42c:	4b09      	ldr	r3, [pc, #36]	; (800a454 <I2C2_Init+0x50>)
 800a42e:	2200      	movs	r2, #0
 800a430:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 800a432:	4b08      	ldr	r3, [pc, #32]	; (800a454 <I2C2_Init+0x50>)
 800a434:	22ff      	movs	r2, #255	; 0xff
 800a436:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a438:	4b06      	ldr	r3, [pc, #24]	; (800a454 <I2C2_Init+0x50>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a43e:	4b05      	ldr	r3, [pc, #20]	; (800a454 <I2C2_Init+0x50>)
 800a440:	2200      	movs	r2, #0
 800a442:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 800a444:	4803      	ldr	r0, [pc, #12]	; (800a454 <I2C2_Init+0x50>)
 800a446:	f000 f80b 	bl	800a460 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 800a44a:	4802      	ldr	r0, [pc, #8]	; (800a454 <I2C2_Init+0x50>)
 800a44c:	f003 fe62 	bl	800e114 <HAL_I2C_Init>
  }
}
 800a450:	bf00      	nop
 800a452:	bd80      	pop	{r7, pc}
 800a454:	200019fc 	.word	0x200019fc
 800a458:	40005800 	.word	0x40005800
 800a45c:	40403e5d 	.word	0x40403e5d

0800a460 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b0ae      	sub	sp, #184	; 0xb8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a37      	ldr	r2, [pc, #220]	; (800a54c <I2C2_MspInit+0xec>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d168      	bne.n	800a544 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a472:	2380      	movs	r3, #128	; 0x80
 800a474:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 800a476:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a47a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 800a47c:	f107 0318 	add.w	r3, r7, #24
 800a480:	4618      	mov	r0, r3
 800a482:	f007 f9b9 	bl	80117f8 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 800a486:	4b32      	ldr	r3, [pc, #200]	; (800a550 <I2C2_MspInit+0xf0>)
 800a488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a48a:	4a31      	ldr	r2, [pc, #196]	; (800a550 <I2C2_MspInit+0xf0>)
 800a48c:	f043 0302 	orr.w	r3, r3, #2
 800a490:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a492:	4b2f      	ldr	r3, [pc, #188]	; (800a550 <I2C2_MspInit+0xf0>)
 800a494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a496:	f003 0302 	and.w	r3, r3, #2
 800a49a:	617b      	str	r3, [r7, #20]
 800a49c:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 800a49e:	4b2c      	ldr	r3, [pc, #176]	; (800a550 <I2C2_MspInit+0xf0>)
 800a4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4a2:	4a2b      	ldr	r2, [pc, #172]	; (800a550 <I2C2_MspInit+0xf0>)
 800a4a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4aa:	4b29      	ldr	r3, [pc, #164]	; (800a550 <I2C2_MspInit+0xf0>)
 800a4ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4b2:	613b      	str	r3, [r7, #16]
 800a4b4:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 800a4b6:	2310      	movs	r3, #16
 800a4b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 800a4bc:	2312      	movs	r3, #18
 800a4be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 800a4ce:	2304      	movs	r3, #4
 800a4d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 800a4d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a4d8:	4619      	mov	r1, r3
 800a4da:	481e      	ldr	r0, [pc, #120]	; (800a554 <I2C2_MspInit+0xf4>)
 800a4dc:	f003 fb4c 	bl	800db78 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 800a4e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a4e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 800a4e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	481a      	ldr	r0, [pc, #104]	; (800a558 <I2C2_MspInit+0xf8>)
 800a4f0:	f003 fb42 	bl	800db78 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 800a4f4:	4b16      	ldr	r3, [pc, #88]	; (800a550 <I2C2_MspInit+0xf0>)
 800a4f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4f8:	4a15      	ldr	r2, [pc, #84]	; (800a550 <I2C2_MspInit+0xf0>)
 800a4fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a4fe:	6593      	str	r3, [r2, #88]	; 0x58
 800a500:	4b13      	ldr	r3, [pc, #76]	; (800a550 <I2C2_MspInit+0xf0>)
 800a502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a508:	60fb      	str	r3, [r7, #12]
 800a50a:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 800a50c:	4b10      	ldr	r3, [pc, #64]	; (800a550 <I2C2_MspInit+0xf0>)
 800a50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a510:	4a0f      	ldr	r2, [pc, #60]	; (800a550 <I2C2_MspInit+0xf0>)
 800a512:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a516:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 800a518:	4b0d      	ldr	r3, [pc, #52]	; (800a550 <I2C2_MspInit+0xf0>)
 800a51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51c:	4a0c      	ldr	r2, [pc, #48]	; (800a550 <I2C2_MspInit+0xf0>)
 800a51e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a522:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 800a524:	2200      	movs	r2, #0
 800a526:	2100      	movs	r1, #0
 800a528:	2021      	movs	r0, #33	; 0x21
 800a52a:	f003 f94e 	bl	800d7ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 800a52e:	2021      	movs	r0, #33	; 0x21
 800a530:	f003 f967 	bl	800d802 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 800a534:	2200      	movs	r2, #0
 800a536:	2100      	movs	r1, #0
 800a538:	2022      	movs	r0, #34	; 0x22
 800a53a:	f003 f946 	bl	800d7ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 800a53e:	2022      	movs	r0, #34	; 0x22
 800a540:	f003 f95f 	bl	800d802 <HAL_NVIC_EnableIRQ>
  }
}
 800a544:	bf00      	nop
 800a546:	37b8      	adds	r7, #184	; 0xb8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	40005800 	.word	0x40005800
 800a550:	40021000 	.word	0x40021000
 800a554:	48001c00 	.word	0x48001c00
 800a558:	48000400 	.word	0x48000400

0800a55c <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 800a560:	4806      	ldr	r0, [pc, #24]	; (800a57c <I2C2_DeInit+0x20>)
 800a562:	f004 fbb4 	bl	800ecce <HAL_I2C_GetState>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d005      	beq.n	800a578 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 800a56c:	4803      	ldr	r0, [pc, #12]	; (800a57c <I2C2_DeInit+0x20>)
 800a56e:	f003 fe60 	bl	800e232 <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 800a572:	4802      	ldr	r0, [pc, #8]	; (800a57c <I2C2_DeInit+0x20>)
 800a574:	f000 f804 	bl	800a580 <I2C2_MspDeInit>
  }
}
 800a578:	bf00      	nop
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	200019fc 	.word	0x200019fc

0800a580 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a1f      	ldr	r2, [pc, #124]	; (800a60c <I2C2_MspDeInit+0x8c>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d138      	bne.n	800a604 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 800a592:	4b1f      	ldr	r3, [pc, #124]	; (800a610 <I2C2_MspDeInit+0x90>)
 800a594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a596:	4a1e      	ldr	r2, [pc, #120]	; (800a610 <I2C2_MspDeInit+0x90>)
 800a598:	f043 0302 	orr.w	r3, r3, #2
 800a59c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a59e:	4b1c      	ldr	r3, [pc, #112]	; (800a610 <I2C2_MspDeInit+0x90>)
 800a5a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5a2:	f003 0302 	and.w	r3, r3, #2
 800a5a6:	60fb      	str	r3, [r7, #12]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 800a5aa:	4b19      	ldr	r3, [pc, #100]	; (800a610 <I2C2_MspDeInit+0x90>)
 800a5ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ae:	4a18      	ldr	r2, [pc, #96]	; (800a610 <I2C2_MspDeInit+0x90>)
 800a5b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5b6:	4b16      	ldr	r3, [pc, #88]	; (800a610 <I2C2_MspDeInit+0x90>)
 800a5b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5be:	60bb      	str	r3, [r7, #8]
 800a5c0:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 800a5c2:	2110      	movs	r1, #16
 800a5c4:	4813      	ldr	r0, [pc, #76]	; (800a614 <I2C2_MspDeInit+0x94>)
 800a5c6:	f003 fc69 	bl	800de9c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 800a5ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a5ce:	4812      	ldr	r0, [pc, #72]	; (800a618 <I2C2_MspDeInit+0x98>)
 800a5d0:	f003 fc64 	bl	800de9c <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 800a5d4:	4b0e      	ldr	r3, [pc, #56]	; (800a610 <I2C2_MspDeInit+0x90>)
 800a5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d8:	4a0d      	ldr	r2, [pc, #52]	; (800a610 <I2C2_MspDeInit+0x90>)
 800a5da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a5de:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 800a5e0:	4b0b      	ldr	r3, [pc, #44]	; (800a610 <I2C2_MspDeInit+0x90>)
 800a5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e4:	4a0a      	ldr	r2, [pc, #40]	; (800a610 <I2C2_MspDeInit+0x90>)
 800a5e6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a5ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 800a5ec:	4b08      	ldr	r3, [pc, #32]	; (800a610 <I2C2_MspDeInit+0x90>)
 800a5ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5f0:	4a07      	ldr	r2, [pc, #28]	; (800a610 <I2C2_MspDeInit+0x90>)
 800a5f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a5f6:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 800a5f8:	2021      	movs	r0, #33	; 0x21
 800a5fa:	f003 f910 	bl	800d81e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 800a5fe:	2022      	movs	r0, #34	; 0x22
 800a600:	f003 f90d 	bl	800d81e <HAL_NVIC_DisableIRQ>
  }
}
 800a604:	bf00      	nop
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	40005800 	.word	0x40005800
 800a610:	40021000 	.word	0x40021000
 800a614:	48001c00 	.word	0x48001c00
 800a618:	48000400 	.word	0x48000400

0800a61c <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 800a61c:	b590      	push	{r4, r7, lr}
 800a61e:	b089      	sub	sp, #36	; 0x24
 800a620:	af04      	add	r7, sp, #16
 800a622:	4604      	mov	r4, r0
 800a624:	4608      	mov	r0, r1
 800a626:	4611      	mov	r1, r2
 800a628:	461a      	mov	r2, r3
 800a62a:	4623      	mov	r3, r4
 800a62c:	80fb      	strh	r3, [r7, #6]
 800a62e:	4603      	mov	r3, r0
 800a630:	80bb      	strh	r3, [r7, #4]
 800a632:	460b      	mov	r3, r1
 800a634:	807b      	strh	r3, [r7, #2]
 800a636:	4613      	mov	r3, r2
 800a638:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800a63e:	b672      	cpsid	i
}
 800a640:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 800a642:	4b0d      	ldr	r3, [pc, #52]	; (800a678 <I2C2_WriteData+0x5c>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	8878      	ldrh	r0, [r7, #2]
 800a648:	88ba      	ldrh	r2, [r7, #4]
 800a64a:	88f9      	ldrh	r1, [r7, #6]
 800a64c:	9302      	str	r3, [sp, #8]
 800a64e:	2301      	movs	r3, #1
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	1c7b      	adds	r3, r7, #1
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	4603      	mov	r3, r0
 800a658:	4808      	ldr	r0, [pc, #32]	; (800a67c <I2C2_WriteData+0x60>)
 800a65a:	f004 f803 	bl	800e664 <HAL_I2C_Mem_Write>
 800a65e:	4603      	mov	r3, r0
 800a660:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800a662:	b662      	cpsie	i
}
 800a664:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 800a666:	7bfb      	ldrb	r3, [r7, #15]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800a66c:	f000 f890 	bl	800a790 <I2C2_Error>
  }
}
 800a670:	bf00      	nop
 800a672:	3714      	adds	r7, #20
 800a674:	46bd      	mov	sp, r7
 800a676:	bd90      	pop	{r4, r7, pc}
 800a678:	2000053c 	.word	0x2000053c
 800a67c:	200019fc 	.word	0x200019fc

0800a680 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b088      	sub	sp, #32
 800a684:	af04      	add	r7, sp, #16
 800a686:	4603      	mov	r3, r0
 800a688:	80fb      	strh	r3, [r7, #6]
 800a68a:	460b      	mov	r3, r1
 800a68c:	80bb      	strh	r3, [r7, #4]
 800a68e:	4613      	mov	r3, r2
 800a690:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 800a696:	2300      	movs	r3, #0
 800a698:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800a69a:	b672      	cpsid	i
}
 800a69c:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 800a69e:	4b10      	ldr	r3, [pc, #64]	; (800a6e0 <I2C2_ReadData+0x60>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	8878      	ldrh	r0, [r7, #2]
 800a6a4:	88ba      	ldrh	r2, [r7, #4]
 800a6a6:	88f9      	ldrh	r1, [r7, #6]
 800a6a8:	9302      	str	r3, [sp, #8]
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	f107 030e 	add.w	r3, r7, #14
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	480b      	ldr	r0, [pc, #44]	; (800a6e4 <I2C2_ReadData+0x64>)
 800a6b8:	f004 f8e8 	bl	800e88c <HAL_I2C_Mem_Read>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800a6c0:	b662      	cpsie	i
}
 800a6c2:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d004      	beq.n	800a6d4 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800a6ca:	f000 f861 	bl	800a790 <I2C2_Error>
    HAL_Delay(200);
 800a6ce:	20c8      	movs	r0, #200	; 0xc8
 800a6d0:	f001 fce0 	bl	800c094 <HAL_Delay>
  }

  return value;
 800a6d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	2000053c 	.word	0x2000053c
 800a6e4:	200019fc 	.word	0x200019fc

0800a6e8 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	6039      	str	r1, [r7, #0]
 800a6f2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6fc:	b672      	cpsid	i
}
 800a6fe:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 800a700:	88f9      	ldrh	r1, [r7, #6]
 800a702:	2332      	movs	r3, #50	; 0x32
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	480a      	ldr	r0, [pc, #40]	; (800a730 <I2C2_isDeviceReady+0x48>)
 800a708:	f004 f9da 	bl	800eac0 <HAL_I2C_IsDeviceReady>
 800a70c:	4603      	mov	r3, r0
 800a70e:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800a710:	b662      	cpsie	i
}
 800a712:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800a714:	7bfb      	ldrb	r3, [r7, #15]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d004      	beq.n	800a724 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800a71a:	f000 f839 	bl	800a790 <I2C2_Error>
    HAL_Delay(200);
 800a71e:	20c8      	movs	r0, #200	; 0xc8
 800a720:	f001 fcb8 	bl	800c094 <HAL_Delay>
  }

  return value;
 800a724:	7bbb      	ldrb	r3, [r7, #14]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	200019fc 	.word	0x200019fc

0800a734 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b08a      	sub	sp, #40	; 0x28
 800a738:	af04      	add	r7, sp, #16
 800a73a:	607b      	str	r3, [r7, #4]
 800a73c:	4603      	mov	r3, r0
 800a73e:	81fb      	strh	r3, [r7, #14]
 800a740:	460b      	mov	r3, r1
 800a742:	81bb      	strh	r3, [r7, #12]
 800a744:	4613      	mov	r3, r2
 800a746:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 800a74c:	b672      	cpsid	i
}
 800a74e:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 800a750:	4b0d      	ldr	r3, [pc, #52]	; (800a788 <I2C2_ReadBuffer+0x54>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	8978      	ldrh	r0, [r7, #10]
 800a756:	89ba      	ldrh	r2, [r7, #12]
 800a758:	89f9      	ldrh	r1, [r7, #14]
 800a75a:	9302      	str	r3, [sp, #8]
 800a75c:	8c3b      	ldrh	r3, [r7, #32]
 800a75e:	9301      	str	r3, [sp, #4]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	4603      	mov	r3, r0
 800a766:	4809      	ldr	r0, [pc, #36]	; (800a78c <I2C2_ReadBuffer+0x58>)
 800a768:	f004 f890 	bl	800e88c <HAL_I2C_Mem_Read>
 800a76c:	4603      	mov	r3, r0
 800a76e:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 800a770:	b662      	cpsie	i
}
 800a772:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800a774:	7dfb      	ldrb	r3, [r7, #23]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d001      	beq.n	800a77e <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800a77a:	f000 f809 	bl	800a790 <I2C2_Error>
  }

  return status;
 800a77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3718      	adds	r7, #24
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	2000053c 	.word	0x2000053c
 800a78c:	200019fc 	.word	0x200019fc

0800a790 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 800a794:	f7ff fda1 	bl	800a2da <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 800a798:	4803      	ldr	r0, [pc, #12]	; (800a7a8 <I2C2_Error+0x18>)
 800a79a:	f003 fd4a 	bl	800e232 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 800a79e:	f7ff fe31 	bl	800a404 <I2C2_Init>
}
 800a7a2:	bf00      	nop
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	200019fc 	.word	0x200019fc

0800a7ac <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]

  if (HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f004 fa8a 	bl	800ecce <HAL_I2C_GetState>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d132      	bne.n	800a826 <I2Cx_Init+0x7a>
  {
    if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a1b      	ldr	r2, [pc, #108]	; (800a830 <I2Cx_Init+0x84>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d103      	bne.n	800a7d0 <I2Cx_Init+0x24>
    {
      /* TS (Capacitive Touch Panel) and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_TS_I2Cx;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a1a      	ldr	r2, [pc, #104]	; (800a834 <I2Cx_Init+0x88>)
 800a7cc:	601a      	str	r2, [r3, #0]
 800a7ce:	e012      	b.n	800a7f6 <I2Cx_Init+0x4a>

      /* Need to enable MFX, and in doing so, initialize I2C at the same time */
      /* MFX_IO_Init();*/

    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cAudioHandler))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a19      	ldr	r2, [pc, #100]	; (800a838 <I2Cx_Init+0x8c>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d103      	bne.n	800a7e0 <I2Cx_Init+0x34>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a18      	ldr	r2, [pc, #96]	; (800a83c <I2Cx_Init+0x90>)
 800a7dc:	601a      	str	r2, [r3, #0]
 800a7de:	e00a      	b.n	800a7f6 <I2Cx_Init+0x4a>
    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cCameraHandler))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a17      	ldr	r2, [pc, #92]	; (800a840 <I2Cx_Init+0x94>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d103      	bne.n	800a7f0 <I2Cx_Init+0x44>
    {
      i2c_handler->Instance = DISCOVERY_CAMERA_I2Cx;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a12      	ldr	r2, [pc, #72]	; (800a834 <I2Cx_Init+0x88>)
 800a7ec:	601a      	str	r2, [r3, #0]
 800a7ee:	e002      	b.n	800a7f6 <I2Cx_Init+0x4a>
    }
    else
    {
      /* External, EEPROM and Arduino connector I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a10      	ldr	r2, [pc, #64]	; (800a834 <I2Cx_Init+0x88>)
 800a7f4:	601a      	str	r2, [r3, #0]
    }

    i2c_handler->Init.Timing           = DISCOVERY_I2C_TIMING;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a12      	ldr	r2, [pc, #72]	; (800a844 <I2Cx_Init+0x98>)
 800a7fa:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0x70;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2270      	movs	r2, #112	; 0x70
 800a800:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0xFF;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	22ff      	movs	r2, #255	; 0xff
 800a812:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	621a      	str	r2, [r3, #32]


    /* Init the I2C */
    HAL_I2C_Init(i2c_handler);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f003 fc77 	bl	800e114 <HAL_I2C_Init>

  }

}
 800a826:	bf00      	nop
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	20001a50 	.word	0x20001a50
 800a834:	40005800 	.word	0x40005800
 800a838:	20001aa4 	.word	0x20001aa4
 800a83c:	40005400 	.word	0x40005400
 800a840:	20001af8 	.word	0x20001af8
 800a844:	90112626 	.word	0x90112626

0800a848 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b08a      	sub	sp, #40	; 0x28
 800a84c:	af04      	add	r7, sp, #16
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	4608      	mov	r0, r1
 800a852:	4611      	mov	r1, r2
 800a854:	461a      	mov	r2, r3
 800a856:	4603      	mov	r3, r0
 800a858:	72fb      	strb	r3, [r7, #11]
 800a85a:	460b      	mov	r3, r1
 800a85c:	813b      	strh	r3, [r7, #8]
 800a85e:	4613      	mov	r3, r2
 800a860:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a862:	2300      	movs	r3, #0
 800a864:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a866:	7afb      	ldrb	r3, [r7, #11]
 800a868:	b299      	uxth	r1, r3
 800a86a:	88f8      	ldrh	r0, [r7, #6]
 800a86c:	893a      	ldrh	r2, [r7, #8]
 800a86e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a872:	9302      	str	r3, [sp, #8]
 800a874:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a876:	9301      	str	r3, [sp, #4]
 800a878:	6a3b      	ldr	r3, [r7, #32]
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	4603      	mov	r3, r0
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f004 f804 	bl	800e88c <HAL_I2C_Mem_Read>
 800a884:	4603      	mov	r3, r0
 800a886:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 800a888:	7dfb      	ldrb	r3, [r7, #23]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d004      	beq.n	800a898 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800a88e:	7afb      	ldrb	r3, [r7, #11]
 800a890:	4619      	mov	r1, r3
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f000 f832 	bl	800a8fc <I2Cx_Error>
  }
  return status;
 800a898:	7dfb      	ldrb	r3, [r7, #23]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3718      	adds	r7, #24
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b08a      	sub	sp, #40	; 0x28
 800a8a6:	af04      	add	r7, sp, #16
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	4608      	mov	r0, r1
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	72fb      	strb	r3, [r7, #11]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	813b      	strh	r3, [r7, #8]
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a8c0:	7afb      	ldrb	r3, [r7, #11]
 800a8c2:	b299      	uxth	r1, r3
 800a8c4:	88f8      	ldrh	r0, [r7, #6]
 800a8c6:	893a      	ldrh	r2, [r7, #8]
 800a8c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a8cc:	9302      	str	r3, [sp, #8]
 800a8ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	6a3b      	ldr	r3, [r7, #32]
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f003 fec3 	bl	800e664 <HAL_I2C_Mem_Write>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 800a8e2:	7dfb      	ldrb	r3, [r7, #23]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d004      	beq.n	800a8f2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initialize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800a8e8:	7afb      	ldrb	r3, [r7, #11]
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f000 f805 	bl	800a8fc <I2Cx_Error>
  }
  return status;
 800a8f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3718      	adds	r7, #24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	460b      	mov	r3, r1
 800a906:	70fb      	strb	r3, [r7, #3]
  BSP_ErrorHandler();
 800a908:	f7ff fce7 	bl	800a2da <BSP_ErrorHandler>

  /* De-initialize the I2C communication bus */
  if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a08      	ldr	r2, [pc, #32]	; (800a930 <I2Cx_Error+0x34>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d102      	bne.n	800a91a <I2Cx_Error+0x1e>
  {
    I2C2_DeInit();
 800a914:	f7ff fe22 	bl	800a55c <I2C2_DeInit>
 800a918:	e002      	b.n	800a920 <I2Cx_Error+0x24>
  }
  else
  {
    HAL_I2C_DeInit(i2c_handler);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f003 fc89 	bl	800e232 <HAL_I2C_DeInit>
  }

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f7ff ff43 	bl	800a7ac <I2Cx_Init>
}
 800a926:	bf00      	nop
 800a928:	3708      	adds	r7, #8
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	20001a50 	.word	0x20001a50

0800a934 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 800a938:	f7ff fd64 	bl	800a404 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 800a93c:	2104      	movs	r1, #4
 800a93e:	2084      	movs	r0, #132	; 0x84
 800a940:	f7ff fed2 	bl	800a6e8 <I2C2_isDeviceReady>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 800a94a:	f7ff fcc6 	bl	800a2da <BSP_ErrorHandler>
  }
}
 800a94e:	bf00      	nop
 800a950:	bd80      	pop	{r7, pc}
	...

0800a954 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b088      	sub	sp, #32
 800a958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800a95a:	4b19      	ldr	r3, [pc, #100]	; (800a9c0 <MFX_IO_DeInit+0x6c>)
 800a95c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a95e:	4a18      	ldr	r2, [pc, #96]	; (800a9c0 <MFX_IO_DeInit+0x6c>)
 800a960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a964:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a966:	4b16      	ldr	r3, [pc, #88]	; (800a9c0 <MFX_IO_DeInit+0x6c>)
 800a968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a96a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a96e:	60bb      	str	r3, [r7, #8]
 800a970:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 800a972:	2340      	movs	r3, #64	; 0x40
 800a974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800a976:	2301      	movs	r3, #1
 800a978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a97a:	2300      	movs	r3, #0
 800a97c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 800a97e:	2302      	movs	r3, #2
 800a980:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 800a982:	f107 030c 	add.w	r3, r7, #12
 800a986:	4619      	mov	r1, r3
 800a988:	480e      	ldr	r0, [pc, #56]	; (800a9c4 <MFX_IO_DeInit+0x70>)
 800a98a:	f003 f8f5 	bl	800db78 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800a98e:	2017      	movs	r0, #23
 800a990:	f002 ff45 	bl	800d81e <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 800a994:	4b0a      	ldr	r3, [pc, #40]	; (800a9c0 <MFX_IO_DeInit+0x6c>)
 800a996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a998:	4a09      	ldr	r2, [pc, #36]	; (800a9c0 <MFX_IO_DeInit+0x6c>)
 800a99a:	f043 0304 	orr.w	r3, r3, #4
 800a99e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a9a0:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <MFX_IO_DeInit+0x6c>)
 800a9a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9a4:	f003 0304 	and.w	r3, r3, #4
 800a9a8:	607b      	str	r3, [r7, #4]
 800a9aa:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 800a9ac:	2120      	movs	r1, #32
 800a9ae:	4806      	ldr	r0, [pc, #24]	; (800a9c8 <MFX_IO_DeInit+0x74>)
 800a9b0:	f003 fa74 	bl	800de9c <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 800a9b4:	f7ff fdd2 	bl	800a55c <I2C2_DeInit>
}
 800a9b8:	bf00      	nop
 800a9ba:	3720      	adds	r7, #32
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	40021000 	.word	0x40021000
 800a9c4:	48001c00 	.word	0x48001c00
 800a9c8:	48000800 	.word	0x48000800

0800a9cc <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 800a9d2:	4b13      	ldr	r3, [pc, #76]	; (800aa20 <MFX_IO_ITConfig+0x54>)
 800a9d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9d6:	4a12      	ldr	r2, [pc, #72]	; (800aa20 <MFX_IO_ITConfig+0x54>)
 800a9d8:	f043 0304 	orr.w	r3, r3, #4
 800a9dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a9de:	4b10      	ldr	r3, [pc, #64]	; (800aa20 <MFX_IO_ITConfig+0x54>)
 800a9e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e2:	f003 0304 	and.w	r3, r3, #4
 800a9e6:	603b      	str	r3, [r7, #0]
 800a9e8:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 800a9ea:	2320      	movs	r3, #32
 800a9ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 800a9f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800a9fa:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 800a9fc:	1d3b      	adds	r3, r7, #4
 800a9fe:	4619      	mov	r1, r3
 800aa00:	4808      	ldr	r0, [pc, #32]	; (800aa24 <MFX_IO_ITConfig+0x58>)
 800aa02:	f003 f8b9 	bl	800db78 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 800aa06:	220f      	movs	r2, #15
 800aa08:	210f      	movs	r1, #15
 800aa0a:	2017      	movs	r0, #23
 800aa0c:	f002 fedd 	bl	800d7ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800aa10:	2017      	movs	r0, #23
 800aa12:	f002 fef6 	bl	800d802 <HAL_NVIC_EnableIRQ>
}
 800aa16:	bf00      	nop
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	40021000 	.word	0x40021000
 800aa24:	48000800 	.word	0x48000800

0800aa28 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800aa2e:	4b0e      	ldr	r3, [pc, #56]	; (800aa68 <MFX_IO_EnableWakeupPin+0x40>)
 800aa30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa32:	4a0d      	ldr	r2, [pc, #52]	; (800aa68 <MFX_IO_EnableWakeupPin+0x40>)
 800aa34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa38:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa3a:	4b0b      	ldr	r3, [pc, #44]	; (800aa68 <MFX_IO_EnableWakeupPin+0x40>)
 800aa3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa42:	603b      	str	r3, [r7, #0]
 800aa44:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 800aa46:	2340      	movs	r3, #64	; 0x40
 800aa48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800aa4e:	2302      	movs	r3, #2
 800aa50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800aa52:	2300      	movs	r3, #0
 800aa54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 800aa56:	1d3b      	adds	r3, r7, #4
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4804      	ldr	r0, [pc, #16]	; (800aa6c <MFX_IO_EnableWakeupPin+0x44>)
 800aa5c:	f003 f88c 	bl	800db78 <HAL_GPIO_Init>
}
 800aa60:	bf00      	nop
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	40021000 	.word	0x40021000
 800aa6c:	48001c00 	.word	0x48001c00

0800aa70 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 800aa74:	2201      	movs	r2, #1
 800aa76:	2140      	movs	r1, #64	; 0x40
 800aa78:	4806      	ldr	r0, [pc, #24]	; (800aa94 <MFX_IO_Wakeup+0x24>)
 800aa7a:	f003 fb01 	bl	800e080 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 800aa7e:	2001      	movs	r0, #1
 800aa80:	f001 fb08 	bl	800c094 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 800aa84:	2200      	movs	r2, #0
 800aa86:	2140      	movs	r1, #64	; 0x40
 800aa88:	4802      	ldr	r0, [pc, #8]	; (800aa94 <MFX_IO_Wakeup+0x24>)
 800aa8a:	f003 faf9 	bl	800e080 <HAL_GPIO_WritePin>
}
 800aa8e:	bf00      	nop
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	48001c00 	.word	0x48001c00

0800aa98 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	80fb      	strh	r3, [r7, #6]
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	717b      	strb	r3, [r7, #5]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 800aaaa:	797b      	ldrb	r3, [r7, #5]
 800aaac:	b299      	uxth	r1, r3
 800aaae:	793b      	ldrb	r3, [r7, #4]
 800aab0:	88f8      	ldrh	r0, [r7, #6]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f7ff fdb2 	bl	800a61c <I2C2_WriteData>
}
 800aab8:	bf00      	nop
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	4603      	mov	r3, r0
 800aac8:	460a      	mov	r2, r1
 800aaca:	80fb      	strh	r3, [r7, #6]
 800aacc:	4613      	mov	r3, r2
 800aace:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 800aad0:	797b      	ldrb	r3, [r7, #5]
 800aad2:	b299      	uxth	r1, r3
 800aad4:	88fb      	ldrh	r3, [r7, #6]
 800aad6:	2201      	movs	r2, #1
 800aad8:	4618      	mov	r0, r3
 800aada:	f7ff fdd1 	bl	800a680 <I2C2_ReadData>
 800aade:	4603      	mov	r3, r0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af02      	add	r7, sp, #8
 800aaee:	60ba      	str	r2, [r7, #8]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	81fb      	strh	r3, [r7, #14]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	737b      	strb	r3, [r7, #13]
 800aafa:	4613      	mov	r3, r2
 800aafc:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800aafe:	7b7b      	ldrb	r3, [r7, #13]
 800ab00:	b299      	uxth	r1, r3
 800ab02:	89f8      	ldrh	r0, [r7, #14]
 800ab04:	88fb      	ldrh	r3, [r7, #6]
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f7ff fe12 	bl	800a734 <I2C2_ReadBuffer>
 800ab10:	4603      	mov	r3, r0
 800ab12:	b29b      	uxth	r3, r3
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f001 fab5 	bl	800c094 <HAL_Delay>
}
 800ab2a:	bf00      	nop
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
	...

0800ab34 <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b08c      	sub	sp, #48	; 0x30
 800ab38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ab3a:	4b38      	ldr	r3, [pc, #224]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800ab3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab3e:	4a37      	ldr	r2, [pc, #220]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800ab40:	f043 0301 	orr.w	r3, r3, #1
 800ab44:	6513      	str	r3, [r2, #80]	; 0x50
 800ab46:	4b35      	ldr	r3, [pc, #212]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800ab48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab4a:	f003 0301 	and.w	r3, r3, #1
 800ab4e:	61bb      	str	r3, [r7, #24]
 800ab50:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ab52:	4b32      	ldr	r3, [pc, #200]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800ab54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab56:	4a31      	ldr	r2, [pc, #196]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800ab58:	f043 0308 	orr.w	r3, r3, #8
 800ab5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab5e:	4b2f      	ldr	r3, [pc, #188]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800ab60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab62:	f003 0308 	and.w	r3, r3, #8
 800ab66:	617b      	str	r3, [r7, #20]
 800ab68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ab6a:	4b2c      	ldr	r3, [pc, #176]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800ab6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab6e:	4a2b      	ldr	r2, [pc, #172]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800ab70:	f043 0310 	orr.w	r3, r3, #16
 800ab74:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab76:	4b29      	ldr	r3, [pc, #164]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800ab78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab7a:	f003 0310 	and.w	r3, r3, #16
 800ab7e:	613b      	str	r3, [r7, #16]
 800ab80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800ab82:	4b26      	ldr	r3, [pc, #152]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800ab84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab86:	4a25      	ldr	r2, [pc, #148]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800ab88:	f043 0320 	orr.w	r3, r3, #32
 800ab8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab8e:	4b23      	ldr	r3, [pc, #140]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800ab90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab92:	f003 0320 	and.w	r3, r3, #32
 800ab96:	60fb      	str	r3, [r7, #12]
 800ab98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800ab9a:	4b20      	ldr	r3, [pc, #128]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800ab9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab9e:	4a1f      	ldr	r2, [pc, #124]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800aba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aba6:	4b1d      	ldr	r3, [pc, #116]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800aba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abae:	60bb      	str	r3, [r7, #8]
 800abb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800abb2:	4b1a      	ldr	r3, [pc, #104]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800abb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abb6:	4a19      	ldr	r2, [pc, #100]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800abb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abbc:	6593      	str	r3, [r2, #88]	; 0x58
 800abbe:	4b17      	ldr	r3, [pc, #92]	; (800ac1c <FMC_BANK1_MspInit+0xe8>)
 800abc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abc6:	607b      	str	r3, [r7, #4]
 800abc8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800abca:	f005 febd 	bl	8010948 <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 800abce:	2302      	movs	r3, #2
 800abd0:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 800abd2:	2301      	movs	r3, #1
 800abd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800abd6:	2303      	movs	r3, #3
 800abd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 800abda:	230c      	movs	r3, #12
 800abdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 800abde:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800abe2:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 800abe4:	f107 031c 	add.w	r3, r7, #28
 800abe8:	4619      	mov	r1, r3
 800abea:	480d      	ldr	r0, [pc, #52]	; (800ac20 <FMC_BANK1_MspInit+0xec>)
 800abec:	f002 ffc4 	bl	800db78 <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 800abf0:	f64f 7380 	movw	r3, #65408	; 0xff80
 800abf4:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 800abf6:	f107 031c 	add.w	r3, r7, #28
 800abfa:	4619      	mov	r1, r3
 800abfc:	4809      	ldr	r0, [pc, #36]	; (800ac24 <FMC_BANK1_MspInit+0xf0>)
 800abfe:	f002 ffbb 	bl	800db78 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 800ac02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 800ac08:	f107 031c 	add.w	r3, r7, #28
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4804      	ldr	r0, [pc, #16]	; (800ac20 <FMC_BANK1_MspInit+0xec>)
 800ac10:	f002 ffb2 	bl	800db78 <HAL_GPIO_Init>

}
 800ac14:	bf00      	nop
 800ac16:	3730      	adds	r7, #48	; 0x30
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	40021000 	.word	0x40021000
 800ac20:	48000c00 	.word	0x48000c00
 800ac24:	48001000 	.word	0x48001000

0800ac28 <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b0a4      	sub	sp, #144	; 0x90
 800ac2c:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 800ac2e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800ac32:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 800ac34:	4b26      	ldr	r3, [pc, #152]	; (800acd0 <FMC_BANK1_Init+0xa8>)
 800ac36:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 800ac40:	2301      	movs	r3, #1
 800ac42:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 800ac48:	2302      	movs	r3, #2
 800ac4a:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 800ac50:	2300      	movs	r3, #0
 800ac52:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 800ac54:	2305      	movs	r3, #5
 800ac56:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 800ac60:	2302      	movs	r3, #2
 800ac62:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 800ac64:	2302      	movs	r3, #2
 800ac66:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 800ac68:	2302      	movs	r3, #2
 800ac6a:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 800ac70:	2300      	movs	r3, #0
 800ac72:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 800ac74:	2300      	movs	r3, #0
 800ac76:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800ac7c:	2310      	movs	r3, #16
 800ac7e:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 800ac80:	2300      	movs	r3, #0
 800ac82:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800ac84:	2300      	movs	r3, #0
 800ac86:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 800ac8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac90:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 800ac92:	2300      	movs	r3, #0
 800ac94:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 800ac96:	2300      	movs	r3, #0
 800ac98:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 800aca2:	2300      	movs	r3, #0
 800aca4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 800aca8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800acac:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800acae:	2300      	movs	r3, #0
 800acb0:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 800acb2:	f7ff ff3f 	bl	800ab34 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 800acb6:	463a      	mov	r2, r7
 800acb8:	f107 0120 	add.w	r1, r7, #32
 800acbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800acc0:	4618      	mov	r0, r3
 800acc2:	f009 f96e 	bl	8013fa2 <HAL_SRAM_Init>

}
 800acc6:	bf00      	nop
 800acc8:	3790      	adds	r7, #144	; 0x90
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	a0000104 	.word	0xa0000104

0800acd4 <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	4603      	mov	r3, r0
 800acdc:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 800acde:	4a04      	ldr	r2, [pc, #16]	; (800acf0 <FMC_BANK1_WriteData+0x1c>)
 800ace0:	88fb      	ldrh	r3, [r7, #6]
 800ace2:	8013      	strh	r3, [r2, #0]
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	60080000 	.word	0x60080000

0800acf4 <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	4603      	mov	r3, r0
 800acfc:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 800acfe:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800ad02:	79fa      	ldrb	r2, [r7, #7]
 800ad04:	b292      	uxth	r2, r2
 800ad06:	801a      	strh	r2, [r3, #0]
}
 800ad08:	bf00      	nop
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 800ad14:	b480      	push	{r7}
 800ad16:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 800ad18:	4b03      	ldr	r3, [pc, #12]	; (800ad28 <FMC_BANK1_ReadData+0x14>)
 800ad1a:	881b      	ldrh	r3, [r3, #0]
 800ad1c:	b29b      	uxth	r3, r3
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	60080000 	.word	0x60080000

0800ad2c <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 800ad30:	f7ff ff7a 	bl	800ac28 <FMC_BANK1_Init>
}
 800ad34:	bf00      	nop
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 800ad42:	88fb      	ldrh	r3, [r7, #6]
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7ff ffc5 	bl	800acd4 <FMC_BANK1_WriteData>
}
 800ad4a:	bf00      	nop
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	4603      	mov	r3, r0
 800ad5a:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 800ad5c:	79fb      	ldrb	r3, [r7, #7]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff ffc8 	bl	800acf4 <FMC_BANK1_WriteReg>
}
 800ad64:	bf00      	nop
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 800ad70:	f7ff ffd0 	bl	800ad14 <FMC_BANK1_ReadData>
 800ad74:	4603      	mov	r3, r0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	bd80      	pop	{r7, pc}

0800ad7a <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 800ad7a:	b580      	push	{r7, lr}
 800ad7c:	b082      	sub	sp, #8
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f001 f986 	bl	800c094 <HAL_Delay>
}
 800ad88:	bf00      	nop
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cTSHandler);
 800ad94:	4812      	ldr	r0, [pc, #72]	; (800ade0 <TS_IO_Init+0x50>)
 800ad96:	f7ff fd09 	bl	800a7ac <I2Cx_Init>

  if (ts_io_init == 0)
 800ad9a:	4b12      	ldr	r3, [pc, #72]	; (800ade4 <TS_IO_Init+0x54>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d11b      	bne.n	800adda <TS_IO_Init+0x4a>
  {
    if (BSP_LCD_Init() == LCD_ERROR)
 800ada2:	f000 f8eb 	bl	800af7c <BSP_LCD_Init>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d101      	bne.n	800adb0 <TS_IO_Init+0x20>
    {
      BSP_ErrorHandler();
 800adac:	f7ff fa95 	bl	800a2da <BSP_ErrorHandler>
    }

    BSP_IO_ConfigPin(TS_RST_PIN, IO_MODE_OUTPUT);
 800adb0:	2101      	movs	r1, #1
 800adb2:	2002      	movs	r0, #2
 800adb4:	f000 f8aa 	bl	800af0c <BSP_IO_ConfigPin>

    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_RESET);
 800adb8:	2100      	movs	r1, #0
 800adba:	2002      	movs	r0, #2
 800adbc:	f000 f8c2 	bl	800af44 <BSP_IO_WritePin>
    HAL_Delay(10);
 800adc0:	200a      	movs	r0, #10
 800adc2:	f001 f967 	bl	800c094 <HAL_Delay>
    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_SET);
 800adc6:	2101      	movs	r1, #1
 800adc8:	2002      	movs	r0, #2
 800adca:	f000 f8bb 	bl	800af44 <BSP_IO_WritePin>
    HAL_Delay(200);
 800adce:	20c8      	movs	r0, #200	; 0xc8
 800add0:	f001 f960 	bl	800c094 <HAL_Delay>

    ts_io_init = 1;
 800add4:	4b03      	ldr	r3, [pc, #12]	; (800ade4 <TS_IO_Init+0x54>)
 800add6:	2201      	movs	r2, #1
 800add8:	601a      	str	r2, [r3, #0]
  }
}
 800adda:	bf00      	nop
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	20001a50 	.word	0x20001a50
 800ade4:	200019f8 	.word	0x200019f8

0800ade8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af02      	add	r7, sp, #8
 800adee:	4603      	mov	r3, r0
 800adf0:	71fb      	strb	r3, [r7, #7]
 800adf2:	460b      	mov	r3, r1
 800adf4:	71bb      	strb	r3, [r7, #6]
 800adf6:	4613      	mov	r3, r2
 800adf8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&Value, 1);
 800adfa:	79bb      	ldrb	r3, [r7, #6]
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	79f9      	ldrb	r1, [r7, #7]
 800ae00:	2301      	movs	r3, #1
 800ae02:	9301      	str	r3, [sp, #4]
 800ae04:	1d7b      	adds	r3, r7, #5
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	2301      	movs	r3, #1
 800ae0a:	4803      	ldr	r0, [pc, #12]	; (800ae18 <TS_IO_Write+0x30>)
 800ae0c:	f7ff fd49 	bl	800a8a2 <I2Cx_WriteMultiple>
}
 800ae10:	bf00      	nop
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	20001a50 	.word	0x20001a50

0800ae1c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	4603      	mov	r3, r0
 800ae24:	460a      	mov	r2, r1
 800ae26:	71fb      	strb	r3, [r7, #7]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	71bb      	strb	r3, [r7, #6]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 800ae2c:	79fb      	ldrb	r3, [r7, #7]
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	79ba      	ldrb	r2, [r7, #6]
 800ae32:	b291      	uxth	r1, r2
 800ae34:	2201      	movs	r2, #1
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7ff fc22 	bl	800a680 <I2C2_ReadData>
 800ae3c:	4603      	mov	r3, r0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
	...

0800ae48 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af02      	add	r7, sp, #8
 800ae4e:	603a      	str	r2, [r7, #0]
 800ae50:	461a      	mov	r2, r3
 800ae52:	4603      	mov	r3, r0
 800ae54:	71fb      	strb	r3, [r7, #7]
 800ae56:	460b      	mov	r3, r1
 800ae58:	71bb      	strb	r3, [r7, #6]
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800ae5e:	79bb      	ldrb	r3, [r7, #6]
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	79f9      	ldrb	r1, [r7, #7]
 800ae64:	88bb      	ldrh	r3, [r7, #4]
 800ae66:	9301      	str	r3, [sp, #4]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	4804      	ldr	r0, [pc, #16]	; (800ae80 <TS_IO_ReadMultiple+0x38>)
 800ae70:	f7ff fcea 	bl	800a848 <I2Cx_ReadMultiple>
 800ae74:	4603      	mov	r3, r0
 800ae76:	b29b      	uxth	r3, r3
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	20001a50 	.word	0x20001a50

0800ae84 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 800ae92:	4b1a      	ldr	r3, [pc, #104]	; (800aefc <BSP_IO_Init+0x78>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d128      	bne.n	800aeec <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 800ae9a:	4b19      	ldr	r3, [pc, #100]	; (800af00 <BSP_IO_Init+0x7c>)
 800ae9c:	695b      	ldr	r3, [r3, #20]
 800ae9e:	2084      	movs	r0, #132	; 0x84
 800aea0:	4798      	blx	r3

    HAL_Delay(10);
 800aea2:	200a      	movs	r0, #10
 800aea4:	f001 f8f6 	bl	800c094 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 800aea8:	4b16      	ldr	r3, [pc, #88]	; (800af04 <BSP_IO_Init+0x80>)
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	2084      	movs	r0, #132	; 0x84
 800aeae:	4798      	blx	r3
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 800aeb4:	79bb      	ldrb	r3, [r7, #6]
 800aeb6:	2b7b      	cmp	r3, #123	; 0x7b
 800aeb8:	d002      	beq.n	800aec0 <BSP_IO_Init+0x3c>
 800aeba:	79bb      	ldrb	r3, [r7, #6]
 800aebc:	2b79      	cmp	r3, #121	; 0x79
 800aebe:	d117      	bne.n	800aef0 <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 800aec0:	4b0e      	ldr	r3, [pc, #56]	; (800aefc <BSP_IO_Init+0x78>)
 800aec2:	4a10      	ldr	r2, [pc, #64]	; (800af04 <BSP_IO_Init+0x80>)
 800aec4:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 800aec6:	4b0d      	ldr	r3, [pc, #52]	; (800aefc <BSP_IO_Init+0x78>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00f      	beq.n	800aef0 <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 800aed0:	4b0a      	ldr	r3, [pc, #40]	; (800aefc <BSP_IO_Init+0x78>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2084      	movs	r0, #132	; 0x84
 800aed8:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 800aeda:	4b08      	ldr	r3, [pc, #32]	; (800aefc <BSP_IO_Init+0x78>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	4909      	ldr	r1, [pc, #36]	; (800af08 <BSP_IO_Init+0x84>)
 800aee2:	2084      	movs	r0, #132	; 0x84
 800aee4:	4798      	blx	r3

        ret = IO_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	71fb      	strb	r3, [r7, #7]
 800aeea:	e001      	b.n	800aef0 <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 800aeec:	2303      	movs	r3, #3
 800aeee:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 800aef0:	79fb      	ldrb	r3, [r7, #7]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3708      	adds	r7, #8
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	20001b4c 	.word	0x20001b4c
 800af00:	200001f8 	.word	0x200001f8
 800af04:	200001cc 	.word	0x200001cc
 800af08:	000301ff 	.word	0x000301ff

0800af0c <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	460b      	mov	r3, r1
 800af16:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 800af18:	2300      	movs	r3, #0
 800af1a:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	4b07      	ldr	r3, [pc, #28]	; (800af3c <BSP_IO_ConfigPin+0x30>)
 800af20:	4013      	ands	r3, r2
 800af22:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 800af24:	4b06      	ldr	r3, [pc, #24]	; (800af40 <BSP_IO_ConfigPin+0x34>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	78fa      	ldrb	r2, [r7, #3]
 800af2c:	68f9      	ldr	r1, [r7, #12]
 800af2e:	2084      	movs	r0, #132	; 0x84
 800af30:	4798      	blx	r3

  return IO_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	000301ff 	.word	0x000301ff
 800af40:	20001b4c 	.word	0x20001b4c

0800af44 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	460b      	mov	r3, r1
 800af4e:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	4b07      	ldr	r3, [pc, #28]	; (800af74 <BSP_IO_WritePin+0x30>)
 800af58:	4013      	ands	r3, r2
 800af5a:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 800af5c:	4b06      	ldr	r3, [pc, #24]	; (800af78 <BSP_IO_WritePin+0x34>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	695b      	ldr	r3, [r3, #20]
 800af62:	78fa      	ldrb	r2, [r7, #3]
 800af64:	68f9      	ldr	r1, [r7, #12]
 800af66:	2084      	movs	r0, #132	; 0x84
 800af68:	4798      	blx	r3

}
 800af6a:	bf00      	nop
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	000301ff 	.word	0x000301ff
 800af78:	20001b4c 	.word	0x20001b4c

0800af7c <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800af80:	2001      	movs	r0, #1
 800af82:	f000 f803 	bl	800af8c <BSP_LCD_InitEx>
 800af86:	4603      	mov	r3, r0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 800af98:	2300      	movs	r3, #0
 800af9a:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 800af9c:	4b33      	ldr	r3, [pc, #204]	; (800b06c <BSP_LCD_InitEx+0xe0>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d102      	bne.n	800afaa <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73fb      	strb	r3, [r7, #15]
 800afa8:	e05b      	b.n	800b062 <BSP_LCD_InitEx+0xd6>
  }
  else
  {
    /* Initialize the IO functionalities */
    if (BSP_IO_Init() == IO_ERROR)
 800afaa:	f7ff ff6b 	bl	800ae84 <BSP_IO_Init>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d101      	bne.n	800afb8 <BSP_LCD_InitEx+0x2c>
    {
      BSP_ErrorHandler();
 800afb4:	f7ff f991 	bl	800a2da <BSP_ErrorHandler>
    }

    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 800afb8:	f000 fce4 	bl	800b984 <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 800afbc:	2200      	movs	r2, #0
 800afbe:	2101      	movs	r1, #1
 800afc0:	482b      	ldr	r0, [pc, #172]	; (800b070 <BSP_LCD_InitEx+0xe4>)
 800afc2:	f003 f85d 	bl	800e080 <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 800afc6:	4b2b      	ldr	r3, [pc, #172]	; (800b074 <BSP_LCD_InitEx+0xe8>)
 800afc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afcc:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 800afce:	4b29      	ldr	r3, [pc, #164]	; (800b074 <BSP_LCD_InitEx+0xe8>)
 800afd0:	4a29      	ldr	r2, [pc, #164]	; (800b078 <BSP_LCD_InitEx+0xec>)
 800afd2:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 800afd4:	4b27      	ldr	r3, [pc, #156]	; (800b074 <BSP_LCD_InitEx+0xe8>)
 800afd6:	2200      	movs	r2, #0
 800afd8:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 800afda:	4b28      	ldr	r3, [pc, #160]	; (800b07c <BSP_LCD_InitEx+0xf0>)
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d108      	bne.n	800aff4 <BSP_LCD_InitEx+0x68>
 800afe2:	4b27      	ldr	r3, [pc, #156]	; (800b080 <BSP_LCD_InitEx+0xf4>)
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d104      	bne.n	800aff4 <BSP_LCD_InitEx+0x68>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800afea:	2201      	movs	r2, #1
 800afec:	2101      	movs	r1, #1
 800afee:	4825      	ldr	r0, [pc, #148]	; (800b084 <BSP_LCD_InitEx+0xf8>)
 800aff0:	f003 f846 	bl	800e080 <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 800aff4:	f000 f850 	bl	800b098 <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 800aff8:	4b23      	ldr	r3, [pc, #140]	; (800b088 <BSP_LCD_InitEx+0xfc>)
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	4798      	blx	r3
 800affe:	4603      	mov	r3, r0
 800b000:	2b85      	cmp	r3, #133	; 0x85
 800b002:	d12e      	bne.n	800b062 <BSP_LCD_InitEx+0xd6>
    {
      LcdDrv = &ST7789H2_drv;
 800b004:	4b21      	ldr	r3, [pc, #132]	; (800b08c <BSP_LCD_InitEx+0x100>)
 800b006:	4a20      	ldr	r2, [pc, #128]	; (800b088 <BSP_LCD_InitEx+0xfc>)
 800b008:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 800b00a:	4b20      	ldr	r3, [pc, #128]	; (800b08c <BSP_LCD_InitEx+0x100>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 800b012:	2200      	movs	r2, #0
 800b014:	2100      	movs	r1, #0
 800b016:	202c      	movs	r0, #44	; 0x2c
 800b018:	f7fa fb81 	bl	800571e <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 800b01c:	2300      	movs	r3, #0
 800b01e:	60bb      	str	r3, [r7, #8]
 800b020:	e006      	b.n	800b030 <BSP_LCD_InitEx+0xa4>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 800b022:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b026:	f7ff fe87 	bl	800ad38 <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	3301      	adds	r3, #1
 800b02e:	60bb      	str	r3, [r7, #8]
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 800b036:	d3f4      	bcc.n	800b022 <BSP_LCD_InitEx+0x96>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d106      	bne.n	800b04c <BSP_LCD_InitEx+0xc0>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 800b03e:	2000      	movs	r0, #0
 800b040:	f7fa fa6b 	bl	800551a <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 800b044:	4b12      	ldr	r3, [pc, #72]	; (800b090 <BSP_LCD_InitEx+0x104>)
 800b046:	2200      	movs	r2, #0
 800b048:	701a      	strb	r2, [r3, #0]
 800b04a:	e002      	b.n	800b052 <BSP_LCD_InitEx+0xc6>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 800b04c:	4b10      	ldr	r3, [pc, #64]	; (800b090 <BSP_LCD_InitEx+0x104>)
 800b04e:	2201      	movs	r2, #1
 800b050:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800b052:	4810      	ldr	r0, [pc, #64]	; (800b094 <BSP_LCD_InitEx+0x108>)
 800b054:	f000 f868 	bl	800b128 <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 800b058:	4b04      	ldr	r3, [pc, #16]	; (800b06c <BSP_LCD_InitEx+0xe0>)
 800b05a:	2201      	movs	r2, #1
 800b05c:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b062:	7bfb      	ldrb	r3, [r7, #15]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	20001b50 	.word	0x20001b50
 800b070:	48001c00 	.word	0x48001c00
 800b074:	20001bc4 	.word	0x20001bc4
 800b078:	20000540 	.word	0x20000540
 800b07c:	20001bc0 	.word	0x20001bc0
 800b080:	20001bc1 	.word	0x20001bc1
 800b084:	48002000 	.word	0x48002000
 800b088:	20000244 	.word	0x20000244
 800b08c:	20001bd0 	.word	0x20001bd0
 800b090:	20000550 	.word	0x20000550
 800b094:	20000548 	.word	0x20000548

0800b098 <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 800b09c:	2100      	movs	r1, #0
 800b09e:	2004      	movs	r0, #4
 800b0a0:	f7ff ff50 	bl	800af44 <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800b0a4:	2005      	movs	r0, #5
 800b0a6:	f000 fff5 	bl	800c094 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 800b0aa:	2101      	movs	r1, #1
 800b0ac:	2004      	movs	r0, #4
 800b0ae:	f7ff ff49 	bl	800af44 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800b0b2:	200a      	movs	r0, #10
 800b0b4:	f000 ffee 	bl	800c094 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	2004      	movs	r0, #4
 800b0bc:	f7ff ff42 	bl	800af44 <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 800b0c0:	2014      	movs	r0, #20
 800b0c2:	f000 ffe7 	bl	800c094 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 800b0c6:	2101      	movs	r1, #1
 800b0c8:	2004      	movs	r0, #4
 800b0ca:	f7ff ff3b 	bl	800af44 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800b0ce:	200a      	movs	r0, #10
 800b0d0:	f000 ffe0 	bl	800c094 <HAL_Delay>
}
 800b0d4:	bf00      	nop
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelWidth());
 800b0dc:	4b03      	ldr	r3, [pc, #12]	; (800b0ec <BSP_LCD_GetXSize+0x14>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e2:	4798      	blx	r3
 800b0e4:	4603      	mov	r3, r0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	20001bd0 	.word	0x20001bd0

0800b0f0 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelHeight());
 800b0f4:	4b03      	ldr	r3, [pc, #12]	; (800b104 <BSP_LCD_GetYSize+0x14>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fa:	4798      	blx	r3
 800b0fc:	4603      	mov	r3, r0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	20001bd0 	.word	0x20001bd0

0800b108 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	4603      	mov	r3, r0
 800b110:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800b112:	88fb      	ldrh	r3, [r7, #6]
 800b114:	4a03      	ldr	r2, [pc, #12]	; (800b124 <BSP_LCD_SetTextColor+0x1c>)
 800b116:	6013      	str	r3, [r2, #0]
}
 800b118:	bf00      	nop
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr
 800b124:	20001bc4 	.word	0x20001bc4

0800b128 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 800b130:	4a04      	ldr	r2, [pc, #16]	; (800b144 <BSP_LCD_SetFont+0x1c>)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6093      	str	r3, [r2, #8]
}
 800b136:	bf00      	nop
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	20001bc4 	.word	0x20001bc4

0800b148 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 800b148:	b590      	push	{r4, r7, lr}
 800b14a:	b087      	sub	sp, #28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	4603      	mov	r3, r0
 800b150:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor;
 800b15a:	4b15      	ldr	r3, [pc, #84]	; (800b1b0 <BSP_LCD_Clear+0x68>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 800b160:	88fb      	ldrh	r3, [r7, #6]
 800b162:	4a13      	ldr	r2, [pc, #76]	; (800b1b0 <BSP_LCD_Clear+0x68>)
 800b164:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 800b166:	f7ff ffc3 	bl	800b0f0 <BSP_LCD_GetYSize>
 800b16a:	6138      	str	r0, [r7, #16]

  for (counter = 0; counter < y_size; counter++)
 800b16c:	2300      	movs	r3, #0
 800b16e:	617b      	str	r3, [r7, #20]
 800b170:	e00d      	b.n	800b18e <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	b29c      	uxth	r4, r3
 800b176:	f7ff ffaf 	bl	800b0d8 <BSP_LCD_GetXSize>
 800b17a:	4603      	mov	r3, r0
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	461a      	mov	r2, r3
 800b180:	4621      	mov	r1, r4
 800b182:	2000      	movs	r0, #0
 800b184:	f000 f8e8 	bl	800b358 <BSP_LCD_DrawHLine>
  for (counter = 0; counter < y_size; counter++)
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	3301      	adds	r3, #1
 800b18c:	617b      	str	r3, [r7, #20]
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	429a      	cmp	r2, r3
 800b194:	d3ed      	bcc.n	800b172 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup;
 800b196:	4a06      	ldr	r2, [pc, #24]	; (800b1b0 <BSP_LCD_Clear+0x68>)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800b19c:	4b04      	ldr	r3, [pc, #16]	; (800b1b0 <BSP_LCD_Clear+0x68>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7ff ffb0 	bl	800b108 <BSP_LCD_SetTextColor>
}
 800b1a8:	bf00      	nop
 800b1aa:	371c      	adds	r7, #28
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd90      	pop	{r4, r7, pc}
 800b1b0:	20001bc4 	.word	0x20001bc4

0800b1b4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	80fb      	strh	r3, [r7, #6]
 800b1be:	460b      	mov	r3, r1
 800b1c0:	80bb      	strh	r3, [r7, #4]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800b1c6:	4b0f      	ldr	r3, [pc, #60]	; (800b204 <BSP_LCD_DisplayChar+0x50>)
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	78fb      	ldrb	r3, [r7, #3]
 800b1ce:	3b20      	subs	r3, #32
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800b1d0:	490c      	ldr	r1, [pc, #48]	; (800b204 <BSP_LCD_DisplayChar+0x50>)
 800b1d2:	6889      	ldr	r1, [r1, #8]
 800b1d4:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800b1d6:	fb03 f101 	mul.w	r1, r3, r1
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800b1da:	4b0a      	ldr	r3, [pc, #40]	; (800b204 <BSP_LCD_DisplayChar+0x50>)
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	889b      	ldrh	r3, [r3, #4]
 800b1e0:	3307      	adds	r3, #7
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	da00      	bge.n	800b1e8 <BSP_LCD_DisplayChar+0x34>
 800b1e6:	3307      	adds	r3, #7
 800b1e8:	10db      	asrs	r3, r3, #3
 800b1ea:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800b1ee:	441a      	add	r2, r3
 800b1f0:	88b9      	ldrh	r1, [r7, #4]
 800b1f2:	88fb      	ldrh	r3, [r7, #6]
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 fc21 	bl	800ba3c <DrawChar>
}
 800b1fa:	bf00      	nop
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20001bc4 	.word	0x20001bc4

0800b208 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b088      	sub	sp, #32
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60ba      	str	r2, [r7, #8]
 800b210:	461a      	mov	r2, r3
 800b212:	4603      	mov	r3, r0
 800b214:	81fb      	strh	r3, [r7, #14]
 800b216:	460b      	mov	r3, r1
 800b218:	81bb      	strh	r3, [r7, #12]
 800b21a:	4613      	mov	r3, r2
 800b21c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800b21e:	2301      	movs	r3, #1
 800b220:	83fb      	strh	r3, [r7, #30]
 800b222:	2300      	movs	r3, #0
 800b224:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800b226:	2300      	movs	r3, #0
 800b228:	61bb      	str	r3, [r7, #24]
 800b22a:	2300      	movs	r3, #0
 800b22c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++)
 800b232:	e002      	b.n	800b23a <BSP_LCD_DisplayStringAt+0x32>
  {
    size ++ ;
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	3301      	adds	r3, #1
 800b238:	61bb      	str	r3, [r7, #24]
  while (*ptr++)
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	1c5a      	adds	r2, r3, #1
 800b23e:	617a      	str	r2, [r7, #20]
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1f6      	bne.n	800b234 <BSP_LCD_DisplayStringAt+0x2c>
  }

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp.pFont->Width);
 800b246:	f7ff ff47 	bl	800b0d8 <BSP_LCD_GetXSize>
 800b24a:	4602      	mov	r2, r0
 800b24c:	4b33      	ldr	r3, [pc, #204]	; (800b31c <BSP_LCD_DisplayStringAt+0x114>)
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	889b      	ldrh	r3, [r3, #4]
 800b252:	fbb2 f3f3 	udiv	r3, r2, r3
 800b256:	613b      	str	r3, [r7, #16]

  switch (Mode)
 800b258:	79fb      	ldrb	r3, [r7, #7]
 800b25a:	2b03      	cmp	r3, #3
 800b25c:	d014      	beq.n	800b288 <BSP_LCD_DisplayStringAt+0x80>
 800b25e:	2b03      	cmp	r3, #3
 800b260:	dc23      	bgt.n	800b2aa <BSP_LCD_DisplayStringAt+0xa2>
 800b262:	2b01      	cmp	r3, #1
 800b264:	d002      	beq.n	800b26c <BSP_LCD_DisplayStringAt+0x64>
 800b266:	2b02      	cmp	r3, #2
 800b268:	d011      	beq.n	800b28e <BSP_LCD_DisplayStringAt+0x86>
 800b26a:	e01e      	b.n	800b2aa <BSP_LCD_DisplayStringAt+0xa2>
  {
    case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size) * DrawProp.pFont->Width) / 2;
 800b26c:	693a      	ldr	r2, [r7, #16]
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	4a2a      	ldr	r2, [pc, #168]	; (800b31c <BSP_LCD_DisplayStringAt+0x114>)
 800b274:	6892      	ldr	r2, [r2, #8]
 800b276:	8892      	ldrh	r2, [r2, #4]
 800b278:	fb02 f303 	mul.w	r3, r2, r3
 800b27c:	085b      	lsrs	r3, r3, #1
 800b27e:	b29a      	uxth	r2, r3
 800b280:	89fb      	ldrh	r3, [r7, #14]
 800b282:	4413      	add	r3, r2
 800b284:	83fb      	strh	r3, [r7, #30]
      break;
 800b286:	e013      	b.n	800b2b0 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case LEFT_MODE:
    {
      refcolumn = Xpos;
 800b288:	89fb      	ldrh	r3, [r7, #14]
 800b28a:	83fb      	strh	r3, [r7, #30]
      break;
 800b28c:	e010      	b.n	800b2b0 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size) * DrawProp.pFont->Width);
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	b29a      	uxth	r2, r3
 800b296:	4b21      	ldr	r3, [pc, #132]	; (800b31c <BSP_LCD_DisplayStringAt+0x114>)
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	889b      	ldrh	r3, [r3, #4]
 800b29c:	fb12 f303 	smulbb	r3, r2, r3
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	89fb      	ldrh	r3, [r7, #14]
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	83fb      	strh	r3, [r7, #30]
      break;
 800b2a8:	e002      	b.n	800b2b0 <BSP_LCD_DisplayStringAt+0xa8>
    }
    default:
    {
      refcolumn = Xpos;
 800b2aa:	89fb      	ldrh	r3, [r7, #14]
 800b2ac:	83fb      	strh	r3, [r7, #30]
      break;
 800b2ae:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800b2b0:	8bfb      	ldrh	r3, [r7, #30]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <BSP_LCD_DisplayStringAt+0xb6>
 800b2b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	da15      	bge.n	800b2ea <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800b2c2:	e012      	b.n	800b2ea <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	781a      	ldrb	r2, [r3, #0]
 800b2c8:	89b9      	ldrh	r1, [r7, #12]
 800b2ca:	8bfb      	ldrh	r3, [r7, #30]
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7ff ff71 	bl	800b1b4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800b2d2:	4b12      	ldr	r3, [pc, #72]	; (800b31c <BSP_LCD_DisplayStringAt+0x114>)
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	889a      	ldrh	r2, [r3, #4]
 800b2d8:	8bfb      	ldrh	r3, [r7, #30]
 800b2da:	4413      	add	r3, r2
 800b2dc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	60bb      	str	r3, [r7, #8]
    i++;
 800b2e4:	8bbb      	ldrh	r3, [r7, #28]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00f      	beq.n	800b312 <BSP_LCD_DisplayStringAt+0x10a>
 800b2f2:	f7ff fef1 	bl	800b0d8 <BSP_LCD_GetXSize>
 800b2f6:	4601      	mov	r1, r0
 800b2f8:	8bbb      	ldrh	r3, [r7, #28]
 800b2fa:	4a08      	ldr	r2, [pc, #32]	; (800b31c <BSP_LCD_DisplayStringAt+0x114>)
 800b2fc:	6892      	ldr	r2, [r2, #8]
 800b2fe:	8892      	ldrh	r2, [r2, #4]
 800b300:	fb02 f303 	mul.w	r3, r2, r3
 800b304:	1acb      	subs	r3, r1, r3
 800b306:	b29b      	uxth	r3, r3
 800b308:	4a04      	ldr	r2, [pc, #16]	; (800b31c <BSP_LCD_DisplayStringAt+0x114>)
 800b30a:	6892      	ldr	r2, [r2, #8]
 800b30c:	8892      	ldrh	r2, [r2, #4]
 800b30e:	4293      	cmp	r3, r2
 800b310:	d2d8      	bcs.n	800b2c4 <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 800b312:	bf00      	nop
 800b314:	3720      	adds	r7, #32
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	20001bc4 	.word	0x20001bc4

0800b320 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	4603      	mov	r3, r0
 800b328:	80fb      	strh	r3, [r7, #6]
 800b32a:	460b      	mov	r3, r1
 800b32c:	80bb      	strh	r3, [r7, #4]
 800b32e:	4613      	mov	r3, r2
 800b330:	807b      	strh	r3, [r7, #2]
  if (LcdDrv->WritePixel != NULL)
 800b332:	4b08      	ldr	r3, [pc, #32]	; (800b354 <BSP_LCD_DrawPixel+0x34>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	695b      	ldr	r3, [r3, #20]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d006      	beq.n	800b34a <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 800b33c:	4b05      	ldr	r3, [pc, #20]	; (800b354 <BSP_LCD_DrawPixel+0x34>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	695b      	ldr	r3, [r3, #20]
 800b342:	887a      	ldrh	r2, [r7, #2]
 800b344:	88b9      	ldrh	r1, [r7, #4]
 800b346:	88f8      	ldrh	r0, [r7, #6]
 800b348:	4798      	blx	r3
  }
}
 800b34a:	bf00      	nop
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	20001bd0 	.word	0x20001bd0

0800b358 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800b358:	b590      	push	{r4, r7, lr}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	4603      	mov	r3, r0
 800b360:	80fb      	strh	r3, [r7, #6]
 800b362:	460b      	mov	r3, r1
 800b364:	80bb      	strh	r3, [r7, #4]
 800b366:	4613      	mov	r3, r2
 800b368:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800b36a:	2300      	movs	r3, #0
 800b36c:	60fb      	str	r3, [r7, #12]

  if (LcdDrv->DrawHLine != NULL)
 800b36e:	4b15      	ldr	r3, [pc, #84]	; (800b3c4 <BSP_LCD_DrawHLine+0x6c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6a1b      	ldr	r3, [r3, #32]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00a      	beq.n	800b38e <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800b378:	4b12      	ldr	r3, [pc, #72]	; (800b3c4 <BSP_LCD_DrawHLine+0x6c>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	6a1c      	ldr	r4, [r3, #32]
 800b37e:	4b12      	ldr	r3, [pc, #72]	; (800b3c8 <BSP_LCD_DrawHLine+0x70>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	b298      	uxth	r0, r3
 800b384:	887b      	ldrh	r3, [r7, #2]
 800b386:	88ba      	ldrh	r2, [r7, #4]
 800b388:	88f9      	ldrh	r1, [r7, #6]
 800b38a:	47a0      	blx	r4
    for (index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800b38c:	e015      	b.n	800b3ba <BSP_LCD_DrawHLine+0x62>
    for (index = 0; index < Length; index++)
 800b38e:	2300      	movs	r3, #0
 800b390:	60fb      	str	r3, [r7, #12]
 800b392:	e00e      	b.n	800b3b2 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	b29a      	uxth	r2, r3
 800b398:	88fb      	ldrh	r3, [r7, #6]
 800b39a:	4413      	add	r3, r2
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	4a0a      	ldr	r2, [pc, #40]	; (800b3c8 <BSP_LCD_DrawHLine+0x70>)
 800b3a0:	6812      	ldr	r2, [r2, #0]
 800b3a2:	b292      	uxth	r2, r2
 800b3a4:	88b9      	ldrh	r1, [r7, #4]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7ff ffba 	bl	800b320 <BSP_LCD_DrawPixel>
    for (index = 0; index < Length; index++)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	60fb      	str	r3, [r7, #12]
 800b3b2:	887b      	ldrh	r3, [r7, #2]
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d3ec      	bcc.n	800b394 <BSP_LCD_DrawHLine+0x3c>
}
 800b3ba:	bf00      	nop
 800b3bc:	3714      	adds	r7, #20
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd90      	pop	{r4, r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	20001bd0 	.word	0x20001bd0
 800b3c8:	20001bc4 	.word	0x20001bc4

0800b3cc <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	80fb      	strh	r3, [r7, #6]
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	80bb      	strh	r3, [r7, #4]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */

  decision = 3 - (Radius << 1);
 800b3de:	887b      	ldrh	r3, [r7, #2]
 800b3e0:	005b      	lsls	r3, r3, #1
 800b3e2:	f1c3 0303 	rsb	r3, r3, #3
 800b3e6:	617b      	str	r3, [r7, #20]
  current_x = 0;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800b3ec:	887b      	ldrh	r3, [r7, #2]
 800b3ee:	60fb      	str	r3, [r7, #12]

  while (current_x <= current_y)
 800b3f0:	e09a      	b.n	800b528 <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	b29a      	uxth	r2, r3
 800b3f6:	88fb      	ldrh	r3, [r7, #6]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	b298      	uxth	r0, r3
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	88ba      	ldrh	r2, [r7, #4]
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	b29b      	uxth	r3, r3
 800b406:	4a4d      	ldr	r2, [pc, #308]	; (800b53c <BSP_LCD_DrawCircle+0x170>)
 800b408:	6812      	ldr	r2, [r2, #0]
 800b40a:	b292      	uxth	r2, r2
 800b40c:	4619      	mov	r1, r3
 800b40e:	f7ff ff87 	bl	800b320 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	b29b      	uxth	r3, r3
 800b416:	88fa      	ldrh	r2, [r7, #6]
 800b418:	1ad3      	subs	r3, r2, r3
 800b41a:	b298      	uxth	r0, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	b29b      	uxth	r3, r3
 800b420:	88ba      	ldrh	r2, [r7, #4]
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	b29b      	uxth	r3, r3
 800b426:	4a45      	ldr	r2, [pc, #276]	; (800b53c <BSP_LCD_DrawCircle+0x170>)
 800b428:	6812      	ldr	r2, [r2, #0]
 800b42a:	b292      	uxth	r2, r2
 800b42c:	4619      	mov	r1, r3
 800b42e:	f7ff ff77 	bl	800b320 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	b29a      	uxth	r2, r3
 800b436:	88fb      	ldrh	r3, [r7, #6]
 800b438:	4413      	add	r3, r2
 800b43a:	b298      	uxth	r0, r3
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	b29b      	uxth	r3, r3
 800b440:	88ba      	ldrh	r2, [r7, #4]
 800b442:	1ad3      	subs	r3, r2, r3
 800b444:	b29b      	uxth	r3, r3
 800b446:	4a3d      	ldr	r2, [pc, #244]	; (800b53c <BSP_LCD_DrawCircle+0x170>)
 800b448:	6812      	ldr	r2, [r2, #0]
 800b44a:	b292      	uxth	r2, r2
 800b44c:	4619      	mov	r1, r3
 800b44e:	f7ff ff67 	bl	800b320 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	b29b      	uxth	r3, r3
 800b456:	88fa      	ldrh	r2, [r7, #6]
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	b298      	uxth	r0, r3
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	b29b      	uxth	r3, r3
 800b460:	88ba      	ldrh	r2, [r7, #4]
 800b462:	1ad3      	subs	r3, r2, r3
 800b464:	b29b      	uxth	r3, r3
 800b466:	4a35      	ldr	r2, [pc, #212]	; (800b53c <BSP_LCD_DrawCircle+0x170>)
 800b468:	6812      	ldr	r2, [r2, #0]
 800b46a:	b292      	uxth	r2, r2
 800b46c:	4619      	mov	r1, r3
 800b46e:	f7ff ff57 	bl	800b320 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	b29a      	uxth	r2, r3
 800b476:	88fb      	ldrh	r3, [r7, #6]
 800b478:	4413      	add	r3, r2
 800b47a:	b298      	uxth	r0, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	b29a      	uxth	r2, r3
 800b480:	88bb      	ldrh	r3, [r7, #4]
 800b482:	4413      	add	r3, r2
 800b484:	b29b      	uxth	r3, r3
 800b486:	4a2d      	ldr	r2, [pc, #180]	; (800b53c <BSP_LCD_DrawCircle+0x170>)
 800b488:	6812      	ldr	r2, [r2, #0]
 800b48a:	b292      	uxth	r2, r2
 800b48c:	4619      	mov	r1, r3
 800b48e:	f7ff ff47 	bl	800b320 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	b29b      	uxth	r3, r3
 800b496:	88fa      	ldrh	r2, [r7, #6]
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	b298      	uxth	r0, r3
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	88bb      	ldrh	r3, [r7, #4]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	4a25      	ldr	r2, [pc, #148]	; (800b53c <BSP_LCD_DrawCircle+0x170>)
 800b4a8:	6812      	ldr	r2, [r2, #0]
 800b4aa:	b292      	uxth	r2, r2
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	f7ff ff37 	bl	800b320 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	88fb      	ldrh	r3, [r7, #6]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	b298      	uxth	r0, r3
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	88bb      	ldrh	r3, [r7, #4]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	4a1d      	ldr	r2, [pc, #116]	; (800b53c <BSP_LCD_DrawCircle+0x170>)
 800b4c8:	6812      	ldr	r2, [r2, #0]
 800b4ca:	b292      	uxth	r2, r2
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	f7ff ff27 	bl	800b320 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	88fa      	ldrh	r2, [r7, #6]
 800b4d8:	1ad3      	subs	r3, r2, r3
 800b4da:	b298      	uxth	r0, r3
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	88bb      	ldrh	r3, [r7, #4]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	4a15      	ldr	r2, [pc, #84]	; (800b53c <BSP_LCD_DrawCircle+0x170>)
 800b4e8:	6812      	ldr	r2, [r2, #0]
 800b4ea:	b292      	uxth	r2, r2
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	f7ff ff17 	bl	800b320 <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800b4f2:	4813      	ldr	r0, [pc, #76]	; (800b540 <BSP_LCD_DrawCircle+0x174>)
 800b4f4:	f7ff fe18 	bl	800b128 <BSP_LCD_SetFont>

    if (decision < 0)
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	da06      	bge.n	800b50c <BSP_LCD_DrawCircle+0x140>
    {
      decision += (current_x << 2) + 6;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	009a      	lsls	r2, r3, #2
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	4413      	add	r3, r2
 800b506:	3306      	adds	r3, #6
 800b508:	617b      	str	r3, [r7, #20]
 800b50a:	e00a      	b.n	800b522 <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800b50c:	693a      	ldr	r2, [r7, #16]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	009a      	lsls	r2, r3, #2
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	4413      	add	r3, r2
 800b518:	330a      	adds	r3, #10
 800b51a:	617b      	str	r3, [r7, #20]
      current_y--;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	3b01      	subs	r3, #1
 800b520:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	3301      	adds	r3, #1
 800b526:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800b528:	693a      	ldr	r2, [r7, #16]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	f67f af60 	bls.w	800b3f2 <BSP_LCD_DrawCircle+0x26>
  }
}
 800b532:	bf00      	nop
 800b534:	bf00      	nop
 800b536:	3718      	adds	r7, #24
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	20001bc4 	.word	0x20001bc4
 800b540:	20000548 	.word	0x20000548

0800b544 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	4603      	mov	r3, r0
 800b54c:	80fb      	strh	r3, [r7, #6]
 800b54e:	460b      	mov	r3, r1
 800b550:	80bb      	strh	r3, [r7, #4]
 800b552:	4613      	mov	r3, r2
 800b554:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */

  decision = 3 - (Radius << 1);
 800b556:	887b      	ldrh	r3, [r7, #2]
 800b558:	005b      	lsls	r3, r3, #1
 800b55a:	f1c3 0303 	rsb	r3, r3, #3
 800b55e:	617b      	str	r3, [r7, #20]

  current_x = 0;
 800b560:	2300      	movs	r3, #0
 800b562:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800b564:	887b      	ldrh	r3, [r7, #2]
 800b566:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800b568:	4b3e      	ldr	r3, [pc, #248]	; (800b664 <BSP_LCD_FillCircle+0x120>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	4618      	mov	r0, r3
 800b570:	f7ff fdca 	bl	800b108 <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 800b574:	e061      	b.n	800b63a <BSP_LCD_FillCircle+0xf6>
  {
    if (current_y > 0)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d021      	beq.n	800b5c0 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2 * current_y);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	b29b      	uxth	r3, r3
 800b580:	88fa      	ldrh	r2, [r7, #6]
 800b582:	1ad3      	subs	r3, r2, r3
 800b584:	b298      	uxth	r0, r3
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	b29a      	uxth	r2, r3
 800b58a:	88bb      	ldrh	r3, [r7, #4]
 800b58c:	4413      	add	r3, r2
 800b58e:	b299      	uxth	r1, r3
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	b29b      	uxth	r3, r3
 800b594:	005b      	lsls	r3, r3, #1
 800b596:	b29b      	uxth	r3, r3
 800b598:	461a      	mov	r2, r3
 800b59a:	f7ff fedd 	bl	800b358 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2 * current_y);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	88fa      	ldrh	r2, [r7, #6]
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	b298      	uxth	r0, r3
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	88ba      	ldrh	r2, [r7, #4]
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	b299      	uxth	r1, r3
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	005b      	lsls	r3, r3, #1
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	f7ff fecc 	bl	800b358 <BSP_LCD_DrawHLine>
    }

    if (current_x > 0)
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d021      	beq.n	800b60a <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2 * current_x);
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	88fa      	ldrh	r2, [r7, #6]
 800b5cc:	1ad3      	subs	r3, r2, r3
 800b5ce:	b298      	uxth	r0, r3
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	88ba      	ldrh	r2, [r7, #4]
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	b299      	uxth	r1, r3
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	005b      	lsls	r3, r3, #1
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	f7ff feb8 	bl	800b358 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2 * current_x);
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	88fa      	ldrh	r2, [r7, #6]
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	b298      	uxth	r0, r3
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	88bb      	ldrh	r3, [r7, #4]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	b299      	uxth	r1, r3
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	005b      	lsls	r3, r3, #1
 800b602:	b29b      	uxth	r3, r3
 800b604:	461a      	mov	r2, r3
 800b606:	f7ff fea7 	bl	800b358 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	da06      	bge.n	800b61e <BSP_LCD_FillCircle+0xda>
    {
      decision += (current_x << 2) + 6;
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	009a      	lsls	r2, r3, #2
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	4413      	add	r3, r2
 800b618:	3306      	adds	r3, #6
 800b61a:	617b      	str	r3, [r7, #20]
 800b61c:	e00a      	b.n	800b634 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800b61e:	693a      	ldr	r2, [r7, #16]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	009a      	lsls	r2, r3, #2
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	4413      	add	r3, r2
 800b62a:	330a      	adds	r3, #10
 800b62c:	617b      	str	r3, [r7, #20]
      current_y--;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	3b01      	subs	r3, #1
 800b632:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	3301      	adds	r3, #1
 800b638:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800b63a:	693a      	ldr	r2, [r7, #16]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d999      	bls.n	800b576 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800b642:	4b08      	ldr	r3, [pc, #32]	; (800b664 <BSP_LCD_FillCircle+0x120>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	b29b      	uxth	r3, r3
 800b648:	4618      	mov	r0, r3
 800b64a:	f7ff fd5d 	bl	800b108 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800b64e:	887a      	ldrh	r2, [r7, #2]
 800b650:	88b9      	ldrh	r1, [r7, #4]
 800b652:	88fb      	ldrh	r3, [r7, #6]
 800b654:	4618      	mov	r0, r3
 800b656:	f7ff feb9 	bl	800b3cc <BSP_LCD_DrawCircle>
}
 800b65a:	bf00      	nop
 800b65c:	3718      	adds	r7, #24
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	20001bc4 	.word	0x20001bc4

0800b668 <BSP_LCD_DisplayOn>:
  * @brief  Enables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	af00      	add	r7, sp, #0
  LcdDrv->DisplayOn();
 800b66c:	4b02      	ldr	r3, [pc, #8]	; (800b678 <BSP_LCD_DisplayOn+0x10>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	4798      	blx	r3
}
 800b674:	bf00      	nop
 800b676:	bd80      	pop	{r7, pc}
 800b678:	20001bd0 	.word	0x20001bd0

0800b67c <BSP_LCD_DisplayOff>:
  * @brief  Disables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	af00      	add	r7, sp, #0
  LcdDrv->DisplayOff();
 800b680:	4b02      	ldr	r3, [pc, #8]	; (800b68c <BSP_LCD_DisplayOff+0x10>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	4798      	blx	r3
}
 800b688:	bf00      	nop
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	20001bd0 	.word	0x20001bd0

0800b690 <BSP_LCD_ScreenDimmingConfig>:
  * @param  step    : step value in percent
  * @param  delay   : delay in milliseconds between each step
  * @retval None
  */
void BSP_LCD_ScreenDimmingConfig(const uint8_t start, const uint8_t stop, const uint8_t step, const uint8_t delay)
{
 800b690:	b490      	push	{r4, r7}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	4604      	mov	r4, r0
 800b698:	4608      	mov	r0, r1
 800b69a:	4611      	mov	r1, r2
 800b69c:	461a      	mov	r2, r3
 800b69e:	4623      	mov	r3, r4
 800b6a0:	71fb      	strb	r3, [r7, #7]
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	71bb      	strb	r3, [r7, #6]
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	717b      	strb	r3, [r7, #5]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	713b      	strb	r3, [r7, #4]
  if ((dimming_config.ongoing == 0)
 800b6ae:	4b10      	ldr	r3, [pc, #64]	; (800b6f0 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d117      	bne.n	800b6e6 <BSP_LCD_ScreenDimmingConfig+0x56>
      && (start <= 100) && (stop <= 100)
 800b6b6:	79fb      	ldrb	r3, [r7, #7]
 800b6b8:	2b64      	cmp	r3, #100	; 0x64
 800b6ba:	d814      	bhi.n	800b6e6 <BSP_LCD_ScreenDimmingConfig+0x56>
 800b6bc:	79bb      	ldrb	r3, [r7, #6]
 800b6be:	2b64      	cmp	r3, #100	; 0x64
 800b6c0:	d811      	bhi.n	800b6e6 <BSP_LCD_ScreenDimmingConfig+0x56>
      && (step > 0) && (step < 100))
 800b6c2:	797b      	ldrb	r3, [r7, #5]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d00e      	beq.n	800b6e6 <BSP_LCD_ScreenDimmingConfig+0x56>
 800b6c8:	797b      	ldrb	r3, [r7, #5]
 800b6ca:	2b63      	cmp	r3, #99	; 0x63
 800b6cc:	d80b      	bhi.n	800b6e6 <BSP_LCD_ScreenDimmingConfig+0x56>
  {
    dimming_config.start = start;
 800b6ce:	4a08      	ldr	r2, [pc, #32]	; (800b6f0 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800b6d0:	79fb      	ldrb	r3, [r7, #7]
 800b6d2:	7053      	strb	r3, [r2, #1]
    dimming_config.stop  = stop;
 800b6d4:	4a06      	ldr	r2, [pc, #24]	; (800b6f0 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800b6d6:	79bb      	ldrb	r3, [r7, #6]
 800b6d8:	7093      	strb	r3, [r2, #2]
    dimming_config.step  = step;
 800b6da:	4a05      	ldr	r2, [pc, #20]	; (800b6f0 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800b6dc:	797b      	ldrb	r3, [r7, #5]
 800b6de:	70d3      	strb	r3, [r2, #3]
    dimming_config.delay = delay;
 800b6e0:	4a03      	ldr	r2, [pc, #12]	; (800b6f0 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800b6e2:	793b      	ldrb	r3, [r7, #4]
 800b6e4:	7113      	strb	r3, [r2, #4]
  }
}
 800b6e6:	bf00      	nop
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bc90      	pop	{r4, r7}
 800b6ee:	4770      	bx	lr
 800b6f0:	20000554 	.word	0x20000554

0800b6f4 <BSP_LCD_ScreenDimmingOn>:
  * @note   Screen brightness is gradually decreased
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOn(void)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
  }


#else
  /* Counter Prescaler value */
  uint32_t uhPrescalerValue = 0;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	603b      	str	r3, [r7, #0]
  int32_t   step;

  /* Reject this while ongoing dimming */
  if (dimming_config.ongoing)
 800b6fe:	4b71      	ldr	r3, [pc, #452]	; (800b8c4 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	f040 80d9 	bne.w	800b8ba <BSP_LCD_ScreenDimmingOn+0x1c6>
  {
    return;
  }

  /* Set that dim feature is active */
  dimming_on = 1;
 800b708:	4b6f      	ldr	r3, [pc, #444]	; (800b8c8 <BSP_LCD_ScreenDimmingOn+0x1d4>)
 800b70a:	2201      	movs	r2, #1
 800b70c:	601a      	str	r2, [r3, #0]
  dimming_config.ongoing = 1;
 800b70e:	4b6d      	ldr	r3, [pc, #436]	; (800b8c4 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b710:	2201      	movs	r2, #1
 800b712:	701a      	strb	r2, [r3, #0]

  if (dimming_config.stop > dimming_config.start)
 800b714:	4b6b      	ldr	r3, [pc, #428]	; (800b8c4 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b716:	789a      	ldrb	r2, [r3, #2]
 800b718:	4b6a      	ldr	r3, [pc, #424]	; (800b8c4 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b71a:	785b      	ldrb	r3, [r3, #1]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d903      	bls.n	800b728 <BSP_LCD_ScreenDimmingOn+0x34>
  {
    step      = dimming_config.step;
 800b720:	4b68      	ldr	r3, [pc, #416]	; (800b8c4 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b722:	78db      	ldrb	r3, [r3, #3]
 800b724:	607b      	str	r3, [r7, #4]
 800b726:	e003      	b.n	800b730 <BSP_LCD_ScreenDimmingOn+0x3c>
  }
  else
  {
    step      = -dimming_config.step;
 800b728:	4b66      	ldr	r3, [pc, #408]	; (800b8c4 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b72a:	78db      	ldrb	r3, [r3, #3]
 800b72c:	425b      	negs	r3, r3
 800b72e:	607b      	str	r3, [r7, #4]

  /* Always redo the full initialization as there is no apriori knowledge
    of IO or timer settings at this point (may have been modified by application) */

  /* Compute the prescaler value to have TIM1 counter clock equal to 16000000 Hz */
  uhPrescalerValue = (uint32_t)(SystemCoreClock / 16000000) - 1;
 800b730:	4b66      	ldr	r3, [pc, #408]	; (800b8cc <BSP_LCD_ScreenDimmingOn+0x1d8>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a66      	ldr	r2, [pc, #408]	; (800b8d0 <BSP_LCD_ScreenDimmingOn+0x1dc>)
 800b736:	fba2 2303 	umull	r2, r3, r2, r3
 800b73a:	0d9b      	lsrs	r3, r3, #22
 800b73c:	3b01      	subs	r3, #1
 800b73e:	603b      	str	r3, [r7, #0]

  LCD_TimHandle.Instance = TIMx;
 800b740:	4b64      	ldr	r3, [pc, #400]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b742:	4a65      	ldr	r2, [pc, #404]	; (800b8d8 <BSP_LCD_ScreenDimmingOn+0x1e4>)
 800b744:	601a      	str	r2, [r3, #0]

  __HAL_TIM_RESET_HANDLE_STATE(&LCD_TimHandle); /* to force MSP call */
 800b746:	4b63      	ldr	r3, [pc, #396]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b748:	2200      	movs	r2, #0
 800b74a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b74e:	4b61      	ldr	r3, [pc, #388]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b750:	2200      	movs	r2, #0
 800b752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b756:	4b5f      	ldr	r3, [pc, #380]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b758:	2200      	movs	r2, #0
 800b75a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b75e:	4b5d      	ldr	r3, [pc, #372]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b760:	2200      	movs	r2, #0
 800b762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b766:	4b5b      	ldr	r3, [pc, #364]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b768:	2200      	movs	r2, #0
 800b76a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b76e:	4b59      	ldr	r3, [pc, #356]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b770:	2200      	movs	r2, #0
 800b772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b776:	4b57      	ldr	r3, [pc, #348]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b77e:	4b55      	ldr	r3, [pc, #340]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b780:	2200      	movs	r2, #0
 800b782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b786:	4b53      	ldr	r3, [pc, #332]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b78e:	4b51      	ldr	r3, [pc, #324]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b790:	2200      	movs	r2, #0
 800b792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b796:	4b4f      	ldr	r3, [pc, #316]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800b79e:	4b4d      	ldr	r3, [pc, #308]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  LCD_TimHandle.Init.Prescaler         = uhPrescalerValue;
 800b7a6:	4a4b      	ldr	r2, [pc, #300]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	6053      	str	r3, [r2, #4]
  LCD_TimHandle.Init.Period            = PERIOD_VALUE;
 800b7ac:	4b49      	ldr	r3, [pc, #292]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7ae:	f240 2299 	movw	r2, #665	; 0x299
 800b7b2:	60da      	str	r2, [r3, #12]
  LCD_TimHandle.Init.ClockDivision     = 0;
 800b7b4:	4b47      	ldr	r3, [pc, #284]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	611a      	str	r2, [r3, #16]
  LCD_TimHandle.Init.CounterMode       = (step > 0 ? TIM_COUNTERMODE_DOWN : TIM_COUNTERMODE_UP);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	dd01      	ble.n	800b7c4 <BSP_LCD_ScreenDimmingOn+0xd0>
 800b7c0:	2310      	movs	r3, #16
 800b7c2:	e000      	b.n	800b7c6 <BSP_LCD_ScreenDimmingOn+0xd2>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	4a43      	ldr	r2, [pc, #268]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7c8:	6093      	str	r3, [r2, #8]
  LCD_TimHandle.Init.RepetitionCounter = 0;
 800b7ca:	4b42      	ldr	r3, [pc, #264]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&LCD_TimHandle) != HAL_OK)
 800b7d0:	4840      	ldr	r0, [pc, #256]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b7d2:	f008 fcf5 	bl	80141c0 <HAL_TIM_PWM_Init>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <BSP_LCD_ScreenDimmingOn+0xec>
  {
    /* Initialization Error */
    BSP_ErrorHandler();
 800b7dc:	f7fe fd7d 	bl	800a2da <BSP_ErrorHandler>
  }

  /* Common configuration for all channels */
  LCD_sConfig.OCMode       = TIM_OCMODE_PWM1;
 800b7e0:	4b3e      	ldr	r3, [pc, #248]	; (800b8dc <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b7e2:	2260      	movs	r2, #96	; 0x60
 800b7e4:	601a      	str	r2, [r3, #0]
  LCD_sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800b7e6:	4b3d      	ldr	r3, [pc, #244]	; (800b8dc <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	609a      	str	r2, [r3, #8]
  LCD_sConfig.OCFastMode   = TIM_OCFAST_DISABLE;
 800b7ec:	4b3b      	ldr	r3, [pc, #236]	; (800b8dc <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	611a      	str	r2, [r3, #16]
  LCD_sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800b7f2:	4b3a      	ldr	r3, [pc, #232]	; (800b8dc <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	60da      	str	r2, [r3, #12]
  LCD_sConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b7f8:	4b38      	ldr	r3, [pc, #224]	; (800b8dc <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	619a      	str	r2, [r3, #24]

  LCD_sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800b7fe:	4b37      	ldr	r3, [pc, #220]	; (800b8dc <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b800:	2200      	movs	r2, #0
 800b802:	615a      	str	r2, [r3, #20]

  /* Set the pulse value for channel */
  LCD_sConfig.Pulse = __DIMMING_CYCLE_VALUE(dimming_config.start);
 800b804:	4b2f      	ldr	r3, [pc, #188]	; (800b8c4 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b806:	785b      	ldrb	r3, [r3, #1]
 800b808:	461a      	mov	r2, r3
 800b80a:	f240 2399 	movw	r3, #665	; 0x299
 800b80e:	fb02 f303 	mul.w	r3, r2, r3
 800b812:	4a33      	ldr	r2, [pc, #204]	; (800b8e0 <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800b814:	fba2 2303 	umull	r2, r3, r2, r3
 800b818:	095b      	lsrs	r3, r3, #5
 800b81a:	4a30      	ldr	r2, [pc, #192]	; (800b8dc <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b81c:	6053      	str	r3, [r2, #4]
  if (HAL_TIM_PWM_ConfigChannel(&LCD_TimHandle, &LCD_sConfig, TIMx_CHANNEL) != HAL_OK)
 800b81e:	220c      	movs	r2, #12
 800b820:	492e      	ldr	r1, [pc, #184]	; (800b8dc <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b822:	482c      	ldr	r0, [pc, #176]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b824:	f008 ffe0 	bl	80147e8 <HAL_TIM_PWM_ConfigChannel>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d001      	beq.n	800b832 <BSP_LCD_ScreenDimmingOn+0x13e>
  {
    /* Configuration Error */
    BSP_ErrorHandler();
 800b82e:	f7fe fd54 	bl	800a2da <BSP_ErrorHandler>
  }

  /* Start Timer channel */
  if (HAL_TIM_PWM_Start(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800b832:	210c      	movs	r1, #12
 800b834:	4827      	ldr	r0, [pc, #156]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b836:	f008 fd1b 	bl	8014270 <HAL_TIM_PWM_Start>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d001      	beq.n	800b844 <BSP_LCD_ScreenDimmingOn+0x150>
  {
    /* PWM Generation Error */
    BSP_ErrorHandler();
 800b840:	f7fe fd4b 	bl	800a2da <BSP_ErrorHandler>
  }

  /* Set the pulse value for the timer channel */
  i = dimming_config.start;
 800b844:	4b1f      	ldr	r3, [pc, #124]	; (800b8c4 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b846:	785b      	ldrb	r3, [r3, #1]
 800b848:	461a      	mov	r2, r3
 800b84a:	4b26      	ldr	r3, [pc, #152]	; (800b8e4 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b84c:	601a      	str	r2, [r3, #0]
  while (dimming_config.ongoing)
 800b84e:	e02f      	b.n	800b8b0 <BSP_LCD_ScreenDimmingOn+0x1bc>
  {
    __HAL_TIM_SET_COMPARE(&LCD_TimHandle, TIMx_CHANNEL, __DIMMING_CYCLE_VALUE(i));
 800b850:	4b24      	ldr	r3, [pc, #144]	; (800b8e4 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f240 2299 	movw	r2, #665	; 0x299
 800b858:	fb03 f202 	mul.w	r2, r3, r2
 800b85c:	4b1d      	ldr	r3, [pc, #116]	; (800b8d4 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	491f      	ldr	r1, [pc, #124]	; (800b8e0 <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800b862:	fba1 1202 	umull	r1, r2, r1, r2
 800b866:	0952      	lsrs	r2, r2, #5
 800b868:	641a      	str	r2, [r3, #64]	; 0x40

    /* Exit if stop is reached */
    if (((step > 0) && (i >= dimming_config.stop))
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	dd06      	ble.n	800b87e <BSP_LCD_ScreenDimmingOn+0x18a>
 800b870:	4b14      	ldr	r3, [pc, #80]	; (800b8c4 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b872:	789b      	ldrb	r3, [r3, #2]
 800b874:	461a      	mov	r2, r3
 800b876:	4b1b      	ldr	r3, [pc, #108]	; (800b8e4 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d909      	bls.n	800b892 <BSP_LCD_ScreenDimmingOn+0x19e>
        || ((step < 0) && (i <= dimming_config.stop)))
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	da0a      	bge.n	800b89a <BSP_LCD_ScreenDimmingOn+0x1a6>
 800b884:	4b0f      	ldr	r3, [pc, #60]	; (800b8c4 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b886:	789b      	ldrb	r3, [r3, #2]
 800b888:	461a      	mov	r2, r3
 800b88a:	4b16      	ldr	r3, [pc, #88]	; (800b8e4 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d303      	bcc.n	800b89a <BSP_LCD_ScreenDimmingOn+0x1a6>
    {
      dimming_config.ongoing = 0;
 800b892:	4b0c      	ldr	r3, [pc, #48]	; (800b8c4 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b894:	2200      	movs	r2, #0
 800b896:	701a      	strb	r2, [r3, #0]
 800b898:	e00a      	b.n	800b8b0 <BSP_LCD_ScreenDimmingOn+0x1bc>
    }
    else
    {
      HAL_Delay(dimming_config.delay);
 800b89a:	4b0a      	ldr	r3, [pc, #40]	; (800b8c4 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b89c:	791b      	ldrb	r3, [r3, #4]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f000 fbf8 	bl	800c094 <HAL_Delay>
      i += step;
 800b8a4:	4b0f      	ldr	r3, [pc, #60]	; (800b8e4 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	4a0d      	ldr	r2, [pc, #52]	; (800b8e4 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b8ae:	6013      	str	r3, [r2, #0]
  while (dimming_config.ongoing)
 800b8b0:	4b04      	ldr	r3, [pc, #16]	; (800b8c4 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1cb      	bne.n	800b850 <BSP_LCD_ScreenDimmingOn+0x15c>
 800b8b8:	e000      	b.n	800b8bc <BSP_LCD_ScreenDimmingOn+0x1c8>
    return;
 800b8ba:	bf00      	nop
    }
  }
#endif
}
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20000554 	.word	0x20000554
 800b8c8:	20001b54 	.word	0x20001b54
 800b8cc:	200001a0 	.word	0x200001a0
 800b8d0:	431bde83 	.word	0x431bde83
 800b8d4:	20001b58 	.word	0x20001b58
 800b8d8:	40000c00 	.word	0x40000c00
 800b8dc:	20001ba4 	.word	0x20001ba4
 800b8e0:	51eb851f 	.word	0x51eb851f
 800b8e4:	20001bd4 	.word	0x20001bd4

0800b8e8 <BSP_LCD_ScreenDimmingOff>:
  * @note   Screen brightness is immediately set to its highest level
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOff(void)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	af00      	add	r7, sp, #0
#if defined(LPTIMER_DIMMING)
  GPIO_InitTypeDef GPIO_InitStructure;
#endif

  if (dimming_on == 1)
 800b8ec:	4b0d      	ldr	r3, [pc, #52]	; (800b924 <BSP_LCD_ScreenDimmingOff+0x3c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d114      	bne.n	800b91e <BSP_LCD_ScreenDimmingOff+0x36>
  {
    /* Stop ongoing dimming */
    dimming_config.ongoing = 0;
 800b8f4:	4b0c      	ldr	r3, [pc, #48]	; (800b928 <BSP_LCD_ScreenDimmingOff+0x40>)
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	701a      	strb	r2, [r3, #0]

    /* Disable timer clock for power consumption reasons */
    __HAL_RCC_LPTIM1_CLK_DISABLE();
#else
    /* Stop Timer channel */
    if (HAL_TIM_PWM_Stop(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800b8fa:	210c      	movs	r1, #12
 800b8fc:	480b      	ldr	r0, [pc, #44]	; (800b92c <BSP_LCD_ScreenDimmingOff+0x44>)
 800b8fe:	f008 fdbd 	bl	801447c <HAL_TIM_PWM_Stop>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d001      	beq.n	800b90c <BSP_LCD_ScreenDimmingOff+0x24>
    {
      /* PWM Generation Error */
      BSP_ErrorHandler();
 800b908:	f7fe fce7 	bl	800a2da <BSP_ErrorHandler>
    }

    /* Disable timer clock for power consumption reasons */
    TIMx_CLK_DISABLE();
 800b90c:	4b08      	ldr	r3, [pc, #32]	; (800b930 <BSP_LCD_ScreenDimmingOff+0x48>)
 800b90e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b910:	4a07      	ldr	r2, [pc, #28]	; (800b930 <BSP_LCD_ScreenDimmingOff+0x48>)
 800b912:	f023 0308 	bic.w	r3, r3, #8
 800b916:	6593      	str	r3, [r2, #88]	; 0x58
#endif

    dimming_on = 0;
 800b918:	4b02      	ldr	r3, [pc, #8]	; (800b924 <BSP_LCD_ScreenDimmingOff+0x3c>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	601a      	str	r2, [r3, #0]
  }
}
 800b91e:	bf00      	nop
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	20001b54 	.word	0x20001b54
 800b928:	20000554 	.word	0x20000554
 800b92c:	20001b58 	.word	0x20001b58
 800b930:	40021000 	.word	0x40021000

0800b934 <HAL_TIM_PWM_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b088      	sub	sp, #32
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 800b93c:	4b0f      	ldr	r3, [pc, #60]	; (800b97c <HAL_TIM_PWM_MspInit+0x48>)
 800b93e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b940:	4a0e      	ldr	r2, [pc, #56]	; (800b97c <HAL_TIM_PWM_MspInit+0x48>)
 800b942:	f043 0308 	orr.w	r3, r3, #8
 800b946:	6593      	str	r3, [r2, #88]	; 0x58
 800b948:	4b0c      	ldr	r3, [pc, #48]	; (800b97c <HAL_TIM_PWM_MspInit+0x48>)
 800b94a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b94c:	f003 0308 	and.w	r3, r3, #8
 800b950:	60bb      	str	r3, [r7, #8]
 800b952:	68bb      	ldr	r3, [r7, #8]

  /* Timer channel configuration */

  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b954:	2302      	movs	r3, #2
 800b956:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b958:	2301      	movs	r3, #1
 800b95a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b95c:	2303      	movs	r3, #3
 800b95e:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Alternate = TIMx_CHANNEl_AF;
 800b960:	2302      	movs	r3, #2
 800b962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800b964:	2301      	movs	r3, #1
 800b966:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b968:	f107 030c 	add.w	r3, r7, #12
 800b96c:	4619      	mov	r1, r3
 800b96e:	4804      	ldr	r0, [pc, #16]	; (800b980 <HAL_TIM_PWM_MspInit+0x4c>)
 800b970:	f002 f902 	bl	800db78 <HAL_GPIO_Init>
}
 800b974:	bf00      	nop
 800b976:	3720      	adds	r7, #32
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	40021000 	.word	0x40021000
 800b980:	48002000 	.word	0x48002000

0800b984 <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b088      	sub	sp, #32
 800b988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 800b98a:	4b29      	ldr	r3, [pc, #164]	; (800ba30 <BSP_LCD_MspInit+0xac>)
 800b98c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b98e:	4a28      	ldr	r2, [pc, #160]	; (800ba30 <BSP_LCD_MspInit+0xac>)
 800b990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b994:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b996:	4b26      	ldr	r3, [pc, #152]	; (800ba30 <BSP_LCD_MspInit+0xac>)
 800b998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b99a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b99e:	60bb      	str	r3, [r7, #8]
 800b9a0:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800b9a2:	4b23      	ldr	r3, [pc, #140]	; (800ba30 <BSP_LCD_MspInit+0xac>)
 800b9a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9a6:	4a22      	ldr	r2, [pc, #136]	; (800ba30 <BSP_LCD_MspInit+0xac>)
 800b9a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b9ae:	4b20      	ldr	r3, [pc, #128]	; (800ba30 <BSP_LCD_MspInit+0xac>)
 800b9b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9b6:	607b      	str	r3, [r7, #4]
 800b9b8:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 800b9ba:	4b1d      	ldr	r3, [pc, #116]	; (800ba30 <BSP_LCD_MspInit+0xac>)
 800b9bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9be:	4a1c      	ldr	r2, [pc, #112]	; (800ba30 <BSP_LCD_MspInit+0xac>)
 800b9c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b9c6:	4b1a      	ldr	r3, [pc, #104]	; (800ba30 <BSP_LCD_MspInit+0xac>)
 800b9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ce:	603b      	str	r3, [r7, #0]
 800b9d0:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 800b9d2:	f7ff fa57 	bl	800ae84 <BSP_IO_Init>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d101      	bne.n	800b9e0 <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 800b9dc:	f7fe fc7d 	bl	800a2da <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 800b9e0:	2101      	movs	r1, #1
 800b9e2:	2004      	movs	r0, #4
 800b9e4:	f7ff fa92 	bl	800af0c <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800b9fc:	f107 030c 	add.w	r3, r7, #12
 800ba00:	4619      	mov	r1, r3
 800ba02:	480c      	ldr	r0, [pc, #48]	; (800ba34 <BSP_LCD_MspInit+0xb0>)
 800ba04:	f002 f8b8 	bl	800db78 <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 800ba10:	2300      	movs	r3, #0
 800ba12:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800ba14:	2300      	movs	r3, #0
 800ba16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800ba1c:	f107 030c 	add.w	r3, r7, #12
 800ba20:	4619      	mov	r1, r3
 800ba22:	4805      	ldr	r0, [pc, #20]	; (800ba38 <BSP_LCD_MspInit+0xb4>)
 800ba24:	f002 f8a8 	bl	800db78 <HAL_GPIO_Init>
}
 800ba28:	bf00      	nop
 800ba2a:	3720      	adds	r7, #32
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	40021000 	.word	0x40021000
 800ba34:	48002000 	.word	0x48002000
 800ba38:	48001c00 	.word	0x48001c00

0800ba3c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b088      	sub	sp, #32
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	4603      	mov	r3, r0
 800ba44:	603a      	str	r2, [r7, #0]
 800ba46:	80fb      	strh	r3, [r7, #6]
 800ba48:	460b      	mov	r3, r1
 800ba4a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	61fb      	str	r3, [r7, #28]
 800ba50:	2300      	movs	r3, #0
 800ba52:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  height = DrawProp.pFont->Height;
 800ba54:	4b45      	ldr	r3, [pc, #276]	; (800bb6c <DrawChar+0x130>)
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	88db      	ldrh	r3, [r3, #6]
 800ba5a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 800ba5c:	4b43      	ldr	r3, [pc, #268]	; (800bb6c <DrawChar+0x130>)
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	889b      	ldrh	r3, [r3, #4]
 800ba62:	823b      	strh	r3, [r7, #16]

  offset =  8 * ((width + 7) / 8) -  width ;
 800ba64:	8a3b      	ldrh	r3, [r7, #16]
 800ba66:	3307      	adds	r3, #7
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	da00      	bge.n	800ba6e <DrawChar+0x32>
 800ba6c:	3307      	adds	r3, #7
 800ba6e:	10db      	asrs	r3, r3, #3
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	b2da      	uxtb	r2, r3
 800ba76:	8a3b      	ldrh	r3, [r7, #16]
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	1ad3      	subs	r3, r2, r3
 800ba7c:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 800ba7e:	2300      	movs	r3, #0
 800ba80:	61fb      	str	r3, [r7, #28]
 800ba82:	e069      	b.n	800bb58 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 800ba84:	8a3b      	ldrh	r3, [r7, #16]
 800ba86:	3307      	adds	r3, #7
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	da00      	bge.n	800ba8e <DrawChar+0x52>
 800ba8c:	3307      	adds	r3, #7
 800ba8e:	10db      	asrs	r3, r3, #3
 800ba90:	461a      	mov	r2, r3
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	fb02 f303 	mul.w	r3, r2, r3
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 800ba9e:	8a3b      	ldrh	r3, [r7, #16]
 800baa0:	3307      	adds	r3, #7
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	da00      	bge.n	800baa8 <DrawChar+0x6c>
 800baa6:	3307      	adds	r3, #7
 800baa8:	10db      	asrs	r3, r3, #3
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d002      	beq.n	800bab4 <DrawChar+0x78>
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d004      	beq.n	800babc <DrawChar+0x80>
 800bab2:	e00c      	b.n	800bace <DrawChar+0x92>
    {
      case 1:
        line =  pchar[0];
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	617b      	str	r3, [r7, #20]
        break;
 800baba:	e016      	b.n	800baea <DrawChar+0xae>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	021b      	lsls	r3, r3, #8
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	3201      	adds	r2, #1
 800bac6:	7812      	ldrb	r2, [r2, #0]
 800bac8:	4313      	orrs	r3, r2
 800baca:	617b      	str	r3, [r7, #20]
        break;
 800bacc:	e00d      	b.n	800baea <DrawChar+0xae>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	041a      	lsls	r2, r3, #16
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	3301      	adds	r3, #1
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	021b      	lsls	r3, r3, #8
 800badc:	4313      	orrs	r3, r2
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	3202      	adds	r2, #2
 800bae2:	7812      	ldrb	r2, [r2, #0]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	617b      	str	r3, [r7, #20]
        break;
 800bae8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800baea:	2300      	movs	r3, #0
 800baec:	61bb      	str	r3, [r7, #24]
 800baee:	e029      	b.n	800bb44 <DrawChar+0x108>
    {
      if ((line & (1 << (width - j + offset - 1))) != 0)
 800baf0:	8a3a      	ldrh	r2, [r7, #16]
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	1ad2      	subs	r2, r2, r3
 800baf6:	7bfb      	ldrb	r3, [r7, #15]
 800baf8:	4413      	add	r3, r2
 800bafa:	3b01      	subs	r3, #1
 800bafc:	2201      	movs	r2, #1
 800bafe:	fa02 f303 	lsl.w	r3, r2, r3
 800bb02:	461a      	mov	r2, r3
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	4013      	ands	r3, r2
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00c      	beq.n	800bb26 <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	88fb      	ldrh	r3, [r7, #6]
 800bb12:	4413      	add	r3, r2
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	4a15      	ldr	r2, [pc, #84]	; (800bb6c <DrawChar+0x130>)
 800bb18:	6812      	ldr	r2, [r2, #0]
 800bb1a:	b292      	uxth	r2, r2
 800bb1c:	88b9      	ldrh	r1, [r7, #4]
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7ff fbfe 	bl	800b320 <BSP_LCD_DrawPixel>
 800bb24:	e00b      	b.n	800bb3e <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	88fb      	ldrh	r3, [r7, #6]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	4a0e      	ldr	r2, [pc, #56]	; (800bb6c <DrawChar+0x130>)
 800bb32:	6852      	ldr	r2, [r2, #4]
 800bb34:	b292      	uxth	r2, r2
 800bb36:	88b9      	ldrh	r1, [r7, #4]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7ff fbf1 	bl	800b320 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	3301      	adds	r3, #1
 800bb42:	61bb      	str	r3, [r7, #24]
 800bb44:	8a3b      	ldrh	r3, [r7, #16]
 800bb46:	69ba      	ldr	r2, [r7, #24]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d3d1      	bcc.n	800baf0 <DrawChar+0xb4>
      }
    }
    Ypos++;
 800bb4c:	88bb      	ldrh	r3, [r7, #4]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	3301      	adds	r3, #1
 800bb56:	61fb      	str	r3, [r7, #28]
 800bb58:	8a7b      	ldrh	r3, [r7, #18]
 800bb5a:	69fa      	ldr	r2, [r7, #28]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d391      	bcc.n	800ba84 <DrawChar+0x48>
  }
}
 800bb60:	bf00      	nop
 800bb62:	bf00      	nop
 800bb64:	3720      	adds	r7, #32
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20001bc4 	.word	0x20001bc4

0800bb70 <BSP_TS_InitEx>:
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @param  orientation : TS_ORIENTATION_LANDSCAPE or TS_ORIENTATION_PORTRAIT
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_InitEx(uint16_t ts_SizeX, uint16_t ts_SizeY, uint8_t  orientation)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	4603      	mov	r3, r0
 800bb78:	80fb      	strh	r3, [r7, #6]
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	80bb      	strh	r3, [r7, #4]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	70fb      	strb	r3, [r7, #3]
  uint8_t ts_status = TS_OK;
 800bb82:	2300      	movs	r3, #0
 800bb84:	73fb      	strb	r3, [r7, #15]
  uint16_t read_id = 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	81bb      	strh	r3, [r7, #12]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800bb8a:	4b20      	ldr	r3, [pc, #128]	; (800bc0c <BSP_TS_InitEx+0x9c>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a20      	ldr	r2, [pc, #128]	; (800bc10 <BSP_TS_InitEx+0xa0>)
 800bb90:	7812      	ldrb	r2, [r2, #0]
 800bb92:	b292      	uxth	r2, r2
 800bb94:	4610      	mov	r0, r2
 800bb96:	4798      	blx	r3

  /* Scan FT6x36 TouchScreen IC controller ID register by I2C Read */
  /* Verify this is a FT6x36, otherwise this is an error case      */

  read_id = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800bb98:	4b1c      	ldr	r3, [pc, #112]	; (800bc0c <BSP_TS_InitEx+0x9c>)
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	2070      	movs	r0, #112	; 0x70
 800bb9e:	4798      	blx	r3
 800bba0:	4603      	mov	r3, r0
 800bba2:	81bb      	strh	r3, [r7, #12]

  if (read_id == FT6x36_ID_VALUE)
 800bba4:	89bb      	ldrh	r3, [r7, #12]
 800bba6:	2bcd      	cmp	r3, #205	; 0xcd
 800bba8:	d12a      	bne.n	800bc00 <BSP_TS_InitEx+0x90>
  {
    /* Found FT6x36 : Initialize the TS driver structure */
    tsDriver = &ft6x06_ts_drv;
 800bbaa:	4b1a      	ldr	r3, [pc, #104]	; (800bc14 <BSP_TS_InitEx+0xa4>)
 800bbac:	4a17      	ldr	r2, [pc, #92]	; (800bc0c <BSP_TS_InitEx+0x9c>)
 800bbae:	601a      	str	r2, [r3, #0]

    I2C_Address    = TS_I2C_ADDRESS;
 800bbb0:	4b17      	ldr	r3, [pc, #92]	; (800bc10 <BSP_TS_InitEx+0xa0>)
 800bbb2:	2270      	movs	r2, #112	; 0x70
 800bbb4:	701a      	strb	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if (orientation == TS_ORIENTATION_PORTRAIT)
 800bbb6:	78fb      	ldrb	r3, [r7, #3]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d106      	bne.n	800bbca <BSP_TS_InitEx+0x5a>
    {
      tsOrientation = TS_SWAP_X | TS_SWAP_Y;
 800bbbc:	4b16      	ldr	r3, [pc, #88]	; (800bc18 <BSP_TS_InitEx+0xa8>)
 800bbbe:	2206      	movs	r2, #6
 800bbc0:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_PORTRAIT;
 800bbc2:	4b16      	ldr	r3, [pc, #88]	; (800bc1c <BSP_TS_InitEx+0xac>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	701a      	strb	r2, [r3, #0]
 800bbc8:	e005      	b.n	800bbd6 <BSP_TS_InitEx+0x66>
    }
    else
    {
      tsOrientation = TS_SWAP_XY | TS_SWAP_Y;
 800bbca:	4b13      	ldr	r3, [pc, #76]	; (800bc18 <BSP_TS_InitEx+0xa8>)
 800bbcc:	220c      	movs	r2, #12
 800bbce:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_LANDSCAPE;
 800bbd0:	4b12      	ldr	r3, [pc, #72]	; (800bc1c <BSP_TS_InitEx+0xac>)
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	701a      	strb	r2, [r3, #0]
    }

    if (ts_status == TS_OK)
 800bbd6:	7bfb      	ldrb	r3, [r7, #15]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d111      	bne.n	800bc00 <BSP_TS_InitEx+0x90>
    {
      /* Software reset the TouchScreen */
      tsDriver->Reset(I2C_Address);
 800bbdc:	4b0d      	ldr	r3, [pc, #52]	; (800bc14 <BSP_TS_InitEx+0xa4>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	4a0b      	ldr	r2, [pc, #44]	; (800bc10 <BSP_TS_InitEx+0xa0>)
 800bbe4:	7812      	ldrb	r2, [r2, #0]
 800bbe6:	b292      	uxth	r2, r2
 800bbe8:	4610      	mov	r0, r2
 800bbea:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      tsDriver->Start(I2C_Address);
 800bbec:	4b09      	ldr	r3, [pc, #36]	; (800bc14 <BSP_TS_InitEx+0xa4>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	4a07      	ldr	r2, [pc, #28]	; (800bc10 <BSP_TS_InitEx+0xa0>)
 800bbf4:	7812      	ldrb	r2, [r2, #0]
 800bbf6:	b292      	uxth	r2, r2
 800bbf8:	4610      	mov	r0, r2
 800bbfa:	4798      	blx	r3

      return TS_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	e000      	b.n	800bc02 <BSP_TS_InitEx+0x92>

    } /* of if(ts_status == TS_OK) */
  }

  return TS_DEVICE_NOT_FOUND;
 800bc00:	2303      	movs	r3, #3


}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	200001a4 	.word	0x200001a4
 800bc10:	20001bdc 	.word	0x20001bdc
 800bc14:	20001bd8 	.word	0x20001bd8
 800bc18:	20000559 	.word	0x20000559
 800bc1c:	2000055a 	.word	0x2000055a

0800bc20 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 800bc26:	2300      	movs	r3, #0
 800bc28:	71fb      	strb	r3, [r7, #7]

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x36 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 800bc2a:	f000 f93b 	bl	800bea4 <BSP_TS_INT_MspInit>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  tsDriver->EnableIT(I2C_Address);
 800bc2e:	4b06      	ldr	r3, [pc, #24]	; (800bc48 <BSP_TS_ITConfig+0x28>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	4a05      	ldr	r2, [pc, #20]	; (800bc4c <BSP_TS_ITConfig+0x2c>)
 800bc36:	7812      	ldrb	r2, [r2, #0]
 800bc38:	b292      	uxth	r2, r2
 800bc3a:	4610      	mov	r0, r2
 800bc3c:	4798      	blx	r3

  return (ts_status);
 800bc3e:	79fb      	ldrb	r3, [r7, #7]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	20001bd8 	.word	0x20001bd8
 800bc4c:	20001bdc 	.word	0x20001bdc

0800bc50 <BSP_TS_ITDeConfig>:
/**
  * @brief  deConfigures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITDeConfig(void)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 800bc56:	2300      	movs	r3, #0
 800bc58:	71fb      	strb	r3, [r7, #7]

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x36 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspDeInit();
 800bc5a:	f000 f969 	bl	800bf30 <BSP_TS_INT_MspDeInit>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  tsDriver->DisableIT(I2C_Address);
 800bc5e:	4b06      	ldr	r3, [pc, #24]	; (800bc78 <BSP_TS_ITDeConfig+0x28>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc64:	4a05      	ldr	r2, [pc, #20]	; (800bc7c <BSP_TS_ITDeConfig+0x2c>)
 800bc66:	7812      	ldrb	r2, [r2, #0]
 800bc68:	b292      	uxth	r2, r2
 800bc6a:	4610      	mov	r0, r2
 800bc6c:	4798      	blx	r3

  return (ts_status);
 800bc6e:	79fb      	ldrb	r3, [r7, #7]
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	20001bd8 	.word	0x20001bd8
 800bc7c:	20001bdc 	.word	0x20001bdc

0800bc80 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800bc80:	b590      	push	{r4, r7, lr}
 800bc82:	b089      	sub	sp, #36	; 0x24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2C_Address);
 800bc8c:	4b80      	ldr	r3, [pc, #512]	; (800be90 <BSP_TS_GetState+0x210>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	691b      	ldr	r3, [r3, #16]
 800bc92:	4a80      	ldr	r2, [pc, #512]	; (800be94 <BSP_TS_GetState+0x214>)
 800bc94:	7812      	ldrb	r2, [r2, #0]
 800bc96:	b292      	uxth	r2, r2
 800bc98:	4610      	mov	r0, r2
 800bc9a:	4798      	blx	r3
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	461a      	mov	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	701a      	strb	r2, [r3, #0]
  if (TS_State->touchDetected)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f000 80ec 	beq.w	800be86 <BSP_TS_GetState+0x206>
  {
    for (index = 0; index < TS_State->touchDetected; index++)
 800bcae:	2300      	movs	r3, #0
 800bcb0:	61fb      	str	r3, [r7, #28]
 800bcb2:	e0e1      	b.n	800be78 <BSP_TS_GetState+0x1f8>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800bcb4:	4b76      	ldr	r3, [pc, #472]	; (800be90 <BSP_TS_GetState+0x210>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	695b      	ldr	r3, [r3, #20]
 800bcba:	4a76      	ldr	r2, [pc, #472]	; (800be94 <BSP_TS_GetState+0x214>)
 800bcbc:	7812      	ldrb	r2, [r2, #0]
 800bcbe:	b290      	uxth	r0, r2
 800bcc0:	f107 0110 	add.w	r1, r7, #16
 800bcc4:	69fa      	ldr	r2, [r7, #28]
 800bcc6:	0052      	lsls	r2, r2, #1
 800bcc8:	188c      	adds	r4, r1, r2
 800bcca:	f107 010c 	add.w	r1, r7, #12
 800bcce:	69fa      	ldr	r2, [r7, #28]
 800bcd0:	0052      	lsls	r2, r2, #1
 800bcd2:	440a      	add	r2, r1
 800bcd4:	4621      	mov	r1, r4
 800bcd6:	4798      	blx	r3

      if (tsOrientation & TS_SWAP_XY)
 800bcd8:	4b6f      	ldr	r3, [pc, #444]	; (800be98 <BSP_TS_GetState+0x218>)
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	f003 0308 	and.w	r3, r3, #8
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d019      	beq.n	800bd18 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	005b      	lsls	r3, r3, #1
 800bce8:	3320      	adds	r3, #32
 800bcea:	443b      	add	r3, r7
 800bcec:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800bcf0:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index];
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	005b      	lsls	r3, r3, #1
 800bcf6:	3320      	adds	r3, #32
 800bcf8:	443b      	add	r3, r7
 800bcfa:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	005b      	lsls	r3, r3, #1
 800bd02:	3320      	adds	r3, #32
 800bd04:	443b      	add	r3, r7
 800bd06:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	005b      	lsls	r3, r3, #1
 800bd0e:	3320      	adds	r3, #32
 800bd10:	443b      	add	r3, r7
 800bd12:	8b3a      	ldrh	r2, [r7, #24]
 800bd14:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      if (tsOrientation & TS_SWAP_X)
 800bd18:	4b5f      	ldr	r3, [pc, #380]	; (800be98 <BSP_TS_GetState+0x218>)
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	f003 0302 	and.w	r3, r3, #2
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00e      	beq.n	800bd42 <BSP_TS_GetState+0xc2>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_x[index];
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	005b      	lsls	r3, r3, #1
 800bd28:	3320      	adds	r3, #32
 800bd2a:	443b      	add	r3, r7
 800bd2c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800bd30:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	005b      	lsls	r3, r3, #1
 800bd3a:	3320      	adds	r3, #32
 800bd3c:	443b      	add	r3, r7
 800bd3e:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if (tsOrientation & TS_SWAP_Y)
 800bd42:	4b55      	ldr	r3, [pc, #340]	; (800be98 <BSP_TS_GetState+0x218>)
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	f003 0304 	and.w	r3, r3, #4
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00e      	beq.n	800bd6c <BSP_TS_GetState+0xec>
      {
        Raw_y[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_y[index];
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	005b      	lsls	r3, r3, #1
 800bd52:	3320      	adds	r3, #32
 800bd54:	443b      	add	r3, r7
 800bd56:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800bd5a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	005b      	lsls	r3, r3, #1
 800bd64:	3320      	adds	r3, #32
 800bd66:	443b      	add	r3, r7
 800bd68:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	005b      	lsls	r3, r3, #1
 800bd70:	3320      	adds	r3, #32
 800bd72:	443b      	add	r3, r7
 800bd74:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	4a48      	ldr	r2, [pc, #288]	; (800be9c <BSP_TS_GetState+0x21c>)
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd82:	4299      	cmp	r1, r3
 800bd84:	d90d      	bls.n	800bda2 <BSP_TS_GetState+0x122>
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	005b      	lsls	r3, r3, #1
 800bd8a:	3320      	adds	r3, #32
 800bd8c:	443b      	add	r3, r7
 800bd8e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800bd92:	4942      	ldr	r1, [pc, #264]	; (800be9c <BSP_TS_GetState+0x21c>)
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	e00c      	b.n	800bdbc <BSP_TS_GetState+0x13c>
 800bda2:	4a3e      	ldr	r2, [pc, #248]	; (800be9c <BSP_TS_GetState+0x21c>)
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdaa:	b29a      	uxth	r2, r3
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	005b      	lsls	r3, r3, #1
 800bdb0:	3320      	adds	r3, #32
 800bdb2:	443b      	add	r3, r7
 800bdb4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800bdb8:	1ad3      	subs	r3, r2, r3
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	005b      	lsls	r3, r3, #1
 800bdc2:	3320      	adds	r3, #32
 800bdc4:	443b      	add	r3, r7
 800bdc6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800bdca:	4619      	mov	r1, r3
 800bdcc:	4a34      	ldr	r2, [pc, #208]	; (800bea0 <BSP_TS_GetState+0x220>)
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdd4:	4299      	cmp	r1, r3
 800bdd6:	d90d      	bls.n	800bdf4 <BSP_TS_GetState+0x174>
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	005b      	lsls	r3, r3, #1
 800bddc:	3320      	adds	r3, #32
 800bdde:	443b      	add	r3, r7
 800bde0:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800bde4:	492e      	ldr	r1, [pc, #184]	; (800bea0 <BSP_TS_GetState+0x220>)
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	e00c      	b.n	800be0e <BSP_TS_GetState+0x18e>
 800bdf4:	4a2a      	ldr	r2, [pc, #168]	; (800bea0 <BSP_TS_GetState+0x220>)
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	005b      	lsls	r3, r3, #1
 800be02:	3320      	adds	r3, #32
 800be04:	443b      	add	r3, r7
 800be06:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800be0a:	1ad3      	subs	r3, r2, r3
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 800be10:	8afa      	ldrh	r2, [r7, #22]
 800be12:	8abb      	ldrh	r3, [r7, #20]
 800be14:	4413      	add	r3, r2
 800be16:	2b05      	cmp	r3, #5
 800be18:	dd15      	ble.n	800be46 <BSP_TS_GetState+0x1c6>
      {
        _x[index] = Raw_x[index];
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	005b      	lsls	r3, r3, #1
 800be1e:	3320      	adds	r3, #32
 800be20:	443b      	add	r3, r7
 800be22:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800be26:	4619      	mov	r1, r3
 800be28:	4a1c      	ldr	r2, [pc, #112]	; (800be9c <BSP_TS_GetState+0x21c>)
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	005b      	lsls	r3, r3, #1
 800be34:	3320      	adds	r3, #32
 800be36:	443b      	add	r3, r7
 800be38:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800be3c:	4619      	mov	r1, r3
 800be3e:	4a18      	ldr	r2, [pc, #96]	; (800bea0 <BSP_TS_GetState+0x220>)
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 800be46:	4a15      	ldr	r2, [pc, #84]	; (800be9c <BSP_TS_GetState+0x21c>)
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be4e:	b299      	uxth	r1, r3
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	4413      	add	r3, r2
 800be58:	460a      	mov	r2, r1
 800be5a:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 800be5c:	4a10      	ldr	r2, [pc, #64]	; (800bea0 <BSP_TS_GetState+0x220>)
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be64:	b299      	uxth	r1, r3
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	005b      	lsls	r3, r3, #1
 800be6c:	4413      	add	r3, r2
 800be6e:	460a      	mov	r2, r1
 800be70:	80da      	strh	r2, [r3, #6]
    for (index = 0; index < TS_State->touchDetected; index++)
 800be72:	69fb      	ldr	r3, [r7, #28]
 800be74:	3301      	adds	r3, #1
 800be76:	61fb      	str	r3, [r7, #28]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	461a      	mov	r2, r3
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	4293      	cmp	r3, r2
 800be82:	f4ff af17 	bcc.w	800bcb4 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800be86:	7efb      	ldrb	r3, [r7, #27]
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3724      	adds	r7, #36	; 0x24
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd90      	pop	{r4, r7, pc}
 800be90:	20001bd8 	.word	0x20001bd8
 800be94:	20001bdc 	.word	0x20001bdc
 800be98:	20000559 	.word	0x20000559
 800be9c:	20001be0 	.word	0x20001be0
 800bea0:	20001be8 	.word	0x20001be8

0800bea4 <BSP_TS_INT_MspInit>:
  * @brief  Initializes the TS_INT pin MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b088      	sub	sp, #32
 800bea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_PWR_CLK_ENABLE();
 800beaa:	4b1e      	ldr	r3, [pc, #120]	; (800bf24 <BSP_TS_INT_MspInit+0x80>)
 800beac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beae:	4a1d      	ldr	r2, [pc, #116]	; (800bf24 <BSP_TS_INT_MspInit+0x80>)
 800beb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800beb4:	6593      	str	r3, [r2, #88]	; 0x58
 800beb6:	4b1b      	ldr	r3, [pc, #108]	; (800bf24 <BSP_TS_INT_MspInit+0x80>)
 800beb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bebe:	60bb      	str	r3, [r7, #8]
 800bec0:	68bb      	ldr	r3, [r7, #8]
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800bec2:	4b19      	ldr	r3, [pc, #100]	; (800bf28 <BSP_TS_INT_MspInit+0x84>)
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	4a18      	ldr	r2, [pc, #96]	; (800bf28 <BSP_TS_INT_MspInit+0x84>)
 800bec8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800becc:	6053      	str	r3, [r2, #4]

  TS_INT_GPIO_CLK_ENABLE();
 800bece:	4b15      	ldr	r3, [pc, #84]	; (800bf24 <BSP_TS_INT_MspInit+0x80>)
 800bed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bed2:	4a14      	ldr	r2, [pc, #80]	; (800bf24 <BSP_TS_INT_MspInit+0x80>)
 800bed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800beda:	4b12      	ldr	r3, [pc, #72]	; (800bf24 <BSP_TS_INT_MspInit+0x80>)
 800bedc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee2:	607b      	str	r3, [r7, #4]
 800bee4:	687b      	ldr	r3, [r7, #4]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800bee6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800beea:	60fb      	str	r3, [r7, #12]

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 800beec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bef0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800bef2:	2301      	movs	r3, #1
 800bef4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800bef6:	2302      	movs	r3, #2
 800bef8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800befa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800befe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 800bf00:	f107 030c 	add.w	r3, r7, #12
 800bf04:	4619      	mov	r1, r3
 800bf06:	4809      	ldr	r0, [pc, #36]	; (800bf2c <BSP_TS_INT_MspInit+0x88>)
 800bf08:	f001 fe36 	bl	800db78 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x08, 0x00);
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2108      	movs	r1, #8
 800bf10:	2028      	movs	r0, #40	; 0x28
 800bf12:	f001 fc5a 	bl	800d7ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 800bf16:	2028      	movs	r0, #40	; 0x28
 800bf18:	f001 fc73 	bl	800d802 <HAL_NVIC_EnableIRQ>
}
 800bf1c:	bf00      	nop
 800bf1e:	3720      	adds	r7, #32
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	40021000 	.word	0x40021000
 800bf28:	40007000 	.word	0x40007000
 800bf2c:	48001800 	.word	0x48001800

0800bf30 <BSP_TS_INT_MspDeInit>:
  * @brief  Initializes the TS_INT pin MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_TS_INT_MspDeInit(void)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b088      	sub	sp, #32
 800bf34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_PWR_CLK_ENABLE();
 800bf36:	4b1a      	ldr	r3, [pc, #104]	; (800bfa0 <BSP_TS_INT_MspDeInit+0x70>)
 800bf38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf3a:	4a19      	ldr	r2, [pc, #100]	; (800bfa0 <BSP_TS_INT_MspDeInit+0x70>)
 800bf3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf40:	6593      	str	r3, [r2, #88]	; 0x58
 800bf42:	4b17      	ldr	r3, [pc, #92]	; (800bfa0 <BSP_TS_INT_MspDeInit+0x70>)
 800bf44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf4a:	60bb      	str	r3, [r7, #8]
 800bf4c:	68bb      	ldr	r3, [r7, #8]
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800bf4e:	4b15      	ldr	r3, [pc, #84]	; (800bfa4 <BSP_TS_INT_MspDeInit+0x74>)
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	4a14      	ldr	r2, [pc, #80]	; (800bfa4 <BSP_TS_INT_MspDeInit+0x74>)
 800bf54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf58:	6053      	str	r3, [r2, #4]

  TS_INT_GPIO_CLK_ENABLE();
 800bf5a:	4b11      	ldr	r3, [pc, #68]	; (800bfa0 <BSP_TS_INT_MspDeInit+0x70>)
 800bf5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf5e:	4a10      	ldr	r2, [pc, #64]	; (800bfa0 <BSP_TS_INT_MspDeInit+0x70>)
 800bf60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf64:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bf66:	4b0e      	ldr	r3, [pc, #56]	; (800bfa0 <BSP_TS_INT_MspDeInit+0x70>)
 800bf68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf6e:	607b      	str	r3, [r7, #4]
 800bf70:	687b      	ldr	r3, [r7, #4]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800bf72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bf76:	60fb      	str	r3, [r7, #12]

  gpio_init_structure.Pin = GPIO_PIN_All;
 800bf78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf7c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_ANALOG;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800bf82:	2300      	movs	r3, #0
 800bf84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 800bf86:	f107 030c 	add.w	r3, r7, #12
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	4806      	ldr	r0, [pc, #24]	; (800bfa8 <BSP_TS_INT_MspDeInit+0x78>)
 800bf8e:	f001 fdf3 	bl	800db78 <HAL_GPIO_Init>

  HAL_NVIC_DisableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 800bf92:	2028      	movs	r0, #40	; 0x28
 800bf94:	f001 fc43 	bl	800d81e <HAL_NVIC_DisableIRQ>
}
 800bf98:	bf00      	nop
 800bf9a:	3720      	adds	r7, #32
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	40021000 	.word	0x40021000
 800bfa4:	40007000 	.word	0x40007000
 800bfa8:	48001800 	.word	0x48001800

0800bfac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bfb6:	2003      	movs	r0, #3
 800bfb8:	f001 fbfc 	bl	800d7b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	f000 f80d 	bl	800bfdc <HAL_InitTick>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d002      	beq.n	800bfce <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	71fb      	strb	r3, [r7, #7]
 800bfcc:	e001      	b.n	800bfd2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800bfce:	f7f7 fa67 	bl	80034a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800bfd2:	79fb      	ldrb	r3, [r7, #7]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3708      	adds	r7, #8
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800bfe8:	4b17      	ldr	r3, [pc, #92]	; (800c048 <HAL_InitTick+0x6c>)
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d023      	beq.n	800c038 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800bff0:	4b16      	ldr	r3, [pc, #88]	; (800c04c <HAL_InitTick+0x70>)
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	4b14      	ldr	r3, [pc, #80]	; (800c048 <HAL_InitTick+0x6c>)
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	4619      	mov	r1, r3
 800bffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bffe:	fbb3 f3f1 	udiv	r3, r3, r1
 800c002:	fbb2 f3f3 	udiv	r3, r2, r3
 800c006:	4618      	mov	r0, r3
 800c008:	f001 fc17 	bl	800d83a <HAL_SYSTICK_Config>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10f      	bne.n	800c032 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2b0f      	cmp	r3, #15
 800c016:	d809      	bhi.n	800c02c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c018:	2200      	movs	r2, #0
 800c01a:	6879      	ldr	r1, [r7, #4]
 800c01c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c020:	f001 fbd3 	bl	800d7ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800c024:	4a0a      	ldr	r2, [pc, #40]	; (800c050 <HAL_InitTick+0x74>)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6013      	str	r3, [r2, #0]
 800c02a:	e007      	b.n	800c03c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800c02c:	2301      	movs	r3, #1
 800c02e:	73fb      	strb	r3, [r7, #15]
 800c030:	e004      	b.n	800c03c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800c032:	2301      	movs	r3, #1
 800c034:	73fb      	strb	r3, [r7, #15]
 800c036:	e001      	b.n	800c03c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c038:	2301      	movs	r3, #1
 800c03a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800c03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	20000560 	.word	0x20000560
 800c04c:	200001a0 	.word	0x200001a0
 800c050:	2000055c 	.word	0x2000055c

0800c054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c054:	b480      	push	{r7}
 800c056:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800c058:	4b06      	ldr	r3, [pc, #24]	; (800c074 <HAL_IncTick+0x20>)
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	461a      	mov	r2, r3
 800c05e:	4b06      	ldr	r3, [pc, #24]	; (800c078 <HAL_IncTick+0x24>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4413      	add	r3, r2
 800c064:	4a04      	ldr	r2, [pc, #16]	; (800c078 <HAL_IncTick+0x24>)
 800c066:	6013      	str	r3, [r2, #0]
}
 800c068:	bf00      	nop
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	20000560 	.word	0x20000560
 800c078:	20001bf0 	.word	0x20001bf0

0800c07c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c07c:	b480      	push	{r7}
 800c07e:	af00      	add	r7, sp, #0
  return uwTick;
 800c080:	4b03      	ldr	r3, [pc, #12]	; (800c090 <HAL_GetTick+0x14>)
 800c082:	681b      	ldr	r3, [r3, #0]
}
 800c084:	4618      	mov	r0, r3
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	20001bf0 	.word	0x20001bf0

0800c094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c09c:	f7ff ffee 	bl	800c07c <HAL_GetTick>
 800c0a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0ac:	d005      	beq.n	800c0ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800c0ae:	4b0a      	ldr	r3, [pc, #40]	; (800c0d8 <HAL_Delay+0x44>)
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c0ba:	bf00      	nop
 800c0bc:	f7ff ffde 	bl	800c07c <HAL_GetTick>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	1ad3      	subs	r3, r2, r3
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d8f7      	bhi.n	800c0bc <HAL_Delay+0x28>
  {
  }
}
 800c0cc:	bf00      	nop
 800c0ce:	bf00      	nop
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	20000560 	.word	0x20000560

0800c0dc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800c0e0:	4b05      	ldr	r3, [pc, #20]	; (800c0f8 <HAL_SuspendTick+0x1c>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a04      	ldr	r2, [pc, #16]	; (800c0f8 <HAL_SuspendTick+0x1c>)
 800c0e6:	f023 0302 	bic.w	r3, r3, #2
 800c0ea:	6013      	str	r3, [r2, #0]
}
 800c0ec:	bf00      	nop
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr
 800c0f6:	bf00      	nop
 800c0f8:	e000e010 	.word	0xe000e010

0800c0fc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800c100:	4b05      	ldr	r3, [pc, #20]	; (800c118 <HAL_ResumeTick+0x1c>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a04      	ldr	r2, [pc, #16]	; (800c118 <HAL_ResumeTick+0x1c>)
 800c106:	f043 0302 	orr.w	r3, r3, #2
 800c10a:	6013      	str	r3, [r2, #0]
}
 800c10c:	bf00      	nop
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	e000e010 	.word	0xe000e010

0800c11c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	431a      	orrs	r2, r3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	609a      	str	r2, [r3, #8]
}
 800c136:	bf00      	nop
 800c138:	370c      	adds	r7, #12
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr

0800c142 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800c142:	b480      	push	{r7}
 800c144:	b083      	sub	sp, #12
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
 800c14a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	431a      	orrs	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	609a      	str	r2, [r3, #8]
}
 800c15c:	bf00      	nop
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr

0800c168 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800c178:	4618      	mov	r0, r3
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800c184:	b480      	push	{r7}
 800c186:	b087      	sub	sp, #28
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
 800c190:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	3360      	adds	r3, #96	; 0x60
 800c196:	461a      	mov	r2, r3
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4413      	add	r3, r2
 800c19e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	4b08      	ldr	r3, [pc, #32]	; (800c1c8 <LL_ADC_SetOffset+0x44>)
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800c1ae:	683a      	ldr	r2, [r7, #0]
 800c1b0:	430a      	orrs	r2, r1
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800c1bc:	bf00      	nop
 800c1be:	371c      	adds	r7, #28
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr
 800c1c8:	03fff000 	.word	0x03fff000

0800c1cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b085      	sub	sp, #20
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	3360      	adds	r3, #96	; 0x60
 800c1da:	461a      	mov	r2, r3
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	4413      	add	r3, r2
 800c1e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3714      	adds	r7, #20
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b087      	sub	sp, #28
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	3360      	adds	r3, #96	; 0x60
 800c208:	461a      	mov	r2, r3
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	4413      	add	r3, r2
 800c210:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	431a      	orrs	r2, r3
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800c222:	bf00      	nop
 800c224:	371c      	adds	r7, #28
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr

0800c22e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800c22e:	b480      	push	{r7}
 800c230:	b083      	sub	sp, #12
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
 800c236:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	695b      	ldr	r3, [r3, #20]
 800c23c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	431a      	orrs	r2, r3
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	615a      	str	r2, [r3, #20]
}
 800c248:	bf00      	nop
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800c268:	2301      	movs	r3, #1
 800c26a:	e000      	b.n	800c26e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800c27a:	b480      	push	{r7}
 800c27c:	b087      	sub	sp, #28
 800c27e:	af00      	add	r7, sp, #0
 800c280:	60f8      	str	r0, [r7, #12]
 800c282:	60b9      	str	r1, [r7, #8]
 800c284:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	3330      	adds	r3, #48	; 0x30
 800c28a:	461a      	mov	r2, r3
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	0a1b      	lsrs	r3, r3, #8
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	f003 030c 	and.w	r3, r3, #12
 800c296:	4413      	add	r3, r2
 800c298:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	f003 031f 	and.w	r3, r3, #31
 800c2a4:	211f      	movs	r1, #31
 800c2a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c2aa:	43db      	mvns	r3, r3
 800c2ac:	401a      	ands	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	0e9b      	lsrs	r3, r3, #26
 800c2b2:	f003 011f 	and.w	r1, r3, #31
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	f003 031f 	and.w	r3, r3, #31
 800c2bc:	fa01 f303 	lsl.w	r3, r1, r3
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800c2c6:	bf00      	nop
 800c2c8:	371c      	adds	r7, #28
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800c2d2:	b480      	push	{r7}
 800c2d4:	b087      	sub	sp, #28
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	60f8      	str	r0, [r7, #12]
 800c2da:	60b9      	str	r1, [r7, #8]
 800c2dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	3314      	adds	r3, #20
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	0e5b      	lsrs	r3, r3, #25
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	f003 0304 	and.w	r3, r3, #4
 800c2ee:	4413      	add	r3, r2
 800c2f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	0d1b      	lsrs	r3, r3, #20
 800c2fa:	f003 031f 	and.w	r3, r3, #31
 800c2fe:	2107      	movs	r1, #7
 800c300:	fa01 f303 	lsl.w	r3, r1, r3
 800c304:	43db      	mvns	r3, r3
 800c306:	401a      	ands	r2, r3
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	0d1b      	lsrs	r3, r3, #20
 800c30c:	f003 031f 	and.w	r3, r3, #31
 800c310:	6879      	ldr	r1, [r7, #4]
 800c312:	fa01 f303 	lsl.w	r3, r1, r3
 800c316:	431a      	orrs	r2, r3
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800c31c:	bf00      	nop
 800c31e:	371c      	adds	r7, #28
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c340:	43db      	mvns	r3, r3
 800c342:	401a      	ands	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f003 0318 	and.w	r3, r3, #24
 800c34a:	4908      	ldr	r1, [pc, #32]	; (800c36c <LL_ADC_SetChannelSingleDiff+0x44>)
 800c34c:	40d9      	lsrs	r1, r3
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	400b      	ands	r3, r1
 800c352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c356:	431a      	orrs	r2, r3
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800c35e:	bf00      	nop
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	0007ffff 	.word	0x0007ffff

0800c370 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	f003 031f 	and.w	r3, r3, #31
}
 800c380:	4618      	mov	r0, r3
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800c3b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	6093      	str	r3, [r2, #8]
}
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3e0:	d101      	bne.n	800c3e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e000      	b.n	800c3e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800c404:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c408:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800c410:	bf00      	nop
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c42c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c430:	d101      	bne.n	800c436 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800c432:	2301      	movs	r3, #1
 800c434:	e000      	b.n	800c438 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800c436:	2300      	movs	r3, #0
}
 800c438:	4618      	mov	r0, r3
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c454:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c458:	f043 0201 	orr.w	r2, r3, #1
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800c460:	bf00      	nop
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	f003 0301 	and.w	r3, r3, #1
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d101      	bne.n	800c484 <LL_ADC_IsEnabled+0x18>
 800c480:	2301      	movs	r3, #1
 800c482:	e000      	b.n	800c486 <LL_ADC_IsEnabled+0x1a>
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	370c      	adds	r7, #12
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr

0800c492 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800c492:	b480      	push	{r7}
 800c494:	b083      	sub	sp, #12
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c4a6:	f043 0204 	orr.w	r2, r3, #4
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800c4ae:	bf00      	nop
 800c4b0:	370c      	adds	r7, #12
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr

0800c4ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800c4ba:	b480      	push	{r7}
 800c4bc:	b083      	sub	sp, #12
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	f003 0304 	and.w	r3, r3, #4
 800c4ca:	2b04      	cmp	r3, #4
 800c4cc:	d101      	bne.n	800c4d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e000      	b.n	800c4d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c4d2:	2300      	movs	r3, #0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	f003 0308 	and.w	r3, r3, #8
 800c4f0:	2b08      	cmp	r3, #8
 800c4f2:	d101      	bne.n	800c4f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	e000      	b.n	800c4fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	370c      	adds	r7, #12
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
	...

0800c508 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800c508:	b590      	push	{r4, r7, lr}
 800c50a:	b089      	sub	sp, #36	; 0x24
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c510:	2300      	movs	r3, #0
 800c512:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800c514:	2300      	movs	r3, #0
 800c516:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	e139      	b.n	800c796 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	691b      	ldr	r3, [r3, #16]
 800c526:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d109      	bne.n	800c544 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7f4 fd93 	bl	800105c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4618      	mov	r0, r3
 800c54a:	f7ff ff3f 	bl	800c3cc <LL_ADC_IsDeepPowerDownEnabled>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d004      	beq.n	800c55e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4618      	mov	r0, r3
 800c55a:	f7ff ff25 	bl	800c3a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff ff5a 	bl	800c41c <LL_ADC_IsInternalRegulatorEnabled>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d115      	bne.n	800c59a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4618      	mov	r0, r3
 800c574:	f7ff ff3e 	bl	800c3f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c578:	4b89      	ldr	r3, [pc, #548]	; (800c7a0 <HAL_ADC_Init+0x298>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	099b      	lsrs	r3, r3, #6
 800c57e:	4a89      	ldr	r2, [pc, #548]	; (800c7a4 <HAL_ADC_Init+0x29c>)
 800c580:	fba2 2303 	umull	r2, r3, r2, r3
 800c584:	099b      	lsrs	r3, r3, #6
 800c586:	3301      	adds	r3, #1
 800c588:	005b      	lsls	r3, r3, #1
 800c58a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800c58c:	e002      	b.n	800c594 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	3b01      	subs	r3, #1
 800c592:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1f9      	bne.n	800c58e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7ff ff3c 	bl	800c41c <LL_ADC_IsInternalRegulatorEnabled>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d10d      	bne.n	800c5c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5ae:	f043 0210 	orr.w	r2, r3, #16
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5ba:	f043 0201 	orr.w	r2, r3, #1
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7ff ff75 	bl	800c4ba <LL_ADC_REG_IsConversionOngoing>
 800c5d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5d6:	f003 0310 	and.w	r3, r3, #16
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f040 80d2 	bne.w	800c784 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f040 80ce 	bne.w	800c784 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800c5f0:	f043 0202 	orr.w	r2, r3, #2
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7ff ff35 	bl	800c46c <LL_ADC_IsEnabled>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d115      	bne.n	800c634 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c608:	4867      	ldr	r0, [pc, #412]	; (800c7a8 <HAL_ADC_Init+0x2a0>)
 800c60a:	f7ff ff2f 	bl	800c46c <LL_ADC_IsEnabled>
 800c60e:	4604      	mov	r4, r0
 800c610:	4866      	ldr	r0, [pc, #408]	; (800c7ac <HAL_ADC_Init+0x2a4>)
 800c612:	f7ff ff2b 	bl	800c46c <LL_ADC_IsEnabled>
 800c616:	4603      	mov	r3, r0
 800c618:	431c      	orrs	r4, r3
 800c61a:	4865      	ldr	r0, [pc, #404]	; (800c7b0 <HAL_ADC_Init+0x2a8>)
 800c61c:	f7ff ff26 	bl	800c46c <LL_ADC_IsEnabled>
 800c620:	4603      	mov	r3, r0
 800c622:	4323      	orrs	r3, r4
 800c624:	2b00      	cmp	r3, #0
 800c626:	d105      	bne.n	800c634 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	4619      	mov	r1, r3
 800c62e:	4861      	ldr	r0, [pc, #388]	; (800c7b4 <HAL_ADC_Init+0x2ac>)
 800c630:	f7ff fd74 	bl	800c11c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	7e5b      	ldrb	r3, [r3, #25]
 800c638:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c63e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800c644:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800c64a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c652:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c654:	4313      	orrs	r3, r2
 800c656:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d106      	bne.n	800c670 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c666:	3b01      	subs	r3, #1
 800c668:	045b      	lsls	r3, r3, #17
 800c66a:	69ba      	ldr	r2, [r7, #24]
 800c66c:	4313      	orrs	r3, r2
 800c66e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c674:	2b00      	cmp	r3, #0
 800c676:	d009      	beq.n	800c68c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c67c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c684:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800c686:	69ba      	ldr	r2, [r7, #24]
 800c688:	4313      	orrs	r3, r2
 800c68a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	68da      	ldr	r2, [r3, #12]
 800c692:	4b49      	ldr	r3, [pc, #292]	; (800c7b8 <HAL_ADC_Init+0x2b0>)
 800c694:	4013      	ands	r3, r2
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	6812      	ldr	r2, [r2, #0]
 800c69a:	69b9      	ldr	r1, [r7, #24]
 800c69c:	430b      	orrs	r3, r1
 800c69e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7ff ff08 	bl	800c4ba <LL_ADC_REG_IsConversionOngoing>
 800c6aa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7ff ff15 	bl	800c4e0 <LL_ADC_INJ_IsConversionOngoing>
 800c6b6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d140      	bne.n	800c740 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d13d      	bne.n	800c740 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	7e1b      	ldrb	r3, [r3, #24]
 800c6cc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800c6ce:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6d6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c6e6:	f023 0306 	bic.w	r3, r3, #6
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	6812      	ldr	r2, [r2, #0]
 800c6ee:	69b9      	ldr	r1, [r7, #24]
 800c6f0:	430b      	orrs	r3, r1
 800c6f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d118      	bne.n	800c730 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	691b      	ldr	r3, [r3, #16]
 800c704:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c708:	f023 0304 	bic.w	r3, r3, #4
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c714:	4311      	orrs	r1, r2
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c71a:	4311      	orrs	r1, r2
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c720:	430a      	orrs	r2, r1
 800c722:	431a      	orrs	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f042 0201 	orr.w	r2, r2, #1
 800c72c:	611a      	str	r2, [r3, #16]
 800c72e:	e007      	b.n	800c740 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	691a      	ldr	r2, [r3, #16]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f022 0201 	bic.w	r2, r2, #1
 800c73e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	691b      	ldr	r3, [r3, #16]
 800c744:	2b01      	cmp	r3, #1
 800c746:	d10c      	bne.n	800c762 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c74e:	f023 010f 	bic.w	r1, r3, #15
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	69db      	ldr	r3, [r3, #28]
 800c756:	1e5a      	subs	r2, r3, #1
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	430a      	orrs	r2, r1
 800c75e:	631a      	str	r2, [r3, #48]	; 0x30
 800c760:	e007      	b.n	800c772 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f022 020f 	bic.w	r2, r2, #15
 800c770:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c776:	f023 0303 	bic.w	r3, r3, #3
 800c77a:	f043 0201 	orr.w	r2, r3, #1
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	659a      	str	r2, [r3, #88]	; 0x58
 800c782:	e007      	b.n	800c794 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c788:	f043 0210 	orr.w	r2, r3, #16
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800c790:	2301      	movs	r3, #1
 800c792:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800c794:	7ffb      	ldrb	r3, [r7, #31]
}
 800c796:	4618      	mov	r0, r3
 800c798:	3724      	adds	r7, #36	; 0x24
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd90      	pop	{r4, r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	200001a0 	.word	0x200001a0
 800c7a4:	053e2d63 	.word	0x053e2d63
 800c7a8:	50040000 	.word	0x50040000
 800c7ac:	50040100 	.word	0x50040100
 800c7b0:	50040200 	.word	0x50040200
 800c7b4:	50040300 	.word	0x50040300
 800c7b8:	fff0c007 	.word	0xfff0c007

0800c7bc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b086      	sub	sp, #24
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c7c4:	4857      	ldr	r0, [pc, #348]	; (800c924 <HAL_ADC_Start+0x168>)
 800c7c6:	f7ff fdd3 	bl	800c370 <LL_ADC_GetMultimode>
 800c7ca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7ff fe72 	bl	800c4ba <LL_ADC_REG_IsConversionOngoing>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f040 809c 	bne.w	800c916 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d101      	bne.n	800c7ec <HAL_ADC_Start+0x30>
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	e097      	b.n	800c91c <HAL_ADC_Start+0x160>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 fd8d 	bl	800d314 <ADC_Enable>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800c7fe:	7dfb      	ldrb	r3, [r7, #23]
 800c800:	2b00      	cmp	r3, #0
 800c802:	f040 8083 	bne.w	800c90c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c80a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c80e:	f023 0301 	bic.w	r3, r3, #1
 800c812:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a42      	ldr	r2, [pc, #264]	; (800c928 <HAL_ADC_Start+0x16c>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d002      	beq.n	800c82a <HAL_ADC_Start+0x6e>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	e000      	b.n	800c82c <HAL_ADC_Start+0x70>
 800c82a:	4b40      	ldr	r3, [pc, #256]	; (800c92c <HAL_ADC_Start+0x170>)
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	6812      	ldr	r2, [r2, #0]
 800c830:	4293      	cmp	r3, r2
 800c832:	d002      	beq.n	800c83a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d105      	bne.n	800c846 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c83e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c84a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c84e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c852:	d106      	bne.n	800c862 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c858:	f023 0206 	bic.w	r2, r3, #6
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	65da      	str	r2, [r3, #92]	; 0x5c
 800c860:	e002      	b.n	800c868 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	221c      	movs	r2, #28
 800c86e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a2a      	ldr	r2, [pc, #168]	; (800c928 <HAL_ADC_Start+0x16c>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d002      	beq.n	800c888 <HAL_ADC_Start+0xcc>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	e000      	b.n	800c88a <HAL_ADC_Start+0xce>
 800c888:	4b28      	ldr	r3, [pc, #160]	; (800c92c <HAL_ADC_Start+0x170>)
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	6812      	ldr	r2, [r2, #0]
 800c88e:	4293      	cmp	r3, r2
 800c890:	d008      	beq.n	800c8a4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d005      	beq.n	800c8a4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	2b05      	cmp	r3, #5
 800c89c:	d002      	beq.n	800c8a4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	2b09      	cmp	r3, #9
 800c8a2:	d114      	bne.n	800c8ce <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d007      	beq.n	800c8c2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c8ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7ff fde3 	bl	800c492 <LL_ADC_REG_StartConversion>
 800c8cc:	e025      	b.n	800c91a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a12      	ldr	r2, [pc, #72]	; (800c928 <HAL_ADC_Start+0x16c>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d002      	beq.n	800c8ea <HAL_ADC_Start+0x12e>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	e000      	b.n	800c8ec <HAL_ADC_Start+0x130>
 800c8ea:	4b10      	ldr	r3, [pc, #64]	; (800c92c <HAL_ADC_Start+0x170>)
 800c8ec:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00f      	beq.n	800c91a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c902:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	659a      	str	r2, [r3, #88]	; 0x58
 800c90a:	e006      	b.n	800c91a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800c914:	e001      	b.n	800c91a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800c916:	2302      	movs	r3, #2
 800c918:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3718      	adds	r7, #24
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	50040300 	.word	0x50040300
 800c928:	50040100 	.word	0x50040100
 800c92c:	50040000 	.word	0x50040000

0800c930 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b088      	sub	sp, #32
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c93a:	4866      	ldr	r0, [pc, #408]	; (800cad4 <HAL_ADC_PollForConversion+0x1a4>)
 800c93c:	f7ff fd18 	bl	800c370 <LL_ADC_GetMultimode>
 800c940:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	695b      	ldr	r3, [r3, #20]
 800c946:	2b08      	cmp	r3, #8
 800c948:	d102      	bne.n	800c950 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800c94a:	2308      	movs	r3, #8
 800c94c:	61fb      	str	r3, [r7, #28]
 800c94e:	e02a      	b.n	800c9a6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d005      	beq.n	800c962 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	2b05      	cmp	r3, #5
 800c95a:	d002      	beq.n	800c962 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	2b09      	cmp	r3, #9
 800c960:	d111      	bne.n	800c986 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	f003 0301 	and.w	r3, r3, #1
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d007      	beq.n	800c980 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c974:	f043 0220 	orr.w	r2, r3, #32
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800c97c:	2301      	movs	r3, #1
 800c97e:	e0a4      	b.n	800caca <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800c980:	2304      	movs	r3, #4
 800c982:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800c984:	e00f      	b.n	800c9a6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800c986:	4853      	ldr	r0, [pc, #332]	; (800cad4 <HAL_ADC_PollForConversion+0x1a4>)
 800c988:	f7ff fd00 	bl	800c38c <LL_ADC_GetMultiDMATransfer>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d007      	beq.n	800c9a2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c996:	f043 0220 	orr.w	r2, r3, #32
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e093      	b.n	800caca <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800c9a2:	2304      	movs	r3, #4
 800c9a4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800c9a6:	f7ff fb69 	bl	800c07c <HAL_GetTick>
 800c9aa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800c9ac:	e021      	b.n	800c9f2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9b4:	d01d      	beq.n	800c9f2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800c9b6:	f7ff fb61 	bl	800c07c <HAL_GetTick>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	683a      	ldr	r2, [r7, #0]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d302      	bcc.n	800c9cc <HAL_ADC_PollForConversion+0x9c>
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d112      	bne.n	800c9f2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	4013      	ands	r3, r2
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d10b      	bne.n	800c9f2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9de:	f043 0204 	orr.w	r2, r3, #4
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	e06b      	b.n	800caca <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	4013      	ands	r3, r2
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d0d6      	beq.n	800c9ae <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7ff fc1f 	bl	800c254 <LL_ADC_REG_IsTriggerSourceSWStart>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d01c      	beq.n	800ca56 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	7e5b      	ldrb	r3, [r3, #25]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d118      	bne.n	800ca56 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f003 0308 	and.w	r3, r3, #8
 800ca2e:	2b08      	cmp	r3, #8
 800ca30:	d111      	bne.n	800ca56 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d105      	bne.n	800ca56 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca4e:	f043 0201 	orr.w	r2, r3, #1
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a1f      	ldr	r2, [pc, #124]	; (800cad8 <HAL_ADC_PollForConversion+0x1a8>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d002      	beq.n	800ca66 <HAL_ADC_PollForConversion+0x136>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	e000      	b.n	800ca68 <HAL_ADC_PollForConversion+0x138>
 800ca66:	4b1d      	ldr	r3, [pc, #116]	; (800cadc <HAL_ADC_PollForConversion+0x1ac>)
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	6812      	ldr	r2, [r2, #0]
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d008      	beq.n	800ca82 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d005      	beq.n	800ca82 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	2b05      	cmp	r3, #5
 800ca7a:	d002      	beq.n	800ca82 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	2b09      	cmp	r3, #9
 800ca80:	d104      	bne.n	800ca8c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	61bb      	str	r3, [r7, #24]
 800ca8a:	e00c      	b.n	800caa6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a11      	ldr	r2, [pc, #68]	; (800cad8 <HAL_ADC_PollForConversion+0x1a8>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d002      	beq.n	800ca9c <HAL_ADC_PollForConversion+0x16c>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	e000      	b.n	800ca9e <HAL_ADC_PollForConversion+0x16e>
 800ca9c:	4b0f      	ldr	r3, [pc, #60]	; (800cadc <HAL_ADC_PollForConversion+0x1ac>)
 800ca9e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	2b08      	cmp	r3, #8
 800caaa:	d104      	bne.n	800cab6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2208      	movs	r2, #8
 800cab2:	601a      	str	r2, [r3, #0]
 800cab4:	e008      	b.n	800cac8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d103      	bne.n	800cac8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	220c      	movs	r2, #12
 800cac6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3720      	adds	r7, #32
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	50040300 	.word	0x50040300
 800cad8:	50040100 	.word	0x50040100
 800cadc:	50040000 	.word	0x50040000

0800cae0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800caee:	4618      	mov	r0, r3
 800caf0:	370c      	adds	r7, #12
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr
	...

0800cafc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b0b6      	sub	sp, #216	; 0xd8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cb06:	2300      	movs	r3, #0
 800cb08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d101      	bne.n	800cb1e <HAL_ADC_ConfigChannel+0x22>
 800cb1a:	2302      	movs	r3, #2
 800cb1c:	e3e3      	b.n	800d2e6 <HAL_ADC_ConfigChannel+0x7ea>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2201      	movs	r2, #1
 800cb22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7ff fcc5 	bl	800c4ba <LL_ADC_REG_IsConversionOngoing>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	f040 83c4 	bne.w	800d2c0 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	2b05      	cmp	r3, #5
 800cb3e:	d824      	bhi.n	800cb8a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	3b02      	subs	r3, #2
 800cb46:	2b03      	cmp	r3, #3
 800cb48:	d81b      	bhi.n	800cb82 <HAL_ADC_ConfigChannel+0x86>
 800cb4a:	a201      	add	r2, pc, #4	; (adr r2, 800cb50 <HAL_ADC_ConfigChannel+0x54>)
 800cb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb50:	0800cb61 	.word	0x0800cb61
 800cb54:	0800cb69 	.word	0x0800cb69
 800cb58:	0800cb71 	.word	0x0800cb71
 800cb5c:	0800cb79 	.word	0x0800cb79
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	220c      	movs	r2, #12
 800cb64:	605a      	str	r2, [r3, #4]
          break;
 800cb66:	e011      	b.n	800cb8c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	2212      	movs	r2, #18
 800cb6c:	605a      	str	r2, [r3, #4]
          break;
 800cb6e:	e00d      	b.n	800cb8c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	2218      	movs	r2, #24
 800cb74:	605a      	str	r2, [r3, #4]
          break;
 800cb76:	e009      	b.n	800cb8c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb7e:	605a      	str	r2, [r3, #4]
          break;
 800cb80:	e004      	b.n	800cb8c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	2206      	movs	r2, #6
 800cb86:	605a      	str	r2, [r3, #4]
          break;
 800cb88:	e000      	b.n	800cb8c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800cb8a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6818      	ldr	r0, [r3, #0]
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	6859      	ldr	r1, [r3, #4]
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	461a      	mov	r2, r3
 800cb9a:	f7ff fb6e 	bl	800c27a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7ff fc89 	bl	800c4ba <LL_ADC_REG_IsConversionOngoing>
 800cba8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7ff fc95 	bl	800c4e0 <LL_ADC_INJ_IsConversionOngoing>
 800cbb6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800cbba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f040 81c1 	bne.w	800cf46 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800cbc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	f040 81bc 	bne.w	800cf46 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbd6:	d10f      	bne.n	800cbf8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6818      	ldr	r0, [r3, #0]
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	f7ff fb75 	bl	800c2d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7ff fb1c 	bl	800c22e <LL_ADC_SetSamplingTimeCommonConfig>
 800cbf6:	e00e      	b.n	800cc16 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6818      	ldr	r0, [r3, #0]
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	6819      	ldr	r1, [r3, #0]
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	461a      	mov	r2, r3
 800cc06:	f7ff fb64 	bl	800c2d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2100      	movs	r1, #0
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7ff fb0c 	bl	800c22e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	695a      	ldr	r2, [r3, #20]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	08db      	lsrs	r3, r3, #3
 800cc22:	f003 0303 	and.w	r3, r3, #3
 800cc26:	005b      	lsls	r3, r3, #1
 800cc28:	fa02 f303 	lsl.w	r3, r2, r3
 800cc2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	691b      	ldr	r3, [r3, #16]
 800cc34:	2b04      	cmp	r3, #4
 800cc36:	d00a      	beq.n	800cc4e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6818      	ldr	r0, [r3, #0]
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	6919      	ldr	r1, [r3, #16]
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cc48:	f7ff fa9c 	bl	800c184 <LL_ADC_SetOffset>
 800cc4c:	e17b      	b.n	800cf46 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2100      	movs	r1, #0
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7ff fab9 	bl	800c1cc <LL_ADC_GetOffsetChannel>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10a      	bne.n	800cc7a <HAL_ADC_ConfigChannel+0x17e>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2100      	movs	r1, #0
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7ff faae 	bl	800c1cc <LL_ADC_GetOffsetChannel>
 800cc70:	4603      	mov	r3, r0
 800cc72:	0e9b      	lsrs	r3, r3, #26
 800cc74:	f003 021f 	and.w	r2, r3, #31
 800cc78:	e01e      	b.n	800ccb8 <HAL_ADC_ConfigChannel+0x1bc>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2100      	movs	r1, #0
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7ff faa3 	bl	800c1cc <LL_ADC_GetOffsetChannel>
 800cc86:	4603      	mov	r3, r0
 800cc88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cc90:	fa93 f3a3 	rbit	r3, r3
 800cc94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800cc98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cc9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800cca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d101      	bne.n	800ccac <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800cca8:	2320      	movs	r3, #32
 800ccaa:	e004      	b.n	800ccb6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800ccac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ccb0:	fab3 f383 	clz	r3, r3
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d105      	bne.n	800ccd0 <HAL_ADC_ConfigChannel+0x1d4>
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	0e9b      	lsrs	r3, r3, #26
 800ccca:	f003 031f 	and.w	r3, r3, #31
 800ccce:	e018      	b.n	800cd02 <HAL_ADC_ConfigChannel+0x206>
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ccd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ccdc:	fa93 f3a3 	rbit	r3, r3
 800cce0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800cce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800ccec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d101      	bne.n	800ccf8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800ccf4:	2320      	movs	r3, #32
 800ccf6:	e004      	b.n	800cd02 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800ccf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ccfc:	fab3 f383 	clz	r3, r3
 800cd00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d106      	bne.n	800cd14 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	2100      	movs	r1, #0
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7ff fa72 	bl	800c1f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2101      	movs	r1, #1
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7ff fa56 	bl	800c1cc <LL_ADC_GetOffsetChannel>
 800cd20:	4603      	mov	r3, r0
 800cd22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d10a      	bne.n	800cd40 <HAL_ADC_ConfigChannel+0x244>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2101      	movs	r1, #1
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7ff fa4b 	bl	800c1cc <LL_ADC_GetOffsetChannel>
 800cd36:	4603      	mov	r3, r0
 800cd38:	0e9b      	lsrs	r3, r3, #26
 800cd3a:	f003 021f 	and.w	r2, r3, #31
 800cd3e:	e01e      	b.n	800cd7e <HAL_ADC_ConfigChannel+0x282>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	2101      	movs	r1, #1
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7ff fa40 	bl	800c1cc <LL_ADC_GetOffsetChannel>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cd56:	fa93 f3a3 	rbit	r3, r3
 800cd5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800cd5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cd62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800cd66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d101      	bne.n	800cd72 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800cd6e:	2320      	movs	r3, #32
 800cd70:	e004      	b.n	800cd7c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800cd72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cd76:	fab3 f383 	clz	r3, r3
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d105      	bne.n	800cd96 <HAL_ADC_ConfigChannel+0x29a>
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	0e9b      	lsrs	r3, r3, #26
 800cd90:	f003 031f 	and.w	r3, r3, #31
 800cd94:	e018      	b.n	800cdc8 <HAL_ADC_ConfigChannel+0x2cc>
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cda2:	fa93 f3a3 	rbit	r3, r3
 800cda6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800cdaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cdae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800cdb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d101      	bne.n	800cdbe <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800cdba:	2320      	movs	r3, #32
 800cdbc:	e004      	b.n	800cdc8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800cdbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cdc2:	fab3 f383 	clz	r3, r3
 800cdc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d106      	bne.n	800cdda <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	2101      	movs	r1, #1
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7ff fa0f 	bl	800c1f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2102      	movs	r1, #2
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7ff f9f3 	bl	800c1cc <LL_ADC_GetOffsetChannel>
 800cde6:	4603      	mov	r3, r0
 800cde8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d10a      	bne.n	800ce06 <HAL_ADC_ConfigChannel+0x30a>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2102      	movs	r1, #2
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7ff f9e8 	bl	800c1cc <LL_ADC_GetOffsetChannel>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	0e9b      	lsrs	r3, r3, #26
 800ce00:	f003 021f 	and.w	r2, r3, #31
 800ce04:	e01e      	b.n	800ce44 <HAL_ADC_ConfigChannel+0x348>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2102      	movs	r1, #2
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7ff f9dd 	bl	800c1cc <LL_ADC_GetOffsetChannel>
 800ce12:	4603      	mov	r3, r0
 800ce14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce1c:	fa93 f3a3 	rbit	r3, r3
 800ce20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800ce24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800ce2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d101      	bne.n	800ce38 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800ce34:	2320      	movs	r3, #32
 800ce36:	e004      	b.n	800ce42 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800ce38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce3c:	fab3 f383 	clz	r3, r3
 800ce40:	b2db      	uxtb	r3, r3
 800ce42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d105      	bne.n	800ce5c <HAL_ADC_ConfigChannel+0x360>
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	0e9b      	lsrs	r3, r3, #26
 800ce56:	f003 031f 	and.w	r3, r3, #31
 800ce5a:	e016      	b.n	800ce8a <HAL_ADC_ConfigChannel+0x38e>
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ce68:	fa93 f3a3 	rbit	r3, r3
 800ce6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800ce6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800ce74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d101      	bne.n	800ce80 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800ce7c:	2320      	movs	r3, #32
 800ce7e:	e004      	b.n	800ce8a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800ce80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ce84:	fab3 f383 	clz	r3, r3
 800ce88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d106      	bne.n	800ce9c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2200      	movs	r2, #0
 800ce94:	2102      	movs	r1, #2
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff f9ae 	bl	800c1f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2103      	movs	r1, #3
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7ff f992 	bl	800c1cc <LL_ADC_GetOffsetChannel>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d10a      	bne.n	800cec8 <HAL_ADC_ConfigChannel+0x3cc>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2103      	movs	r1, #3
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7ff f987 	bl	800c1cc <LL_ADC_GetOffsetChannel>
 800cebe:	4603      	mov	r3, r0
 800cec0:	0e9b      	lsrs	r3, r3, #26
 800cec2:	f003 021f 	and.w	r2, r3, #31
 800cec6:	e017      	b.n	800cef8 <HAL_ADC_ConfigChannel+0x3fc>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2103      	movs	r1, #3
 800cece:	4618      	mov	r0, r3
 800ced0:	f7ff f97c 	bl	800c1cc <LL_ADC_GetOffsetChannel>
 800ced4:	4603      	mov	r3, r0
 800ced6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ced8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ceda:	fa93 f3a3 	rbit	r3, r3
 800cede:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800cee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cee2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800cee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d101      	bne.n	800ceee <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800ceea:	2320      	movs	r3, #32
 800ceec:	e003      	b.n	800cef6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800ceee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cef0:	fab3 f383 	clz	r3, r3
 800cef4:	b2db      	uxtb	r3, r3
 800cef6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d105      	bne.n	800cf10 <HAL_ADC_ConfigChannel+0x414>
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	0e9b      	lsrs	r3, r3, #26
 800cf0a:	f003 031f 	and.w	r3, r3, #31
 800cf0e:	e011      	b.n	800cf34 <HAL_ADC_ConfigChannel+0x438>
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf18:	fa93 f3a3 	rbit	r3, r3
 800cf1c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800cf1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800cf22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d101      	bne.n	800cf2c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800cf28:	2320      	movs	r3, #32
 800cf2a:	e003      	b.n	800cf34 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800cf2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf2e:	fab3 f383 	clz	r3, r3
 800cf32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d106      	bne.n	800cf46 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	2103      	movs	r1, #3
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7ff f959 	bl	800c1f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7ff fa8e 	bl	800c46c <LL_ADC_IsEnabled>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f040 8140 	bne.w	800d1d8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6818      	ldr	r0, [r3, #0]
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	6819      	ldr	r1, [r3, #0]
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	461a      	mov	r2, r3
 800cf66:	f7ff f9df 	bl	800c328 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	4a8f      	ldr	r2, [pc, #572]	; (800d1ac <HAL_ADC_ConfigChannel+0x6b0>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	f040 8131 	bne.w	800d1d8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d10b      	bne.n	800cf9e <HAL_ADC_ConfigChannel+0x4a2>
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	0e9b      	lsrs	r3, r3, #26
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	f003 031f 	and.w	r3, r3, #31
 800cf92:	2b09      	cmp	r3, #9
 800cf94:	bf94      	ite	ls
 800cf96:	2301      	movls	r3, #1
 800cf98:	2300      	movhi	r3, #0
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	e019      	b.n	800cfd2 <HAL_ADC_ConfigChannel+0x4d6>
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cfa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfa6:	fa93 f3a3 	rbit	r3, r3
 800cfaa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800cfac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfae:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800cfb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d101      	bne.n	800cfba <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800cfb6:	2320      	movs	r3, #32
 800cfb8:	e003      	b.n	800cfc2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800cfba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfbc:	fab3 f383 	clz	r3, r3
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	f003 031f 	and.w	r3, r3, #31
 800cfc8:	2b09      	cmp	r3, #9
 800cfca:	bf94      	ite	ls
 800cfcc:	2301      	movls	r3, #1
 800cfce:	2300      	movhi	r3, #0
 800cfd0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d079      	beq.n	800d0ca <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d107      	bne.n	800cff2 <HAL_ADC_ConfigChannel+0x4f6>
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	0e9b      	lsrs	r3, r3, #26
 800cfe8:	3301      	adds	r3, #1
 800cfea:	069b      	lsls	r3, r3, #26
 800cfec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800cff0:	e015      	b.n	800d01e <HAL_ADC_ConfigChannel+0x522>
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cffa:	fa93 f3a3 	rbit	r3, r3
 800cffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800d000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d002:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800d004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d006:	2b00      	cmp	r3, #0
 800d008:	d101      	bne.n	800d00e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800d00a:	2320      	movs	r3, #32
 800d00c:	e003      	b.n	800d016 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800d00e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d010:	fab3 f383 	clz	r3, r3
 800d014:	b2db      	uxtb	r3, r3
 800d016:	3301      	adds	r3, #1
 800d018:	069b      	lsls	r3, r3, #26
 800d01a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d026:	2b00      	cmp	r3, #0
 800d028:	d109      	bne.n	800d03e <HAL_ADC_ConfigChannel+0x542>
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	0e9b      	lsrs	r3, r3, #26
 800d030:	3301      	adds	r3, #1
 800d032:	f003 031f 	and.w	r3, r3, #31
 800d036:	2101      	movs	r1, #1
 800d038:	fa01 f303 	lsl.w	r3, r1, r3
 800d03c:	e017      	b.n	800d06e <HAL_ADC_ConfigChannel+0x572>
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d046:	fa93 f3a3 	rbit	r3, r3
 800d04a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800d04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d04e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800d050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d052:	2b00      	cmp	r3, #0
 800d054:	d101      	bne.n	800d05a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800d056:	2320      	movs	r3, #32
 800d058:	e003      	b.n	800d062 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800d05a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d05c:	fab3 f383 	clz	r3, r3
 800d060:	b2db      	uxtb	r3, r3
 800d062:	3301      	adds	r3, #1
 800d064:	f003 031f 	and.w	r3, r3, #31
 800d068:	2101      	movs	r1, #1
 800d06a:	fa01 f303 	lsl.w	r3, r1, r3
 800d06e:	ea42 0103 	orr.w	r1, r2, r3
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d10a      	bne.n	800d094 <HAL_ADC_ConfigChannel+0x598>
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	0e9b      	lsrs	r3, r3, #26
 800d084:	3301      	adds	r3, #1
 800d086:	f003 021f 	and.w	r2, r3, #31
 800d08a:	4613      	mov	r3, r2
 800d08c:	005b      	lsls	r3, r3, #1
 800d08e:	4413      	add	r3, r2
 800d090:	051b      	lsls	r3, r3, #20
 800d092:	e018      	b.n	800d0c6 <HAL_ADC_ConfigChannel+0x5ca>
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09c:	fa93 f3a3 	rbit	r3, r3
 800d0a0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800d0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800d0a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d101      	bne.n	800d0b0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800d0ac:	2320      	movs	r3, #32
 800d0ae:	e003      	b.n	800d0b8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800d0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0b2:	fab3 f383 	clz	r3, r3
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	f003 021f 	and.w	r2, r3, #31
 800d0be:	4613      	mov	r3, r2
 800d0c0:	005b      	lsls	r3, r3, #1
 800d0c2:	4413      	add	r3, r2
 800d0c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800d0c6:	430b      	orrs	r3, r1
 800d0c8:	e081      	b.n	800d1ce <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d107      	bne.n	800d0e6 <HAL_ADC_ConfigChannel+0x5ea>
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	0e9b      	lsrs	r3, r3, #26
 800d0dc:	3301      	adds	r3, #1
 800d0de:	069b      	lsls	r3, r3, #26
 800d0e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800d0e4:	e015      	b.n	800d112 <HAL_ADC_ConfigChannel+0x616>
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ee:	fa93 f3a3 	rbit	r3, r3
 800d0f2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800d0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800d0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d101      	bne.n	800d102 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800d0fe:	2320      	movs	r3, #32
 800d100:	e003      	b.n	800d10a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800d102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d104:	fab3 f383 	clz	r3, r3
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	3301      	adds	r3, #1
 800d10c:	069b      	lsls	r3, r3, #26
 800d10e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d109      	bne.n	800d132 <HAL_ADC_ConfigChannel+0x636>
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	0e9b      	lsrs	r3, r3, #26
 800d124:	3301      	adds	r3, #1
 800d126:	f003 031f 	and.w	r3, r3, #31
 800d12a:	2101      	movs	r1, #1
 800d12c:	fa01 f303 	lsl.w	r3, r1, r3
 800d130:	e017      	b.n	800d162 <HAL_ADC_ConfigChannel+0x666>
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d138:	6a3b      	ldr	r3, [r7, #32]
 800d13a:	fa93 f3a3 	rbit	r3, r3
 800d13e:	61fb      	str	r3, [r7, #28]
  return result;
 800d140:	69fb      	ldr	r3, [r7, #28]
 800d142:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d146:	2b00      	cmp	r3, #0
 800d148:	d101      	bne.n	800d14e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800d14a:	2320      	movs	r3, #32
 800d14c:	e003      	b.n	800d156 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800d14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d150:	fab3 f383 	clz	r3, r3
 800d154:	b2db      	uxtb	r3, r3
 800d156:	3301      	adds	r3, #1
 800d158:	f003 031f 	and.w	r3, r3, #31
 800d15c:	2101      	movs	r1, #1
 800d15e:	fa01 f303 	lsl.w	r3, r1, r3
 800d162:	ea42 0103 	orr.w	r1, r2, r3
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d10d      	bne.n	800d18e <HAL_ADC_ConfigChannel+0x692>
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	0e9b      	lsrs	r3, r3, #26
 800d178:	3301      	adds	r3, #1
 800d17a:	f003 021f 	and.w	r2, r3, #31
 800d17e:	4613      	mov	r3, r2
 800d180:	005b      	lsls	r3, r3, #1
 800d182:	4413      	add	r3, r2
 800d184:	3b1e      	subs	r3, #30
 800d186:	051b      	lsls	r3, r3, #20
 800d188:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d18c:	e01e      	b.n	800d1cc <HAL_ADC_ConfigChannel+0x6d0>
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	fa93 f3a3 	rbit	r3, r3
 800d19a:	613b      	str	r3, [r7, #16]
  return result;
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d104      	bne.n	800d1b0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800d1a6:	2320      	movs	r3, #32
 800d1a8:	e006      	b.n	800d1b8 <HAL_ADC_ConfigChannel+0x6bc>
 800d1aa:	bf00      	nop
 800d1ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	fab3 f383 	clz	r3, r3
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	f003 021f 	and.w	r2, r3, #31
 800d1be:	4613      	mov	r3, r2
 800d1c0:	005b      	lsls	r3, r3, #1
 800d1c2:	4413      	add	r3, r2
 800d1c4:	3b1e      	subs	r3, #30
 800d1c6:	051b      	lsls	r3, r3, #20
 800d1c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800d1cc:	430b      	orrs	r3, r1
 800d1ce:	683a      	ldr	r2, [r7, #0]
 800d1d0:	6892      	ldr	r2, [r2, #8]
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	f7ff f87d 	bl	800c2d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	4b44      	ldr	r3, [pc, #272]	; (800d2f0 <HAL_ADC_ConfigChannel+0x7f4>)
 800d1de:	4013      	ands	r3, r2
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d07a      	beq.n	800d2da <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d1e4:	4843      	ldr	r0, [pc, #268]	; (800d2f4 <HAL_ADC_ConfigChannel+0x7f8>)
 800d1e6:	f7fe ffbf 	bl	800c168 <LL_ADC_GetCommonPathInternalCh>
 800d1ea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4a41      	ldr	r2, [pc, #260]	; (800d2f8 <HAL_ADC_ConfigChannel+0x7fc>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d12c      	bne.n	800d252 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800d1f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d1fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d200:	2b00      	cmp	r3, #0
 800d202:	d126      	bne.n	800d252 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a3c      	ldr	r2, [pc, #240]	; (800d2fc <HAL_ADC_ConfigChannel+0x800>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d004      	beq.n	800d218 <HAL_ADC_ConfigChannel+0x71c>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4a3b      	ldr	r2, [pc, #236]	; (800d300 <HAL_ADC_ConfigChannel+0x804>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d15d      	bne.n	800d2d4 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d21c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d220:	4619      	mov	r1, r3
 800d222:	4834      	ldr	r0, [pc, #208]	; (800d2f4 <HAL_ADC_ConfigChannel+0x7f8>)
 800d224:	f7fe ff8d 	bl	800c142 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d228:	4b36      	ldr	r3, [pc, #216]	; (800d304 <HAL_ADC_ConfigChannel+0x808>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	099b      	lsrs	r3, r3, #6
 800d22e:	4a36      	ldr	r2, [pc, #216]	; (800d308 <HAL_ADC_ConfigChannel+0x80c>)
 800d230:	fba2 2303 	umull	r2, r3, r2, r3
 800d234:	099b      	lsrs	r3, r3, #6
 800d236:	1c5a      	adds	r2, r3, #1
 800d238:	4613      	mov	r3, r2
 800d23a:	005b      	lsls	r3, r3, #1
 800d23c:	4413      	add	r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800d242:	e002      	b.n	800d24a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	3b01      	subs	r3, #1
 800d248:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d1f9      	bne.n	800d244 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800d250:	e040      	b.n	800d2d4 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a2d      	ldr	r2, [pc, #180]	; (800d30c <HAL_ADC_ConfigChannel+0x810>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d118      	bne.n	800d28e <HAL_ADC_ConfigChannel+0x792>
 800d25c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d264:	2b00      	cmp	r3, #0
 800d266:	d112      	bne.n	800d28e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a23      	ldr	r2, [pc, #140]	; (800d2fc <HAL_ADC_ConfigChannel+0x800>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d004      	beq.n	800d27c <HAL_ADC_ConfigChannel+0x780>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a22      	ldr	r2, [pc, #136]	; (800d300 <HAL_ADC_ConfigChannel+0x804>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d12d      	bne.n	800d2d8 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d27c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d280:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d284:	4619      	mov	r1, r3
 800d286:	481b      	ldr	r0, [pc, #108]	; (800d2f4 <HAL_ADC_ConfigChannel+0x7f8>)
 800d288:	f7fe ff5b 	bl	800c142 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800d28c:	e024      	b.n	800d2d8 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a1f      	ldr	r2, [pc, #124]	; (800d310 <HAL_ADC_ConfigChannel+0x814>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d120      	bne.n	800d2da <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800d298:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d29c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d11a      	bne.n	800d2da <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a14      	ldr	r2, [pc, #80]	; (800d2fc <HAL_ADC_ConfigChannel+0x800>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d115      	bne.n	800d2da <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d2ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d2b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	480e      	ldr	r0, [pc, #56]	; (800d2f4 <HAL_ADC_ConfigChannel+0x7f8>)
 800d2ba:	f7fe ff42 	bl	800c142 <LL_ADC_SetCommonPathInternalCh>
 800d2be:	e00c      	b.n	800d2da <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2c4:	f043 0220 	orr.w	r2, r3, #32
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800d2d2:	e002      	b.n	800d2da <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800d2d4:	bf00      	nop
 800d2d6:	e000      	b.n	800d2da <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800d2d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800d2e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	37d8      	adds	r7, #216	; 0xd8
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	80080000 	.word	0x80080000
 800d2f4:	50040300 	.word	0x50040300
 800d2f8:	c7520000 	.word	0xc7520000
 800d2fc:	50040000 	.word	0x50040000
 800d300:	50040200 	.word	0x50040200
 800d304:	200001a0 	.word	0x200001a0
 800d308:	053e2d63 	.word	0x053e2d63
 800d30c:	cb840000 	.word	0xcb840000
 800d310:	80000001 	.word	0x80000001

0800d314 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800d31c:	2300      	movs	r3, #0
 800d31e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4618      	mov	r0, r3
 800d326:	f7ff f8a1 	bl	800c46c <LL_ADC_IsEnabled>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d169      	bne.n	800d404 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	689a      	ldr	r2, [r3, #8]
 800d336:	4b36      	ldr	r3, [pc, #216]	; (800d410 <ADC_Enable+0xfc>)
 800d338:	4013      	ands	r3, r2
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00d      	beq.n	800d35a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d342:	f043 0210 	orr.w	r2, r3, #16
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d34e:	f043 0201 	orr.w	r2, r3, #1
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800d356:	2301      	movs	r3, #1
 800d358:	e055      	b.n	800d406 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	4618      	mov	r0, r3
 800d360:	f7ff f870 	bl	800c444 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800d364:	482b      	ldr	r0, [pc, #172]	; (800d414 <ADC_Enable+0x100>)
 800d366:	f7fe feff 	bl	800c168 <LL_ADC_GetCommonPathInternalCh>
 800d36a:	4603      	mov	r3, r0
 800d36c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d370:	2b00      	cmp	r3, #0
 800d372:	d013      	beq.n	800d39c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d374:	4b28      	ldr	r3, [pc, #160]	; (800d418 <ADC_Enable+0x104>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	099b      	lsrs	r3, r3, #6
 800d37a:	4a28      	ldr	r2, [pc, #160]	; (800d41c <ADC_Enable+0x108>)
 800d37c:	fba2 2303 	umull	r2, r3, r2, r3
 800d380:	099b      	lsrs	r3, r3, #6
 800d382:	1c5a      	adds	r2, r3, #1
 800d384:	4613      	mov	r3, r2
 800d386:	005b      	lsls	r3, r3, #1
 800d388:	4413      	add	r3, r2
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800d38e:	e002      	b.n	800d396 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	3b01      	subs	r3, #1
 800d394:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d1f9      	bne.n	800d390 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800d39c:	f7fe fe6e 	bl	800c07c <HAL_GetTick>
 800d3a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800d3a2:	e028      	b.n	800d3f6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7ff f85f 	bl	800c46c <LL_ADC_IsEnabled>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d104      	bne.n	800d3be <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7ff f843 	bl	800c444 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800d3be:	f7fe fe5d 	bl	800c07c <HAL_GetTick>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	1ad3      	subs	r3, r2, r3
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	d914      	bls.n	800d3f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f003 0301 	and.w	r3, r3, #1
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d00d      	beq.n	800d3f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3de:	f043 0210 	orr.w	r2, r3, #16
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3ea:	f043 0201 	orr.w	r2, r3, #1
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	e007      	b.n	800d406 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f003 0301 	and.w	r3, r3, #1
 800d400:	2b01      	cmp	r3, #1
 800d402:	d1cf      	bne.n	800d3a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	8000003f 	.word	0x8000003f
 800d414:	50040300 	.word	0x50040300
 800d418:	200001a0 	.word	0x200001a0
 800d41c:	053e2d63 	.word	0x053e2d63

0800d420 <LL_ADC_IsEnabled>:
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	689b      	ldr	r3, [r3, #8]
 800d42c:	f003 0301 	and.w	r3, r3, #1
 800d430:	2b01      	cmp	r3, #1
 800d432:	d101      	bne.n	800d438 <LL_ADC_IsEnabled+0x18>
 800d434:	2301      	movs	r3, #1
 800d436:	e000      	b.n	800d43a <LL_ADC_IsEnabled+0x1a>
 800d438:	2300      	movs	r3, #0
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	370c      	adds	r7, #12
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr

0800d446 <LL_ADC_REG_IsConversionOngoing>:
{
 800d446:	b480      	push	{r7}
 800d448:	b083      	sub	sp, #12
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	f003 0304 	and.w	r3, r3, #4
 800d456:	2b04      	cmp	r3, #4
 800d458:	d101      	bne.n	800d45e <LL_ADC_REG_IsConversionOngoing+0x18>
 800d45a:	2301      	movs	r3, #1
 800d45c:	e000      	b.n	800d460 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800d45e:	2300      	movs	r3, #0
}
 800d460:	4618      	mov	r0, r3
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800d46c:	b590      	push	{r4, r7, lr}
 800d46e:	b0a1      	sub	sp, #132	; 0x84
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d476:	2300      	movs	r3, #0
 800d478:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d482:	2b01      	cmp	r3, #1
 800d484:	d101      	bne.n	800d48a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800d486:	2302      	movs	r3, #2
 800d488:	e093      	b.n	800d5b2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2201      	movs	r2, #1
 800d48e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800d492:	2300      	movs	r3, #0
 800d494:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800d496:	2300      	movs	r3, #0
 800d498:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4a47      	ldr	r2, [pc, #284]	; (800d5bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d102      	bne.n	800d4aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800d4a4:	4b46      	ldr	r3, [pc, #280]	; (800d5c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800d4a6:	60fb      	str	r3, [r7, #12]
 800d4a8:	e001      	b.n	800d4ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10b      	bne.n	800d4cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4b8:	f043 0220 	orr.w	r2, r3, #32
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e072      	b.n	800d5b2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7ff ffb9 	bl	800d446 <LL_ADC_REG_IsConversionOngoing>
 800d4d4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7ff ffb3 	bl	800d446 <LL_ADC_REG_IsConversionOngoing>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d154      	bne.n	800d590 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800d4e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d151      	bne.n	800d590 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800d4ec:	4b35      	ldr	r3, [pc, #212]	; (800d5c4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800d4ee:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d02c      	beq.n	800d552 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800d4f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	6859      	ldr	r1, [r3, #4]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d50a:	035b      	lsls	r3, r3, #13
 800d50c:	430b      	orrs	r3, r1
 800d50e:	431a      	orrs	r2, r3
 800d510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d512:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800d514:	4829      	ldr	r0, [pc, #164]	; (800d5bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800d516:	f7ff ff83 	bl	800d420 <LL_ADC_IsEnabled>
 800d51a:	4604      	mov	r4, r0
 800d51c:	4828      	ldr	r0, [pc, #160]	; (800d5c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800d51e:	f7ff ff7f 	bl	800d420 <LL_ADC_IsEnabled>
 800d522:	4603      	mov	r3, r0
 800d524:	431c      	orrs	r4, r3
 800d526:	4828      	ldr	r0, [pc, #160]	; (800d5c8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800d528:	f7ff ff7a 	bl	800d420 <LL_ADC_IsEnabled>
 800d52c:	4603      	mov	r3, r0
 800d52e:	4323      	orrs	r3, r4
 800d530:	2b00      	cmp	r3, #0
 800d532:	d137      	bne.n	800d5a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800d534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d536:	689b      	ldr	r3, [r3, #8]
 800d538:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800d53c:	f023 030f 	bic.w	r3, r3, #15
 800d540:	683a      	ldr	r2, [r7, #0]
 800d542:	6811      	ldr	r1, [r2, #0]
 800d544:	683a      	ldr	r2, [r7, #0]
 800d546:	6892      	ldr	r2, [r2, #8]
 800d548:	430a      	orrs	r2, r1
 800d54a:	431a      	orrs	r2, r3
 800d54c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d54e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800d550:	e028      	b.n	800d5a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800d552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d55a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d55c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800d55e:	4817      	ldr	r0, [pc, #92]	; (800d5bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800d560:	f7ff ff5e 	bl	800d420 <LL_ADC_IsEnabled>
 800d564:	4604      	mov	r4, r0
 800d566:	4816      	ldr	r0, [pc, #88]	; (800d5c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800d568:	f7ff ff5a 	bl	800d420 <LL_ADC_IsEnabled>
 800d56c:	4603      	mov	r3, r0
 800d56e:	431c      	orrs	r4, r3
 800d570:	4815      	ldr	r0, [pc, #84]	; (800d5c8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800d572:	f7ff ff55 	bl	800d420 <LL_ADC_IsEnabled>
 800d576:	4603      	mov	r3, r0
 800d578:	4323      	orrs	r3, r4
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d112      	bne.n	800d5a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800d57e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d580:	689b      	ldr	r3, [r3, #8]
 800d582:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800d586:	f023 030f 	bic.w	r3, r3, #15
 800d58a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d58c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800d58e:	e009      	b.n	800d5a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d594:	f043 0220 	orr.w	r2, r3, #32
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800d59c:	2301      	movs	r3, #1
 800d59e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d5a2:	e000      	b.n	800d5a6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800d5a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800d5ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3784      	adds	r7, #132	; 0x84
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd90      	pop	{r4, r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	50040000 	.word	0x50040000
 800d5c0:	50040100 	.word	0x50040100
 800d5c4:	50040300 	.word	0x50040300
 800d5c8:	50040200 	.word	0x50040200

0800d5cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f003 0307 	and.w	r3, r3, #7
 800d5da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d5dc:	4b0c      	ldr	r3, [pc, #48]	; (800d610 <__NVIC_SetPriorityGrouping+0x44>)
 800d5de:	68db      	ldr	r3, [r3, #12]
 800d5e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d5e2:	68ba      	ldr	r2, [r7, #8]
 800d5e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d5e8:	4013      	ands	r3, r2
 800d5ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d5f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d5f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d5fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d5fe:	4a04      	ldr	r2, [pc, #16]	; (800d610 <__NVIC_SetPriorityGrouping+0x44>)
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	60d3      	str	r3, [r2, #12]
}
 800d604:	bf00      	nop
 800d606:	3714      	adds	r7, #20
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr
 800d610:	e000ed00 	.word	0xe000ed00

0800d614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d614:	b480      	push	{r7}
 800d616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d618:	4b04      	ldr	r3, [pc, #16]	; (800d62c <__NVIC_GetPriorityGrouping+0x18>)
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	0a1b      	lsrs	r3, r3, #8
 800d61e:	f003 0307 	and.w	r3, r3, #7
}
 800d622:	4618      	mov	r0, r3
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr
 800d62c:	e000ed00 	.word	0xe000ed00

0800d630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	4603      	mov	r3, r0
 800d638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d63a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	db0b      	blt.n	800d65a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d642:	79fb      	ldrb	r3, [r7, #7]
 800d644:	f003 021f 	and.w	r2, r3, #31
 800d648:	4907      	ldr	r1, [pc, #28]	; (800d668 <__NVIC_EnableIRQ+0x38>)
 800d64a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d64e:	095b      	lsrs	r3, r3, #5
 800d650:	2001      	movs	r0, #1
 800d652:	fa00 f202 	lsl.w	r2, r0, r2
 800d656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800d65a:	bf00      	nop
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	e000e100 	.word	0xe000e100

0800d66c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
 800d672:	4603      	mov	r3, r0
 800d674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	db12      	blt.n	800d6a4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d67e:	79fb      	ldrb	r3, [r7, #7]
 800d680:	f003 021f 	and.w	r2, r3, #31
 800d684:	490a      	ldr	r1, [pc, #40]	; (800d6b0 <__NVIC_DisableIRQ+0x44>)
 800d686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d68a:	095b      	lsrs	r3, r3, #5
 800d68c:	2001      	movs	r0, #1
 800d68e:	fa00 f202 	lsl.w	r2, r0, r2
 800d692:	3320      	adds	r3, #32
 800d694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d698:	f3bf 8f4f 	dsb	sy
}
 800d69c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d69e:	f3bf 8f6f 	isb	sy
}
 800d6a2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800d6a4:	bf00      	nop
 800d6a6:	370c      	adds	r7, #12
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr
 800d6b0:	e000e100 	.word	0xe000e100

0800d6b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	6039      	str	r1, [r7, #0]
 800d6be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d6c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	db0a      	blt.n	800d6de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	b2da      	uxtb	r2, r3
 800d6cc:	490c      	ldr	r1, [pc, #48]	; (800d700 <__NVIC_SetPriority+0x4c>)
 800d6ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6d2:	0112      	lsls	r2, r2, #4
 800d6d4:	b2d2      	uxtb	r2, r2
 800d6d6:	440b      	add	r3, r1
 800d6d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d6dc:	e00a      	b.n	800d6f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	4908      	ldr	r1, [pc, #32]	; (800d704 <__NVIC_SetPriority+0x50>)
 800d6e4:	79fb      	ldrb	r3, [r7, #7]
 800d6e6:	f003 030f 	and.w	r3, r3, #15
 800d6ea:	3b04      	subs	r3, #4
 800d6ec:	0112      	lsls	r2, r2, #4
 800d6ee:	b2d2      	uxtb	r2, r2
 800d6f0:	440b      	add	r3, r1
 800d6f2:	761a      	strb	r2, [r3, #24]
}
 800d6f4:	bf00      	nop
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr
 800d700:	e000e100 	.word	0xe000e100
 800d704:	e000ed00 	.word	0xe000ed00

0800d708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d708:	b480      	push	{r7}
 800d70a:	b089      	sub	sp, #36	; 0x24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f003 0307 	and.w	r3, r3, #7
 800d71a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	f1c3 0307 	rsb	r3, r3, #7
 800d722:	2b04      	cmp	r3, #4
 800d724:	bf28      	it	cs
 800d726:	2304      	movcs	r3, #4
 800d728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	3304      	adds	r3, #4
 800d72e:	2b06      	cmp	r3, #6
 800d730:	d902      	bls.n	800d738 <NVIC_EncodePriority+0x30>
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	3b03      	subs	r3, #3
 800d736:	e000      	b.n	800d73a <NVIC_EncodePriority+0x32>
 800d738:	2300      	movs	r3, #0
 800d73a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d73c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	fa02 f303 	lsl.w	r3, r2, r3
 800d746:	43da      	mvns	r2, r3
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	401a      	ands	r2, r3
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d750:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	fa01 f303 	lsl.w	r3, r1, r3
 800d75a:	43d9      	mvns	r1, r3
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d760:	4313      	orrs	r3, r2
         );
}
 800d762:	4618      	mov	r0, r3
 800d764:	3724      	adds	r7, #36	; 0x24
 800d766:	46bd      	mov	sp, r7
 800d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76c:	4770      	bx	lr
	...

0800d770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	3b01      	subs	r3, #1
 800d77c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d780:	d301      	bcc.n	800d786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d782:	2301      	movs	r3, #1
 800d784:	e00f      	b.n	800d7a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d786:	4a0a      	ldr	r2, [pc, #40]	; (800d7b0 <SysTick_Config+0x40>)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	3b01      	subs	r3, #1
 800d78c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d78e:	210f      	movs	r1, #15
 800d790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d794:	f7ff ff8e 	bl	800d6b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d798:	4b05      	ldr	r3, [pc, #20]	; (800d7b0 <SysTick_Config+0x40>)
 800d79a:	2200      	movs	r2, #0
 800d79c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d79e:	4b04      	ldr	r3, [pc, #16]	; (800d7b0 <SysTick_Config+0x40>)
 800d7a0:	2207      	movs	r2, #7
 800d7a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3708      	adds	r7, #8
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	e000e010 	.word	0xe000e010

0800d7b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f7ff ff05 	bl	800d5cc <__NVIC_SetPriorityGrouping>
}
 800d7c2:	bf00      	nop
 800d7c4:	3708      	adds	r7, #8
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b086      	sub	sp, #24
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	60b9      	str	r1, [r7, #8]
 800d7d4:	607a      	str	r2, [r7, #4]
 800d7d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d7dc:	f7ff ff1a 	bl	800d614 <__NVIC_GetPriorityGrouping>
 800d7e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	68b9      	ldr	r1, [r7, #8]
 800d7e6:	6978      	ldr	r0, [r7, #20]
 800d7e8:	f7ff ff8e 	bl	800d708 <NVIC_EncodePriority>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7f2:	4611      	mov	r1, r2
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7ff ff5d 	bl	800d6b4 <__NVIC_SetPriority>
}
 800d7fa:	bf00      	nop
 800d7fc:	3718      	adds	r7, #24
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b082      	sub	sp, #8
 800d806:	af00      	add	r7, sp, #0
 800d808:	4603      	mov	r3, r0
 800d80a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d80c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d810:	4618      	mov	r0, r3
 800d812:	f7ff ff0d 	bl	800d630 <__NVIC_EnableIRQ>
}
 800d816:	bf00      	nop
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b082      	sub	sp, #8
 800d822:	af00      	add	r7, sp, #0
 800d824:	4603      	mov	r3, r0
 800d826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800d828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7ff ff1d 	bl	800d66c <__NVIC_DisableIRQ>
}
 800d832:	bf00      	nop
 800d834:	3708      	adds	r7, #8
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b082      	sub	sp, #8
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7ff ff94 	bl	800d770 <SysTick_Config>
 800d848:	4603      	mov	r3, r0
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3708      	adds	r7, #8
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
	...

0800d854 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d101      	bne.n	800d866 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800d862:	2301      	movs	r3, #1
 800d864:	e075      	b.n	800d952 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d106      	bne.n	800d880 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f7f3 fcf2 	bl	8001264 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2202      	movs	r2, #2
 800d884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d896:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	699b      	ldr	r3, [r3, #24]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d002      	beq.n	800d8a6 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	6819      	ldr	r1, [r3, #0]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	4b2a      	ldr	r3, [pc, #168]	; (800d95c <HAL_DCMI_Init+0x108>)
 800d8b2:	400b      	ands	r3, r1
 800d8b4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	6819      	ldr	r1, [r3, #0]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685a      	ldr	r2, [r3, #4]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	695b      	ldr	r3, [r3, #20]
 800d8c4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800d8ca:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	691b      	ldr	r3, [r3, #16]
 800d8d0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800d8d6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	699b      	ldr	r3, [r3, #24]
 800d8dc:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800d8e2:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e8:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800d8ee:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f4:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800d8fa:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	430a      	orrs	r2, r1
 800d902:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	2b10      	cmp	r3, #16
 800d90a:	d112      	bne.n	800d932 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	7f1b      	ldrb	r3, [r3, #28]
 800d910:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	7f5b      	ldrb	r3, [r3, #29]
 800d916:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800d918:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	7f9b      	ldrb	r3, [r3, #30]
 800d91e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800d920:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	7fdb      	ldrb	r3, [r3, #31]
 800d928:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800d92e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800d930:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	68da      	ldr	r2, [r3, #12]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f042 021f 	orr.w	r2, r2, #31
 800d940:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2200      	movs	r2, #0
 800d946:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2201      	movs	r2, #1
 800d94c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800d950:	2300      	movs	r3, #0
}
 800d952:	4618      	mov	r0, r3
 800d954:	3708      	adds	r7, #8
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	bf00      	nop
 800d95c:	ffe0f007 	.word	0xffe0f007

0800d960 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d101      	bne.n	800d972 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800d96e:	2301      	movs	r3, #1
 800d970:	e0ac      	b.n	800dacc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4618      	mov	r0, r3
 800d978:	f000 f8b2 	bl	800dae0 <DFSDM_GetChannelFromInstance>
 800d97c:	4603      	mov	r3, r0
 800d97e:	4a55      	ldr	r2, [pc, #340]	; (800dad4 <HAL_DFSDM_ChannelInit+0x174>)
 800d980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d001      	beq.n	800d98c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800d988:	2301      	movs	r3, #1
 800d98a:	e09f      	b.n	800dacc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f7f3 fd55 	bl	800143c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800d992:	4b51      	ldr	r3, [pc, #324]	; (800dad8 <HAL_DFSDM_ChannelInit+0x178>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	3301      	adds	r3, #1
 800d998:	4a4f      	ldr	r2, [pc, #316]	; (800dad8 <HAL_DFSDM_ChannelInit+0x178>)
 800d99a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800d99c:	4b4e      	ldr	r3, [pc, #312]	; (800dad8 <HAL_DFSDM_ChannelInit+0x178>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d125      	bne.n	800d9f0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800d9a4:	4b4d      	ldr	r3, [pc, #308]	; (800dadc <HAL_DFSDM_ChannelInit+0x17c>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a4c      	ldr	r2, [pc, #304]	; (800dadc <HAL_DFSDM_ChannelInit+0x17c>)
 800d9aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d9ae:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800d9b0:	4b4a      	ldr	r3, [pc, #296]	; (800dadc <HAL_DFSDM_ChannelInit+0x17c>)
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	4948      	ldr	r1, [pc, #288]	; (800dadc <HAL_DFSDM_ChannelInit+0x17c>)
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800d9be:	4b47      	ldr	r3, [pc, #284]	; (800dadc <HAL_DFSDM_ChannelInit+0x17c>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a46      	ldr	r2, [pc, #280]	; (800dadc <HAL_DFSDM_ChannelInit+0x17c>)
 800d9c4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800d9c8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	791b      	ldrb	r3, [r3, #4]
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d108      	bne.n	800d9e4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800d9d2:	4b42      	ldr	r3, [pc, #264]	; (800dadc <HAL_DFSDM_ChannelInit+0x17c>)
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	68db      	ldr	r3, [r3, #12]
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	041b      	lsls	r3, r3, #16
 800d9de:	493f      	ldr	r1, [pc, #252]	; (800dadc <HAL_DFSDM_ChannelInit+0x17c>)
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800d9e4:	4b3d      	ldr	r3, [pc, #244]	; (800dadc <HAL_DFSDM_ChannelInit+0x17c>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4a3c      	ldr	r2, [pc, #240]	; (800dadc <HAL_DFSDM_ChannelInit+0x17c>)
 800d9ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d9ee:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800d9fe:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	6819      	ldr	r1, [r3, #0]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800da0e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800da14:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	430a      	orrs	r2, r1
 800da1c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f022 020f 	bic.w	r2, r2, #15
 800da2c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	6819      	ldr	r1, [r3, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800da3c:	431a      	orrs	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	430a      	orrs	r2, r1
 800da44:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	689a      	ldr	r2, [r3, #8]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800da54:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	6899      	ldr	r1, [r3, #8]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da64:	3b01      	subs	r3, #1
 800da66:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800da68:	431a      	orrs	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	430a      	orrs	r2, r1
 800da70:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	685a      	ldr	r2, [r3, #4]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f002 0207 	and.w	r2, r2, #7
 800da80:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	6859      	ldr	r1, [r3, #4]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da8c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da92:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800da94:	431a      	orrs	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	430a      	orrs	r2, r1
 800da9c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800daac:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2201      	movs	r2, #1
 800dab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4618      	mov	r0, r3
 800dabc:	f000 f810 	bl	800dae0 <DFSDM_GetChannelFromInstance>
 800dac0:	4602      	mov	r2, r0
 800dac2:	4904      	ldr	r1, [pc, #16]	; (800dad4 <HAL_DFSDM_ChannelInit+0x174>)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	20001bf8 	.word	0x20001bf8
 800dad8:	20001bf4 	.word	0x20001bf4
 800dadc:	40016000 	.word	0x40016000

0800dae0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	4a1c      	ldr	r2, [pc, #112]	; (800db5c <DFSDM_GetChannelFromInstance+0x7c>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d102      	bne.n	800daf6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800daf0:	2300      	movs	r3, #0
 800daf2:	60fb      	str	r3, [r7, #12]
 800daf4:	e02b      	b.n	800db4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4a19      	ldr	r2, [pc, #100]	; (800db60 <DFSDM_GetChannelFromInstance+0x80>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d102      	bne.n	800db04 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800dafe:	2301      	movs	r3, #1
 800db00:	60fb      	str	r3, [r7, #12]
 800db02:	e024      	b.n	800db4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	4a17      	ldr	r2, [pc, #92]	; (800db64 <DFSDM_GetChannelFromInstance+0x84>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d102      	bne.n	800db12 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800db0c:	2302      	movs	r3, #2
 800db0e:	60fb      	str	r3, [r7, #12]
 800db10:	e01d      	b.n	800db4e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	4a14      	ldr	r2, [pc, #80]	; (800db68 <DFSDM_GetChannelFromInstance+0x88>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d102      	bne.n	800db20 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800db1a:	2304      	movs	r3, #4
 800db1c:	60fb      	str	r3, [r7, #12]
 800db1e:	e016      	b.n	800db4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	4a12      	ldr	r2, [pc, #72]	; (800db6c <DFSDM_GetChannelFromInstance+0x8c>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d102      	bne.n	800db2e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800db28:	2305      	movs	r3, #5
 800db2a:	60fb      	str	r3, [r7, #12]
 800db2c:	e00f      	b.n	800db4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	4a0f      	ldr	r2, [pc, #60]	; (800db70 <DFSDM_GetChannelFromInstance+0x90>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d102      	bne.n	800db3c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800db36:	2306      	movs	r3, #6
 800db38:	60fb      	str	r3, [r7, #12]
 800db3a:	e008      	b.n	800db4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	4a0d      	ldr	r2, [pc, #52]	; (800db74 <DFSDM_GetChannelFromInstance+0x94>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d102      	bne.n	800db4a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800db44:	2307      	movs	r3, #7
 800db46:	60fb      	str	r3, [r7, #12]
 800db48:	e001      	b.n	800db4e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800db4a:	2303      	movs	r3, #3
 800db4c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800db4e:	68fb      	ldr	r3, [r7, #12]
}
 800db50:	4618      	mov	r0, r3
 800db52:	3714      	adds	r7, #20
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr
 800db5c:	40016000 	.word	0x40016000
 800db60:	40016020 	.word	0x40016020
 800db64:	40016040 	.word	0x40016040
 800db68:	40016080 	.word	0x40016080
 800db6c:	400160a0 	.word	0x400160a0
 800db70:	400160c0 	.word	0x400160c0
 800db74:	400160e0 	.word	0x400160e0

0800db78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800db78:	b480      	push	{r7}
 800db7a:	b087      	sub	sp, #28
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800db82:	2300      	movs	r3, #0
 800db84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800db86:	e166      	b.n	800de56 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	2101      	movs	r1, #1
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	fa01 f303 	lsl.w	r3, r1, r3
 800db94:	4013      	ands	r3, r2
 800db96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	f000 8158 	beq.w	800de50 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	f003 0303 	and.w	r3, r3, #3
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	d005      	beq.n	800dbb8 <HAL_GPIO_Init+0x40>
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	f003 0303 	and.w	r3, r3, #3
 800dbb4:	2b02      	cmp	r3, #2
 800dbb6:	d130      	bne.n	800dc1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	689b      	ldr	r3, [r3, #8]
 800dbbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	005b      	lsls	r3, r3, #1
 800dbc2:	2203      	movs	r2, #3
 800dbc4:	fa02 f303 	lsl.w	r3, r2, r3
 800dbc8:	43db      	mvns	r3, r3
 800dbca:	693a      	ldr	r2, [r7, #16]
 800dbcc:	4013      	ands	r3, r2
 800dbce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	68da      	ldr	r2, [r3, #12]
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	005b      	lsls	r3, r3, #1
 800dbd8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbdc:	693a      	ldr	r2, [r7, #16]
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800dbee:	2201      	movs	r2, #1
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	fa02 f303 	lsl.w	r3, r2, r3
 800dbf6:	43db      	mvns	r3, r3
 800dbf8:	693a      	ldr	r2, [r7, #16]
 800dbfa:	4013      	ands	r3, r2
 800dbfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	091b      	lsrs	r3, r3, #4
 800dc04:	f003 0201 	and.w	r2, r3, #1
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	fa02 f303 	lsl.w	r3, r2, r3
 800dc0e:	693a      	ldr	r2, [r7, #16]
 800dc10:	4313      	orrs	r3, r2
 800dc12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	693a      	ldr	r2, [r7, #16]
 800dc18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	f003 0303 	and.w	r3, r3, #3
 800dc22:	2b03      	cmp	r3, #3
 800dc24:	d017      	beq.n	800dc56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	005b      	lsls	r3, r3, #1
 800dc30:	2203      	movs	r2, #3
 800dc32:	fa02 f303 	lsl.w	r3, r2, r3
 800dc36:	43db      	mvns	r3, r3
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	4013      	ands	r3, r2
 800dc3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	689a      	ldr	r2, [r3, #8]
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	005b      	lsls	r3, r3, #1
 800dc46:	fa02 f303 	lsl.w	r3, r2, r3
 800dc4a:	693a      	ldr	r2, [r7, #16]
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	693a      	ldr	r2, [r7, #16]
 800dc54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	f003 0303 	and.w	r3, r3, #3
 800dc5e:	2b02      	cmp	r3, #2
 800dc60:	d123      	bne.n	800dcaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	08da      	lsrs	r2, r3, #3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	3208      	adds	r2, #8
 800dc6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	f003 0307 	and.w	r3, r3, #7
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	220f      	movs	r2, #15
 800dc7a:	fa02 f303 	lsl.w	r3, r2, r3
 800dc7e:	43db      	mvns	r3, r3
 800dc80:	693a      	ldr	r2, [r7, #16]
 800dc82:	4013      	ands	r3, r2
 800dc84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	691a      	ldr	r2, [r3, #16]
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	f003 0307 	and.w	r3, r3, #7
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	fa02 f303 	lsl.w	r3, r2, r3
 800dc96:	693a      	ldr	r2, [r7, #16]
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	08da      	lsrs	r2, r3, #3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	3208      	adds	r2, #8
 800dca4:	6939      	ldr	r1, [r7, #16]
 800dca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	005b      	lsls	r3, r3, #1
 800dcb4:	2203      	movs	r2, #3
 800dcb6:	fa02 f303 	lsl.w	r3, r2, r3
 800dcba:	43db      	mvns	r3, r3
 800dcbc:	693a      	ldr	r2, [r7, #16]
 800dcbe:	4013      	ands	r3, r2
 800dcc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	f003 0203 	and.w	r2, r3, #3
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	005b      	lsls	r3, r3, #1
 800dcce:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd2:	693a      	ldr	r2, [r7, #16]
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	693a      	ldr	r2, [r7, #16]
 800dcdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	f000 80b2 	beq.w	800de50 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dcec:	4b61      	ldr	r3, [pc, #388]	; (800de74 <HAL_GPIO_Init+0x2fc>)
 800dcee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcf0:	4a60      	ldr	r2, [pc, #384]	; (800de74 <HAL_GPIO_Init+0x2fc>)
 800dcf2:	f043 0301 	orr.w	r3, r3, #1
 800dcf6:	6613      	str	r3, [r2, #96]	; 0x60
 800dcf8:	4b5e      	ldr	r3, [pc, #376]	; (800de74 <HAL_GPIO_Init+0x2fc>)
 800dcfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcfc:	f003 0301 	and.w	r3, r3, #1
 800dd00:	60bb      	str	r3, [r7, #8]
 800dd02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800dd04:	4a5c      	ldr	r2, [pc, #368]	; (800de78 <HAL_GPIO_Init+0x300>)
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	089b      	lsrs	r3, r3, #2
 800dd0a:	3302      	adds	r3, #2
 800dd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	f003 0303 	and.w	r3, r3, #3
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	220f      	movs	r2, #15
 800dd1c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd20:	43db      	mvns	r3, r3
 800dd22:	693a      	ldr	r2, [r7, #16]
 800dd24:	4013      	ands	r3, r2
 800dd26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800dd2e:	d02b      	beq.n	800dd88 <HAL_GPIO_Init+0x210>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	4a52      	ldr	r2, [pc, #328]	; (800de7c <HAL_GPIO_Init+0x304>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d025      	beq.n	800dd84 <HAL_GPIO_Init+0x20c>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	4a51      	ldr	r2, [pc, #324]	; (800de80 <HAL_GPIO_Init+0x308>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d01f      	beq.n	800dd80 <HAL_GPIO_Init+0x208>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	4a50      	ldr	r2, [pc, #320]	; (800de84 <HAL_GPIO_Init+0x30c>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d019      	beq.n	800dd7c <HAL_GPIO_Init+0x204>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	4a4f      	ldr	r2, [pc, #316]	; (800de88 <HAL_GPIO_Init+0x310>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d013      	beq.n	800dd78 <HAL_GPIO_Init+0x200>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4a4e      	ldr	r2, [pc, #312]	; (800de8c <HAL_GPIO_Init+0x314>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d00d      	beq.n	800dd74 <HAL_GPIO_Init+0x1fc>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	4a4d      	ldr	r2, [pc, #308]	; (800de90 <HAL_GPIO_Init+0x318>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d007      	beq.n	800dd70 <HAL_GPIO_Init+0x1f8>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	4a4c      	ldr	r2, [pc, #304]	; (800de94 <HAL_GPIO_Init+0x31c>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d101      	bne.n	800dd6c <HAL_GPIO_Init+0x1f4>
 800dd68:	2307      	movs	r3, #7
 800dd6a:	e00e      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd6c:	2308      	movs	r3, #8
 800dd6e:	e00c      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd70:	2306      	movs	r3, #6
 800dd72:	e00a      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd74:	2305      	movs	r3, #5
 800dd76:	e008      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd78:	2304      	movs	r3, #4
 800dd7a:	e006      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd7c:	2303      	movs	r3, #3
 800dd7e:	e004      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd80:	2302      	movs	r3, #2
 800dd82:	e002      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd84:	2301      	movs	r3, #1
 800dd86:	e000      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd88:	2300      	movs	r3, #0
 800dd8a:	697a      	ldr	r2, [r7, #20]
 800dd8c:	f002 0203 	and.w	r2, r2, #3
 800dd90:	0092      	lsls	r2, r2, #2
 800dd92:	4093      	lsls	r3, r2
 800dd94:	693a      	ldr	r2, [r7, #16]
 800dd96:	4313      	orrs	r3, r2
 800dd98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800dd9a:	4937      	ldr	r1, [pc, #220]	; (800de78 <HAL_GPIO_Init+0x300>)
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	089b      	lsrs	r3, r3, #2
 800dda0:	3302      	adds	r3, #2
 800dda2:	693a      	ldr	r2, [r7, #16]
 800dda4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800dda8:	4b3b      	ldr	r3, [pc, #236]	; (800de98 <HAL_GPIO_Init+0x320>)
 800ddaa:	689b      	ldr	r3, [r3, #8]
 800ddac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	43db      	mvns	r3, r3
 800ddb2:	693a      	ldr	r2, [r7, #16]
 800ddb4:	4013      	ands	r3, r2
 800ddb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d003      	beq.n	800ddcc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800ddc4:	693a      	ldr	r2, [r7, #16]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ddcc:	4a32      	ldr	r2, [pc, #200]	; (800de98 <HAL_GPIO_Init+0x320>)
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ddd2:	4b31      	ldr	r3, [pc, #196]	; (800de98 <HAL_GPIO_Init+0x320>)
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	43db      	mvns	r3, r3
 800dddc:	693a      	ldr	r2, [r7, #16]
 800ddde:	4013      	ands	r3, r2
 800dde0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d003      	beq.n	800ddf6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800ddee:	693a      	ldr	r2, [r7, #16]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ddf6:	4a28      	ldr	r2, [pc, #160]	; (800de98 <HAL_GPIO_Init+0x320>)
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800ddfc:	4b26      	ldr	r3, [pc, #152]	; (800de98 <HAL_GPIO_Init+0x320>)
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	43db      	mvns	r3, r3
 800de06:	693a      	ldr	r2, [r7, #16]
 800de08:	4013      	ands	r3, r2
 800de0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de14:	2b00      	cmp	r3, #0
 800de16:	d003      	beq.n	800de20 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800de18:	693a      	ldr	r2, [r7, #16]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	4313      	orrs	r3, r2
 800de1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800de20:	4a1d      	ldr	r2, [pc, #116]	; (800de98 <HAL_GPIO_Init+0x320>)
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800de26:	4b1c      	ldr	r3, [pc, #112]	; (800de98 <HAL_GPIO_Init+0x320>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	43db      	mvns	r3, r3
 800de30:	693a      	ldr	r2, [r7, #16]
 800de32:	4013      	ands	r3, r2
 800de34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d003      	beq.n	800de4a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800de42:	693a      	ldr	r2, [r7, #16]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	4313      	orrs	r3, r2
 800de48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800de4a:	4a13      	ldr	r2, [pc, #76]	; (800de98 <HAL_GPIO_Init+0x320>)
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	3301      	adds	r3, #1
 800de54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	fa22 f303 	lsr.w	r3, r2, r3
 800de60:	2b00      	cmp	r3, #0
 800de62:	f47f ae91 	bne.w	800db88 <HAL_GPIO_Init+0x10>
  }
}
 800de66:	bf00      	nop
 800de68:	bf00      	nop
 800de6a:	371c      	adds	r7, #28
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr
 800de74:	40021000 	.word	0x40021000
 800de78:	40010000 	.word	0x40010000
 800de7c:	48000400 	.word	0x48000400
 800de80:	48000800 	.word	0x48000800
 800de84:	48000c00 	.word	0x48000c00
 800de88:	48001000 	.word	0x48001000
 800de8c:	48001400 	.word	0x48001400
 800de90:	48001800 	.word	0x48001800
 800de94:	48001c00 	.word	0x48001c00
 800de98:	40010400 	.word	0x40010400

0800de9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b087      	sub	sp, #28
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800dea6:	2300      	movs	r3, #0
 800dea8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800deaa:	e0c9      	b.n	800e040 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800deac:	2201      	movs	r2, #1
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	fa02 f303 	lsl.w	r3, r2, r3
 800deb4:	683a      	ldr	r2, [r7, #0]
 800deb6:	4013      	ands	r3, r2
 800deb8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	2b00      	cmp	r3, #0
 800debe:	f000 80bc 	beq.w	800e03a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800dec2:	4a66      	ldr	r2, [pc, #408]	; (800e05c <HAL_GPIO_DeInit+0x1c0>)
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	089b      	lsrs	r3, r3, #2
 800dec8:	3302      	adds	r3, #2
 800deca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dece:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	f003 0303 	and.w	r3, r3, #3
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	220f      	movs	r2, #15
 800deda:	fa02 f303 	lsl.w	r3, r2, r3
 800dede:	68fa      	ldr	r2, [r7, #12]
 800dee0:	4013      	ands	r3, r2
 800dee2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800deea:	d02b      	beq.n	800df44 <HAL_GPIO_DeInit+0xa8>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4a5c      	ldr	r2, [pc, #368]	; (800e060 <HAL_GPIO_DeInit+0x1c4>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d025      	beq.n	800df40 <HAL_GPIO_DeInit+0xa4>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	4a5b      	ldr	r2, [pc, #364]	; (800e064 <HAL_GPIO_DeInit+0x1c8>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d01f      	beq.n	800df3c <HAL_GPIO_DeInit+0xa0>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	4a5a      	ldr	r2, [pc, #360]	; (800e068 <HAL_GPIO_DeInit+0x1cc>)
 800df00:	4293      	cmp	r3, r2
 800df02:	d019      	beq.n	800df38 <HAL_GPIO_DeInit+0x9c>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	4a59      	ldr	r2, [pc, #356]	; (800e06c <HAL_GPIO_DeInit+0x1d0>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d013      	beq.n	800df34 <HAL_GPIO_DeInit+0x98>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	4a58      	ldr	r2, [pc, #352]	; (800e070 <HAL_GPIO_DeInit+0x1d4>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d00d      	beq.n	800df30 <HAL_GPIO_DeInit+0x94>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	4a57      	ldr	r2, [pc, #348]	; (800e074 <HAL_GPIO_DeInit+0x1d8>)
 800df18:	4293      	cmp	r3, r2
 800df1a:	d007      	beq.n	800df2c <HAL_GPIO_DeInit+0x90>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	4a56      	ldr	r2, [pc, #344]	; (800e078 <HAL_GPIO_DeInit+0x1dc>)
 800df20:	4293      	cmp	r3, r2
 800df22:	d101      	bne.n	800df28 <HAL_GPIO_DeInit+0x8c>
 800df24:	2307      	movs	r3, #7
 800df26:	e00e      	b.n	800df46 <HAL_GPIO_DeInit+0xaa>
 800df28:	2308      	movs	r3, #8
 800df2a:	e00c      	b.n	800df46 <HAL_GPIO_DeInit+0xaa>
 800df2c:	2306      	movs	r3, #6
 800df2e:	e00a      	b.n	800df46 <HAL_GPIO_DeInit+0xaa>
 800df30:	2305      	movs	r3, #5
 800df32:	e008      	b.n	800df46 <HAL_GPIO_DeInit+0xaa>
 800df34:	2304      	movs	r3, #4
 800df36:	e006      	b.n	800df46 <HAL_GPIO_DeInit+0xaa>
 800df38:	2303      	movs	r3, #3
 800df3a:	e004      	b.n	800df46 <HAL_GPIO_DeInit+0xaa>
 800df3c:	2302      	movs	r3, #2
 800df3e:	e002      	b.n	800df46 <HAL_GPIO_DeInit+0xaa>
 800df40:	2301      	movs	r3, #1
 800df42:	e000      	b.n	800df46 <HAL_GPIO_DeInit+0xaa>
 800df44:	2300      	movs	r3, #0
 800df46:	697a      	ldr	r2, [r7, #20]
 800df48:	f002 0203 	and.w	r2, r2, #3
 800df4c:	0092      	lsls	r2, r2, #2
 800df4e:	4093      	lsls	r3, r2
 800df50:	68fa      	ldr	r2, [r7, #12]
 800df52:	429a      	cmp	r2, r3
 800df54:	d132      	bne.n	800dfbc <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800df56:	4b49      	ldr	r3, [pc, #292]	; (800e07c <HAL_GPIO_DeInit+0x1e0>)
 800df58:	681a      	ldr	r2, [r3, #0]
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	43db      	mvns	r3, r3
 800df5e:	4947      	ldr	r1, [pc, #284]	; (800e07c <HAL_GPIO_DeInit+0x1e0>)
 800df60:	4013      	ands	r3, r2
 800df62:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800df64:	4b45      	ldr	r3, [pc, #276]	; (800e07c <HAL_GPIO_DeInit+0x1e0>)
 800df66:	685a      	ldr	r2, [r3, #4]
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	43db      	mvns	r3, r3
 800df6c:	4943      	ldr	r1, [pc, #268]	; (800e07c <HAL_GPIO_DeInit+0x1e0>)
 800df6e:	4013      	ands	r3, r2
 800df70:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800df72:	4b42      	ldr	r3, [pc, #264]	; (800e07c <HAL_GPIO_DeInit+0x1e0>)
 800df74:	68da      	ldr	r2, [r3, #12]
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	43db      	mvns	r3, r3
 800df7a:	4940      	ldr	r1, [pc, #256]	; (800e07c <HAL_GPIO_DeInit+0x1e0>)
 800df7c:	4013      	ands	r3, r2
 800df7e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800df80:	4b3e      	ldr	r3, [pc, #248]	; (800e07c <HAL_GPIO_DeInit+0x1e0>)
 800df82:	689a      	ldr	r2, [r3, #8]
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	43db      	mvns	r3, r3
 800df88:	493c      	ldr	r1, [pc, #240]	; (800e07c <HAL_GPIO_DeInit+0x1e0>)
 800df8a:	4013      	ands	r3, r2
 800df8c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	f003 0303 	and.w	r3, r3, #3
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	220f      	movs	r2, #15
 800df98:	fa02 f303 	lsl.w	r3, r2, r3
 800df9c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800df9e:	4a2f      	ldr	r2, [pc, #188]	; (800e05c <HAL_GPIO_DeInit+0x1c0>)
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	089b      	lsrs	r3, r3, #2
 800dfa4:	3302      	adds	r3, #2
 800dfa6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	43da      	mvns	r2, r3
 800dfae:	482b      	ldr	r0, [pc, #172]	; (800e05c <HAL_GPIO_DeInit+0x1c0>)
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	089b      	lsrs	r3, r3, #2
 800dfb4:	400a      	ands	r2, r1
 800dfb6:	3302      	adds	r3, #2
 800dfb8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	005b      	lsls	r3, r3, #1
 800dfc4:	2103      	movs	r1, #3
 800dfc6:	fa01 f303 	lsl.w	r3, r1, r3
 800dfca:	431a      	orrs	r2, r3
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	08da      	lsrs	r2, r3, #3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	3208      	adds	r2, #8
 800dfd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	f003 0307 	and.w	r3, r3, #7
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	220f      	movs	r2, #15
 800dfe6:	fa02 f303 	lsl.w	r3, r2, r3
 800dfea:	43db      	mvns	r3, r3
 800dfec:	697a      	ldr	r2, [r7, #20]
 800dfee:	08d2      	lsrs	r2, r2, #3
 800dff0:	4019      	ands	r1, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	3208      	adds	r2, #8
 800dff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	689a      	ldr	r2, [r3, #8]
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	005b      	lsls	r3, r3, #1
 800e002:	2103      	movs	r1, #3
 800e004:	fa01 f303 	lsl.w	r3, r1, r3
 800e008:	43db      	mvns	r3, r3
 800e00a:	401a      	ands	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	685a      	ldr	r2, [r3, #4]
 800e014:	2101      	movs	r1, #1
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	fa01 f303 	lsl.w	r3, r1, r3
 800e01c:	43db      	mvns	r3, r3
 800e01e:	401a      	ands	r2, r3
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	68da      	ldr	r2, [r3, #12]
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	005b      	lsls	r3, r3, #1
 800e02c:	2103      	movs	r1, #3
 800e02e:	fa01 f303 	lsl.w	r3, r1, r3
 800e032:	43db      	mvns	r3, r3
 800e034:	401a      	ands	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	3301      	adds	r3, #1
 800e03e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800e040:	683a      	ldr	r2, [r7, #0]
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	fa22 f303 	lsr.w	r3, r2, r3
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f47f af2f 	bne.w	800deac <HAL_GPIO_DeInit+0x10>
  }
}
 800e04e:	bf00      	nop
 800e050:	bf00      	nop
 800e052:	371c      	adds	r7, #28
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr
 800e05c:	40010000 	.word	0x40010000
 800e060:	48000400 	.word	0x48000400
 800e064:	48000800 	.word	0x48000800
 800e068:	48000c00 	.word	0x48000c00
 800e06c:	48001000 	.word	0x48001000
 800e070:	48001400 	.word	0x48001400
 800e074:	48001800 	.word	0x48001800
 800e078:	48001c00 	.word	0x48001c00
 800e07c:	40010400 	.word	0x40010400

0800e080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	460b      	mov	r3, r1
 800e08a:	807b      	strh	r3, [r7, #2]
 800e08c:	4613      	mov	r3, r2
 800e08e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e090:	787b      	ldrb	r3, [r7, #1]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d003      	beq.n	800e09e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e096:	887a      	ldrh	r2, [r7, #2]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e09c:	e002      	b.n	800e0a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e09e:	887a      	ldrh	r2, [r7, #2]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e0a4:	bf00      	nop
 800e0a6:	370c      	adds	r7, #12
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	460b      	mov	r3, r1
 800e0ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	695b      	ldr	r3, [r3, #20]
 800e0c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800e0c2:	887a      	ldrh	r2, [r7, #2]
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	4013      	ands	r3, r2
 800e0c8:	041a      	lsls	r2, r3, #16
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	43d9      	mvns	r1, r3
 800e0ce:	887b      	ldrh	r3, [r7, #2]
 800e0d0:	400b      	ands	r3, r1
 800e0d2:	431a      	orrs	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	619a      	str	r2, [r3, #24]
}
 800e0d8:	bf00      	nop
 800e0da:	3714      	adds	r7, #20
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800e0ee:	4b08      	ldr	r3, [pc, #32]	; (800e110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e0f0:	695a      	ldr	r2, [r3, #20]
 800e0f2:	88fb      	ldrh	r3, [r7, #6]
 800e0f4:	4013      	ands	r3, r2
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d006      	beq.n	800e108 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e0fa:	4a05      	ldr	r2, [pc, #20]	; (800e110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e0fc:	88fb      	ldrh	r3, [r7, #6]
 800e0fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e100:	88fb      	ldrh	r3, [r7, #6]
 800e102:	4618      	mov	r0, r3
 800e104:	f7f4 fe1e 	bl	8002d44 <HAL_GPIO_EXTI_Callback>
  }
}
 800e108:	bf00      	nop
 800e10a:	3708      	adds	r7, #8
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}
 800e110:	40010400 	.word	0x40010400

0800e114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d101      	bne.n	800e126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e122:	2301      	movs	r3, #1
 800e124:	e081      	b.n	800e22a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d106      	bne.n	800e140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2200      	movs	r2, #0
 800e136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f7f3 fd6c 	bl	8001c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2224      	movs	r2, #36	; 0x24
 800e144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f022 0201 	bic.w	r2, r2, #1
 800e156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	685a      	ldr	r2, [r3, #4]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e164:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	689a      	ldr	r2, [r3, #8]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e174:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d107      	bne.n	800e18e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	689a      	ldr	r2, [r3, #8]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e18a:	609a      	str	r2, [r3, #8]
 800e18c:	e006      	b.n	800e19c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	689a      	ldr	r2, [r3, #8]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800e19a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	68db      	ldr	r3, [r3, #12]
 800e1a0:	2b02      	cmp	r3, #2
 800e1a2:	d104      	bne.n	800e1ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e1ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	6812      	ldr	r2, [r2, #0]
 800e1b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e1bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e1c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	68da      	ldr	r2, [r3, #12]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e1d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	691a      	ldr	r2, [r3, #16]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	695b      	ldr	r3, [r3, #20]
 800e1da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	699b      	ldr	r3, [r3, #24]
 800e1e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	430a      	orrs	r2, r1
 800e1ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	69d9      	ldr	r1, [r3, #28]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6a1a      	ldr	r2, [r3, #32]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	430a      	orrs	r2, r1
 800e1fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f042 0201 	orr.w	r2, r2, #1
 800e20a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2200      	movs	r2, #0
 800e210:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2220      	movs	r2, #32
 800e216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2200      	movs	r2, #0
 800e21e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3708      	adds	r7, #8
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800e232:	b580      	push	{r7, lr}
 800e234:	b082      	sub	sp, #8
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d101      	bne.n	800e244 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800e240:	2301      	movs	r3, #1
 800e242:	e021      	b.n	800e288 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2224      	movs	r2, #36	; 0x24
 800e248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f022 0201 	bic.w	r2, r2, #1
 800e25a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f7f3 fda1 	bl	8001da4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2200      	movs	r2, #0
 800e266:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2200      	movs	r2, #0
 800e26c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2200      	movs	r2, #0
 800e274:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2200      	movs	r2, #0
 800e282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e286:	2300      	movs	r3, #0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3708      	adds	r7, #8
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b088      	sub	sp, #32
 800e294:	af02      	add	r7, sp, #8
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	607a      	str	r2, [r7, #4]
 800e29a:	461a      	mov	r2, r3
 800e29c:	460b      	mov	r3, r1
 800e29e:	817b      	strh	r3, [r7, #10]
 800e2a0:	4613      	mov	r3, r2
 800e2a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	2b20      	cmp	r3, #32
 800e2ae:	f040 80da 	bne.w	800e466 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d101      	bne.n	800e2c0 <HAL_I2C_Master_Transmit+0x30>
 800e2bc:	2302      	movs	r3, #2
 800e2be:	e0d3      	b.n	800e468 <HAL_I2C_Master_Transmit+0x1d8>
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e2c8:	f7fd fed8 	bl	800c07c <HAL_GetTick>
 800e2cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	2319      	movs	r3, #25
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f000 fdd2 	bl	800ee84 <I2C_WaitOnFlagUntilTimeout>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d001      	beq.n	800e2ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e0be      	b.n	800e468 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	2221      	movs	r2, #33	; 0x21
 800e2ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2210      	movs	r2, #16
 800e2f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	893a      	ldrh	r2, [r7, #8]
 800e30a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2200      	movs	r2, #0
 800e310:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e316:	b29b      	uxth	r3, r3
 800e318:	2bff      	cmp	r3, #255	; 0xff
 800e31a:	d90e      	bls.n	800e33a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	22ff      	movs	r2, #255	; 0xff
 800e320:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e326:	b2da      	uxtb	r2, r3
 800e328:	8979      	ldrh	r1, [r7, #10]
 800e32a:	4b51      	ldr	r3, [pc, #324]	; (800e470 <HAL_I2C_Master_Transmit+0x1e0>)
 800e32c:	9300      	str	r3, [sp, #0]
 800e32e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e332:	68f8      	ldr	r0, [r7, #12]
 800e334:	f000 ffc8 	bl	800f2c8 <I2C_TransferConfig>
 800e338:	e06c      	b.n	800e414 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e33e:	b29a      	uxth	r2, r3
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e348:	b2da      	uxtb	r2, r3
 800e34a:	8979      	ldrh	r1, [r7, #10]
 800e34c:	4b48      	ldr	r3, [pc, #288]	; (800e470 <HAL_I2C_Master_Transmit+0x1e0>)
 800e34e:	9300      	str	r3, [sp, #0]
 800e350:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f000 ffb7 	bl	800f2c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800e35a:	e05b      	b.n	800e414 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e35c:	697a      	ldr	r2, [r7, #20]
 800e35e:	6a39      	ldr	r1, [r7, #32]
 800e360:	68f8      	ldr	r0, [r7, #12]
 800e362:	f000 fdcf 	bl	800ef04 <I2C_WaitOnTXISFlagUntilTimeout>
 800e366:	4603      	mov	r3, r0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d001      	beq.n	800e370 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800e36c:	2301      	movs	r3, #1
 800e36e:	e07b      	b.n	800e468 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e374:	781a      	ldrb	r2, [r3, #0]
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e380:	1c5a      	adds	r2, r3, #1
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	3b01      	subs	r3, #1
 800e38e:	b29a      	uxth	r2, r3
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e398:	3b01      	subs	r3, #1
 800e39a:	b29a      	uxth	r2, r3
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d034      	beq.n	800e414 <HAL_I2C_Master_Transmit+0x184>
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d130      	bne.n	800e414 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	9300      	str	r3, [sp, #0]
 800e3b6:	6a3b      	ldr	r3, [r7, #32]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	2180      	movs	r1, #128	; 0x80
 800e3bc:	68f8      	ldr	r0, [r7, #12]
 800e3be:	f000 fd61 	bl	800ee84 <I2C_WaitOnFlagUntilTimeout>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d001      	beq.n	800e3cc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	e04d      	b.n	800e468 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	2bff      	cmp	r3, #255	; 0xff
 800e3d4:	d90e      	bls.n	800e3f4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	22ff      	movs	r2, #255	; 0xff
 800e3da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3e0:	b2da      	uxtb	r2, r3
 800e3e2:	8979      	ldrh	r1, [r7, #10]
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	9300      	str	r3, [sp, #0]
 800e3e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e3ec:	68f8      	ldr	r0, [r7, #12]
 800e3ee:	f000 ff6b 	bl	800f2c8 <I2C_TransferConfig>
 800e3f2:	e00f      	b.n	800e414 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3f8:	b29a      	uxth	r2, r3
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e402:	b2da      	uxtb	r2, r3
 800e404:	8979      	ldrh	r1, [r7, #10]
 800e406:	2300      	movs	r3, #0
 800e408:	9300      	str	r3, [sp, #0]
 800e40a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f000 ff5a 	bl	800f2c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e418:	b29b      	uxth	r3, r3
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d19e      	bne.n	800e35c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e41e:	697a      	ldr	r2, [r7, #20]
 800e420:	6a39      	ldr	r1, [r7, #32]
 800e422:	68f8      	ldr	r0, [r7, #12]
 800e424:	f000 fdae 	bl	800ef84 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e428:	4603      	mov	r3, r0
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d001      	beq.n	800e432 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800e42e:	2301      	movs	r3, #1
 800e430:	e01a      	b.n	800e468 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	2220      	movs	r2, #32
 800e438:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	6859      	ldr	r1, [r3, #4]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	4b0b      	ldr	r3, [pc, #44]	; (800e474 <HAL_I2C_Master_Transmit+0x1e4>)
 800e446:	400b      	ands	r3, r1
 800e448:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2220      	movs	r2, #32
 800e44e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2200      	movs	r2, #0
 800e456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2200      	movs	r2, #0
 800e45e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e462:	2300      	movs	r3, #0
 800e464:	e000      	b.n	800e468 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800e466:	2302      	movs	r3, #2
  }
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3718      	adds	r7, #24
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	80002000 	.word	0x80002000
 800e474:	fe00e800 	.word	0xfe00e800

0800e478 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b088      	sub	sp, #32
 800e47c:	af02      	add	r7, sp, #8
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	607a      	str	r2, [r7, #4]
 800e482:	461a      	mov	r2, r3
 800e484:	460b      	mov	r3, r1
 800e486:	817b      	strh	r3, [r7, #10]
 800e488:	4613      	mov	r3, r2
 800e48a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e492:	b2db      	uxtb	r3, r3
 800e494:	2b20      	cmp	r3, #32
 800e496:	f040 80db 	bne.w	800e650 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d101      	bne.n	800e4a8 <HAL_I2C_Master_Receive+0x30>
 800e4a4:	2302      	movs	r3, #2
 800e4a6:	e0d4      	b.n	800e652 <HAL_I2C_Master_Receive+0x1da>
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e4b0:	f7fd fde4 	bl	800c07c <HAL_GetTick>
 800e4b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	2319      	movs	r3, #25
 800e4bc:	2201      	movs	r2, #1
 800e4be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e4c2:	68f8      	ldr	r0, [r7, #12]
 800e4c4:	f000 fcde 	bl	800ee84 <I2C_WaitOnFlagUntilTimeout>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d001      	beq.n	800e4d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	e0bf      	b.n	800e652 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2222      	movs	r2, #34	; 0x22
 800e4d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2210      	movs	r2, #16
 800e4de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	893a      	ldrh	r2, [r7, #8]
 800e4f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	2bff      	cmp	r3, #255	; 0xff
 800e502:	d90e      	bls.n	800e522 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	22ff      	movs	r2, #255	; 0xff
 800e508:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e50e:	b2da      	uxtb	r2, r3
 800e510:	8979      	ldrh	r1, [r7, #10]
 800e512:	4b52      	ldr	r3, [pc, #328]	; (800e65c <HAL_I2C_Master_Receive+0x1e4>)
 800e514:	9300      	str	r3, [sp, #0]
 800e516:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e51a:	68f8      	ldr	r0, [r7, #12]
 800e51c:	f000 fed4 	bl	800f2c8 <I2C_TransferConfig>
 800e520:	e06d      	b.n	800e5fe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e526:	b29a      	uxth	r2, r3
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e530:	b2da      	uxtb	r2, r3
 800e532:	8979      	ldrh	r1, [r7, #10]
 800e534:	4b49      	ldr	r3, [pc, #292]	; (800e65c <HAL_I2C_Master_Receive+0x1e4>)
 800e536:	9300      	str	r3, [sp, #0]
 800e538:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f000 fec3 	bl	800f2c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800e542:	e05c      	b.n	800e5fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e544:	697a      	ldr	r2, [r7, #20]
 800e546:	6a39      	ldr	r1, [r7, #32]
 800e548:	68f8      	ldr	r0, [r7, #12]
 800e54a:	f000 fd57 	bl	800effc <I2C_WaitOnRXNEFlagUntilTimeout>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d001      	beq.n	800e558 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800e554:	2301      	movs	r3, #1
 800e556:	e07c      	b.n	800e652 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e562:	b2d2      	uxtb	r2, r2
 800e564:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e56a:	1c5a      	adds	r2, r3, #1
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e574:	3b01      	subs	r3, #1
 800e576:	b29a      	uxth	r2, r3
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e580:	b29b      	uxth	r3, r3
 800e582:	3b01      	subs	r3, #1
 800e584:	b29a      	uxth	r2, r3
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e58e:	b29b      	uxth	r3, r3
 800e590:	2b00      	cmp	r3, #0
 800e592:	d034      	beq.n	800e5fe <HAL_I2C_Master_Receive+0x186>
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d130      	bne.n	800e5fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	9300      	str	r3, [sp, #0]
 800e5a0:	6a3b      	ldr	r3, [r7, #32]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	2180      	movs	r1, #128	; 0x80
 800e5a6:	68f8      	ldr	r0, [r7, #12]
 800e5a8:	f000 fc6c 	bl	800ee84 <I2C_WaitOnFlagUntilTimeout>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d001      	beq.n	800e5b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e04d      	b.n	800e652 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	2bff      	cmp	r3, #255	; 0xff
 800e5be:	d90e      	bls.n	800e5de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	22ff      	movs	r2, #255	; 0xff
 800e5c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e5ca:	b2da      	uxtb	r2, r3
 800e5cc:	8979      	ldrh	r1, [r7, #10]
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e5d6:	68f8      	ldr	r0, [r7, #12]
 800e5d8:	f000 fe76 	bl	800f2c8 <I2C_TransferConfig>
 800e5dc:	e00f      	b.n	800e5fe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5e2:	b29a      	uxth	r2, r3
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e5ec:	b2da      	uxtb	r2, r3
 800e5ee:	8979      	ldrh	r1, [r7, #10]
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	9300      	str	r3, [sp, #0]
 800e5f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e5f8:	68f8      	ldr	r0, [r7, #12]
 800e5fa:	f000 fe65 	bl	800f2c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e602:	b29b      	uxth	r3, r3
 800e604:	2b00      	cmp	r3, #0
 800e606:	d19d      	bne.n	800e544 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e608:	697a      	ldr	r2, [r7, #20]
 800e60a:	6a39      	ldr	r1, [r7, #32]
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f000 fcb9 	bl	800ef84 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	d001      	beq.n	800e61c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800e618:	2301      	movs	r3, #1
 800e61a:	e01a      	b.n	800e652 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2220      	movs	r2, #32
 800e622:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	6859      	ldr	r1, [r3, #4]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681a      	ldr	r2, [r3, #0]
 800e62e:	4b0c      	ldr	r3, [pc, #48]	; (800e660 <HAL_I2C_Master_Receive+0x1e8>)
 800e630:	400b      	ands	r3, r1
 800e632:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2220      	movs	r2, #32
 800e638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2200      	movs	r2, #0
 800e640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2200      	movs	r2, #0
 800e648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e64c:	2300      	movs	r3, #0
 800e64e:	e000      	b.n	800e652 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800e650:	2302      	movs	r3, #2
  }
}
 800e652:	4618      	mov	r0, r3
 800e654:	3718      	adds	r7, #24
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	80002400 	.word	0x80002400
 800e660:	fe00e800 	.word	0xfe00e800

0800e664 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b088      	sub	sp, #32
 800e668:	af02      	add	r7, sp, #8
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	4608      	mov	r0, r1
 800e66e:	4611      	mov	r1, r2
 800e670:	461a      	mov	r2, r3
 800e672:	4603      	mov	r3, r0
 800e674:	817b      	strh	r3, [r7, #10]
 800e676:	460b      	mov	r3, r1
 800e678:	813b      	strh	r3, [r7, #8]
 800e67a:	4613      	mov	r3, r2
 800e67c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e684:	b2db      	uxtb	r3, r3
 800e686:	2b20      	cmp	r3, #32
 800e688:	f040 80f9 	bne.w	800e87e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e68c:	6a3b      	ldr	r3, [r7, #32]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d002      	beq.n	800e698 <HAL_I2C_Mem_Write+0x34>
 800e692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e694:	2b00      	cmp	r3, #0
 800e696:	d105      	bne.n	800e6a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e69e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	e0ed      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d101      	bne.n	800e6b2 <HAL_I2C_Mem_Write+0x4e>
 800e6ae:	2302      	movs	r3, #2
 800e6b0:	e0e6      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e6ba:	f7fd fcdf 	bl	800c07c <HAL_GetTick>
 800e6be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	9300      	str	r3, [sp, #0]
 800e6c4:	2319      	movs	r3, #25
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e6cc:	68f8      	ldr	r0, [r7, #12]
 800e6ce:	f000 fbd9 	bl	800ee84 <I2C_WaitOnFlagUntilTimeout>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d001      	beq.n	800e6dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e0d1      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2221      	movs	r2, #33	; 0x21
 800e6e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2240      	movs	r2, #64	; 0x40
 800e6e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6a3a      	ldr	r2, [r7, #32]
 800e6f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e6fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2200      	movs	r2, #0
 800e702:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e704:	88f8      	ldrh	r0, [r7, #6]
 800e706:	893a      	ldrh	r2, [r7, #8]
 800e708:	8979      	ldrh	r1, [r7, #10]
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	9301      	str	r3, [sp, #4]
 800e70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e710:	9300      	str	r3, [sp, #0]
 800e712:	4603      	mov	r3, r0
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f000 fae9 	bl	800ecec <I2C_RequestMemoryWrite>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d005      	beq.n	800e72c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2200      	movs	r2, #0
 800e724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e728:	2301      	movs	r3, #1
 800e72a:	e0a9      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e730:	b29b      	uxth	r3, r3
 800e732:	2bff      	cmp	r3, #255	; 0xff
 800e734:	d90e      	bls.n	800e754 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	22ff      	movs	r2, #255	; 0xff
 800e73a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e740:	b2da      	uxtb	r2, r3
 800e742:	8979      	ldrh	r1, [r7, #10]
 800e744:	2300      	movs	r3, #0
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f000 fdbb 	bl	800f2c8 <I2C_TransferConfig>
 800e752:	e00f      	b.n	800e774 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e758:	b29a      	uxth	r2, r3
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e762:	b2da      	uxtb	r2, r3
 800e764:	8979      	ldrh	r1, [r7, #10]
 800e766:	2300      	movs	r3, #0
 800e768:	9300      	str	r3, [sp, #0]
 800e76a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e76e:	68f8      	ldr	r0, [r7, #12]
 800e770:	f000 fdaa 	bl	800f2c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e774:	697a      	ldr	r2, [r7, #20]
 800e776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f000 fbc3 	bl	800ef04 <I2C_WaitOnTXISFlagUntilTimeout>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d001      	beq.n	800e788 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e784:	2301      	movs	r3, #1
 800e786:	e07b      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78c:	781a      	ldrb	r2, [r3, #0]
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e798:	1c5a      	adds	r2, r3, #1
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	3b01      	subs	r3, #1
 800e7a6:	b29a      	uxth	r2, r3
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7b0:	3b01      	subs	r3, #1
 800e7b2:	b29a      	uxth	r2, r3
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d034      	beq.n	800e82c <HAL_I2C_Mem_Write+0x1c8>
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d130      	bne.n	800e82c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	9300      	str	r3, [sp, #0]
 800e7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	2180      	movs	r1, #128	; 0x80
 800e7d4:	68f8      	ldr	r0, [r7, #12]
 800e7d6:	f000 fb55 	bl	800ee84 <I2C_WaitOnFlagUntilTimeout>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d001      	beq.n	800e7e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	e04d      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	2bff      	cmp	r3, #255	; 0xff
 800e7ec:	d90e      	bls.n	800e80c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	22ff      	movs	r2, #255	; 0xff
 800e7f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7f8:	b2da      	uxtb	r2, r3
 800e7fa:	8979      	ldrh	r1, [r7, #10]
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	9300      	str	r3, [sp, #0]
 800e800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	f000 fd5f 	bl	800f2c8 <I2C_TransferConfig>
 800e80a:	e00f      	b.n	800e82c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e810:	b29a      	uxth	r2, r3
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e81a:	b2da      	uxtb	r2, r3
 800e81c:	8979      	ldrh	r1, [r7, #10]
 800e81e:	2300      	movs	r3, #0
 800e820:	9300      	str	r3, [sp, #0]
 800e822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e826:	68f8      	ldr	r0, [r7, #12]
 800e828:	f000 fd4e 	bl	800f2c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e830:	b29b      	uxth	r3, r3
 800e832:	2b00      	cmp	r3, #0
 800e834:	d19e      	bne.n	800e774 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e836:	697a      	ldr	r2, [r7, #20]
 800e838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e83a:	68f8      	ldr	r0, [r7, #12]
 800e83c:	f000 fba2 	bl	800ef84 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d001      	beq.n	800e84a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e846:	2301      	movs	r3, #1
 800e848:	e01a      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2220      	movs	r2, #32
 800e850:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	6859      	ldr	r1, [r3, #4]
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	4b0a      	ldr	r3, [pc, #40]	; (800e888 <HAL_I2C_Mem_Write+0x224>)
 800e85e:	400b      	ands	r3, r1
 800e860:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2220      	movs	r2, #32
 800e866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2200      	movs	r2, #0
 800e86e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2200      	movs	r2, #0
 800e876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e87a:	2300      	movs	r3, #0
 800e87c:	e000      	b.n	800e880 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e87e:	2302      	movs	r3, #2
  }
}
 800e880:	4618      	mov	r0, r3
 800e882:	3718      	adds	r7, #24
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	fe00e800 	.word	0xfe00e800

0800e88c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b088      	sub	sp, #32
 800e890:	af02      	add	r7, sp, #8
 800e892:	60f8      	str	r0, [r7, #12]
 800e894:	4608      	mov	r0, r1
 800e896:	4611      	mov	r1, r2
 800e898:	461a      	mov	r2, r3
 800e89a:	4603      	mov	r3, r0
 800e89c:	817b      	strh	r3, [r7, #10]
 800e89e:	460b      	mov	r3, r1
 800e8a0:	813b      	strh	r3, [r7, #8]
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	2b20      	cmp	r3, #32
 800e8b0:	f040 80fd 	bne.w	800eaae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e8b4:	6a3b      	ldr	r3, [r7, #32]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d002      	beq.n	800e8c0 <HAL_I2C_Mem_Read+0x34>
 800e8ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d105      	bne.n	800e8cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	e0f1      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d101      	bne.n	800e8da <HAL_I2C_Mem_Read+0x4e>
 800e8d6:	2302      	movs	r3, #2
 800e8d8:	e0ea      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2201      	movs	r2, #1
 800e8de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e8e2:	f7fd fbcb 	bl	800c07c <HAL_GetTick>
 800e8e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	9300      	str	r3, [sp, #0]
 800e8ec:	2319      	movs	r3, #25
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e8f4:	68f8      	ldr	r0, [r7, #12]
 800e8f6:	f000 fac5 	bl	800ee84 <I2C_WaitOnFlagUntilTimeout>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d001      	beq.n	800e904 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e900:	2301      	movs	r3, #1
 800e902:	e0d5      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2222      	movs	r2, #34	; 0x22
 800e908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2240      	movs	r2, #64	; 0x40
 800e910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2200      	movs	r2, #0
 800e918:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	6a3a      	ldr	r2, [r7, #32]
 800e91e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2200      	movs	r2, #0
 800e92a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e92c:	88f8      	ldrh	r0, [r7, #6]
 800e92e:	893a      	ldrh	r2, [r7, #8]
 800e930:	8979      	ldrh	r1, [r7, #10]
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	9301      	str	r3, [sp, #4]
 800e936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	4603      	mov	r3, r0
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f000 fa29 	bl	800ed94 <I2C_RequestMemoryRead>
 800e942:	4603      	mov	r3, r0
 800e944:	2b00      	cmp	r3, #0
 800e946:	d005      	beq.n	800e954 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e950:	2301      	movs	r3, #1
 800e952:	e0ad      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e958:	b29b      	uxth	r3, r3
 800e95a:	2bff      	cmp	r3, #255	; 0xff
 800e95c:	d90e      	bls.n	800e97c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	22ff      	movs	r2, #255	; 0xff
 800e962:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e968:	b2da      	uxtb	r2, r3
 800e96a:	8979      	ldrh	r1, [r7, #10]
 800e96c:	4b52      	ldr	r3, [pc, #328]	; (800eab8 <HAL_I2C_Mem_Read+0x22c>)
 800e96e:	9300      	str	r3, [sp, #0]
 800e970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e974:	68f8      	ldr	r0, [r7, #12]
 800e976:	f000 fca7 	bl	800f2c8 <I2C_TransferConfig>
 800e97a:	e00f      	b.n	800e99c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e980:	b29a      	uxth	r2, r3
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e98a:	b2da      	uxtb	r2, r3
 800e98c:	8979      	ldrh	r1, [r7, #10]
 800e98e:	4b4a      	ldr	r3, [pc, #296]	; (800eab8 <HAL_I2C_Mem_Read+0x22c>)
 800e990:	9300      	str	r3, [sp, #0]
 800e992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e996:	68f8      	ldr	r0, [r7, #12]
 800e998:	f000 fc96 	bl	800f2c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	2104      	movs	r1, #4
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	f000 fa6c 	bl	800ee84 <I2C_WaitOnFlagUntilTimeout>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d001      	beq.n	800e9b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	e07c      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c0:	b2d2      	uxtb	r2, r2
 800e9c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c8:	1c5a      	adds	r2, r3, #1
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9d2:	3b01      	subs	r3, #1
 800e9d4:	b29a      	uxth	r2, r3
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	3b01      	subs	r3, #1
 800e9e2:	b29a      	uxth	r2, r3
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d034      	beq.n	800ea5c <HAL_I2C_Mem_Read+0x1d0>
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d130      	bne.n	800ea5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	9300      	str	r3, [sp, #0]
 800e9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea00:	2200      	movs	r2, #0
 800ea02:	2180      	movs	r1, #128	; 0x80
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	f000 fa3d 	bl	800ee84 <I2C_WaitOnFlagUntilTimeout>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d001      	beq.n	800ea14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ea10:	2301      	movs	r3, #1
 800ea12:	e04d      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	2bff      	cmp	r3, #255	; 0xff
 800ea1c:	d90e      	bls.n	800ea3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	22ff      	movs	r2, #255	; 0xff
 800ea22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea28:	b2da      	uxtb	r2, r3
 800ea2a:	8979      	ldrh	r1, [r7, #10]
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	9300      	str	r3, [sp, #0]
 800ea30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ea34:	68f8      	ldr	r0, [r7, #12]
 800ea36:	f000 fc47 	bl	800f2c8 <I2C_TransferConfig>
 800ea3a:	e00f      	b.n	800ea5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea40:	b29a      	uxth	r2, r3
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea4a:	b2da      	uxtb	r2, r3
 800ea4c:	8979      	ldrh	r1, [r7, #10]
 800ea4e:	2300      	movs	r3, #0
 800ea50:	9300      	str	r3, [sp, #0]
 800ea52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ea56:	68f8      	ldr	r0, [r7, #12]
 800ea58:	f000 fc36 	bl	800f2c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d19a      	bne.n	800e99c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ea66:	697a      	ldr	r2, [r7, #20]
 800ea68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	f000 fa8a 	bl	800ef84 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ea70:	4603      	mov	r3, r0
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d001      	beq.n	800ea7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ea76:	2301      	movs	r3, #1
 800ea78:	e01a      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2220      	movs	r2, #32
 800ea80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	6859      	ldr	r1, [r3, #4]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	4b0b      	ldr	r3, [pc, #44]	; (800eabc <HAL_I2C_Mem_Read+0x230>)
 800ea8e:	400b      	ands	r3, r1
 800ea90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2220      	movs	r2, #32
 800ea96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	e000      	b.n	800eab0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800eaae:	2302      	movs	r3, #2
  }
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3718      	adds	r7, #24
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	80002400 	.word	0x80002400
 800eabc:	fe00e800 	.word	0xfe00e800

0800eac0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b08a      	sub	sp, #40	; 0x28
 800eac4:	af02      	add	r7, sp, #8
 800eac6:	60f8      	str	r0, [r7, #12]
 800eac8:	607a      	str	r2, [r7, #4]
 800eaca:	603b      	str	r3, [r7, #0]
 800eacc:	460b      	mov	r3, r1
 800eace:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800ead0:	2300      	movs	r3, #0
 800ead2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eada:	b2db      	uxtb	r3, r3
 800eadc:	2b20      	cmp	r3, #32
 800eade:	f040 80f1 	bne.w	800ecc4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	699b      	ldr	r3, [r3, #24]
 800eae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eaec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eaf0:	d101      	bne.n	800eaf6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800eaf2:	2302      	movs	r3, #2
 800eaf4:	e0e7      	b.n	800ecc6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d101      	bne.n	800eb04 <HAL_I2C_IsDeviceReady+0x44>
 800eb00:	2302      	movs	r3, #2
 800eb02:	e0e0      	b.n	800ecc6 <HAL_I2C_IsDeviceReady+0x206>
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2201      	movs	r2, #1
 800eb08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2224      	movs	r2, #36	; 0x24
 800eb10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2200      	movs	r2, #0
 800eb18:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	68db      	ldr	r3, [r3, #12]
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d107      	bne.n	800eb32 <HAL_I2C_IsDeviceReady+0x72>
 800eb22:	897b      	ldrh	r3, [r7, #10]
 800eb24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eb28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800eb2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eb30:	e004      	b.n	800eb3c <HAL_I2C_IsDeviceReady+0x7c>
 800eb32:	897b      	ldrh	r3, [r7, #10]
 800eb34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eb38:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800eb3c:	68fa      	ldr	r2, [r7, #12]
 800eb3e:	6812      	ldr	r2, [r2, #0]
 800eb40:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800eb42:	f7fd fa9b 	bl	800c07c <HAL_GetTick>
 800eb46:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	699b      	ldr	r3, [r3, #24]
 800eb4e:	f003 0320 	and.w	r3, r3, #32
 800eb52:	2b20      	cmp	r3, #32
 800eb54:	bf0c      	ite	eq
 800eb56:	2301      	moveq	r3, #1
 800eb58:	2300      	movne	r3, #0
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	699b      	ldr	r3, [r3, #24]
 800eb64:	f003 0310 	and.w	r3, r3, #16
 800eb68:	2b10      	cmp	r3, #16
 800eb6a:	bf0c      	ite	eq
 800eb6c:	2301      	moveq	r3, #1
 800eb6e:	2300      	movne	r3, #0
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800eb74:	e034      	b.n	800ebe0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb7c:	d01a      	beq.n	800ebb4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800eb7e:	f7fd fa7d 	bl	800c07c <HAL_GetTick>
 800eb82:	4602      	mov	r2, r0
 800eb84:	69bb      	ldr	r3, [r7, #24]
 800eb86:	1ad3      	subs	r3, r2, r3
 800eb88:	683a      	ldr	r2, [r7, #0]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d302      	bcc.n	800eb94 <HAL_I2C_IsDeviceReady+0xd4>
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d10f      	bne.n	800ebb4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2220      	movs	r2, #32
 800eb98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eba0:	f043 0220 	orr.w	r2, r3, #32
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e088      	b.n	800ecc6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	699b      	ldr	r3, [r3, #24]
 800ebba:	f003 0320 	and.w	r3, r3, #32
 800ebbe:	2b20      	cmp	r3, #32
 800ebc0:	bf0c      	ite	eq
 800ebc2:	2301      	moveq	r3, #1
 800ebc4:	2300      	movne	r3, #0
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	699b      	ldr	r3, [r3, #24]
 800ebd0:	f003 0310 	and.w	r3, r3, #16
 800ebd4:	2b10      	cmp	r3, #16
 800ebd6:	bf0c      	ite	eq
 800ebd8:	2301      	moveq	r3, #1
 800ebda:	2300      	movne	r3, #0
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800ebe0:	7ffb      	ldrb	r3, [r7, #31]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d102      	bne.n	800ebec <HAL_I2C_IsDeviceReady+0x12c>
 800ebe6:	7fbb      	ldrb	r3, [r7, #30]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d0c4      	beq.n	800eb76 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	699b      	ldr	r3, [r3, #24]
 800ebf2:	f003 0310 	and.w	r3, r3, #16
 800ebf6:	2b10      	cmp	r3, #16
 800ebf8:	d01a      	beq.n	800ec30 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	9300      	str	r3, [sp, #0]
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	2200      	movs	r2, #0
 800ec02:	2120      	movs	r1, #32
 800ec04:	68f8      	ldr	r0, [r7, #12]
 800ec06:	f000 f93d 	bl	800ee84 <I2C_WaitOnFlagUntilTimeout>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d001      	beq.n	800ec14 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800ec10:	2301      	movs	r3, #1
 800ec12:	e058      	b.n	800ecc6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	2220      	movs	r2, #32
 800ec1a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2220      	movs	r2, #32
 800ec20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2200      	movs	r2, #0
 800ec28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	e04a      	b.n	800ecc6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ec30:	69bb      	ldr	r3, [r7, #24]
 800ec32:	9300      	str	r3, [sp, #0]
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	2200      	movs	r2, #0
 800ec38:	2120      	movs	r1, #32
 800ec3a:	68f8      	ldr	r0, [r7, #12]
 800ec3c:	f000 f922 	bl	800ee84 <I2C_WaitOnFlagUntilTimeout>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d001      	beq.n	800ec4a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800ec46:	2301      	movs	r3, #1
 800ec48:	e03d      	b.n	800ecc6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	2210      	movs	r2, #16
 800ec50:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	2220      	movs	r2, #32
 800ec58:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	687a      	ldr	r2, [r7, #4]
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d118      	bne.n	800ec94 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	685a      	ldr	r2, [r3, #4]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ec70:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ec72:	69bb      	ldr	r3, [r7, #24]
 800ec74:	9300      	str	r3, [sp, #0]
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	2120      	movs	r1, #32
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f000 f901 	bl	800ee84 <I2C_WaitOnFlagUntilTimeout>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d001      	beq.n	800ec8c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	e01c      	b.n	800ecc6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	2220      	movs	r2, #32
 800ec92:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	3301      	adds	r3, #1
 800ec98:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	f63f af3b 	bhi.w	800eb1a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2220      	movs	r2, #32
 800eca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecb0:	f043 0220 	orr.w	r2, r3, #32
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e000      	b.n	800ecc6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800ecc4:	2302      	movs	r3, #2
  }
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3720      	adds	r7, #32
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ecce:	b480      	push	{r7}
 800ecd0:	b083      	sub	sp, #12
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ecdc:	b2db      	uxtb	r3, r3
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	370c      	adds	r7, #12
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr
	...

0800ecec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b086      	sub	sp, #24
 800ecf0:	af02      	add	r7, sp, #8
 800ecf2:	60f8      	str	r0, [r7, #12]
 800ecf4:	4608      	mov	r0, r1
 800ecf6:	4611      	mov	r1, r2
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	817b      	strh	r3, [r7, #10]
 800ecfe:	460b      	mov	r3, r1
 800ed00:	813b      	strh	r3, [r7, #8]
 800ed02:	4613      	mov	r3, r2
 800ed04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ed06:	88fb      	ldrh	r3, [r7, #6]
 800ed08:	b2da      	uxtb	r2, r3
 800ed0a:	8979      	ldrh	r1, [r7, #10]
 800ed0c:	4b20      	ldr	r3, [pc, #128]	; (800ed90 <I2C_RequestMemoryWrite+0xa4>)
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ed14:	68f8      	ldr	r0, [r7, #12]
 800ed16:	f000 fad7 	bl	800f2c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ed1a:	69fa      	ldr	r2, [r7, #28]
 800ed1c:	69b9      	ldr	r1, [r7, #24]
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	f000 f8f0 	bl	800ef04 <I2C_WaitOnTXISFlagUntilTimeout>
 800ed24:	4603      	mov	r3, r0
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d001      	beq.n	800ed2e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e02c      	b.n	800ed88 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ed2e:	88fb      	ldrh	r3, [r7, #6]
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d105      	bne.n	800ed40 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ed34:	893b      	ldrh	r3, [r7, #8]
 800ed36:	b2da      	uxtb	r2, r3
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	629a      	str	r2, [r3, #40]	; 0x28
 800ed3e:	e015      	b.n	800ed6c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ed40:	893b      	ldrh	r3, [r7, #8]
 800ed42:	0a1b      	lsrs	r3, r3, #8
 800ed44:	b29b      	uxth	r3, r3
 800ed46:	b2da      	uxtb	r2, r3
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ed4e:	69fa      	ldr	r2, [r7, #28]
 800ed50:	69b9      	ldr	r1, [r7, #24]
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	f000 f8d6 	bl	800ef04 <I2C_WaitOnTXISFlagUntilTimeout>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d001      	beq.n	800ed62 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e012      	b.n	800ed88 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ed62:	893b      	ldrh	r3, [r7, #8]
 800ed64:	b2da      	uxtb	r2, r3
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	9300      	str	r3, [sp, #0]
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	2200      	movs	r2, #0
 800ed74:	2180      	movs	r1, #128	; 0x80
 800ed76:	68f8      	ldr	r0, [r7, #12]
 800ed78:	f000 f884 	bl	800ee84 <I2C_WaitOnFlagUntilTimeout>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d001      	beq.n	800ed86 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ed82:	2301      	movs	r3, #1
 800ed84:	e000      	b.n	800ed88 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ed86:	2300      	movs	r3, #0
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3710      	adds	r7, #16
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	80002000 	.word	0x80002000

0800ed94 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b086      	sub	sp, #24
 800ed98:	af02      	add	r7, sp, #8
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	4608      	mov	r0, r1
 800ed9e:	4611      	mov	r1, r2
 800eda0:	461a      	mov	r2, r3
 800eda2:	4603      	mov	r3, r0
 800eda4:	817b      	strh	r3, [r7, #10]
 800eda6:	460b      	mov	r3, r1
 800eda8:	813b      	strh	r3, [r7, #8]
 800edaa:	4613      	mov	r3, r2
 800edac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800edae:	88fb      	ldrh	r3, [r7, #6]
 800edb0:	b2da      	uxtb	r2, r3
 800edb2:	8979      	ldrh	r1, [r7, #10]
 800edb4:	4b20      	ldr	r3, [pc, #128]	; (800ee38 <I2C_RequestMemoryRead+0xa4>)
 800edb6:	9300      	str	r3, [sp, #0]
 800edb8:	2300      	movs	r3, #0
 800edba:	68f8      	ldr	r0, [r7, #12]
 800edbc:	f000 fa84 	bl	800f2c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800edc0:	69fa      	ldr	r2, [r7, #28]
 800edc2:	69b9      	ldr	r1, [r7, #24]
 800edc4:	68f8      	ldr	r0, [r7, #12]
 800edc6:	f000 f89d 	bl	800ef04 <I2C_WaitOnTXISFlagUntilTimeout>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d001      	beq.n	800edd4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800edd0:	2301      	movs	r3, #1
 800edd2:	e02c      	b.n	800ee2e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800edd4:	88fb      	ldrh	r3, [r7, #6]
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d105      	bne.n	800ede6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800edda:	893b      	ldrh	r3, [r7, #8]
 800eddc:	b2da      	uxtb	r2, r3
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	629a      	str	r2, [r3, #40]	; 0x28
 800ede4:	e015      	b.n	800ee12 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ede6:	893b      	ldrh	r3, [r7, #8]
 800ede8:	0a1b      	lsrs	r3, r3, #8
 800edea:	b29b      	uxth	r3, r3
 800edec:	b2da      	uxtb	r2, r3
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800edf4:	69fa      	ldr	r2, [r7, #28]
 800edf6:	69b9      	ldr	r1, [r7, #24]
 800edf8:	68f8      	ldr	r0, [r7, #12]
 800edfa:	f000 f883 	bl	800ef04 <I2C_WaitOnTXISFlagUntilTimeout>
 800edfe:	4603      	mov	r3, r0
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d001      	beq.n	800ee08 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ee04:	2301      	movs	r3, #1
 800ee06:	e012      	b.n	800ee2e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ee08:	893b      	ldrh	r3, [r7, #8]
 800ee0a:	b2da      	uxtb	r2, r3
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ee12:	69fb      	ldr	r3, [r7, #28]
 800ee14:	9300      	str	r3, [sp, #0]
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	2140      	movs	r1, #64	; 0x40
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f000 f831 	bl	800ee84 <I2C_WaitOnFlagUntilTimeout>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d001      	beq.n	800ee2c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	e000      	b.n	800ee2e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ee2c:	2300      	movs	r3, #0
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3710      	adds	r7, #16
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	80002000 	.word	0x80002000

0800ee3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b083      	sub	sp, #12
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	699b      	ldr	r3, [r3, #24]
 800ee4a:	f003 0302 	and.w	r3, r3, #2
 800ee4e:	2b02      	cmp	r3, #2
 800ee50:	d103      	bne.n	800ee5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2200      	movs	r2, #0
 800ee58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	699b      	ldr	r3, [r3, #24]
 800ee60:	f003 0301 	and.w	r3, r3, #1
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d007      	beq.n	800ee78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	699a      	ldr	r2, [r3, #24]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f042 0201 	orr.w	r2, r2, #1
 800ee76:	619a      	str	r2, [r3, #24]
  }
}
 800ee78:	bf00      	nop
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr

0800ee84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	60b9      	str	r1, [r7, #8]
 800ee8e:	603b      	str	r3, [r7, #0]
 800ee90:	4613      	mov	r3, r2
 800ee92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ee94:	e022      	b.n	800eedc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee9c:	d01e      	beq.n	800eedc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee9e:	f7fd f8ed 	bl	800c07c <HAL_GetTick>
 800eea2:	4602      	mov	r2, r0
 800eea4:	69bb      	ldr	r3, [r7, #24]
 800eea6:	1ad3      	subs	r3, r2, r3
 800eea8:	683a      	ldr	r2, [r7, #0]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d302      	bcc.n	800eeb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d113      	bne.n	800eedc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eeb8:	f043 0220 	orr.w	r2, r3, #32
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	2220      	movs	r2, #32
 800eec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2200      	movs	r2, #0
 800eecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2200      	movs	r2, #0
 800eed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800eed8:	2301      	movs	r3, #1
 800eeda:	e00f      	b.n	800eefc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	699a      	ldr	r2, [r3, #24]
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	4013      	ands	r3, r2
 800eee6:	68ba      	ldr	r2, [r7, #8]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	bf0c      	ite	eq
 800eeec:	2301      	moveq	r3, #1
 800eeee:	2300      	movne	r3, #0
 800eef0:	b2db      	uxtb	r3, r3
 800eef2:	461a      	mov	r2, r3
 800eef4:	79fb      	ldrb	r3, [r7, #7]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d0cd      	beq.n	800ee96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800eefa:	2300      	movs	r3, #0
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3710      	adds	r7, #16
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ef10:	e02c      	b.n	800ef6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	68b9      	ldr	r1, [r7, #8]
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	f000 f8ea 	bl	800f0f0 <I2C_IsErrorOccurred>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d001      	beq.n	800ef26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ef22:	2301      	movs	r3, #1
 800ef24:	e02a      	b.n	800ef7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef2c:	d01e      	beq.n	800ef6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef2e:	f7fd f8a5 	bl	800c07c <HAL_GetTick>
 800ef32:	4602      	mov	r2, r0
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	1ad3      	subs	r3, r2, r3
 800ef38:	68ba      	ldr	r2, [r7, #8]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d302      	bcc.n	800ef44 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d113      	bne.n	800ef6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef48:	f043 0220 	orr.w	r2, r3, #32
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	2220      	movs	r2, #32
 800ef54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2200      	movs	r2, #0
 800ef64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ef68:	2301      	movs	r3, #1
 800ef6a:	e007      	b.n	800ef7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	699b      	ldr	r3, [r3, #24]
 800ef72:	f003 0302 	and.w	r3, r3, #2
 800ef76:	2b02      	cmp	r3, #2
 800ef78:	d1cb      	bne.n	800ef12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3710      	adds	r7, #16
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ef90:	e028      	b.n	800efe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ef92:	687a      	ldr	r2, [r7, #4]
 800ef94:	68b9      	ldr	r1, [r7, #8]
 800ef96:	68f8      	ldr	r0, [r7, #12]
 800ef98:	f000 f8aa 	bl	800f0f0 <I2C_IsErrorOccurred>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d001      	beq.n	800efa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800efa2:	2301      	movs	r3, #1
 800efa4:	e026      	b.n	800eff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800efa6:	f7fd f869 	bl	800c07c <HAL_GetTick>
 800efaa:	4602      	mov	r2, r0
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	68ba      	ldr	r2, [r7, #8]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d302      	bcc.n	800efbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d113      	bne.n	800efe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efc0:	f043 0220 	orr.w	r2, r3, #32
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2220      	movs	r2, #32
 800efcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2200      	movs	r2, #0
 800efd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	2200      	movs	r2, #0
 800efdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800efe0:	2301      	movs	r3, #1
 800efe2:	e007      	b.n	800eff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	699b      	ldr	r3, [r3, #24]
 800efea:	f003 0320 	and.w	r3, r3, #32
 800efee:	2b20      	cmp	r3, #32
 800eff0:	d1cf      	bne.n	800ef92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800eff2:	2300      	movs	r3, #0
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3710      	adds	r7, #16
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
 800f002:	60f8      	str	r0, [r7, #12]
 800f004:	60b9      	str	r1, [r7, #8]
 800f006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f008:	e064      	b.n	800f0d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800f00a:	687a      	ldr	r2, [r7, #4]
 800f00c:	68b9      	ldr	r1, [r7, #8]
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f000 f86e 	bl	800f0f0 <I2C_IsErrorOccurred>
 800f014:	4603      	mov	r3, r0
 800f016:	2b00      	cmp	r3, #0
 800f018:	d001      	beq.n	800f01e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800f01a:	2301      	movs	r3, #1
 800f01c:	e062      	b.n	800f0e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	699b      	ldr	r3, [r3, #24]
 800f024:	f003 0320 	and.w	r3, r3, #32
 800f028:	2b20      	cmp	r3, #32
 800f02a:	d138      	bne.n	800f09e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	699b      	ldr	r3, [r3, #24]
 800f032:	f003 0304 	and.w	r3, r3, #4
 800f036:	2b04      	cmp	r3, #4
 800f038:	d105      	bne.n	800f046 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d001      	beq.n	800f046 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800f042:	2300      	movs	r3, #0
 800f044:	e04e      	b.n	800f0e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	699b      	ldr	r3, [r3, #24]
 800f04c:	f003 0310 	and.w	r3, r3, #16
 800f050:	2b10      	cmp	r3, #16
 800f052:	d107      	bne.n	800f064 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	2210      	movs	r2, #16
 800f05a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2204      	movs	r2, #4
 800f060:	645a      	str	r2, [r3, #68]	; 0x44
 800f062:	e002      	b.n	800f06a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2200      	movs	r2, #0
 800f068:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2220      	movs	r2, #32
 800f070:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	6859      	ldr	r1, [r3, #4]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681a      	ldr	r2, [r3, #0]
 800f07c:	4b1b      	ldr	r3, [pc, #108]	; (800f0ec <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800f07e:	400b      	ands	r3, r1
 800f080:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2220      	movs	r2, #32
 800f086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2200      	movs	r2, #0
 800f08e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2200      	movs	r2, #0
 800f096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800f09a:	2301      	movs	r3, #1
 800f09c:	e022      	b.n	800f0e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f09e:	f7fc ffed 	bl	800c07c <HAL_GetTick>
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	1ad3      	subs	r3, r2, r3
 800f0a8:	68ba      	ldr	r2, [r7, #8]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d302      	bcc.n	800f0b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d10f      	bne.n	800f0d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0b8:	f043 0220 	orr.w	r2, r3, #32
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2220      	movs	r2, #32
 800f0c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	e007      	b.n	800f0e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	699b      	ldr	r3, [r3, #24]
 800f0da:	f003 0304 	and.w	r3, r3, #4
 800f0de:	2b04      	cmp	r3, #4
 800f0e0:	d193      	bne.n	800f00a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800f0e2:	2300      	movs	r3, #0
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3710      	adds	r7, #16
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	fe00e800 	.word	0xfe00e800

0800f0f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b08a      	sub	sp, #40	; 0x28
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	699b      	ldr	r3, [r3, #24]
 800f108:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800f10a:	2300      	movs	r3, #0
 800f10c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800f112:	69bb      	ldr	r3, [r7, #24]
 800f114:	f003 0310 	and.w	r3, r3, #16
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d075      	beq.n	800f208 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	2210      	movs	r2, #16
 800f122:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800f124:	e056      	b.n	800f1d4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f12c:	d052      	beq.n	800f1d4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800f12e:	f7fc ffa5 	bl	800c07c <HAL_GetTick>
 800f132:	4602      	mov	r2, r0
 800f134:	69fb      	ldr	r3, [r7, #28]
 800f136:	1ad3      	subs	r3, r2, r3
 800f138:	68ba      	ldr	r2, [r7, #8]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d302      	bcc.n	800f144 <I2C_IsErrorOccurred+0x54>
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d147      	bne.n	800f1d4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f14e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f156:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	699b      	ldr	r3, [r3, #24]
 800f15e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f166:	d12e      	bne.n	800f1c6 <I2C_IsErrorOccurred+0xd6>
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f16e:	d02a      	beq.n	800f1c6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800f170:	7cfb      	ldrb	r3, [r7, #19]
 800f172:	2b20      	cmp	r3, #32
 800f174:	d027      	beq.n	800f1c6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	685a      	ldr	r2, [r3, #4]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f184:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800f186:	f7fc ff79 	bl	800c07c <HAL_GetTick>
 800f18a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f18c:	e01b      	b.n	800f1c6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800f18e:	f7fc ff75 	bl	800c07c <HAL_GetTick>
 800f192:	4602      	mov	r2, r0
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	1ad3      	subs	r3, r2, r3
 800f198:	2b19      	cmp	r3, #25
 800f19a:	d914      	bls.n	800f1c6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1a0:	f043 0220 	orr.w	r2, r3, #32
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	2220      	movs	r2, #32
 800f1ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	699b      	ldr	r3, [r3, #24]
 800f1cc:	f003 0320 	and.w	r3, r3, #32
 800f1d0:	2b20      	cmp	r3, #32
 800f1d2:	d1dc      	bne.n	800f18e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	699b      	ldr	r3, [r3, #24]
 800f1da:	f003 0320 	and.w	r3, r3, #32
 800f1de:	2b20      	cmp	r3, #32
 800f1e0:	d003      	beq.n	800f1ea <I2C_IsErrorOccurred+0xfa>
 800f1e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d09d      	beq.n	800f126 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800f1ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d103      	bne.n	800f1fa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	2220      	movs	r2, #32
 800f1f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800f1fa:	6a3b      	ldr	r3, [r7, #32]
 800f1fc:	f043 0304 	orr.w	r3, r3, #4
 800f200:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800f202:	2301      	movs	r3, #1
 800f204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	699b      	ldr	r3, [r3, #24]
 800f20e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800f210:	69bb      	ldr	r3, [r7, #24]
 800f212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00b      	beq.n	800f232 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800f21a:	6a3b      	ldr	r3, [r7, #32]
 800f21c:	f043 0301 	orr.w	r3, r3, #1
 800f220:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f22a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f22c:	2301      	movs	r3, #1
 800f22e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800f232:	69bb      	ldr	r3, [r7, #24]
 800f234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d00b      	beq.n	800f254 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800f23c:	6a3b      	ldr	r3, [r7, #32]
 800f23e:	f043 0308 	orr.w	r3, r3, #8
 800f242:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f24c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f24e:	2301      	movs	r3, #1
 800f250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800f254:	69bb      	ldr	r3, [r7, #24]
 800f256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d00b      	beq.n	800f276 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800f25e:	6a3b      	ldr	r3, [r7, #32]
 800f260:	f043 0302 	orr.w	r3, r3, #2
 800f264:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f26e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f270:	2301      	movs	r3, #1
 800f272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800f276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d01c      	beq.n	800f2b8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f27e:	68f8      	ldr	r0, [r7, #12]
 800f280:	f7ff fddc 	bl	800ee3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	6859      	ldr	r1, [r3, #4]
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	4b0d      	ldr	r3, [pc, #52]	; (800f2c4 <I2C_IsErrorOccurred+0x1d4>)
 800f290:	400b      	ands	r3, r1
 800f292:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f298:	6a3b      	ldr	r3, [r7, #32]
 800f29a:	431a      	orrs	r2, r3
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2220      	movs	r2, #32
 800f2a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800f2b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3728      	adds	r7, #40	; 0x28
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}
 800f2c4:	fe00e800 	.word	0xfe00e800

0800f2c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b087      	sub	sp, #28
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	607b      	str	r3, [r7, #4]
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	817b      	strh	r3, [r7, #10]
 800f2d6:	4613      	mov	r3, r2
 800f2d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f2da:	897b      	ldrh	r3, [r7, #10]
 800f2dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f2e0:	7a7b      	ldrb	r3, [r7, #9]
 800f2e2:	041b      	lsls	r3, r3, #16
 800f2e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f2e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f2ee:	6a3b      	ldr	r3, [r7, #32]
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f2f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	685a      	ldr	r2, [r3, #4]
 800f2fe:	6a3b      	ldr	r3, [r7, #32]
 800f300:	0d5b      	lsrs	r3, r3, #21
 800f302:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800f306:	4b08      	ldr	r3, [pc, #32]	; (800f328 <I2C_TransferConfig+0x60>)
 800f308:	430b      	orrs	r3, r1
 800f30a:	43db      	mvns	r3, r3
 800f30c:	ea02 0103 	and.w	r1, r2, r3
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	697a      	ldr	r2, [r7, #20]
 800f316:	430a      	orrs	r2, r1
 800f318:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800f31a:	bf00      	nop
 800f31c:	371c      	adds	r7, #28
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr
 800f326:	bf00      	nop
 800f328:	03ff63ff 	.word	0x03ff63ff

0800f32c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b083      	sub	sp, #12
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	2b20      	cmp	r3, #32
 800f340:	d138      	bne.n	800f3b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f348:	2b01      	cmp	r3, #1
 800f34a:	d101      	bne.n	800f350 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800f34c:	2302      	movs	r3, #2
 800f34e:	e032      	b.n	800f3b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2201      	movs	r2, #1
 800f354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2224      	movs	r2, #36	; 0x24
 800f35c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f022 0201 	bic.w	r2, r2, #1
 800f36e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	681a      	ldr	r2, [r3, #0]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f37e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	6819      	ldr	r1, [r3, #0]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	683a      	ldr	r2, [r7, #0]
 800f38c:	430a      	orrs	r2, r1
 800f38e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	681a      	ldr	r2, [r3, #0]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f042 0201 	orr.w	r2, r2, #1
 800f39e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2220      	movs	r2, #32
 800f3a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	e000      	b.n	800f3b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f3b4:	2302      	movs	r3, #2
  }
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	370c      	adds	r7, #12
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c0:	4770      	bx	lr

0800f3c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800f3c2:	b480      	push	{r7}
 800f3c4:	b085      	sub	sp, #20
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
 800f3ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	2b20      	cmp	r3, #32
 800f3d6:	d139      	bne.n	800f44c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d101      	bne.n	800f3e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800f3e2:	2302      	movs	r3, #2
 800f3e4:	e033      	b.n	800f44e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2224      	movs	r2, #36	; 0x24
 800f3f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f022 0201 	bic.w	r2, r2, #1
 800f404:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f414:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	021b      	lsls	r3, r3, #8
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	4313      	orrs	r3, r2
 800f41e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	68fa      	ldr	r2, [r7, #12]
 800f426:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f042 0201 	orr.w	r2, r2, #1
 800f436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2220      	movs	r2, #32
 800f43c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f448:	2300      	movs	r3, #0
 800f44a:	e000      	b.n	800f44e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800f44c:	2302      	movs	r3, #2
  }
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3714      	adds	r7, #20
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr

0800f45a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800f45a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f45c:	b08f      	sub	sp, #60	; 0x3c
 800f45e:	af0a      	add	r7, sp, #40	; 0x28
 800f460:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d101      	bne.n	800f46c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800f468:	2301      	movs	r3, #1
 800f46a:	e116      	b.n	800f69a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d106      	bne.n	800f48c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2200      	movs	r2, #0
 800f482:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f00a fbda 	bl	8019c40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2203      	movs	r2, #3
 800f490:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d102      	bne.n	800f4a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f007 fae9 	bl	8016a82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	603b      	str	r3, [r7, #0]
 800f4b6:	687e      	ldr	r6, [r7, #4]
 800f4b8:	466d      	mov	r5, sp
 800f4ba:	f106 0410 	add.w	r4, r6, #16
 800f4be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f4c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f4c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f4c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f4c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f4ca:	e885 0003 	stmia.w	r5, {r0, r1}
 800f4ce:	1d33      	adds	r3, r6, #4
 800f4d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f4d2:	6838      	ldr	r0, [r7, #0]
 800f4d4:	f007 f9fc 	bl	80168d0 <USB_CoreInit>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d005      	beq.n	800f4ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2202      	movs	r2, #2
 800f4e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	e0d7      	b.n	800f69a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	2100      	movs	r1, #0
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f007 fad7 	bl	8016aa4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	73fb      	strb	r3, [r7, #15]
 800f4fa:	e04a      	b.n	800f592 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f4fc:	7bfa      	ldrb	r2, [r7, #15]
 800f4fe:	6879      	ldr	r1, [r7, #4]
 800f500:	4613      	mov	r3, r2
 800f502:	00db      	lsls	r3, r3, #3
 800f504:	4413      	add	r3, r2
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	440b      	add	r3, r1
 800f50a:	333d      	adds	r3, #61	; 0x3d
 800f50c:	2201      	movs	r2, #1
 800f50e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800f510:	7bfa      	ldrb	r2, [r7, #15]
 800f512:	6879      	ldr	r1, [r7, #4]
 800f514:	4613      	mov	r3, r2
 800f516:	00db      	lsls	r3, r3, #3
 800f518:	4413      	add	r3, r2
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	440b      	add	r3, r1
 800f51e:	333c      	adds	r3, #60	; 0x3c
 800f520:	7bfa      	ldrb	r2, [r7, #15]
 800f522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800f524:	7bfa      	ldrb	r2, [r7, #15]
 800f526:	7bfb      	ldrb	r3, [r7, #15]
 800f528:	b298      	uxth	r0, r3
 800f52a:	6879      	ldr	r1, [r7, #4]
 800f52c:	4613      	mov	r3, r2
 800f52e:	00db      	lsls	r3, r3, #3
 800f530:	4413      	add	r3, r2
 800f532:	009b      	lsls	r3, r3, #2
 800f534:	440b      	add	r3, r1
 800f536:	3344      	adds	r3, #68	; 0x44
 800f538:	4602      	mov	r2, r0
 800f53a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f53c:	7bfa      	ldrb	r2, [r7, #15]
 800f53e:	6879      	ldr	r1, [r7, #4]
 800f540:	4613      	mov	r3, r2
 800f542:	00db      	lsls	r3, r3, #3
 800f544:	4413      	add	r3, r2
 800f546:	009b      	lsls	r3, r3, #2
 800f548:	440b      	add	r3, r1
 800f54a:	3340      	adds	r3, #64	; 0x40
 800f54c:	2200      	movs	r2, #0
 800f54e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800f550:	7bfa      	ldrb	r2, [r7, #15]
 800f552:	6879      	ldr	r1, [r7, #4]
 800f554:	4613      	mov	r3, r2
 800f556:	00db      	lsls	r3, r3, #3
 800f558:	4413      	add	r3, r2
 800f55a:	009b      	lsls	r3, r3, #2
 800f55c:	440b      	add	r3, r1
 800f55e:	3348      	adds	r3, #72	; 0x48
 800f560:	2200      	movs	r2, #0
 800f562:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f564:	7bfa      	ldrb	r2, [r7, #15]
 800f566:	6879      	ldr	r1, [r7, #4]
 800f568:	4613      	mov	r3, r2
 800f56a:	00db      	lsls	r3, r3, #3
 800f56c:	4413      	add	r3, r2
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	440b      	add	r3, r1
 800f572:	334c      	adds	r3, #76	; 0x4c
 800f574:	2200      	movs	r2, #0
 800f576:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800f578:	7bfa      	ldrb	r2, [r7, #15]
 800f57a:	6879      	ldr	r1, [r7, #4]
 800f57c:	4613      	mov	r3, r2
 800f57e:	00db      	lsls	r3, r3, #3
 800f580:	4413      	add	r3, r2
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	440b      	add	r3, r1
 800f586:	3354      	adds	r3, #84	; 0x54
 800f588:	2200      	movs	r2, #0
 800f58a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f58c:	7bfb      	ldrb	r3, [r7, #15]
 800f58e:	3301      	adds	r3, #1
 800f590:	73fb      	strb	r3, [r7, #15]
 800f592:	7bfa      	ldrb	r2, [r7, #15]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	685b      	ldr	r3, [r3, #4]
 800f598:	429a      	cmp	r2, r3
 800f59a:	d3af      	bcc.n	800f4fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f59c:	2300      	movs	r3, #0
 800f59e:	73fb      	strb	r3, [r7, #15]
 800f5a0:	e044      	b.n	800f62c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f5a2:	7bfa      	ldrb	r2, [r7, #15]
 800f5a4:	6879      	ldr	r1, [r7, #4]
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	00db      	lsls	r3, r3, #3
 800f5aa:	4413      	add	r3, r2
 800f5ac:	009b      	lsls	r3, r3, #2
 800f5ae:	440b      	add	r3, r1
 800f5b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800f5b8:	7bfa      	ldrb	r2, [r7, #15]
 800f5ba:	6879      	ldr	r1, [r7, #4]
 800f5bc:	4613      	mov	r3, r2
 800f5be:	00db      	lsls	r3, r3, #3
 800f5c0:	4413      	add	r3, r2
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	440b      	add	r3, r1
 800f5c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800f5ca:	7bfa      	ldrb	r2, [r7, #15]
 800f5cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800f5ce:	7bfa      	ldrb	r2, [r7, #15]
 800f5d0:	6879      	ldr	r1, [r7, #4]
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	00db      	lsls	r3, r3, #3
 800f5d6:	4413      	add	r3, r2
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	440b      	add	r3, r1
 800f5dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800f5e4:	7bfa      	ldrb	r2, [r7, #15]
 800f5e6:	6879      	ldr	r1, [r7, #4]
 800f5e8:	4613      	mov	r3, r2
 800f5ea:	00db      	lsls	r3, r3, #3
 800f5ec:	4413      	add	r3, r2
 800f5ee:	009b      	lsls	r3, r3, #2
 800f5f0:	440b      	add	r3, r1
 800f5f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f5fa:	7bfa      	ldrb	r2, [r7, #15]
 800f5fc:	6879      	ldr	r1, [r7, #4]
 800f5fe:	4613      	mov	r3, r2
 800f600:	00db      	lsls	r3, r3, #3
 800f602:	4413      	add	r3, r2
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	440b      	add	r3, r1
 800f608:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f60c:	2200      	movs	r2, #0
 800f60e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f610:	7bfa      	ldrb	r2, [r7, #15]
 800f612:	6879      	ldr	r1, [r7, #4]
 800f614:	4613      	mov	r3, r2
 800f616:	00db      	lsls	r3, r3, #3
 800f618:	4413      	add	r3, r2
 800f61a:	009b      	lsls	r3, r3, #2
 800f61c:	440b      	add	r3, r1
 800f61e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800f622:	2200      	movs	r2, #0
 800f624:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f626:	7bfb      	ldrb	r3, [r7, #15]
 800f628:	3301      	adds	r3, #1
 800f62a:	73fb      	strb	r3, [r7, #15]
 800f62c:	7bfa      	ldrb	r2, [r7, #15]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	429a      	cmp	r2, r3
 800f634:	d3b5      	bcc.n	800f5a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	603b      	str	r3, [r7, #0]
 800f63c:	687e      	ldr	r6, [r7, #4]
 800f63e:	466d      	mov	r5, sp
 800f640:	f106 0410 	add.w	r4, r6, #16
 800f644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f64a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f64c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f650:	e885 0003 	stmia.w	r5, {r0, r1}
 800f654:	1d33      	adds	r3, r6, #4
 800f656:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f658:	6838      	ldr	r0, [r7, #0]
 800f65a:	f007 fa6f 	bl	8016b3c <USB_DevInit>
 800f65e:	4603      	mov	r3, r0
 800f660:	2b00      	cmp	r3, #0
 800f662:	d005      	beq.n	800f670 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2202      	movs	r2, #2
 800f668:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800f66c:	2301      	movs	r3, #1
 800f66e:	e014      	b.n	800f69a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2201      	movs	r2, #1
 800f67c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f684:	2b01      	cmp	r3, #1
 800f686:	d102      	bne.n	800f68e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f001 f881 	bl	8010790 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	4618      	mov	r0, r3
 800f694:	f008 faf7 	bl	8017c86 <USB_DevDisconnect>

  return HAL_OK;
 800f698:	2300      	movs	r3, #0
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3714      	adds	r7, #20
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f6a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800f6a2:	b580      	push	{r7, lr}
 800f6a4:	b084      	sub	sp, #16
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f6b6:	2b01      	cmp	r3, #1
 800f6b8:	d101      	bne.n	800f6be <HAL_PCD_Start+0x1c>
 800f6ba:	2302      	movs	r3, #2
 800f6bc:	e01c      	b.n	800f6f8 <HAL_PCD_Start+0x56>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6ca:	2b01      	cmp	r3, #1
 800f6cc:	d105      	bne.n	800f6da <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f007 f9be 	bl	8016a60 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f008 faab 	bl	8017c44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f6f6:	2300      	movs	r3, #0
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3710      	adds	r7, #16
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800f700:	b590      	push	{r4, r7, lr}
 800f702:	b08d      	sub	sp, #52	; 0x34
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f70e:	6a3b      	ldr	r3, [r7, #32]
 800f710:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	4618      	mov	r0, r3
 800f718:	f008 fb69 	bl	8017dee <USB_GetMode>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f040 847e 	bne.w	8010020 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	4618      	mov	r0, r3
 800f72a:	f008 facd 	bl	8017cc8 <USB_ReadInterrupts>
 800f72e:	4603      	mov	r3, r0
 800f730:	2b00      	cmp	r3, #0
 800f732:	f000 8474 	beq.w	801001e <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f73c:	689b      	ldr	r3, [r3, #8]
 800f73e:	0a1b      	lsrs	r3, r3, #8
 800f740:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	4618      	mov	r0, r3
 800f750:	f008 faba 	bl	8017cc8 <USB_ReadInterrupts>
 800f754:	4603      	mov	r3, r0
 800f756:	f003 0302 	and.w	r3, r3, #2
 800f75a:	2b02      	cmp	r3, #2
 800f75c:	d107      	bne.n	800f76e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	695a      	ldr	r2, [r3, #20]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f002 0202 	and.w	r2, r2, #2
 800f76c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	4618      	mov	r0, r3
 800f774:	f008 faa8 	bl	8017cc8 <USB_ReadInterrupts>
 800f778:	4603      	mov	r3, r0
 800f77a:	f003 0310 	and.w	r3, r3, #16
 800f77e:	2b10      	cmp	r3, #16
 800f780:	d161      	bne.n	800f846 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	699a      	ldr	r2, [r3, #24]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f022 0210 	bic.w	r2, r2, #16
 800f790:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800f792:	6a3b      	ldr	r3, [r7, #32]
 800f794:	6a1b      	ldr	r3, [r3, #32]
 800f796:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800f798:	69bb      	ldr	r3, [r7, #24]
 800f79a:	f003 020f 	and.w	r2, r3, #15
 800f79e:	4613      	mov	r3, r2
 800f7a0:	00db      	lsls	r3, r3, #3
 800f7a2:	4413      	add	r3, r2
 800f7a4:	009b      	lsls	r3, r3, #2
 800f7a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f7aa:	687a      	ldr	r2, [r7, #4]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	3304      	adds	r3, #4
 800f7b0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800f7b2:	69bb      	ldr	r3, [r7, #24]
 800f7b4:	0c5b      	lsrs	r3, r3, #17
 800f7b6:	f003 030f 	and.w	r3, r3, #15
 800f7ba:	2b02      	cmp	r3, #2
 800f7bc:	d124      	bne.n	800f808 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800f7be:	69ba      	ldr	r2, [r7, #24]
 800f7c0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800f7c4:	4013      	ands	r3, r2
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d035      	beq.n	800f836 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800f7ce:	69bb      	ldr	r3, [r7, #24]
 800f7d0:	091b      	lsrs	r3, r3, #4
 800f7d2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f7d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	461a      	mov	r2, r3
 800f7dc:	6a38      	ldr	r0, [r7, #32]
 800f7de:	f008 f8df 	bl	80179a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	691a      	ldr	r2, [r3, #16]
 800f7e6:	69bb      	ldr	r3, [r7, #24]
 800f7e8:	091b      	lsrs	r3, r3, #4
 800f7ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f7ee:	441a      	add	r2, r3
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	6a1a      	ldr	r2, [r3, #32]
 800f7f8:	69bb      	ldr	r3, [r7, #24]
 800f7fa:	091b      	lsrs	r3, r3, #4
 800f7fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f800:	441a      	add	r2, r3
 800f802:	697b      	ldr	r3, [r7, #20]
 800f804:	621a      	str	r2, [r3, #32]
 800f806:	e016      	b.n	800f836 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800f808:	69bb      	ldr	r3, [r7, #24]
 800f80a:	0c5b      	lsrs	r3, r3, #17
 800f80c:	f003 030f 	and.w	r3, r3, #15
 800f810:	2b06      	cmp	r3, #6
 800f812:	d110      	bne.n	800f836 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f81a:	2208      	movs	r2, #8
 800f81c:	4619      	mov	r1, r3
 800f81e:	6a38      	ldr	r0, [r7, #32]
 800f820:	f008 f8be 	bl	80179a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	6a1a      	ldr	r2, [r3, #32]
 800f828:	69bb      	ldr	r3, [r7, #24]
 800f82a:	091b      	lsrs	r3, r3, #4
 800f82c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f830:	441a      	add	r2, r3
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	699a      	ldr	r2, [r3, #24]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f042 0210 	orr.w	r2, r2, #16
 800f844:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	4618      	mov	r0, r3
 800f84c:	f008 fa3c 	bl	8017cc8 <USB_ReadInterrupts>
 800f850:	4603      	mov	r3, r0
 800f852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f856:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f85a:	f040 80a7 	bne.w	800f9ac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800f85e:	2300      	movs	r3, #0
 800f860:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	4618      	mov	r0, r3
 800f868:	f008 fa41 	bl	8017cee <USB_ReadDevAllOutEpInterrupt>
 800f86c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800f86e:	e099      	b.n	800f9a4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800f870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f872:	f003 0301 	and.w	r3, r3, #1
 800f876:	2b00      	cmp	r3, #0
 800f878:	f000 808e 	beq.w	800f998 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f882:	b2d2      	uxtb	r2, r2
 800f884:	4611      	mov	r1, r2
 800f886:	4618      	mov	r0, r3
 800f888:	f008 fa65 	bl	8017d56 <USB_ReadDevOutEPInterrupt>
 800f88c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	f003 0301 	and.w	r3, r3, #1
 800f894:	2b00      	cmp	r3, #0
 800f896:	d00c      	beq.n	800f8b2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800f898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89a:	015a      	lsls	r2, r3, #5
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	4413      	add	r3, r2
 800f8a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800f8aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f000 fe95 	bl	80105dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	f003 0308 	and.w	r3, r3, #8
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d00c      	beq.n	800f8d6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800f8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8be:	015a      	lsls	r2, r3, #5
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	4413      	add	r3, r2
 800f8c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8c8:	461a      	mov	r2, r3
 800f8ca:	2308      	movs	r3, #8
 800f8cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800f8ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f000 fed1 	bl	8010678 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	f003 0310 	and.w	r3, r3, #16
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d008      	beq.n	800f8f2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800f8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e2:	015a      	lsls	r2, r3, #5
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	2310      	movs	r3, #16
 800f8f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	f003 0302 	and.w	r3, r3, #2
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d030      	beq.n	800f95e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800f8fc:	6a3b      	ldr	r3, [r7, #32]
 800f8fe:	695b      	ldr	r3, [r3, #20]
 800f900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f904:	2b80      	cmp	r3, #128	; 0x80
 800f906:	d109      	bne.n	800f91c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800f908:	69fb      	ldr	r3, [r7, #28]
 800f90a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f90e:	685b      	ldr	r3, [r3, #4]
 800f910:	69fa      	ldr	r2, [r7, #28]
 800f912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f91a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800f91c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f91e:	4613      	mov	r3, r2
 800f920:	00db      	lsls	r3, r3, #3
 800f922:	4413      	add	r3, r2
 800f924:	009b      	lsls	r3, r3, #2
 800f926:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	4413      	add	r3, r2
 800f92e:	3304      	adds	r3, #4
 800f930:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	78db      	ldrb	r3, [r3, #3]
 800f936:	2b01      	cmp	r3, #1
 800f938:	d108      	bne.n	800f94c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	2200      	movs	r2, #0
 800f93e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800f940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f942:	b2db      	uxtb	r3, r3
 800f944:	4619      	mov	r1, r3
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f00a faa2 	bl	8019e90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800f94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f94e:	015a      	lsls	r2, r3, #5
 800f950:	69fb      	ldr	r3, [r7, #28]
 800f952:	4413      	add	r3, r2
 800f954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f958:	461a      	mov	r2, r3
 800f95a:	2302      	movs	r3, #2
 800f95c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	f003 0320 	and.w	r3, r3, #32
 800f964:	2b00      	cmp	r3, #0
 800f966:	d008      	beq.n	800f97a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96a:	015a      	lsls	r2, r3, #5
 800f96c:	69fb      	ldr	r3, [r7, #28]
 800f96e:	4413      	add	r3, r2
 800f970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f974:	461a      	mov	r2, r3
 800f976:	2320      	movs	r3, #32
 800f978:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f980:	2b00      	cmp	r3, #0
 800f982:	d009      	beq.n	800f998 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800f984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f986:	015a      	lsls	r2, r3, #5
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	4413      	add	r3, r2
 800f98c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f990:	461a      	mov	r2, r3
 800f992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f996:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800f998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99a:	3301      	adds	r3, #1
 800f99c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a0:	085b      	lsrs	r3, r3, #1
 800f9a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	f47f af62 	bne.w	800f870 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f008 f989 	bl	8017cc8 <USB_ReadInterrupts>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f9bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f9c0:	f040 80a4 	bne.w	800fb0c <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f008 f9aa 	bl	8017d22 <USB_ReadDevAllInEpInterrupt>
 800f9ce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800f9d4:	e096      	b.n	800fb04 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800f9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d8:	f003 0301 	and.w	r3, r3, #1
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	f000 808b 	beq.w	800faf8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9e8:	b2d2      	uxtb	r2, r2
 800f9ea:	4611      	mov	r1, r2
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f008 f9d0 	bl	8017d92 <USB_ReadDevInEPInterrupt>
 800f9f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	f003 0301 	and.w	r3, r3, #1
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d020      	beq.n	800fa40 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa00:	f003 030f 	and.w	r3, r3, #15
 800fa04:	2201      	movs	r2, #1
 800fa06:	fa02 f303 	lsl.w	r3, r2, r3
 800fa0a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	43db      	mvns	r3, r3
 800fa18:	69f9      	ldr	r1, [r7, #28]
 800fa1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa1e:	4013      	ands	r3, r2
 800fa20:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800fa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa24:	015a      	lsls	r2, r3, #5
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	4413      	add	r3, r2
 800fa2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa2e:	461a      	mov	r2, r3
 800fa30:	2301      	movs	r3, #1
 800fa32:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800fa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	4619      	mov	r1, r3
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f00a f993 	bl	8019d66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	f003 0308 	and.w	r3, r3, #8
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d008      	beq.n	800fa5c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800fa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4c:	015a      	lsls	r2, r3, #5
 800fa4e:	69fb      	ldr	r3, [r7, #28]
 800fa50:	4413      	add	r3, r2
 800fa52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa56:	461a      	mov	r2, r3
 800fa58:	2308      	movs	r3, #8
 800fa5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	f003 0310 	and.w	r3, r3, #16
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d008      	beq.n	800fa78 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800fa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa68:	015a      	lsls	r2, r3, #5
 800fa6a:	69fb      	ldr	r3, [r7, #28]
 800fa6c:	4413      	add	r3, r2
 800fa6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa72:	461a      	mov	r2, r3
 800fa74:	2310      	movs	r3, #16
 800fa76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d008      	beq.n	800fa94 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800fa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa84:	015a      	lsls	r2, r3, #5
 800fa86:	69fb      	ldr	r3, [r7, #28]
 800fa88:	4413      	add	r3, r2
 800fa8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa8e:	461a      	mov	r2, r3
 800fa90:	2340      	movs	r3, #64	; 0x40
 800fa92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	f003 0302 	and.w	r3, r3, #2
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d023      	beq.n	800fae6 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800fa9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800faa0:	6a38      	ldr	r0, [r7, #32]
 800faa2:	f007 f997 	bl	8016dd4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800faa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faa8:	4613      	mov	r3, r2
 800faaa:	00db      	lsls	r3, r3, #3
 800faac:	4413      	add	r3, r2
 800faae:	009b      	lsls	r3, r3, #2
 800fab0:	3338      	adds	r3, #56	; 0x38
 800fab2:	687a      	ldr	r2, [r7, #4]
 800fab4:	4413      	add	r3, r2
 800fab6:	3304      	adds	r3, #4
 800fab8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	78db      	ldrb	r3, [r3, #3]
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	d108      	bne.n	800fad4 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	2200      	movs	r2, #0
 800fac6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800fac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faca:	b2db      	uxtb	r3, r3
 800facc:	4619      	mov	r1, r3
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f00a f9f0 	bl	8019eb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800fad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad6:	015a      	lsls	r2, r3, #5
 800fad8:	69fb      	ldr	r3, [r7, #28]
 800fada:	4413      	add	r3, r2
 800fadc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fae0:	461a      	mov	r2, r3
 800fae2:	2302      	movs	r3, #2
 800fae4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faec:	2b00      	cmp	r3, #0
 800faee:	d003      	beq.n	800faf8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800faf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f000 fcea 	bl	80104cc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800faf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafa:	3301      	adds	r3, #1
 800fafc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800fafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb00:	085b      	lsrs	r3, r3, #1
 800fb02:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800fb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	f47f af65 	bne.w	800f9d6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	4618      	mov	r0, r3
 800fb12:	f008 f8d9 	bl	8017cc8 <USB_ReadInterrupts>
 800fb16:	4603      	mov	r3, r0
 800fb18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fb1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb20:	d122      	bne.n	800fb68 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800fb22:	69fb      	ldr	r3, [r7, #28]
 800fb24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb28:	685b      	ldr	r3, [r3, #4]
 800fb2a:	69fa      	ldr	r2, [r7, #28]
 800fb2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb30:	f023 0301 	bic.w	r3, r3, #1
 800fb34:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	d108      	bne.n	800fb52 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2200      	movs	r2, #0
 800fb44:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800fb48:	2100      	movs	r1, #0
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f00a fc24 	bl	801a398 <HAL_PCDEx_LPM_Callback>
 800fb50:	e002      	b.n	800fb58 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f00a f974 	bl	8019e40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	695a      	ldr	r2, [r3, #20]
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800fb66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f008 f8ab 	bl	8017cc8 <USB_ReadInterrupts>
 800fb72:	4603      	mov	r3, r0
 800fb74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb7c:	d112      	bne.n	800fba4 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb84:	689b      	ldr	r3, [r3, #8]
 800fb86:	f003 0301 	and.w	r3, r3, #1
 800fb8a:	2b01      	cmp	r3, #1
 800fb8c:	d102      	bne.n	800fb94 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f00a f930 	bl	8019df4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	695a      	ldr	r2, [r3, #20]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800fba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f008 f88d 	bl	8017cc8 <USB_ReadInterrupts>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fbb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fbb8:	d121      	bne.n	800fbfe <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	695a      	ldr	r2, [r3, #20]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800fbc8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d111      	bne.n	800fbf8 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbe2:	089b      	lsrs	r3, r3, #2
 800fbe4:	f003 020f 	and.w	r2, r3, #15
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800fbee:	2101      	movs	r1, #1
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f00a fbd1 	bl	801a398 <HAL_PCDEx_LPM_Callback>
 800fbf6:	e002      	b.n	800fbfe <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f00a f8fb 	bl	8019df4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	4618      	mov	r0, r3
 800fc04:	f008 f860 	bl	8017cc8 <USB_ReadInterrupts>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fc0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc12:	f040 80b5 	bne.w	800fd80 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc1c:	685b      	ldr	r3, [r3, #4]
 800fc1e:	69fa      	ldr	r2, [r7, #28]
 800fc20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc24:	f023 0301 	bic.w	r3, r3, #1
 800fc28:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2110      	movs	r1, #16
 800fc30:	4618      	mov	r0, r3
 800fc32:	f007 f8cf 	bl	8016dd4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fc36:	2300      	movs	r3, #0
 800fc38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc3a:	e046      	b.n	800fcca <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800fc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3e:	015a      	lsls	r2, r3, #5
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	4413      	add	r3, r2
 800fc44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc48:	461a      	mov	r2, r3
 800fc4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fc4e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc52:	015a      	lsls	r2, r3, #5
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	4413      	add	r3, r2
 800fc58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc60:	0151      	lsls	r1, r2, #5
 800fc62:	69fa      	ldr	r2, [r7, #28]
 800fc64:	440a      	add	r2, r1
 800fc66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fc6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800fc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc72:	015a      	lsls	r2, r3, #5
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	4413      	add	r3, r2
 800fc78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fc82:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc86:	015a      	lsls	r2, r3, #5
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	4413      	add	r3, r2
 800fc8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc94:	0151      	lsls	r1, r2, #5
 800fc96:	69fa      	ldr	r2, [r7, #28]
 800fc98:	440a      	add	r2, r1
 800fc9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fca2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca6:	015a      	lsls	r2, r3, #5
 800fca8:	69fb      	ldr	r3, [r7, #28]
 800fcaa:	4413      	add	r3, r2
 800fcac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcb4:	0151      	lsls	r1, r2, #5
 800fcb6:	69fa      	ldr	r2, [r7, #28]
 800fcb8:	440a      	add	r2, r1
 800fcba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fcc2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d3b3      	bcc.n	800fc3c <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcda:	69db      	ldr	r3, [r3, #28]
 800fcdc:	69fa      	ldr	r2, [r7, #28]
 800fcde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fce2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800fce6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d016      	beq.n	800fd1e <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcfa:	69fa      	ldr	r2, [r7, #28]
 800fcfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd00:	f043 030b 	orr.w	r3, r3, #11
 800fd04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd10:	69fa      	ldr	r2, [r7, #28]
 800fd12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd16:	f043 030b 	orr.w	r3, r3, #11
 800fd1a:	6453      	str	r3, [r2, #68]	; 0x44
 800fd1c:	e015      	b.n	800fd4a <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800fd1e:	69fb      	ldr	r3, [r7, #28]
 800fd20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd24:	695b      	ldr	r3, [r3, #20]
 800fd26:	69fa      	ldr	r2, [r7, #28]
 800fd28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fd30:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800fd34:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800fd36:	69fb      	ldr	r3, [r7, #28]
 800fd38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd3c:	691b      	ldr	r3, [r3, #16]
 800fd3e:	69fa      	ldr	r2, [r7, #28]
 800fd40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd44:	f043 030b 	orr.w	r3, r3, #11
 800fd48:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800fd4a:	69fb      	ldr	r3, [r7, #28]
 800fd4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	69fa      	ldr	r2, [r7, #28]
 800fd54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd58:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fd5c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681a      	ldr	r2, [r3, #0]
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fd68:	4619      	mov	r1, r3
 800fd6a:	4610      	mov	r0, r2
 800fd6c:	f008 f870 	bl	8017e50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	695a      	ldr	r2, [r3, #20]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800fd7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	4618      	mov	r0, r3
 800fd86:	f007 ff9f 	bl	8017cc8 <USB_ReadInterrupts>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fd90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fd94:	d124      	bne.n	800fde0 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f008 f835 	bl	8017e0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4618      	mov	r0, r3
 800fda6:	f007 f892 	bl	8016ece <USB_GetDevSpeed>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	461a      	mov	r2, r3
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681c      	ldr	r4, [r3, #0]
 800fdb6:	f001 fc87 	bl	80116c8 <HAL_RCC_GetHCLKFreq>
 800fdba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800fdc0:	b2db      	uxtb	r3, r3
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	f006 fdaf 	bl	8016928 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f009 fff3 	bl	8019db6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	695a      	ldr	r2, [r3, #20]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800fdde:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4618      	mov	r0, r3
 800fde6:	f007 ff6f 	bl	8017cc8 <USB_ReadInterrupts>
 800fdea:	4603      	mov	r3, r0
 800fdec:	f003 0308 	and.w	r3, r3, #8
 800fdf0:	2b08      	cmp	r3, #8
 800fdf2:	d10a      	bne.n	800fe0a <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f009 ffd0 	bl	8019d9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	695a      	ldr	r2, [r3, #20]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	f002 0208 	and.w	r2, r2, #8
 800fe08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f007 ff5a 	bl	8017cc8 <USB_ReadInterrupts>
 800fe14:	4603      	mov	r3, r0
 800fe16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe1a:	2b80      	cmp	r3, #128	; 0x80
 800fe1c:	d122      	bne.n	800fe64 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800fe1e:	6a3b      	ldr	r3, [r7, #32]
 800fe20:	699b      	ldr	r3, [r3, #24]
 800fe22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fe26:	6a3b      	ldr	r3, [r7, #32]
 800fe28:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	627b      	str	r3, [r7, #36]	; 0x24
 800fe2e:	e014      	b.n	800fe5a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800fe30:	6879      	ldr	r1, [r7, #4]
 800fe32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe34:	4613      	mov	r3, r2
 800fe36:	00db      	lsls	r3, r3, #3
 800fe38:	4413      	add	r3, r2
 800fe3a:	009b      	lsls	r3, r3, #2
 800fe3c:	440b      	add	r3, r1
 800fe3e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	d105      	bne.n	800fe54 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800fe48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f000 fb0b 	bl	801046a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fe54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe56:	3301      	adds	r3, #1
 800fe58:	627b      	str	r3, [r7, #36]	; 0x24
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	685b      	ldr	r3, [r3, #4]
 800fe5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d3e5      	bcc.n	800fe30 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f007 ff2d 	bl	8017cc8 <USB_ReadInterrupts>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fe74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fe78:	d13b      	bne.n	800fef2 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	627b      	str	r3, [r7, #36]	; 0x24
 800fe7e:	e02b      	b.n	800fed8 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800fe80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe82:	015a      	lsls	r2, r3, #5
 800fe84:	69fb      	ldr	r3, [r7, #28]
 800fe86:	4413      	add	r3, r2
 800fe88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800fe90:	6879      	ldr	r1, [r7, #4]
 800fe92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe94:	4613      	mov	r3, r2
 800fe96:	00db      	lsls	r3, r3, #3
 800fe98:	4413      	add	r3, r2
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	440b      	add	r3, r1
 800fe9e:	3340      	adds	r3, #64	; 0x40
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	2b01      	cmp	r3, #1
 800fea4:	d115      	bne.n	800fed2 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800fea6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	da12      	bge.n	800fed2 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800feac:	6879      	ldr	r1, [r7, #4]
 800feae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feb0:	4613      	mov	r3, r2
 800feb2:	00db      	lsls	r3, r3, #3
 800feb4:	4413      	add	r3, r2
 800feb6:	009b      	lsls	r3, r3, #2
 800feb8:	440b      	add	r3, r1
 800feba:	333f      	adds	r3, #63	; 0x3f
 800febc:	2201      	movs	r2, #1
 800febe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800fec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec2:	b2db      	uxtb	r3, r3
 800fec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	4619      	mov	r1, r3
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 facc 	bl	801046a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed4:	3301      	adds	r3, #1
 800fed6:	627b      	str	r3, [r7, #36]	; 0x24
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	685b      	ldr	r3, [r3, #4]
 800fedc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fede:	429a      	cmp	r2, r3
 800fee0:	d3ce      	bcc.n	800fe80 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	695a      	ldr	r2, [r3, #20]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800fef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	4618      	mov	r0, r3
 800fef8:	f007 fee6 	bl	8017cc8 <USB_ReadInterrupts>
 800fefc:	4603      	mov	r3, r0
 800fefe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ff02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ff06:	d155      	bne.n	800ffb4 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ff08:	2301      	movs	r3, #1
 800ff0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ff0c:	e045      	b.n	800ff9a <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ff0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff10:	015a      	lsls	r2, r3, #5
 800ff12:	69fb      	ldr	r3, [r7, #28]
 800ff14:	4413      	add	r3, r2
 800ff16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ff1e:	6879      	ldr	r1, [r7, #4]
 800ff20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff22:	4613      	mov	r3, r2
 800ff24:	00db      	lsls	r3, r3, #3
 800ff26:	4413      	add	r3, r2
 800ff28:	009b      	lsls	r3, r3, #2
 800ff2a:	440b      	add	r3, r1
 800ff2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	d12e      	bne.n	800ff94 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ff36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	da2b      	bge.n	800ff94 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800ff3c:	69bb      	ldr	r3, [r7, #24]
 800ff3e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800ff48:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d121      	bne.n	800ff94 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ff50:	6879      	ldr	r1, [r7, #4]
 800ff52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff54:	4613      	mov	r3, r2
 800ff56:	00db      	lsls	r3, r3, #3
 800ff58:	4413      	add	r3, r2
 800ff5a:	009b      	lsls	r3, r3, #2
 800ff5c:	440b      	add	r3, r1
 800ff5e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800ff62:	2201      	movs	r2, #1
 800ff64:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800ff66:	6a3b      	ldr	r3, [r7, #32]
 800ff68:	699b      	ldr	r3, [r3, #24]
 800ff6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ff6e:	6a3b      	ldr	r3, [r7, #32]
 800ff70:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800ff72:	6a3b      	ldr	r3, [r7, #32]
 800ff74:	695b      	ldr	r3, [r3, #20]
 800ff76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d10a      	bne.n	800ff94 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ff7e:	69fb      	ldr	r3, [r7, #28]
 800ff80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	69fa      	ldr	r2, [r7, #28]
 800ff88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ff90:	6053      	str	r3, [r2, #4]
            break;
 800ff92:	e007      	b.n	800ffa4 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ff94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff96:	3301      	adds	r3, #1
 800ff98:	627b      	str	r3, [r7, #36]	; 0x24
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d3b4      	bcc.n	800ff0e <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	695a      	ldr	r2, [r3, #20]
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ffb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f007 fe85 	bl	8017cc8 <USB_ReadInterrupts>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ffc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffc8:	d10a      	bne.n	800ffe0 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f009 ff84 	bl	8019ed8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	695a      	ldr	r2, [r3, #20]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800ffde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f007 fe6f 	bl	8017cc8 <USB_ReadInterrupts>
 800ffea:	4603      	mov	r3, r0
 800ffec:	f003 0304 	and.w	r3, r3, #4
 800fff0:	2b04      	cmp	r3, #4
 800fff2:	d115      	bne.n	8010020 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	685b      	ldr	r3, [r3, #4]
 800fffa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800fffc:	69bb      	ldr	r3, [r7, #24]
 800fffe:	f003 0304 	and.w	r3, r3, #4
 8010002:	2b00      	cmp	r3, #0
 8010004:	d002      	beq.n	801000c <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f009 ff74 	bl	8019ef4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	6859      	ldr	r1, [r3, #4]
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	69ba      	ldr	r2, [r7, #24]
 8010018:	430a      	orrs	r2, r1
 801001a:	605a      	str	r2, [r3, #4]
 801001c:	e000      	b.n	8010020 <HAL_PCD_IRQHandler+0x920>
      return;
 801001e:	bf00      	nop
    }
  }
}
 8010020:	3734      	adds	r7, #52	; 0x34
 8010022:	46bd      	mov	sp, r7
 8010024:	bd90      	pop	{r4, r7, pc}

08010026 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8010026:	b580      	push	{r7, lr}
 8010028:	b082      	sub	sp, #8
 801002a:	af00      	add	r7, sp, #0
 801002c:	6078      	str	r0, [r7, #4]
 801002e:	460b      	mov	r3, r1
 8010030:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8010038:	2b01      	cmp	r3, #1
 801003a:	d101      	bne.n	8010040 <HAL_PCD_SetAddress+0x1a>
 801003c:	2302      	movs	r3, #2
 801003e:	e013      	b.n	8010068 <HAL_PCD_SetAddress+0x42>
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2201      	movs	r2, #1
 8010044:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	78fa      	ldrb	r2, [r7, #3]
 801004c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	78fa      	ldrb	r2, [r7, #3]
 8010056:	4611      	mov	r1, r2
 8010058:	4618      	mov	r0, r3
 801005a:	f007 fdcd 	bl	8017bf8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2200      	movs	r2, #0
 8010062:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8010066:	2300      	movs	r3, #0
}
 8010068:	4618      	mov	r0, r3
 801006a:	3708      	adds	r7, #8
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}

08010070 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	4608      	mov	r0, r1
 801007a:	4611      	mov	r1, r2
 801007c:	461a      	mov	r2, r3
 801007e:	4603      	mov	r3, r0
 8010080:	70fb      	strb	r3, [r7, #3]
 8010082:	460b      	mov	r3, r1
 8010084:	803b      	strh	r3, [r7, #0]
 8010086:	4613      	mov	r3, r2
 8010088:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801008a:	2300      	movs	r3, #0
 801008c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801008e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010092:	2b00      	cmp	r3, #0
 8010094:	da0f      	bge.n	80100b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010096:	78fb      	ldrb	r3, [r7, #3]
 8010098:	f003 020f 	and.w	r2, r3, #15
 801009c:	4613      	mov	r3, r2
 801009e:	00db      	lsls	r3, r3, #3
 80100a0:	4413      	add	r3, r2
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	3338      	adds	r3, #56	; 0x38
 80100a6:	687a      	ldr	r2, [r7, #4]
 80100a8:	4413      	add	r3, r2
 80100aa:	3304      	adds	r3, #4
 80100ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	2201      	movs	r2, #1
 80100b2:	705a      	strb	r2, [r3, #1]
 80100b4:	e00f      	b.n	80100d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80100b6:	78fb      	ldrb	r3, [r7, #3]
 80100b8:	f003 020f 	and.w	r2, r3, #15
 80100bc:	4613      	mov	r3, r2
 80100be:	00db      	lsls	r3, r3, #3
 80100c0:	4413      	add	r3, r2
 80100c2:	009b      	lsls	r3, r3, #2
 80100c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80100c8:	687a      	ldr	r2, [r7, #4]
 80100ca:	4413      	add	r3, r2
 80100cc:	3304      	adds	r3, #4
 80100ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2200      	movs	r2, #0
 80100d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80100d6:	78fb      	ldrb	r3, [r7, #3]
 80100d8:	f003 030f 	and.w	r3, r3, #15
 80100dc:	b2da      	uxtb	r2, r3
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80100e2:	883a      	ldrh	r2, [r7, #0]
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	78ba      	ldrb	r2, [r7, #2]
 80100ec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	785b      	ldrb	r3, [r3, #1]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d004      	beq.n	8010100 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8010100:	78bb      	ldrb	r3, [r7, #2]
 8010102:	2b02      	cmp	r3, #2
 8010104:	d102      	bne.n	801010c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2200      	movs	r2, #0
 801010a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8010112:	2b01      	cmp	r3, #1
 8010114:	d101      	bne.n	801011a <HAL_PCD_EP_Open+0xaa>
 8010116:	2302      	movs	r3, #2
 8010118:	e00e      	b.n	8010138 <HAL_PCD_EP_Open+0xc8>
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2201      	movs	r2, #1
 801011e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	68f9      	ldr	r1, [r7, #12]
 8010128:	4618      	mov	r0, r3
 801012a:	f006 feef 	bl	8016f0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2200      	movs	r2, #0
 8010132:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8010136:	7afb      	ldrb	r3, [r7, #11]
}
 8010138:	4618      	mov	r0, r3
 801013a:	3710      	adds	r7, #16
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b084      	sub	sp, #16
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	460b      	mov	r3, r1
 801014a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801014c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010150:	2b00      	cmp	r3, #0
 8010152:	da0f      	bge.n	8010174 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010154:	78fb      	ldrb	r3, [r7, #3]
 8010156:	f003 020f 	and.w	r2, r3, #15
 801015a:	4613      	mov	r3, r2
 801015c:	00db      	lsls	r3, r3, #3
 801015e:	4413      	add	r3, r2
 8010160:	009b      	lsls	r3, r3, #2
 8010162:	3338      	adds	r3, #56	; 0x38
 8010164:	687a      	ldr	r2, [r7, #4]
 8010166:	4413      	add	r3, r2
 8010168:	3304      	adds	r3, #4
 801016a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	2201      	movs	r2, #1
 8010170:	705a      	strb	r2, [r3, #1]
 8010172:	e00f      	b.n	8010194 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010174:	78fb      	ldrb	r3, [r7, #3]
 8010176:	f003 020f 	and.w	r2, r3, #15
 801017a:	4613      	mov	r3, r2
 801017c:	00db      	lsls	r3, r3, #3
 801017e:	4413      	add	r3, r2
 8010180:	009b      	lsls	r3, r3, #2
 8010182:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010186:	687a      	ldr	r2, [r7, #4]
 8010188:	4413      	add	r3, r2
 801018a:	3304      	adds	r3, #4
 801018c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	2200      	movs	r2, #0
 8010192:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8010194:	78fb      	ldrb	r3, [r7, #3]
 8010196:	f003 030f 	and.w	r3, r3, #15
 801019a:	b2da      	uxtb	r2, r3
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80101a6:	2b01      	cmp	r3, #1
 80101a8:	d101      	bne.n	80101ae <HAL_PCD_EP_Close+0x6e>
 80101aa:	2302      	movs	r3, #2
 80101ac:	e00e      	b.n	80101cc <HAL_PCD_EP_Close+0x8c>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	2201      	movs	r2, #1
 80101b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	68f9      	ldr	r1, [r7, #12]
 80101bc:	4618      	mov	r0, r3
 80101be:	f006 ff2d 	bl	801701c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2200      	movs	r2, #0
 80101c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3710      	adds	r7, #16
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b086      	sub	sp, #24
 80101d8:	af00      	add	r7, sp, #0
 80101da:	60f8      	str	r0, [r7, #12]
 80101dc:	607a      	str	r2, [r7, #4]
 80101de:	603b      	str	r3, [r7, #0]
 80101e0:	460b      	mov	r3, r1
 80101e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80101e4:	7afb      	ldrb	r3, [r7, #11]
 80101e6:	f003 020f 	and.w	r2, r3, #15
 80101ea:	4613      	mov	r3, r2
 80101ec:	00db      	lsls	r3, r3, #3
 80101ee:	4413      	add	r3, r2
 80101f0:	009b      	lsls	r3, r3, #2
 80101f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80101f6:	68fa      	ldr	r2, [r7, #12]
 80101f8:	4413      	add	r3, r2
 80101fa:	3304      	adds	r3, #4
 80101fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	683a      	ldr	r2, [r7, #0]
 8010208:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	2200      	movs	r2, #0
 801020e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	2200      	movs	r2, #0
 8010214:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010216:	7afb      	ldrb	r3, [r7, #11]
 8010218:	f003 030f 	and.w	r3, r3, #15
 801021c:	b2da      	uxtb	r2, r3
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8010222:	7afb      	ldrb	r3, [r7, #11]
 8010224:	f003 030f 	and.w	r3, r3, #15
 8010228:	2b00      	cmp	r3, #0
 801022a:	d106      	bne.n	801023a <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	6979      	ldr	r1, [r7, #20]
 8010232:	4618      	mov	r0, r3
 8010234:	f007 f9ae 	bl	8017594 <USB_EP0StartXfer>
 8010238:	e005      	b.n	8010246 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	6979      	ldr	r1, [r7, #20]
 8010240:	4618      	mov	r0, r3
 8010242:	f006 ffc7 	bl	80171d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8010246:	2300      	movs	r3, #0
}
 8010248:	4618      	mov	r0, r3
 801024a:	3718      	adds	r7, #24
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}

08010250 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010250:	b480      	push	{r7}
 8010252:	b083      	sub	sp, #12
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	460b      	mov	r3, r1
 801025a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801025c:	78fb      	ldrb	r3, [r7, #3]
 801025e:	f003 020f 	and.w	r2, r3, #15
 8010262:	6879      	ldr	r1, [r7, #4]
 8010264:	4613      	mov	r3, r2
 8010266:	00db      	lsls	r3, r3, #3
 8010268:	4413      	add	r3, r2
 801026a:	009b      	lsls	r3, r3, #2
 801026c:	440b      	add	r3, r1
 801026e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010272:	681b      	ldr	r3, [r3, #0]
}
 8010274:	4618      	mov	r0, r3
 8010276:	370c      	adds	r7, #12
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr

08010280 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b086      	sub	sp, #24
 8010284:	af00      	add	r7, sp, #0
 8010286:	60f8      	str	r0, [r7, #12]
 8010288:	607a      	str	r2, [r7, #4]
 801028a:	603b      	str	r3, [r7, #0]
 801028c:	460b      	mov	r3, r1
 801028e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010290:	7afb      	ldrb	r3, [r7, #11]
 8010292:	f003 020f 	and.w	r2, r3, #15
 8010296:	4613      	mov	r3, r2
 8010298:	00db      	lsls	r3, r3, #3
 801029a:	4413      	add	r3, r2
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	3338      	adds	r3, #56	; 0x38
 80102a0:	68fa      	ldr	r2, [r7, #12]
 80102a2:	4413      	add	r3, r2
 80102a4:	3304      	adds	r3, #4
 80102a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	687a      	ldr	r2, [r7, #4]
 80102ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	683a      	ldr	r2, [r7, #0]
 80102b2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	2200      	movs	r2, #0
 80102b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	2201      	movs	r2, #1
 80102be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80102c0:	7afb      	ldrb	r3, [r7, #11]
 80102c2:	f003 030f 	and.w	r3, r3, #15
 80102c6:	b2da      	uxtb	r2, r3
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80102cc:	7afb      	ldrb	r3, [r7, #11]
 80102ce:	f003 030f 	and.w	r3, r3, #15
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d106      	bne.n	80102e4 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	6979      	ldr	r1, [r7, #20]
 80102dc:	4618      	mov	r0, r3
 80102de:	f007 f959 	bl	8017594 <USB_EP0StartXfer>
 80102e2:	e005      	b.n	80102f0 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	6979      	ldr	r1, [r7, #20]
 80102ea:	4618      	mov	r0, r3
 80102ec:	f006 ff72 	bl	80171d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80102f0:	2300      	movs	r3, #0
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3718      	adds	r7, #24
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}

080102fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80102fa:	b580      	push	{r7, lr}
 80102fc:	b084      	sub	sp, #16
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
 8010302:	460b      	mov	r3, r1
 8010304:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8010306:	78fb      	ldrb	r3, [r7, #3]
 8010308:	f003 020f 	and.w	r2, r3, #15
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	429a      	cmp	r2, r3
 8010312:	d901      	bls.n	8010318 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8010314:	2301      	movs	r3, #1
 8010316:	e04e      	b.n	80103b6 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8010318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801031c:	2b00      	cmp	r3, #0
 801031e:	da0f      	bge.n	8010340 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010320:	78fb      	ldrb	r3, [r7, #3]
 8010322:	f003 020f 	and.w	r2, r3, #15
 8010326:	4613      	mov	r3, r2
 8010328:	00db      	lsls	r3, r3, #3
 801032a:	4413      	add	r3, r2
 801032c:	009b      	lsls	r3, r3, #2
 801032e:	3338      	adds	r3, #56	; 0x38
 8010330:	687a      	ldr	r2, [r7, #4]
 8010332:	4413      	add	r3, r2
 8010334:	3304      	adds	r3, #4
 8010336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2201      	movs	r2, #1
 801033c:	705a      	strb	r2, [r3, #1]
 801033e:	e00d      	b.n	801035c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8010340:	78fa      	ldrb	r2, [r7, #3]
 8010342:	4613      	mov	r3, r2
 8010344:	00db      	lsls	r3, r3, #3
 8010346:	4413      	add	r3, r2
 8010348:	009b      	lsls	r3, r3, #2
 801034a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	4413      	add	r3, r2
 8010352:	3304      	adds	r3, #4
 8010354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2200      	movs	r2, #0
 801035a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	2201      	movs	r2, #1
 8010360:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010362:	78fb      	ldrb	r3, [r7, #3]
 8010364:	f003 030f 	and.w	r3, r3, #15
 8010368:	b2da      	uxtb	r2, r3
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8010374:	2b01      	cmp	r3, #1
 8010376:	d101      	bne.n	801037c <HAL_PCD_EP_SetStall+0x82>
 8010378:	2302      	movs	r3, #2
 801037a:	e01c      	b.n	80103b6 <HAL_PCD_EP_SetStall+0xbc>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2201      	movs	r2, #1
 8010380:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	68f9      	ldr	r1, [r7, #12]
 801038a:	4618      	mov	r0, r3
 801038c:	f007 fb60 	bl	8017a50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8010390:	78fb      	ldrb	r3, [r7, #3]
 8010392:	f003 030f 	and.w	r3, r3, #15
 8010396:	2b00      	cmp	r3, #0
 8010398:	d108      	bne.n	80103ac <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80103a4:	4619      	mov	r1, r3
 80103a6:	4610      	mov	r0, r2
 80103a8:	f007 fd52 	bl	8017e50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2200      	movs	r2, #0
 80103b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80103b4:	2300      	movs	r3, #0
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	3710      	adds	r7, #16
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80103be:	b580      	push	{r7, lr}
 80103c0:	b084      	sub	sp, #16
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
 80103c6:	460b      	mov	r3, r1
 80103c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80103ca:	78fb      	ldrb	r3, [r7, #3]
 80103cc:	f003 020f 	and.w	r2, r3, #15
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	685b      	ldr	r3, [r3, #4]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d901      	bls.n	80103dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80103d8:	2301      	movs	r3, #1
 80103da:	e042      	b.n	8010462 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80103dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	da0f      	bge.n	8010404 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80103e4:	78fb      	ldrb	r3, [r7, #3]
 80103e6:	f003 020f 	and.w	r2, r3, #15
 80103ea:	4613      	mov	r3, r2
 80103ec:	00db      	lsls	r3, r3, #3
 80103ee:	4413      	add	r3, r2
 80103f0:	009b      	lsls	r3, r3, #2
 80103f2:	3338      	adds	r3, #56	; 0x38
 80103f4:	687a      	ldr	r2, [r7, #4]
 80103f6:	4413      	add	r3, r2
 80103f8:	3304      	adds	r3, #4
 80103fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2201      	movs	r2, #1
 8010400:	705a      	strb	r2, [r3, #1]
 8010402:	e00f      	b.n	8010424 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010404:	78fb      	ldrb	r3, [r7, #3]
 8010406:	f003 020f 	and.w	r2, r3, #15
 801040a:	4613      	mov	r3, r2
 801040c:	00db      	lsls	r3, r3, #3
 801040e:	4413      	add	r3, r2
 8010410:	009b      	lsls	r3, r3, #2
 8010412:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010416:	687a      	ldr	r2, [r7, #4]
 8010418:	4413      	add	r3, r2
 801041a:	3304      	adds	r3, #4
 801041c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2200      	movs	r2, #0
 8010422:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	2200      	movs	r2, #0
 8010428:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801042a:	78fb      	ldrb	r3, [r7, #3]
 801042c:	f003 030f 	and.w	r3, r3, #15
 8010430:	b2da      	uxtb	r2, r3
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801043c:	2b01      	cmp	r3, #1
 801043e:	d101      	bne.n	8010444 <HAL_PCD_EP_ClrStall+0x86>
 8010440:	2302      	movs	r3, #2
 8010442:	e00e      	b.n	8010462 <HAL_PCD_EP_ClrStall+0xa4>
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2201      	movs	r2, #1
 8010448:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	68f9      	ldr	r1, [r7, #12]
 8010452:	4618      	mov	r0, r3
 8010454:	f007 fb6a 	bl	8017b2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2200      	movs	r2, #0
 801045c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8010460:	2300      	movs	r3, #0
}
 8010462:	4618      	mov	r0, r3
 8010464:	3710      	adds	r7, #16
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}

0801046a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801046a:	b580      	push	{r7, lr}
 801046c:	b084      	sub	sp, #16
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
 8010472:	460b      	mov	r3, r1
 8010474:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8010476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801047a:	2b00      	cmp	r3, #0
 801047c:	da0c      	bge.n	8010498 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801047e:	78fb      	ldrb	r3, [r7, #3]
 8010480:	f003 020f 	and.w	r2, r3, #15
 8010484:	4613      	mov	r3, r2
 8010486:	00db      	lsls	r3, r3, #3
 8010488:	4413      	add	r3, r2
 801048a:	009b      	lsls	r3, r3, #2
 801048c:	3338      	adds	r3, #56	; 0x38
 801048e:	687a      	ldr	r2, [r7, #4]
 8010490:	4413      	add	r3, r2
 8010492:	3304      	adds	r3, #4
 8010494:	60fb      	str	r3, [r7, #12]
 8010496:	e00c      	b.n	80104b2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010498:	78fb      	ldrb	r3, [r7, #3]
 801049a:	f003 020f 	and.w	r2, r3, #15
 801049e:	4613      	mov	r3, r2
 80104a0:	00db      	lsls	r3, r3, #3
 80104a2:	4413      	add	r3, r2
 80104a4:	009b      	lsls	r3, r3, #2
 80104a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80104aa:	687a      	ldr	r2, [r7, #4]
 80104ac:	4413      	add	r3, r2
 80104ae:	3304      	adds	r3, #4
 80104b0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	68f9      	ldr	r1, [r7, #12]
 80104b8:	4618      	mov	r0, r3
 80104ba:	f007 f98d 	bl	80177d8 <USB_EPStopXfer>
 80104be:	4603      	mov	r3, r0
 80104c0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80104c2:	7afb      	ldrb	r3, [r7, #11]
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3710      	adds	r7, #16
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}

080104cc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b088      	sub	sp, #32
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80104e0:	683a      	ldr	r2, [r7, #0]
 80104e2:	4613      	mov	r3, r2
 80104e4:	00db      	lsls	r3, r3, #3
 80104e6:	4413      	add	r3, r2
 80104e8:	009b      	lsls	r3, r3, #2
 80104ea:	3338      	adds	r3, #56	; 0x38
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	4413      	add	r3, r2
 80104f0:	3304      	adds	r3, #4
 80104f2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	6a1a      	ldr	r2, [r3, #32]
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	699b      	ldr	r3, [r3, #24]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d901      	bls.n	8010504 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8010500:	2301      	movs	r3, #1
 8010502:	e067      	b.n	80105d4 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	699a      	ldr	r2, [r3, #24]
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	6a1b      	ldr	r3, [r3, #32]
 801050c:	1ad3      	subs	r3, r2, r3
 801050e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	68db      	ldr	r3, [r3, #12]
 8010514:	69fa      	ldr	r2, [r7, #28]
 8010516:	429a      	cmp	r2, r3
 8010518:	d902      	bls.n	8010520 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	68db      	ldr	r3, [r3, #12]
 801051e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	3303      	adds	r3, #3
 8010524:	089b      	lsrs	r3, r3, #2
 8010526:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8010528:	e026      	b.n	8010578 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	699a      	ldr	r2, [r3, #24]
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	6a1b      	ldr	r3, [r3, #32]
 8010532:	1ad3      	subs	r3, r2, r3
 8010534:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	68db      	ldr	r3, [r3, #12]
 801053a:	69fa      	ldr	r2, [r7, #28]
 801053c:	429a      	cmp	r2, r3
 801053e:	d902      	bls.n	8010546 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	68db      	ldr	r3, [r3, #12]
 8010544:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8010546:	69fb      	ldr	r3, [r7, #28]
 8010548:	3303      	adds	r3, #3
 801054a:	089b      	lsrs	r3, r3, #2
 801054c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	6919      	ldr	r1, [r3, #16]
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	b2da      	uxtb	r2, r3
 8010556:	69fb      	ldr	r3, [r7, #28]
 8010558:	b29b      	uxth	r3, r3
 801055a:	6978      	ldr	r0, [r7, #20]
 801055c:	f007 f9e6 	bl	801792c <USB_WritePacket>

    ep->xfer_buff  += len;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	691a      	ldr	r2, [r3, #16]
 8010564:	69fb      	ldr	r3, [r7, #28]
 8010566:	441a      	add	r2, r3
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6a1a      	ldr	r2, [r3, #32]
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	441a      	add	r2, r3
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	015a      	lsls	r2, r3, #5
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	4413      	add	r3, r2
 8010580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010584:	699b      	ldr	r3, [r3, #24]
 8010586:	b29b      	uxth	r3, r3
 8010588:	69ba      	ldr	r2, [r7, #24]
 801058a:	429a      	cmp	r2, r3
 801058c:	d809      	bhi.n	80105a2 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	6a1a      	ldr	r2, [r3, #32]
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8010596:	429a      	cmp	r2, r3
 8010598:	d203      	bcs.n	80105a2 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	699b      	ldr	r3, [r3, #24]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d1c3      	bne.n	801052a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	699a      	ldr	r2, [r3, #24]
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	6a1b      	ldr	r3, [r3, #32]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d811      	bhi.n	80105d2 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	f003 030f 	and.w	r3, r3, #15
 80105b4:	2201      	movs	r2, #1
 80105b6:	fa02 f303 	lsl.w	r3, r2, r3
 80105ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80105bc:	693b      	ldr	r3, [r7, #16]
 80105be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	43db      	mvns	r3, r3
 80105c8:	6939      	ldr	r1, [r7, #16]
 80105ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80105ce:	4013      	ands	r3, r2
 80105d0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80105d2:	2300      	movs	r3, #0
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3720      	adds	r7, #32
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b086      	sub	sp, #24
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	333c      	adds	r3, #60	; 0x3c
 80105f4:	3304      	adds	r3, #4
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	015a      	lsls	r2, r3, #5
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	4413      	add	r3, r2
 8010602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010606:	689b      	ldr	r3, [r3, #8]
 8010608:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	4a19      	ldr	r2, [pc, #100]	; (8010674 <PCD_EP_OutXfrComplete_int+0x98>)
 801060e:	4293      	cmp	r3, r2
 8010610:	d124      	bne.n	801065c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010618:	2b00      	cmp	r3, #0
 801061a:	d00a      	beq.n	8010632 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	015a      	lsls	r2, r3, #5
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	4413      	add	r3, r2
 8010624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010628:	461a      	mov	r2, r3
 801062a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801062e:	6093      	str	r3, [r2, #8]
 8010630:	e01a      	b.n	8010668 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	f003 0320 	and.w	r3, r3, #32
 8010638:	2b00      	cmp	r3, #0
 801063a:	d008      	beq.n	801064e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	015a      	lsls	r2, r3, #5
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	4413      	add	r3, r2
 8010644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010648:	461a      	mov	r2, r3
 801064a:	2320      	movs	r3, #32
 801064c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	b2db      	uxtb	r3, r3
 8010652:	4619      	mov	r1, r3
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f009 fb6b 	bl	8019d30 <HAL_PCD_DataOutStageCallback>
 801065a:	e005      	b.n	8010668 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	b2db      	uxtb	r3, r3
 8010660:	4619      	mov	r1, r3
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f009 fb64 	bl	8019d30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8010668:	2300      	movs	r3, #0
}
 801066a:	4618      	mov	r0, r3
 801066c:	3718      	adds	r7, #24
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}
 8010672:	bf00      	nop
 8010674:	4f54310a 	.word	0x4f54310a

08010678 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b086      	sub	sp, #24
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	333c      	adds	r3, #60	; 0x3c
 8010690:	3304      	adds	r3, #4
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	015a      	lsls	r2, r3, #5
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	4413      	add	r3, r2
 801069e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106a2:	689b      	ldr	r3, [r3, #8]
 80106a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	4a0c      	ldr	r2, [pc, #48]	; (80106dc <PCD_EP_OutSetupPacket_int+0x64>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d90e      	bls.n	80106cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d009      	beq.n	80106cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	015a      	lsls	r2, r3, #5
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	4413      	add	r3, r2
 80106c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106c4:	461a      	mov	r2, r3
 80106c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80106ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f009 fb1d 	bl	8019d0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80106d2:	2300      	movs	r3, #0
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3718      	adds	r7, #24
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	4f54300a 	.word	0x4f54300a

080106e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80106e0:	b480      	push	{r7}
 80106e2:	b085      	sub	sp, #20
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	460b      	mov	r3, r1
 80106ea:	70fb      	strb	r3, [r7, #3]
 80106ec:	4613      	mov	r3, r2
 80106ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80106f8:	78fb      	ldrb	r3, [r7, #3]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d107      	bne.n	801070e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80106fe:	883b      	ldrh	r3, [r7, #0]
 8010700:	0419      	lsls	r1, r3, #16
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	68ba      	ldr	r2, [r7, #8]
 8010708:	430a      	orrs	r2, r1
 801070a:	629a      	str	r2, [r3, #40]	; 0x28
 801070c:	e028      	b.n	8010760 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010714:	0c1b      	lsrs	r3, r3, #16
 8010716:	68ba      	ldr	r2, [r7, #8]
 8010718:	4413      	add	r3, r2
 801071a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801071c:	2300      	movs	r3, #0
 801071e:	73fb      	strb	r3, [r7, #15]
 8010720:	e00d      	b.n	801073e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681a      	ldr	r2, [r3, #0]
 8010726:	7bfb      	ldrb	r3, [r7, #15]
 8010728:	3340      	adds	r3, #64	; 0x40
 801072a:	009b      	lsls	r3, r3, #2
 801072c:	4413      	add	r3, r2
 801072e:	685b      	ldr	r3, [r3, #4]
 8010730:	0c1b      	lsrs	r3, r3, #16
 8010732:	68ba      	ldr	r2, [r7, #8]
 8010734:	4413      	add	r3, r2
 8010736:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8010738:	7bfb      	ldrb	r3, [r7, #15]
 801073a:	3301      	adds	r3, #1
 801073c:	73fb      	strb	r3, [r7, #15]
 801073e:	7bfa      	ldrb	r2, [r7, #15]
 8010740:	78fb      	ldrb	r3, [r7, #3]
 8010742:	3b01      	subs	r3, #1
 8010744:	429a      	cmp	r2, r3
 8010746:	d3ec      	bcc.n	8010722 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8010748:	883b      	ldrh	r3, [r7, #0]
 801074a:	0418      	lsls	r0, r3, #16
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6819      	ldr	r1, [r3, #0]
 8010750:	78fb      	ldrb	r3, [r7, #3]
 8010752:	3b01      	subs	r3, #1
 8010754:	68ba      	ldr	r2, [r7, #8]
 8010756:	4302      	orrs	r2, r0
 8010758:	3340      	adds	r3, #64	; 0x40
 801075a:	009b      	lsls	r3, r3, #2
 801075c:	440b      	add	r3, r1
 801075e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8010760:	2300      	movs	r3, #0
}
 8010762:	4618      	mov	r0, r3
 8010764:	3714      	adds	r7, #20
 8010766:	46bd      	mov	sp, r7
 8010768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076c:	4770      	bx	lr

0801076e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801076e:	b480      	push	{r7}
 8010770:	b083      	sub	sp, #12
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
 8010776:	460b      	mov	r3, r1
 8010778:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	887a      	ldrh	r2, [r7, #2]
 8010780:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8010782:	2300      	movs	r3, #0
}
 8010784:	4618      	mov	r0, r3
 8010786:	370c      	adds	r7, #12
 8010788:	46bd      	mov	sp, r7
 801078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078e:	4770      	bx	lr

08010790 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8010790:	b480      	push	{r7}
 8010792:	b085      	sub	sp, #20
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2201      	movs	r2, #1
 80107a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2200      	movs	r2, #0
 80107aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	699b      	ldr	r3, [r3, #24]
 80107b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80107c2:	f043 0303 	orr.w	r3, r3, #3
 80107c6:	68fa      	ldr	r2, [r7, #12]
 80107c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80107ca:	2300      	movs	r3, #0
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3714      	adds	r7, #20
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr

080107d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80107d8:	b480      	push	{r7}
 80107da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80107dc:	4b05      	ldr	r3, [pc, #20]	; (80107f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	4a04      	ldr	r2, [pc, #16]	; (80107f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80107e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80107e6:	6013      	str	r3, [r2, #0]
}
 80107e8:	bf00      	nop
 80107ea:	46bd      	mov	sp, r7
 80107ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f0:	4770      	bx	lr
 80107f2:	bf00      	nop
 80107f4:	40007000 	.word	0x40007000

080107f8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	460b      	mov	r3, r1
 8010802:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d10c      	bne.n	8010824 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 801080a:	4b13      	ldr	r3, [pc, #76]	; (8010858 <HAL_PWR_EnterSLEEPMode+0x60>)
 801080c:	695b      	ldr	r3, [r3, #20]
 801080e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010816:	d10e      	bne.n	8010836 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8010818:	f000 f8b6 	bl	8010988 <HAL_PWREx_DisableLowPowerRunMode>
 801081c:	4603      	mov	r3, r0
 801081e:	2b00      	cmp	r3, #0
 8010820:	d009      	beq.n	8010836 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8010822:	e016      	b.n	8010852 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8010824:	4b0c      	ldr	r3, [pc, #48]	; (8010858 <HAL_PWR_EnterSLEEPMode+0x60>)
 8010826:	695b      	ldr	r3, [r3, #20]
 8010828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801082c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010830:	d001      	beq.n	8010836 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8010832:	f000 f899 	bl	8010968 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8010836:	4b09      	ldr	r3, [pc, #36]	; (801085c <HAL_PWR_EnterSLEEPMode+0x64>)
 8010838:	691b      	ldr	r3, [r3, #16]
 801083a:	4a08      	ldr	r2, [pc, #32]	; (801085c <HAL_PWR_EnterSLEEPMode+0x64>)
 801083c:	f023 0304 	bic.w	r3, r3, #4
 8010840:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8010842:	78fb      	ldrb	r3, [r7, #3]
 8010844:	2b01      	cmp	r3, #1
 8010846:	d101      	bne.n	801084c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8010848:	bf30      	wfi
 801084a:	e002      	b.n	8010852 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801084c:	bf40      	sev
    __WFE();
 801084e:	bf20      	wfe
    __WFE();
 8010850:	bf20      	wfe
  }

}
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}
 8010858:	40007000 	.word	0x40007000
 801085c:	e000ed00 	.word	0xe000ed00

08010860 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8010860:	b480      	push	{r7}
 8010862:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8010864:	4b04      	ldr	r3, [pc, #16]	; (8010878 <HAL_PWREx_GetVoltageRange+0x18>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 801086c:	4618      	mov	r0, r3
 801086e:	46bd      	mov	sp, r7
 8010870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010874:	4770      	bx	lr
 8010876:	bf00      	nop
 8010878:	40007000 	.word	0x40007000

0801087c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801087c:	b480      	push	{r7}
 801087e:	b085      	sub	sp, #20
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801088a:	d130      	bne.n	80108ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 801088c:	4b23      	ldr	r3, [pc, #140]	; (801091c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010898:	d038      	beq.n	801090c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801089a:	4b20      	ldr	r3, [pc, #128]	; (801091c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80108a2:	4a1e      	ldr	r2, [pc, #120]	; (801091c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80108a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80108a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80108aa:	4b1d      	ldr	r3, [pc, #116]	; (8010920 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	2232      	movs	r2, #50	; 0x32
 80108b0:	fb02 f303 	mul.w	r3, r2, r3
 80108b4:	4a1b      	ldr	r2, [pc, #108]	; (8010924 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80108b6:	fba2 2303 	umull	r2, r3, r2, r3
 80108ba:	0c9b      	lsrs	r3, r3, #18
 80108bc:	3301      	adds	r3, #1
 80108be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80108c0:	e002      	b.n	80108c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	3b01      	subs	r3, #1
 80108c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80108c8:	4b14      	ldr	r3, [pc, #80]	; (801091c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80108ca:	695b      	ldr	r3, [r3, #20]
 80108cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80108d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80108d4:	d102      	bne.n	80108dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d1f2      	bne.n	80108c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80108dc:	4b0f      	ldr	r3, [pc, #60]	; (801091c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80108de:	695b      	ldr	r3, [r3, #20]
 80108e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80108e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80108e8:	d110      	bne.n	801090c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80108ea:	2303      	movs	r3, #3
 80108ec:	e00f      	b.n	801090e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80108ee:	4b0b      	ldr	r3, [pc, #44]	; (801091c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80108f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80108fa:	d007      	beq.n	801090c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80108fc:	4b07      	ldr	r3, [pc, #28]	; (801091c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8010904:	4a05      	ldr	r2, [pc, #20]	; (801091c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801090a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 801090c:	2300      	movs	r3, #0
}
 801090e:	4618      	mov	r0, r3
 8010910:	3714      	adds	r7, #20
 8010912:	46bd      	mov	sp, r7
 8010914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010918:	4770      	bx	lr
 801091a:	bf00      	nop
 801091c:	40007000 	.word	0x40007000
 8010920:	200001a0 	.word	0x200001a0
 8010924:	431bde83 	.word	0x431bde83

08010928 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8010928:	b480      	push	{r7}
 801092a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 801092c:	4b05      	ldr	r3, [pc, #20]	; (8010944 <HAL_PWREx_EnableVddUSB+0x1c>)
 801092e:	685b      	ldr	r3, [r3, #4]
 8010930:	4a04      	ldr	r2, [pc, #16]	; (8010944 <HAL_PWREx_EnableVddUSB+0x1c>)
 8010932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010936:	6053      	str	r3, [r2, #4]
}
 8010938:	bf00      	nop
 801093a:	46bd      	mov	sp, r7
 801093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010940:	4770      	bx	lr
 8010942:	bf00      	nop
 8010944:	40007000 	.word	0x40007000

08010948 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8010948:	b480      	push	{r7}
 801094a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 801094c:	4b05      	ldr	r3, [pc, #20]	; (8010964 <HAL_PWREx_EnableVddIO2+0x1c>)
 801094e:	685b      	ldr	r3, [r3, #4]
 8010950:	4a04      	ldr	r2, [pc, #16]	; (8010964 <HAL_PWREx_EnableVddIO2+0x1c>)
 8010952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010956:	6053      	str	r3, [r2, #4]
}
 8010958:	bf00      	nop
 801095a:	46bd      	mov	sp, r7
 801095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010960:	4770      	bx	lr
 8010962:	bf00      	nop
 8010964:	40007000 	.word	0x40007000

08010968 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8010968:	b480      	push	{r7}
 801096a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 801096c:	4b05      	ldr	r3, [pc, #20]	; (8010984 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	4a04      	ldr	r2, [pc, #16]	; (8010984 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8010972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010976:	6013      	str	r3, [r2, #0]
}
 8010978:	bf00      	nop
 801097a:	46bd      	mov	sp, r7
 801097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop
 8010984:	40007000 	.word	0x40007000

08010988 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8010988:	b480      	push	{r7}
 801098a:	b083      	sub	sp, #12
 801098c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 801098e:	4b17      	ldr	r3, [pc, #92]	; (80109ec <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	4a16      	ldr	r2, [pc, #88]	; (80109ec <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8010994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010998:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801099a:	4b15      	ldr	r3, [pc, #84]	; (80109f0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	2232      	movs	r2, #50	; 0x32
 80109a0:	fb02 f303 	mul.w	r3, r2, r3
 80109a4:	4a13      	ldr	r2, [pc, #76]	; (80109f4 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80109a6:	fba2 2303 	umull	r2, r3, r2, r3
 80109aa:	0c9b      	lsrs	r3, r3, #18
 80109ac:	3301      	adds	r3, #1
 80109ae:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80109b0:	e002      	b.n	80109b8 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	3b01      	subs	r3, #1
 80109b6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80109b8:	4b0c      	ldr	r3, [pc, #48]	; (80109ec <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80109ba:	695b      	ldr	r3, [r3, #20]
 80109bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80109c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109c4:	d102      	bne.n	80109cc <HAL_PWREx_DisableLowPowerRunMode+0x44>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d1f2      	bne.n	80109b2 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80109cc:	4b07      	ldr	r3, [pc, #28]	; (80109ec <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80109ce:	695b      	ldr	r3, [r3, #20]
 80109d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80109d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109d8:	d101      	bne.n	80109de <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 80109da:	2303      	movs	r3, #3
 80109dc:	e000      	b.n	80109e0 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 80109de:	2300      	movs	r3, #0
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	370c      	adds	r7, #12
 80109e4:	46bd      	mov	sp, r7
 80109e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ea:	4770      	bx	lr
 80109ec:	40007000 	.word	0x40007000
 80109f0:	200001a0 	.word	0x200001a0
 80109f4:	431bde83 	.word	0x431bde83

080109f8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b086      	sub	sp, #24
 80109fc:	af02      	add	r7, sp, #8
 80109fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8010a00:	f7fb fb3c 	bl	800c07c <HAL_GetTick>
 8010a04:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d101      	bne.n	8010a10 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	e069      	b.n	8010ae4 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d10b      	bne.n	8010a34 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f7f2 f9f9 	bl	8002e1c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8010a2a:	f241 3188 	movw	r1, #5000	; 0x1388
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f000 f85e 	bl	8010af0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	689b      	ldr	r3, [r3, #8]
 8010a42:	3b01      	subs	r3, #1
 8010a44:	021a      	lsls	r2, r3, #8
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	430a      	orrs	r2, r1
 8010a4c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a52:	9300      	str	r3, [sp, #0]
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	2200      	movs	r2, #0
 8010a58:	2120      	movs	r1, #32
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f000 f856 	bl	8010b0c <QSPI_WaitFlagStateUntilTimeout>
 8010a60:	4603      	mov	r3, r0
 8010a62:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8010a64:	7afb      	ldrb	r3, [r7, #11]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d137      	bne.n	8010ada <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010a74:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8010a78:	687a      	ldr	r2, [r7, #4]
 8010a7a:	6852      	ldr	r2, [r2, #4]
 8010a7c:	0611      	lsls	r1, r2, #24
 8010a7e:	687a      	ldr	r2, [r7, #4]
 8010a80:	68d2      	ldr	r2, [r2, #12]
 8010a82:	4311      	orrs	r1, r2
 8010a84:	687a      	ldr	r2, [r7, #4]
 8010a86:	69d2      	ldr	r2, [r2, #28]
 8010a88:	4311      	orrs	r1, r2
 8010a8a:	687a      	ldr	r2, [r7, #4]
 8010a8c:	6a12      	ldr	r2, [r2, #32]
 8010a8e:	4311      	orrs	r1, r2
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	6812      	ldr	r2, [r2, #0]
 8010a94:	430b      	orrs	r3, r1
 8010a96:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	685a      	ldr	r2, [r3, #4]
 8010a9e:	4b13      	ldr	r3, [pc, #76]	; (8010aec <HAL_QSPI_Init+0xf4>)
 8010aa0:	4013      	ands	r3, r2
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	6912      	ldr	r2, [r2, #16]
 8010aa6:	0411      	lsls	r1, r2, #16
 8010aa8:	687a      	ldr	r2, [r7, #4]
 8010aaa:	6952      	ldr	r2, [r2, #20]
 8010aac:	4311      	orrs	r1, r2
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	6992      	ldr	r2, [r2, #24]
 8010ab2:	4311      	orrs	r1, r2
 8010ab4:	687a      	ldr	r2, [r7, #4]
 8010ab6:	6812      	ldr	r2, [r2, #0]
 8010ab8:	430b      	orrs	r3, r1
 8010aba:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	681a      	ldr	r2, [r3, #0]
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f042 0201 	orr.w	r2, r2, #1
 8010aca:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2200      	movs	r2, #0
 8010ad0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2201      	movs	r2, #1
 8010ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2200      	movs	r2, #0
 8010ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8010ae2:	7afb      	ldrb	r3, [r7, #11]
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3710      	adds	r7, #16
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}
 8010aec:	ffe0f8fe 	.word	0xffe0f8fe

08010af0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	683a      	ldr	r2, [r7, #0]
 8010afe:	649a      	str	r2, [r3, #72]	; 0x48
}
 8010b00:	bf00      	nop
 8010b02:	370c      	adds	r7, #12
 8010b04:	46bd      	mov	sp, r7
 8010b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0a:	4770      	bx	lr

08010b0c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b084      	sub	sp, #16
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	60f8      	str	r0, [r7, #12]
 8010b14:	60b9      	str	r1, [r7, #8]
 8010b16:	603b      	str	r3, [r7, #0]
 8010b18:	4613      	mov	r3, r2
 8010b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8010b1c:	e01a      	b.n	8010b54 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b1e:	69bb      	ldr	r3, [r7, #24]
 8010b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b24:	d016      	beq.n	8010b54 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b26:	f7fb faa9 	bl	800c07c <HAL_GetTick>
 8010b2a:	4602      	mov	r2, r0
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	1ad3      	subs	r3, r2, r3
 8010b30:	69ba      	ldr	r2, [r7, #24]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d302      	bcc.n	8010b3c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8010b36:	69bb      	ldr	r3, [r7, #24]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d10b      	bne.n	8010b54 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	2204      	movs	r2, #4
 8010b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b48:	f043 0201 	orr.w	r2, r3, #1
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8010b50:	2301      	movs	r3, #1
 8010b52:	e00e      	b.n	8010b72 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	689a      	ldr	r2, [r3, #8]
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	4013      	ands	r3, r2
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	bf14      	ite	ne
 8010b62:	2301      	movne	r3, #1
 8010b64:	2300      	moveq	r3, #0
 8010b66:	b2db      	uxtb	r3, r3
 8010b68:	461a      	mov	r2, r3
 8010b6a:	79fb      	ldrb	r3, [r7, #7]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d1d6      	bne.n	8010b1e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010b70:	2300      	movs	r3, #0
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3710      	adds	r7, #16
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}
	...

08010b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b088      	sub	sp, #32
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d102      	bne.n	8010b90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	f000 bc08 	b.w	80113a0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010b90:	4b96      	ldr	r3, [pc, #600]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010b92:	689b      	ldr	r3, [r3, #8]
 8010b94:	f003 030c 	and.w	r3, r3, #12
 8010b98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010b9a:	4b94      	ldr	r3, [pc, #592]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010b9c:	68db      	ldr	r3, [r3, #12]
 8010b9e:	f003 0303 	and.w	r3, r3, #3
 8010ba2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	f003 0310 	and.w	r3, r3, #16
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	f000 80e4 	beq.w	8010d7a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010bb2:	69bb      	ldr	r3, [r7, #24]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d007      	beq.n	8010bc8 <HAL_RCC_OscConfig+0x4c>
 8010bb8:	69bb      	ldr	r3, [r7, #24]
 8010bba:	2b0c      	cmp	r3, #12
 8010bbc:	f040 808b 	bne.w	8010cd6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	2b01      	cmp	r3, #1
 8010bc4:	f040 8087 	bne.w	8010cd6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010bc8:	4b88      	ldr	r3, [pc, #544]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	f003 0302 	and.w	r3, r3, #2
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d005      	beq.n	8010be0 <HAL_RCC_OscConfig+0x64>
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	699b      	ldr	r3, [r3, #24]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d101      	bne.n	8010be0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8010bdc:	2301      	movs	r3, #1
 8010bde:	e3df      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6a1a      	ldr	r2, [r3, #32]
 8010be4:	4b81      	ldr	r3, [pc, #516]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	f003 0308 	and.w	r3, r3, #8
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d004      	beq.n	8010bfa <HAL_RCC_OscConfig+0x7e>
 8010bf0:	4b7e      	ldr	r3, [pc, #504]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010bf8:	e005      	b.n	8010c06 <HAL_RCC_OscConfig+0x8a>
 8010bfa:	4b7c      	ldr	r3, [pc, #496]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010c00:	091b      	lsrs	r3, r3, #4
 8010c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c06:	4293      	cmp	r3, r2
 8010c08:	d223      	bcs.n	8010c52 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6a1b      	ldr	r3, [r3, #32]
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f000 fd92 	bl	8011738 <RCC_SetFlashLatencyFromMSIRange>
 8010c14:	4603      	mov	r3, r0
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d001      	beq.n	8010c1e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	e3c0      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010c1e:	4b73      	ldr	r3, [pc, #460]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	4a72      	ldr	r2, [pc, #456]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010c24:	f043 0308 	orr.w	r3, r3, #8
 8010c28:	6013      	str	r3, [r2, #0]
 8010c2a:	4b70      	ldr	r3, [pc, #448]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6a1b      	ldr	r3, [r3, #32]
 8010c36:	496d      	ldr	r1, [pc, #436]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010c38:	4313      	orrs	r3, r2
 8010c3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010c3c:	4b6b      	ldr	r3, [pc, #428]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	69db      	ldr	r3, [r3, #28]
 8010c48:	021b      	lsls	r3, r3, #8
 8010c4a:	4968      	ldr	r1, [pc, #416]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010c4c:	4313      	orrs	r3, r2
 8010c4e:	604b      	str	r3, [r1, #4]
 8010c50:	e025      	b.n	8010c9e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010c52:	4b66      	ldr	r3, [pc, #408]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	4a65      	ldr	r2, [pc, #404]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010c58:	f043 0308 	orr.w	r3, r3, #8
 8010c5c:	6013      	str	r3, [r2, #0]
 8010c5e:	4b63      	ldr	r3, [pc, #396]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6a1b      	ldr	r3, [r3, #32]
 8010c6a:	4960      	ldr	r1, [pc, #384]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010c6c:	4313      	orrs	r3, r2
 8010c6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010c70:	4b5e      	ldr	r3, [pc, #376]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010c72:	685b      	ldr	r3, [r3, #4]
 8010c74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	69db      	ldr	r3, [r3, #28]
 8010c7c:	021b      	lsls	r3, r3, #8
 8010c7e:	495b      	ldr	r1, [pc, #364]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010c80:	4313      	orrs	r3, r2
 8010c82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010c84:	69bb      	ldr	r3, [r7, #24]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d109      	bne.n	8010c9e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6a1b      	ldr	r3, [r3, #32]
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f000 fd52 	bl	8011738 <RCC_SetFlashLatencyFromMSIRange>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d001      	beq.n	8010c9e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	e380      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8010c9e:	f000 fc87 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 8010ca2:	4602      	mov	r2, r0
 8010ca4:	4b51      	ldr	r3, [pc, #324]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010ca6:	689b      	ldr	r3, [r3, #8]
 8010ca8:	091b      	lsrs	r3, r3, #4
 8010caa:	f003 030f 	and.w	r3, r3, #15
 8010cae:	4950      	ldr	r1, [pc, #320]	; (8010df0 <HAL_RCC_OscConfig+0x274>)
 8010cb0:	5ccb      	ldrb	r3, [r1, r3]
 8010cb2:	f003 031f 	and.w	r3, r3, #31
 8010cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8010cba:	4a4e      	ldr	r2, [pc, #312]	; (8010df4 <HAL_RCC_OscConfig+0x278>)
 8010cbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8010cbe:	4b4e      	ldr	r3, [pc, #312]	; (8010df8 <HAL_RCC_OscConfig+0x27c>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7fb f98a 	bl	800bfdc <HAL_InitTick>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8010ccc:	7bfb      	ldrb	r3, [r7, #15]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d052      	beq.n	8010d78 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8010cd2:	7bfb      	ldrb	r3, [r7, #15]
 8010cd4:	e364      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	699b      	ldr	r3, [r3, #24]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d032      	beq.n	8010d44 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8010cde:	4b43      	ldr	r3, [pc, #268]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	4a42      	ldr	r2, [pc, #264]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010ce4:	f043 0301 	orr.w	r3, r3, #1
 8010ce8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010cea:	f7fb f9c7 	bl	800c07c <HAL_GetTick>
 8010cee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010cf0:	e008      	b.n	8010d04 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010cf2:	f7fb f9c3 	bl	800c07c <HAL_GetTick>
 8010cf6:	4602      	mov	r2, r0
 8010cf8:	693b      	ldr	r3, [r7, #16]
 8010cfa:	1ad3      	subs	r3, r2, r3
 8010cfc:	2b02      	cmp	r3, #2
 8010cfe:	d901      	bls.n	8010d04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8010d00:	2303      	movs	r3, #3
 8010d02:	e34d      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010d04:	4b39      	ldr	r3, [pc, #228]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	f003 0302 	and.w	r3, r3, #2
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d0f0      	beq.n	8010cf2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010d10:	4b36      	ldr	r3, [pc, #216]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	4a35      	ldr	r2, [pc, #212]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010d16:	f043 0308 	orr.w	r3, r3, #8
 8010d1a:	6013      	str	r3, [r2, #0]
 8010d1c:	4b33      	ldr	r3, [pc, #204]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6a1b      	ldr	r3, [r3, #32]
 8010d28:	4930      	ldr	r1, [pc, #192]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010d2a:	4313      	orrs	r3, r2
 8010d2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010d2e:	4b2f      	ldr	r3, [pc, #188]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010d30:	685b      	ldr	r3, [r3, #4]
 8010d32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	69db      	ldr	r3, [r3, #28]
 8010d3a:	021b      	lsls	r3, r3, #8
 8010d3c:	492b      	ldr	r1, [pc, #172]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010d3e:	4313      	orrs	r3, r2
 8010d40:	604b      	str	r3, [r1, #4]
 8010d42:	e01a      	b.n	8010d7a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8010d44:	4b29      	ldr	r3, [pc, #164]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	4a28      	ldr	r2, [pc, #160]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010d4a:	f023 0301 	bic.w	r3, r3, #1
 8010d4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010d50:	f7fb f994 	bl	800c07c <HAL_GetTick>
 8010d54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8010d56:	e008      	b.n	8010d6a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010d58:	f7fb f990 	bl	800c07c <HAL_GetTick>
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	1ad3      	subs	r3, r2, r3
 8010d62:	2b02      	cmp	r3, #2
 8010d64:	d901      	bls.n	8010d6a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8010d66:	2303      	movs	r3, #3
 8010d68:	e31a      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8010d6a:	4b20      	ldr	r3, [pc, #128]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	f003 0302 	and.w	r3, r3, #2
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d1f0      	bne.n	8010d58 <HAL_RCC_OscConfig+0x1dc>
 8010d76:	e000      	b.n	8010d7a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010d78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f003 0301 	and.w	r3, r3, #1
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d073      	beq.n	8010e6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8010d86:	69bb      	ldr	r3, [r7, #24]
 8010d88:	2b08      	cmp	r3, #8
 8010d8a:	d005      	beq.n	8010d98 <HAL_RCC_OscConfig+0x21c>
 8010d8c:	69bb      	ldr	r3, [r7, #24]
 8010d8e:	2b0c      	cmp	r3, #12
 8010d90:	d10e      	bne.n	8010db0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	2b03      	cmp	r3, #3
 8010d96:	d10b      	bne.n	8010db0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010d98:	4b14      	ldr	r3, [pc, #80]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d063      	beq.n	8010e6c <HAL_RCC_OscConfig+0x2f0>
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	685b      	ldr	r3, [r3, #4]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d15f      	bne.n	8010e6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8010dac:	2301      	movs	r3, #1
 8010dae:	e2f7      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010db8:	d106      	bne.n	8010dc8 <HAL_RCC_OscConfig+0x24c>
 8010dba:	4b0c      	ldr	r3, [pc, #48]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	4a0b      	ldr	r2, [pc, #44]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010dc4:	6013      	str	r3, [r2, #0]
 8010dc6:	e025      	b.n	8010e14 <HAL_RCC_OscConfig+0x298>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	685b      	ldr	r3, [r3, #4]
 8010dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010dd0:	d114      	bne.n	8010dfc <HAL_RCC_OscConfig+0x280>
 8010dd2:	4b06      	ldr	r3, [pc, #24]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	4a05      	ldr	r2, [pc, #20]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010ddc:	6013      	str	r3, [r2, #0]
 8010dde:	4b03      	ldr	r3, [pc, #12]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	4a02      	ldr	r2, [pc, #8]	; (8010dec <HAL_RCC_OscConfig+0x270>)
 8010de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010de8:	6013      	str	r3, [r2, #0]
 8010dea:	e013      	b.n	8010e14 <HAL_RCC_OscConfig+0x298>
 8010dec:	40021000 	.word	0x40021000
 8010df0:	0801b96c 	.word	0x0801b96c
 8010df4:	200001a0 	.word	0x200001a0
 8010df8:	2000055c 	.word	0x2000055c
 8010dfc:	4ba0      	ldr	r3, [pc, #640]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	4a9f      	ldr	r2, [pc, #636]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e06:	6013      	str	r3, [r2, #0]
 8010e08:	4b9d      	ldr	r3, [pc, #628]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	4a9c      	ldr	r2, [pc, #624]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d013      	beq.n	8010e44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e1c:	f7fb f92e 	bl	800c07c <HAL_GetTick>
 8010e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010e22:	e008      	b.n	8010e36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010e24:	f7fb f92a 	bl	800c07c <HAL_GetTick>
 8010e28:	4602      	mov	r2, r0
 8010e2a:	693b      	ldr	r3, [r7, #16]
 8010e2c:	1ad3      	subs	r3, r2, r3
 8010e2e:	2b64      	cmp	r3, #100	; 0x64
 8010e30:	d901      	bls.n	8010e36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8010e32:	2303      	movs	r3, #3
 8010e34:	e2b4      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010e36:	4b92      	ldr	r3, [pc, #584]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d0f0      	beq.n	8010e24 <HAL_RCC_OscConfig+0x2a8>
 8010e42:	e014      	b.n	8010e6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e44:	f7fb f91a 	bl	800c07c <HAL_GetTick>
 8010e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010e4a:	e008      	b.n	8010e5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010e4c:	f7fb f916 	bl	800c07c <HAL_GetTick>
 8010e50:	4602      	mov	r2, r0
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	1ad3      	subs	r3, r2, r3
 8010e56:	2b64      	cmp	r3, #100	; 0x64
 8010e58:	d901      	bls.n	8010e5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8010e5a:	2303      	movs	r3, #3
 8010e5c:	e2a0      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010e5e:	4b88      	ldr	r3, [pc, #544]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d1f0      	bne.n	8010e4c <HAL_RCC_OscConfig+0x2d0>
 8010e6a:	e000      	b.n	8010e6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	f003 0302 	and.w	r3, r3, #2
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d060      	beq.n	8010f3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8010e7a:	69bb      	ldr	r3, [r7, #24]
 8010e7c:	2b04      	cmp	r3, #4
 8010e7e:	d005      	beq.n	8010e8c <HAL_RCC_OscConfig+0x310>
 8010e80:	69bb      	ldr	r3, [r7, #24]
 8010e82:	2b0c      	cmp	r3, #12
 8010e84:	d119      	bne.n	8010eba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	2b02      	cmp	r3, #2
 8010e8a:	d116      	bne.n	8010eba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010e8c:	4b7c      	ldr	r3, [pc, #496]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d005      	beq.n	8010ea4 <HAL_RCC_OscConfig+0x328>
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d101      	bne.n	8010ea4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	e27d      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010ea4:	4b76      	ldr	r3, [pc, #472]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	691b      	ldr	r3, [r3, #16]
 8010eb0:	061b      	lsls	r3, r3, #24
 8010eb2:	4973      	ldr	r1, [pc, #460]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010eb4:	4313      	orrs	r3, r2
 8010eb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010eb8:	e040      	b.n	8010f3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d023      	beq.n	8010f0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010ec2:	4b6f      	ldr	r3, [pc, #444]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	4a6e      	ldr	r2, [pc, #440]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010ece:	f7fb f8d5 	bl	800c07c <HAL_GetTick>
 8010ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010ed4:	e008      	b.n	8010ee8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010ed6:	f7fb f8d1 	bl	800c07c <HAL_GetTick>
 8010eda:	4602      	mov	r2, r0
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	1ad3      	subs	r3, r2, r3
 8010ee0:	2b02      	cmp	r3, #2
 8010ee2:	d901      	bls.n	8010ee8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8010ee4:	2303      	movs	r3, #3
 8010ee6:	e25b      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010ee8:	4b65      	ldr	r3, [pc, #404]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d0f0      	beq.n	8010ed6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010ef4:	4b62      	ldr	r3, [pc, #392]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010ef6:	685b      	ldr	r3, [r3, #4]
 8010ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	691b      	ldr	r3, [r3, #16]
 8010f00:	061b      	lsls	r3, r3, #24
 8010f02:	495f      	ldr	r1, [pc, #380]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010f04:	4313      	orrs	r3, r2
 8010f06:	604b      	str	r3, [r1, #4]
 8010f08:	e018      	b.n	8010f3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010f0a:	4b5d      	ldr	r3, [pc, #372]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	4a5c      	ldr	r2, [pc, #368]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f16:	f7fb f8b1 	bl	800c07c <HAL_GetTick>
 8010f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010f1c:	e008      	b.n	8010f30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010f1e:	f7fb f8ad 	bl	800c07c <HAL_GetTick>
 8010f22:	4602      	mov	r2, r0
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	1ad3      	subs	r3, r2, r3
 8010f28:	2b02      	cmp	r3, #2
 8010f2a:	d901      	bls.n	8010f30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8010f2c:	2303      	movs	r3, #3
 8010f2e:	e237      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010f30:	4b53      	ldr	r3, [pc, #332]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d1f0      	bne.n	8010f1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f003 0308 	and.w	r3, r3, #8
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d03c      	beq.n	8010fc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	695b      	ldr	r3, [r3, #20]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d01c      	beq.n	8010f8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010f50:	4b4b      	ldr	r3, [pc, #300]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f56:	4a4a      	ldr	r2, [pc, #296]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010f58:	f043 0301 	orr.w	r3, r3, #1
 8010f5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010f60:	f7fb f88c 	bl	800c07c <HAL_GetTick>
 8010f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010f66:	e008      	b.n	8010f7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010f68:	f7fb f888 	bl	800c07c <HAL_GetTick>
 8010f6c:	4602      	mov	r2, r0
 8010f6e:	693b      	ldr	r3, [r7, #16]
 8010f70:	1ad3      	subs	r3, r2, r3
 8010f72:	2b02      	cmp	r3, #2
 8010f74:	d901      	bls.n	8010f7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8010f76:	2303      	movs	r3, #3
 8010f78:	e212      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010f7a:	4b41      	ldr	r3, [pc, #260]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f80:	f003 0302 	and.w	r3, r3, #2
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d0ef      	beq.n	8010f68 <HAL_RCC_OscConfig+0x3ec>
 8010f88:	e01b      	b.n	8010fc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010f8a:	4b3d      	ldr	r3, [pc, #244]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f90:	4a3b      	ldr	r2, [pc, #236]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010f92:	f023 0301 	bic.w	r3, r3, #1
 8010f96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010f9a:	f7fb f86f 	bl	800c07c <HAL_GetTick>
 8010f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010fa0:	e008      	b.n	8010fb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010fa2:	f7fb f86b 	bl	800c07c <HAL_GetTick>
 8010fa6:	4602      	mov	r2, r0
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	1ad3      	subs	r3, r2, r3
 8010fac:	2b02      	cmp	r3, #2
 8010fae:	d901      	bls.n	8010fb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8010fb0:	2303      	movs	r3, #3
 8010fb2:	e1f5      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010fb4:	4b32      	ldr	r3, [pc, #200]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010fba:	f003 0302 	and.w	r3, r3, #2
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d1ef      	bne.n	8010fa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	f003 0304 	and.w	r3, r3, #4
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	f000 80a6 	beq.w	801111c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8010fd4:	4b2a      	ldr	r3, [pc, #168]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d10d      	bne.n	8010ffc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010fe0:	4b27      	ldr	r3, [pc, #156]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fe4:	4a26      	ldr	r2, [pc, #152]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010fea:	6593      	str	r3, [r2, #88]	; 0x58
 8010fec:	4b24      	ldr	r3, [pc, #144]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8010fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ff4:	60bb      	str	r3, [r7, #8]
 8010ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010ffc:	4b21      	ldr	r3, [pc, #132]	; (8011084 <HAL_RCC_OscConfig+0x508>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011004:	2b00      	cmp	r3, #0
 8011006:	d118      	bne.n	801103a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011008:	4b1e      	ldr	r3, [pc, #120]	; (8011084 <HAL_RCC_OscConfig+0x508>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	4a1d      	ldr	r2, [pc, #116]	; (8011084 <HAL_RCC_OscConfig+0x508>)
 801100e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011012:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011014:	f7fb f832 	bl	800c07c <HAL_GetTick>
 8011018:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801101a:	e008      	b.n	801102e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801101c:	f7fb f82e 	bl	800c07c <HAL_GetTick>
 8011020:	4602      	mov	r2, r0
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	1ad3      	subs	r3, r2, r3
 8011026:	2b02      	cmp	r3, #2
 8011028:	d901      	bls.n	801102e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 801102a:	2303      	movs	r3, #3
 801102c:	e1b8      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801102e:	4b15      	ldr	r3, [pc, #84]	; (8011084 <HAL_RCC_OscConfig+0x508>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011036:	2b00      	cmp	r3, #0
 8011038:	d0f0      	beq.n	801101c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	689b      	ldr	r3, [r3, #8]
 801103e:	2b01      	cmp	r3, #1
 8011040:	d108      	bne.n	8011054 <HAL_RCC_OscConfig+0x4d8>
 8011042:	4b0f      	ldr	r3, [pc, #60]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8011044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011048:	4a0d      	ldr	r2, [pc, #52]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 801104a:	f043 0301 	orr.w	r3, r3, #1
 801104e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011052:	e029      	b.n	80110a8 <HAL_RCC_OscConfig+0x52c>
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	689b      	ldr	r3, [r3, #8]
 8011058:	2b05      	cmp	r3, #5
 801105a:	d115      	bne.n	8011088 <HAL_RCC_OscConfig+0x50c>
 801105c:	4b08      	ldr	r3, [pc, #32]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 801105e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011062:	4a07      	ldr	r2, [pc, #28]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8011064:	f043 0304 	orr.w	r3, r3, #4
 8011068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801106c:	4b04      	ldr	r3, [pc, #16]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 801106e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011072:	4a03      	ldr	r2, [pc, #12]	; (8011080 <HAL_RCC_OscConfig+0x504>)
 8011074:	f043 0301 	orr.w	r3, r3, #1
 8011078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801107c:	e014      	b.n	80110a8 <HAL_RCC_OscConfig+0x52c>
 801107e:	bf00      	nop
 8011080:	40021000 	.word	0x40021000
 8011084:	40007000 	.word	0x40007000
 8011088:	4b9d      	ldr	r3, [pc, #628]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 801108a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801108e:	4a9c      	ldr	r2, [pc, #624]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 8011090:	f023 0301 	bic.w	r3, r3, #1
 8011094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011098:	4b99      	ldr	r3, [pc, #612]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 801109a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801109e:	4a98      	ldr	r2, [pc, #608]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 80110a0:	f023 0304 	bic.w	r3, r3, #4
 80110a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	689b      	ldr	r3, [r3, #8]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d016      	beq.n	80110de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80110b0:	f7fa ffe4 	bl	800c07c <HAL_GetTick>
 80110b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80110b6:	e00a      	b.n	80110ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80110b8:	f7fa ffe0 	bl	800c07c <HAL_GetTick>
 80110bc:	4602      	mov	r2, r0
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80110c6:	4293      	cmp	r3, r2
 80110c8:	d901      	bls.n	80110ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80110ca:	2303      	movs	r3, #3
 80110cc:	e168      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80110ce:	4b8c      	ldr	r3, [pc, #560]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 80110d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110d4:	f003 0302 	and.w	r3, r3, #2
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d0ed      	beq.n	80110b8 <HAL_RCC_OscConfig+0x53c>
 80110dc:	e015      	b.n	801110a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80110de:	f7fa ffcd 	bl	800c07c <HAL_GetTick>
 80110e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80110e4:	e00a      	b.n	80110fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80110e6:	f7fa ffc9 	bl	800c07c <HAL_GetTick>
 80110ea:	4602      	mov	r2, r0
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	1ad3      	subs	r3, r2, r3
 80110f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80110f4:	4293      	cmp	r3, r2
 80110f6:	d901      	bls.n	80110fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80110f8:	2303      	movs	r3, #3
 80110fa:	e151      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80110fc:	4b80      	ldr	r3, [pc, #512]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 80110fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011102:	f003 0302 	and.w	r3, r3, #2
 8011106:	2b00      	cmp	r3, #0
 8011108:	d1ed      	bne.n	80110e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801110a:	7ffb      	ldrb	r3, [r7, #31]
 801110c:	2b01      	cmp	r3, #1
 801110e:	d105      	bne.n	801111c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011110:	4b7b      	ldr	r3, [pc, #492]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 8011112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011114:	4a7a      	ldr	r2, [pc, #488]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 8011116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801111a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f003 0320 	and.w	r3, r3, #32
 8011124:	2b00      	cmp	r3, #0
 8011126:	d03c      	beq.n	80111a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801112c:	2b00      	cmp	r3, #0
 801112e:	d01c      	beq.n	801116a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8011130:	4b73      	ldr	r3, [pc, #460]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 8011132:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011136:	4a72      	ldr	r2, [pc, #456]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 8011138:	f043 0301 	orr.w	r3, r3, #1
 801113c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011140:	f7fa ff9c 	bl	800c07c <HAL_GetTick>
 8011144:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8011146:	e008      	b.n	801115a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011148:	f7fa ff98 	bl	800c07c <HAL_GetTick>
 801114c:	4602      	mov	r2, r0
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	1ad3      	subs	r3, r2, r3
 8011152:	2b02      	cmp	r3, #2
 8011154:	d901      	bls.n	801115a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8011156:	2303      	movs	r3, #3
 8011158:	e122      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801115a:	4b69      	ldr	r3, [pc, #420]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 801115c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011160:	f003 0302 	and.w	r3, r3, #2
 8011164:	2b00      	cmp	r3, #0
 8011166:	d0ef      	beq.n	8011148 <HAL_RCC_OscConfig+0x5cc>
 8011168:	e01b      	b.n	80111a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801116a:	4b65      	ldr	r3, [pc, #404]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 801116c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011170:	4a63      	ldr	r2, [pc, #396]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 8011172:	f023 0301 	bic.w	r3, r3, #1
 8011176:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801117a:	f7fa ff7f 	bl	800c07c <HAL_GetTick>
 801117e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8011180:	e008      	b.n	8011194 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011182:	f7fa ff7b 	bl	800c07c <HAL_GetTick>
 8011186:	4602      	mov	r2, r0
 8011188:	693b      	ldr	r3, [r7, #16]
 801118a:	1ad3      	subs	r3, r2, r3
 801118c:	2b02      	cmp	r3, #2
 801118e:	d901      	bls.n	8011194 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8011190:	2303      	movs	r3, #3
 8011192:	e105      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8011194:	4b5a      	ldr	r3, [pc, #360]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 8011196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801119a:	f003 0302 	and.w	r3, r3, #2
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d1ef      	bne.n	8011182 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	f000 80f9 	beq.w	801139e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111b0:	2b02      	cmp	r3, #2
 80111b2:	f040 80cf 	bne.w	8011354 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80111b6:	4b52      	ldr	r3, [pc, #328]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	f003 0203 	and.w	r2, r3, #3
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111c6:	429a      	cmp	r2, r3
 80111c8:	d12c      	bne.n	8011224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111d4:	3b01      	subs	r3, #1
 80111d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80111d8:	429a      	cmp	r2, r3
 80111da:	d123      	bne.n	8011224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d11b      	bne.n	8011224 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d113      	bne.n	8011224 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011206:	085b      	lsrs	r3, r3, #1
 8011208:	3b01      	subs	r3, #1
 801120a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801120c:	429a      	cmp	r2, r3
 801120e:	d109      	bne.n	8011224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801121a:	085b      	lsrs	r3, r3, #1
 801121c:	3b01      	subs	r3, #1
 801121e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011220:	429a      	cmp	r2, r3
 8011222:	d071      	beq.n	8011308 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011224:	69bb      	ldr	r3, [r7, #24]
 8011226:	2b0c      	cmp	r3, #12
 8011228:	d068      	beq.n	80112fc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801122a:	4b35      	ldr	r3, [pc, #212]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011232:	2b00      	cmp	r3, #0
 8011234:	d105      	bne.n	8011242 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8011236:	4b32      	ldr	r3, [pc, #200]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801123e:	2b00      	cmp	r3, #0
 8011240:	d001      	beq.n	8011246 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8011242:	2301      	movs	r3, #1
 8011244:	e0ac      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8011246:	4b2e      	ldr	r3, [pc, #184]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	4a2d      	ldr	r2, [pc, #180]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 801124c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011250:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8011252:	f7fa ff13 	bl	800c07c <HAL_GetTick>
 8011256:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011258:	e008      	b.n	801126c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801125a:	f7fa ff0f 	bl	800c07c <HAL_GetTick>
 801125e:	4602      	mov	r2, r0
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	1ad3      	subs	r3, r2, r3
 8011264:	2b02      	cmp	r3, #2
 8011266:	d901      	bls.n	801126c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8011268:	2303      	movs	r3, #3
 801126a:	e099      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801126c:	4b24      	ldr	r3, [pc, #144]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011274:	2b00      	cmp	r3, #0
 8011276:	d1f0      	bne.n	801125a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011278:	4b21      	ldr	r3, [pc, #132]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 801127a:	68da      	ldr	r2, [r3, #12]
 801127c:	4b21      	ldr	r3, [pc, #132]	; (8011304 <HAL_RCC_OscConfig+0x788>)
 801127e:	4013      	ands	r3, r2
 8011280:	687a      	ldr	r2, [r7, #4]
 8011282:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8011284:	687a      	ldr	r2, [r7, #4]
 8011286:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011288:	3a01      	subs	r2, #1
 801128a:	0112      	lsls	r2, r2, #4
 801128c:	4311      	orrs	r1, r2
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011292:	0212      	lsls	r2, r2, #8
 8011294:	4311      	orrs	r1, r2
 8011296:	687a      	ldr	r2, [r7, #4]
 8011298:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801129a:	0852      	lsrs	r2, r2, #1
 801129c:	3a01      	subs	r2, #1
 801129e:	0552      	lsls	r2, r2, #21
 80112a0:	4311      	orrs	r1, r2
 80112a2:	687a      	ldr	r2, [r7, #4]
 80112a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80112a6:	0852      	lsrs	r2, r2, #1
 80112a8:	3a01      	subs	r2, #1
 80112aa:	0652      	lsls	r2, r2, #25
 80112ac:	4311      	orrs	r1, r2
 80112ae:	687a      	ldr	r2, [r7, #4]
 80112b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80112b2:	06d2      	lsls	r2, r2, #27
 80112b4:	430a      	orrs	r2, r1
 80112b6:	4912      	ldr	r1, [pc, #72]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 80112b8:	4313      	orrs	r3, r2
 80112ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80112bc:	4b10      	ldr	r3, [pc, #64]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	4a0f      	ldr	r2, [pc, #60]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 80112c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80112c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80112c8:	4b0d      	ldr	r3, [pc, #52]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 80112ca:	68db      	ldr	r3, [r3, #12]
 80112cc:	4a0c      	ldr	r2, [pc, #48]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 80112ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80112d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80112d4:	f7fa fed2 	bl	800c07c <HAL_GetTick>
 80112d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80112da:	e008      	b.n	80112ee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80112dc:	f7fa fece 	bl	800c07c <HAL_GetTick>
 80112e0:	4602      	mov	r2, r0
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	1ad3      	subs	r3, r2, r3
 80112e6:	2b02      	cmp	r3, #2
 80112e8:	d901      	bls.n	80112ee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80112ea:	2303      	movs	r3, #3
 80112ec:	e058      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80112ee:	4b04      	ldr	r3, [pc, #16]	; (8011300 <HAL_RCC_OscConfig+0x784>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d0f0      	beq.n	80112dc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80112fa:	e050      	b.n	801139e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80112fc:	2301      	movs	r3, #1
 80112fe:	e04f      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
 8011300:	40021000 	.word	0x40021000
 8011304:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011308:	4b27      	ldr	r3, [pc, #156]	; (80113a8 <HAL_RCC_OscConfig+0x82c>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011310:	2b00      	cmp	r3, #0
 8011312:	d144      	bne.n	801139e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8011314:	4b24      	ldr	r3, [pc, #144]	; (80113a8 <HAL_RCC_OscConfig+0x82c>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	4a23      	ldr	r2, [pc, #140]	; (80113a8 <HAL_RCC_OscConfig+0x82c>)
 801131a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801131e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8011320:	4b21      	ldr	r3, [pc, #132]	; (80113a8 <HAL_RCC_OscConfig+0x82c>)
 8011322:	68db      	ldr	r3, [r3, #12]
 8011324:	4a20      	ldr	r2, [pc, #128]	; (80113a8 <HAL_RCC_OscConfig+0x82c>)
 8011326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801132a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801132c:	f7fa fea6 	bl	800c07c <HAL_GetTick>
 8011330:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011332:	e008      	b.n	8011346 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011334:	f7fa fea2 	bl	800c07c <HAL_GetTick>
 8011338:	4602      	mov	r2, r0
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	1ad3      	subs	r3, r2, r3
 801133e:	2b02      	cmp	r3, #2
 8011340:	d901      	bls.n	8011346 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8011342:	2303      	movs	r3, #3
 8011344:	e02c      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011346:	4b18      	ldr	r3, [pc, #96]	; (80113a8 <HAL_RCC_OscConfig+0x82c>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801134e:	2b00      	cmp	r3, #0
 8011350:	d0f0      	beq.n	8011334 <HAL_RCC_OscConfig+0x7b8>
 8011352:	e024      	b.n	801139e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011354:	69bb      	ldr	r3, [r7, #24]
 8011356:	2b0c      	cmp	r3, #12
 8011358:	d01f      	beq.n	801139a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801135a:	4b13      	ldr	r3, [pc, #76]	; (80113a8 <HAL_RCC_OscConfig+0x82c>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	4a12      	ldr	r2, [pc, #72]	; (80113a8 <HAL_RCC_OscConfig+0x82c>)
 8011360:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011366:	f7fa fe89 	bl	800c07c <HAL_GetTick>
 801136a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801136c:	e008      	b.n	8011380 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801136e:	f7fa fe85 	bl	800c07c <HAL_GetTick>
 8011372:	4602      	mov	r2, r0
 8011374:	693b      	ldr	r3, [r7, #16]
 8011376:	1ad3      	subs	r3, r2, r3
 8011378:	2b02      	cmp	r3, #2
 801137a:	d901      	bls.n	8011380 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 801137c:	2303      	movs	r3, #3
 801137e:	e00f      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011380:	4b09      	ldr	r3, [pc, #36]	; (80113a8 <HAL_RCC_OscConfig+0x82c>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011388:	2b00      	cmp	r3, #0
 801138a:	d1f0      	bne.n	801136e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 801138c:	4b06      	ldr	r3, [pc, #24]	; (80113a8 <HAL_RCC_OscConfig+0x82c>)
 801138e:	68da      	ldr	r2, [r3, #12]
 8011390:	4905      	ldr	r1, [pc, #20]	; (80113a8 <HAL_RCC_OscConfig+0x82c>)
 8011392:	4b06      	ldr	r3, [pc, #24]	; (80113ac <HAL_RCC_OscConfig+0x830>)
 8011394:	4013      	ands	r3, r2
 8011396:	60cb      	str	r3, [r1, #12]
 8011398:	e001      	b.n	801139e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801139a:	2301      	movs	r3, #1
 801139c:	e000      	b.n	80113a0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 801139e:	2300      	movs	r3, #0
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	3720      	adds	r7, #32
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	40021000 	.word	0x40021000
 80113ac:	feeefffc 	.word	0xfeeefffc

080113b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b084      	sub	sp, #16
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d101      	bne.n	80113c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80113c0:	2301      	movs	r3, #1
 80113c2:	e0e7      	b.n	8011594 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80113c4:	4b75      	ldr	r3, [pc, #468]	; (801159c <HAL_RCC_ClockConfig+0x1ec>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	f003 0307 	and.w	r3, r3, #7
 80113cc:	683a      	ldr	r2, [r7, #0]
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d910      	bls.n	80113f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80113d2:	4b72      	ldr	r3, [pc, #456]	; (801159c <HAL_RCC_ClockConfig+0x1ec>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f023 0207 	bic.w	r2, r3, #7
 80113da:	4970      	ldr	r1, [pc, #448]	; (801159c <HAL_RCC_ClockConfig+0x1ec>)
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	4313      	orrs	r3, r2
 80113e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80113e2:	4b6e      	ldr	r3, [pc, #440]	; (801159c <HAL_RCC_ClockConfig+0x1ec>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f003 0307 	and.w	r3, r3, #7
 80113ea:	683a      	ldr	r2, [r7, #0]
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d001      	beq.n	80113f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80113f0:	2301      	movs	r3, #1
 80113f2:	e0cf      	b.n	8011594 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f003 0302 	and.w	r3, r3, #2
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d010      	beq.n	8011422 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	689a      	ldr	r2, [r3, #8]
 8011404:	4b66      	ldr	r3, [pc, #408]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 8011406:	689b      	ldr	r3, [r3, #8]
 8011408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801140c:	429a      	cmp	r2, r3
 801140e:	d908      	bls.n	8011422 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011410:	4b63      	ldr	r3, [pc, #396]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 8011412:	689b      	ldr	r3, [r3, #8]
 8011414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	689b      	ldr	r3, [r3, #8]
 801141c:	4960      	ldr	r1, [pc, #384]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 801141e:	4313      	orrs	r3, r2
 8011420:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	f003 0301 	and.w	r3, r3, #1
 801142a:	2b00      	cmp	r3, #0
 801142c:	d04c      	beq.n	80114c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	685b      	ldr	r3, [r3, #4]
 8011432:	2b03      	cmp	r3, #3
 8011434:	d107      	bne.n	8011446 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011436:	4b5a      	ldr	r3, [pc, #360]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801143e:	2b00      	cmp	r3, #0
 8011440:	d121      	bne.n	8011486 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8011442:	2301      	movs	r3, #1
 8011444:	e0a6      	b.n	8011594 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	2b02      	cmp	r3, #2
 801144c:	d107      	bne.n	801145e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801144e:	4b54      	ldr	r3, [pc, #336]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011456:	2b00      	cmp	r3, #0
 8011458:	d115      	bne.n	8011486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801145a:	2301      	movs	r3, #1
 801145c:	e09a      	b.n	8011594 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d107      	bne.n	8011476 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8011466:	4b4e      	ldr	r3, [pc, #312]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	f003 0302 	and.w	r3, r3, #2
 801146e:	2b00      	cmp	r3, #0
 8011470:	d109      	bne.n	8011486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8011472:	2301      	movs	r3, #1
 8011474:	e08e      	b.n	8011594 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011476:	4b4a      	ldr	r3, [pc, #296]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801147e:	2b00      	cmp	r3, #0
 8011480:	d101      	bne.n	8011486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8011482:	2301      	movs	r3, #1
 8011484:	e086      	b.n	8011594 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011486:	4b46      	ldr	r3, [pc, #280]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 8011488:	689b      	ldr	r3, [r3, #8]
 801148a:	f023 0203 	bic.w	r2, r3, #3
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	4943      	ldr	r1, [pc, #268]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 8011494:	4313      	orrs	r3, r2
 8011496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011498:	f7fa fdf0 	bl	800c07c <HAL_GetTick>
 801149c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801149e:	e00a      	b.n	80114b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80114a0:	f7fa fdec 	bl	800c07c <HAL_GetTick>
 80114a4:	4602      	mov	r2, r0
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	1ad3      	subs	r3, r2, r3
 80114aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d901      	bls.n	80114b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80114b2:	2303      	movs	r3, #3
 80114b4:	e06e      	b.n	8011594 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80114b6:	4b3a      	ldr	r3, [pc, #232]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 80114b8:	689b      	ldr	r3, [r3, #8]
 80114ba:	f003 020c 	and.w	r2, r3, #12
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	685b      	ldr	r3, [r3, #4]
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d1eb      	bne.n	80114a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	f003 0302 	and.w	r3, r3, #2
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d010      	beq.n	80114f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	689a      	ldr	r2, [r3, #8]
 80114d8:	4b31      	ldr	r3, [pc, #196]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 80114da:	689b      	ldr	r3, [r3, #8]
 80114dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d208      	bcs.n	80114f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80114e4:	4b2e      	ldr	r3, [pc, #184]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 80114e6:	689b      	ldr	r3, [r3, #8]
 80114e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	689b      	ldr	r3, [r3, #8]
 80114f0:	492b      	ldr	r1, [pc, #172]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 80114f2:	4313      	orrs	r3, r2
 80114f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80114f6:	4b29      	ldr	r3, [pc, #164]	; (801159c <HAL_RCC_ClockConfig+0x1ec>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	f003 0307 	and.w	r3, r3, #7
 80114fe:	683a      	ldr	r2, [r7, #0]
 8011500:	429a      	cmp	r2, r3
 8011502:	d210      	bcs.n	8011526 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011504:	4b25      	ldr	r3, [pc, #148]	; (801159c <HAL_RCC_ClockConfig+0x1ec>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	f023 0207 	bic.w	r2, r3, #7
 801150c:	4923      	ldr	r1, [pc, #140]	; (801159c <HAL_RCC_ClockConfig+0x1ec>)
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	4313      	orrs	r3, r2
 8011512:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011514:	4b21      	ldr	r3, [pc, #132]	; (801159c <HAL_RCC_ClockConfig+0x1ec>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	f003 0307 	and.w	r3, r3, #7
 801151c:	683a      	ldr	r2, [r7, #0]
 801151e:	429a      	cmp	r2, r3
 8011520:	d001      	beq.n	8011526 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8011522:	2301      	movs	r3, #1
 8011524:	e036      	b.n	8011594 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	f003 0304 	and.w	r3, r3, #4
 801152e:	2b00      	cmp	r3, #0
 8011530:	d008      	beq.n	8011544 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011532:	4b1b      	ldr	r3, [pc, #108]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 8011534:	689b      	ldr	r3, [r3, #8]
 8011536:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	4918      	ldr	r1, [pc, #96]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 8011540:	4313      	orrs	r3, r2
 8011542:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	f003 0308 	and.w	r3, r3, #8
 801154c:	2b00      	cmp	r3, #0
 801154e:	d009      	beq.n	8011564 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011550:	4b13      	ldr	r3, [pc, #76]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 8011552:	689b      	ldr	r3, [r3, #8]
 8011554:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	691b      	ldr	r3, [r3, #16]
 801155c:	00db      	lsls	r3, r3, #3
 801155e:	4910      	ldr	r1, [pc, #64]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 8011560:	4313      	orrs	r3, r2
 8011562:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8011564:	f000 f824 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 8011568:	4602      	mov	r2, r0
 801156a:	4b0d      	ldr	r3, [pc, #52]	; (80115a0 <HAL_RCC_ClockConfig+0x1f0>)
 801156c:	689b      	ldr	r3, [r3, #8]
 801156e:	091b      	lsrs	r3, r3, #4
 8011570:	f003 030f 	and.w	r3, r3, #15
 8011574:	490b      	ldr	r1, [pc, #44]	; (80115a4 <HAL_RCC_ClockConfig+0x1f4>)
 8011576:	5ccb      	ldrb	r3, [r1, r3]
 8011578:	f003 031f 	and.w	r3, r3, #31
 801157c:	fa22 f303 	lsr.w	r3, r2, r3
 8011580:	4a09      	ldr	r2, [pc, #36]	; (80115a8 <HAL_RCC_ClockConfig+0x1f8>)
 8011582:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8011584:	4b09      	ldr	r3, [pc, #36]	; (80115ac <HAL_RCC_ClockConfig+0x1fc>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	4618      	mov	r0, r3
 801158a:	f7fa fd27 	bl	800bfdc <HAL_InitTick>
 801158e:	4603      	mov	r3, r0
 8011590:	72fb      	strb	r3, [r7, #11]

  return status;
 8011592:	7afb      	ldrb	r3, [r7, #11]
}
 8011594:	4618      	mov	r0, r3
 8011596:	3710      	adds	r7, #16
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}
 801159c:	40022000 	.word	0x40022000
 80115a0:	40021000 	.word	0x40021000
 80115a4:	0801b96c 	.word	0x0801b96c
 80115a8:	200001a0 	.word	0x200001a0
 80115ac:	2000055c 	.word	0x2000055c

080115b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80115b0:	b480      	push	{r7}
 80115b2:	b089      	sub	sp, #36	; 0x24
 80115b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80115b6:	2300      	movs	r3, #0
 80115b8:	61fb      	str	r3, [r7, #28]
 80115ba:	2300      	movs	r3, #0
 80115bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80115be:	4b3e      	ldr	r3, [pc, #248]	; (80116b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80115c0:	689b      	ldr	r3, [r3, #8]
 80115c2:	f003 030c 	and.w	r3, r3, #12
 80115c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80115c8:	4b3b      	ldr	r3, [pc, #236]	; (80116b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80115ca:	68db      	ldr	r3, [r3, #12]
 80115cc:	f003 0303 	and.w	r3, r3, #3
 80115d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d005      	beq.n	80115e4 <HAL_RCC_GetSysClockFreq+0x34>
 80115d8:	693b      	ldr	r3, [r7, #16]
 80115da:	2b0c      	cmp	r3, #12
 80115dc:	d121      	bne.n	8011622 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2b01      	cmp	r3, #1
 80115e2:	d11e      	bne.n	8011622 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80115e4:	4b34      	ldr	r3, [pc, #208]	; (80116b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	f003 0308 	and.w	r3, r3, #8
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d107      	bne.n	8011600 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80115f0:	4b31      	ldr	r3, [pc, #196]	; (80116b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80115f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80115f6:	0a1b      	lsrs	r3, r3, #8
 80115f8:	f003 030f 	and.w	r3, r3, #15
 80115fc:	61fb      	str	r3, [r7, #28]
 80115fe:	e005      	b.n	801160c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8011600:	4b2d      	ldr	r3, [pc, #180]	; (80116b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	091b      	lsrs	r3, r3, #4
 8011606:	f003 030f 	and.w	r3, r3, #15
 801160a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 801160c:	4a2b      	ldr	r2, [pc, #172]	; (80116bc <HAL_RCC_GetSysClockFreq+0x10c>)
 801160e:	69fb      	ldr	r3, [r7, #28]
 8011610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011614:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8011616:	693b      	ldr	r3, [r7, #16]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d10d      	bne.n	8011638 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 801161c:	69fb      	ldr	r3, [r7, #28]
 801161e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8011620:	e00a      	b.n	8011638 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	2b04      	cmp	r3, #4
 8011626:	d102      	bne.n	801162e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8011628:	4b25      	ldr	r3, [pc, #148]	; (80116c0 <HAL_RCC_GetSysClockFreq+0x110>)
 801162a:	61bb      	str	r3, [r7, #24]
 801162c:	e004      	b.n	8011638 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801162e:	693b      	ldr	r3, [r7, #16]
 8011630:	2b08      	cmp	r3, #8
 8011632:	d101      	bne.n	8011638 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8011634:	4b23      	ldr	r3, [pc, #140]	; (80116c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8011636:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	2b0c      	cmp	r3, #12
 801163c:	d134      	bne.n	80116a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801163e:	4b1e      	ldr	r3, [pc, #120]	; (80116b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8011640:	68db      	ldr	r3, [r3, #12]
 8011642:	f003 0303 	and.w	r3, r3, #3
 8011646:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	2b02      	cmp	r3, #2
 801164c:	d003      	beq.n	8011656 <HAL_RCC_GetSysClockFreq+0xa6>
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	2b03      	cmp	r3, #3
 8011652:	d003      	beq.n	801165c <HAL_RCC_GetSysClockFreq+0xac>
 8011654:	e005      	b.n	8011662 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8011656:	4b1a      	ldr	r3, [pc, #104]	; (80116c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8011658:	617b      	str	r3, [r7, #20]
      break;
 801165a:	e005      	b.n	8011668 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 801165c:	4b19      	ldr	r3, [pc, #100]	; (80116c4 <HAL_RCC_GetSysClockFreq+0x114>)
 801165e:	617b      	str	r3, [r7, #20]
      break;
 8011660:	e002      	b.n	8011668 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8011662:	69fb      	ldr	r3, [r7, #28]
 8011664:	617b      	str	r3, [r7, #20]
      break;
 8011666:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8011668:	4b13      	ldr	r3, [pc, #76]	; (80116b8 <HAL_RCC_GetSysClockFreq+0x108>)
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	091b      	lsrs	r3, r3, #4
 801166e:	f003 0307 	and.w	r3, r3, #7
 8011672:	3301      	adds	r3, #1
 8011674:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8011676:	4b10      	ldr	r3, [pc, #64]	; (80116b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8011678:	68db      	ldr	r3, [r3, #12]
 801167a:	0a1b      	lsrs	r3, r3, #8
 801167c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011680:	697a      	ldr	r2, [r7, #20]
 8011682:	fb03 f202 	mul.w	r2, r3, r2
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	fbb2 f3f3 	udiv	r3, r2, r3
 801168c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801168e:	4b0a      	ldr	r3, [pc, #40]	; (80116b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8011690:	68db      	ldr	r3, [r3, #12]
 8011692:	0e5b      	lsrs	r3, r3, #25
 8011694:	f003 0303 	and.w	r3, r3, #3
 8011698:	3301      	adds	r3, #1
 801169a:	005b      	lsls	r3, r3, #1
 801169c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801169e:	697a      	ldr	r2, [r7, #20]
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80116a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80116a8:	69bb      	ldr	r3, [r7, #24]
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3724      	adds	r7, #36	; 0x24
 80116ae:	46bd      	mov	sp, r7
 80116b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b4:	4770      	bx	lr
 80116b6:	bf00      	nop
 80116b8:	40021000 	.word	0x40021000
 80116bc:	0801b984 	.word	0x0801b984
 80116c0:	00f42400 	.word	0x00f42400
 80116c4:	007a1200 	.word	0x007a1200

080116c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80116c8:	b480      	push	{r7}
 80116ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80116cc:	4b03      	ldr	r3, [pc, #12]	; (80116dc <HAL_RCC_GetHCLKFreq+0x14>)
 80116ce:	681b      	ldr	r3, [r3, #0]
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	46bd      	mov	sp, r7
 80116d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d8:	4770      	bx	lr
 80116da:	bf00      	nop
 80116dc:	200001a0 	.word	0x200001a0

080116e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80116e4:	f7ff fff0 	bl	80116c8 <HAL_RCC_GetHCLKFreq>
 80116e8:	4602      	mov	r2, r0
 80116ea:	4b06      	ldr	r3, [pc, #24]	; (8011704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80116ec:	689b      	ldr	r3, [r3, #8]
 80116ee:	0a1b      	lsrs	r3, r3, #8
 80116f0:	f003 0307 	and.w	r3, r3, #7
 80116f4:	4904      	ldr	r1, [pc, #16]	; (8011708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80116f6:	5ccb      	ldrb	r3, [r1, r3]
 80116f8:	f003 031f 	and.w	r3, r3, #31
 80116fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011700:	4618      	mov	r0, r3
 8011702:	bd80      	pop	{r7, pc}
 8011704:	40021000 	.word	0x40021000
 8011708:	0801b97c 	.word	0x0801b97c

0801170c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8011710:	f7ff ffda 	bl	80116c8 <HAL_RCC_GetHCLKFreq>
 8011714:	4602      	mov	r2, r0
 8011716:	4b06      	ldr	r3, [pc, #24]	; (8011730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011718:	689b      	ldr	r3, [r3, #8]
 801171a:	0adb      	lsrs	r3, r3, #11
 801171c:	f003 0307 	and.w	r3, r3, #7
 8011720:	4904      	ldr	r1, [pc, #16]	; (8011734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8011722:	5ccb      	ldrb	r3, [r1, r3]
 8011724:	f003 031f 	and.w	r3, r3, #31
 8011728:	fa22 f303 	lsr.w	r3, r2, r3
}
 801172c:	4618      	mov	r0, r3
 801172e:	bd80      	pop	{r7, pc}
 8011730:	40021000 	.word	0x40021000
 8011734:	0801b97c 	.word	0x0801b97c

08011738 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b086      	sub	sp, #24
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8011740:	2300      	movs	r3, #0
 8011742:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8011744:	4b2a      	ldr	r3, [pc, #168]	; (80117f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801174c:	2b00      	cmp	r3, #0
 801174e:	d003      	beq.n	8011758 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8011750:	f7ff f886 	bl	8010860 <HAL_PWREx_GetVoltageRange>
 8011754:	6178      	str	r0, [r7, #20]
 8011756:	e014      	b.n	8011782 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8011758:	4b25      	ldr	r3, [pc, #148]	; (80117f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801175c:	4a24      	ldr	r2, [pc, #144]	; (80117f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801175e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011762:	6593      	str	r3, [r2, #88]	; 0x58
 8011764:	4b22      	ldr	r3, [pc, #136]	; (80117f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801176c:	60fb      	str	r3, [r7, #12]
 801176e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8011770:	f7ff f876 	bl	8010860 <HAL_PWREx_GetVoltageRange>
 8011774:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8011776:	4b1e      	ldr	r3, [pc, #120]	; (80117f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801177a:	4a1d      	ldr	r2, [pc, #116]	; (80117f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801177c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011780:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011788:	d10b      	bne.n	80117a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2b80      	cmp	r3, #128	; 0x80
 801178e:	d919      	bls.n	80117c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2ba0      	cmp	r3, #160	; 0xa0
 8011794:	d902      	bls.n	801179c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8011796:	2302      	movs	r3, #2
 8011798:	613b      	str	r3, [r7, #16]
 801179a:	e013      	b.n	80117c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801179c:	2301      	movs	r3, #1
 801179e:	613b      	str	r3, [r7, #16]
 80117a0:	e010      	b.n	80117c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2b80      	cmp	r3, #128	; 0x80
 80117a6:	d902      	bls.n	80117ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80117a8:	2303      	movs	r3, #3
 80117aa:	613b      	str	r3, [r7, #16]
 80117ac:	e00a      	b.n	80117c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2b80      	cmp	r3, #128	; 0x80
 80117b2:	d102      	bne.n	80117ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80117b4:	2302      	movs	r3, #2
 80117b6:	613b      	str	r3, [r7, #16]
 80117b8:	e004      	b.n	80117c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2b70      	cmp	r3, #112	; 0x70
 80117be:	d101      	bne.n	80117c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80117c0:	2301      	movs	r3, #1
 80117c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80117c4:	4b0b      	ldr	r3, [pc, #44]	; (80117f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	f023 0207 	bic.w	r2, r3, #7
 80117cc:	4909      	ldr	r1, [pc, #36]	; (80117f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	4313      	orrs	r3, r2
 80117d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80117d4:	4b07      	ldr	r3, [pc, #28]	; (80117f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	f003 0307 	and.w	r3, r3, #7
 80117dc:	693a      	ldr	r2, [r7, #16]
 80117de:	429a      	cmp	r2, r3
 80117e0:	d001      	beq.n	80117e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80117e2:	2301      	movs	r3, #1
 80117e4:	e000      	b.n	80117e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80117e6:	2300      	movs	r3, #0
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	3718      	adds	r7, #24
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}
 80117f0:	40021000 	.word	0x40021000
 80117f4:	40022000 	.word	0x40022000

080117f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b086      	sub	sp, #24
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011800:	2300      	movs	r3, #0
 8011802:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011804:	2300      	movs	r3, #0
 8011806:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011810:	2b00      	cmp	r3, #0
 8011812:	d041      	beq.n	8011898 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011818:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801181c:	d02a      	beq.n	8011874 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801181e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8011822:	d824      	bhi.n	801186e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8011824:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011828:	d008      	beq.n	801183c <HAL_RCCEx_PeriphCLKConfig+0x44>
 801182a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801182e:	d81e      	bhi.n	801186e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8011830:	2b00      	cmp	r3, #0
 8011832:	d00a      	beq.n	801184a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8011834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011838:	d010      	beq.n	801185c <HAL_RCCEx_PeriphCLKConfig+0x64>
 801183a:	e018      	b.n	801186e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801183c:	4b86      	ldr	r3, [pc, #536]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801183e:	68db      	ldr	r3, [r3, #12]
 8011840:	4a85      	ldr	r2, [pc, #532]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011846:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8011848:	e015      	b.n	8011876 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	3304      	adds	r3, #4
 801184e:	2100      	movs	r1, #0
 8011850:	4618      	mov	r0, r3
 8011852:	f001 f895 	bl	8012980 <RCCEx_PLLSAI1_Config>
 8011856:	4603      	mov	r3, r0
 8011858:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801185a:	e00c      	b.n	8011876 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	3320      	adds	r3, #32
 8011860:	2100      	movs	r1, #0
 8011862:	4618      	mov	r0, r3
 8011864:	f001 f97e 	bl	8012b64 <RCCEx_PLLSAI2_Config>
 8011868:	4603      	mov	r3, r0
 801186a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801186c:	e003      	b.n	8011876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801186e:	2301      	movs	r3, #1
 8011870:	74fb      	strb	r3, [r7, #19]
      break;
 8011872:	e000      	b.n	8011876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8011874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011876:	7cfb      	ldrb	r3, [r7, #19]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d10b      	bne.n	8011894 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801187c:	4b76      	ldr	r3, [pc, #472]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011882:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801188a:	4973      	ldr	r1, [pc, #460]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801188c:	4313      	orrs	r3, r2
 801188e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8011892:	e001      	b.n	8011898 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011894:	7cfb      	ldrb	r3, [r7, #19]
 8011896:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d041      	beq.n	8011928 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80118ac:	d02a      	beq.n	8011904 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80118ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80118b2:	d824      	bhi.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80118b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80118b8:	d008      	beq.n	80118cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80118ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80118be:	d81e      	bhi.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d00a      	beq.n	80118da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80118c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80118c8:	d010      	beq.n	80118ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80118ca:	e018      	b.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80118cc:	4b62      	ldr	r3, [pc, #392]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80118ce:	68db      	ldr	r3, [r3, #12]
 80118d0:	4a61      	ldr	r2, [pc, #388]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80118d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80118d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80118d8:	e015      	b.n	8011906 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	3304      	adds	r3, #4
 80118de:	2100      	movs	r1, #0
 80118e0:	4618      	mov	r0, r3
 80118e2:	f001 f84d 	bl	8012980 <RCCEx_PLLSAI1_Config>
 80118e6:	4603      	mov	r3, r0
 80118e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80118ea:	e00c      	b.n	8011906 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	3320      	adds	r3, #32
 80118f0:	2100      	movs	r1, #0
 80118f2:	4618      	mov	r0, r3
 80118f4:	f001 f936 	bl	8012b64 <RCCEx_PLLSAI2_Config>
 80118f8:	4603      	mov	r3, r0
 80118fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80118fc:	e003      	b.n	8011906 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80118fe:	2301      	movs	r3, #1
 8011900:	74fb      	strb	r3, [r7, #19]
      break;
 8011902:	e000      	b.n	8011906 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8011904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011906:	7cfb      	ldrb	r3, [r7, #19]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d10b      	bne.n	8011924 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801190c:	4b52      	ldr	r3, [pc, #328]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011912:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801191a:	494f      	ldr	r1, [pc, #316]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801191c:	4313      	orrs	r3, r2
 801191e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8011922:	e001      	b.n	8011928 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011924:	7cfb      	ldrb	r3, [r7, #19]
 8011926:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011930:	2b00      	cmp	r3, #0
 8011932:	f000 80a0 	beq.w	8011a76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011936:	2300      	movs	r3, #0
 8011938:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801193a:	4b47      	ldr	r3, [pc, #284]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011942:	2b00      	cmp	r3, #0
 8011944:	d101      	bne.n	801194a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8011946:	2301      	movs	r3, #1
 8011948:	e000      	b.n	801194c <HAL_RCCEx_PeriphCLKConfig+0x154>
 801194a:	2300      	movs	r3, #0
 801194c:	2b00      	cmp	r3, #0
 801194e:	d00d      	beq.n	801196c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011950:	4b41      	ldr	r3, [pc, #260]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011954:	4a40      	ldr	r2, [pc, #256]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801195a:	6593      	str	r3, [r2, #88]	; 0x58
 801195c:	4b3e      	ldr	r3, [pc, #248]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011964:	60bb      	str	r3, [r7, #8]
 8011966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011968:	2301      	movs	r3, #1
 801196a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801196c:	4b3b      	ldr	r3, [pc, #236]	; (8011a5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	4a3a      	ldr	r2, [pc, #232]	; (8011a5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8011972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011976:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011978:	f7fa fb80 	bl	800c07c <HAL_GetTick>
 801197c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801197e:	e009      	b.n	8011994 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011980:	f7fa fb7c 	bl	800c07c <HAL_GetTick>
 8011984:	4602      	mov	r2, r0
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	1ad3      	subs	r3, r2, r3
 801198a:	2b02      	cmp	r3, #2
 801198c:	d902      	bls.n	8011994 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 801198e:	2303      	movs	r3, #3
 8011990:	74fb      	strb	r3, [r7, #19]
        break;
 8011992:	e005      	b.n	80119a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8011994:	4b31      	ldr	r3, [pc, #196]	; (8011a5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801199c:	2b00      	cmp	r3, #0
 801199e:	d0ef      	beq.n	8011980 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80119a0:	7cfb      	ldrb	r3, [r7, #19]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d15c      	bne.n	8011a60 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80119a6:	4b2c      	ldr	r3, [pc, #176]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80119a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80119b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d01f      	beq.n	80119f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119be:	697a      	ldr	r2, [r7, #20]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d019      	beq.n	80119f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80119c4:	4b24      	ldr	r3, [pc, #144]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80119c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80119ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80119d0:	4b21      	ldr	r3, [pc, #132]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80119d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119d6:	4a20      	ldr	r2, [pc, #128]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80119d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80119dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80119e0:	4b1d      	ldr	r3, [pc, #116]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80119e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119e6:	4a1c      	ldr	r2, [pc, #112]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80119e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80119ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80119f0:	4a19      	ldr	r2, [pc, #100]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	f003 0301 	and.w	r3, r3, #1
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d016      	beq.n	8011a30 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011a02:	f7fa fb3b 	bl	800c07c <HAL_GetTick>
 8011a06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011a08:	e00b      	b.n	8011a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011a0a:	f7fa fb37 	bl	800c07c <HAL_GetTick>
 8011a0e:	4602      	mov	r2, r0
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	1ad3      	subs	r3, r2, r3
 8011a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a18:	4293      	cmp	r3, r2
 8011a1a:	d902      	bls.n	8011a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8011a1c:	2303      	movs	r3, #3
 8011a1e:	74fb      	strb	r3, [r7, #19]
            break;
 8011a20:	e006      	b.n	8011a30 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011a22:	4b0d      	ldr	r3, [pc, #52]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a28:	f003 0302 	and.w	r3, r3, #2
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d0ec      	beq.n	8011a0a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8011a30:	7cfb      	ldrb	r3, [r7, #19]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d10c      	bne.n	8011a50 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011a36:	4b08      	ldr	r3, [pc, #32]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a46:	4904      	ldr	r1, [pc, #16]	; (8011a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011a48:	4313      	orrs	r3, r2
 8011a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8011a4e:	e009      	b.n	8011a64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011a50:	7cfb      	ldrb	r3, [r7, #19]
 8011a52:	74bb      	strb	r3, [r7, #18]
 8011a54:	e006      	b.n	8011a64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8011a56:	bf00      	nop
 8011a58:	40021000 	.word	0x40021000
 8011a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a60:	7cfb      	ldrb	r3, [r7, #19]
 8011a62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011a64:	7c7b      	ldrb	r3, [r7, #17]
 8011a66:	2b01      	cmp	r3, #1
 8011a68:	d105      	bne.n	8011a76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011a6a:	4ba6      	ldr	r3, [pc, #664]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a6e:	4aa5      	ldr	r2, [pc, #660]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011a74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	f003 0301 	and.w	r3, r3, #1
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d00a      	beq.n	8011a98 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011a82:	4ba0      	ldr	r3, [pc, #640]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a88:	f023 0203 	bic.w	r2, r3, #3
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a90:	499c      	ldr	r1, [pc, #624]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011a92:	4313      	orrs	r3, r2
 8011a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	f003 0302 	and.w	r3, r3, #2
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d00a      	beq.n	8011aba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011aa4:	4b97      	ldr	r3, [pc, #604]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011aaa:	f023 020c 	bic.w	r2, r3, #12
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ab2:	4994      	ldr	r1, [pc, #592]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011ab4:	4313      	orrs	r3, r2
 8011ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	f003 0304 	and.w	r3, r3, #4
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d00a      	beq.n	8011adc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011ac6:	4b8f      	ldr	r3, [pc, #572]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011acc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ad4:	498b      	ldr	r1, [pc, #556]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011ad6:	4313      	orrs	r3, r2
 8011ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	f003 0308 	and.w	r3, r3, #8
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d00a      	beq.n	8011afe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8011ae8:	4b86      	ldr	r3, [pc, #536]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011aee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011af6:	4983      	ldr	r1, [pc, #524]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011af8:	4313      	orrs	r3, r2
 8011afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	f003 0310 	and.w	r3, r3, #16
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d00a      	beq.n	8011b20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8011b0a:	4b7e      	ldr	r3, [pc, #504]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b18:	497a      	ldr	r1, [pc, #488]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b1a:	4313      	orrs	r3, r2
 8011b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	f003 0320 	and.w	r3, r3, #32
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d00a      	beq.n	8011b42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011b2c:	4b75      	ldr	r3, [pc, #468]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b3a:	4972      	ldr	r1, [pc, #456]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b3c:	4313      	orrs	r3, r2
 8011b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d00a      	beq.n	8011b64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011b4e:	4b6d      	ldr	r3, [pc, #436]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011b5c:	4969      	ldr	r1, [pc, #420]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b5e:	4313      	orrs	r3, r2
 8011b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d00a      	beq.n	8011b86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011b70:	4b64      	ldr	r3, [pc, #400]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011b7e:	4961      	ldr	r1, [pc, #388]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b80:	4313      	orrs	r3, r2
 8011b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d00a      	beq.n	8011ba8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011b92:	4b5c      	ldr	r3, [pc, #368]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ba0:	4958      	ldr	r1, [pc, #352]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011ba2:	4313      	orrs	r3, r2
 8011ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d00a      	beq.n	8011bca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8011bb4:	4b53      	ldr	r3, [pc, #332]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011bba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bc2:	4950      	ldr	r1, [pc, #320]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011bc4:	4313      	orrs	r3, r2
 8011bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d00a      	beq.n	8011bec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8011bd6:	4b4b      	ldr	r3, [pc, #300]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011bdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011be4:	4947      	ldr	r1, [pc, #284]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011be6:	4313      	orrs	r3, r2
 8011be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d00a      	beq.n	8011c0e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011bf8:	4b42      	ldr	r3, [pc, #264]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011bfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011bfe:	f023 0203 	bic.w	r2, r3, #3
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011c06:	493f      	ldr	r1, [pc, #252]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c08:	4313      	orrs	r3, r2
 8011c0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d028      	beq.n	8011c6c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011c1a:	4b3a      	ldr	r3, [pc, #232]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c28:	4936      	ldr	r1, [pc, #216]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c2a:	4313      	orrs	r3, r2
 8011c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011c38:	d106      	bne.n	8011c48 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011c3a:	4b32      	ldr	r3, [pc, #200]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c3c:	68db      	ldr	r3, [r3, #12]
 8011c3e:	4a31      	ldr	r2, [pc, #196]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011c44:	60d3      	str	r3, [r2, #12]
 8011c46:	e011      	b.n	8011c6c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011c50:	d10c      	bne.n	8011c6c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	3304      	adds	r3, #4
 8011c56:	2101      	movs	r1, #1
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f000 fe91 	bl	8012980 <RCCEx_PLLSAI1_Config>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8011c62:	7cfb      	ldrb	r3, [r7, #19]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d001      	beq.n	8011c6c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8011c68:	7cfb      	ldrb	r3, [r7, #19]
 8011c6a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d028      	beq.n	8011cca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8011c78:	4b22      	ldr	r3, [pc, #136]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c86:	491f      	ldr	r1, [pc, #124]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c88:	4313      	orrs	r3, r2
 8011c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011c96:	d106      	bne.n	8011ca6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011c98:	4b1a      	ldr	r3, [pc, #104]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c9a:	68db      	ldr	r3, [r3, #12]
 8011c9c:	4a19      	ldr	r2, [pc, #100]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011ca2:	60d3      	str	r3, [r2, #12]
 8011ca4:	e011      	b.n	8011cca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011caa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011cae:	d10c      	bne.n	8011cca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	3304      	adds	r3, #4
 8011cb4:	2101      	movs	r1, #1
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f000 fe62 	bl	8012980 <RCCEx_PLLSAI1_Config>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011cc0:	7cfb      	ldrb	r3, [r7, #19]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d001      	beq.n	8011cca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8011cc6:	7cfb      	ldrb	r3, [r7, #19]
 8011cc8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d02a      	beq.n	8011d2c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011cd6:	4b0b      	ldr	r3, [pc, #44]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cdc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ce4:	4907      	ldr	r1, [pc, #28]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011ce6:	4313      	orrs	r3, r2
 8011ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011cf4:	d108      	bne.n	8011d08 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011cf6:	4b03      	ldr	r3, [pc, #12]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011cf8:	68db      	ldr	r3, [r3, #12]
 8011cfa:	4a02      	ldr	r2, [pc, #8]	; (8011d04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011cfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d00:	60d3      	str	r3, [r2, #12]
 8011d02:	e013      	b.n	8011d2c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8011d04:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011d10:	d10c      	bne.n	8011d2c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	3304      	adds	r3, #4
 8011d16:	2101      	movs	r1, #1
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f000 fe31 	bl	8012980 <RCCEx_PLLSAI1_Config>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011d22:	7cfb      	ldrb	r3, [r7, #19]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d001      	beq.n	8011d2c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8011d28:	7cfb      	ldrb	r3, [r7, #19]
 8011d2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d02f      	beq.n	8011d98 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011d38:	4b2c      	ldr	r3, [pc, #176]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d46:	4929      	ldr	r1, [pc, #164]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011d48:	4313      	orrs	r3, r2
 8011d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011d56:	d10d      	bne.n	8011d74 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	3304      	adds	r3, #4
 8011d5c:	2102      	movs	r1, #2
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f000 fe0e 	bl	8012980 <RCCEx_PLLSAI1_Config>
 8011d64:	4603      	mov	r3, r0
 8011d66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011d68:	7cfb      	ldrb	r3, [r7, #19]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d014      	beq.n	8011d98 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8011d6e:	7cfb      	ldrb	r3, [r7, #19]
 8011d70:	74bb      	strb	r3, [r7, #18]
 8011d72:	e011      	b.n	8011d98 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011d7c:	d10c      	bne.n	8011d98 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	3320      	adds	r3, #32
 8011d82:	2102      	movs	r1, #2
 8011d84:	4618      	mov	r0, r3
 8011d86:	f000 feed 	bl	8012b64 <RCCEx_PLLSAI2_Config>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011d8e:	7cfb      	ldrb	r3, [r7, #19]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d001      	beq.n	8011d98 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8011d94:	7cfb      	ldrb	r3, [r7, #19]
 8011d96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d00b      	beq.n	8011dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011da4:	4b11      	ldr	r3, [pc, #68]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011daa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011db4:	490d      	ldr	r1, [pc, #52]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011db6:	4313      	orrs	r3, r2
 8011db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d00b      	beq.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011dc8:	4b08      	ldr	r3, [pc, #32]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011dce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011dd8:	4904      	ldr	r1, [pc, #16]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011dda:	4313      	orrs	r3, r2
 8011ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8011de0:	7cbb      	ldrb	r3, [r7, #18]
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3718      	adds	r7, #24
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}
 8011dea:	bf00      	nop
 8011dec:	40021000 	.word	0x40021000

08011df0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b088      	sub	sp, #32
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011e02:	d13e      	bne.n	8011e82 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8011e04:	4bb4      	ldr	r3, [pc, #720]	; (80120d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011e0e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011e16:	d028      	beq.n	8011e6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011e1e:	f200 858c 	bhi.w	801293a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e28:	d005      	beq.n	8011e36 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e30:	d00e      	beq.n	8011e50 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8011e32:	f000 bd82 	b.w	801293a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011e36:	4ba8      	ldr	r3, [pc, #672]	; (80120d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e3c:	f003 0302 	and.w	r3, r3, #2
 8011e40:	2b02      	cmp	r3, #2
 8011e42:	f040 857c 	bne.w	801293e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 8011e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e4a:	61fb      	str	r3, [r7, #28]
      break;
 8011e4c:	f000 bd77 	b.w	801293e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8011e50:	4ba1      	ldr	r3, [pc, #644]	; (80120d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011e56:	f003 0302 	and.w	r3, r3, #2
 8011e5a:	2b02      	cmp	r3, #2
 8011e5c:	f040 8571 	bne.w	8012942 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 8011e60:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8011e64:	61fb      	str	r3, [r7, #28]
      break;
 8011e66:	f000 bd6c 	b.w	8012942 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011e6a:	4b9b      	ldr	r3, [pc, #620]	; (80120d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011e72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011e76:	f040 8566 	bne.w	8012946 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 8011e7a:	4b98      	ldr	r3, [pc, #608]	; (80120dc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8011e7c:	61fb      	str	r3, [r7, #28]
      break;
 8011e7e:	f000 bd62 	b.w	8012946 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011e82:	4b95      	ldr	r3, [pc, #596]	; (80120d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011e84:	68db      	ldr	r3, [r3, #12]
 8011e86:	f003 0303 	and.w	r3, r3, #3
 8011e8a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8011e8c:	697b      	ldr	r3, [r7, #20]
 8011e8e:	2b03      	cmp	r3, #3
 8011e90:	d036      	beq.n	8011f00 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8011e92:	697b      	ldr	r3, [r7, #20]
 8011e94:	2b03      	cmp	r3, #3
 8011e96:	d840      	bhi.n	8011f1a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	2b01      	cmp	r3, #1
 8011e9c:	d003      	beq.n	8011ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	2b02      	cmp	r3, #2
 8011ea2:	d020      	beq.n	8011ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8011ea4:	e039      	b.n	8011f1a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8011ea6:	4b8c      	ldr	r3, [pc, #560]	; (80120d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	f003 0302 	and.w	r3, r3, #2
 8011eae:	2b02      	cmp	r3, #2
 8011eb0:	d116      	bne.n	8011ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8011eb2:	4b89      	ldr	r3, [pc, #548]	; (80120d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f003 0308 	and.w	r3, r3, #8
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d005      	beq.n	8011eca <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8011ebe:	4b86      	ldr	r3, [pc, #536]	; (80120d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	091b      	lsrs	r3, r3, #4
 8011ec4:	f003 030f 	and.w	r3, r3, #15
 8011ec8:	e005      	b.n	8011ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8011eca:	4b83      	ldr	r3, [pc, #524]	; (80120d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011ed0:	0a1b      	lsrs	r3, r3, #8
 8011ed2:	f003 030f 	and.w	r3, r3, #15
 8011ed6:	4a82      	ldr	r2, [pc, #520]	; (80120e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8011ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011edc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8011ede:	e01f      	b.n	8011f20 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	61bb      	str	r3, [r7, #24]
      break;
 8011ee4:	e01c      	b.n	8011f20 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011ee6:	4b7c      	ldr	r3, [pc, #496]	; (80120d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ef2:	d102      	bne.n	8011efa <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8011ef4:	4b7b      	ldr	r3, [pc, #492]	; (80120e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8011ef6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8011ef8:	e012      	b.n	8011f20 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8011efa:	2300      	movs	r3, #0
 8011efc:	61bb      	str	r3, [r7, #24]
      break;
 8011efe:	e00f      	b.n	8011f20 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011f00:	4b75      	ldr	r3, [pc, #468]	; (80120d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011f0c:	d102      	bne.n	8011f14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8011f0e:	4b76      	ldr	r3, [pc, #472]	; (80120e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8011f10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8011f12:	e005      	b.n	8011f20 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8011f14:	2300      	movs	r3, #0
 8011f16:	61bb      	str	r3, [r7, #24]
      break;
 8011f18:	e002      	b.n	8011f20 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	61bb      	str	r3, [r7, #24]
      break;
 8011f1e:	bf00      	nop
    }

    switch(PeriphClk)
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f26:	f000 842a 	beq.w	801277e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f30:	f200 850b 	bhi.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011f3a:	f000 80df 	beq.w	80120fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011f44:	f200 8501 	bhi.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011f4e:	f000 80d5 	beq.w	80120fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011f58:	f200 84f7 	bhi.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f62:	f000 8377 	beq.w	8012654 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f6c:	f200 84ed 	bhi.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011f76:	f000 84c3 	beq.w	8012900 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011f80:	f200 84e3 	bhi.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f8a:	f000 82e6 	beq.w	801255a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f94:	f200 84d9 	bhi.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f9e:	f000 80ad 	beq.w	80120fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011fa8:	f200 84cf 	bhi.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011fb2:	f000 809b 	beq.w	80120ec <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011fbc:	f200 84c5 	bhi.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011fc6:	d07f      	beq.n	80120c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011fce:	f200 84bc 	bhi.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011fd8:	f000 8448 	beq.w	801286c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011fe2:	f200 84b2 	bhi.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011fec:	f000 83f0 	beq.w	80127d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ff6:	f200 84a8 	bhi.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012000:	f000 8391 	beq.w	8012726 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801200a:	f200 849e 	bhi.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	2b80      	cmp	r3, #128	; 0x80
 8012012:	f000 835c 	beq.w	80126ce <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2b80      	cmp	r3, #128	; 0x80
 801201a:	f200 8496 	bhi.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2b20      	cmp	r3, #32
 8012022:	d84b      	bhi.n	80120bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2b00      	cmp	r3, #0
 8012028:	f000 848f 	beq.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	3b01      	subs	r3, #1
 8012030:	2b1f      	cmp	r3, #31
 8012032:	f200 848a 	bhi.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8012036:	a201      	add	r2, pc, #4	; (adr r2, 801203c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 8012038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801203c:	08012253 	.word	0x08012253
 8012040:	080122c3 	.word	0x080122c3
 8012044:	0801294b 	.word	0x0801294b
 8012048:	08012357 	.word	0x08012357
 801204c:	0801294b 	.word	0x0801294b
 8012050:	0801294b 	.word	0x0801294b
 8012054:	0801294b 	.word	0x0801294b
 8012058:	080123df 	.word	0x080123df
 801205c:	0801294b 	.word	0x0801294b
 8012060:	0801294b 	.word	0x0801294b
 8012064:	0801294b 	.word	0x0801294b
 8012068:	0801294b 	.word	0x0801294b
 801206c:	0801294b 	.word	0x0801294b
 8012070:	0801294b 	.word	0x0801294b
 8012074:	0801294b 	.word	0x0801294b
 8012078:	08012457 	.word	0x08012457
 801207c:	0801294b 	.word	0x0801294b
 8012080:	0801294b 	.word	0x0801294b
 8012084:	0801294b 	.word	0x0801294b
 8012088:	0801294b 	.word	0x0801294b
 801208c:	0801294b 	.word	0x0801294b
 8012090:	0801294b 	.word	0x0801294b
 8012094:	0801294b 	.word	0x0801294b
 8012098:	0801294b 	.word	0x0801294b
 801209c:	0801294b 	.word	0x0801294b
 80120a0:	0801294b 	.word	0x0801294b
 80120a4:	0801294b 	.word	0x0801294b
 80120a8:	0801294b 	.word	0x0801294b
 80120ac:	0801294b 	.word	0x0801294b
 80120b0:	0801294b 	.word	0x0801294b
 80120b4:	0801294b 	.word	0x0801294b
 80120b8:	080124d9 	.word	0x080124d9
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2b40      	cmp	r3, #64	; 0x40
 80120c0:	f000 82d9 	beq.w	8012676 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80120c4:	f000 bc41 	b.w	801294a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80120c8:	69b9      	ldr	r1, [r7, #24]
 80120ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80120ce:	f000 fe25 	bl	8012d1c <RCCEx_GetSAIxPeriphCLKFreq>
 80120d2:	61f8      	str	r0, [r7, #28]
      break;
 80120d4:	f000 bc3a 	b.w	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80120d8:	40021000 	.word	0x40021000
 80120dc:	0003d090 	.word	0x0003d090
 80120e0:	0801b984 	.word	0x0801b984
 80120e4:	00f42400 	.word	0x00f42400
 80120e8:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80120ec:	69b9      	ldr	r1, [r7, #24]
 80120ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80120f2:	f000 fe13 	bl	8012d1c <RCCEx_GetSAIxPeriphCLKFreq>
 80120f6:	61f8      	str	r0, [r7, #28]
      break;
 80120f8:	f000 bc28 	b.w	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80120fc:	4ba6      	ldr	r3, [pc, #664]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80120fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012102:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8012106:	613b      	str	r3, [r7, #16]
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801210e:	d015      	beq.n	801213c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8012110:	693b      	ldr	r3, [r7, #16]
 8012112:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8012116:	f200 8092 	bhi.w	801223e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012120:	d029      	beq.n	8012176 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012128:	f200 8089 	bhi.w	801223e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 801212c:	693b      	ldr	r3, [r7, #16]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d07b      	beq.n	801222a <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012138:	d04a      	beq.n	80121d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 801213a:	e080      	b.n	801223e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 801213c:	4b96      	ldr	r3, [pc, #600]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	f003 0302 	and.w	r3, r3, #2
 8012144:	2b02      	cmp	r3, #2
 8012146:	d17c      	bne.n	8012242 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8012148:	4b93      	ldr	r3, [pc, #588]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	f003 0308 	and.w	r3, r3, #8
 8012150:	2b00      	cmp	r3, #0
 8012152:	d005      	beq.n	8012160 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8012154:	4b90      	ldr	r3, [pc, #576]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	091b      	lsrs	r3, r3, #4
 801215a:	f003 030f 	and.w	r3, r3, #15
 801215e:	e005      	b.n	801216c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8012160:	4b8d      	ldr	r3, [pc, #564]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012166:	0a1b      	lsrs	r3, r3, #8
 8012168:	f003 030f 	and.w	r3, r3, #15
 801216c:	4a8b      	ldr	r2, [pc, #556]	; (801239c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 801216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012172:	61fb      	str	r3, [r7, #28]
          break;
 8012174:	e065      	b.n	8012242 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8012176:	4b88      	ldr	r3, [pc, #544]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801217e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012182:	d160      	bne.n	8012246 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8012184:	4b84      	ldr	r3, [pc, #528]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012186:	68db      	ldr	r3, [r3, #12]
 8012188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801218c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012190:	d159      	bne.n	8012246 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8012192:	4b81      	ldr	r3, [pc, #516]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012194:	68db      	ldr	r3, [r3, #12]
 8012196:	0a1b      	lsrs	r3, r3, #8
 8012198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801219c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 801219e:	69bb      	ldr	r3, [r7, #24]
 80121a0:	68fa      	ldr	r2, [r7, #12]
 80121a2:	fb03 f202 	mul.w	r2, r3, r2
 80121a6:	4b7c      	ldr	r3, [pc, #496]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80121a8:	68db      	ldr	r3, [r3, #12]
 80121aa:	091b      	lsrs	r3, r3, #4
 80121ac:	f003 0307 	and.w	r3, r3, #7
 80121b0:	3301      	adds	r3, #1
 80121b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80121b6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80121b8:	4b77      	ldr	r3, [pc, #476]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80121ba:	68db      	ldr	r3, [r3, #12]
 80121bc:	0d5b      	lsrs	r3, r3, #21
 80121be:	f003 0303 	and.w	r3, r3, #3
 80121c2:	3301      	adds	r3, #1
 80121c4:	005b      	lsls	r3, r3, #1
 80121c6:	69ba      	ldr	r2, [r7, #24]
 80121c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80121cc:	61fb      	str	r3, [r7, #28]
          break;
 80121ce:	e03a      	b.n	8012246 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80121d0:	4b71      	ldr	r3, [pc, #452]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80121d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80121dc:	d135      	bne.n	801224a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80121de:	4b6e      	ldr	r3, [pc, #440]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80121e0:	691b      	ldr	r3, [r3, #16]
 80121e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80121e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80121ea:	d12e      	bne.n	801224a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80121ec:	4b6a      	ldr	r3, [pc, #424]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80121ee:	691b      	ldr	r3, [r3, #16]
 80121f0:	0a1b      	lsrs	r3, r3, #8
 80121f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80121f6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80121f8:	69bb      	ldr	r3, [r7, #24]
 80121fa:	68fa      	ldr	r2, [r7, #12]
 80121fc:	fb03 f202 	mul.w	r2, r3, r2
 8012200:	4b65      	ldr	r3, [pc, #404]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	091b      	lsrs	r3, r3, #4
 8012206:	f003 0307 	and.w	r3, r3, #7
 801220a:	3301      	adds	r3, #1
 801220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012210:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8012212:	4b61      	ldr	r3, [pc, #388]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012214:	691b      	ldr	r3, [r3, #16]
 8012216:	0d5b      	lsrs	r3, r3, #21
 8012218:	f003 0303 	and.w	r3, r3, #3
 801221c:	3301      	adds	r3, #1
 801221e:	005b      	lsls	r3, r3, #1
 8012220:	69ba      	ldr	r2, [r7, #24]
 8012222:	fbb2 f3f3 	udiv	r3, r2, r3
 8012226:	61fb      	str	r3, [r7, #28]
          break;
 8012228:	e00f      	b.n	801224a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 801222a:	4b5b      	ldr	r3, [pc, #364]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801222c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012230:	f003 0302 	and.w	r3, r3, #2
 8012234:	2b02      	cmp	r3, #2
 8012236:	d10a      	bne.n	801224e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8012238:	4b59      	ldr	r3, [pc, #356]	; (80123a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 801223a:	61fb      	str	r3, [r7, #28]
          break;
 801223c:	e007      	b.n	801224e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 801223e:	bf00      	nop
 8012240:	e384      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012242:	bf00      	nop
 8012244:	e382      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012246:	bf00      	nop
 8012248:	e380      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801224a:	bf00      	nop
 801224c:	e37e      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801224e:	bf00      	nop
        break;
 8012250:	e37c      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8012252:	4b51      	ldr	r3, [pc, #324]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012258:	f003 0303 	and.w	r3, r3, #3
 801225c:	613b      	str	r3, [r7, #16]
 801225e:	693b      	ldr	r3, [r7, #16]
 8012260:	2b03      	cmp	r3, #3
 8012262:	d828      	bhi.n	80122b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8012264:	a201      	add	r2, pc, #4	; (adr r2, 801226c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8012266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801226a:	bf00      	nop
 801226c:	0801227d 	.word	0x0801227d
 8012270:	08012285 	.word	0x08012285
 8012274:	0801228d 	.word	0x0801228d
 8012278:	080122a1 	.word	0x080122a1
          frequency = HAL_RCC_GetPCLK2Freq();
 801227c:	f7ff fa46 	bl	801170c <HAL_RCC_GetPCLK2Freq>
 8012280:	61f8      	str	r0, [r7, #28]
          break;
 8012282:	e01d      	b.n	80122c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8012284:	f7ff f994 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 8012288:	61f8      	str	r0, [r7, #28]
          break;
 801228a:	e019      	b.n	80122c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801228c:	4b42      	ldr	r3, [pc, #264]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012298:	d10f      	bne.n	80122ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 801229a:	4b42      	ldr	r3, [pc, #264]	; (80123a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 801229c:	61fb      	str	r3, [r7, #28]
          break;
 801229e:	e00c      	b.n	80122ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80122a0:	4b3d      	ldr	r3, [pc, #244]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80122a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122a6:	f003 0302 	and.w	r3, r3, #2
 80122aa:	2b02      	cmp	r3, #2
 80122ac:	d107      	bne.n	80122be <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 80122ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80122b2:	61fb      	str	r3, [r7, #28]
          break;
 80122b4:	e003      	b.n	80122be <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 80122b6:	bf00      	nop
 80122b8:	e348      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80122ba:	bf00      	nop
 80122bc:	e346      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80122be:	bf00      	nop
        break;
 80122c0:	e344      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80122c2:	4b35      	ldr	r3, [pc, #212]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80122c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80122c8:	f003 030c 	and.w	r3, r3, #12
 80122cc:	613b      	str	r3, [r7, #16]
 80122ce:	693b      	ldr	r3, [r7, #16]
 80122d0:	2b0c      	cmp	r3, #12
 80122d2:	d83a      	bhi.n	801234a <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 80122d4:	a201      	add	r2, pc, #4	; (adr r2, 80122dc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80122d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122da:	bf00      	nop
 80122dc:	08012311 	.word	0x08012311
 80122e0:	0801234b 	.word	0x0801234b
 80122e4:	0801234b 	.word	0x0801234b
 80122e8:	0801234b 	.word	0x0801234b
 80122ec:	08012319 	.word	0x08012319
 80122f0:	0801234b 	.word	0x0801234b
 80122f4:	0801234b 	.word	0x0801234b
 80122f8:	0801234b 	.word	0x0801234b
 80122fc:	08012321 	.word	0x08012321
 8012300:	0801234b 	.word	0x0801234b
 8012304:	0801234b 	.word	0x0801234b
 8012308:	0801234b 	.word	0x0801234b
 801230c:	08012335 	.word	0x08012335
          frequency = HAL_RCC_GetPCLK1Freq();
 8012310:	f7ff f9e6 	bl	80116e0 <HAL_RCC_GetPCLK1Freq>
 8012314:	61f8      	str	r0, [r7, #28]
          break;
 8012316:	e01d      	b.n	8012354 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8012318:	f7ff f94a 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 801231c:	61f8      	str	r0, [r7, #28]
          break;
 801231e:	e019      	b.n	8012354 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012320:	4b1d      	ldr	r3, [pc, #116]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801232c:	d10f      	bne.n	801234e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 801232e:	4b1d      	ldr	r3, [pc, #116]	; (80123a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8012330:	61fb      	str	r3, [r7, #28]
          break;
 8012332:	e00c      	b.n	801234e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012334:	4b18      	ldr	r3, [pc, #96]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801233a:	f003 0302 	and.w	r3, r3, #2
 801233e:	2b02      	cmp	r3, #2
 8012340:	d107      	bne.n	8012352 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 8012342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012346:	61fb      	str	r3, [r7, #28]
          break;
 8012348:	e003      	b.n	8012352 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 801234a:	bf00      	nop
 801234c:	e2fe      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801234e:	bf00      	nop
 8012350:	e2fc      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012352:	bf00      	nop
        break;
 8012354:	e2fa      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8012356:	4b10      	ldr	r3, [pc, #64]	; (8012398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8012358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801235c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012360:	613b      	str	r3, [r7, #16]
 8012362:	693b      	ldr	r3, [r7, #16]
 8012364:	2b30      	cmp	r3, #48	; 0x30
 8012366:	d029      	beq.n	80123bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	2b30      	cmp	r3, #48	; 0x30
 801236c:	d831      	bhi.n	80123d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	2b20      	cmp	r3, #32
 8012372:	d019      	beq.n	80123a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	2b20      	cmp	r3, #32
 8012378:	d82b      	bhi.n	80123d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d003      	beq.n	8012388 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8012380:	693b      	ldr	r3, [r7, #16]
 8012382:	2b10      	cmp	r3, #16
 8012384:	d004      	beq.n	8012390 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8012386:	e024      	b.n	80123d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8012388:	f7ff f9aa 	bl	80116e0 <HAL_RCC_GetPCLK1Freq>
 801238c:	61f8      	str	r0, [r7, #28]
          break;
 801238e:	e025      	b.n	80123dc <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8012390:	f7ff f90e 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 8012394:	61f8      	str	r0, [r7, #28]
          break;
 8012396:	e021      	b.n	80123dc <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8012398:	40021000 	.word	0x40021000
 801239c:	0801b984 	.word	0x0801b984
 80123a0:	02dc6c00 	.word	0x02dc6c00
 80123a4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80123a8:	4b8f      	ldr	r3, [pc, #572]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80123b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80123b4:	d10f      	bne.n	80123d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 80123b6:	4b8d      	ldr	r3, [pc, #564]	; (80125ec <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 80123b8:	61fb      	str	r3, [r7, #28]
          break;
 80123ba:	e00c      	b.n	80123d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80123bc:	4b8a      	ldr	r3, [pc, #552]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80123be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123c2:	f003 0302 	and.w	r3, r3, #2
 80123c6:	2b02      	cmp	r3, #2
 80123c8:	d107      	bne.n	80123da <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 80123ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80123ce:	61fb      	str	r3, [r7, #28]
          break;
 80123d0:	e003      	b.n	80123da <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 80123d2:	bf00      	nop
 80123d4:	e2ba      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80123d6:	bf00      	nop
 80123d8:	e2b8      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80123da:	bf00      	nop
        break;
 80123dc:	e2b6      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80123de:	4b82      	ldr	r3, [pc, #520]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80123e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80123e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80123e8:	613b      	str	r3, [r7, #16]
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	2bc0      	cmp	r3, #192	; 0xc0
 80123ee:	d021      	beq.n	8012434 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	2bc0      	cmp	r3, #192	; 0xc0
 80123f4:	d829      	bhi.n	801244a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	2b80      	cmp	r3, #128	; 0x80
 80123fa:	d011      	beq.n	8012420 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	2b80      	cmp	r3, #128	; 0x80
 8012400:	d823      	bhi.n	801244a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d003      	beq.n	8012410 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	2b40      	cmp	r3, #64	; 0x40
 801240c:	d004      	beq.n	8012418 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 801240e:	e01c      	b.n	801244a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8012410:	f7ff f966 	bl	80116e0 <HAL_RCC_GetPCLK1Freq>
 8012414:	61f8      	str	r0, [r7, #28]
          break;
 8012416:	e01d      	b.n	8012454 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8012418:	f7ff f8ca 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 801241c:	61f8      	str	r0, [r7, #28]
          break;
 801241e:	e019      	b.n	8012454 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012420:	4b71      	ldr	r3, [pc, #452]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801242c:	d10f      	bne.n	801244e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 801242e:	4b6f      	ldr	r3, [pc, #444]	; (80125ec <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8012430:	61fb      	str	r3, [r7, #28]
          break;
 8012432:	e00c      	b.n	801244e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012434:	4b6c      	ldr	r3, [pc, #432]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8012436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801243a:	f003 0302 	and.w	r3, r3, #2
 801243e:	2b02      	cmp	r3, #2
 8012440:	d107      	bne.n	8012452 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 8012442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012446:	61fb      	str	r3, [r7, #28]
          break;
 8012448:	e003      	b.n	8012452 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 801244a:	bf00      	nop
 801244c:	e27e      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801244e:	bf00      	nop
 8012450:	e27c      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012452:	bf00      	nop
        break;
 8012454:	e27a      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8012456:	4b64      	ldr	r3, [pc, #400]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8012458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801245c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012460:	613b      	str	r3, [r7, #16]
 8012462:	693b      	ldr	r3, [r7, #16]
 8012464:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012468:	d025      	beq.n	80124b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012470:	d82c      	bhi.n	80124cc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012478:	d013      	beq.n	80124a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012480:	d824      	bhi.n	80124cc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d004      	beq.n	8012492 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801248e:	d004      	beq.n	801249a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 8012490:	e01c      	b.n	80124cc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8012492:	f7ff f925 	bl	80116e0 <HAL_RCC_GetPCLK1Freq>
 8012496:	61f8      	str	r0, [r7, #28]
          break;
 8012498:	e01d      	b.n	80124d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 801249a:	f7ff f889 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 801249e:	61f8      	str	r0, [r7, #28]
          break;
 80124a0:	e019      	b.n	80124d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80124a2:	4b51      	ldr	r3, [pc, #324]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80124aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80124ae:	d10f      	bne.n	80124d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 80124b0:	4b4e      	ldr	r3, [pc, #312]	; (80125ec <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 80124b2:	61fb      	str	r3, [r7, #28]
          break;
 80124b4:	e00c      	b.n	80124d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80124b6:	4b4c      	ldr	r3, [pc, #304]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80124b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124bc:	f003 0302 	and.w	r3, r3, #2
 80124c0:	2b02      	cmp	r3, #2
 80124c2:	d107      	bne.n	80124d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 80124c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80124c8:	61fb      	str	r3, [r7, #28]
          break;
 80124ca:	e003      	b.n	80124d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 80124cc:	bf00      	nop
 80124ce:	e23d      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80124d0:	bf00      	nop
 80124d2:	e23b      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80124d4:	bf00      	nop
        break;
 80124d6:	e239      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80124d8:	4b43      	ldr	r3, [pc, #268]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80124da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80124de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80124e2:	613b      	str	r3, [r7, #16]
 80124e4:	693b      	ldr	r3, [r7, #16]
 80124e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80124ea:	d025      	beq.n	8012538 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80124ec:	693b      	ldr	r3, [r7, #16]
 80124ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80124f2:	d82c      	bhi.n	801254e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 80124f4:	693b      	ldr	r3, [r7, #16]
 80124f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80124fa:	d013      	beq.n	8012524 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80124fc:	693b      	ldr	r3, [r7, #16]
 80124fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012502:	d824      	bhi.n	801254e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d004      	beq.n	8012514 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 801250a:	693b      	ldr	r3, [r7, #16]
 801250c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012510:	d004      	beq.n	801251c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 8012512:	e01c      	b.n	801254e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8012514:	f7ff f8e4 	bl	80116e0 <HAL_RCC_GetPCLK1Freq>
 8012518:	61f8      	str	r0, [r7, #28]
          break;
 801251a:	e01d      	b.n	8012558 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 801251c:	f7ff f848 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 8012520:	61f8      	str	r0, [r7, #28]
          break;
 8012522:	e019      	b.n	8012558 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012524:	4b30      	ldr	r3, [pc, #192]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801252c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012530:	d10f      	bne.n	8012552 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 8012532:	4b2e      	ldr	r3, [pc, #184]	; (80125ec <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8012534:	61fb      	str	r3, [r7, #28]
          break;
 8012536:	e00c      	b.n	8012552 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012538:	4b2b      	ldr	r3, [pc, #172]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801253e:	f003 0302 	and.w	r3, r3, #2
 8012542:	2b02      	cmp	r3, #2
 8012544:	d107      	bne.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 8012546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801254a:	61fb      	str	r3, [r7, #28]
          break;
 801254c:	e003      	b.n	8012556 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 801254e:	bf00      	nop
 8012550:	e1fc      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012552:	bf00      	nop
 8012554:	e1fa      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012556:	bf00      	nop
        break;
 8012558:	e1f8      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801255a:	4b23      	ldr	r3, [pc, #140]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012560:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012564:	613b      	str	r3, [r7, #16]
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801256c:	d00c      	beq.n	8012588 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012574:	d868      	bhi.n	8012648 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801257c:	d008      	beq.n	8012590 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012584:	d034      	beq.n	80125f0 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 8012586:	e05f      	b.n	8012648 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 8012588:	f7ff f812 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 801258c:	61f8      	str	r0, [r7, #28]
          break;
 801258e:	e060      	b.n	8012652 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8012590:	4b15      	ldr	r3, [pc, #84]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801259c:	d156      	bne.n	801264c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 801259e:	4b12      	ldr	r3, [pc, #72]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80125a0:	691b      	ldr	r3, [r3, #16]
 80125a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d050      	beq.n	801264c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80125aa:	4b0f      	ldr	r3, [pc, #60]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80125ac:	691b      	ldr	r3, [r3, #16]
 80125ae:	0a1b      	lsrs	r3, r3, #8
 80125b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125b4:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80125b6:	69bb      	ldr	r3, [r7, #24]
 80125b8:	68fa      	ldr	r2, [r7, #12]
 80125ba:	fb03 f202 	mul.w	r2, r3, r2
 80125be:	4b0a      	ldr	r3, [pc, #40]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80125c0:	68db      	ldr	r3, [r3, #12]
 80125c2:	091b      	lsrs	r3, r3, #4
 80125c4:	f003 0307 	and.w	r3, r3, #7
 80125c8:	3301      	adds	r3, #1
 80125ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80125ce:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80125d0:	4b05      	ldr	r3, [pc, #20]	; (80125e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80125d2:	691b      	ldr	r3, [r3, #16]
 80125d4:	0e5b      	lsrs	r3, r3, #25
 80125d6:	f003 0303 	and.w	r3, r3, #3
 80125da:	3301      	adds	r3, #1
 80125dc:	005b      	lsls	r3, r3, #1
 80125de:	69ba      	ldr	r2, [r7, #24]
 80125e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80125e4:	61fb      	str	r3, [r7, #28]
          break;
 80125e6:	e031      	b.n	801264c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 80125e8:	40021000 	.word	0x40021000
 80125ec:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80125f0:	4b9c      	ldr	r3, [pc, #624]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80125f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80125fc:	d128      	bne.n	8012650 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 80125fe:	4b99      	ldr	r3, [pc, #612]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012600:	695b      	ldr	r3, [r3, #20]
 8012602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012606:	2b00      	cmp	r3, #0
 8012608:	d022      	beq.n	8012650 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 801260a:	4b96      	ldr	r3, [pc, #600]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801260c:	695b      	ldr	r3, [r3, #20]
 801260e:	0a1b      	lsrs	r3, r3, #8
 8012610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012614:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8012616:	69bb      	ldr	r3, [r7, #24]
 8012618:	68fa      	ldr	r2, [r7, #12]
 801261a:	fb03 f202 	mul.w	r2, r3, r2
 801261e:	4b91      	ldr	r3, [pc, #580]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012620:	68db      	ldr	r3, [r3, #12]
 8012622:	091b      	lsrs	r3, r3, #4
 8012624:	f003 0307 	and.w	r3, r3, #7
 8012628:	3301      	adds	r3, #1
 801262a:	fbb2 f3f3 	udiv	r3, r2, r3
 801262e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8012630:	4b8c      	ldr	r3, [pc, #560]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012632:	695b      	ldr	r3, [r3, #20]
 8012634:	0e5b      	lsrs	r3, r3, #25
 8012636:	f003 0303 	and.w	r3, r3, #3
 801263a:	3301      	adds	r3, #1
 801263c:	005b      	lsls	r3, r3, #1
 801263e:	69ba      	ldr	r2, [r7, #24]
 8012640:	fbb2 f3f3 	udiv	r3, r2, r3
 8012644:	61fb      	str	r3, [r7, #28]
          break;
 8012646:	e003      	b.n	8012650 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8012648:	bf00      	nop
 801264a:	e17f      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801264c:	bf00      	nop
 801264e:	e17d      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012650:	bf00      	nop
        break;
 8012652:	e17b      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8012654:	4b83      	ldr	r3, [pc, #524]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801265a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801265e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8012660:	693b      	ldr	r3, [r7, #16]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d103      	bne.n	801266e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 8012666:	f7ff f851 	bl	801170c <HAL_RCC_GetPCLK2Freq>
 801266a:	61f8      	str	r0, [r7, #28]
        break;
 801266c:	e16e      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 801266e:	f7fe ff9f 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 8012672:	61f8      	str	r0, [r7, #28]
        break;
 8012674:	e16a      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8012676:	4b7b      	ldr	r3, [pc, #492]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801267c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8012680:	613b      	str	r3, [r7, #16]
 8012682:	693b      	ldr	r3, [r7, #16]
 8012684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012688:	d013      	beq.n	80126b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012690:	d819      	bhi.n	80126c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d004      	beq.n	80126a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8012698:	693b      	ldr	r3, [r7, #16]
 801269a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801269e:	d004      	beq.n	80126aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80126a0:	e011      	b.n	80126c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80126a2:	f7ff f81d 	bl	80116e0 <HAL_RCC_GetPCLK1Freq>
 80126a6:	61f8      	str	r0, [r7, #28]
          break;
 80126a8:	e010      	b.n	80126cc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 80126aa:	f7fe ff81 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 80126ae:	61f8      	str	r0, [r7, #28]
          break;
 80126b0:	e00c      	b.n	80126cc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80126b2:	4b6c      	ldr	r3, [pc, #432]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80126ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80126be:	d104      	bne.n	80126ca <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 80126c0:	4b69      	ldr	r3, [pc, #420]	; (8012868 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80126c2:	61fb      	str	r3, [r7, #28]
          break;
 80126c4:	e001      	b.n	80126ca <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 80126c6:	bf00      	nop
 80126c8:	e140      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80126ca:	bf00      	nop
        break;
 80126cc:	e13e      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80126ce:	4b65      	ldr	r3, [pc, #404]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80126d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80126d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80126d8:	613b      	str	r3, [r7, #16]
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80126e0:	d013      	beq.n	801270a <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 80126e2:	693b      	ldr	r3, [r7, #16]
 80126e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80126e8:	d819      	bhi.n	801271e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80126ea:	693b      	ldr	r3, [r7, #16]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d004      	beq.n	80126fa <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 80126f0:	693b      	ldr	r3, [r7, #16]
 80126f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80126f6:	d004      	beq.n	8012702 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 80126f8:	e011      	b.n	801271e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80126fa:	f7fe fff1 	bl	80116e0 <HAL_RCC_GetPCLK1Freq>
 80126fe:	61f8      	str	r0, [r7, #28]
          break;
 8012700:	e010      	b.n	8012724 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 8012702:	f7fe ff55 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 8012706:	61f8      	str	r0, [r7, #28]
          break;
 8012708:	e00c      	b.n	8012724 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801270a:	4b56      	ldr	r3, [pc, #344]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012716:	d104      	bne.n	8012722 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 8012718:	4b53      	ldr	r3, [pc, #332]	; (8012868 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 801271a:	61fb      	str	r3, [r7, #28]
          break;
 801271c:	e001      	b.n	8012722 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 801271e:	bf00      	nop
 8012720:	e114      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012722:	bf00      	nop
        break;
 8012724:	e112      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8012726:	4b4f      	ldr	r3, [pc, #316]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801272c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012730:	613b      	str	r3, [r7, #16]
 8012732:	693b      	ldr	r3, [r7, #16]
 8012734:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012738:	d013      	beq.n	8012762 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012740:	d819      	bhi.n	8012776 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8012742:	693b      	ldr	r3, [r7, #16]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d004      	beq.n	8012752 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8012748:	693b      	ldr	r3, [r7, #16]
 801274a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801274e:	d004      	beq.n	801275a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 8012750:	e011      	b.n	8012776 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 8012752:	f7fe ffc5 	bl	80116e0 <HAL_RCC_GetPCLK1Freq>
 8012756:	61f8      	str	r0, [r7, #28]
          break;
 8012758:	e010      	b.n	801277c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 801275a:	f7fe ff29 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 801275e:	61f8      	str	r0, [r7, #28]
          break;
 8012760:	e00c      	b.n	801277c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012762:	4b40      	ldr	r3, [pc, #256]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801276a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801276e:	d104      	bne.n	801277a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 8012770:	4b3d      	ldr	r3, [pc, #244]	; (8012868 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8012772:	61fb      	str	r3, [r7, #28]
          break;
 8012774:	e001      	b.n	801277a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 8012776:	bf00      	nop
 8012778:	e0e8      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801277a:	bf00      	nop
        break;
 801277c:	e0e6      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 801277e:	4b39      	ldr	r3, [pc, #228]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012780:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012784:	f003 0303 	and.w	r3, r3, #3
 8012788:	613b      	str	r3, [r7, #16]
 801278a:	693b      	ldr	r3, [r7, #16]
 801278c:	2b02      	cmp	r3, #2
 801278e:	d011      	beq.n	80127b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	2b02      	cmp	r3, #2
 8012794:	d818      	bhi.n	80127c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8012796:	693b      	ldr	r3, [r7, #16]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d003      	beq.n	80127a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	2b01      	cmp	r3, #1
 80127a0:	d004      	beq.n	80127ac <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 80127a2:	e011      	b.n	80127c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80127a4:	f7fe ff9c 	bl	80116e0 <HAL_RCC_GetPCLK1Freq>
 80127a8:	61f8      	str	r0, [r7, #28]
          break;
 80127aa:	e010      	b.n	80127ce <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 80127ac:	f7fe ff00 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 80127b0:	61f8      	str	r0, [r7, #28]
          break;
 80127b2:	e00c      	b.n	80127ce <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80127b4:	4b2b      	ldr	r3, [pc, #172]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80127bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80127c0:	d104      	bne.n	80127cc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 80127c2:	4b29      	ldr	r3, [pc, #164]	; (8012868 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80127c4:	61fb      	str	r3, [r7, #28]
          break;
 80127c6:	e001      	b.n	80127cc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 80127c8:	bf00      	nop
 80127ca:	e0bf      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80127cc:	bf00      	nop
        break;
 80127ce:	e0bd      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80127d0:	4b24      	ldr	r3, [pc, #144]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80127d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80127d6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80127da:	613b      	str	r3, [r7, #16]
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80127e2:	d02c      	beq.n	801283e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80127ea:	d833      	bhi.n	8012854 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80127f2:	d01a      	beq.n	801282a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80127fa:	d82b      	bhi.n	8012854 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80127fc:	693b      	ldr	r3, [r7, #16]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d004      	beq.n	801280c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8012802:	693b      	ldr	r3, [r7, #16]
 8012804:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012808:	d004      	beq.n	8012814 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 801280a:	e023      	b.n	8012854 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 801280c:	f7fe ff68 	bl	80116e0 <HAL_RCC_GetPCLK1Freq>
 8012810:	61f8      	str	r0, [r7, #28]
          break;
 8012812:	e026      	b.n	8012862 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8012814:	4b13      	ldr	r3, [pc, #76]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801281a:	f003 0302 	and.w	r3, r3, #2
 801281e:	2b02      	cmp	r3, #2
 8012820:	d11a      	bne.n	8012858 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 8012822:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8012826:	61fb      	str	r3, [r7, #28]
          break;
 8012828:	e016      	b.n	8012858 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801282a:	4b0e      	ldr	r3, [pc, #56]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012836:	d111      	bne.n	801285c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8012838:	4b0b      	ldr	r3, [pc, #44]	; (8012868 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 801283a:	61fb      	str	r3, [r7, #28]
          break;
 801283c:	e00e      	b.n	801285c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801283e:	4b09      	ldr	r3, [pc, #36]	; (8012864 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012844:	f003 0302 	and.w	r3, r3, #2
 8012848:	2b02      	cmp	r3, #2
 801284a:	d109      	bne.n	8012860 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 801284c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012850:	61fb      	str	r3, [r7, #28]
          break;
 8012852:	e005      	b.n	8012860 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8012854:	bf00      	nop
 8012856:	e079      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012858:	bf00      	nop
 801285a:	e077      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801285c:	bf00      	nop
 801285e:	e075      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012860:	bf00      	nop
        break;
 8012862:	e073      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8012864:	40021000 	.word	0x40021000
 8012868:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 801286c:	4b3a      	ldr	r3, [pc, #232]	; (8012958 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 801286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012872:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8012876:	613b      	str	r3, [r7, #16]
 8012878:	693b      	ldr	r3, [r7, #16]
 801287a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801287e:	d02c      	beq.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8012880:	693b      	ldr	r3, [r7, #16]
 8012882:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012886:	d833      	bhi.n	80128f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8012888:	693b      	ldr	r3, [r7, #16]
 801288a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801288e:	d01a      	beq.n	80128c6 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012896:	d82b      	bhi.n	80128f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8012898:	693b      	ldr	r3, [r7, #16]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d004      	beq.n	80128a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 801289e:	693b      	ldr	r3, [r7, #16]
 80128a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80128a4:	d004      	beq.n	80128b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80128a6:	e023      	b.n	80128f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 80128a8:	f7fe ff1a 	bl	80116e0 <HAL_RCC_GetPCLK1Freq>
 80128ac:	61f8      	str	r0, [r7, #28]
          break;
 80128ae:	e026      	b.n	80128fe <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80128b0:	4b29      	ldr	r3, [pc, #164]	; (8012958 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80128b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80128b6:	f003 0302 	and.w	r3, r3, #2
 80128ba:	2b02      	cmp	r3, #2
 80128bc:	d11a      	bne.n	80128f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 80128be:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80128c2:	61fb      	str	r3, [r7, #28]
          break;
 80128c4:	e016      	b.n	80128f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80128c6:	4b24      	ldr	r3, [pc, #144]	; (8012958 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80128ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80128d2:	d111      	bne.n	80128f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 80128d4:	4b21      	ldr	r3, [pc, #132]	; (801295c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 80128d6:	61fb      	str	r3, [r7, #28]
          break;
 80128d8:	e00e      	b.n	80128f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80128da:	4b1f      	ldr	r3, [pc, #124]	; (8012958 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80128dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128e0:	f003 0302 	and.w	r3, r3, #2
 80128e4:	2b02      	cmp	r3, #2
 80128e6:	d109      	bne.n	80128fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 80128e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80128ec:	61fb      	str	r3, [r7, #28]
          break;
 80128ee:	e005      	b.n	80128fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80128f0:	bf00      	nop
 80128f2:	e02b      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80128f4:	bf00      	nop
 80128f6:	e029      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80128f8:	bf00      	nop
 80128fa:	e027      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80128fc:	bf00      	nop
        break;
 80128fe:	e025      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8012900:	4b15      	ldr	r3, [pc, #84]	; (8012958 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8012902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012906:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801290a:	613b      	str	r3, [r7, #16]
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d004      	beq.n	801291c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8012912:	693b      	ldr	r3, [r7, #16]
 8012914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012918:	d004      	beq.n	8012924 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 801291a:	e00d      	b.n	8012938 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 801291c:	f7fe fee0 	bl	80116e0 <HAL_RCC_GetPCLK1Freq>
 8012920:	61f8      	str	r0, [r7, #28]
          break;
 8012922:	e009      	b.n	8012938 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012924:	4b0c      	ldr	r3, [pc, #48]	; (8012958 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801292c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012930:	d101      	bne.n	8012936 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 8012932:	4b0a      	ldr	r3, [pc, #40]	; (801295c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8012934:	61fb      	str	r3, [r7, #28]
          break;
 8012936:	bf00      	nop
        break;
 8012938:	e008      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 801293a:	bf00      	nop
 801293c:	e006      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 801293e:	bf00      	nop
 8012940:	e004      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8012942:	bf00      	nop
 8012944:	e002      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8012946:	bf00      	nop
 8012948:	e000      	b.n	801294c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 801294a:	bf00      	nop
    }
  }

  return(frequency);
 801294c:	69fb      	ldr	r3, [r7, #28]
}
 801294e:	4618      	mov	r0, r3
 8012950:	3720      	adds	r7, #32
 8012952:	46bd      	mov	sp, r7
 8012954:	bd80      	pop	{r7, pc}
 8012956:	bf00      	nop
 8012958:	40021000 	.word	0x40021000
 801295c:	00f42400 	.word	0x00f42400

08012960 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8012960:	b480      	push	{r7}
 8012962:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8012964:	4b05      	ldr	r3, [pc, #20]	; (801297c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	4a04      	ldr	r2, [pc, #16]	; (801297c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 801296a:	f043 0304 	orr.w	r3, r3, #4
 801296e:	6013      	str	r3, [r2, #0]
}
 8012970:	bf00      	nop
 8012972:	46bd      	mov	sp, r7
 8012974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012978:	4770      	bx	lr
 801297a:	bf00      	nop
 801297c:	40021000 	.word	0x40021000

08012980 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b084      	sub	sp, #16
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
 8012988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801298a:	2300      	movs	r3, #0
 801298c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801298e:	4b74      	ldr	r3, [pc, #464]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012990:	68db      	ldr	r3, [r3, #12]
 8012992:	f003 0303 	and.w	r3, r3, #3
 8012996:	2b00      	cmp	r3, #0
 8012998:	d018      	beq.n	80129cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801299a:	4b71      	ldr	r3, [pc, #452]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 801299c:	68db      	ldr	r3, [r3, #12]
 801299e:	f003 0203 	and.w	r2, r3, #3
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d10d      	bne.n	80129c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
       ||
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d009      	beq.n	80129c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80129b2:	4b6b      	ldr	r3, [pc, #428]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80129b4:	68db      	ldr	r3, [r3, #12]
 80129b6:	091b      	lsrs	r3, r3, #4
 80129b8:	f003 0307 	and.w	r3, r3, #7
 80129bc:	1c5a      	adds	r2, r3, #1
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	685b      	ldr	r3, [r3, #4]
       ||
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d047      	beq.n	8012a56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80129c6:	2301      	movs	r3, #1
 80129c8:	73fb      	strb	r3, [r7, #15]
 80129ca:	e044      	b.n	8012a56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	2b03      	cmp	r3, #3
 80129d2:	d018      	beq.n	8012a06 <RCCEx_PLLSAI1_Config+0x86>
 80129d4:	2b03      	cmp	r3, #3
 80129d6:	d825      	bhi.n	8012a24 <RCCEx_PLLSAI1_Config+0xa4>
 80129d8:	2b01      	cmp	r3, #1
 80129da:	d002      	beq.n	80129e2 <RCCEx_PLLSAI1_Config+0x62>
 80129dc:	2b02      	cmp	r3, #2
 80129de:	d009      	beq.n	80129f4 <RCCEx_PLLSAI1_Config+0x74>
 80129e0:	e020      	b.n	8012a24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80129e2:	4b5f      	ldr	r3, [pc, #380]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	f003 0302 	and.w	r3, r3, #2
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d11d      	bne.n	8012a2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80129ee:	2301      	movs	r3, #1
 80129f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80129f2:	e01a      	b.n	8012a2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80129f4:	4b5a      	ldr	r3, [pc, #360]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d116      	bne.n	8012a2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8012a00:	2301      	movs	r3, #1
 8012a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012a04:	e013      	b.n	8012a2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8012a06:	4b56      	ldr	r3, [pc, #344]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d10f      	bne.n	8012a32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8012a12:	4b53      	ldr	r3, [pc, #332]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d109      	bne.n	8012a32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8012a1e:	2301      	movs	r3, #1
 8012a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012a22:	e006      	b.n	8012a32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8012a24:	2301      	movs	r3, #1
 8012a26:	73fb      	strb	r3, [r7, #15]
      break;
 8012a28:	e004      	b.n	8012a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8012a2a:	bf00      	nop
 8012a2c:	e002      	b.n	8012a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8012a2e:	bf00      	nop
 8012a30:	e000      	b.n	8012a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8012a32:	bf00      	nop
    }

    if(status == HAL_OK)
 8012a34:	7bfb      	ldrb	r3, [r7, #15]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d10d      	bne.n	8012a56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8012a3a:	4b49      	ldr	r3, [pc, #292]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012a3c:	68db      	ldr	r3, [r3, #12]
 8012a3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6819      	ldr	r1, [r3, #0]
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	3b01      	subs	r3, #1
 8012a4c:	011b      	lsls	r3, r3, #4
 8012a4e:	430b      	orrs	r3, r1
 8012a50:	4943      	ldr	r1, [pc, #268]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012a52:	4313      	orrs	r3, r2
 8012a54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8012a56:	7bfb      	ldrb	r3, [r7, #15]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d17c      	bne.n	8012b56 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8012a5c:	4b40      	ldr	r3, [pc, #256]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	4a3f      	ldr	r2, [pc, #252]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012a62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012a68:	f7f9 fb08 	bl	800c07c <HAL_GetTick>
 8012a6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8012a6e:	e009      	b.n	8012a84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012a70:	f7f9 fb04 	bl	800c07c <HAL_GetTick>
 8012a74:	4602      	mov	r2, r0
 8012a76:	68bb      	ldr	r3, [r7, #8]
 8012a78:	1ad3      	subs	r3, r2, r3
 8012a7a:	2b02      	cmp	r3, #2
 8012a7c:	d902      	bls.n	8012a84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8012a7e:	2303      	movs	r3, #3
 8012a80:	73fb      	strb	r3, [r7, #15]
        break;
 8012a82:	e005      	b.n	8012a90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8012a84:	4b36      	ldr	r3, [pc, #216]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d1ef      	bne.n	8012a70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8012a90:	7bfb      	ldrb	r3, [r7, #15]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d15f      	bne.n	8012b56 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d110      	bne.n	8012abe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012a9c:	4b30      	ldr	r3, [pc, #192]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012a9e:	691b      	ldr	r3, [r3, #16]
 8012aa0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8012aa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012aa8:	687a      	ldr	r2, [r7, #4]
 8012aaa:	6892      	ldr	r2, [r2, #8]
 8012aac:	0211      	lsls	r1, r2, #8
 8012aae:	687a      	ldr	r2, [r7, #4]
 8012ab0:	68d2      	ldr	r2, [r2, #12]
 8012ab2:	06d2      	lsls	r2, r2, #27
 8012ab4:	430a      	orrs	r2, r1
 8012ab6:	492a      	ldr	r1, [pc, #168]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012ab8:	4313      	orrs	r3, r2
 8012aba:	610b      	str	r3, [r1, #16]
 8012abc:	e027      	b.n	8012b0e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	2b01      	cmp	r3, #1
 8012ac2:	d112      	bne.n	8012aea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012ac4:	4b26      	ldr	r3, [pc, #152]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012ac6:	691b      	ldr	r3, [r3, #16]
 8012ac8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8012acc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	6892      	ldr	r2, [r2, #8]
 8012ad4:	0211      	lsls	r1, r2, #8
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	6912      	ldr	r2, [r2, #16]
 8012ada:	0852      	lsrs	r2, r2, #1
 8012adc:	3a01      	subs	r2, #1
 8012ade:	0552      	lsls	r2, r2, #21
 8012ae0:	430a      	orrs	r2, r1
 8012ae2:	491f      	ldr	r1, [pc, #124]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012ae4:	4313      	orrs	r3, r2
 8012ae6:	610b      	str	r3, [r1, #16]
 8012ae8:	e011      	b.n	8012b0e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012aea:	4b1d      	ldr	r3, [pc, #116]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012aec:	691b      	ldr	r3, [r3, #16]
 8012aee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8012af2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012af6:	687a      	ldr	r2, [r7, #4]
 8012af8:	6892      	ldr	r2, [r2, #8]
 8012afa:	0211      	lsls	r1, r2, #8
 8012afc:	687a      	ldr	r2, [r7, #4]
 8012afe:	6952      	ldr	r2, [r2, #20]
 8012b00:	0852      	lsrs	r2, r2, #1
 8012b02:	3a01      	subs	r2, #1
 8012b04:	0652      	lsls	r2, r2, #25
 8012b06:	430a      	orrs	r2, r1
 8012b08:	4915      	ldr	r1, [pc, #84]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b0a:	4313      	orrs	r3, r2
 8012b0c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8012b0e:	4b14      	ldr	r3, [pc, #80]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	4a13      	ldr	r2, [pc, #76]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012b18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012b1a:	f7f9 faaf 	bl	800c07c <HAL_GetTick>
 8012b1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012b20:	e009      	b.n	8012b36 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012b22:	f7f9 faab 	bl	800c07c <HAL_GetTick>
 8012b26:	4602      	mov	r2, r0
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	1ad3      	subs	r3, r2, r3
 8012b2c:	2b02      	cmp	r3, #2
 8012b2e:	d902      	bls.n	8012b36 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8012b30:	2303      	movs	r3, #3
 8012b32:	73fb      	strb	r3, [r7, #15]
          break;
 8012b34:	e005      	b.n	8012b42 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012b36:	4b0a      	ldr	r3, [pc, #40]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d0ef      	beq.n	8012b22 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8012b42:	7bfb      	ldrb	r3, [r7, #15]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d106      	bne.n	8012b56 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8012b48:	4b05      	ldr	r3, [pc, #20]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b4a:	691a      	ldr	r2, [r3, #16]
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	699b      	ldr	r3, [r3, #24]
 8012b50:	4903      	ldr	r1, [pc, #12]	; (8012b60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012b52:	4313      	orrs	r3, r2
 8012b54:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8012b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3710      	adds	r7, #16
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}
 8012b60:	40021000 	.word	0x40021000

08012b64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b084      	sub	sp, #16
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8012b72:	4b69      	ldr	r3, [pc, #420]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012b74:	68db      	ldr	r3, [r3, #12]
 8012b76:	f003 0303 	and.w	r3, r3, #3
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d018      	beq.n	8012bb0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8012b7e:	4b66      	ldr	r3, [pc, #408]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012b80:	68db      	ldr	r3, [r3, #12]
 8012b82:	f003 0203 	and.w	r2, r3, #3
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	d10d      	bne.n	8012baa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
       ||
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d009      	beq.n	8012baa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8012b96:	4b60      	ldr	r3, [pc, #384]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012b98:	68db      	ldr	r3, [r3, #12]
 8012b9a:	091b      	lsrs	r3, r3, #4
 8012b9c:	f003 0307 	and.w	r3, r3, #7
 8012ba0:	1c5a      	adds	r2, r3, #1
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	685b      	ldr	r3, [r3, #4]
       ||
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d047      	beq.n	8012c3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8012baa:	2301      	movs	r3, #1
 8012bac:	73fb      	strb	r3, [r7, #15]
 8012bae:	e044      	b.n	8012c3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	2b03      	cmp	r3, #3
 8012bb6:	d018      	beq.n	8012bea <RCCEx_PLLSAI2_Config+0x86>
 8012bb8:	2b03      	cmp	r3, #3
 8012bba:	d825      	bhi.n	8012c08 <RCCEx_PLLSAI2_Config+0xa4>
 8012bbc:	2b01      	cmp	r3, #1
 8012bbe:	d002      	beq.n	8012bc6 <RCCEx_PLLSAI2_Config+0x62>
 8012bc0:	2b02      	cmp	r3, #2
 8012bc2:	d009      	beq.n	8012bd8 <RCCEx_PLLSAI2_Config+0x74>
 8012bc4:	e020      	b.n	8012c08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8012bc6:	4b54      	ldr	r3, [pc, #336]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	f003 0302 	and.w	r3, r3, #2
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d11d      	bne.n	8012c0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8012bd2:	2301      	movs	r3, #1
 8012bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012bd6:	e01a      	b.n	8012c0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8012bd8:	4b4f      	ldr	r3, [pc, #316]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d116      	bne.n	8012c12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8012be4:	2301      	movs	r3, #1
 8012be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012be8:	e013      	b.n	8012c12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8012bea:	4b4b      	ldr	r3, [pc, #300]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d10f      	bne.n	8012c16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8012bf6:	4b48      	ldr	r3, [pc, #288]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d109      	bne.n	8012c16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8012c02:	2301      	movs	r3, #1
 8012c04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012c06:	e006      	b.n	8012c16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8012c08:	2301      	movs	r3, #1
 8012c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8012c0c:	e004      	b.n	8012c18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8012c0e:	bf00      	nop
 8012c10:	e002      	b.n	8012c18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8012c12:	bf00      	nop
 8012c14:	e000      	b.n	8012c18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8012c16:	bf00      	nop
    }

    if(status == HAL_OK)
 8012c18:	7bfb      	ldrb	r3, [r7, #15]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d10d      	bne.n	8012c3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8012c1e:	4b3e      	ldr	r3, [pc, #248]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012c20:	68db      	ldr	r3, [r3, #12]
 8012c22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6819      	ldr	r1, [r3, #0]
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	685b      	ldr	r3, [r3, #4]
 8012c2e:	3b01      	subs	r3, #1
 8012c30:	011b      	lsls	r3, r3, #4
 8012c32:	430b      	orrs	r3, r1
 8012c34:	4938      	ldr	r1, [pc, #224]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012c36:	4313      	orrs	r3, r2
 8012c38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8012c3a:	7bfb      	ldrb	r3, [r7, #15]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d166      	bne.n	8012d0e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8012c40:	4b35      	ldr	r3, [pc, #212]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	4a34      	ldr	r2, [pc, #208]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012c4c:	f7f9 fa16 	bl	800c07c <HAL_GetTick>
 8012c50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8012c52:	e009      	b.n	8012c68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8012c54:	f7f9 fa12 	bl	800c07c <HAL_GetTick>
 8012c58:	4602      	mov	r2, r0
 8012c5a:	68bb      	ldr	r3, [r7, #8]
 8012c5c:	1ad3      	subs	r3, r2, r3
 8012c5e:	2b02      	cmp	r3, #2
 8012c60:	d902      	bls.n	8012c68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8012c62:	2303      	movs	r3, #3
 8012c64:	73fb      	strb	r3, [r7, #15]
        break;
 8012c66:	e005      	b.n	8012c74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8012c68:	4b2b      	ldr	r3, [pc, #172]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d1ef      	bne.n	8012c54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8012c74:	7bfb      	ldrb	r3, [r7, #15]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d149      	bne.n	8012d0e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d110      	bne.n	8012ca2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8012c80:	4b25      	ldr	r3, [pc, #148]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012c82:	695b      	ldr	r3, [r3, #20]
 8012c84:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8012c88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012c8c:	687a      	ldr	r2, [r7, #4]
 8012c8e:	6892      	ldr	r2, [r2, #8]
 8012c90:	0211      	lsls	r1, r2, #8
 8012c92:	687a      	ldr	r2, [r7, #4]
 8012c94:	68d2      	ldr	r2, [r2, #12]
 8012c96:	06d2      	lsls	r2, r2, #27
 8012c98:	430a      	orrs	r2, r1
 8012c9a:	491f      	ldr	r1, [pc, #124]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012c9c:	4313      	orrs	r3, r2
 8012c9e:	614b      	str	r3, [r1, #20]
 8012ca0:	e011      	b.n	8012cc6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8012ca2:	4b1d      	ldr	r3, [pc, #116]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012ca4:	695b      	ldr	r3, [r3, #20]
 8012ca6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8012caa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012cae:	687a      	ldr	r2, [r7, #4]
 8012cb0:	6892      	ldr	r2, [r2, #8]
 8012cb2:	0211      	lsls	r1, r2, #8
 8012cb4:	687a      	ldr	r2, [r7, #4]
 8012cb6:	6912      	ldr	r2, [r2, #16]
 8012cb8:	0852      	lsrs	r2, r2, #1
 8012cba:	3a01      	subs	r2, #1
 8012cbc:	0652      	lsls	r2, r2, #25
 8012cbe:	430a      	orrs	r2, r1
 8012cc0:	4915      	ldr	r1, [pc, #84]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012cc2:	4313      	orrs	r3, r2
 8012cc4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8012cc6:	4b14      	ldr	r3, [pc, #80]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	4a13      	ldr	r2, [pc, #76]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012cd0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012cd2:	f7f9 f9d3 	bl	800c07c <HAL_GetTick>
 8012cd6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8012cd8:	e009      	b.n	8012cee <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8012cda:	f7f9 f9cf 	bl	800c07c <HAL_GetTick>
 8012cde:	4602      	mov	r2, r0
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	1ad3      	subs	r3, r2, r3
 8012ce4:	2b02      	cmp	r3, #2
 8012ce6:	d902      	bls.n	8012cee <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8012ce8:	2303      	movs	r3, #3
 8012cea:	73fb      	strb	r3, [r7, #15]
          break;
 8012cec:	e005      	b.n	8012cfa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8012cee:	4b0a      	ldr	r3, [pc, #40]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d0ef      	beq.n	8012cda <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8012cfa:	7bfb      	ldrb	r3, [r7, #15]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d106      	bne.n	8012d0e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8012d00:	4b05      	ldr	r3, [pc, #20]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012d02:	695a      	ldr	r2, [r3, #20]
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	695b      	ldr	r3, [r3, #20]
 8012d08:	4903      	ldr	r1, [pc, #12]	; (8012d18 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012d0a:	4313      	orrs	r3, r2
 8012d0c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8012d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d10:	4618      	mov	r0, r3
 8012d12:	3710      	adds	r7, #16
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}
 8012d18:	40021000 	.word	0x40021000

08012d1c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b089      	sub	sp, #36	; 0x24
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8012d26:	2300      	movs	r3, #0
 8012d28:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8012d2e:	2300      	movs	r3, #0
 8012d30:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012d38:	d10c      	bne.n	8012d54 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8012d3a:	4b77      	ldr	r3, [pc, #476]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d40:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8012d44:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8012d46:	69bb      	ldr	r3, [r7, #24]
 8012d48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8012d4c:	d112      	bne.n	8012d74 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8012d4e:	4b73      	ldr	r3, [pc, #460]	; (8012f1c <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8012d50:	61fb      	str	r3, [r7, #28]
 8012d52:	e00f      	b.n	8012d74 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012d5a:	d10b      	bne.n	8012d74 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8012d5c:	4b6e      	ldr	r3, [pc, #440]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012d62:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8012d66:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8012d68:	69bb      	ldr	r3, [r7, #24]
 8012d6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8012d6e:	d101      	bne.n	8012d74 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8012d70:	4b6a      	ldr	r3, [pc, #424]	; (8012f1c <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8012d72:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8012d74:	69fb      	ldr	r3, [r7, #28]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	f040 80c6 	bne.w	8012f08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8012d7c:	683b      	ldr	r3, [r7, #0]
 8012d7e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8012d80:	69bb      	ldr	r3, [r7, #24]
 8012d82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012d86:	d003      	beq.n	8012d90 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8012d88:	69bb      	ldr	r3, [r7, #24]
 8012d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012d8e:	d13b      	bne.n	8012e08 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8012d90:	4b61      	ldr	r3, [pc, #388]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012d9c:	f040 80b3 	bne.w	8012f06 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8012da0:	4b5d      	ldr	r3, [pc, #372]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012da2:	68db      	ldr	r3, [r3, #12]
 8012da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	f000 80ac 	beq.w	8012f06 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8012dae:	4b5a      	ldr	r3, [pc, #360]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012db0:	68db      	ldr	r3, [r3, #12]
 8012db2:	091b      	lsrs	r3, r3, #4
 8012db4:	f003 0307 	and.w	r3, r3, #7
 8012db8:	3301      	adds	r3, #1
 8012dba:	693a      	ldr	r2, [r7, #16]
 8012dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8012dc0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8012dc2:	4b55      	ldr	r3, [pc, #340]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012dc4:	68db      	ldr	r3, [r3, #12]
 8012dc6:	0a1b      	lsrs	r3, r3, #8
 8012dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012dcc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8012dce:	4b52      	ldr	r3, [pc, #328]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012dd0:	68db      	ldr	r3, [r3, #12]
 8012dd2:	0edb      	lsrs	r3, r3, #27
 8012dd4:	f003 031f 	and.w	r3, r3, #31
 8012dd8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d10a      	bne.n	8012df6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8012de0:	4b4d      	ldr	r3, [pc, #308]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012de2:	68db      	ldr	r3, [r3, #12]
 8012de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d002      	beq.n	8012df2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8012dec:	2311      	movs	r3, #17
 8012dee:	617b      	str	r3, [r7, #20]
 8012df0:	e001      	b.n	8012df6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8012df2:	2307      	movs	r3, #7
 8012df4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8012df6:	693b      	ldr	r3, [r7, #16]
 8012df8:	68fa      	ldr	r2, [r7, #12]
 8012dfa:	fb03 f202 	mul.w	r2, r3, r2
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e04:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8012e06:	e07e      	b.n	8012f06 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8012e08:	69bb      	ldr	r3, [r7, #24]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d139      	bne.n	8012e82 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8012e0e:	4b42      	ldr	r3, [pc, #264]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012e1a:	d175      	bne.n	8012f08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8012e1c:	4b3e      	ldr	r3, [pc, #248]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012e1e:	691b      	ldr	r3, [r3, #16]
 8012e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d06f      	beq.n	8012f08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8012e28:	4b3b      	ldr	r3, [pc, #236]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012e2a:	68db      	ldr	r3, [r3, #12]
 8012e2c:	091b      	lsrs	r3, r3, #4
 8012e2e:	f003 0307 	and.w	r3, r3, #7
 8012e32:	3301      	adds	r3, #1
 8012e34:	693a      	ldr	r2, [r7, #16]
 8012e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e3a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8012e3c:	4b36      	ldr	r3, [pc, #216]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012e3e:	691b      	ldr	r3, [r3, #16]
 8012e40:	0a1b      	lsrs	r3, r3, #8
 8012e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e46:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8012e48:	4b33      	ldr	r3, [pc, #204]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012e4a:	691b      	ldr	r3, [r3, #16]
 8012e4c:	0edb      	lsrs	r3, r3, #27
 8012e4e:	f003 031f 	and.w	r3, r3, #31
 8012e52:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8012e54:	697b      	ldr	r3, [r7, #20]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d10a      	bne.n	8012e70 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8012e5a:	4b2f      	ldr	r3, [pc, #188]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012e5c:	691b      	ldr	r3, [r3, #16]
 8012e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d002      	beq.n	8012e6c <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 8012e66:	2311      	movs	r3, #17
 8012e68:	617b      	str	r3, [r7, #20]
 8012e6a:	e001      	b.n	8012e70 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8012e6c:	2307      	movs	r3, #7
 8012e6e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	68fa      	ldr	r2, [r7, #12]
 8012e74:	fb03 f202 	mul.w	r2, r3, r2
 8012e78:	697b      	ldr	r3, [r7, #20]
 8012e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e7e:	61fb      	str	r3, [r7, #28]
 8012e80:	e042      	b.n	8012f08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8012e82:	69bb      	ldr	r3, [r7, #24]
 8012e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012e88:	d003      	beq.n	8012e92 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 8012e8a:	69bb      	ldr	r3, [r7, #24]
 8012e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012e90:	d13a      	bne.n	8012f08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8012e92:	4b21      	ldr	r3, [pc, #132]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012e9e:	d133      	bne.n	8012f08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8012ea0:	4b1d      	ldr	r3, [pc, #116]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012ea2:	695b      	ldr	r3, [r3, #20]
 8012ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d02d      	beq.n	8012f08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8012eac:	4b1a      	ldr	r3, [pc, #104]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012eae:	68db      	ldr	r3, [r3, #12]
 8012eb0:	091b      	lsrs	r3, r3, #4
 8012eb2:	f003 0307 	and.w	r3, r3, #7
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	693a      	ldr	r2, [r7, #16]
 8012eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ebe:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8012ec0:	4b15      	ldr	r3, [pc, #84]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012ec2:	695b      	ldr	r3, [r3, #20]
 8012ec4:	0a1b      	lsrs	r3, r3, #8
 8012ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012eca:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8012ecc:	4b12      	ldr	r3, [pc, #72]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012ece:	695b      	ldr	r3, [r3, #20]
 8012ed0:	0edb      	lsrs	r3, r3, #27
 8012ed2:	f003 031f 	and.w	r3, r3, #31
 8012ed6:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8012ed8:	697b      	ldr	r3, [r7, #20]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d10a      	bne.n	8012ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8012ede:	4b0e      	ldr	r3, [pc, #56]	; (8012f18 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012ee0:	695b      	ldr	r3, [r3, #20]
 8012ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d002      	beq.n	8012ef0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8012eea:	2311      	movs	r3, #17
 8012eec:	617b      	str	r3, [r7, #20]
 8012eee:	e001      	b.n	8012ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8012ef0:	2307      	movs	r3, #7
 8012ef2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	68fa      	ldr	r2, [r7, #12]
 8012ef8:	fb03 f202 	mul.w	r2, r3, r2
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f02:	61fb      	str	r3, [r7, #28]
 8012f04:	e000      	b.n	8012f08 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8012f06:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8012f08:	69fb      	ldr	r3, [r7, #28]
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3724      	adds	r7, #36	; 0x24
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f14:	4770      	bx	lr
 8012f16:	bf00      	nop
 8012f18:	40021000 	.word	0x40021000
 8012f1c:	001fff68 	.word	0x001fff68

08012f20 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b088      	sub	sp, #32
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d101      	bne.n	8012f32 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8012f2e:	2301      	movs	r3, #1
 8012f30:	e155      	b.n	80131de <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012f38:	b2db      	uxtb	r3, r3
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d106      	bne.n	8012f4c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2200      	movs	r2, #0
 8012f42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f7f0 f872 	bl	8003030 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f000 f959 	bl	8013204 <SAI_Disable>
 8012f52:	4603      	mov	r3, r0
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d001      	beq.n	8012f5c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8012f58:	2301      	movs	r3, #1
 8012f5a:	e140      	b.n	80131de <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2202      	movs	r2, #2
 8012f60:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	68db      	ldr	r3, [r3, #12]
 8012f68:	2b02      	cmp	r3, #2
 8012f6a:	d00c      	beq.n	8012f86 <HAL_SAI_Init+0x66>
 8012f6c:	2b02      	cmp	r3, #2
 8012f6e:	d80d      	bhi.n	8012f8c <HAL_SAI_Init+0x6c>
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d002      	beq.n	8012f7a <HAL_SAI_Init+0x5a>
 8012f74:	2b01      	cmp	r3, #1
 8012f76:	d003      	beq.n	8012f80 <HAL_SAI_Init+0x60>
 8012f78:	e008      	b.n	8012f8c <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	61fb      	str	r3, [r7, #28]
      break;
 8012f7e:	e008      	b.n	8012f92 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8012f80:	2310      	movs	r3, #16
 8012f82:	61fb      	str	r3, [r7, #28]
      break;
 8012f84:	e005      	b.n	8012f92 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8012f86:	2320      	movs	r3, #32
 8012f88:	61fb      	str	r3, [r7, #28]
      break;
 8012f8a:	e002      	b.n	8012f92 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	61fb      	str	r3, [r7, #28]
      break;
 8012f90:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	689b      	ldr	r3, [r3, #8]
 8012f96:	2b03      	cmp	r3, #3
 8012f98:	d81d      	bhi.n	8012fd6 <HAL_SAI_Init+0xb6>
 8012f9a:	a201      	add	r2, pc, #4	; (adr r2, 8012fa0 <HAL_SAI_Init+0x80>)
 8012f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fa0:	08012fb1 	.word	0x08012fb1
 8012fa4:	08012fb7 	.word	0x08012fb7
 8012fa8:	08012fbf 	.word	0x08012fbf
 8012fac:	08012fc7 	.word	0x08012fc7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	617b      	str	r3, [r7, #20]
      break;
 8012fb4:	e012      	b.n	8012fdc <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8012fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012fba:	617b      	str	r3, [r7, #20]
      break;
 8012fbc:	e00e      	b.n	8012fdc <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8012fbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012fc2:	617b      	str	r3, [r7, #20]
      break;
 8012fc4:	e00a      	b.n	8012fdc <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8012fc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012fca:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8012fcc:	69fb      	ldr	r3, [r7, #28]
 8012fce:	f043 0301 	orr.w	r3, r3, #1
 8012fd2:	61fb      	str	r3, [r7, #28]
      break;
 8012fd4:	e002      	b.n	8012fdc <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	617b      	str	r3, [r7, #20]
      break;
 8012fda:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	4a81      	ldr	r2, [pc, #516]	; (80131e8 <HAL_SAI_Init+0x2c8>)
 8012fe2:	4293      	cmp	r3, r2
 8012fe4:	d004      	beq.n	8012ff0 <HAL_SAI_Init+0xd0>
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	4a80      	ldr	r2, [pc, #512]	; (80131ec <HAL_SAI_Init+0x2cc>)
 8012fec:	4293      	cmp	r3, r2
 8012fee:	d103      	bne.n	8012ff8 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8012ff0:	4a7f      	ldr	r2, [pc, #508]	; (80131f0 <HAL_SAI_Init+0x2d0>)
 8012ff2:	69fb      	ldr	r3, [r7, #28]
 8012ff4:	6013      	str	r3, [r2, #0]
 8012ff6:	e002      	b.n	8012ffe <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8012ff8:	4a7e      	ldr	r2, [pc, #504]	; (80131f4 <HAL_SAI_Init+0x2d4>)
 8012ffa:	69fb      	ldr	r3, [r7, #28]
 8012ffc:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	69db      	ldr	r3, [r3, #28]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d041      	beq.n	801308a <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	4a77      	ldr	r2, [pc, #476]	; (80131e8 <HAL_SAI_Init+0x2c8>)
 801300c:	4293      	cmp	r3, r2
 801300e:	d004      	beq.n	801301a <HAL_SAI_Init+0xfa>
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	4a75      	ldr	r2, [pc, #468]	; (80131ec <HAL_SAI_Init+0x2cc>)
 8013016:	4293      	cmp	r3, r2
 8013018:	d105      	bne.n	8013026 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 801301a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801301e:	f7fe fee7 	bl	8011df0 <HAL_RCCEx_GetPeriphCLKFreq>
 8013022:	6138      	str	r0, [r7, #16]
 8013024:	e004      	b.n	8013030 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8013026:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801302a:	f7fe fee1 	bl	8011df0 <HAL_RCCEx_GetPeriphCLKFreq>
 801302e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8013030:	693a      	ldr	r2, [r7, #16]
 8013032:	4613      	mov	r3, r2
 8013034:	009b      	lsls	r3, r3, #2
 8013036:	4413      	add	r3, r2
 8013038:	005b      	lsls	r3, r3, #1
 801303a:	461a      	mov	r2, r3
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	69db      	ldr	r3, [r3, #28]
 8013040:	025b      	lsls	r3, r3, #9
 8013042:	fbb2 f3f3 	udiv	r3, r2, r3
 8013046:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	4a6b      	ldr	r2, [pc, #428]	; (80131f8 <HAL_SAI_Init+0x2d8>)
 801304c:	fba2 2303 	umull	r2, r3, r2, r3
 8013050:	08da      	lsrs	r2, r3, #3
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8013056:	68f9      	ldr	r1, [r7, #12]
 8013058:	4b67      	ldr	r3, [pc, #412]	; (80131f8 <HAL_SAI_Init+0x2d8>)
 801305a:	fba3 2301 	umull	r2, r3, r3, r1
 801305e:	08da      	lsrs	r2, r3, #3
 8013060:	4613      	mov	r3, r2
 8013062:	009b      	lsls	r3, r3, #2
 8013064:	4413      	add	r3, r2
 8013066:	005b      	lsls	r3, r3, #1
 8013068:	1aca      	subs	r2, r1, r3
 801306a:	2a08      	cmp	r2, #8
 801306c:	d904      	bls.n	8013078 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6a1b      	ldr	r3, [r3, #32]
 8013072:	1c5a      	adds	r2, r3, #1
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801307c:	2b04      	cmp	r3, #4
 801307e:	d104      	bne.n	801308a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	6a1b      	ldr	r3, [r3, #32]
 8013084:	085a      	lsrs	r2, r3, #1
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	685b      	ldr	r3, [r3, #4]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d003      	beq.n	801309a <HAL_SAI_Init+0x17a>
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	2b02      	cmp	r3, #2
 8013098:	d109      	bne.n	80130ae <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801309e:	2b01      	cmp	r3, #1
 80130a0:	d101      	bne.n	80130a6 <HAL_SAI_Init+0x186>
 80130a2:	2300      	movs	r3, #0
 80130a4:	e001      	b.n	80130aa <HAL_SAI_Init+0x18a>
 80130a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80130aa:	61bb      	str	r3, [r7, #24]
 80130ac:	e008      	b.n	80130c0 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130b2:	2b01      	cmp	r3, #1
 80130b4:	d102      	bne.n	80130bc <HAL_SAI_Init+0x19c>
 80130b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80130ba:	e000      	b.n	80130be <HAL_SAI_Init+0x19e>
 80130bc:	2300      	movs	r3, #0
 80130be:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	6819      	ldr	r1, [r3, #0]
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	681a      	ldr	r2, [r3, #0]
 80130ca:	4b4c      	ldr	r3, [pc, #304]	; (80131fc <HAL_SAI_Init+0x2dc>)
 80130cc:	400b      	ands	r3, r1
 80130ce:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	6819      	ldr	r1, [r3, #0]
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	685a      	ldr	r2, [r3, #4]
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130de:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80130e4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130ea:	431a      	orrs	r2, r3
 80130ec:	69bb      	ldr	r3, [r7, #24]
 80130ee:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 80130f8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	691b      	ldr	r3, [r3, #16]
 80130fe:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8013104:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	6a1b      	ldr	r3, [r3, #32]
 801310a:	051b      	lsls	r3, r3, #20
 801310c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	430a      	orrs	r2, r1
 8013114:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	685b      	ldr	r3, [r3, #4]
 801311c:	687a      	ldr	r2, [r7, #4]
 801311e:	6812      	ldr	r2, [r2, #0]
 8013120:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8013124:	f023 030f 	bic.w	r3, r3, #15
 8013128:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	6859      	ldr	r1, [r3, #4]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	699a      	ldr	r2, [r3, #24]
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013138:	431a      	orrs	r2, r3
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801313e:	431a      	orrs	r2, r3
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	430a      	orrs	r2, r1
 8013146:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	6899      	ldr	r1, [r3, #8]
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	4b2b      	ldr	r3, [pc, #172]	; (8013200 <HAL_SAI_Init+0x2e0>)
 8013154:	400b      	ands	r3, r1
 8013156:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	6899      	ldr	r1, [r3, #8]
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013162:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8013168:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 801316e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8013174:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801317a:	3b01      	subs	r3, #1
 801317c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 801317e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	430a      	orrs	r2, r1
 8013186:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	68d9      	ldr	r1, [r3, #12]
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681a      	ldr	r2, [r3, #0]
 8013192:	f24f 0320 	movw	r3, #61472	; 0xf020
 8013196:	400b      	ands	r3, r1
 8013198:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	68d9      	ldr	r1, [r3, #12]
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80131a8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131ae:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80131b0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131b6:	3b01      	subs	r3, #1
 80131b8:	021b      	lsls	r3, r3, #8
 80131ba:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	430a      	orrs	r2, r1
 80131c2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2200      	movs	r2, #0
 80131c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2201      	movs	r2, #1
 80131d0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2200      	movs	r2, #0
 80131d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80131dc:	2300      	movs	r3, #0
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3720      	adds	r7, #32
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}
 80131e6:	bf00      	nop
 80131e8:	40015404 	.word	0x40015404
 80131ec:	40015424 	.word	0x40015424
 80131f0:	40015400 	.word	0x40015400
 80131f4:	40015800 	.word	0x40015800
 80131f8:	cccccccd 	.word	0xcccccccd
 80131fc:	ff05c010 	.word	0xff05c010
 8013200:	fff88000 	.word	0xfff88000

08013204 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8013204:	b480      	push	{r7}
 8013206:	b085      	sub	sp, #20
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 801320c:	4b18      	ldr	r3, [pc, #96]	; (8013270 <SAI_Disable+0x6c>)
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	4a18      	ldr	r2, [pc, #96]	; (8013274 <SAI_Disable+0x70>)
 8013212:	fba2 2303 	umull	r2, r3, r2, r3
 8013216:	0b1b      	lsrs	r3, r3, #12
 8013218:	009b      	lsls	r3, r3, #2
 801321a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 801321c:	2300      	movs	r3, #0
 801321e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	681a      	ldr	r2, [r3, #0]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801322e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d10a      	bne.n	801324c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801323c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8013246:	2303      	movs	r3, #3
 8013248:	72fb      	strb	r3, [r7, #11]
      break;
 801324a:	e009      	b.n	8013260 <SAI_Disable+0x5c>
    }
    count--;
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	3b01      	subs	r3, #1
 8013250:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801325c:	2b00      	cmp	r3, #0
 801325e:	d1e7      	bne.n	8013230 <SAI_Disable+0x2c>

  return status;
 8013260:	7afb      	ldrb	r3, [r7, #11]
}
 8013262:	4618      	mov	r0, r3
 8013264:	3714      	adds	r7, #20
 8013266:	46bd      	mov	sp, r7
 8013268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326c:	4770      	bx	lr
 801326e:	bf00      	nop
 8013270:	200001a0 	.word	0x200001a0
 8013274:	95cbec1b 	.word	0x95cbec1b

08013278 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b082      	sub	sp, #8
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d101      	bne.n	801328a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8013286:	2301      	movs	r3, #1
 8013288:	e022      	b.n	80132d0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013290:	b2db      	uxtb	r3, r3
 8013292:	2b00      	cmp	r3, #0
 8013294:	d105      	bne.n	80132a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2200      	movs	r2, #0
 801329a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 801329c:	6878      	ldr	r0, [r7, #4]
 801329e:	f7ef ff71 	bl	8003184 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	2203      	movs	r2, #3
 80132a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f000 f814 	bl	80132d8 <HAL_SD_InitCard>
 80132b0:	4603      	mov	r3, r0
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d001      	beq.n	80132ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80132b6:	2301      	movs	r3, #1
 80132b8:	e00a      	b.n	80132d0 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2200      	movs	r2, #0
 80132be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	2200      	movs	r2, #0
 80132c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2201      	movs	r2, #1
 80132ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80132ce:	2300      	movs	r3, #0
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3708      	adds	r7, #8
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}

080132d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80132d8:	b5b0      	push	{r4, r5, r7, lr}
 80132da:	b08e      	sub	sp, #56	; 0x38
 80132dc:	af04      	add	r7, sp, #16
 80132de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80132e0:	2300      	movs	r3, #0
 80132e2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80132e4:	2300      	movs	r3, #0
 80132e6:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80132e8:	2300      	movs	r3, #0
 80132ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80132ec:	2300      	movs	r3, #0
 80132ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80132f0:	2300      	movs	r3, #0
 80132f2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80132f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80132f8:	f7fe fd7a 	bl	8011df0 <HAL_RCCEx_GetPeriphCLKFreq>
 80132fc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80132fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013300:	2b00      	cmp	r3, #0
 8013302:	d109      	bne.n	8013318 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2201      	movs	r2, #1
 8013308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013312:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8013314:	2301      	movs	r3, #1
 8013316:	e07b      	b.n	8013410 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8013318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801331a:	09db      	lsrs	r3, r3, #7
 801331c:	4a3e      	ldr	r2, [pc, #248]	; (8013418 <HAL_SD_InitCard+0x140>)
 801331e:	fba2 2303 	umull	r2, r3, r2, r3
 8013322:	091b      	lsrs	r3, r3, #4
 8013324:	3b02      	subs	r3, #2
 8013326:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681d      	ldr	r5, [r3, #0]
 801332c:	466c      	mov	r4, sp
 801332e:	f107 0314 	add.w	r3, r7, #20
 8013332:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801333a:	f107 0308 	add.w	r3, r7, #8
 801333e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013340:	4628      	mov	r0, r5
 8013342:	f002 fe2b 	bl	8015f9c <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	685a      	ldr	r2, [r3, #4]
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013354:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	4618      	mov	r0, r3
 801335c:	f002 fe58 	bl	8016010 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	685a      	ldr	r2, [r3, #4]
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801336e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8013370:	69fb      	ldr	r3, [r7, #28]
 8013372:	3302      	adds	r3, #2
 8013374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013376:	fbb2 f3f3 	udiv	r3, r2, r3
 801337a:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 801337c:	4a27      	ldr	r2, [pc, #156]	; (801341c <HAL_SD_InitCard+0x144>)
 801337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013380:	fbb2 f3f3 	udiv	r3, r2, r3
 8013384:	3301      	adds	r3, #1
 8013386:	4618      	mov	r0, r3
 8013388:	f7f8 fe84 	bl	800c094 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f000 fb77 	bl	8013a80 <SD_PowerON>
 8013392:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013394:	6a3b      	ldr	r3, [r7, #32]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d00b      	beq.n	80133b2 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2201      	movs	r2, #1
 801339e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133a6:	6a3b      	ldr	r3, [r7, #32]
 80133a8:	431a      	orrs	r2, r3
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80133ae:	2301      	movs	r3, #1
 80133b0:	e02e      	b.n	8013410 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f000 fa96 	bl	80138e4 <SD_InitCard>
 80133b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80133ba:	6a3b      	ldr	r3, [r7, #32]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d00b      	beq.n	80133d8 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2201      	movs	r2, #1
 80133c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133cc:	6a3b      	ldr	r3, [r7, #32]
 80133ce:	431a      	orrs	r2, r3
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80133d4:	2301      	movs	r3, #1
 80133d6:	e01b      	b.n	8013410 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80133e0:	4618      	mov	r0, r3
 80133e2:	f002 fea8 	bl	8016136 <SDMMC_CmdBlockLength>
 80133e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80133e8:	6a3b      	ldr	r3, [r7, #32]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d00f      	beq.n	801340e <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	4a0b      	ldr	r2, [pc, #44]	; (8013420 <HAL_SD_InitCard+0x148>)
 80133f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133fa:	6a3b      	ldr	r3, [r7, #32]
 80133fc:	431a      	orrs	r2, r3
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	2201      	movs	r2, #1
 8013406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801340a:	2301      	movs	r3, #1
 801340c:	e000      	b.n	8013410 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 801340e:	2300      	movs	r3, #0
}
 8013410:	4618      	mov	r0, r3
 8013412:	3728      	adds	r7, #40	; 0x28
 8013414:	46bd      	mov	sp, r7
 8013416:	bdb0      	pop	{r4, r5, r7, pc}
 8013418:	014f8b59 	.word	0x014f8b59
 801341c:	00012110 	.word	0x00012110
 8013420:	004005ff 	.word	0x004005ff

08013424 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8013424:	b480      	push	{r7}
 8013426:	b083      	sub	sp, #12
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013432:	0f9b      	lsrs	r3, r3, #30
 8013434:	b2da      	uxtb	r2, r3
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801343e:	0e9b      	lsrs	r3, r3, #26
 8013440:	b2db      	uxtb	r3, r3
 8013442:	f003 030f 	and.w	r3, r3, #15
 8013446:	b2da      	uxtb	r2, r3
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013450:	0e1b      	lsrs	r3, r3, #24
 8013452:	b2db      	uxtb	r3, r3
 8013454:	f003 0303 	and.w	r3, r3, #3
 8013458:	b2da      	uxtb	r2, r3
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013462:	0c1b      	lsrs	r3, r3, #16
 8013464:	b2da      	uxtb	r2, r3
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801346e:	0a1b      	lsrs	r3, r3, #8
 8013470:	b2da      	uxtb	r2, r3
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801347a:	b2da      	uxtb	r2, r3
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013484:	0d1b      	lsrs	r3, r3, #20
 8013486:	b29a      	uxth	r2, r3
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013490:	0c1b      	lsrs	r3, r3, #16
 8013492:	b2db      	uxtb	r3, r3
 8013494:	f003 030f 	and.w	r3, r3, #15
 8013498:	b2da      	uxtb	r2, r3
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134a2:	0bdb      	lsrs	r3, r3, #15
 80134a4:	b2db      	uxtb	r3, r3
 80134a6:	f003 0301 	and.w	r3, r3, #1
 80134aa:	b2da      	uxtb	r2, r3
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134b4:	0b9b      	lsrs	r3, r3, #14
 80134b6:	b2db      	uxtb	r3, r3
 80134b8:	f003 0301 	and.w	r3, r3, #1
 80134bc:	b2da      	uxtb	r2, r3
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134c6:	0b5b      	lsrs	r3, r3, #13
 80134c8:	b2db      	uxtb	r3, r3
 80134ca:	f003 0301 	and.w	r3, r3, #1
 80134ce:	b2da      	uxtb	r2, r3
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134d8:	0b1b      	lsrs	r3, r3, #12
 80134da:	b2db      	uxtb	r3, r3
 80134dc:	f003 0301 	and.w	r3, r3, #1
 80134e0:	b2da      	uxtb	r2, r3
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	2200      	movs	r2, #0
 80134ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d163      	bne.n	80135bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80134f8:	009a      	lsls	r2, r3, #2
 80134fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80134fe:	4013      	ands	r3, r2
 8013500:	687a      	ldr	r2, [r7, #4]
 8013502:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8013504:	0f92      	lsrs	r2, r2, #30
 8013506:	431a      	orrs	r2, r3
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013510:	0edb      	lsrs	r3, r3, #27
 8013512:	b2db      	uxtb	r3, r3
 8013514:	f003 0307 	and.w	r3, r3, #7
 8013518:	b2da      	uxtb	r2, r3
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013522:	0e1b      	lsrs	r3, r3, #24
 8013524:	b2db      	uxtb	r3, r3
 8013526:	f003 0307 	and.w	r3, r3, #7
 801352a:	b2da      	uxtb	r2, r3
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013534:	0d5b      	lsrs	r3, r3, #21
 8013536:	b2db      	uxtb	r3, r3
 8013538:	f003 0307 	and.w	r3, r3, #7
 801353c:	b2da      	uxtb	r2, r3
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013546:	0c9b      	lsrs	r3, r3, #18
 8013548:	b2db      	uxtb	r3, r3
 801354a:	f003 0307 	and.w	r3, r3, #7
 801354e:	b2da      	uxtb	r2, r3
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013558:	0bdb      	lsrs	r3, r3, #15
 801355a:	b2db      	uxtb	r3, r3
 801355c:	f003 0307 	and.w	r3, r3, #7
 8013560:	b2da      	uxtb	r2, r3
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	691b      	ldr	r3, [r3, #16]
 801356a:	1c5a      	adds	r2, r3, #1
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	7e1b      	ldrb	r3, [r3, #24]
 8013574:	b2db      	uxtb	r3, r3
 8013576:	f003 0307 	and.w	r3, r3, #7
 801357a:	3302      	adds	r3, #2
 801357c:	2201      	movs	r2, #1
 801357e:	fa02 f303 	lsl.w	r3, r2, r3
 8013582:	687a      	ldr	r2, [r7, #4]
 8013584:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8013586:	fb03 f202 	mul.w	r2, r3, r2
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	7a1b      	ldrb	r3, [r3, #8]
 8013592:	b2db      	uxtb	r3, r3
 8013594:	f003 030f 	and.w	r3, r3, #15
 8013598:	2201      	movs	r2, #1
 801359a:	409a      	lsls	r2, r3
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135a4:	687a      	ldr	r2, [r7, #4]
 80135a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80135a8:	0a52      	lsrs	r2, r2, #9
 80135aa:	fb03 f202 	mul.w	r2, r3, r2
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135b8:	661a      	str	r2, [r3, #96]	; 0x60
 80135ba:	e031      	b.n	8013620 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135c0:	2b01      	cmp	r3, #1
 80135c2:	d11d      	bne.n	8013600 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80135c8:	041b      	lsls	r3, r3, #16
 80135ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135d2:	0c1b      	lsrs	r3, r3, #16
 80135d4:	431a      	orrs	r2, r3
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	691b      	ldr	r3, [r3, #16]
 80135de:	3301      	adds	r3, #1
 80135e0:	029a      	lsls	r2, r3, #10
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135f4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	661a      	str	r2, [r3, #96]	; 0x60
 80135fe:	e00f      	b.n	8013620 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	4a58      	ldr	r2, [pc, #352]	; (8013768 <HAL_SD_GetCardCSD+0x344>)
 8013606:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801360c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2201      	movs	r2, #1
 8013618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801361c:	2301      	movs	r3, #1
 801361e:	e09d      	b.n	801375c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013624:	0b9b      	lsrs	r3, r3, #14
 8013626:	b2db      	uxtb	r3, r3
 8013628:	f003 0301 	and.w	r3, r3, #1
 801362c:	b2da      	uxtb	r2, r3
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013636:	09db      	lsrs	r3, r3, #7
 8013638:	b2db      	uxtb	r3, r3
 801363a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801363e:	b2da      	uxtb	r2, r3
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013648:	b2db      	uxtb	r3, r3
 801364a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801364e:	b2da      	uxtb	r2, r3
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013658:	0fdb      	lsrs	r3, r3, #31
 801365a:	b2da      	uxtb	r2, r3
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013664:	0f5b      	lsrs	r3, r3, #29
 8013666:	b2db      	uxtb	r3, r3
 8013668:	f003 0303 	and.w	r3, r3, #3
 801366c:	b2da      	uxtb	r2, r3
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013676:	0e9b      	lsrs	r3, r3, #26
 8013678:	b2db      	uxtb	r3, r3
 801367a:	f003 0307 	and.w	r3, r3, #7
 801367e:	b2da      	uxtb	r2, r3
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013688:	0d9b      	lsrs	r3, r3, #22
 801368a:	b2db      	uxtb	r3, r3
 801368c:	f003 030f 	and.w	r3, r3, #15
 8013690:	b2da      	uxtb	r2, r3
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801369a:	0d5b      	lsrs	r3, r3, #21
 801369c:	b2db      	uxtb	r3, r3
 801369e:	f003 0301 	and.w	r3, r3, #1
 80136a2:	b2da      	uxtb	r2, r3
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	2200      	movs	r2, #0
 80136ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136b6:	0c1b      	lsrs	r3, r3, #16
 80136b8:	b2db      	uxtb	r3, r3
 80136ba:	f003 0301 	and.w	r3, r3, #1
 80136be:	b2da      	uxtb	r2, r3
 80136c0:	683b      	ldr	r3, [r7, #0]
 80136c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136ca:	0bdb      	lsrs	r3, r3, #15
 80136cc:	b2db      	uxtb	r3, r3
 80136ce:	f003 0301 	and.w	r3, r3, #1
 80136d2:	b2da      	uxtb	r2, r3
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136de:	0b9b      	lsrs	r3, r3, #14
 80136e0:	b2db      	uxtb	r3, r3
 80136e2:	f003 0301 	and.w	r3, r3, #1
 80136e6:	b2da      	uxtb	r2, r3
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136f2:	0b5b      	lsrs	r3, r3, #13
 80136f4:	b2db      	uxtb	r3, r3
 80136f6:	f003 0301 	and.w	r3, r3, #1
 80136fa:	b2da      	uxtb	r2, r3
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013706:	0b1b      	lsrs	r3, r3, #12
 8013708:	b2db      	uxtb	r3, r3
 801370a:	f003 0301 	and.w	r3, r3, #1
 801370e:	b2da      	uxtb	r2, r3
 8013710:	683b      	ldr	r3, [r7, #0]
 8013712:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801371a:	0a9b      	lsrs	r3, r3, #10
 801371c:	b2db      	uxtb	r3, r3
 801371e:	f003 0303 	and.w	r3, r3, #3
 8013722:	b2da      	uxtb	r2, r3
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801372e:	0a1b      	lsrs	r3, r3, #8
 8013730:	b2db      	uxtb	r3, r3
 8013732:	f003 0303 	and.w	r3, r3, #3
 8013736:	b2da      	uxtb	r2, r3
 8013738:	683b      	ldr	r3, [r7, #0]
 801373a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013742:	085b      	lsrs	r3, r3, #1
 8013744:	b2db      	uxtb	r3, r3
 8013746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801374a:	b2da      	uxtb	r2, r3
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	2201      	movs	r2, #1
 8013756:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 801375a:	2300      	movs	r3, #0
}
 801375c:	4618      	mov	r0, r3
 801375e:	370c      	adds	r7, #12
 8013760:	46bd      	mov	sp, r7
 8013762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013766:	4770      	bx	lr
 8013768:	004005ff 	.word	0x004005ff

0801376c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 801376c:	b5b0      	push	{r4, r5, r7, lr}
 801376e:	b090      	sub	sp, #64	; 0x40
 8013770:	af04      	add	r7, sp, #16
 8013772:	6078      	str	r0, [r7, #4]
 8013774:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8013776:	2300      	movs	r3, #0
 8013778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2203      	movs	r2, #3
 8013780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013788:	2b03      	cmp	r3, #3
 801378a:	d02e      	beq.n	80137ea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013792:	d106      	bne.n	80137a2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013798:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	639a      	str	r2, [r3, #56]	; 0x38
 80137a0:	e029      	b.n	80137f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80137a2:	683b      	ldr	r3, [r7, #0]
 80137a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80137a8:	d10a      	bne.n	80137c0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f000 f9f6 	bl	8013b9c <SD_WideBus_Enable>
 80137b0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80137b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b8:	431a      	orrs	r2, r3
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	639a      	str	r2, [r3, #56]	; 0x38
 80137be:	e01a      	b.n	80137f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d10a      	bne.n	80137dc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f000 fa33 	bl	8013c32 <SD_WideBus_Disable>
 80137cc:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80137d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d4:	431a      	orrs	r2, r3
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	639a      	str	r2, [r3, #56]	; 0x38
 80137da:	e00c      	b.n	80137f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	639a      	str	r2, [r3, #56]	; 0x38
 80137e8:	e005      	b.n	80137f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d007      	beq.n	801380e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	4a35      	ldr	r2, [pc, #212]	; (80138d8 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8013804:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8013806:	2301      	movs	r3, #1
 8013808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801380c:	e042      	b.n	8013894 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 801380e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8013812:	f7fe faed 	bl	8011df0 <HAL_RCCEx_GetPeriphCLKFreq>
 8013816:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8013818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381a:	2b00      	cmp	r3, #0
 801381c:	d031      	beq.n	8013882 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	685b      	ldr	r3, [r3, #4]
 8013822:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	689b      	ldr	r3, [r3, #8]
 8013828:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	68db      	ldr	r3, [r3, #12]
 801382e:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	695b      	ldr	r3, [r3, #20]
 8013838:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	699b      	ldr	r3, [r3, #24]
 801383e:	3302      	adds	r3, #2
 8013840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013842:	fbb2 f3f3 	udiv	r3, r2, r3
 8013846:	4a25      	ldr	r2, [pc, #148]	; (80138dc <HAL_SD_ConfigWideBusOperation+0x170>)
 8013848:	4293      	cmp	r3, r2
 801384a:	d907      	bls.n	801385c <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 801384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384e:	4a24      	ldr	r2, [pc, #144]	; (80138e0 <HAL_SD_ConfigWideBusOperation+0x174>)
 8013850:	fba2 2303 	umull	r2, r3, r2, r3
 8013854:	0ddb      	lsrs	r3, r3, #23
 8013856:	3b02      	subs	r3, #2
 8013858:	623b      	str	r3, [r7, #32]
 801385a:	e002      	b.n	8013862 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	699b      	ldr	r3, [r3, #24]
 8013860:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	681d      	ldr	r5, [r3, #0]
 8013866:	466c      	mov	r4, sp
 8013868:	f107 0318 	add.w	r3, r7, #24
 801386c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013870:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013874:	f107 030c 	add.w	r3, r7, #12
 8013878:	cb0e      	ldmia	r3, {r1, r2, r3}
 801387a:	4628      	mov	r0, r5
 801387c:	f002 fb8e 	bl	8015f9c <SDMMC_Init>
 8013880:	e008      	b.n	8013894 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013886:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 801388e:	2301      	movs	r3, #1
 8013890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	f44f 7100 	mov.w	r1, #512	; 0x200
 801389c:	4618      	mov	r0, r3
 801389e:	f002 fc4a 	bl	8016136 <SDMMC_CmdBlockLength>
 80138a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80138a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d00c      	beq.n	80138c4 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	4a0a      	ldr	r2, [pc, #40]	; (80138d8 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80138b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138b8:	431a      	orrs	r2, r3
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80138be:	2301      	movs	r3, #1
 80138c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	2201      	movs	r2, #1
 80138c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80138cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80138d0:	4618      	mov	r0, r3
 80138d2:	3730      	adds	r7, #48	; 0x30
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bdb0      	pop	{r4, r5, r7, pc}
 80138d8:	004005ff 	.word	0x004005ff
 80138dc:	017d7840 	.word	0x017d7840
 80138e0:	55e63b89 	.word	0x55e63b89

080138e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80138e4:	b5b0      	push	{r4, r5, r7, lr}
 80138e6:	b094      	sub	sp, #80	; 0x50
 80138e8:	af04      	add	r7, sp, #16
 80138ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80138ec:	2301      	movs	r3, #1
 80138ee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	4618      	mov	r0, r3
 80138f6:	f002 fb9a 	bl	801602e <SDMMC_GetPowerState>
 80138fa:	4603      	mov	r3, r0
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d102      	bne.n	8013906 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8013900:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8013904:	e0b8      	b.n	8013a78 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801390a:	2b03      	cmp	r3, #3
 801390c:	d02f      	beq.n	801396e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	4618      	mov	r0, r3
 8013914:	f002 fd19 	bl	801634a <SDMMC_CmdSendCID>
 8013918:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801391a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801391c:	2b00      	cmp	r3, #0
 801391e:	d001      	beq.n	8013924 <SD_InitCard+0x40>
    {
      return errorstate;
 8013920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013922:	e0a9      	b.n	8013a78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	2100      	movs	r1, #0
 801392a:	4618      	mov	r0, r3
 801392c:	f002 fbc4 	bl	80160b8 <SDMMC_GetResponse>
 8013930:	4602      	mov	r2, r0
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	2104      	movs	r1, #4
 801393c:	4618      	mov	r0, r3
 801393e:	f002 fbbb 	bl	80160b8 <SDMMC_GetResponse>
 8013942:	4602      	mov	r2, r0
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	2108      	movs	r1, #8
 801394e:	4618      	mov	r0, r3
 8013950:	f002 fbb2 	bl	80160b8 <SDMMC_GetResponse>
 8013954:	4602      	mov	r2, r0
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	210c      	movs	r1, #12
 8013960:	4618      	mov	r0, r3
 8013962:	f002 fba9 	bl	80160b8 <SDMMC_GetResponse>
 8013966:	4602      	mov	r2, r0
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013972:	2b03      	cmp	r3, #3
 8013974:	d00d      	beq.n	8013992 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	f107 020e 	add.w	r2, r7, #14
 801397e:	4611      	mov	r1, r2
 8013980:	4618      	mov	r0, r3
 8013982:	f002 fd1f 	bl	80163c4 <SDMMC_CmdSetRelAdd>
 8013986:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8013988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801398a:	2b00      	cmp	r3, #0
 801398c:	d001      	beq.n	8013992 <SD_InitCard+0xae>
    {
      return errorstate;
 801398e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013990:	e072      	b.n	8013a78 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013996:	2b03      	cmp	r3, #3
 8013998:	d036      	beq.n	8013a08 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801399a:	89fb      	ldrh	r3, [r7, #14]
 801399c:	461a      	mov	r2, r3
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	681a      	ldr	r2, [r3, #0]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139aa:	041b      	lsls	r3, r3, #16
 80139ac:	4619      	mov	r1, r3
 80139ae:	4610      	mov	r0, r2
 80139b0:	f002 fce9 	bl	8016386 <SDMMC_CmdSendCSD>
 80139b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80139b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d001      	beq.n	80139c0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80139bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139be:	e05b      	b.n	8013a78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	2100      	movs	r1, #0
 80139c6:	4618      	mov	r0, r3
 80139c8:	f002 fb76 	bl	80160b8 <SDMMC_GetResponse>
 80139cc:	4602      	mov	r2, r0
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	2104      	movs	r1, #4
 80139d8:	4618      	mov	r0, r3
 80139da:	f002 fb6d 	bl	80160b8 <SDMMC_GetResponse>
 80139de:	4602      	mov	r2, r0
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	2108      	movs	r1, #8
 80139ea:	4618      	mov	r0, r3
 80139ec:	f002 fb64 	bl	80160b8 <SDMMC_GetResponse>
 80139f0:	4602      	mov	r2, r0
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	210c      	movs	r1, #12
 80139fc:	4618      	mov	r0, r3
 80139fe:	f002 fb5b 	bl	80160b8 <SDMMC_GetResponse>
 8013a02:	4602      	mov	r2, r0
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	2104      	movs	r1, #4
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f002 fb52 	bl	80160b8 <SDMMC_GetResponse>
 8013a14:	4603      	mov	r3, r0
 8013a16:	0d1a      	lsrs	r2, r3, #20
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8013a1c:	f107 0310 	add.w	r3, r7, #16
 8013a20:	4619      	mov	r1, r3
 8013a22:	6878      	ldr	r0, [r7, #4]
 8013a24:	f7ff fcfe 	bl	8013424 <HAL_SD_GetCardCSD>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d002      	beq.n	8013a34 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013a2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013a32:	e021      	b.n	8013a78 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	6819      	ldr	r1, [r3, #0]
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a3c:	041b      	lsls	r3, r3, #16
 8013a3e:	2200      	movs	r2, #0
 8013a40:	461c      	mov	r4, r3
 8013a42:	4615      	mov	r5, r2
 8013a44:	4622      	mov	r2, r4
 8013a46:	462b      	mov	r3, r5
 8013a48:	4608      	mov	r0, r1
 8013a4a:	f002 fb96 	bl	801617a <SDMMC_CmdSelDesel>
 8013a4e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8013a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d001      	beq.n	8013a5a <SD_InitCard+0x176>
  {
    return errorstate;
 8013a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a58:	e00e      	b.n	8013a78 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	681d      	ldr	r5, [r3, #0]
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	466c      	mov	r4, sp
 8013a62:	f103 0210 	add.w	r2, r3, #16
 8013a66:	ca07      	ldmia	r2, {r0, r1, r2}
 8013a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013a6c:	3304      	adds	r3, #4
 8013a6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013a70:	4628      	mov	r0, r5
 8013a72:	f002 fa93 	bl	8015f9c <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8013a76:	2300      	movs	r3, #0
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3740      	adds	r7, #64	; 0x40
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bdb0      	pop	{r4, r5, r7, pc}

08013a80 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b086      	sub	sp, #24
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013a88:	2300      	movs	r3, #0
 8013a8a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	617b      	str	r3, [r7, #20]
 8013a90:	2300      	movs	r3, #0
 8013a92:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f002 fb91 	bl	80161c0 <SDMMC_CmdGoIdleState>
 8013a9e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d001      	beq.n	8013aaa <SD_PowerON+0x2a>
  {
    return errorstate;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	e072      	b.n	8013b90 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f002 fba4 	bl	80161fc <SDMMC_CmdOperCond>
 8013ab4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d00d      	beq.n	8013ad8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2200      	movs	r2, #0
 8013ac0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f002 fb7a 	bl	80161c0 <SDMMC_CmdGoIdleState>
 8013acc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d004      	beq.n	8013ade <SD_PowerON+0x5e>
    {
      return errorstate;
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	e05b      	b.n	8013b90 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	2201      	movs	r2, #1
 8013adc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ae2:	2b01      	cmp	r3, #1
 8013ae4:	d137      	bne.n	8013b56 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	2100      	movs	r1, #0
 8013aec:	4618      	mov	r0, r3
 8013aee:	f002 fba4 	bl	801623a <SDMMC_CmdAppCommand>
 8013af2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d02d      	beq.n	8013b56 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013afa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013afe:	e047      	b.n	8013b90 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	2100      	movs	r1, #0
 8013b06:	4618      	mov	r0, r3
 8013b08:	f002 fb97 	bl	801623a <SDMMC_CmdAppCommand>
 8013b0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d001      	beq.n	8013b18 <SD_PowerON+0x98>
    {
      return errorstate;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	e03b      	b.n	8013b90 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	491e      	ldr	r1, [pc, #120]	; (8013b98 <SD_PowerON+0x118>)
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f002 fbad 	bl	801627e <SDMMC_CmdAppOperCommand>
 8013b24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d002      	beq.n	8013b32 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013b2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013b30:	e02e      	b.n	8013b90 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	2100      	movs	r1, #0
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f002 fabd 	bl	80160b8 <SDMMC_GetResponse>
 8013b3e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	0fdb      	lsrs	r3, r3, #31
 8013b44:	2b01      	cmp	r3, #1
 8013b46:	d101      	bne.n	8013b4c <SD_PowerON+0xcc>
 8013b48:	2301      	movs	r3, #1
 8013b4a:	e000      	b.n	8013b4e <SD_PowerON+0xce>
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	613b      	str	r3, [r7, #16]

    count++;
 8013b50:	68bb      	ldr	r3, [r7, #8]
 8013b52:	3301      	adds	r3, #1
 8013b54:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013b5c:	4293      	cmp	r3, r2
 8013b5e:	d802      	bhi.n	8013b66 <SD_PowerON+0xe6>
 8013b60:	693b      	ldr	r3, [r7, #16]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d0cc      	beq.n	8013b00 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013b6c:	4293      	cmp	r3, r2
 8013b6e:	d902      	bls.n	8013b76 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8013b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8013b74:	e00c      	b.n	8013b90 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d003      	beq.n	8013b88 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	2201      	movs	r2, #1
 8013b84:	645a      	str	r2, [r3, #68]	; 0x44
 8013b86:	e002      	b.n	8013b8e <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8013b8e:	2300      	movs	r3, #0
}
 8013b90:	4618      	mov	r0, r3
 8013b92:	3718      	adds	r7, #24
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}
 8013b98:	c1100000 	.word	0xc1100000

08013b9c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b086      	sub	sp, #24
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	60fb      	str	r3, [r7, #12]
 8013ba8:	2300      	movs	r3, #0
 8013baa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	2100      	movs	r1, #0
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f002 fa80 	bl	80160b8 <SDMMC_GetResponse>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013bbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013bc2:	d102      	bne.n	8013bca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8013bc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013bc8:	e02f      	b.n	8013c2a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8013bca:	f107 030c 	add.w	r3, r7, #12
 8013bce:	4619      	mov	r1, r3
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f000 f879 	bl	8013cc8 <SD_FindSCR>
 8013bd6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013bd8:	697b      	ldr	r3, [r7, #20]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d001      	beq.n	8013be2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8013bde:	697b      	ldr	r3, [r7, #20]
 8013be0:	e023      	b.n	8013c2a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8013be2:	693b      	ldr	r3, [r7, #16]
 8013be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d01c      	beq.n	8013c26 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681a      	ldr	r2, [r3, #0]
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bf4:	041b      	lsls	r3, r3, #16
 8013bf6:	4619      	mov	r1, r3
 8013bf8:	4610      	mov	r0, r2
 8013bfa:	f002 fb1e 	bl	801623a <SDMMC_CmdAppCommand>
 8013bfe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d001      	beq.n	8013c0a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8013c06:	697b      	ldr	r3, [r7, #20]
 8013c08:	e00f      	b.n	8013c2a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	2102      	movs	r1, #2
 8013c10:	4618      	mov	r0, r3
 8013c12:	f002 fb57 	bl	80162c4 <SDMMC_CmdBusWidth>
 8013c16:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d001      	beq.n	8013c22 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	e003      	b.n	8013c2a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8013c22:	2300      	movs	r3, #0
 8013c24:	e001      	b.n	8013c2a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8013c26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3718      	adds	r7, #24
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}

08013c32 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8013c32:	b580      	push	{r7, lr}
 8013c34:	b086      	sub	sp, #24
 8013c36:	af00      	add	r7, sp, #0
 8013c38:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	60fb      	str	r3, [r7, #12]
 8013c3e:	2300      	movs	r3, #0
 8013c40:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	2100      	movs	r1, #0
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f002 fa35 	bl	80160b8 <SDMMC_GetResponse>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013c58:	d102      	bne.n	8013c60 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8013c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013c5e:	e02f      	b.n	8013cc0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8013c60:	f107 030c 	add.w	r3, r7, #12
 8013c64:	4619      	mov	r1, r3
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f000 f82e 	bl	8013cc8 <SD_FindSCR>
 8013c6c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013c6e:	697b      	ldr	r3, [r7, #20]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d001      	beq.n	8013c78 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8013c74:	697b      	ldr	r3, [r7, #20]
 8013c76:	e023      	b.n	8013cc0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8013c78:	693b      	ldr	r3, [r7, #16]
 8013c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d01c      	beq.n	8013cbc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	681a      	ldr	r2, [r3, #0]
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c8a:	041b      	lsls	r3, r3, #16
 8013c8c:	4619      	mov	r1, r3
 8013c8e:	4610      	mov	r0, r2
 8013c90:	f002 fad3 	bl	801623a <SDMMC_CmdAppCommand>
 8013c94:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013c96:	697b      	ldr	r3, [r7, #20]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d001      	beq.n	8013ca0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8013c9c:	697b      	ldr	r3, [r7, #20]
 8013c9e:	e00f      	b.n	8013cc0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	2100      	movs	r1, #0
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f002 fb0c 	bl	80162c4 <SDMMC_CmdBusWidth>
 8013cac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d001      	beq.n	8013cb8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	e003      	b.n	8013cc0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	e001      	b.n	8013cc0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8013cbc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	3718      	adds	r7, #24
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd80      	pop	{r7, pc}

08013cc8 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8013cc8:	b590      	push	{r4, r7, lr}
 8013cca:	b08f      	sub	sp, #60	; 0x3c
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8013cd2:	f7f8 f9d3 	bl	800c07c <HAL_GetTick>
 8013cd6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8013cdc:	2300      	movs	r3, #0
 8013cde:	60bb      	str	r3, [r7, #8]
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	2108      	movs	r1, #8
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f002 fa21 	bl	8016136 <SDMMC_CmdBlockLength>
 8013cf4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8013cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d001      	beq.n	8013d00 <SD_FindSCR+0x38>
  {
    return errorstate;
 8013cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cfe:	e0a9      	b.n	8013e54 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681a      	ldr	r2, [r3, #0]
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d08:	041b      	lsls	r3, r3, #16
 8013d0a:	4619      	mov	r1, r3
 8013d0c:	4610      	mov	r0, r2
 8013d0e:	f002 fa94 	bl	801623a <SDMMC_CmdAppCommand>
 8013d12:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8013d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d001      	beq.n	8013d1e <SD_FindSCR+0x56>
  {
    return errorstate;
 8013d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d1c:	e09a      	b.n	8013e54 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8013d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d22:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8013d24:	2308      	movs	r3, #8
 8013d26:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8013d28:	2330      	movs	r3, #48	; 0x30
 8013d2a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8013d2c:	2302      	movs	r3, #2
 8013d2e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8013d30:	2300      	movs	r3, #0
 8013d32:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8013d34:	2301      	movs	r3, #1
 8013d36:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	f107 0210 	add.w	r2, r7, #16
 8013d40:	4611      	mov	r1, r2
 8013d42:	4618      	mov	r0, r3
 8013d44:	f002 f9cb 	bl	80160de <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f002 fadb 	bl	8016308 <SDMMC_CmdSendSCR>
 8013d52:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8013d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d022      	beq.n	8013da0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8013d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d5c:	e07a      	b.n	8013e54 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d00e      	beq.n	8013d8a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	6819      	ldr	r1, [r3, #0]
 8013d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d72:	009b      	lsls	r3, r3, #2
 8013d74:	f107 0208 	add.w	r2, r7, #8
 8013d78:	18d4      	adds	r4, r2, r3
 8013d7a:	4608      	mov	r0, r1
 8013d7c:	f002 f93b 	bl	8015ff6 <SDMMC_ReadFIFO>
 8013d80:	4603      	mov	r3, r0
 8013d82:	6023      	str	r3, [r4, #0]
      index++;
 8013d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d86:	3301      	adds	r3, #1
 8013d88:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8013d8a:	f7f8 f977 	bl	800c07c <HAL_GetTick>
 8013d8e:	4602      	mov	r2, r0
 8013d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d92:	1ad3      	subs	r3, r2, r3
 8013d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d98:	d102      	bne.n	8013da0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8013d9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013d9e:	e059      	b.n	8013e54 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013da6:	f240 432a 	movw	r3, #1066	; 0x42a
 8013daa:	4013      	ands	r3, r2
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d0d6      	beq.n	8013d5e <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013db6:	f003 0308 	and.w	r3, r3, #8
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d005      	beq.n	8013dca <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	2208      	movs	r2, #8
 8013dc4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8013dc6:	2308      	movs	r3, #8
 8013dc8:	e044      	b.n	8013e54 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dd0:	f003 0302 	and.w	r3, r3, #2
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d005      	beq.n	8013de4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	2202      	movs	r2, #2
 8013dde:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8013de0:	2302      	movs	r3, #2
 8013de2:	e037      	b.n	8013e54 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dea:	f003 0320 	and.w	r3, r3, #32
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d005      	beq.n	8013dfe <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	2220      	movs	r2, #32
 8013df8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8013dfa:	2320      	movs	r3, #32
 8013dfc:	e02a      	b.n	8013e54 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	f240 523a 	movw	r2, #1338	; 0x53a
 8013e06:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	061a      	lsls	r2, r3, #24
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	021b      	lsls	r3, r3, #8
 8013e10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013e14:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	0a1b      	lsrs	r3, r3, #8
 8013e1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8013e1e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	0e1b      	lsrs	r3, r3, #24
 8013e24:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8013e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e28:	601a      	str	r2, [r3, #0]
    scr++;
 8013e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e2c:	3304      	adds	r3, #4
 8013e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	061a      	lsls	r2, r3, #24
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	021b      	lsls	r3, r3, #8
 8013e38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013e3c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	0a1b      	lsrs	r3, r3, #8
 8013e42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8013e46:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	0e1b      	lsrs	r3, r3, #24
 8013e4c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8013e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e50:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8013e52:	2300      	movs	r3, #0
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	373c      	adds	r7, #60	; 0x3c
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd90      	pop	{r4, r7, pc}

08013e5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b084      	sub	sp, #16
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d101      	bne.n	8013e6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013e6a:	2301      	movs	r3, #1
 8013e6c:	e095      	b.n	8013f9a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d108      	bne.n	8013e88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013e7e:	d009      	beq.n	8013e94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2200      	movs	r2, #0
 8013e84:	61da      	str	r2, [r3, #28]
 8013e86:	e005      	b.n	8013e94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	2200      	movs	r2, #0
 8013e92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	2200      	movs	r2, #0
 8013e98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013ea0:	b2db      	uxtb	r3, r3
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d106      	bne.n	8013eb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013eae:	6878      	ldr	r0, [r7, #4]
 8013eb0:	f7ef fa46 	bl	8003340 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2202      	movs	r2, #2
 8013eb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	681a      	ldr	r2, [r3, #0]
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013eca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	68db      	ldr	r3, [r3, #12]
 8013ed0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013ed4:	d902      	bls.n	8013edc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	60fb      	str	r3, [r7, #12]
 8013eda:	e002      	b.n	8013ee2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8013edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013ee0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	68db      	ldr	r3, [r3, #12]
 8013ee6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8013eea:	d007      	beq.n	8013efc <HAL_SPI_Init+0xa0>
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	68db      	ldr	r3, [r3, #12]
 8013ef0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013ef4:	d002      	beq.n	8013efc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2200      	movs	r2, #0
 8013efa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	685b      	ldr	r3, [r3, #4]
 8013f00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	689b      	ldr	r3, [r3, #8]
 8013f08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8013f0c:	431a      	orrs	r2, r3
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	691b      	ldr	r3, [r3, #16]
 8013f12:	f003 0302 	and.w	r3, r3, #2
 8013f16:	431a      	orrs	r2, r3
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	695b      	ldr	r3, [r3, #20]
 8013f1c:	f003 0301 	and.w	r3, r3, #1
 8013f20:	431a      	orrs	r2, r3
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	699b      	ldr	r3, [r3, #24]
 8013f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013f2a:	431a      	orrs	r2, r3
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	69db      	ldr	r3, [r3, #28]
 8013f30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013f34:	431a      	orrs	r2, r3
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	6a1b      	ldr	r3, [r3, #32]
 8013f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f3e:	ea42 0103 	orr.w	r1, r2, r3
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f46:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	430a      	orrs	r2, r1
 8013f50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	699b      	ldr	r3, [r3, #24]
 8013f56:	0c1b      	lsrs	r3, r3, #16
 8013f58:	f003 0204 	and.w	r2, r3, #4
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f60:	f003 0310 	and.w	r3, r3, #16
 8013f64:	431a      	orrs	r2, r3
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f6a:	f003 0308 	and.w	r3, r3, #8
 8013f6e:	431a      	orrs	r2, r3
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	68db      	ldr	r3, [r3, #12]
 8013f74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8013f78:	ea42 0103 	orr.w	r1, r2, r3
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	430a      	orrs	r2, r1
 8013f88:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2201      	movs	r2, #1
 8013f94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8013f98:	2300      	movs	r3, #0
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3710      	adds	r7, #16
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}

08013fa2 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8013fa2:	b580      	push	{r7, lr}
 8013fa4:	b084      	sub	sp, #16
 8013fa6:	af00      	add	r7, sp, #0
 8013fa8:	60f8      	str	r0, [r7, #12]
 8013faa:	60b9      	str	r1, [r7, #8]
 8013fac:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d101      	bne.n	8013fb8 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8013fb4:	2301      	movs	r3, #1
 8013fb6:	e038      	b.n	801402a <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8013fbe:	b2db      	uxtb	r3, r3
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d106      	bne.n	8013fd2 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8013fcc:	68f8      	ldr	r0, [r7, #12]
 8013fce:	f7ed fbd9 	bl	8001784 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	681a      	ldr	r2, [r3, #0]
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	3308      	adds	r3, #8
 8013fda:	4619      	mov	r1, r3
 8013fdc:	4610      	mov	r0, r2
 8013fde:	f001 fec5 	bl	8015d6c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	6818      	ldr	r0, [r3, #0]
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	689b      	ldr	r3, [r3, #8]
 8013fea:	461a      	mov	r2, r3
 8013fec:	68b9      	ldr	r1, [r7, #8]
 8013fee:	f001 ff4d 	bl	8015e8c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	6858      	ldr	r0, [r3, #4]
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	689a      	ldr	r2, [r3, #8]
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ffe:	6879      	ldr	r1, [r7, #4]
 8014000:	f001 ff94 	bl	8015f2c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	68fa      	ldr	r2, [r7, #12]
 801400a:	6892      	ldr	r2, [r2, #8]
 801400c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	68fa      	ldr	r2, [r7, #12]
 8014016:	6892      	ldr	r2, [r2, #8]
 8014018:	f041 0101 	orr.w	r1, r1, #1
 801401c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	2201      	movs	r2, #1
 8014024:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8014028:	2300      	movs	r3, #0
}
 801402a:	4618      	mov	r0, r3
 801402c:	3710      	adds	r7, #16
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}

08014032 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014032:	b580      	push	{r7, lr}
 8014034:	b082      	sub	sp, #8
 8014036:	af00      	add	r7, sp, #0
 8014038:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d101      	bne.n	8014044 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014040:	2301      	movs	r3, #1
 8014042:	e049      	b.n	80140d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801404a:	b2db      	uxtb	r3, r3
 801404c:	2b00      	cmp	r3, #0
 801404e:	d106      	bne.n	801405e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2200      	movs	r2, #0
 8014054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f7ef fb87 	bl	800376c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	2202      	movs	r2, #2
 8014062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681a      	ldr	r2, [r3, #0]
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	3304      	adds	r3, #4
 801406e:	4619      	mov	r1, r3
 8014070:	4610      	mov	r0, r2
 8014072:	f000 fcf5 	bl	8014a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2201      	movs	r2, #1
 801407a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	2201      	movs	r2, #1
 8014082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	2201      	movs	r2, #1
 801408a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	2201      	movs	r2, #1
 8014092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	2201      	movs	r2, #1
 801409a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2201      	movs	r2, #1
 80140a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	2201      	movs	r2, #1
 80140aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	2201      	movs	r2, #1
 80140b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2201      	movs	r2, #1
 80140ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	2201      	movs	r2, #1
 80140c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2201      	movs	r2, #1
 80140ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2201      	movs	r2, #1
 80140d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80140d6:	2300      	movs	r3, #0
}
 80140d8:	4618      	mov	r0, r3
 80140da:	3708      	adds	r7, #8
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}

080140e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80140e0:	b480      	push	{r7}
 80140e2:	b085      	sub	sp, #20
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80140ee:	b2db      	uxtb	r3, r3
 80140f0:	2b01      	cmp	r3, #1
 80140f2:	d001      	beq.n	80140f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80140f4:	2301      	movs	r3, #1
 80140f6:	e04f      	b.n	8014198 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2202      	movs	r2, #2
 80140fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	68da      	ldr	r2, [r3, #12]
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	f042 0201 	orr.w	r2, r2, #1
 801410e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	4a23      	ldr	r2, [pc, #140]	; (80141a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8014116:	4293      	cmp	r3, r2
 8014118:	d01d      	beq.n	8014156 <HAL_TIM_Base_Start_IT+0x76>
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014122:	d018      	beq.n	8014156 <HAL_TIM_Base_Start_IT+0x76>
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	4a1f      	ldr	r2, [pc, #124]	; (80141a8 <HAL_TIM_Base_Start_IT+0xc8>)
 801412a:	4293      	cmp	r3, r2
 801412c:	d013      	beq.n	8014156 <HAL_TIM_Base_Start_IT+0x76>
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	4a1e      	ldr	r2, [pc, #120]	; (80141ac <HAL_TIM_Base_Start_IT+0xcc>)
 8014134:	4293      	cmp	r3, r2
 8014136:	d00e      	beq.n	8014156 <HAL_TIM_Base_Start_IT+0x76>
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	4a1c      	ldr	r2, [pc, #112]	; (80141b0 <HAL_TIM_Base_Start_IT+0xd0>)
 801413e:	4293      	cmp	r3, r2
 8014140:	d009      	beq.n	8014156 <HAL_TIM_Base_Start_IT+0x76>
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	4a1b      	ldr	r2, [pc, #108]	; (80141b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8014148:	4293      	cmp	r3, r2
 801414a:	d004      	beq.n	8014156 <HAL_TIM_Base_Start_IT+0x76>
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	4a19      	ldr	r2, [pc, #100]	; (80141b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8014152:	4293      	cmp	r3, r2
 8014154:	d115      	bne.n	8014182 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	689a      	ldr	r2, [r3, #8]
 801415c:	4b17      	ldr	r3, [pc, #92]	; (80141bc <HAL_TIM_Base_Start_IT+0xdc>)
 801415e:	4013      	ands	r3, r2
 8014160:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	2b06      	cmp	r3, #6
 8014166:	d015      	beq.n	8014194 <HAL_TIM_Base_Start_IT+0xb4>
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801416e:	d011      	beq.n	8014194 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	681a      	ldr	r2, [r3, #0]
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	f042 0201 	orr.w	r2, r2, #1
 801417e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014180:	e008      	b.n	8014194 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	681a      	ldr	r2, [r3, #0]
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	f042 0201 	orr.w	r2, r2, #1
 8014190:	601a      	str	r2, [r3, #0]
 8014192:	e000      	b.n	8014196 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014194:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8014196:	2300      	movs	r3, #0
}
 8014198:	4618      	mov	r0, r3
 801419a:	3714      	adds	r7, #20
 801419c:	46bd      	mov	sp, r7
 801419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a2:	4770      	bx	lr
 80141a4:	40012c00 	.word	0x40012c00
 80141a8:	40000400 	.word	0x40000400
 80141ac:	40000800 	.word	0x40000800
 80141b0:	40000c00 	.word	0x40000c00
 80141b4:	40013400 	.word	0x40013400
 80141b8:	40014000 	.word	0x40014000
 80141bc:	00010007 	.word	0x00010007

080141c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b082      	sub	sp, #8
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d101      	bne.n	80141d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80141ce:	2301      	movs	r3, #1
 80141d0:	e049      	b.n	8014266 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80141d8:	b2db      	uxtb	r3, r3
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d106      	bne.n	80141ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	2200      	movs	r2, #0
 80141e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80141e6:	6878      	ldr	r0, [r7, #4]
 80141e8:	f7f7 fba4 	bl	800b934 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	2202      	movs	r2, #2
 80141f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681a      	ldr	r2, [r3, #0]
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	3304      	adds	r3, #4
 80141fc:	4619      	mov	r1, r3
 80141fe:	4610      	mov	r0, r2
 8014200:	f000 fc2e 	bl	8014a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	2201      	movs	r2, #1
 8014208:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	2201      	movs	r2, #1
 8014210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	2201      	movs	r2, #1
 8014218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	2201      	movs	r2, #1
 8014220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	2201      	movs	r2, #1
 8014228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	2201      	movs	r2, #1
 8014230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2201      	movs	r2, #1
 8014238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	2201      	movs	r2, #1
 8014240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2201      	movs	r2, #1
 8014248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	2201      	movs	r2, #1
 8014250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2201      	movs	r2, #1
 8014258:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2201      	movs	r2, #1
 8014260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014264:	2300      	movs	r3, #0
}
 8014266:	4618      	mov	r0, r3
 8014268:	3708      	adds	r7, #8
 801426a:	46bd      	mov	sp, r7
 801426c:	bd80      	pop	{r7, pc}
	...

08014270 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014270:	b580      	push	{r7, lr}
 8014272:	b084      	sub	sp, #16
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
 8014278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801427a:	683b      	ldr	r3, [r7, #0]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d109      	bne.n	8014294 <HAL_TIM_PWM_Start+0x24>
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014286:	b2db      	uxtb	r3, r3
 8014288:	2b01      	cmp	r3, #1
 801428a:	bf14      	ite	ne
 801428c:	2301      	movne	r3, #1
 801428e:	2300      	moveq	r3, #0
 8014290:	b2db      	uxtb	r3, r3
 8014292:	e03c      	b.n	801430e <HAL_TIM_PWM_Start+0x9e>
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	2b04      	cmp	r3, #4
 8014298:	d109      	bne.n	80142ae <HAL_TIM_PWM_Start+0x3e>
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80142a0:	b2db      	uxtb	r3, r3
 80142a2:	2b01      	cmp	r3, #1
 80142a4:	bf14      	ite	ne
 80142a6:	2301      	movne	r3, #1
 80142a8:	2300      	moveq	r3, #0
 80142aa:	b2db      	uxtb	r3, r3
 80142ac:	e02f      	b.n	801430e <HAL_TIM_PWM_Start+0x9e>
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	2b08      	cmp	r3, #8
 80142b2:	d109      	bne.n	80142c8 <HAL_TIM_PWM_Start+0x58>
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80142ba:	b2db      	uxtb	r3, r3
 80142bc:	2b01      	cmp	r3, #1
 80142be:	bf14      	ite	ne
 80142c0:	2301      	movne	r3, #1
 80142c2:	2300      	moveq	r3, #0
 80142c4:	b2db      	uxtb	r3, r3
 80142c6:	e022      	b.n	801430e <HAL_TIM_PWM_Start+0x9e>
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	2b0c      	cmp	r3, #12
 80142cc:	d109      	bne.n	80142e2 <HAL_TIM_PWM_Start+0x72>
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80142d4:	b2db      	uxtb	r3, r3
 80142d6:	2b01      	cmp	r3, #1
 80142d8:	bf14      	ite	ne
 80142da:	2301      	movne	r3, #1
 80142dc:	2300      	moveq	r3, #0
 80142de:	b2db      	uxtb	r3, r3
 80142e0:	e015      	b.n	801430e <HAL_TIM_PWM_Start+0x9e>
 80142e2:	683b      	ldr	r3, [r7, #0]
 80142e4:	2b10      	cmp	r3, #16
 80142e6:	d109      	bne.n	80142fc <HAL_TIM_PWM_Start+0x8c>
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80142ee:	b2db      	uxtb	r3, r3
 80142f0:	2b01      	cmp	r3, #1
 80142f2:	bf14      	ite	ne
 80142f4:	2301      	movne	r3, #1
 80142f6:	2300      	moveq	r3, #0
 80142f8:	b2db      	uxtb	r3, r3
 80142fa:	e008      	b.n	801430e <HAL_TIM_PWM_Start+0x9e>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014302:	b2db      	uxtb	r3, r3
 8014304:	2b01      	cmp	r3, #1
 8014306:	bf14      	ite	ne
 8014308:	2301      	movne	r3, #1
 801430a:	2300      	moveq	r3, #0
 801430c:	b2db      	uxtb	r3, r3
 801430e:	2b00      	cmp	r3, #0
 8014310:	d001      	beq.n	8014316 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8014312:	2301      	movs	r3, #1
 8014314:	e09c      	b.n	8014450 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d104      	bne.n	8014326 <HAL_TIM_PWM_Start+0xb6>
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	2202      	movs	r2, #2
 8014320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014324:	e023      	b.n	801436e <HAL_TIM_PWM_Start+0xfe>
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	2b04      	cmp	r3, #4
 801432a:	d104      	bne.n	8014336 <HAL_TIM_PWM_Start+0xc6>
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2202      	movs	r2, #2
 8014330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014334:	e01b      	b.n	801436e <HAL_TIM_PWM_Start+0xfe>
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	2b08      	cmp	r3, #8
 801433a:	d104      	bne.n	8014346 <HAL_TIM_PWM_Start+0xd6>
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	2202      	movs	r2, #2
 8014340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014344:	e013      	b.n	801436e <HAL_TIM_PWM_Start+0xfe>
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	2b0c      	cmp	r3, #12
 801434a:	d104      	bne.n	8014356 <HAL_TIM_PWM_Start+0xe6>
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	2202      	movs	r2, #2
 8014350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014354:	e00b      	b.n	801436e <HAL_TIM_PWM_Start+0xfe>
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	2b10      	cmp	r3, #16
 801435a:	d104      	bne.n	8014366 <HAL_TIM_PWM_Start+0xf6>
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2202      	movs	r2, #2
 8014360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014364:	e003      	b.n	801436e <HAL_TIM_PWM_Start+0xfe>
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	2202      	movs	r2, #2
 801436a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	2201      	movs	r2, #1
 8014374:	6839      	ldr	r1, [r7, #0]
 8014376:	4618      	mov	r0, r3
 8014378:	f000 fee2 	bl	8015140 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	4a35      	ldr	r2, [pc, #212]	; (8014458 <HAL_TIM_PWM_Start+0x1e8>)
 8014382:	4293      	cmp	r3, r2
 8014384:	d013      	beq.n	80143ae <HAL_TIM_PWM_Start+0x13e>
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	4a34      	ldr	r2, [pc, #208]	; (801445c <HAL_TIM_PWM_Start+0x1ec>)
 801438c:	4293      	cmp	r3, r2
 801438e:	d00e      	beq.n	80143ae <HAL_TIM_PWM_Start+0x13e>
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	4a32      	ldr	r2, [pc, #200]	; (8014460 <HAL_TIM_PWM_Start+0x1f0>)
 8014396:	4293      	cmp	r3, r2
 8014398:	d009      	beq.n	80143ae <HAL_TIM_PWM_Start+0x13e>
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	4a31      	ldr	r2, [pc, #196]	; (8014464 <HAL_TIM_PWM_Start+0x1f4>)
 80143a0:	4293      	cmp	r3, r2
 80143a2:	d004      	beq.n	80143ae <HAL_TIM_PWM_Start+0x13e>
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	4a2f      	ldr	r2, [pc, #188]	; (8014468 <HAL_TIM_PWM_Start+0x1f8>)
 80143aa:	4293      	cmp	r3, r2
 80143ac:	d101      	bne.n	80143b2 <HAL_TIM_PWM_Start+0x142>
 80143ae:	2301      	movs	r3, #1
 80143b0:	e000      	b.n	80143b4 <HAL_TIM_PWM_Start+0x144>
 80143b2:	2300      	movs	r3, #0
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d007      	beq.n	80143c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80143c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	4a22      	ldr	r2, [pc, #136]	; (8014458 <HAL_TIM_PWM_Start+0x1e8>)
 80143ce:	4293      	cmp	r3, r2
 80143d0:	d01d      	beq.n	801440e <HAL_TIM_PWM_Start+0x19e>
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80143da:	d018      	beq.n	801440e <HAL_TIM_PWM_Start+0x19e>
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	4a22      	ldr	r2, [pc, #136]	; (801446c <HAL_TIM_PWM_Start+0x1fc>)
 80143e2:	4293      	cmp	r3, r2
 80143e4:	d013      	beq.n	801440e <HAL_TIM_PWM_Start+0x19e>
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	4a21      	ldr	r2, [pc, #132]	; (8014470 <HAL_TIM_PWM_Start+0x200>)
 80143ec:	4293      	cmp	r3, r2
 80143ee:	d00e      	beq.n	801440e <HAL_TIM_PWM_Start+0x19e>
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	4a1f      	ldr	r2, [pc, #124]	; (8014474 <HAL_TIM_PWM_Start+0x204>)
 80143f6:	4293      	cmp	r3, r2
 80143f8:	d009      	beq.n	801440e <HAL_TIM_PWM_Start+0x19e>
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	4a17      	ldr	r2, [pc, #92]	; (801445c <HAL_TIM_PWM_Start+0x1ec>)
 8014400:	4293      	cmp	r3, r2
 8014402:	d004      	beq.n	801440e <HAL_TIM_PWM_Start+0x19e>
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	4a15      	ldr	r2, [pc, #84]	; (8014460 <HAL_TIM_PWM_Start+0x1f0>)
 801440a:	4293      	cmp	r3, r2
 801440c:	d115      	bne.n	801443a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	689a      	ldr	r2, [r3, #8]
 8014414:	4b18      	ldr	r3, [pc, #96]	; (8014478 <HAL_TIM_PWM_Start+0x208>)
 8014416:	4013      	ands	r3, r2
 8014418:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	2b06      	cmp	r3, #6
 801441e:	d015      	beq.n	801444c <HAL_TIM_PWM_Start+0x1dc>
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014426:	d011      	beq.n	801444c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	681a      	ldr	r2, [r3, #0]
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	f042 0201 	orr.w	r2, r2, #1
 8014436:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014438:	e008      	b.n	801444c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	681a      	ldr	r2, [r3, #0]
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	f042 0201 	orr.w	r2, r2, #1
 8014448:	601a      	str	r2, [r3, #0]
 801444a:	e000      	b.n	801444e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801444c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801444e:	2300      	movs	r3, #0
}
 8014450:	4618      	mov	r0, r3
 8014452:	3710      	adds	r7, #16
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}
 8014458:	40012c00 	.word	0x40012c00
 801445c:	40013400 	.word	0x40013400
 8014460:	40014000 	.word	0x40014000
 8014464:	40014400 	.word	0x40014400
 8014468:	40014800 	.word	0x40014800
 801446c:	40000400 	.word	0x40000400
 8014470:	40000800 	.word	0x40000800
 8014474:	40000c00 	.word	0x40000c00
 8014478:	00010007 	.word	0x00010007

0801447c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b082      	sub	sp, #8
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
 8014484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	2200      	movs	r2, #0
 801448c:	6839      	ldr	r1, [r7, #0]
 801448e:	4618      	mov	r0, r3
 8014490:	f000 fe56 	bl	8015140 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	4a3e      	ldr	r2, [pc, #248]	; (8014594 <HAL_TIM_PWM_Stop+0x118>)
 801449a:	4293      	cmp	r3, r2
 801449c:	d013      	beq.n	80144c6 <HAL_TIM_PWM_Stop+0x4a>
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	4a3d      	ldr	r2, [pc, #244]	; (8014598 <HAL_TIM_PWM_Stop+0x11c>)
 80144a4:	4293      	cmp	r3, r2
 80144a6:	d00e      	beq.n	80144c6 <HAL_TIM_PWM_Stop+0x4a>
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	4a3b      	ldr	r2, [pc, #236]	; (801459c <HAL_TIM_PWM_Stop+0x120>)
 80144ae:	4293      	cmp	r3, r2
 80144b0:	d009      	beq.n	80144c6 <HAL_TIM_PWM_Stop+0x4a>
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	4a3a      	ldr	r2, [pc, #232]	; (80145a0 <HAL_TIM_PWM_Stop+0x124>)
 80144b8:	4293      	cmp	r3, r2
 80144ba:	d004      	beq.n	80144c6 <HAL_TIM_PWM_Stop+0x4a>
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	4a38      	ldr	r2, [pc, #224]	; (80145a4 <HAL_TIM_PWM_Stop+0x128>)
 80144c2:	4293      	cmp	r3, r2
 80144c4:	d101      	bne.n	80144ca <HAL_TIM_PWM_Stop+0x4e>
 80144c6:	2301      	movs	r3, #1
 80144c8:	e000      	b.n	80144cc <HAL_TIM_PWM_Stop+0x50>
 80144ca:	2300      	movs	r3, #0
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d017      	beq.n	8014500 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	6a1a      	ldr	r2, [r3, #32]
 80144d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80144da:	4013      	ands	r3, r2
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d10f      	bne.n	8014500 <HAL_TIM_PWM_Stop+0x84>
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	6a1a      	ldr	r2, [r3, #32]
 80144e6:	f240 4344 	movw	r3, #1092	; 0x444
 80144ea:	4013      	ands	r3, r2
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d107      	bne.n	8014500 <HAL_TIM_PWM_Stop+0x84>
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80144fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	6a1a      	ldr	r2, [r3, #32]
 8014506:	f241 1311 	movw	r3, #4369	; 0x1111
 801450a:	4013      	ands	r3, r2
 801450c:	2b00      	cmp	r3, #0
 801450e:	d10f      	bne.n	8014530 <HAL_TIM_PWM_Stop+0xb4>
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	6a1a      	ldr	r2, [r3, #32]
 8014516:	f240 4344 	movw	r3, #1092	; 0x444
 801451a:	4013      	ands	r3, r2
 801451c:	2b00      	cmp	r3, #0
 801451e:	d107      	bne.n	8014530 <HAL_TIM_PWM_Stop+0xb4>
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	681a      	ldr	r2, [r3, #0]
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	f022 0201 	bic.w	r2, r2, #1
 801452e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d104      	bne.n	8014540 <HAL_TIM_PWM_Stop+0xc4>
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	2201      	movs	r2, #1
 801453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801453e:	e023      	b.n	8014588 <HAL_TIM_PWM_Stop+0x10c>
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	2b04      	cmp	r3, #4
 8014544:	d104      	bne.n	8014550 <HAL_TIM_PWM_Stop+0xd4>
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	2201      	movs	r2, #1
 801454a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801454e:	e01b      	b.n	8014588 <HAL_TIM_PWM_Stop+0x10c>
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	2b08      	cmp	r3, #8
 8014554:	d104      	bne.n	8014560 <HAL_TIM_PWM_Stop+0xe4>
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	2201      	movs	r2, #1
 801455a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801455e:	e013      	b.n	8014588 <HAL_TIM_PWM_Stop+0x10c>
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	2b0c      	cmp	r3, #12
 8014564:	d104      	bne.n	8014570 <HAL_TIM_PWM_Stop+0xf4>
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	2201      	movs	r2, #1
 801456a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801456e:	e00b      	b.n	8014588 <HAL_TIM_PWM_Stop+0x10c>
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	2b10      	cmp	r3, #16
 8014574:	d104      	bne.n	8014580 <HAL_TIM_PWM_Stop+0x104>
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	2201      	movs	r2, #1
 801457a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801457e:	e003      	b.n	8014588 <HAL_TIM_PWM_Stop+0x10c>
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2201      	movs	r2, #1
 8014584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8014588:	2300      	movs	r3, #0
}
 801458a:	4618      	mov	r0, r3
 801458c:	3708      	adds	r7, #8
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	40012c00 	.word	0x40012c00
 8014598:	40013400 	.word	0x40013400
 801459c:	40014000 	.word	0x40014000
 80145a0:	40014400 	.word	0x40014400
 80145a4:	40014800 	.word	0x40014800

080145a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b082      	sub	sp, #8
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	691b      	ldr	r3, [r3, #16]
 80145b6:	f003 0302 	and.w	r3, r3, #2
 80145ba:	2b02      	cmp	r3, #2
 80145bc:	d122      	bne.n	8014604 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	68db      	ldr	r3, [r3, #12]
 80145c4:	f003 0302 	and.w	r3, r3, #2
 80145c8:	2b02      	cmp	r3, #2
 80145ca:	d11b      	bne.n	8014604 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	f06f 0202 	mvn.w	r2, #2
 80145d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	2201      	movs	r2, #1
 80145da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	699b      	ldr	r3, [r3, #24]
 80145e2:	f003 0303 	and.w	r3, r3, #3
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d003      	beq.n	80145f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f000 fa1a 	bl	8014a24 <HAL_TIM_IC_CaptureCallback>
 80145f0:	e005      	b.n	80145fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f000 fa0c 	bl	8014a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80145f8:	6878      	ldr	r0, [r7, #4]
 80145fa:	f000 fa1d 	bl	8014a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2200      	movs	r2, #0
 8014602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	691b      	ldr	r3, [r3, #16]
 801460a:	f003 0304 	and.w	r3, r3, #4
 801460e:	2b04      	cmp	r3, #4
 8014610:	d122      	bne.n	8014658 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	68db      	ldr	r3, [r3, #12]
 8014618:	f003 0304 	and.w	r3, r3, #4
 801461c:	2b04      	cmp	r3, #4
 801461e:	d11b      	bne.n	8014658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	f06f 0204 	mvn.w	r2, #4
 8014628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	2202      	movs	r2, #2
 801462e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	699b      	ldr	r3, [r3, #24]
 8014636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801463a:	2b00      	cmp	r3, #0
 801463c:	d003      	beq.n	8014646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801463e:	6878      	ldr	r0, [r7, #4]
 8014640:	f000 f9f0 	bl	8014a24 <HAL_TIM_IC_CaptureCallback>
 8014644:	e005      	b.n	8014652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014646:	6878      	ldr	r0, [r7, #4]
 8014648:	f000 f9e2 	bl	8014a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f000 f9f3 	bl	8014a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	2200      	movs	r2, #0
 8014656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	691b      	ldr	r3, [r3, #16]
 801465e:	f003 0308 	and.w	r3, r3, #8
 8014662:	2b08      	cmp	r3, #8
 8014664:	d122      	bne.n	80146ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	68db      	ldr	r3, [r3, #12]
 801466c:	f003 0308 	and.w	r3, r3, #8
 8014670:	2b08      	cmp	r3, #8
 8014672:	d11b      	bne.n	80146ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	f06f 0208 	mvn.w	r2, #8
 801467c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	2204      	movs	r2, #4
 8014682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	69db      	ldr	r3, [r3, #28]
 801468a:	f003 0303 	and.w	r3, r3, #3
 801468e:	2b00      	cmp	r3, #0
 8014690:	d003      	beq.n	801469a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014692:	6878      	ldr	r0, [r7, #4]
 8014694:	f000 f9c6 	bl	8014a24 <HAL_TIM_IC_CaptureCallback>
 8014698:	e005      	b.n	80146a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f000 f9b8 	bl	8014a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f000 f9c9 	bl	8014a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2200      	movs	r2, #0
 80146aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	691b      	ldr	r3, [r3, #16]
 80146b2:	f003 0310 	and.w	r3, r3, #16
 80146b6:	2b10      	cmp	r3, #16
 80146b8:	d122      	bne.n	8014700 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	68db      	ldr	r3, [r3, #12]
 80146c0:	f003 0310 	and.w	r3, r3, #16
 80146c4:	2b10      	cmp	r3, #16
 80146c6:	d11b      	bne.n	8014700 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	f06f 0210 	mvn.w	r2, #16
 80146d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2208      	movs	r2, #8
 80146d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	69db      	ldr	r3, [r3, #28]
 80146de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d003      	beq.n	80146ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f000 f99c 	bl	8014a24 <HAL_TIM_IC_CaptureCallback>
 80146ec:	e005      	b.n	80146fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f000 f98e 	bl	8014a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	f000 f99f 	bl	8014a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	2200      	movs	r2, #0
 80146fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	691b      	ldr	r3, [r3, #16]
 8014706:	f003 0301 	and.w	r3, r3, #1
 801470a:	2b01      	cmp	r3, #1
 801470c:	d10e      	bne.n	801472c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	68db      	ldr	r3, [r3, #12]
 8014714:	f003 0301 	and.w	r3, r3, #1
 8014718:	2b01      	cmp	r3, #1
 801471a:	d107      	bne.n	801472c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	f06f 0201 	mvn.w	r2, #1
 8014724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8014726:	6878      	ldr	r0, [r7, #4]
 8014728:	f7ed fb78 	bl	8001e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	691b      	ldr	r3, [r3, #16]
 8014732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014736:	2b80      	cmp	r3, #128	; 0x80
 8014738:	d10e      	bne.n	8014758 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	68db      	ldr	r3, [r3, #12]
 8014740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014744:	2b80      	cmp	r3, #128	; 0x80
 8014746:	d107      	bne.n	8014758 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014752:	6878      	ldr	r0, [r7, #4]
 8014754:	f000 fdac 	bl	80152b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	691b      	ldr	r3, [r3, #16]
 801475e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014766:	d10e      	bne.n	8014786 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	68db      	ldr	r3, [r3, #12]
 801476e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014772:	2b80      	cmp	r3, #128	; 0x80
 8014774:	d107      	bne.n	8014786 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801477e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f000 fd9f 	bl	80152c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	691b      	ldr	r3, [r3, #16]
 801478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014790:	2b40      	cmp	r3, #64	; 0x40
 8014792:	d10e      	bne.n	80147b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	68db      	ldr	r3, [r3, #12]
 801479a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801479e:	2b40      	cmp	r3, #64	; 0x40
 80147a0:	d107      	bne.n	80147b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80147aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f000 f94d 	bl	8014a4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	691b      	ldr	r3, [r3, #16]
 80147b8:	f003 0320 	and.w	r3, r3, #32
 80147bc:	2b20      	cmp	r3, #32
 80147be:	d10e      	bne.n	80147de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	68db      	ldr	r3, [r3, #12]
 80147c6:	f003 0320 	and.w	r3, r3, #32
 80147ca:	2b20      	cmp	r3, #32
 80147cc:	d107      	bne.n	80147de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	f06f 0220 	mvn.w	r2, #32
 80147d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f000 fd5f 	bl	801529c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80147de:	bf00      	nop
 80147e0:	3708      	adds	r7, #8
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}
	...

080147e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b086      	sub	sp, #24
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	60f8      	str	r0, [r7, #12]
 80147f0:	60b9      	str	r1, [r7, #8]
 80147f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80147f4:	2300      	movs	r3, #0
 80147f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80147fe:	2b01      	cmp	r3, #1
 8014800:	d101      	bne.n	8014806 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8014802:	2302      	movs	r3, #2
 8014804:	e0ff      	b.n	8014a06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	2201      	movs	r2, #1
 801480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	2b14      	cmp	r3, #20
 8014812:	f200 80f0 	bhi.w	80149f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8014816:	a201      	add	r2, pc, #4	; (adr r2, 801481c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8014818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801481c:	08014871 	.word	0x08014871
 8014820:	080149f7 	.word	0x080149f7
 8014824:	080149f7 	.word	0x080149f7
 8014828:	080149f7 	.word	0x080149f7
 801482c:	080148b1 	.word	0x080148b1
 8014830:	080149f7 	.word	0x080149f7
 8014834:	080149f7 	.word	0x080149f7
 8014838:	080149f7 	.word	0x080149f7
 801483c:	080148f3 	.word	0x080148f3
 8014840:	080149f7 	.word	0x080149f7
 8014844:	080149f7 	.word	0x080149f7
 8014848:	080149f7 	.word	0x080149f7
 801484c:	08014933 	.word	0x08014933
 8014850:	080149f7 	.word	0x080149f7
 8014854:	080149f7 	.word	0x080149f7
 8014858:	080149f7 	.word	0x080149f7
 801485c:	08014975 	.word	0x08014975
 8014860:	080149f7 	.word	0x080149f7
 8014864:	080149f7 	.word	0x080149f7
 8014868:	080149f7 	.word	0x080149f7
 801486c:	080149b5 	.word	0x080149b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	68b9      	ldr	r1, [r7, #8]
 8014876:	4618      	mov	r0, r3
 8014878:	f000 f98c 	bl	8014b94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	699a      	ldr	r2, [r3, #24]
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	f042 0208 	orr.w	r2, r2, #8
 801488a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	699a      	ldr	r2, [r3, #24]
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	f022 0204 	bic.w	r2, r2, #4
 801489a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	6999      	ldr	r1, [r3, #24]
 80148a2:	68bb      	ldr	r3, [r7, #8]
 80148a4:	691a      	ldr	r2, [r3, #16]
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	430a      	orrs	r2, r1
 80148ac:	619a      	str	r2, [r3, #24]
      break;
 80148ae:	e0a5      	b.n	80149fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	68b9      	ldr	r1, [r7, #8]
 80148b6:	4618      	mov	r0, r3
 80148b8:	f000 f9fc 	bl	8014cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	699a      	ldr	r2, [r3, #24]
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80148ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	699a      	ldr	r2, [r3, #24]
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80148da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	6999      	ldr	r1, [r3, #24]
 80148e2:	68bb      	ldr	r3, [r7, #8]
 80148e4:	691b      	ldr	r3, [r3, #16]
 80148e6:	021a      	lsls	r2, r3, #8
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	430a      	orrs	r2, r1
 80148ee:	619a      	str	r2, [r3, #24]
      break;
 80148f0:	e084      	b.n	80149fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	68b9      	ldr	r1, [r7, #8]
 80148f8:	4618      	mov	r0, r3
 80148fa:	f000 fa65 	bl	8014dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	69da      	ldr	r2, [r3, #28]
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	f042 0208 	orr.w	r2, r2, #8
 801490c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	69da      	ldr	r2, [r3, #28]
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	f022 0204 	bic.w	r2, r2, #4
 801491c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	69d9      	ldr	r1, [r3, #28]
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	691a      	ldr	r2, [r3, #16]
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	430a      	orrs	r2, r1
 801492e:	61da      	str	r2, [r3, #28]
      break;
 8014930:	e064      	b.n	80149fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	68b9      	ldr	r1, [r7, #8]
 8014938:	4618      	mov	r0, r3
 801493a:	f000 facd 	bl	8014ed8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	69da      	ldr	r2, [r3, #28]
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801494c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	69da      	ldr	r2, [r3, #28]
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801495c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	69d9      	ldr	r1, [r3, #28]
 8014964:	68bb      	ldr	r3, [r7, #8]
 8014966:	691b      	ldr	r3, [r3, #16]
 8014968:	021a      	lsls	r2, r3, #8
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	430a      	orrs	r2, r1
 8014970:	61da      	str	r2, [r3, #28]
      break;
 8014972:	e043      	b.n	80149fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	68b9      	ldr	r1, [r7, #8]
 801497a:	4618      	mov	r0, r3
 801497c:	f000 fb16 	bl	8014fac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	f042 0208 	orr.w	r2, r2, #8
 801498e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	f022 0204 	bic.w	r2, r2, #4
 801499e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80149a6:	68bb      	ldr	r3, [r7, #8]
 80149a8:	691a      	ldr	r2, [r3, #16]
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	430a      	orrs	r2, r1
 80149b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80149b2:	e023      	b.n	80149fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	68b9      	ldr	r1, [r7, #8]
 80149ba:	4618      	mov	r0, r3
 80149bc:	f000 fb5a 	bl	8015074 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80149ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80149de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	691b      	ldr	r3, [r3, #16]
 80149ea:	021a      	lsls	r2, r3, #8
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	430a      	orrs	r2, r1
 80149f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80149f4:	e002      	b.n	80149fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80149f6:	2301      	movs	r3, #1
 80149f8:	75fb      	strb	r3, [r7, #23]
      break;
 80149fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	2200      	movs	r2, #0
 8014a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a06:	4618      	mov	r0, r3
 8014a08:	3718      	adds	r7, #24
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd80      	pop	{r7, pc}
 8014a0e:	bf00      	nop

08014a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014a10:	b480      	push	{r7}
 8014a12:	b083      	sub	sp, #12
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014a18:	bf00      	nop
 8014a1a:	370c      	adds	r7, #12
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a22:	4770      	bx	lr

08014a24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014a24:	b480      	push	{r7}
 8014a26:	b083      	sub	sp, #12
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014a2c:	bf00      	nop
 8014a2e:	370c      	adds	r7, #12
 8014a30:	46bd      	mov	sp, r7
 8014a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a36:	4770      	bx	lr

08014a38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014a38:	b480      	push	{r7}
 8014a3a:	b083      	sub	sp, #12
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014a40:	bf00      	nop
 8014a42:	370c      	adds	r7, #12
 8014a44:	46bd      	mov	sp, r7
 8014a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4a:	4770      	bx	lr

08014a4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014a4c:	b480      	push	{r7}
 8014a4e:	b083      	sub	sp, #12
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014a54:	bf00      	nop
 8014a56:	370c      	adds	r7, #12
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5e:	4770      	bx	lr

08014a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014a60:	b480      	push	{r7}
 8014a62:	b085      	sub	sp, #20
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
 8014a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	4a40      	ldr	r2, [pc, #256]	; (8014b74 <TIM_Base_SetConfig+0x114>)
 8014a74:	4293      	cmp	r3, r2
 8014a76:	d013      	beq.n	8014aa0 <TIM_Base_SetConfig+0x40>
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014a7e:	d00f      	beq.n	8014aa0 <TIM_Base_SetConfig+0x40>
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	4a3d      	ldr	r2, [pc, #244]	; (8014b78 <TIM_Base_SetConfig+0x118>)
 8014a84:	4293      	cmp	r3, r2
 8014a86:	d00b      	beq.n	8014aa0 <TIM_Base_SetConfig+0x40>
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	4a3c      	ldr	r2, [pc, #240]	; (8014b7c <TIM_Base_SetConfig+0x11c>)
 8014a8c:	4293      	cmp	r3, r2
 8014a8e:	d007      	beq.n	8014aa0 <TIM_Base_SetConfig+0x40>
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	4a3b      	ldr	r2, [pc, #236]	; (8014b80 <TIM_Base_SetConfig+0x120>)
 8014a94:	4293      	cmp	r3, r2
 8014a96:	d003      	beq.n	8014aa0 <TIM_Base_SetConfig+0x40>
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	4a3a      	ldr	r2, [pc, #232]	; (8014b84 <TIM_Base_SetConfig+0x124>)
 8014a9c:	4293      	cmp	r3, r2
 8014a9e:	d108      	bne.n	8014ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014aa8:	683b      	ldr	r3, [r7, #0]
 8014aaa:	685b      	ldr	r3, [r3, #4]
 8014aac:	68fa      	ldr	r2, [r7, #12]
 8014aae:	4313      	orrs	r3, r2
 8014ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	4a2f      	ldr	r2, [pc, #188]	; (8014b74 <TIM_Base_SetConfig+0x114>)
 8014ab6:	4293      	cmp	r3, r2
 8014ab8:	d01f      	beq.n	8014afa <TIM_Base_SetConfig+0x9a>
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014ac0:	d01b      	beq.n	8014afa <TIM_Base_SetConfig+0x9a>
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	4a2c      	ldr	r2, [pc, #176]	; (8014b78 <TIM_Base_SetConfig+0x118>)
 8014ac6:	4293      	cmp	r3, r2
 8014ac8:	d017      	beq.n	8014afa <TIM_Base_SetConfig+0x9a>
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	4a2b      	ldr	r2, [pc, #172]	; (8014b7c <TIM_Base_SetConfig+0x11c>)
 8014ace:	4293      	cmp	r3, r2
 8014ad0:	d013      	beq.n	8014afa <TIM_Base_SetConfig+0x9a>
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	4a2a      	ldr	r2, [pc, #168]	; (8014b80 <TIM_Base_SetConfig+0x120>)
 8014ad6:	4293      	cmp	r3, r2
 8014ad8:	d00f      	beq.n	8014afa <TIM_Base_SetConfig+0x9a>
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	4a29      	ldr	r2, [pc, #164]	; (8014b84 <TIM_Base_SetConfig+0x124>)
 8014ade:	4293      	cmp	r3, r2
 8014ae0:	d00b      	beq.n	8014afa <TIM_Base_SetConfig+0x9a>
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	4a28      	ldr	r2, [pc, #160]	; (8014b88 <TIM_Base_SetConfig+0x128>)
 8014ae6:	4293      	cmp	r3, r2
 8014ae8:	d007      	beq.n	8014afa <TIM_Base_SetConfig+0x9a>
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	4a27      	ldr	r2, [pc, #156]	; (8014b8c <TIM_Base_SetConfig+0x12c>)
 8014aee:	4293      	cmp	r3, r2
 8014af0:	d003      	beq.n	8014afa <TIM_Base_SetConfig+0x9a>
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	4a26      	ldr	r2, [pc, #152]	; (8014b90 <TIM_Base_SetConfig+0x130>)
 8014af6:	4293      	cmp	r3, r2
 8014af8:	d108      	bne.n	8014b0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014b02:	683b      	ldr	r3, [r7, #0]
 8014b04:	68db      	ldr	r3, [r3, #12]
 8014b06:	68fa      	ldr	r2, [r7, #12]
 8014b08:	4313      	orrs	r3, r2
 8014b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014b12:	683b      	ldr	r3, [r7, #0]
 8014b14:	695b      	ldr	r3, [r3, #20]
 8014b16:	4313      	orrs	r3, r2
 8014b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	68fa      	ldr	r2, [r7, #12]
 8014b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014b20:	683b      	ldr	r3, [r7, #0]
 8014b22:	689a      	ldr	r2, [r3, #8]
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014b28:	683b      	ldr	r3, [r7, #0]
 8014b2a:	681a      	ldr	r2, [r3, #0]
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	4a10      	ldr	r2, [pc, #64]	; (8014b74 <TIM_Base_SetConfig+0x114>)
 8014b34:	4293      	cmp	r3, r2
 8014b36:	d00f      	beq.n	8014b58 <TIM_Base_SetConfig+0xf8>
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	4a12      	ldr	r2, [pc, #72]	; (8014b84 <TIM_Base_SetConfig+0x124>)
 8014b3c:	4293      	cmp	r3, r2
 8014b3e:	d00b      	beq.n	8014b58 <TIM_Base_SetConfig+0xf8>
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	4a11      	ldr	r2, [pc, #68]	; (8014b88 <TIM_Base_SetConfig+0x128>)
 8014b44:	4293      	cmp	r3, r2
 8014b46:	d007      	beq.n	8014b58 <TIM_Base_SetConfig+0xf8>
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	4a10      	ldr	r2, [pc, #64]	; (8014b8c <TIM_Base_SetConfig+0x12c>)
 8014b4c:	4293      	cmp	r3, r2
 8014b4e:	d003      	beq.n	8014b58 <TIM_Base_SetConfig+0xf8>
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	4a0f      	ldr	r2, [pc, #60]	; (8014b90 <TIM_Base_SetConfig+0x130>)
 8014b54:	4293      	cmp	r3, r2
 8014b56:	d103      	bne.n	8014b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	691a      	ldr	r2, [r3, #16]
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2201      	movs	r2, #1
 8014b64:	615a      	str	r2, [r3, #20]
}
 8014b66:	bf00      	nop
 8014b68:	3714      	adds	r7, #20
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b70:	4770      	bx	lr
 8014b72:	bf00      	nop
 8014b74:	40012c00 	.word	0x40012c00
 8014b78:	40000400 	.word	0x40000400
 8014b7c:	40000800 	.word	0x40000800
 8014b80:	40000c00 	.word	0x40000c00
 8014b84:	40013400 	.word	0x40013400
 8014b88:	40014000 	.word	0x40014000
 8014b8c:	40014400 	.word	0x40014400
 8014b90:	40014800 	.word	0x40014800

08014b94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014b94:	b480      	push	{r7}
 8014b96:	b087      	sub	sp, #28
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
 8014b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6a1b      	ldr	r3, [r3, #32]
 8014ba2:	f023 0201 	bic.w	r2, r3, #1
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	6a1b      	ldr	r3, [r3, #32]
 8014bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	685b      	ldr	r3, [r3, #4]
 8014bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	699b      	ldr	r3, [r3, #24]
 8014bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	f023 0303 	bic.w	r3, r3, #3
 8014bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014bd0:	683b      	ldr	r3, [r7, #0]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	68fa      	ldr	r2, [r7, #12]
 8014bd6:	4313      	orrs	r3, r2
 8014bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014bda:	697b      	ldr	r3, [r7, #20]
 8014bdc:	f023 0302 	bic.w	r3, r3, #2
 8014be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014be2:	683b      	ldr	r3, [r7, #0]
 8014be4:	689b      	ldr	r3, [r3, #8]
 8014be6:	697a      	ldr	r2, [r7, #20]
 8014be8:	4313      	orrs	r3, r2
 8014bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	4a2c      	ldr	r2, [pc, #176]	; (8014ca0 <TIM_OC1_SetConfig+0x10c>)
 8014bf0:	4293      	cmp	r3, r2
 8014bf2:	d00f      	beq.n	8014c14 <TIM_OC1_SetConfig+0x80>
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	4a2b      	ldr	r2, [pc, #172]	; (8014ca4 <TIM_OC1_SetConfig+0x110>)
 8014bf8:	4293      	cmp	r3, r2
 8014bfa:	d00b      	beq.n	8014c14 <TIM_OC1_SetConfig+0x80>
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	4a2a      	ldr	r2, [pc, #168]	; (8014ca8 <TIM_OC1_SetConfig+0x114>)
 8014c00:	4293      	cmp	r3, r2
 8014c02:	d007      	beq.n	8014c14 <TIM_OC1_SetConfig+0x80>
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	4a29      	ldr	r2, [pc, #164]	; (8014cac <TIM_OC1_SetConfig+0x118>)
 8014c08:	4293      	cmp	r3, r2
 8014c0a:	d003      	beq.n	8014c14 <TIM_OC1_SetConfig+0x80>
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	4a28      	ldr	r2, [pc, #160]	; (8014cb0 <TIM_OC1_SetConfig+0x11c>)
 8014c10:	4293      	cmp	r3, r2
 8014c12:	d10c      	bne.n	8014c2e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014c14:	697b      	ldr	r3, [r7, #20]
 8014c16:	f023 0308 	bic.w	r3, r3, #8
 8014c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014c1c:	683b      	ldr	r3, [r7, #0]
 8014c1e:	68db      	ldr	r3, [r3, #12]
 8014c20:	697a      	ldr	r2, [r7, #20]
 8014c22:	4313      	orrs	r3, r2
 8014c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	f023 0304 	bic.w	r3, r3, #4
 8014c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	4a1b      	ldr	r2, [pc, #108]	; (8014ca0 <TIM_OC1_SetConfig+0x10c>)
 8014c32:	4293      	cmp	r3, r2
 8014c34:	d00f      	beq.n	8014c56 <TIM_OC1_SetConfig+0xc2>
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	4a1a      	ldr	r2, [pc, #104]	; (8014ca4 <TIM_OC1_SetConfig+0x110>)
 8014c3a:	4293      	cmp	r3, r2
 8014c3c:	d00b      	beq.n	8014c56 <TIM_OC1_SetConfig+0xc2>
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	4a19      	ldr	r2, [pc, #100]	; (8014ca8 <TIM_OC1_SetConfig+0x114>)
 8014c42:	4293      	cmp	r3, r2
 8014c44:	d007      	beq.n	8014c56 <TIM_OC1_SetConfig+0xc2>
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	4a18      	ldr	r2, [pc, #96]	; (8014cac <TIM_OC1_SetConfig+0x118>)
 8014c4a:	4293      	cmp	r3, r2
 8014c4c:	d003      	beq.n	8014c56 <TIM_OC1_SetConfig+0xc2>
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	4a17      	ldr	r2, [pc, #92]	; (8014cb0 <TIM_OC1_SetConfig+0x11c>)
 8014c52:	4293      	cmp	r3, r2
 8014c54:	d111      	bne.n	8014c7a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014c66:	683b      	ldr	r3, [r7, #0]
 8014c68:	695b      	ldr	r3, [r3, #20]
 8014c6a:	693a      	ldr	r2, [r7, #16]
 8014c6c:	4313      	orrs	r3, r2
 8014c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	699b      	ldr	r3, [r3, #24]
 8014c74:	693a      	ldr	r2, [r7, #16]
 8014c76:	4313      	orrs	r3, r2
 8014c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	693a      	ldr	r2, [r7, #16]
 8014c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	68fa      	ldr	r2, [r7, #12]
 8014c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014c86:	683b      	ldr	r3, [r7, #0]
 8014c88:	685a      	ldr	r2, [r3, #4]
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	697a      	ldr	r2, [r7, #20]
 8014c92:	621a      	str	r2, [r3, #32]
}
 8014c94:	bf00      	nop
 8014c96:	371c      	adds	r7, #28
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9e:	4770      	bx	lr
 8014ca0:	40012c00 	.word	0x40012c00
 8014ca4:	40013400 	.word	0x40013400
 8014ca8:	40014000 	.word	0x40014000
 8014cac:	40014400 	.word	0x40014400
 8014cb0:	40014800 	.word	0x40014800

08014cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014cb4:	b480      	push	{r7}
 8014cb6:	b087      	sub	sp, #28
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
 8014cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	6a1b      	ldr	r3, [r3, #32]
 8014cc2:	f023 0210 	bic.w	r2, r3, #16
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	6a1b      	ldr	r3, [r3, #32]
 8014cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	685b      	ldr	r3, [r3, #4]
 8014cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	699b      	ldr	r3, [r3, #24]
 8014cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	021b      	lsls	r3, r3, #8
 8014cf6:	68fa      	ldr	r2, [r7, #12]
 8014cf8:	4313      	orrs	r3, r2
 8014cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014cfc:	697b      	ldr	r3, [r7, #20]
 8014cfe:	f023 0320 	bic.w	r3, r3, #32
 8014d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014d04:	683b      	ldr	r3, [r7, #0]
 8014d06:	689b      	ldr	r3, [r3, #8]
 8014d08:	011b      	lsls	r3, r3, #4
 8014d0a:	697a      	ldr	r2, [r7, #20]
 8014d0c:	4313      	orrs	r3, r2
 8014d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	4a28      	ldr	r2, [pc, #160]	; (8014db4 <TIM_OC2_SetConfig+0x100>)
 8014d14:	4293      	cmp	r3, r2
 8014d16:	d003      	beq.n	8014d20 <TIM_OC2_SetConfig+0x6c>
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	4a27      	ldr	r2, [pc, #156]	; (8014db8 <TIM_OC2_SetConfig+0x104>)
 8014d1c:	4293      	cmp	r3, r2
 8014d1e:	d10d      	bne.n	8014d3c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014d20:	697b      	ldr	r3, [r7, #20]
 8014d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	68db      	ldr	r3, [r3, #12]
 8014d2c:	011b      	lsls	r3, r3, #4
 8014d2e:	697a      	ldr	r2, [r7, #20]
 8014d30:	4313      	orrs	r3, r2
 8014d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014d34:	697b      	ldr	r3, [r7, #20]
 8014d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014d3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	4a1d      	ldr	r2, [pc, #116]	; (8014db4 <TIM_OC2_SetConfig+0x100>)
 8014d40:	4293      	cmp	r3, r2
 8014d42:	d00f      	beq.n	8014d64 <TIM_OC2_SetConfig+0xb0>
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	4a1c      	ldr	r2, [pc, #112]	; (8014db8 <TIM_OC2_SetConfig+0x104>)
 8014d48:	4293      	cmp	r3, r2
 8014d4a:	d00b      	beq.n	8014d64 <TIM_OC2_SetConfig+0xb0>
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	4a1b      	ldr	r2, [pc, #108]	; (8014dbc <TIM_OC2_SetConfig+0x108>)
 8014d50:	4293      	cmp	r3, r2
 8014d52:	d007      	beq.n	8014d64 <TIM_OC2_SetConfig+0xb0>
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	4a1a      	ldr	r2, [pc, #104]	; (8014dc0 <TIM_OC2_SetConfig+0x10c>)
 8014d58:	4293      	cmp	r3, r2
 8014d5a:	d003      	beq.n	8014d64 <TIM_OC2_SetConfig+0xb0>
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	4a19      	ldr	r2, [pc, #100]	; (8014dc4 <TIM_OC2_SetConfig+0x110>)
 8014d60:	4293      	cmp	r3, r2
 8014d62:	d113      	bne.n	8014d8c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014d64:	693b      	ldr	r3, [r7, #16]
 8014d66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014d6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014d6c:	693b      	ldr	r3, [r7, #16]
 8014d6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014d72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014d74:	683b      	ldr	r3, [r7, #0]
 8014d76:	695b      	ldr	r3, [r3, #20]
 8014d78:	009b      	lsls	r3, r3, #2
 8014d7a:	693a      	ldr	r2, [r7, #16]
 8014d7c:	4313      	orrs	r3, r2
 8014d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	699b      	ldr	r3, [r3, #24]
 8014d84:	009b      	lsls	r3, r3, #2
 8014d86:	693a      	ldr	r2, [r7, #16]
 8014d88:	4313      	orrs	r3, r2
 8014d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	693a      	ldr	r2, [r7, #16]
 8014d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	68fa      	ldr	r2, [r7, #12]
 8014d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	685a      	ldr	r2, [r3, #4]
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	697a      	ldr	r2, [r7, #20]
 8014da4:	621a      	str	r2, [r3, #32]
}
 8014da6:	bf00      	nop
 8014da8:	371c      	adds	r7, #28
 8014daa:	46bd      	mov	sp, r7
 8014dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db0:	4770      	bx	lr
 8014db2:	bf00      	nop
 8014db4:	40012c00 	.word	0x40012c00
 8014db8:	40013400 	.word	0x40013400
 8014dbc:	40014000 	.word	0x40014000
 8014dc0:	40014400 	.word	0x40014400
 8014dc4:	40014800 	.word	0x40014800

08014dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014dc8:	b480      	push	{r7}
 8014dca:	b087      	sub	sp, #28
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
 8014dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	6a1b      	ldr	r3, [r3, #32]
 8014dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	6a1b      	ldr	r3, [r3, #32]
 8014de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	685b      	ldr	r3, [r3, #4]
 8014de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	69db      	ldr	r3, [r3, #28]
 8014dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	f023 0303 	bic.w	r3, r3, #3
 8014e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	68fa      	ldr	r2, [r7, #12]
 8014e0a:	4313      	orrs	r3, r2
 8014e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014e0e:	697b      	ldr	r3, [r7, #20]
 8014e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014e16:	683b      	ldr	r3, [r7, #0]
 8014e18:	689b      	ldr	r3, [r3, #8]
 8014e1a:	021b      	lsls	r3, r3, #8
 8014e1c:	697a      	ldr	r2, [r7, #20]
 8014e1e:	4313      	orrs	r3, r2
 8014e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	4a27      	ldr	r2, [pc, #156]	; (8014ec4 <TIM_OC3_SetConfig+0xfc>)
 8014e26:	4293      	cmp	r3, r2
 8014e28:	d003      	beq.n	8014e32 <TIM_OC3_SetConfig+0x6a>
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	4a26      	ldr	r2, [pc, #152]	; (8014ec8 <TIM_OC3_SetConfig+0x100>)
 8014e2e:	4293      	cmp	r3, r2
 8014e30:	d10d      	bne.n	8014e4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	68db      	ldr	r3, [r3, #12]
 8014e3e:	021b      	lsls	r3, r3, #8
 8014e40:	697a      	ldr	r2, [r7, #20]
 8014e42:	4313      	orrs	r3, r2
 8014e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	4a1c      	ldr	r2, [pc, #112]	; (8014ec4 <TIM_OC3_SetConfig+0xfc>)
 8014e52:	4293      	cmp	r3, r2
 8014e54:	d00f      	beq.n	8014e76 <TIM_OC3_SetConfig+0xae>
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	4a1b      	ldr	r2, [pc, #108]	; (8014ec8 <TIM_OC3_SetConfig+0x100>)
 8014e5a:	4293      	cmp	r3, r2
 8014e5c:	d00b      	beq.n	8014e76 <TIM_OC3_SetConfig+0xae>
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	4a1a      	ldr	r2, [pc, #104]	; (8014ecc <TIM_OC3_SetConfig+0x104>)
 8014e62:	4293      	cmp	r3, r2
 8014e64:	d007      	beq.n	8014e76 <TIM_OC3_SetConfig+0xae>
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	4a19      	ldr	r2, [pc, #100]	; (8014ed0 <TIM_OC3_SetConfig+0x108>)
 8014e6a:	4293      	cmp	r3, r2
 8014e6c:	d003      	beq.n	8014e76 <TIM_OC3_SetConfig+0xae>
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	4a18      	ldr	r2, [pc, #96]	; (8014ed4 <TIM_OC3_SetConfig+0x10c>)
 8014e72:	4293      	cmp	r3, r2
 8014e74:	d113      	bne.n	8014e9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014e76:	693b      	ldr	r3, [r7, #16]
 8014e78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014e7e:	693b      	ldr	r3, [r7, #16]
 8014e80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014e86:	683b      	ldr	r3, [r7, #0]
 8014e88:	695b      	ldr	r3, [r3, #20]
 8014e8a:	011b      	lsls	r3, r3, #4
 8014e8c:	693a      	ldr	r2, [r7, #16]
 8014e8e:	4313      	orrs	r3, r2
 8014e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	699b      	ldr	r3, [r3, #24]
 8014e96:	011b      	lsls	r3, r3, #4
 8014e98:	693a      	ldr	r2, [r7, #16]
 8014e9a:	4313      	orrs	r3, r2
 8014e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	693a      	ldr	r2, [r7, #16]
 8014ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	68fa      	ldr	r2, [r7, #12]
 8014ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	685a      	ldr	r2, [r3, #4]
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	697a      	ldr	r2, [r7, #20]
 8014eb6:	621a      	str	r2, [r3, #32]
}
 8014eb8:	bf00      	nop
 8014eba:	371c      	adds	r7, #28
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec2:	4770      	bx	lr
 8014ec4:	40012c00 	.word	0x40012c00
 8014ec8:	40013400 	.word	0x40013400
 8014ecc:	40014000 	.word	0x40014000
 8014ed0:	40014400 	.word	0x40014400
 8014ed4:	40014800 	.word	0x40014800

08014ed8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014ed8:	b480      	push	{r7}
 8014eda:	b087      	sub	sp, #28
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
 8014ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	6a1b      	ldr	r3, [r3, #32]
 8014ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6a1b      	ldr	r3, [r3, #32]
 8014ef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	685b      	ldr	r3, [r3, #4]
 8014ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	69db      	ldr	r3, [r3, #28]
 8014efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	021b      	lsls	r3, r3, #8
 8014f1a:	68fa      	ldr	r2, [r7, #12]
 8014f1c:	4313      	orrs	r3, r2
 8014f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014f26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014f28:	683b      	ldr	r3, [r7, #0]
 8014f2a:	689b      	ldr	r3, [r3, #8]
 8014f2c:	031b      	lsls	r3, r3, #12
 8014f2e:	693a      	ldr	r2, [r7, #16]
 8014f30:	4313      	orrs	r3, r2
 8014f32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	4a18      	ldr	r2, [pc, #96]	; (8014f98 <TIM_OC4_SetConfig+0xc0>)
 8014f38:	4293      	cmp	r3, r2
 8014f3a:	d00f      	beq.n	8014f5c <TIM_OC4_SetConfig+0x84>
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	4a17      	ldr	r2, [pc, #92]	; (8014f9c <TIM_OC4_SetConfig+0xc4>)
 8014f40:	4293      	cmp	r3, r2
 8014f42:	d00b      	beq.n	8014f5c <TIM_OC4_SetConfig+0x84>
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	4a16      	ldr	r2, [pc, #88]	; (8014fa0 <TIM_OC4_SetConfig+0xc8>)
 8014f48:	4293      	cmp	r3, r2
 8014f4a:	d007      	beq.n	8014f5c <TIM_OC4_SetConfig+0x84>
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	4a15      	ldr	r2, [pc, #84]	; (8014fa4 <TIM_OC4_SetConfig+0xcc>)
 8014f50:	4293      	cmp	r3, r2
 8014f52:	d003      	beq.n	8014f5c <TIM_OC4_SetConfig+0x84>
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	4a14      	ldr	r2, [pc, #80]	; (8014fa8 <TIM_OC4_SetConfig+0xd0>)
 8014f58:	4293      	cmp	r3, r2
 8014f5a:	d109      	bne.n	8014f70 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014f62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	695b      	ldr	r3, [r3, #20]
 8014f68:	019b      	lsls	r3, r3, #6
 8014f6a:	697a      	ldr	r2, [r7, #20]
 8014f6c:	4313      	orrs	r3, r2
 8014f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	697a      	ldr	r2, [r7, #20]
 8014f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	68fa      	ldr	r2, [r7, #12]
 8014f7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014f7c:	683b      	ldr	r3, [r7, #0]
 8014f7e:	685a      	ldr	r2, [r3, #4]
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	693a      	ldr	r2, [r7, #16]
 8014f88:	621a      	str	r2, [r3, #32]
}
 8014f8a:	bf00      	nop
 8014f8c:	371c      	adds	r7, #28
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f94:	4770      	bx	lr
 8014f96:	bf00      	nop
 8014f98:	40012c00 	.word	0x40012c00
 8014f9c:	40013400 	.word	0x40013400
 8014fa0:	40014000 	.word	0x40014000
 8014fa4:	40014400 	.word	0x40014400
 8014fa8:	40014800 	.word	0x40014800

08014fac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014fac:	b480      	push	{r7}
 8014fae:	b087      	sub	sp, #28
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	6078      	str	r0, [r7, #4]
 8014fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	6a1b      	ldr	r3, [r3, #32]
 8014fba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	6a1b      	ldr	r3, [r3, #32]
 8014fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	685b      	ldr	r3, [r3, #4]
 8014fcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	68fa      	ldr	r2, [r7, #12]
 8014fe6:	4313      	orrs	r3, r2
 8014fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8014fea:	693b      	ldr	r3, [r7, #16]
 8014fec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8014ff0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8014ff2:	683b      	ldr	r3, [r7, #0]
 8014ff4:	689b      	ldr	r3, [r3, #8]
 8014ff6:	041b      	lsls	r3, r3, #16
 8014ff8:	693a      	ldr	r2, [r7, #16]
 8014ffa:	4313      	orrs	r3, r2
 8014ffc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	4a17      	ldr	r2, [pc, #92]	; (8015060 <TIM_OC5_SetConfig+0xb4>)
 8015002:	4293      	cmp	r3, r2
 8015004:	d00f      	beq.n	8015026 <TIM_OC5_SetConfig+0x7a>
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	4a16      	ldr	r2, [pc, #88]	; (8015064 <TIM_OC5_SetConfig+0xb8>)
 801500a:	4293      	cmp	r3, r2
 801500c:	d00b      	beq.n	8015026 <TIM_OC5_SetConfig+0x7a>
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	4a15      	ldr	r2, [pc, #84]	; (8015068 <TIM_OC5_SetConfig+0xbc>)
 8015012:	4293      	cmp	r3, r2
 8015014:	d007      	beq.n	8015026 <TIM_OC5_SetConfig+0x7a>
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	4a14      	ldr	r2, [pc, #80]	; (801506c <TIM_OC5_SetConfig+0xc0>)
 801501a:	4293      	cmp	r3, r2
 801501c:	d003      	beq.n	8015026 <TIM_OC5_SetConfig+0x7a>
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	4a13      	ldr	r2, [pc, #76]	; (8015070 <TIM_OC5_SetConfig+0xc4>)
 8015022:	4293      	cmp	r3, r2
 8015024:	d109      	bne.n	801503a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8015026:	697b      	ldr	r3, [r7, #20]
 8015028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801502c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801502e:	683b      	ldr	r3, [r7, #0]
 8015030:	695b      	ldr	r3, [r3, #20]
 8015032:	021b      	lsls	r3, r3, #8
 8015034:	697a      	ldr	r2, [r7, #20]
 8015036:	4313      	orrs	r3, r2
 8015038:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	697a      	ldr	r2, [r7, #20]
 801503e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	68fa      	ldr	r2, [r7, #12]
 8015044:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	685a      	ldr	r2, [r3, #4]
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	693a      	ldr	r2, [r7, #16]
 8015052:	621a      	str	r2, [r3, #32]
}
 8015054:	bf00      	nop
 8015056:	371c      	adds	r7, #28
 8015058:	46bd      	mov	sp, r7
 801505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505e:	4770      	bx	lr
 8015060:	40012c00 	.word	0x40012c00
 8015064:	40013400 	.word	0x40013400
 8015068:	40014000 	.word	0x40014000
 801506c:	40014400 	.word	0x40014400
 8015070:	40014800 	.word	0x40014800

08015074 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8015074:	b480      	push	{r7}
 8015076:	b087      	sub	sp, #28
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	6a1b      	ldr	r3, [r3, #32]
 8015082:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	6a1b      	ldr	r3, [r3, #32]
 801508e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	685b      	ldr	r3, [r3, #4]
 8015094:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80150a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80150a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80150a8:	683b      	ldr	r3, [r7, #0]
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	021b      	lsls	r3, r3, #8
 80150ae:	68fa      	ldr	r2, [r7, #12]
 80150b0:	4313      	orrs	r3, r2
 80150b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80150b4:	693b      	ldr	r3, [r7, #16]
 80150b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80150ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80150bc:	683b      	ldr	r3, [r7, #0]
 80150be:	689b      	ldr	r3, [r3, #8]
 80150c0:	051b      	lsls	r3, r3, #20
 80150c2:	693a      	ldr	r2, [r7, #16]
 80150c4:	4313      	orrs	r3, r2
 80150c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	4a18      	ldr	r2, [pc, #96]	; (801512c <TIM_OC6_SetConfig+0xb8>)
 80150cc:	4293      	cmp	r3, r2
 80150ce:	d00f      	beq.n	80150f0 <TIM_OC6_SetConfig+0x7c>
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	4a17      	ldr	r2, [pc, #92]	; (8015130 <TIM_OC6_SetConfig+0xbc>)
 80150d4:	4293      	cmp	r3, r2
 80150d6:	d00b      	beq.n	80150f0 <TIM_OC6_SetConfig+0x7c>
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	4a16      	ldr	r2, [pc, #88]	; (8015134 <TIM_OC6_SetConfig+0xc0>)
 80150dc:	4293      	cmp	r3, r2
 80150de:	d007      	beq.n	80150f0 <TIM_OC6_SetConfig+0x7c>
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	4a15      	ldr	r2, [pc, #84]	; (8015138 <TIM_OC6_SetConfig+0xc4>)
 80150e4:	4293      	cmp	r3, r2
 80150e6:	d003      	beq.n	80150f0 <TIM_OC6_SetConfig+0x7c>
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	4a14      	ldr	r2, [pc, #80]	; (801513c <TIM_OC6_SetConfig+0xc8>)
 80150ec:	4293      	cmp	r3, r2
 80150ee:	d109      	bne.n	8015104 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80150f0:	697b      	ldr	r3, [r7, #20]
 80150f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80150f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	695b      	ldr	r3, [r3, #20]
 80150fc:	029b      	lsls	r3, r3, #10
 80150fe:	697a      	ldr	r2, [r7, #20]
 8015100:	4313      	orrs	r3, r2
 8015102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	697a      	ldr	r2, [r7, #20]
 8015108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	68fa      	ldr	r2, [r7, #12]
 801510e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8015110:	683b      	ldr	r3, [r7, #0]
 8015112:	685a      	ldr	r2, [r3, #4]
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	693a      	ldr	r2, [r7, #16]
 801511c:	621a      	str	r2, [r3, #32]
}
 801511e:	bf00      	nop
 8015120:	371c      	adds	r7, #28
 8015122:	46bd      	mov	sp, r7
 8015124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015128:	4770      	bx	lr
 801512a:	bf00      	nop
 801512c:	40012c00 	.word	0x40012c00
 8015130:	40013400 	.word	0x40013400
 8015134:	40014000 	.word	0x40014000
 8015138:	40014400 	.word	0x40014400
 801513c:	40014800 	.word	0x40014800

08015140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015140:	b480      	push	{r7}
 8015142:	b087      	sub	sp, #28
 8015144:	af00      	add	r7, sp, #0
 8015146:	60f8      	str	r0, [r7, #12]
 8015148:	60b9      	str	r1, [r7, #8]
 801514a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	f003 031f 	and.w	r3, r3, #31
 8015152:	2201      	movs	r2, #1
 8015154:	fa02 f303 	lsl.w	r3, r2, r3
 8015158:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	6a1a      	ldr	r2, [r3, #32]
 801515e:	697b      	ldr	r3, [r7, #20]
 8015160:	43db      	mvns	r3, r3
 8015162:	401a      	ands	r2, r3
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	6a1a      	ldr	r2, [r3, #32]
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	f003 031f 	and.w	r3, r3, #31
 8015172:	6879      	ldr	r1, [r7, #4]
 8015174:	fa01 f303 	lsl.w	r3, r1, r3
 8015178:	431a      	orrs	r2, r3
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	621a      	str	r2, [r3, #32]
}
 801517e:	bf00      	nop
 8015180:	371c      	adds	r7, #28
 8015182:	46bd      	mov	sp, r7
 8015184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015188:	4770      	bx	lr
	...

0801518c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801518c:	b480      	push	{r7}
 801518e:	b085      	sub	sp, #20
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
 8015194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801519c:	2b01      	cmp	r3, #1
 801519e:	d101      	bne.n	80151a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80151a0:	2302      	movs	r3, #2
 80151a2:	e068      	b.n	8015276 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	2201      	movs	r2, #1
 80151a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2202      	movs	r2, #2
 80151b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	685b      	ldr	r3, [r3, #4]
 80151ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	689b      	ldr	r3, [r3, #8]
 80151c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	4a2e      	ldr	r2, [pc, #184]	; (8015284 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80151ca:	4293      	cmp	r3, r2
 80151cc:	d004      	beq.n	80151d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	4a2d      	ldr	r2, [pc, #180]	; (8015288 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80151d4:	4293      	cmp	r3, r2
 80151d6:	d108      	bne.n	80151ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80151de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	685b      	ldr	r3, [r3, #4]
 80151e4:	68fa      	ldr	r2, [r7, #12]
 80151e6:	4313      	orrs	r3, r2
 80151e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80151f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80151f2:	683b      	ldr	r3, [r7, #0]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	68fa      	ldr	r2, [r7, #12]
 80151f8:	4313      	orrs	r3, r2
 80151fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	68fa      	ldr	r2, [r7, #12]
 8015202:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	4a1e      	ldr	r2, [pc, #120]	; (8015284 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801520a:	4293      	cmp	r3, r2
 801520c:	d01d      	beq.n	801524a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015216:	d018      	beq.n	801524a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	4a1b      	ldr	r2, [pc, #108]	; (801528c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801521e:	4293      	cmp	r3, r2
 8015220:	d013      	beq.n	801524a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	4a1a      	ldr	r2, [pc, #104]	; (8015290 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015228:	4293      	cmp	r3, r2
 801522a:	d00e      	beq.n	801524a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	4a18      	ldr	r2, [pc, #96]	; (8015294 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8015232:	4293      	cmp	r3, r2
 8015234:	d009      	beq.n	801524a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	4a13      	ldr	r2, [pc, #76]	; (8015288 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801523c:	4293      	cmp	r3, r2
 801523e:	d004      	beq.n	801524a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	4a14      	ldr	r2, [pc, #80]	; (8015298 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8015246:	4293      	cmp	r3, r2
 8015248:	d10c      	bne.n	8015264 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801524a:	68bb      	ldr	r3, [r7, #8]
 801524c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015252:	683b      	ldr	r3, [r7, #0]
 8015254:	689b      	ldr	r3, [r3, #8]
 8015256:	68ba      	ldr	r2, [r7, #8]
 8015258:	4313      	orrs	r3, r2
 801525a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	68ba      	ldr	r2, [r7, #8]
 8015262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	2201      	movs	r2, #1
 8015268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	2200      	movs	r2, #0
 8015270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015274:	2300      	movs	r3, #0
}
 8015276:	4618      	mov	r0, r3
 8015278:	3714      	adds	r7, #20
 801527a:	46bd      	mov	sp, r7
 801527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015280:	4770      	bx	lr
 8015282:	bf00      	nop
 8015284:	40012c00 	.word	0x40012c00
 8015288:	40013400 	.word	0x40013400
 801528c:	40000400 	.word	0x40000400
 8015290:	40000800 	.word	0x40000800
 8015294:	40000c00 	.word	0x40000c00
 8015298:	40014000 	.word	0x40014000

0801529c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801529c:	b480      	push	{r7}
 801529e:	b083      	sub	sp, #12
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80152a4:	bf00      	nop
 80152a6:	370c      	adds	r7, #12
 80152a8:	46bd      	mov	sp, r7
 80152aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ae:	4770      	bx	lr

080152b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80152b0:	b480      	push	{r7}
 80152b2:	b083      	sub	sp, #12
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80152b8:	bf00      	nop
 80152ba:	370c      	adds	r7, #12
 80152bc:	46bd      	mov	sp, r7
 80152be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c2:	4770      	bx	lr

080152c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80152c4:	b480      	push	{r7}
 80152c6:	b083      	sub	sp, #12
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80152cc:	bf00      	nop
 80152ce:	370c      	adds	r7, #12
 80152d0:	46bd      	mov	sp, r7
 80152d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d6:	4770      	bx	lr

080152d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b082      	sub	sp, #8
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d101      	bne.n	80152ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80152e6:	2301      	movs	r3, #1
 80152e8:	e040      	b.n	801536c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d106      	bne.n	8015300 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	2200      	movs	r2, #0
 80152f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80152fa:	6878      	ldr	r0, [r7, #4]
 80152fc:	f7ee faea 	bl	80038d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	2224      	movs	r2, #36	; 0x24
 8015304:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	681a      	ldr	r2, [r3, #0]
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	f022 0201 	bic.w	r2, r2, #1
 8015314:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015316:	6878      	ldr	r0, [r7, #4]
 8015318:	f000 f8c0 	bl	801549c <UART_SetConfig>
 801531c:	4603      	mov	r3, r0
 801531e:	2b01      	cmp	r3, #1
 8015320:	d101      	bne.n	8015326 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8015322:	2301      	movs	r3, #1
 8015324:	e022      	b.n	801536c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801532a:	2b00      	cmp	r3, #0
 801532c:	d002      	beq.n	8015334 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801532e:	6878      	ldr	r0, [r7, #4]
 8015330:	f000 fb6c 	bl	8015a0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	685a      	ldr	r2, [r3, #4]
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015342:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	689a      	ldr	r2, [r3, #8]
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015352:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	681a      	ldr	r2, [r3, #0]
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	f042 0201 	orr.w	r2, r2, #1
 8015362:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f000 fbf3 	bl	8015b50 <UART_CheckIdleState>
 801536a:	4603      	mov	r3, r0
}
 801536c:	4618      	mov	r0, r3
 801536e:	3708      	adds	r7, #8
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}

08015374 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b08a      	sub	sp, #40	; 0x28
 8015378:	af02      	add	r7, sp, #8
 801537a:	60f8      	str	r0, [r7, #12]
 801537c:	60b9      	str	r1, [r7, #8]
 801537e:	603b      	str	r3, [r7, #0]
 8015380:	4613      	mov	r3, r2
 8015382:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015388:	2b20      	cmp	r3, #32
 801538a:	f040 8082 	bne.w	8015492 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 801538e:	68bb      	ldr	r3, [r7, #8]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d002      	beq.n	801539a <HAL_UART_Transmit+0x26>
 8015394:	88fb      	ldrh	r3, [r7, #6]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d101      	bne.n	801539e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801539a:	2301      	movs	r3, #1
 801539c:	e07a      	b.n	8015494 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80153a4:	2b01      	cmp	r3, #1
 80153a6:	d101      	bne.n	80153ac <HAL_UART_Transmit+0x38>
 80153a8:	2302      	movs	r3, #2
 80153aa:	e073      	b.n	8015494 <HAL_UART_Transmit+0x120>
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	2201      	movs	r2, #1
 80153b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	2200      	movs	r2, #0
 80153b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	2221      	movs	r2, #33	; 0x21
 80153c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80153c2:	f7f6 fe5b 	bl	800c07c <HAL_GetTick>
 80153c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	88fa      	ldrh	r2, [r7, #6]
 80153cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	88fa      	ldrh	r2, [r7, #6]
 80153d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	689b      	ldr	r3, [r3, #8]
 80153dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80153e0:	d108      	bne.n	80153f4 <HAL_UART_Transmit+0x80>
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	691b      	ldr	r3, [r3, #16]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d104      	bne.n	80153f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80153ea:	2300      	movs	r3, #0
 80153ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80153ee:	68bb      	ldr	r3, [r7, #8]
 80153f0:	61bb      	str	r3, [r7, #24]
 80153f2:	e003      	b.n	80153fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80153f4:	68bb      	ldr	r3, [r7, #8]
 80153f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80153f8:	2300      	movs	r3, #0
 80153fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	2200      	movs	r2, #0
 8015400:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8015404:	e02d      	b.n	8015462 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	9300      	str	r3, [sp, #0]
 801540a:	697b      	ldr	r3, [r7, #20]
 801540c:	2200      	movs	r2, #0
 801540e:	2180      	movs	r1, #128	; 0x80
 8015410:	68f8      	ldr	r0, [r7, #12]
 8015412:	f000 fbe6 	bl	8015be2 <UART_WaitOnFlagUntilTimeout>
 8015416:	4603      	mov	r3, r0
 8015418:	2b00      	cmp	r3, #0
 801541a:	d001      	beq.n	8015420 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 801541c:	2303      	movs	r3, #3
 801541e:	e039      	b.n	8015494 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8015420:	69fb      	ldr	r3, [r7, #28]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d10b      	bne.n	801543e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015426:	69bb      	ldr	r3, [r7, #24]
 8015428:	881a      	ldrh	r2, [r3, #0]
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015432:	b292      	uxth	r2, r2
 8015434:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8015436:	69bb      	ldr	r3, [r7, #24]
 8015438:	3302      	adds	r3, #2
 801543a:	61bb      	str	r3, [r7, #24]
 801543c:	e008      	b.n	8015450 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801543e:	69fb      	ldr	r3, [r7, #28]
 8015440:	781a      	ldrb	r2, [r3, #0]
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	b292      	uxth	r2, r2
 8015448:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801544a:	69fb      	ldr	r3, [r7, #28]
 801544c:	3301      	adds	r3, #1
 801544e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8015456:	b29b      	uxth	r3, r3
 8015458:	3b01      	subs	r3, #1
 801545a:	b29a      	uxth	r2, r3
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8015468:	b29b      	uxth	r3, r3
 801546a:	2b00      	cmp	r3, #0
 801546c:	d1cb      	bne.n	8015406 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	9300      	str	r3, [sp, #0]
 8015472:	697b      	ldr	r3, [r7, #20]
 8015474:	2200      	movs	r2, #0
 8015476:	2140      	movs	r1, #64	; 0x40
 8015478:	68f8      	ldr	r0, [r7, #12]
 801547a:	f000 fbb2 	bl	8015be2 <UART_WaitOnFlagUntilTimeout>
 801547e:	4603      	mov	r3, r0
 8015480:	2b00      	cmp	r3, #0
 8015482:	d001      	beq.n	8015488 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8015484:	2303      	movs	r3, #3
 8015486:	e005      	b.n	8015494 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	2220      	movs	r2, #32
 801548c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 801548e:	2300      	movs	r3, #0
 8015490:	e000      	b.n	8015494 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8015492:	2302      	movs	r3, #2
  }
}
 8015494:	4618      	mov	r0, r3
 8015496:	3720      	adds	r7, #32
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}

0801549c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801549c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80154a0:	b08a      	sub	sp, #40	; 0x28
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80154a6:	2300      	movs	r3, #0
 80154a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	689a      	ldr	r2, [r3, #8]
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	691b      	ldr	r3, [r3, #16]
 80154b4:	431a      	orrs	r2, r3
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	695b      	ldr	r3, [r3, #20]
 80154ba:	431a      	orrs	r2, r3
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	69db      	ldr	r3, [r3, #28]
 80154c0:	4313      	orrs	r3, r2
 80154c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	681a      	ldr	r2, [r3, #0]
 80154ca:	4ba4      	ldr	r3, [pc, #656]	; (801575c <UART_SetConfig+0x2c0>)
 80154cc:	4013      	ands	r3, r2
 80154ce:	68fa      	ldr	r2, [r7, #12]
 80154d0:	6812      	ldr	r2, [r2, #0]
 80154d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80154d4:	430b      	orrs	r3, r1
 80154d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	68da      	ldr	r2, [r3, #12]
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	430a      	orrs	r2, r1
 80154ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	699b      	ldr	r3, [r3, #24]
 80154f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	4a99      	ldr	r2, [pc, #612]	; (8015760 <UART_SetConfig+0x2c4>)
 80154fa:	4293      	cmp	r3, r2
 80154fc:	d004      	beq.n	8015508 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	6a1b      	ldr	r3, [r3, #32]
 8015502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015504:	4313      	orrs	r3, r2
 8015506:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	689b      	ldr	r3, [r3, #8]
 801550e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015518:	430a      	orrs	r2, r1
 801551a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	4a90      	ldr	r2, [pc, #576]	; (8015764 <UART_SetConfig+0x2c8>)
 8015522:	4293      	cmp	r3, r2
 8015524:	d126      	bne.n	8015574 <UART_SetConfig+0xd8>
 8015526:	4b90      	ldr	r3, [pc, #576]	; (8015768 <UART_SetConfig+0x2cc>)
 8015528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801552c:	f003 0303 	and.w	r3, r3, #3
 8015530:	2b03      	cmp	r3, #3
 8015532:	d81b      	bhi.n	801556c <UART_SetConfig+0xd0>
 8015534:	a201      	add	r2, pc, #4	; (adr r2, 801553c <UART_SetConfig+0xa0>)
 8015536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801553a:	bf00      	nop
 801553c:	0801554d 	.word	0x0801554d
 8015540:	0801555d 	.word	0x0801555d
 8015544:	08015555 	.word	0x08015555
 8015548:	08015565 	.word	0x08015565
 801554c:	2301      	movs	r3, #1
 801554e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015552:	e116      	b.n	8015782 <UART_SetConfig+0x2e6>
 8015554:	2302      	movs	r3, #2
 8015556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801555a:	e112      	b.n	8015782 <UART_SetConfig+0x2e6>
 801555c:	2304      	movs	r3, #4
 801555e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015562:	e10e      	b.n	8015782 <UART_SetConfig+0x2e6>
 8015564:	2308      	movs	r3, #8
 8015566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801556a:	e10a      	b.n	8015782 <UART_SetConfig+0x2e6>
 801556c:	2310      	movs	r3, #16
 801556e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015572:	e106      	b.n	8015782 <UART_SetConfig+0x2e6>
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	4a7c      	ldr	r2, [pc, #496]	; (801576c <UART_SetConfig+0x2d0>)
 801557a:	4293      	cmp	r3, r2
 801557c:	d138      	bne.n	80155f0 <UART_SetConfig+0x154>
 801557e:	4b7a      	ldr	r3, [pc, #488]	; (8015768 <UART_SetConfig+0x2cc>)
 8015580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015584:	f003 030c 	and.w	r3, r3, #12
 8015588:	2b0c      	cmp	r3, #12
 801558a:	d82d      	bhi.n	80155e8 <UART_SetConfig+0x14c>
 801558c:	a201      	add	r2, pc, #4	; (adr r2, 8015594 <UART_SetConfig+0xf8>)
 801558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015592:	bf00      	nop
 8015594:	080155c9 	.word	0x080155c9
 8015598:	080155e9 	.word	0x080155e9
 801559c:	080155e9 	.word	0x080155e9
 80155a0:	080155e9 	.word	0x080155e9
 80155a4:	080155d9 	.word	0x080155d9
 80155a8:	080155e9 	.word	0x080155e9
 80155ac:	080155e9 	.word	0x080155e9
 80155b0:	080155e9 	.word	0x080155e9
 80155b4:	080155d1 	.word	0x080155d1
 80155b8:	080155e9 	.word	0x080155e9
 80155bc:	080155e9 	.word	0x080155e9
 80155c0:	080155e9 	.word	0x080155e9
 80155c4:	080155e1 	.word	0x080155e1
 80155c8:	2300      	movs	r3, #0
 80155ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80155ce:	e0d8      	b.n	8015782 <UART_SetConfig+0x2e6>
 80155d0:	2302      	movs	r3, #2
 80155d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80155d6:	e0d4      	b.n	8015782 <UART_SetConfig+0x2e6>
 80155d8:	2304      	movs	r3, #4
 80155da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80155de:	e0d0      	b.n	8015782 <UART_SetConfig+0x2e6>
 80155e0:	2308      	movs	r3, #8
 80155e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80155e6:	e0cc      	b.n	8015782 <UART_SetConfig+0x2e6>
 80155e8:	2310      	movs	r3, #16
 80155ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80155ee:	e0c8      	b.n	8015782 <UART_SetConfig+0x2e6>
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	4a5e      	ldr	r2, [pc, #376]	; (8015770 <UART_SetConfig+0x2d4>)
 80155f6:	4293      	cmp	r3, r2
 80155f8:	d125      	bne.n	8015646 <UART_SetConfig+0x1aa>
 80155fa:	4b5b      	ldr	r3, [pc, #364]	; (8015768 <UART_SetConfig+0x2cc>)
 80155fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015600:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8015604:	2b30      	cmp	r3, #48	; 0x30
 8015606:	d016      	beq.n	8015636 <UART_SetConfig+0x19a>
 8015608:	2b30      	cmp	r3, #48	; 0x30
 801560a:	d818      	bhi.n	801563e <UART_SetConfig+0x1a2>
 801560c:	2b20      	cmp	r3, #32
 801560e:	d00a      	beq.n	8015626 <UART_SetConfig+0x18a>
 8015610:	2b20      	cmp	r3, #32
 8015612:	d814      	bhi.n	801563e <UART_SetConfig+0x1a2>
 8015614:	2b00      	cmp	r3, #0
 8015616:	d002      	beq.n	801561e <UART_SetConfig+0x182>
 8015618:	2b10      	cmp	r3, #16
 801561a:	d008      	beq.n	801562e <UART_SetConfig+0x192>
 801561c:	e00f      	b.n	801563e <UART_SetConfig+0x1a2>
 801561e:	2300      	movs	r3, #0
 8015620:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015624:	e0ad      	b.n	8015782 <UART_SetConfig+0x2e6>
 8015626:	2302      	movs	r3, #2
 8015628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801562c:	e0a9      	b.n	8015782 <UART_SetConfig+0x2e6>
 801562e:	2304      	movs	r3, #4
 8015630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015634:	e0a5      	b.n	8015782 <UART_SetConfig+0x2e6>
 8015636:	2308      	movs	r3, #8
 8015638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801563c:	e0a1      	b.n	8015782 <UART_SetConfig+0x2e6>
 801563e:	2310      	movs	r3, #16
 8015640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015644:	e09d      	b.n	8015782 <UART_SetConfig+0x2e6>
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	4a4a      	ldr	r2, [pc, #296]	; (8015774 <UART_SetConfig+0x2d8>)
 801564c:	4293      	cmp	r3, r2
 801564e:	d125      	bne.n	801569c <UART_SetConfig+0x200>
 8015650:	4b45      	ldr	r3, [pc, #276]	; (8015768 <UART_SetConfig+0x2cc>)
 8015652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015656:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801565a:	2bc0      	cmp	r3, #192	; 0xc0
 801565c:	d016      	beq.n	801568c <UART_SetConfig+0x1f0>
 801565e:	2bc0      	cmp	r3, #192	; 0xc0
 8015660:	d818      	bhi.n	8015694 <UART_SetConfig+0x1f8>
 8015662:	2b80      	cmp	r3, #128	; 0x80
 8015664:	d00a      	beq.n	801567c <UART_SetConfig+0x1e0>
 8015666:	2b80      	cmp	r3, #128	; 0x80
 8015668:	d814      	bhi.n	8015694 <UART_SetConfig+0x1f8>
 801566a:	2b00      	cmp	r3, #0
 801566c:	d002      	beq.n	8015674 <UART_SetConfig+0x1d8>
 801566e:	2b40      	cmp	r3, #64	; 0x40
 8015670:	d008      	beq.n	8015684 <UART_SetConfig+0x1e8>
 8015672:	e00f      	b.n	8015694 <UART_SetConfig+0x1f8>
 8015674:	2300      	movs	r3, #0
 8015676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801567a:	e082      	b.n	8015782 <UART_SetConfig+0x2e6>
 801567c:	2302      	movs	r3, #2
 801567e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015682:	e07e      	b.n	8015782 <UART_SetConfig+0x2e6>
 8015684:	2304      	movs	r3, #4
 8015686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801568a:	e07a      	b.n	8015782 <UART_SetConfig+0x2e6>
 801568c:	2308      	movs	r3, #8
 801568e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015692:	e076      	b.n	8015782 <UART_SetConfig+0x2e6>
 8015694:	2310      	movs	r3, #16
 8015696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801569a:	e072      	b.n	8015782 <UART_SetConfig+0x2e6>
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	4a35      	ldr	r2, [pc, #212]	; (8015778 <UART_SetConfig+0x2dc>)
 80156a2:	4293      	cmp	r3, r2
 80156a4:	d12a      	bne.n	80156fc <UART_SetConfig+0x260>
 80156a6:	4b30      	ldr	r3, [pc, #192]	; (8015768 <UART_SetConfig+0x2cc>)
 80156a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80156ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80156b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80156b4:	d01a      	beq.n	80156ec <UART_SetConfig+0x250>
 80156b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80156ba:	d81b      	bhi.n	80156f4 <UART_SetConfig+0x258>
 80156bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80156c0:	d00c      	beq.n	80156dc <UART_SetConfig+0x240>
 80156c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80156c6:	d815      	bhi.n	80156f4 <UART_SetConfig+0x258>
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d003      	beq.n	80156d4 <UART_SetConfig+0x238>
 80156cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80156d0:	d008      	beq.n	80156e4 <UART_SetConfig+0x248>
 80156d2:	e00f      	b.n	80156f4 <UART_SetConfig+0x258>
 80156d4:	2300      	movs	r3, #0
 80156d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80156da:	e052      	b.n	8015782 <UART_SetConfig+0x2e6>
 80156dc:	2302      	movs	r3, #2
 80156de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80156e2:	e04e      	b.n	8015782 <UART_SetConfig+0x2e6>
 80156e4:	2304      	movs	r3, #4
 80156e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80156ea:	e04a      	b.n	8015782 <UART_SetConfig+0x2e6>
 80156ec:	2308      	movs	r3, #8
 80156ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80156f2:	e046      	b.n	8015782 <UART_SetConfig+0x2e6>
 80156f4:	2310      	movs	r3, #16
 80156f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80156fa:	e042      	b.n	8015782 <UART_SetConfig+0x2e6>
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	4a17      	ldr	r2, [pc, #92]	; (8015760 <UART_SetConfig+0x2c4>)
 8015702:	4293      	cmp	r3, r2
 8015704:	d13a      	bne.n	801577c <UART_SetConfig+0x2e0>
 8015706:	4b18      	ldr	r3, [pc, #96]	; (8015768 <UART_SetConfig+0x2cc>)
 8015708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801570c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8015710:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015714:	d01a      	beq.n	801574c <UART_SetConfig+0x2b0>
 8015716:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801571a:	d81b      	bhi.n	8015754 <UART_SetConfig+0x2b8>
 801571c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015720:	d00c      	beq.n	801573c <UART_SetConfig+0x2a0>
 8015722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015726:	d815      	bhi.n	8015754 <UART_SetConfig+0x2b8>
 8015728:	2b00      	cmp	r3, #0
 801572a:	d003      	beq.n	8015734 <UART_SetConfig+0x298>
 801572c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015730:	d008      	beq.n	8015744 <UART_SetConfig+0x2a8>
 8015732:	e00f      	b.n	8015754 <UART_SetConfig+0x2b8>
 8015734:	2300      	movs	r3, #0
 8015736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801573a:	e022      	b.n	8015782 <UART_SetConfig+0x2e6>
 801573c:	2302      	movs	r3, #2
 801573e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015742:	e01e      	b.n	8015782 <UART_SetConfig+0x2e6>
 8015744:	2304      	movs	r3, #4
 8015746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801574a:	e01a      	b.n	8015782 <UART_SetConfig+0x2e6>
 801574c:	2308      	movs	r3, #8
 801574e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015752:	e016      	b.n	8015782 <UART_SetConfig+0x2e6>
 8015754:	2310      	movs	r3, #16
 8015756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801575a:	e012      	b.n	8015782 <UART_SetConfig+0x2e6>
 801575c:	efff69f3 	.word	0xefff69f3
 8015760:	40008000 	.word	0x40008000
 8015764:	40013800 	.word	0x40013800
 8015768:	40021000 	.word	0x40021000
 801576c:	40004400 	.word	0x40004400
 8015770:	40004800 	.word	0x40004800
 8015774:	40004c00 	.word	0x40004c00
 8015778:	40005000 	.word	0x40005000
 801577c:	2310      	movs	r3, #16
 801577e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	4a9f      	ldr	r2, [pc, #636]	; (8015a04 <UART_SetConfig+0x568>)
 8015788:	4293      	cmp	r3, r2
 801578a:	d17a      	bne.n	8015882 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801578c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015790:	2b08      	cmp	r3, #8
 8015792:	d824      	bhi.n	80157de <UART_SetConfig+0x342>
 8015794:	a201      	add	r2, pc, #4	; (adr r2, 801579c <UART_SetConfig+0x300>)
 8015796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801579a:	bf00      	nop
 801579c:	080157c1 	.word	0x080157c1
 80157a0:	080157df 	.word	0x080157df
 80157a4:	080157c9 	.word	0x080157c9
 80157a8:	080157df 	.word	0x080157df
 80157ac:	080157cf 	.word	0x080157cf
 80157b0:	080157df 	.word	0x080157df
 80157b4:	080157df 	.word	0x080157df
 80157b8:	080157df 	.word	0x080157df
 80157bc:	080157d7 	.word	0x080157d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80157c0:	f7fb ff8e 	bl	80116e0 <HAL_RCC_GetPCLK1Freq>
 80157c4:	61f8      	str	r0, [r7, #28]
        break;
 80157c6:	e010      	b.n	80157ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80157c8:	4b8f      	ldr	r3, [pc, #572]	; (8015a08 <UART_SetConfig+0x56c>)
 80157ca:	61fb      	str	r3, [r7, #28]
        break;
 80157cc:	e00d      	b.n	80157ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80157ce:	f7fb feef 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 80157d2:	61f8      	str	r0, [r7, #28]
        break;
 80157d4:	e009      	b.n	80157ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80157d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80157da:	61fb      	str	r3, [r7, #28]
        break;
 80157dc:	e005      	b.n	80157ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80157de:	2300      	movs	r3, #0
 80157e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80157e2:	2301      	movs	r3, #1
 80157e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80157e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80157ea:	69fb      	ldr	r3, [r7, #28]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	f000 80fb 	beq.w	80159e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	685a      	ldr	r2, [r3, #4]
 80157f6:	4613      	mov	r3, r2
 80157f8:	005b      	lsls	r3, r3, #1
 80157fa:	4413      	add	r3, r2
 80157fc:	69fa      	ldr	r2, [r7, #28]
 80157fe:	429a      	cmp	r2, r3
 8015800:	d305      	bcc.n	801580e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	685b      	ldr	r3, [r3, #4]
 8015806:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8015808:	69fa      	ldr	r2, [r7, #28]
 801580a:	429a      	cmp	r2, r3
 801580c:	d903      	bls.n	8015816 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 801580e:	2301      	movs	r3, #1
 8015810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015814:	e0e8      	b.n	80159e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8015816:	69fb      	ldr	r3, [r7, #28]
 8015818:	2200      	movs	r2, #0
 801581a:	461c      	mov	r4, r3
 801581c:	4615      	mov	r5, r2
 801581e:	f04f 0200 	mov.w	r2, #0
 8015822:	f04f 0300 	mov.w	r3, #0
 8015826:	022b      	lsls	r3, r5, #8
 8015828:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 801582c:	0222      	lsls	r2, r4, #8
 801582e:	68f9      	ldr	r1, [r7, #12]
 8015830:	6849      	ldr	r1, [r1, #4]
 8015832:	0849      	lsrs	r1, r1, #1
 8015834:	2000      	movs	r0, #0
 8015836:	4688      	mov	r8, r1
 8015838:	4681      	mov	r9, r0
 801583a:	eb12 0a08 	adds.w	sl, r2, r8
 801583e:	eb43 0b09 	adc.w	fp, r3, r9
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	685b      	ldr	r3, [r3, #4]
 8015846:	2200      	movs	r2, #0
 8015848:	603b      	str	r3, [r7, #0]
 801584a:	607a      	str	r2, [r7, #4]
 801584c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015850:	4650      	mov	r0, sl
 8015852:	4659      	mov	r1, fp
 8015854:	f7eb f942 	bl	8000adc <__aeabi_uldivmod>
 8015858:	4602      	mov	r2, r0
 801585a:	460b      	mov	r3, r1
 801585c:	4613      	mov	r3, r2
 801585e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015860:	69bb      	ldr	r3, [r7, #24]
 8015862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015866:	d308      	bcc.n	801587a <UART_SetConfig+0x3de>
 8015868:	69bb      	ldr	r3, [r7, #24]
 801586a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801586e:	d204      	bcs.n	801587a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	69ba      	ldr	r2, [r7, #24]
 8015876:	60da      	str	r2, [r3, #12]
 8015878:	e0b6      	b.n	80159e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 801587a:	2301      	movs	r3, #1
 801587c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015880:	e0b2      	b.n	80159e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	69db      	ldr	r3, [r3, #28]
 8015886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801588a:	d15e      	bne.n	801594a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 801588c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015890:	2b08      	cmp	r3, #8
 8015892:	d828      	bhi.n	80158e6 <UART_SetConfig+0x44a>
 8015894:	a201      	add	r2, pc, #4	; (adr r2, 801589c <UART_SetConfig+0x400>)
 8015896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801589a:	bf00      	nop
 801589c:	080158c1 	.word	0x080158c1
 80158a0:	080158c9 	.word	0x080158c9
 80158a4:	080158d1 	.word	0x080158d1
 80158a8:	080158e7 	.word	0x080158e7
 80158ac:	080158d7 	.word	0x080158d7
 80158b0:	080158e7 	.word	0x080158e7
 80158b4:	080158e7 	.word	0x080158e7
 80158b8:	080158e7 	.word	0x080158e7
 80158bc:	080158df 	.word	0x080158df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80158c0:	f7fb ff0e 	bl	80116e0 <HAL_RCC_GetPCLK1Freq>
 80158c4:	61f8      	str	r0, [r7, #28]
        break;
 80158c6:	e014      	b.n	80158f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80158c8:	f7fb ff20 	bl	801170c <HAL_RCC_GetPCLK2Freq>
 80158cc:	61f8      	str	r0, [r7, #28]
        break;
 80158ce:	e010      	b.n	80158f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80158d0:	4b4d      	ldr	r3, [pc, #308]	; (8015a08 <UART_SetConfig+0x56c>)
 80158d2:	61fb      	str	r3, [r7, #28]
        break;
 80158d4:	e00d      	b.n	80158f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80158d6:	f7fb fe6b 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 80158da:	61f8      	str	r0, [r7, #28]
        break;
 80158dc:	e009      	b.n	80158f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80158de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80158e2:	61fb      	str	r3, [r7, #28]
        break;
 80158e4:	e005      	b.n	80158f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80158e6:	2300      	movs	r3, #0
 80158e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80158ea:	2301      	movs	r3, #1
 80158ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80158f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80158f2:	69fb      	ldr	r3, [r7, #28]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d077      	beq.n	80159e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80158f8:	69fb      	ldr	r3, [r7, #28]
 80158fa:	005a      	lsls	r2, r3, #1
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	685b      	ldr	r3, [r3, #4]
 8015900:	085b      	lsrs	r3, r3, #1
 8015902:	441a      	add	r2, r3
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	685b      	ldr	r3, [r3, #4]
 8015908:	fbb2 f3f3 	udiv	r3, r2, r3
 801590c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801590e:	69bb      	ldr	r3, [r7, #24]
 8015910:	2b0f      	cmp	r3, #15
 8015912:	d916      	bls.n	8015942 <UART_SetConfig+0x4a6>
 8015914:	69bb      	ldr	r3, [r7, #24]
 8015916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801591a:	d212      	bcs.n	8015942 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801591c:	69bb      	ldr	r3, [r7, #24]
 801591e:	b29b      	uxth	r3, r3
 8015920:	f023 030f 	bic.w	r3, r3, #15
 8015924:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015926:	69bb      	ldr	r3, [r7, #24]
 8015928:	085b      	lsrs	r3, r3, #1
 801592a:	b29b      	uxth	r3, r3
 801592c:	f003 0307 	and.w	r3, r3, #7
 8015930:	b29a      	uxth	r2, r3
 8015932:	8afb      	ldrh	r3, [r7, #22]
 8015934:	4313      	orrs	r3, r2
 8015936:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	8afa      	ldrh	r2, [r7, #22]
 801593e:	60da      	str	r2, [r3, #12]
 8015940:	e052      	b.n	80159e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8015942:	2301      	movs	r3, #1
 8015944:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015948:	e04e      	b.n	80159e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801594a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801594e:	2b08      	cmp	r3, #8
 8015950:	d827      	bhi.n	80159a2 <UART_SetConfig+0x506>
 8015952:	a201      	add	r2, pc, #4	; (adr r2, 8015958 <UART_SetConfig+0x4bc>)
 8015954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015958:	0801597d 	.word	0x0801597d
 801595c:	08015985 	.word	0x08015985
 8015960:	0801598d 	.word	0x0801598d
 8015964:	080159a3 	.word	0x080159a3
 8015968:	08015993 	.word	0x08015993
 801596c:	080159a3 	.word	0x080159a3
 8015970:	080159a3 	.word	0x080159a3
 8015974:	080159a3 	.word	0x080159a3
 8015978:	0801599b 	.word	0x0801599b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801597c:	f7fb feb0 	bl	80116e0 <HAL_RCC_GetPCLK1Freq>
 8015980:	61f8      	str	r0, [r7, #28]
        break;
 8015982:	e014      	b.n	80159ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015984:	f7fb fec2 	bl	801170c <HAL_RCC_GetPCLK2Freq>
 8015988:	61f8      	str	r0, [r7, #28]
        break;
 801598a:	e010      	b.n	80159ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801598c:	4b1e      	ldr	r3, [pc, #120]	; (8015a08 <UART_SetConfig+0x56c>)
 801598e:	61fb      	str	r3, [r7, #28]
        break;
 8015990:	e00d      	b.n	80159ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015992:	f7fb fe0d 	bl	80115b0 <HAL_RCC_GetSysClockFreq>
 8015996:	61f8      	str	r0, [r7, #28]
        break;
 8015998:	e009      	b.n	80159ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801599a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801599e:	61fb      	str	r3, [r7, #28]
        break;
 80159a0:	e005      	b.n	80159ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80159a2:	2300      	movs	r3, #0
 80159a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80159a6:	2301      	movs	r3, #1
 80159a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80159ac:	bf00      	nop
    }

    if (pclk != 0U)
 80159ae:	69fb      	ldr	r3, [r7, #28]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d019      	beq.n	80159e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	685b      	ldr	r3, [r3, #4]
 80159b8:	085a      	lsrs	r2, r3, #1
 80159ba:	69fb      	ldr	r3, [r7, #28]
 80159bc:	441a      	add	r2, r3
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	685b      	ldr	r3, [r3, #4]
 80159c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80159c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80159c8:	69bb      	ldr	r3, [r7, #24]
 80159ca:	2b0f      	cmp	r3, #15
 80159cc:	d909      	bls.n	80159e2 <UART_SetConfig+0x546>
 80159ce:	69bb      	ldr	r3, [r7, #24]
 80159d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80159d4:	d205      	bcs.n	80159e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80159d6:	69bb      	ldr	r3, [r7, #24]
 80159d8:	b29a      	uxth	r2, r3
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	60da      	str	r2, [r3, #12]
 80159e0:	e002      	b.n	80159e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80159e2:	2301      	movs	r3, #1
 80159e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	2200      	movs	r2, #0
 80159ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	2200      	movs	r2, #0
 80159f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80159f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80159f8:	4618      	mov	r0, r3
 80159fa:	3728      	adds	r7, #40	; 0x28
 80159fc:	46bd      	mov	sp, r7
 80159fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015a02:	bf00      	nop
 8015a04:	40008000 	.word	0x40008000
 8015a08:	00f42400 	.word	0x00f42400

08015a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015a0c:	b480      	push	{r7}
 8015a0e:	b083      	sub	sp, #12
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a18:	f003 0301 	and.w	r3, r3, #1
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d00a      	beq.n	8015a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	685b      	ldr	r3, [r3, #4]
 8015a26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	430a      	orrs	r2, r1
 8015a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a3a:	f003 0302 	and.w	r3, r3, #2
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d00a      	beq.n	8015a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	685b      	ldr	r3, [r3, #4]
 8015a48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	430a      	orrs	r2, r1
 8015a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a5c:	f003 0304 	and.w	r3, r3, #4
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d00a      	beq.n	8015a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	685b      	ldr	r3, [r3, #4]
 8015a6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	430a      	orrs	r2, r1
 8015a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a7e:	f003 0308 	and.w	r3, r3, #8
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d00a      	beq.n	8015a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	685b      	ldr	r3, [r3, #4]
 8015a8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	430a      	orrs	r2, r1
 8015a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aa0:	f003 0310 	and.w	r3, r3, #16
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d00a      	beq.n	8015abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	689b      	ldr	r3, [r3, #8]
 8015aae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	430a      	orrs	r2, r1
 8015abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ac2:	f003 0320 	and.w	r3, r3, #32
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d00a      	beq.n	8015ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	689b      	ldr	r3, [r3, #8]
 8015ad0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	430a      	orrs	r2, r1
 8015ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d01a      	beq.n	8015b22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	685b      	ldr	r3, [r3, #4]
 8015af2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	430a      	orrs	r2, r1
 8015b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015b0a:	d10a      	bne.n	8015b22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	685b      	ldr	r3, [r3, #4]
 8015b12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	430a      	orrs	r2, r1
 8015b20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d00a      	beq.n	8015b44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	685b      	ldr	r3, [r3, #4]
 8015b34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	430a      	orrs	r2, r1
 8015b42:	605a      	str	r2, [r3, #4]
  }
}
 8015b44:	bf00      	nop
 8015b46:	370c      	adds	r7, #12
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b4e:	4770      	bx	lr

08015b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b086      	sub	sp, #24
 8015b54:	af02      	add	r7, sp, #8
 8015b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015b60:	f7f6 fa8c 	bl	800c07c <HAL_GetTick>
 8015b64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	f003 0308 	and.w	r3, r3, #8
 8015b70:	2b08      	cmp	r3, #8
 8015b72:	d10e      	bne.n	8015b92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015b78:	9300      	str	r3, [sp, #0]
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	2200      	movs	r2, #0
 8015b7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015b82:	6878      	ldr	r0, [r7, #4]
 8015b84:	f000 f82d 	bl	8015be2 <UART_WaitOnFlagUntilTimeout>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d001      	beq.n	8015b92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015b8e:	2303      	movs	r3, #3
 8015b90:	e023      	b.n	8015bda <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	f003 0304 	and.w	r3, r3, #4
 8015b9c:	2b04      	cmp	r3, #4
 8015b9e:	d10e      	bne.n	8015bbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015ba0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015ba4:	9300      	str	r3, [sp, #0]
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	2200      	movs	r2, #0
 8015baa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015bae:	6878      	ldr	r0, [r7, #4]
 8015bb0:	f000 f817 	bl	8015be2 <UART_WaitOnFlagUntilTimeout>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d001      	beq.n	8015bbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015bba:	2303      	movs	r3, #3
 8015bbc:	e00d      	b.n	8015bda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	2220      	movs	r2, #32
 8015bc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	2220      	movs	r2, #32
 8015bc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	2200      	movs	r2, #0
 8015bce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8015bd8:	2300      	movs	r3, #0
}
 8015bda:	4618      	mov	r0, r3
 8015bdc:	3710      	adds	r7, #16
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}

08015be2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015be2:	b580      	push	{r7, lr}
 8015be4:	b09c      	sub	sp, #112	; 0x70
 8015be6:	af00      	add	r7, sp, #0
 8015be8:	60f8      	str	r0, [r7, #12]
 8015bea:	60b9      	str	r1, [r7, #8]
 8015bec:	603b      	str	r3, [r7, #0]
 8015bee:	4613      	mov	r3, r2
 8015bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015bf2:	e0a5      	b.n	8015d40 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015bfa:	f000 80a1 	beq.w	8015d40 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015bfe:	f7f6 fa3d 	bl	800c07c <HAL_GetTick>
 8015c02:	4602      	mov	r2, r0
 8015c04:	683b      	ldr	r3, [r7, #0]
 8015c06:	1ad3      	subs	r3, r2, r3
 8015c08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d302      	bcc.n	8015c14 <UART_WaitOnFlagUntilTimeout+0x32>
 8015c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d13e      	bne.n	8015c92 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c1c:	e853 3f00 	ldrex	r3, [r3]
 8015c20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8015c28:	667b      	str	r3, [r7, #100]	; 0x64
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	461a      	mov	r2, r3
 8015c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015c34:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015c38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015c3a:	e841 2300 	strex	r3, r2, [r1]
 8015c3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d1e6      	bne.n	8015c14 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	3308      	adds	r3, #8
 8015c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c50:	e853 3f00 	ldrex	r3, [r3]
 8015c54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c58:	f023 0301 	bic.w	r3, r3, #1
 8015c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	3308      	adds	r3, #8
 8015c64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015c66:	64ba      	str	r2, [r7, #72]	; 0x48
 8015c68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c6e:	e841 2300 	strex	r3, r2, [r1]
 8015c72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d1e5      	bne.n	8015c46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	2220      	movs	r2, #32
 8015c7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	2220      	movs	r2, #32
 8015c84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	2200      	movs	r2, #0
 8015c8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8015c8e:	2303      	movs	r3, #3
 8015c90:	e067      	b.n	8015d62 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	f003 0304 	and.w	r3, r3, #4
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d04f      	beq.n	8015d40 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	69db      	ldr	r3, [r3, #28]
 8015ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015cae:	d147      	bne.n	8015d40 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015cb8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc2:	e853 3f00 	ldrex	r3, [r3]
 8015cc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8015cce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	461a      	mov	r2, r3
 8015cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8015cda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015ce0:	e841 2300 	strex	r3, r2, [r1]
 8015ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d1e6      	bne.n	8015cba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	3308      	adds	r3, #8
 8015cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cf4:	697b      	ldr	r3, [r7, #20]
 8015cf6:	e853 3f00 	ldrex	r3, [r3]
 8015cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8015cfc:	693b      	ldr	r3, [r7, #16]
 8015cfe:	f023 0301 	bic.w	r3, r3, #1
 8015d02:	66bb      	str	r3, [r7, #104]	; 0x68
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	3308      	adds	r3, #8
 8015d0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015d0c:	623a      	str	r2, [r7, #32]
 8015d0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d10:	69f9      	ldr	r1, [r7, #28]
 8015d12:	6a3a      	ldr	r2, [r7, #32]
 8015d14:	e841 2300 	strex	r3, r2, [r1]
 8015d18:	61bb      	str	r3, [r7, #24]
   return(result);
 8015d1a:	69bb      	ldr	r3, [r7, #24]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d1e5      	bne.n	8015cec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	2220      	movs	r2, #32
 8015d24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	2220      	movs	r2, #32
 8015d2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	2220      	movs	r2, #32
 8015d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	2200      	movs	r2, #0
 8015d38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8015d3c:	2303      	movs	r3, #3
 8015d3e:	e010      	b.n	8015d62 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	69da      	ldr	r2, [r3, #28]
 8015d46:	68bb      	ldr	r3, [r7, #8]
 8015d48:	4013      	ands	r3, r2
 8015d4a:	68ba      	ldr	r2, [r7, #8]
 8015d4c:	429a      	cmp	r2, r3
 8015d4e:	bf0c      	ite	eq
 8015d50:	2301      	moveq	r3, #1
 8015d52:	2300      	movne	r3, #0
 8015d54:	b2db      	uxtb	r3, r3
 8015d56:	461a      	mov	r2, r3
 8015d58:	79fb      	ldrb	r3, [r7, #7]
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	f43f af4a 	beq.w	8015bf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015d60:	2300      	movs	r3, #0
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	3770      	adds	r7, #112	; 0x70
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd80      	pop	{r7, pc}
	...

08015d6c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8015d6c:	b480      	push	{r7}
 8015d6e:	b087      	sub	sp, #28
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
 8015d74:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	681a      	ldr	r2, [r3, #0]
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d80:	683a      	ldr	r2, [r7, #0]
 8015d82:	6812      	ldr	r2, [r2, #0]
 8015d84:	f023 0101 	bic.w	r1, r3, #1
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8015d8e:	683b      	ldr	r3, [r7, #0]
 8015d90:	689b      	ldr	r3, [r3, #8]
 8015d92:	2b08      	cmp	r3, #8
 8015d94:	d102      	bne.n	8015d9c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8015d96:	2340      	movs	r3, #64	; 0x40
 8015d98:	617b      	str	r3, [r7, #20]
 8015d9a:	e001      	b.n	8015da0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8015da4:	697b      	ldr	r3, [r7, #20]
 8015da6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8015da8:	683b      	ldr	r3, [r7, #0]
 8015daa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8015dac:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8015dae:	683b      	ldr	r3, [r7, #0]
 8015db0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8015db2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8015db4:	683b      	ldr	r3, [r7, #0]
 8015db6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8015db8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8015dba:	683b      	ldr	r3, [r7, #0]
 8015dbc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8015dbe:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8015dc0:	683b      	ldr	r3, [r7, #0]
 8015dc2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8015dc4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8015dc6:	683b      	ldr	r3, [r7, #0]
 8015dc8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8015dca:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8015dd0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8015dd2:	683b      	ldr	r3, [r7, #0]
 8015dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8015dd6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8015ddc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8015dde:	683b      	ldr	r3, [r7, #0]
 8015de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8015de2:	4313      	orrs	r3, r2
 8015de4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dea:	693a      	ldr	r2, [r7, #16]
 8015dec:	4313      	orrs	r3, r2
 8015dee:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8015df0:	683b      	ldr	r3, [r7, #0]
 8015df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015df4:	693a      	ldr	r2, [r7, #16]
 8015df6:	4313      	orrs	r3, r2
 8015df8:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8015dfa:	683b      	ldr	r3, [r7, #0]
 8015dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015dfe:	693a      	ldr	r2, [r7, #16]
 8015e00:	4313      	orrs	r3, r2
 8015e02:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8015e04:	4b20      	ldr	r3, [pc, #128]	; (8015e88 <FMC_NORSRAM_Init+0x11c>)
 8015e06:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015e0e:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015e16:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8015e1e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8015e20:	683b      	ldr	r3, [r7, #0]
 8015e22:	681a      	ldr	r2, [r3, #0]
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	43db      	mvns	r3, r3
 8015e2e:	ea02 0103 	and.w	r1, r2, r3
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	681a      	ldr	r2, [r3, #0]
 8015e36:	693b      	ldr	r3, [r7, #16]
 8015e38:	4319      	orrs	r1, r3
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015e48:	d10c      	bne.n	8015e64 <FMC_NORSRAM_Init+0xf8>
 8015e4a:	683b      	ldr	r3, [r7, #0]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d008      	beq.n	8015e64 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8015e5a:	683b      	ldr	r3, [r7, #0]
 8015e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e5e:	431a      	orrs	r2, r3
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8015e64:	683b      	ldr	r3, [r7, #0]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d006      	beq.n	8015e7a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	681a      	ldr	r2, [r3, #0]
 8015e70:	683b      	ldr	r3, [r7, #0]
 8015e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e74:	431a      	orrs	r2, r3
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8015e7a:	2300      	movs	r3, #0
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	371c      	adds	r7, #28
 8015e80:	46bd      	mov	sp, r7
 8015e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e86:	4770      	bx	lr
 8015e88:	0008fb7f 	.word	0x0008fb7f

08015e8c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8015e8c:	b480      	push	{r7}
 8015e8e:	b087      	sub	sp, #28
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	60f8      	str	r0, [r7, #12]
 8015e94:	60b9      	str	r1, [r7, #8]
 8015e96:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	1c5a      	adds	r2, r3, #1
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ea2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8015ea6:	68bb      	ldr	r3, [r7, #8]
 8015ea8:	681a      	ldr	r2, [r3, #0]
 8015eaa:	68bb      	ldr	r3, [r7, #8]
 8015eac:	685b      	ldr	r3, [r3, #4]
 8015eae:	011b      	lsls	r3, r3, #4
 8015eb0:	431a      	orrs	r2, r3
 8015eb2:	68bb      	ldr	r3, [r7, #8]
 8015eb4:	689b      	ldr	r3, [r3, #8]
 8015eb6:	021b      	lsls	r3, r3, #8
 8015eb8:	431a      	orrs	r2, r3
 8015eba:	68bb      	ldr	r3, [r7, #8]
 8015ebc:	691b      	ldr	r3, [r3, #16]
 8015ebe:	041b      	lsls	r3, r3, #16
 8015ec0:	431a      	orrs	r2, r3
 8015ec2:	68bb      	ldr	r3, [r7, #8]
 8015ec4:	695b      	ldr	r3, [r3, #20]
 8015ec6:	3b01      	subs	r3, #1
 8015ec8:	051b      	lsls	r3, r3, #20
 8015eca:	431a      	orrs	r2, r3
 8015ecc:	68bb      	ldr	r3, [r7, #8]
 8015ece:	699b      	ldr	r3, [r3, #24]
 8015ed0:	3b02      	subs	r3, #2
 8015ed2:	061b      	lsls	r3, r3, #24
 8015ed4:	431a      	orrs	r2, r3
 8015ed6:	68bb      	ldr	r3, [r7, #8]
 8015ed8:	69db      	ldr	r3, [r3, #28]
 8015eda:	4313      	orrs	r3, r2
 8015edc:	687a      	ldr	r2, [r7, #4]
 8015ede:	3201      	adds	r2, #1
 8015ee0:	4319      	orrs	r1, r3
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015ef4:	d113      	bne.n	8015f1e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	685b      	ldr	r3, [r3, #4]
 8015efa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8015efe:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8015f00:	68bb      	ldr	r3, [r7, #8]
 8015f02:	695b      	ldr	r3, [r3, #20]
 8015f04:	3b01      	subs	r3, #1
 8015f06:	051b      	lsls	r3, r3, #20
 8015f08:	697a      	ldr	r2, [r7, #20]
 8015f0a:	4313      	orrs	r3, r2
 8015f0c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	685b      	ldr	r3, [r3, #4]
 8015f12:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8015f16:	697b      	ldr	r3, [r7, #20]
 8015f18:	431a      	orrs	r2, r3
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8015f1e:	2300      	movs	r3, #0
}
 8015f20:	4618      	mov	r0, r3
 8015f22:	371c      	adds	r7, #28
 8015f24:	46bd      	mov	sp, r7
 8015f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2a:	4770      	bx	lr

08015f2c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8015f2c:	b480      	push	{r7}
 8015f2e:	b085      	sub	sp, #20
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	60f8      	str	r0, [r7, #12]
 8015f34:	60b9      	str	r1, [r7, #8]
 8015f36:	607a      	str	r2, [r7, #4]
 8015f38:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015f40:	d11d      	bne.n	8015f7e <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	687a      	ldr	r2, [r7, #4]
 8015f46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015f4a:	4b13      	ldr	r3, [pc, #76]	; (8015f98 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8015f4c:	4013      	ands	r3, r2
 8015f4e:	68ba      	ldr	r2, [r7, #8]
 8015f50:	6811      	ldr	r1, [r2, #0]
 8015f52:	68ba      	ldr	r2, [r7, #8]
 8015f54:	6852      	ldr	r2, [r2, #4]
 8015f56:	0112      	lsls	r2, r2, #4
 8015f58:	4311      	orrs	r1, r2
 8015f5a:	68ba      	ldr	r2, [r7, #8]
 8015f5c:	6892      	ldr	r2, [r2, #8]
 8015f5e:	0212      	lsls	r2, r2, #8
 8015f60:	4311      	orrs	r1, r2
 8015f62:	68ba      	ldr	r2, [r7, #8]
 8015f64:	69d2      	ldr	r2, [r2, #28]
 8015f66:	4311      	orrs	r1, r2
 8015f68:	68ba      	ldr	r2, [r7, #8]
 8015f6a:	6912      	ldr	r2, [r2, #16]
 8015f6c:	0412      	lsls	r2, r2, #16
 8015f6e:	430a      	orrs	r2, r1
 8015f70:	ea43 0102 	orr.w	r1, r3, r2
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	687a      	ldr	r2, [r7, #4]
 8015f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8015f7c:	e005      	b.n	8015f8a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	687a      	ldr	r2, [r7, #4]
 8015f82:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8015f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8015f8a:	2300      	movs	r3, #0
}
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	3714      	adds	r7, #20
 8015f90:	46bd      	mov	sp, r7
 8015f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f96:	4770      	bx	lr
 8015f98:	cff00000 	.word	0xcff00000

08015f9c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8015f9c:	b084      	sub	sp, #16
 8015f9e:	b480      	push	{r7}
 8015fa0:	b085      	sub	sp, #20
 8015fa2:	af00      	add	r7, sp, #0
 8015fa4:	6078      	str	r0, [r7, #4]
 8015fa6:	f107 001c 	add.w	r0, r7, #28
 8015faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8015fb2:	6a3b      	ldr	r3, [r7, #32]
 8015fb4:	68fa      	ldr	r2, [r7, #12]
 8015fb6:	4313      	orrs	r3, r2
 8015fb8:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8015fba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8015fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8015fbe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8015fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8015fc2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8015fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8015fc6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8015fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8015fca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8015fcc:	68fa      	ldr	r2, [r7, #12]
 8015fce:	4313      	orrs	r3, r2
 8015fd0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	685b      	ldr	r3, [r3, #4]
 8015fd6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8015fda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015fde:	68fa      	ldr	r2, [r7, #12]
 8015fe0:	431a      	orrs	r2, r3
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8015fe6:	2300      	movs	r3, #0
}
 8015fe8:	4618      	mov	r0, r3
 8015fea:	3714      	adds	r7, #20
 8015fec:	46bd      	mov	sp, r7
 8015fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff2:	b004      	add	sp, #16
 8015ff4:	4770      	bx	lr

08015ff6 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8015ff6:	b480      	push	{r7}
 8015ff8:	b083      	sub	sp, #12
 8015ffa:	af00      	add	r7, sp, #0
 8015ffc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8016004:	4618      	mov	r0, r3
 8016006:	370c      	adds	r7, #12
 8016008:	46bd      	mov	sp, r7
 801600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600e:	4770      	bx	lr

08016010 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b082      	sub	sp, #8
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	2203      	movs	r2, #3
 801601c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 801601e:	2002      	movs	r0, #2
 8016020:	f7f6 f838 	bl	800c094 <HAL_Delay>

  return HAL_OK;
 8016024:	2300      	movs	r3, #0
}
 8016026:	4618      	mov	r0, r3
 8016028:	3708      	adds	r7, #8
 801602a:	46bd      	mov	sp, r7
 801602c:	bd80      	pop	{r7, pc}

0801602e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801602e:	b480      	push	{r7}
 8016030:	b083      	sub	sp, #12
 8016032:	af00      	add	r7, sp, #0
 8016034:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	f003 0303 	and.w	r3, r3, #3
}
 801603e:	4618      	mov	r0, r3
 8016040:	370c      	adds	r7, #12
 8016042:	46bd      	mov	sp, r7
 8016044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016048:	4770      	bx	lr

0801604a <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801604a:	b480      	push	{r7}
 801604c:	b085      	sub	sp, #20
 801604e:	af00      	add	r7, sp, #0
 8016050:	6078      	str	r0, [r7, #4]
 8016052:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8016054:	2300      	movs	r3, #0
 8016056:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8016058:	683b      	ldr	r3, [r7, #0]
 801605a:	681a      	ldr	r2, [r3, #0]
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8016060:	683b      	ldr	r3, [r7, #0]
 8016062:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8016064:	683b      	ldr	r3, [r7, #0]
 8016066:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8016068:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801606a:	683b      	ldr	r3, [r7, #0]
 801606c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 801606e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8016070:	683b      	ldr	r3, [r7, #0]
 8016072:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8016074:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8016076:	68fa      	ldr	r2, [r7, #12]
 8016078:	4313      	orrs	r3, r2
 801607a:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	68db      	ldr	r3, [r3, #12]
 8016080:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016084:	f023 030f 	bic.w	r3, r3, #15
 8016088:	68fa      	ldr	r2, [r7, #12]
 801608a:	431a      	orrs	r2, r3
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8016090:	2300      	movs	r3, #0
}
 8016092:	4618      	mov	r0, r3
 8016094:	3714      	adds	r7, #20
 8016096:	46bd      	mov	sp, r7
 8016098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609c:	4770      	bx	lr

0801609e <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801609e:	b480      	push	{r7}
 80160a0:	b083      	sub	sp, #12
 80160a2:	af00      	add	r7, sp, #0
 80160a4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	691b      	ldr	r3, [r3, #16]
 80160aa:	b2db      	uxtb	r3, r3
}
 80160ac:	4618      	mov	r0, r3
 80160ae:	370c      	adds	r7, #12
 80160b0:	46bd      	mov	sp, r7
 80160b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b6:	4770      	bx	lr

080160b8 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80160b8:	b480      	push	{r7}
 80160ba:	b085      	sub	sp, #20
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
 80160c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	3314      	adds	r3, #20
 80160c6:	461a      	mov	r2, r3
 80160c8:	683b      	ldr	r3, [r7, #0]
 80160ca:	4413      	add	r3, r2
 80160cc:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	681b      	ldr	r3, [r3, #0]
}
 80160d2:	4618      	mov	r0, r3
 80160d4:	3714      	adds	r7, #20
 80160d6:	46bd      	mov	sp, r7
 80160d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160dc:	4770      	bx	lr

080160de <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80160de:	b480      	push	{r7}
 80160e0:	b085      	sub	sp, #20
 80160e2:	af00      	add	r7, sp, #0
 80160e4:	6078      	str	r0, [r7, #4]
 80160e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80160e8:	2300      	movs	r3, #0
 80160ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	681a      	ldr	r2, [r3, #0]
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80160f4:	683b      	ldr	r3, [r7, #0]
 80160f6:	685a      	ldr	r2, [r3, #4]
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80160fc:	683b      	ldr	r3, [r7, #0]
 80160fe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8016100:	683b      	ldr	r3, [r7, #0]
 8016102:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8016104:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8016106:	683b      	ldr	r3, [r7, #0]
 8016108:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801610a:	431a      	orrs	r2, r3
                       Data->DPSM);
 801610c:	683b      	ldr	r3, [r7, #0]
 801610e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8016110:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8016112:	68fa      	ldr	r2, [r7, #12]
 8016114:	4313      	orrs	r3, r2
 8016116:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801611c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	431a      	orrs	r2, r3
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8016128:	2300      	movs	r3, #0

}
 801612a:	4618      	mov	r0, r3
 801612c:	3714      	adds	r7, #20
 801612e:	46bd      	mov	sp, r7
 8016130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016134:	4770      	bx	lr

08016136 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8016136:	b580      	push	{r7, lr}
 8016138:	b088      	sub	sp, #32
 801613a:	af00      	add	r7, sp, #0
 801613c:	6078      	str	r0, [r7, #4]
 801613e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8016140:	683b      	ldr	r3, [r7, #0]
 8016142:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8016144:	2310      	movs	r3, #16
 8016146:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8016148:	2340      	movs	r3, #64	; 0x40
 801614a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801614c:	2300      	movs	r3, #0
 801614e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016154:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8016156:	f107 0308 	add.w	r3, r7, #8
 801615a:	4619      	mov	r1, r3
 801615c:	6878      	ldr	r0, [r7, #4]
 801615e:	f7ff ff74 	bl	801604a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8016162:	f241 3288 	movw	r2, #5000	; 0x1388
 8016166:	2110      	movs	r1, #16
 8016168:	6878      	ldr	r0, [r7, #4]
 801616a:	f000 f94d 	bl	8016408 <SDMMC_GetCmdResp1>
 801616e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016170:	69fb      	ldr	r3, [r7, #28]
}
 8016172:	4618      	mov	r0, r3
 8016174:	3720      	adds	r7, #32
 8016176:	46bd      	mov	sp, r7
 8016178:	bd80      	pop	{r7, pc}

0801617a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 801617a:	b580      	push	{r7, lr}
 801617c:	b08a      	sub	sp, #40	; 0x28
 801617e:	af00      	add	r7, sp, #0
 8016180:	60f8      	str	r0, [r7, #12]
 8016182:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801618a:	2307      	movs	r3, #7
 801618c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801618e:	2340      	movs	r3, #64	; 0x40
 8016190:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8016192:	2300      	movs	r3, #0
 8016194:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801619a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801619c:	f107 0310 	add.w	r3, r7, #16
 80161a0:	4619      	mov	r1, r3
 80161a2:	68f8      	ldr	r0, [r7, #12]
 80161a4:	f7ff ff51 	bl	801604a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80161a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80161ac:	2107      	movs	r1, #7
 80161ae:	68f8      	ldr	r0, [r7, #12]
 80161b0:	f000 f92a 	bl	8016408 <SDMMC_GetCmdResp1>
 80161b4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80161b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80161b8:	4618      	mov	r0, r3
 80161ba:	3728      	adds	r7, #40	; 0x28
 80161bc:	46bd      	mov	sp, r7
 80161be:	bd80      	pop	{r7, pc}

080161c0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b088      	sub	sp, #32
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80161c8:	2300      	movs	r3, #0
 80161ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80161cc:	2300      	movs	r3, #0
 80161ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80161d0:	2300      	movs	r3, #0
 80161d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80161d4:	2300      	movs	r3, #0
 80161d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80161d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80161dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80161de:	f107 0308 	add.w	r3, r7, #8
 80161e2:	4619      	mov	r1, r3
 80161e4:	6878      	ldr	r0, [r7, #4]
 80161e6:	f7ff ff30 	bl	801604a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f000 fb44 	bl	8016878 <SDMMC_GetCmdError>
 80161f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80161f2:	69fb      	ldr	r3, [r7, #28]
}
 80161f4:	4618      	mov	r0, r3
 80161f6:	3720      	adds	r7, #32
 80161f8:	46bd      	mov	sp, r7
 80161fa:	bd80      	pop	{r7, pc}

080161fc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80161fc:	b580      	push	{r7, lr}
 80161fe:	b088      	sub	sp, #32
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8016204:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8016208:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801620a:	2308      	movs	r3, #8
 801620c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801620e:	2340      	movs	r3, #64	; 0x40
 8016210:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8016212:	2300      	movs	r3, #0
 8016214:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801621a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801621c:	f107 0308 	add.w	r3, r7, #8
 8016220:	4619      	mov	r1, r3
 8016222:	6878      	ldr	r0, [r7, #4]
 8016224:	f7ff ff11 	bl	801604a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f000 fad7 	bl	80167dc <SDMMC_GetCmdResp7>
 801622e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016230:	69fb      	ldr	r3, [r7, #28]
}
 8016232:	4618      	mov	r0, r3
 8016234:	3720      	adds	r7, #32
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}

0801623a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801623a:	b580      	push	{r7, lr}
 801623c:	b088      	sub	sp, #32
 801623e:	af00      	add	r7, sp, #0
 8016240:	6078      	str	r0, [r7, #4]
 8016242:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8016244:	683b      	ldr	r3, [r7, #0]
 8016246:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8016248:	2337      	movs	r3, #55	; 0x37
 801624a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801624c:	2340      	movs	r3, #64	; 0x40
 801624e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8016250:	2300      	movs	r3, #0
 8016252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016258:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801625a:	f107 0308 	add.w	r3, r7, #8
 801625e:	4619      	mov	r1, r3
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	f7ff fef2 	bl	801604a <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8016266:	f241 3288 	movw	r2, #5000	; 0x1388
 801626a:	2137      	movs	r1, #55	; 0x37
 801626c:	6878      	ldr	r0, [r7, #4]
 801626e:	f000 f8cb 	bl	8016408 <SDMMC_GetCmdResp1>
 8016272:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016274:	69fb      	ldr	r3, [r7, #28]
}
 8016276:	4618      	mov	r0, r3
 8016278:	3720      	adds	r7, #32
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}

0801627e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801627e:	b580      	push	{r7, lr}
 8016280:	b088      	sub	sp, #32
 8016282:	af00      	add	r7, sp, #0
 8016284:	6078      	str	r0, [r7, #4]
 8016286:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8016288:	683b      	ldr	r3, [r7, #0]
 801628a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801628e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016292:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8016294:	2329      	movs	r3, #41	; 0x29
 8016296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8016298:	2340      	movs	r3, #64	; 0x40
 801629a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801629c:	2300      	movs	r3, #0
 801629e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80162a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80162a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80162a6:	f107 0308 	add.w	r3, r7, #8
 80162aa:	4619      	mov	r1, r3
 80162ac:	6878      	ldr	r0, [r7, #4]
 80162ae:	f7ff fecc 	bl	801604a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80162b2:	6878      	ldr	r0, [r7, #4]
 80162b4:	f000 f9de 	bl	8016674 <SDMMC_GetCmdResp3>
 80162b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80162ba:	69fb      	ldr	r3, [r7, #28]
}
 80162bc:	4618      	mov	r0, r3
 80162be:	3720      	adds	r7, #32
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd80      	pop	{r7, pc}

080162c4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b088      	sub	sp, #32
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	6078      	str	r0, [r7, #4]
 80162cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80162ce:	683b      	ldr	r3, [r7, #0]
 80162d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80162d2:	2306      	movs	r3, #6
 80162d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80162d6:	2340      	movs	r3, #64	; 0x40
 80162d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80162da:	2300      	movs	r3, #0
 80162dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80162de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80162e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80162e4:	f107 0308 	add.w	r3, r7, #8
 80162e8:	4619      	mov	r1, r3
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	f7ff fead 	bl	801604a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80162f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80162f4:	2106      	movs	r1, #6
 80162f6:	6878      	ldr	r0, [r7, #4]
 80162f8:	f000 f886 	bl	8016408 <SDMMC_GetCmdResp1>
 80162fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80162fe:	69fb      	ldr	r3, [r7, #28]
}
 8016300:	4618      	mov	r0, r3
 8016302:	3720      	adds	r7, #32
 8016304:	46bd      	mov	sp, r7
 8016306:	bd80      	pop	{r7, pc}

08016308 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b088      	sub	sp, #32
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8016310:	2300      	movs	r3, #0
 8016312:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8016314:	2333      	movs	r3, #51	; 0x33
 8016316:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8016318:	2340      	movs	r3, #64	; 0x40
 801631a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801631c:	2300      	movs	r3, #0
 801631e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016324:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8016326:	f107 0308 	add.w	r3, r7, #8
 801632a:	4619      	mov	r1, r3
 801632c:	6878      	ldr	r0, [r7, #4]
 801632e:	f7ff fe8c 	bl	801604a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8016332:	f241 3288 	movw	r2, #5000	; 0x1388
 8016336:	2133      	movs	r1, #51	; 0x33
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f000 f865 	bl	8016408 <SDMMC_GetCmdResp1>
 801633e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8016340:	69fb      	ldr	r3, [r7, #28]
}
 8016342:	4618      	mov	r0, r3
 8016344:	3720      	adds	r7, #32
 8016346:	46bd      	mov	sp, r7
 8016348:	bd80      	pop	{r7, pc}

0801634a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801634a:	b580      	push	{r7, lr}
 801634c:	b088      	sub	sp, #32
 801634e:	af00      	add	r7, sp, #0
 8016350:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8016352:	2300      	movs	r3, #0
 8016354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8016356:	2302      	movs	r3, #2
 8016358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801635a:	23c0      	movs	r3, #192	; 0xc0
 801635c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801635e:	2300      	movs	r3, #0
 8016360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016366:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8016368:	f107 0308 	add.w	r3, r7, #8
 801636c:	4619      	mov	r1, r3
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	f7ff fe6b 	bl	801604a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	f000 f935 	bl	80165e4 <SDMMC_GetCmdResp2>
 801637a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801637c:	69fb      	ldr	r3, [r7, #28]
}
 801637e:	4618      	mov	r0, r3
 8016380:	3720      	adds	r7, #32
 8016382:	46bd      	mov	sp, r7
 8016384:	bd80      	pop	{r7, pc}

08016386 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8016386:	b580      	push	{r7, lr}
 8016388:	b088      	sub	sp, #32
 801638a:	af00      	add	r7, sp, #0
 801638c:	6078      	str	r0, [r7, #4]
 801638e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8016390:	683b      	ldr	r3, [r7, #0]
 8016392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8016394:	2309      	movs	r3, #9
 8016396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8016398:	23c0      	movs	r3, #192	; 0xc0
 801639a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801639c:	2300      	movs	r3, #0
 801639e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80163a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80163a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80163a6:	f107 0308 	add.w	r3, r7, #8
 80163aa:	4619      	mov	r1, r3
 80163ac:	6878      	ldr	r0, [r7, #4]
 80163ae:	f7ff fe4c 	bl	801604a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80163b2:	6878      	ldr	r0, [r7, #4]
 80163b4:	f000 f916 	bl	80165e4 <SDMMC_GetCmdResp2>
 80163b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80163ba:	69fb      	ldr	r3, [r7, #28]
}
 80163bc:	4618      	mov	r0, r3
 80163be:	3720      	adds	r7, #32
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}

080163c4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b088      	sub	sp, #32
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80163ce:	2300      	movs	r3, #0
 80163d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80163d2:	2303      	movs	r3, #3
 80163d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80163d6:	2340      	movs	r3, #64	; 0x40
 80163d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80163da:	2300      	movs	r3, #0
 80163dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80163de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80163e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80163e4:	f107 0308 	add.w	r3, r7, #8
 80163e8:	4619      	mov	r1, r3
 80163ea:	6878      	ldr	r0, [r7, #4]
 80163ec:	f7ff fe2d 	bl	801604a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80163f0:	683a      	ldr	r2, [r7, #0]
 80163f2:	2103      	movs	r1, #3
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f000 f97b 	bl	80166f0 <SDMMC_GetCmdResp6>
 80163fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80163fc:	69fb      	ldr	r3, [r7, #28]
}
 80163fe:	4618      	mov	r0, r3
 8016400:	3720      	adds	r7, #32
 8016402:	46bd      	mov	sp, r7
 8016404:	bd80      	pop	{r7, pc}
	...

08016408 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b088      	sub	sp, #32
 801640c:	af00      	add	r7, sp, #0
 801640e:	60f8      	str	r0, [r7, #12]
 8016410:	460b      	mov	r3, r1
 8016412:	607a      	str	r2, [r7, #4]
 8016414:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016416:	4b70      	ldr	r3, [pc, #448]	; (80165d8 <SDMMC_GetCmdResp1+0x1d0>)
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	4a70      	ldr	r2, [pc, #448]	; (80165dc <SDMMC_GetCmdResp1+0x1d4>)
 801641c:	fba2 2303 	umull	r2, r3, r2, r3
 8016420:	0a5a      	lsrs	r2, r3, #9
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	fb02 f303 	mul.w	r3, r2, r3
 8016428:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801642a:	69fb      	ldr	r3, [r7, #28]
 801642c:	1e5a      	subs	r2, r3, #1
 801642e:	61fa      	str	r2, [r7, #28]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d102      	bne.n	801643a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8016434:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016438:	e0c9      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801643e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016440:	69bb      	ldr	r3, [r7, #24]
 8016442:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016446:	2b00      	cmp	r3, #0
 8016448:	d0ef      	beq.n	801642a <SDMMC_GetCmdResp1+0x22>
 801644a:	69bb      	ldr	r3, [r7, #24]
 801644c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016450:	2b00      	cmp	r3, #0
 8016452:	d1ea      	bne.n	801642a <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016458:	f003 0304 	and.w	r3, r3, #4
 801645c:	2b00      	cmp	r3, #0
 801645e:	d004      	beq.n	801646a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	2204      	movs	r2, #4
 8016464:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016466:	2304      	movs	r3, #4
 8016468:	e0b1      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801646e:	f003 0301 	and.w	r3, r3, #1
 8016472:	2b00      	cmp	r3, #0
 8016474:	d004      	beq.n	8016480 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	2201      	movs	r2, #1
 801647a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801647c:	2301      	movs	r3, #1
 801647e:	e0a6      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	22c5      	movs	r2, #197	; 0xc5
 8016484:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016486:	68f8      	ldr	r0, [r7, #12]
 8016488:	f7ff fe09 	bl	801609e <SDMMC_GetCommandResponse>
 801648c:	4603      	mov	r3, r0
 801648e:	461a      	mov	r2, r3
 8016490:	7afb      	ldrb	r3, [r7, #11]
 8016492:	4293      	cmp	r3, r2
 8016494:	d001      	beq.n	801649a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016496:	2301      	movs	r3, #1
 8016498:	e099      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801649a:	2100      	movs	r1, #0
 801649c:	68f8      	ldr	r0, [r7, #12]
 801649e:	f7ff fe0b 	bl	80160b8 <SDMMC_GetResponse>
 80164a2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80164a4:	697a      	ldr	r2, [r7, #20]
 80164a6:	4b4e      	ldr	r3, [pc, #312]	; (80165e0 <SDMMC_GetCmdResp1+0x1d8>)
 80164a8:	4013      	ands	r3, r2
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d101      	bne.n	80164b2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80164ae:	2300      	movs	r3, #0
 80164b0:	e08d      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80164b2:	697b      	ldr	r3, [r7, #20]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	da02      	bge.n	80164be <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80164b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80164bc:	e087      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80164be:	697b      	ldr	r3, [r7, #20]
 80164c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d001      	beq.n	80164cc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80164c8:	2340      	movs	r3, #64	; 0x40
 80164ca:	e080      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80164cc:	697b      	ldr	r3, [r7, #20]
 80164ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d001      	beq.n	80164da <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80164d6:	2380      	movs	r3, #128	; 0x80
 80164d8:	e079      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80164da:	697b      	ldr	r3, [r7, #20]
 80164dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d002      	beq.n	80164ea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80164e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80164e8:	e071      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80164ea:	697b      	ldr	r3, [r7, #20]
 80164ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d002      	beq.n	80164fa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80164f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80164f8:	e069      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80164fa:	697b      	ldr	r3, [r7, #20]
 80164fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8016500:	2b00      	cmp	r3, #0
 8016502:	d002      	beq.n	801650a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8016504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016508:	e061      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801650a:	697b      	ldr	r3, [r7, #20]
 801650c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016510:	2b00      	cmp	r3, #0
 8016512:	d002      	beq.n	801651a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8016514:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016518:	e059      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801651a:	697b      	ldr	r3, [r7, #20]
 801651c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016520:	2b00      	cmp	r3, #0
 8016522:	d002      	beq.n	801652a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8016524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016528:	e051      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801652a:	697b      	ldr	r3, [r7, #20]
 801652c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016530:	2b00      	cmp	r3, #0
 8016532:	d002      	beq.n	801653a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8016534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016538:	e049      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801653a:	697b      	ldr	r3, [r7, #20]
 801653c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016540:	2b00      	cmp	r3, #0
 8016542:	d002      	beq.n	801654a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8016544:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016548:	e041      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801654a:	697b      	ldr	r3, [r7, #20]
 801654c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016550:	2b00      	cmp	r3, #0
 8016552:	d002      	beq.n	801655a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8016554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016558:	e039      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801655a:	697b      	ldr	r3, [r7, #20]
 801655c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016560:	2b00      	cmp	r3, #0
 8016562:	d002      	beq.n	801656a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8016564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016568:	e031      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801656a:	697b      	ldr	r3, [r7, #20]
 801656c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016570:	2b00      	cmp	r3, #0
 8016572:	d002      	beq.n	801657a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8016574:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016578:	e029      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801657a:	697b      	ldr	r3, [r7, #20]
 801657c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016580:	2b00      	cmp	r3, #0
 8016582:	d002      	beq.n	801658a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8016584:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016588:	e021      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801658a:	697b      	ldr	r3, [r7, #20]
 801658c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016590:	2b00      	cmp	r3, #0
 8016592:	d002      	beq.n	801659a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8016594:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8016598:	e019      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801659a:	697b      	ldr	r3, [r7, #20]
 801659c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d002      	beq.n	80165aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80165a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80165a8:	e011      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80165aa:	697b      	ldr	r3, [r7, #20]
 80165ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d002      	beq.n	80165ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80165b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80165b8:	e009      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80165ba:	697b      	ldr	r3, [r7, #20]
 80165bc:	f003 0308 	and.w	r3, r3, #8
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d002      	beq.n	80165ca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80165c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80165c8:	e001      	b.n	80165ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80165ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80165ce:	4618      	mov	r0, r3
 80165d0:	3720      	adds	r7, #32
 80165d2:	46bd      	mov	sp, r7
 80165d4:	bd80      	pop	{r7, pc}
 80165d6:	bf00      	nop
 80165d8:	200001a0 	.word	0x200001a0
 80165dc:	10624dd3 	.word	0x10624dd3
 80165e0:	fdffe008 	.word	0xfdffe008

080165e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80165e4:	b480      	push	{r7}
 80165e6:	b085      	sub	sp, #20
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80165ec:	4b1f      	ldr	r3, [pc, #124]	; (801666c <SDMMC_GetCmdResp2+0x88>)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	4a1f      	ldr	r2, [pc, #124]	; (8016670 <SDMMC_GetCmdResp2+0x8c>)
 80165f2:	fba2 2303 	umull	r2, r3, r2, r3
 80165f6:	0a5b      	lsrs	r3, r3, #9
 80165f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80165fc:	fb02 f303 	mul.w	r3, r2, r3
 8016600:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	1e5a      	subs	r2, r3, #1
 8016606:	60fa      	str	r2, [r7, #12]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d102      	bne.n	8016612 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801660c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016610:	e026      	b.n	8016660 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016616:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016618:	68bb      	ldr	r3, [r7, #8]
 801661a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801661e:	2b00      	cmp	r3, #0
 8016620:	d0ef      	beq.n	8016602 <SDMMC_GetCmdResp2+0x1e>
 8016622:	68bb      	ldr	r3, [r7, #8]
 8016624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016628:	2b00      	cmp	r3, #0
 801662a:	d1ea      	bne.n	8016602 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016630:	f003 0304 	and.w	r3, r3, #4
 8016634:	2b00      	cmp	r3, #0
 8016636:	d004      	beq.n	8016642 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	2204      	movs	r2, #4
 801663c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801663e:	2304      	movs	r3, #4
 8016640:	e00e      	b.n	8016660 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016646:	f003 0301 	and.w	r3, r3, #1
 801664a:	2b00      	cmp	r3, #0
 801664c:	d004      	beq.n	8016658 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	2201      	movs	r2, #1
 8016652:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016654:	2301      	movs	r3, #1
 8016656:	e003      	b.n	8016660 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	22c5      	movs	r2, #197	; 0xc5
 801665c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801665e:	2300      	movs	r3, #0
}
 8016660:	4618      	mov	r0, r3
 8016662:	3714      	adds	r7, #20
 8016664:	46bd      	mov	sp, r7
 8016666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666a:	4770      	bx	lr
 801666c:	200001a0 	.word	0x200001a0
 8016670:	10624dd3 	.word	0x10624dd3

08016674 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8016674:	b480      	push	{r7}
 8016676:	b085      	sub	sp, #20
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801667c:	4b1a      	ldr	r3, [pc, #104]	; (80166e8 <SDMMC_GetCmdResp3+0x74>)
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	4a1a      	ldr	r2, [pc, #104]	; (80166ec <SDMMC_GetCmdResp3+0x78>)
 8016682:	fba2 2303 	umull	r2, r3, r2, r3
 8016686:	0a5b      	lsrs	r3, r3, #9
 8016688:	f241 3288 	movw	r2, #5000	; 0x1388
 801668c:	fb02 f303 	mul.w	r3, r2, r3
 8016690:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	1e5a      	subs	r2, r3, #1
 8016696:	60fa      	str	r2, [r7, #12]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d102      	bne.n	80166a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801669c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80166a0:	e01b      	b.n	80166da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80166a8:	68bb      	ldr	r3, [r7, #8]
 80166aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d0ef      	beq.n	8016692 <SDMMC_GetCmdResp3+0x1e>
 80166b2:	68bb      	ldr	r3, [r7, #8]
 80166b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d1ea      	bne.n	8016692 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166c0:	f003 0304 	and.w	r3, r3, #4
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d004      	beq.n	80166d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2204      	movs	r2, #4
 80166cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80166ce:	2304      	movs	r3, #4
 80166d0:	e003      	b.n	80166da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	22c5      	movs	r2, #197	; 0xc5
 80166d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80166d8:	2300      	movs	r3, #0
}
 80166da:	4618      	mov	r0, r3
 80166dc:	3714      	adds	r7, #20
 80166de:	46bd      	mov	sp, r7
 80166e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e4:	4770      	bx	lr
 80166e6:	bf00      	nop
 80166e8:	200001a0 	.word	0x200001a0
 80166ec:	10624dd3 	.word	0x10624dd3

080166f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b088      	sub	sp, #32
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	60f8      	str	r0, [r7, #12]
 80166f8:	460b      	mov	r3, r1
 80166fa:	607a      	str	r2, [r7, #4]
 80166fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80166fe:	4b35      	ldr	r3, [pc, #212]	; (80167d4 <SDMMC_GetCmdResp6+0xe4>)
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	4a35      	ldr	r2, [pc, #212]	; (80167d8 <SDMMC_GetCmdResp6+0xe8>)
 8016704:	fba2 2303 	umull	r2, r3, r2, r3
 8016708:	0a5b      	lsrs	r3, r3, #9
 801670a:	f241 3288 	movw	r2, #5000	; 0x1388
 801670e:	fb02 f303 	mul.w	r3, r2, r3
 8016712:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8016714:	69fb      	ldr	r3, [r7, #28]
 8016716:	1e5a      	subs	r2, r3, #1
 8016718:	61fa      	str	r2, [r7, #28]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d102      	bne.n	8016724 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801671e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016722:	e052      	b.n	80167ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016728:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801672a:	69bb      	ldr	r3, [r7, #24]
 801672c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016730:	2b00      	cmp	r3, #0
 8016732:	d0ef      	beq.n	8016714 <SDMMC_GetCmdResp6+0x24>
 8016734:	69bb      	ldr	r3, [r7, #24]
 8016736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801673a:	2b00      	cmp	r3, #0
 801673c:	d1ea      	bne.n	8016714 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016742:	f003 0304 	and.w	r3, r3, #4
 8016746:	2b00      	cmp	r3, #0
 8016748:	d004      	beq.n	8016754 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	2204      	movs	r2, #4
 801674e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016750:	2304      	movs	r3, #4
 8016752:	e03a      	b.n	80167ca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016758:	f003 0301 	and.w	r3, r3, #1
 801675c:	2b00      	cmp	r3, #0
 801675e:	d004      	beq.n	801676a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	2201      	movs	r2, #1
 8016764:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016766:	2301      	movs	r3, #1
 8016768:	e02f      	b.n	80167ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801676a:	68f8      	ldr	r0, [r7, #12]
 801676c:	f7ff fc97 	bl	801609e <SDMMC_GetCommandResponse>
 8016770:	4603      	mov	r3, r0
 8016772:	461a      	mov	r2, r3
 8016774:	7afb      	ldrb	r3, [r7, #11]
 8016776:	4293      	cmp	r3, r2
 8016778:	d001      	beq.n	801677e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801677a:	2301      	movs	r3, #1
 801677c:	e025      	b.n	80167ca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	22c5      	movs	r2, #197	; 0xc5
 8016782:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8016784:	2100      	movs	r1, #0
 8016786:	68f8      	ldr	r0, [r7, #12]
 8016788:	f7ff fc96 	bl	80160b8 <SDMMC_GetResponse>
 801678c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801678e:	697b      	ldr	r3, [r7, #20]
 8016790:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8016794:	2b00      	cmp	r3, #0
 8016796:	d106      	bne.n	80167a6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8016798:	697b      	ldr	r3, [r7, #20]
 801679a:	0c1b      	lsrs	r3, r3, #16
 801679c:	b29a      	uxth	r2, r3
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80167a2:	2300      	movs	r3, #0
 80167a4:	e011      	b.n	80167ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80167a6:	697b      	ldr	r3, [r7, #20]
 80167a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d002      	beq.n	80167b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80167b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80167b4:	e009      	b.n	80167ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80167b6:	697b      	ldr	r3, [r7, #20]
 80167b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d002      	beq.n	80167c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80167c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80167c4:	e001      	b.n	80167ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80167c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80167ca:	4618      	mov	r0, r3
 80167cc:	3720      	adds	r7, #32
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}
 80167d2:	bf00      	nop
 80167d4:	200001a0 	.word	0x200001a0
 80167d8:	10624dd3 	.word	0x10624dd3

080167dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80167dc:	b480      	push	{r7}
 80167de:	b085      	sub	sp, #20
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80167e4:	4b22      	ldr	r3, [pc, #136]	; (8016870 <SDMMC_GetCmdResp7+0x94>)
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	4a22      	ldr	r2, [pc, #136]	; (8016874 <SDMMC_GetCmdResp7+0x98>)
 80167ea:	fba2 2303 	umull	r2, r3, r2, r3
 80167ee:	0a5b      	lsrs	r3, r3, #9
 80167f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80167f4:	fb02 f303 	mul.w	r3, r2, r3
 80167f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	1e5a      	subs	r2, r3, #1
 80167fe:	60fa      	str	r2, [r7, #12]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d102      	bne.n	801680a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8016804:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016808:	e02c      	b.n	8016864 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801680e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016810:	68bb      	ldr	r3, [r7, #8]
 8016812:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016816:	2b00      	cmp	r3, #0
 8016818:	d0ef      	beq.n	80167fa <SDMMC_GetCmdResp7+0x1e>
 801681a:	68bb      	ldr	r3, [r7, #8]
 801681c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016820:	2b00      	cmp	r3, #0
 8016822:	d1ea      	bne.n	80167fa <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016828:	f003 0304 	and.w	r3, r3, #4
 801682c:	2b00      	cmp	r3, #0
 801682e:	d004      	beq.n	801683a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	2204      	movs	r2, #4
 8016834:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016836:	2304      	movs	r3, #4
 8016838:	e014      	b.n	8016864 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801683e:	f003 0301 	and.w	r3, r3, #1
 8016842:	2b00      	cmp	r3, #0
 8016844:	d004      	beq.n	8016850 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	2201      	movs	r2, #1
 801684a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801684c:	2301      	movs	r3, #1
 801684e:	e009      	b.n	8016864 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016858:	2b00      	cmp	r3, #0
 801685a:	d002      	beq.n	8016862 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	2240      	movs	r2, #64	; 0x40
 8016860:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8016862:	2300      	movs	r3, #0

}
 8016864:	4618      	mov	r0, r3
 8016866:	3714      	adds	r7, #20
 8016868:	46bd      	mov	sp, r7
 801686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686e:	4770      	bx	lr
 8016870:	200001a0 	.word	0x200001a0
 8016874:	10624dd3 	.word	0x10624dd3

08016878 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8016878:	b480      	push	{r7}
 801687a:	b085      	sub	sp, #20
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016880:	4b11      	ldr	r3, [pc, #68]	; (80168c8 <SDMMC_GetCmdError+0x50>)
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	4a11      	ldr	r2, [pc, #68]	; (80168cc <SDMMC_GetCmdError+0x54>)
 8016886:	fba2 2303 	umull	r2, r3, r2, r3
 801688a:	0a5b      	lsrs	r3, r3, #9
 801688c:	f241 3288 	movw	r2, #5000	; 0x1388
 8016890:	fb02 f303 	mul.w	r3, r2, r3
 8016894:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	1e5a      	subs	r2, r3, #1
 801689a:	60fa      	str	r2, [r7, #12]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d102      	bne.n	80168a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80168a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80168a4:	e009      	b.n	80168ba <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d0f1      	beq.n	8016896 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	22c5      	movs	r2, #197	; 0xc5
 80168b6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80168b8:	2300      	movs	r3, #0
}
 80168ba:	4618      	mov	r0, r3
 80168bc:	3714      	adds	r7, #20
 80168be:	46bd      	mov	sp, r7
 80168c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c4:	4770      	bx	lr
 80168c6:	bf00      	nop
 80168c8:	200001a0 	.word	0x200001a0
 80168cc:	10624dd3 	.word	0x10624dd3

080168d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80168d0:	b084      	sub	sp, #16
 80168d2:	b580      	push	{r7, lr}
 80168d4:	b084      	sub	sp, #16
 80168d6:	af00      	add	r7, sp, #0
 80168d8:	6078      	str	r0, [r7, #4]
 80168da:	f107 001c 	add.w	r0, r7, #28
 80168de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	68db      	ldr	r3, [r3, #12]
 80168e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f001 faf6 	bl	8017ee0 <USB_CoreReset>
 80168f4:	4603      	mov	r3, r0
 80168f6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80168f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d106      	bne.n	801690c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016902:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	639a      	str	r2, [r3, #56]	; 0x38
 801690a:	e005      	b.n	8016918 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016910:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8016918:	7bfb      	ldrb	r3, [r7, #15]
}
 801691a:	4618      	mov	r0, r3
 801691c:	3710      	adds	r7, #16
 801691e:	46bd      	mov	sp, r7
 8016920:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016924:	b004      	add	sp, #16
 8016926:	4770      	bx	lr

08016928 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8016928:	b480      	push	{r7}
 801692a:	b087      	sub	sp, #28
 801692c:	af00      	add	r7, sp, #0
 801692e:	60f8      	str	r0, [r7, #12]
 8016930:	60b9      	str	r1, [r7, #8]
 8016932:	4613      	mov	r3, r2
 8016934:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8016936:	79fb      	ldrb	r3, [r7, #7]
 8016938:	2b02      	cmp	r3, #2
 801693a:	d165      	bne.n	8016a08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801693c:	68bb      	ldr	r3, [r7, #8]
 801693e:	4a3e      	ldr	r2, [pc, #248]	; (8016a38 <USB_SetTurnaroundTime+0x110>)
 8016940:	4293      	cmp	r3, r2
 8016942:	d906      	bls.n	8016952 <USB_SetTurnaroundTime+0x2a>
 8016944:	68bb      	ldr	r3, [r7, #8]
 8016946:	4a3d      	ldr	r2, [pc, #244]	; (8016a3c <USB_SetTurnaroundTime+0x114>)
 8016948:	4293      	cmp	r3, r2
 801694a:	d202      	bcs.n	8016952 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801694c:	230f      	movs	r3, #15
 801694e:	617b      	str	r3, [r7, #20]
 8016950:	e05c      	b.n	8016a0c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8016952:	68bb      	ldr	r3, [r7, #8]
 8016954:	4a39      	ldr	r2, [pc, #228]	; (8016a3c <USB_SetTurnaroundTime+0x114>)
 8016956:	4293      	cmp	r3, r2
 8016958:	d306      	bcc.n	8016968 <USB_SetTurnaroundTime+0x40>
 801695a:	68bb      	ldr	r3, [r7, #8]
 801695c:	4a38      	ldr	r2, [pc, #224]	; (8016a40 <USB_SetTurnaroundTime+0x118>)
 801695e:	4293      	cmp	r3, r2
 8016960:	d202      	bcs.n	8016968 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8016962:	230e      	movs	r3, #14
 8016964:	617b      	str	r3, [r7, #20]
 8016966:	e051      	b.n	8016a0c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8016968:	68bb      	ldr	r3, [r7, #8]
 801696a:	4a35      	ldr	r2, [pc, #212]	; (8016a40 <USB_SetTurnaroundTime+0x118>)
 801696c:	4293      	cmp	r3, r2
 801696e:	d306      	bcc.n	801697e <USB_SetTurnaroundTime+0x56>
 8016970:	68bb      	ldr	r3, [r7, #8]
 8016972:	4a34      	ldr	r2, [pc, #208]	; (8016a44 <USB_SetTurnaroundTime+0x11c>)
 8016974:	4293      	cmp	r3, r2
 8016976:	d202      	bcs.n	801697e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8016978:	230d      	movs	r3, #13
 801697a:	617b      	str	r3, [r7, #20]
 801697c:	e046      	b.n	8016a0c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	4a30      	ldr	r2, [pc, #192]	; (8016a44 <USB_SetTurnaroundTime+0x11c>)
 8016982:	4293      	cmp	r3, r2
 8016984:	d306      	bcc.n	8016994 <USB_SetTurnaroundTime+0x6c>
 8016986:	68bb      	ldr	r3, [r7, #8]
 8016988:	4a2f      	ldr	r2, [pc, #188]	; (8016a48 <USB_SetTurnaroundTime+0x120>)
 801698a:	4293      	cmp	r3, r2
 801698c:	d802      	bhi.n	8016994 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801698e:	230c      	movs	r3, #12
 8016990:	617b      	str	r3, [r7, #20]
 8016992:	e03b      	b.n	8016a0c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8016994:	68bb      	ldr	r3, [r7, #8]
 8016996:	4a2c      	ldr	r2, [pc, #176]	; (8016a48 <USB_SetTurnaroundTime+0x120>)
 8016998:	4293      	cmp	r3, r2
 801699a:	d906      	bls.n	80169aa <USB_SetTurnaroundTime+0x82>
 801699c:	68bb      	ldr	r3, [r7, #8]
 801699e:	4a2b      	ldr	r2, [pc, #172]	; (8016a4c <USB_SetTurnaroundTime+0x124>)
 80169a0:	4293      	cmp	r3, r2
 80169a2:	d802      	bhi.n	80169aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80169a4:	230b      	movs	r3, #11
 80169a6:	617b      	str	r3, [r7, #20]
 80169a8:	e030      	b.n	8016a0c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80169aa:	68bb      	ldr	r3, [r7, #8]
 80169ac:	4a27      	ldr	r2, [pc, #156]	; (8016a4c <USB_SetTurnaroundTime+0x124>)
 80169ae:	4293      	cmp	r3, r2
 80169b0:	d906      	bls.n	80169c0 <USB_SetTurnaroundTime+0x98>
 80169b2:	68bb      	ldr	r3, [r7, #8]
 80169b4:	4a26      	ldr	r2, [pc, #152]	; (8016a50 <USB_SetTurnaroundTime+0x128>)
 80169b6:	4293      	cmp	r3, r2
 80169b8:	d802      	bhi.n	80169c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80169ba:	230a      	movs	r3, #10
 80169bc:	617b      	str	r3, [r7, #20]
 80169be:	e025      	b.n	8016a0c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80169c0:	68bb      	ldr	r3, [r7, #8]
 80169c2:	4a23      	ldr	r2, [pc, #140]	; (8016a50 <USB_SetTurnaroundTime+0x128>)
 80169c4:	4293      	cmp	r3, r2
 80169c6:	d906      	bls.n	80169d6 <USB_SetTurnaroundTime+0xae>
 80169c8:	68bb      	ldr	r3, [r7, #8]
 80169ca:	4a22      	ldr	r2, [pc, #136]	; (8016a54 <USB_SetTurnaroundTime+0x12c>)
 80169cc:	4293      	cmp	r3, r2
 80169ce:	d202      	bcs.n	80169d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80169d0:	2309      	movs	r3, #9
 80169d2:	617b      	str	r3, [r7, #20]
 80169d4:	e01a      	b.n	8016a0c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	4a1e      	ldr	r2, [pc, #120]	; (8016a54 <USB_SetTurnaroundTime+0x12c>)
 80169da:	4293      	cmp	r3, r2
 80169dc:	d306      	bcc.n	80169ec <USB_SetTurnaroundTime+0xc4>
 80169de:	68bb      	ldr	r3, [r7, #8]
 80169e0:	4a1d      	ldr	r2, [pc, #116]	; (8016a58 <USB_SetTurnaroundTime+0x130>)
 80169e2:	4293      	cmp	r3, r2
 80169e4:	d802      	bhi.n	80169ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80169e6:	2308      	movs	r3, #8
 80169e8:	617b      	str	r3, [r7, #20]
 80169ea:	e00f      	b.n	8016a0c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80169ec:	68bb      	ldr	r3, [r7, #8]
 80169ee:	4a1a      	ldr	r2, [pc, #104]	; (8016a58 <USB_SetTurnaroundTime+0x130>)
 80169f0:	4293      	cmp	r3, r2
 80169f2:	d906      	bls.n	8016a02 <USB_SetTurnaroundTime+0xda>
 80169f4:	68bb      	ldr	r3, [r7, #8]
 80169f6:	4a19      	ldr	r2, [pc, #100]	; (8016a5c <USB_SetTurnaroundTime+0x134>)
 80169f8:	4293      	cmp	r3, r2
 80169fa:	d202      	bcs.n	8016a02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80169fc:	2307      	movs	r3, #7
 80169fe:	617b      	str	r3, [r7, #20]
 8016a00:	e004      	b.n	8016a0c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8016a02:	2306      	movs	r3, #6
 8016a04:	617b      	str	r3, [r7, #20]
 8016a06:	e001      	b.n	8016a0c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8016a08:	2309      	movs	r3, #9
 8016a0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	68db      	ldr	r3, [r3, #12]
 8016a10:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	68da      	ldr	r2, [r3, #12]
 8016a1c:	697b      	ldr	r3, [r7, #20]
 8016a1e:	029b      	lsls	r3, r3, #10
 8016a20:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8016a24:	431a      	orrs	r2, r3
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8016a2a:	2300      	movs	r3, #0
}
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	371c      	adds	r7, #28
 8016a30:	46bd      	mov	sp, r7
 8016a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a36:	4770      	bx	lr
 8016a38:	00d8acbf 	.word	0x00d8acbf
 8016a3c:	00e4e1c0 	.word	0x00e4e1c0
 8016a40:	00f42400 	.word	0x00f42400
 8016a44:	01067380 	.word	0x01067380
 8016a48:	011a499f 	.word	0x011a499f
 8016a4c:	01312cff 	.word	0x01312cff
 8016a50:	014ca43f 	.word	0x014ca43f
 8016a54:	016e3600 	.word	0x016e3600
 8016a58:	01a6ab1f 	.word	0x01a6ab1f
 8016a5c:	01e84800 	.word	0x01e84800

08016a60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8016a60:	b480      	push	{r7}
 8016a62:	b083      	sub	sp, #12
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	689b      	ldr	r3, [r3, #8]
 8016a6c:	f043 0201 	orr.w	r2, r3, #1
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8016a74:	2300      	movs	r3, #0
}
 8016a76:	4618      	mov	r0, r3
 8016a78:	370c      	adds	r7, #12
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a80:	4770      	bx	lr

08016a82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8016a82:	b480      	push	{r7}
 8016a84:	b083      	sub	sp, #12
 8016a86:	af00      	add	r7, sp, #0
 8016a88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	689b      	ldr	r3, [r3, #8]
 8016a8e:	f023 0201 	bic.w	r2, r3, #1
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8016a96:	2300      	movs	r3, #0
}
 8016a98:	4618      	mov	r0, r3
 8016a9a:	370c      	adds	r7, #12
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa2:	4770      	bx	lr

08016aa4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b084      	sub	sp, #16
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
 8016aac:	460b      	mov	r3, r1
 8016aae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	68db      	ldr	r3, [r3, #12]
 8016ab8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8016ac0:	78fb      	ldrb	r3, [r7, #3]
 8016ac2:	2b01      	cmp	r3, #1
 8016ac4:	d115      	bne.n	8016af2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	68db      	ldr	r3, [r3, #12]
 8016aca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8016ad2:	2001      	movs	r0, #1
 8016ad4:	f7f5 fade 	bl	800c094 <HAL_Delay>
      ms++;
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	3301      	adds	r3, #1
 8016adc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	f001 f985 	bl	8017dee <USB_GetMode>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	2b01      	cmp	r3, #1
 8016ae8:	d01e      	beq.n	8016b28 <USB_SetCurrentMode+0x84>
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	2b31      	cmp	r3, #49	; 0x31
 8016aee:	d9f0      	bls.n	8016ad2 <USB_SetCurrentMode+0x2e>
 8016af0:	e01a      	b.n	8016b28 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8016af2:	78fb      	ldrb	r3, [r7, #3]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d115      	bne.n	8016b24 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	68db      	ldr	r3, [r3, #12]
 8016afc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8016b04:	2001      	movs	r0, #1
 8016b06:	f7f5 fac5 	bl	800c094 <HAL_Delay>
      ms++;
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	3301      	adds	r3, #1
 8016b0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8016b10:	6878      	ldr	r0, [r7, #4]
 8016b12:	f001 f96c 	bl	8017dee <USB_GetMode>
 8016b16:	4603      	mov	r3, r0
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d005      	beq.n	8016b28 <USB_SetCurrentMode+0x84>
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	2b31      	cmp	r3, #49	; 0x31
 8016b20:	d9f0      	bls.n	8016b04 <USB_SetCurrentMode+0x60>
 8016b22:	e001      	b.n	8016b28 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8016b24:	2301      	movs	r3, #1
 8016b26:	e005      	b.n	8016b34 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	2b32      	cmp	r3, #50	; 0x32
 8016b2c:	d101      	bne.n	8016b32 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8016b2e:	2301      	movs	r3, #1
 8016b30:	e000      	b.n	8016b34 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8016b32:	2300      	movs	r3, #0
}
 8016b34:	4618      	mov	r0, r3
 8016b36:	3710      	adds	r7, #16
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}

08016b3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8016b3c:	b084      	sub	sp, #16
 8016b3e:	b580      	push	{r7, lr}
 8016b40:	b086      	sub	sp, #24
 8016b42:	af00      	add	r7, sp, #0
 8016b44:	6078      	str	r0, [r7, #4]
 8016b46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8016b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8016b4e:	2300      	movs	r3, #0
 8016b50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8016b56:	2300      	movs	r3, #0
 8016b58:	613b      	str	r3, [r7, #16]
 8016b5a:	e009      	b.n	8016b70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8016b5c:	687a      	ldr	r2, [r7, #4]
 8016b5e:	693b      	ldr	r3, [r7, #16]
 8016b60:	3340      	adds	r3, #64	; 0x40
 8016b62:	009b      	lsls	r3, r3, #2
 8016b64:	4413      	add	r3, r2
 8016b66:	2200      	movs	r2, #0
 8016b68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8016b6a:	693b      	ldr	r3, [r7, #16]
 8016b6c:	3301      	adds	r3, #1
 8016b6e:	613b      	str	r3, [r7, #16]
 8016b70:	693b      	ldr	r3, [r7, #16]
 8016b72:	2b0e      	cmp	r3, #14
 8016b74:	d9f2      	bls.n	8016b5c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8016b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d11c      	bne.n	8016bb6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016b82:	685b      	ldr	r3, [r3, #4]
 8016b84:	68fa      	ldr	r2, [r7, #12]
 8016b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016b8a:	f043 0302 	orr.w	r3, r3, #2
 8016b8e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b94:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	601a      	str	r2, [r3, #0]
 8016bb4:	e005      	b.n	8016bc2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016bc8:	461a      	mov	r2, r3
 8016bca:	2300      	movs	r3, #0
 8016bcc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016bd4:	4619      	mov	r1, r3
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016bdc:	461a      	mov	r2, r3
 8016bde:	680b      	ldr	r3, [r1, #0]
 8016be0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8016be2:	2103      	movs	r1, #3
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f000 f959 	bl	8016e9c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8016bea:	2110      	movs	r1, #16
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f000 f8f1 	bl	8016dd4 <USB_FlushTxFifo>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d001      	beq.n	8016bfc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8016bf8:	2301      	movs	r3, #1
 8016bfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8016bfc:	6878      	ldr	r0, [r7, #4]
 8016bfe:	f000 f91d 	bl	8016e3c <USB_FlushRxFifo>
 8016c02:	4603      	mov	r3, r0
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d001      	beq.n	8016c0c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8016c08:	2301      	movs	r3, #1
 8016c0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c12:	461a      	mov	r2, r3
 8016c14:	2300      	movs	r3, #0
 8016c16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c1e:	461a      	mov	r2, r3
 8016c20:	2300      	movs	r3, #0
 8016c22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c2a:	461a      	mov	r2, r3
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016c30:	2300      	movs	r3, #0
 8016c32:	613b      	str	r3, [r7, #16]
 8016c34:	e043      	b.n	8016cbe <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016c36:	693b      	ldr	r3, [r7, #16]
 8016c38:	015a      	lsls	r2, r3, #5
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	4413      	add	r3, r2
 8016c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016c4c:	d118      	bne.n	8016c80 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8016c4e:	693b      	ldr	r3, [r7, #16]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d10a      	bne.n	8016c6a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8016c54:	693b      	ldr	r3, [r7, #16]
 8016c56:	015a      	lsls	r2, r3, #5
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	4413      	add	r3, r2
 8016c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c60:	461a      	mov	r2, r3
 8016c62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8016c66:	6013      	str	r3, [r2, #0]
 8016c68:	e013      	b.n	8016c92 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8016c6a:	693b      	ldr	r3, [r7, #16]
 8016c6c:	015a      	lsls	r2, r3, #5
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	4413      	add	r3, r2
 8016c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c76:	461a      	mov	r2, r3
 8016c78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8016c7c:	6013      	str	r3, [r2, #0]
 8016c7e:	e008      	b.n	8016c92 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8016c80:	693b      	ldr	r3, [r7, #16]
 8016c82:	015a      	lsls	r2, r3, #5
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	4413      	add	r3, r2
 8016c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c8c:	461a      	mov	r2, r3
 8016c8e:	2300      	movs	r3, #0
 8016c90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8016c92:	693b      	ldr	r3, [r7, #16]
 8016c94:	015a      	lsls	r2, r3, #5
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	4413      	add	r3, r2
 8016c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c9e:	461a      	mov	r2, r3
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8016ca4:	693b      	ldr	r3, [r7, #16]
 8016ca6:	015a      	lsls	r2, r3, #5
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	4413      	add	r3, r2
 8016cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016cb0:	461a      	mov	r2, r3
 8016cb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8016cb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016cb8:	693b      	ldr	r3, [r7, #16]
 8016cba:	3301      	adds	r3, #1
 8016cbc:	613b      	str	r3, [r7, #16]
 8016cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cc0:	693a      	ldr	r2, [r7, #16]
 8016cc2:	429a      	cmp	r2, r3
 8016cc4:	d3b7      	bcc.n	8016c36 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	613b      	str	r3, [r7, #16]
 8016cca:	e043      	b.n	8016d54 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016ccc:	693b      	ldr	r3, [r7, #16]
 8016cce:	015a      	lsls	r2, r3, #5
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	4413      	add	r3, r2
 8016cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016cde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016ce2:	d118      	bne.n	8016d16 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8016ce4:	693b      	ldr	r3, [r7, #16]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d10a      	bne.n	8016d00 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8016cea:	693b      	ldr	r3, [r7, #16]
 8016cec:	015a      	lsls	r2, r3, #5
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	4413      	add	r3, r2
 8016cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8016cfc:	6013      	str	r3, [r2, #0]
 8016cfe:	e013      	b.n	8016d28 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8016d00:	693b      	ldr	r3, [r7, #16]
 8016d02:	015a      	lsls	r2, r3, #5
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	4413      	add	r3, r2
 8016d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d0c:	461a      	mov	r2, r3
 8016d0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8016d12:	6013      	str	r3, [r2, #0]
 8016d14:	e008      	b.n	8016d28 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	015a      	lsls	r2, r3, #5
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	4413      	add	r3, r2
 8016d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d22:	461a      	mov	r2, r3
 8016d24:	2300      	movs	r3, #0
 8016d26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8016d28:	693b      	ldr	r3, [r7, #16]
 8016d2a:	015a      	lsls	r2, r3, #5
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	4413      	add	r3, r2
 8016d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d34:	461a      	mov	r2, r3
 8016d36:	2300      	movs	r3, #0
 8016d38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8016d3a:	693b      	ldr	r3, [r7, #16]
 8016d3c:	015a      	lsls	r2, r3, #5
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	4413      	add	r3, r2
 8016d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d46:	461a      	mov	r2, r3
 8016d48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8016d4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016d4e:	693b      	ldr	r3, [r7, #16]
 8016d50:	3301      	adds	r3, #1
 8016d52:	613b      	str	r3, [r7, #16]
 8016d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d56:	693a      	ldr	r2, [r7, #16]
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d3b7      	bcc.n	8016ccc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016d62:	691b      	ldr	r3, [r3, #16]
 8016d64:	68fa      	ldr	r2, [r7, #12]
 8016d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016d6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016d6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	2200      	movs	r2, #0
 8016d74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8016d7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	699b      	ldr	r3, [r3, #24]
 8016d82:	f043 0210 	orr.w	r2, r3, #16
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	699a      	ldr	r2, [r3, #24]
 8016d8e:	4b10      	ldr	r3, [pc, #64]	; (8016dd0 <USB_DevInit+0x294>)
 8016d90:	4313      	orrs	r3, r2
 8016d92:	687a      	ldr	r2, [r7, #4]
 8016d94:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8016d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d005      	beq.n	8016da8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	699b      	ldr	r3, [r3, #24]
 8016da0:	f043 0208 	orr.w	r2, r3, #8
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8016da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016daa:	2b01      	cmp	r3, #1
 8016dac:	d107      	bne.n	8016dbe <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	699b      	ldr	r3, [r3, #24]
 8016db2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016db6:	f043 0304 	orr.w	r3, r3, #4
 8016dba:	687a      	ldr	r2, [r7, #4]
 8016dbc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8016dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	3718      	adds	r7, #24
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016dca:	b004      	add	sp, #16
 8016dcc:	4770      	bx	lr
 8016dce:	bf00      	nop
 8016dd0:	803c3800 	.word	0x803c3800

08016dd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8016dd4:	b480      	push	{r7}
 8016dd6:	b085      	sub	sp, #20
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	6078      	str	r0, [r7, #4]
 8016ddc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8016dde:	2300      	movs	r3, #0
 8016de0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	3301      	adds	r3, #1
 8016de6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	4a13      	ldr	r2, [pc, #76]	; (8016e38 <USB_FlushTxFifo+0x64>)
 8016dec:	4293      	cmp	r3, r2
 8016dee:	d901      	bls.n	8016df4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8016df0:	2303      	movs	r3, #3
 8016df2:	e01b      	b.n	8016e2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	691b      	ldr	r3, [r3, #16]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	daf2      	bge.n	8016de2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8016e00:	683b      	ldr	r3, [r7, #0]
 8016e02:	019b      	lsls	r3, r3, #6
 8016e04:	f043 0220 	orr.w	r2, r3, #32
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	3301      	adds	r3, #1
 8016e10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	4a08      	ldr	r2, [pc, #32]	; (8016e38 <USB_FlushTxFifo+0x64>)
 8016e16:	4293      	cmp	r3, r2
 8016e18:	d901      	bls.n	8016e1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8016e1a:	2303      	movs	r3, #3
 8016e1c:	e006      	b.n	8016e2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	691b      	ldr	r3, [r3, #16]
 8016e22:	f003 0320 	and.w	r3, r3, #32
 8016e26:	2b20      	cmp	r3, #32
 8016e28:	d0f0      	beq.n	8016e0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8016e2a:	2300      	movs	r3, #0
}
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	3714      	adds	r7, #20
 8016e30:	46bd      	mov	sp, r7
 8016e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e36:	4770      	bx	lr
 8016e38:	00030d40 	.word	0x00030d40

08016e3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8016e3c:	b480      	push	{r7}
 8016e3e:	b085      	sub	sp, #20
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016e44:	2300      	movs	r3, #0
 8016e46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	3301      	adds	r3, #1
 8016e4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	4a11      	ldr	r2, [pc, #68]	; (8016e98 <USB_FlushRxFifo+0x5c>)
 8016e52:	4293      	cmp	r3, r2
 8016e54:	d901      	bls.n	8016e5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8016e56:	2303      	movs	r3, #3
 8016e58:	e018      	b.n	8016e8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	691b      	ldr	r3, [r3, #16]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	daf2      	bge.n	8016e48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8016e62:	2300      	movs	r3, #0
 8016e64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	2210      	movs	r2, #16
 8016e6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	3301      	adds	r3, #1
 8016e70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	4a08      	ldr	r2, [pc, #32]	; (8016e98 <USB_FlushRxFifo+0x5c>)
 8016e76:	4293      	cmp	r3, r2
 8016e78:	d901      	bls.n	8016e7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8016e7a:	2303      	movs	r3, #3
 8016e7c:	e006      	b.n	8016e8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	691b      	ldr	r3, [r3, #16]
 8016e82:	f003 0310 	and.w	r3, r3, #16
 8016e86:	2b10      	cmp	r3, #16
 8016e88:	d0f0      	beq.n	8016e6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8016e8a:	2300      	movs	r3, #0
}
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	3714      	adds	r7, #20
 8016e90:	46bd      	mov	sp, r7
 8016e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e96:	4770      	bx	lr
 8016e98:	00030d40 	.word	0x00030d40

08016e9c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8016e9c:	b480      	push	{r7}
 8016e9e:	b085      	sub	sp, #20
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
 8016ea4:	460b      	mov	r3, r1
 8016ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016eb2:	681a      	ldr	r2, [r3, #0]
 8016eb4:	78fb      	ldrb	r3, [r7, #3]
 8016eb6:	68f9      	ldr	r1, [r7, #12]
 8016eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016ebc:	4313      	orrs	r3, r2
 8016ebe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8016ec0:	2300      	movs	r3, #0
}
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	3714      	adds	r7, #20
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ecc:	4770      	bx	lr

08016ece <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8016ece:	b480      	push	{r7}
 8016ed0:	b087      	sub	sp, #28
 8016ed2:	af00      	add	r7, sp, #0
 8016ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8016eda:	693b      	ldr	r3, [r7, #16]
 8016edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016ee0:	689b      	ldr	r3, [r3, #8]
 8016ee2:	f003 0306 	and.w	r3, r3, #6
 8016ee6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	2b02      	cmp	r3, #2
 8016eec:	d002      	beq.n	8016ef4 <USB_GetDevSpeed+0x26>
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	2b06      	cmp	r3, #6
 8016ef2:	d102      	bne.n	8016efa <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8016ef4:	2302      	movs	r3, #2
 8016ef6:	75fb      	strb	r3, [r7, #23]
 8016ef8:	e001      	b.n	8016efe <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8016efa:	230f      	movs	r3, #15
 8016efc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8016efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	371c      	adds	r7, #28
 8016f04:	46bd      	mov	sp, r7
 8016f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0a:	4770      	bx	lr

08016f0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016f0c:	b480      	push	{r7}
 8016f0e:	b085      	sub	sp, #20
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
 8016f14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016f1a:	683b      	ldr	r3, [r7, #0]
 8016f1c:	781b      	ldrb	r3, [r3, #0]
 8016f1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016f20:	683b      	ldr	r3, [r7, #0]
 8016f22:	785b      	ldrb	r3, [r3, #1]
 8016f24:	2b01      	cmp	r3, #1
 8016f26:	d13a      	bne.n	8016f9e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016f2e:	69da      	ldr	r2, [r3, #28]
 8016f30:	683b      	ldr	r3, [r7, #0]
 8016f32:	781b      	ldrb	r3, [r3, #0]
 8016f34:	f003 030f 	and.w	r3, r3, #15
 8016f38:	2101      	movs	r1, #1
 8016f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8016f3e:	b29b      	uxth	r3, r3
 8016f40:	68f9      	ldr	r1, [r7, #12]
 8016f42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016f46:	4313      	orrs	r3, r2
 8016f48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8016f4a:	68bb      	ldr	r3, [r7, #8]
 8016f4c:	015a      	lsls	r2, r3, #5
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	4413      	add	r3, r2
 8016f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d155      	bne.n	801700c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016f60:	68bb      	ldr	r3, [r7, #8]
 8016f62:	015a      	lsls	r2, r3, #5
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	4413      	add	r3, r2
 8016f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f6c:	681a      	ldr	r2, [r3, #0]
 8016f6e:	683b      	ldr	r3, [r7, #0]
 8016f70:	68db      	ldr	r3, [r3, #12]
 8016f72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8016f76:	683b      	ldr	r3, [r7, #0]
 8016f78:	791b      	ldrb	r3, [r3, #4]
 8016f7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016f7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8016f7e:	68bb      	ldr	r3, [r7, #8]
 8016f80:	059b      	lsls	r3, r3, #22
 8016f82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016f84:	4313      	orrs	r3, r2
 8016f86:	68ba      	ldr	r2, [r7, #8]
 8016f88:	0151      	lsls	r1, r2, #5
 8016f8a:	68fa      	ldr	r2, [r7, #12]
 8016f8c:	440a      	add	r2, r1
 8016f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016f9a:	6013      	str	r3, [r2, #0]
 8016f9c:	e036      	b.n	801700c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016fa4:	69da      	ldr	r2, [r3, #28]
 8016fa6:	683b      	ldr	r3, [r7, #0]
 8016fa8:	781b      	ldrb	r3, [r3, #0]
 8016faa:	f003 030f 	and.w	r3, r3, #15
 8016fae:	2101      	movs	r1, #1
 8016fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8016fb4:	041b      	lsls	r3, r3, #16
 8016fb6:	68f9      	ldr	r1, [r7, #12]
 8016fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016fbc:	4313      	orrs	r3, r2
 8016fbe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8016fc0:	68bb      	ldr	r3, [r7, #8]
 8016fc2:	015a      	lsls	r2, r3, #5
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	4413      	add	r3, r2
 8016fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d11a      	bne.n	801700c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8016fd6:	68bb      	ldr	r3, [r7, #8]
 8016fd8:	015a      	lsls	r2, r3, #5
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	4413      	add	r3, r2
 8016fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016fe2:	681a      	ldr	r2, [r3, #0]
 8016fe4:	683b      	ldr	r3, [r7, #0]
 8016fe6:	68db      	ldr	r3, [r3, #12]
 8016fe8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8016fec:	683b      	ldr	r3, [r7, #0]
 8016fee:	791b      	ldrb	r3, [r3, #4]
 8016ff0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8016ff2:	430b      	orrs	r3, r1
 8016ff4:	4313      	orrs	r3, r2
 8016ff6:	68ba      	ldr	r2, [r7, #8]
 8016ff8:	0151      	lsls	r1, r2, #5
 8016ffa:	68fa      	ldr	r2, [r7, #12]
 8016ffc:	440a      	add	r2, r1
 8016ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801700a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801700c:	2300      	movs	r3, #0
}
 801700e:	4618      	mov	r0, r3
 8017010:	3714      	adds	r7, #20
 8017012:	46bd      	mov	sp, r7
 8017014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017018:	4770      	bx	lr
	...

0801701c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801701c:	b480      	push	{r7}
 801701e:	b085      	sub	sp, #20
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
 8017024:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801702a:	683b      	ldr	r3, [r7, #0]
 801702c:	781b      	ldrb	r3, [r3, #0]
 801702e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8017030:	683b      	ldr	r3, [r7, #0]
 8017032:	785b      	ldrb	r3, [r3, #1]
 8017034:	2b01      	cmp	r3, #1
 8017036:	d161      	bne.n	80170fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8017038:	68bb      	ldr	r3, [r7, #8]
 801703a:	015a      	lsls	r2, r3, #5
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	4413      	add	r3, r2
 8017040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801704a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801704e:	d11f      	bne.n	8017090 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8017050:	68bb      	ldr	r3, [r7, #8]
 8017052:	015a      	lsls	r2, r3, #5
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	4413      	add	r3, r2
 8017058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	68ba      	ldr	r2, [r7, #8]
 8017060:	0151      	lsls	r1, r2, #5
 8017062:	68fa      	ldr	r2, [r7, #12]
 8017064:	440a      	add	r2, r1
 8017066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801706a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801706e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8017070:	68bb      	ldr	r3, [r7, #8]
 8017072:	015a      	lsls	r2, r3, #5
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	4413      	add	r3, r2
 8017078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	68ba      	ldr	r2, [r7, #8]
 8017080:	0151      	lsls	r1, r2, #5
 8017082:	68fa      	ldr	r2, [r7, #12]
 8017084:	440a      	add	r2, r1
 8017086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801708a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801708e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	781b      	ldrb	r3, [r3, #0]
 801709c:	f003 030f 	and.w	r3, r3, #15
 80170a0:	2101      	movs	r1, #1
 80170a2:	fa01 f303 	lsl.w	r3, r1, r3
 80170a6:	b29b      	uxth	r3, r3
 80170a8:	43db      	mvns	r3, r3
 80170aa:	68f9      	ldr	r1, [r7, #12]
 80170ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80170b0:	4013      	ands	r3, r2
 80170b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80170ba:	69da      	ldr	r2, [r3, #28]
 80170bc:	683b      	ldr	r3, [r7, #0]
 80170be:	781b      	ldrb	r3, [r3, #0]
 80170c0:	f003 030f 	and.w	r3, r3, #15
 80170c4:	2101      	movs	r1, #1
 80170c6:	fa01 f303 	lsl.w	r3, r1, r3
 80170ca:	b29b      	uxth	r3, r3
 80170cc:	43db      	mvns	r3, r3
 80170ce:	68f9      	ldr	r1, [r7, #12]
 80170d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80170d4:	4013      	ands	r3, r2
 80170d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80170d8:	68bb      	ldr	r3, [r7, #8]
 80170da:	015a      	lsls	r2, r3, #5
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	4413      	add	r3, r2
 80170e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80170e4:	681a      	ldr	r2, [r3, #0]
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	0159      	lsls	r1, r3, #5
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	440b      	add	r3, r1
 80170ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80170f2:	4619      	mov	r1, r3
 80170f4:	4b35      	ldr	r3, [pc, #212]	; (80171cc <USB_DeactivateEndpoint+0x1b0>)
 80170f6:	4013      	ands	r3, r2
 80170f8:	600b      	str	r3, [r1, #0]
 80170fa:	e060      	b.n	80171be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80170fc:	68bb      	ldr	r3, [r7, #8]
 80170fe:	015a      	lsls	r2, r3, #5
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	4413      	add	r3, r2
 8017104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801710e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017112:	d11f      	bne.n	8017154 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8017114:	68bb      	ldr	r3, [r7, #8]
 8017116:	015a      	lsls	r2, r3, #5
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	4413      	add	r3, r2
 801711c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	68ba      	ldr	r2, [r7, #8]
 8017124:	0151      	lsls	r1, r2, #5
 8017126:	68fa      	ldr	r2, [r7, #12]
 8017128:	440a      	add	r2, r1
 801712a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801712e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8017132:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8017134:	68bb      	ldr	r3, [r7, #8]
 8017136:	015a      	lsls	r2, r3, #5
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	4413      	add	r3, r2
 801713c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	68ba      	ldr	r2, [r7, #8]
 8017144:	0151      	lsls	r1, r2, #5
 8017146:	68fa      	ldr	r2, [r7, #12]
 8017148:	440a      	add	r2, r1
 801714a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801714e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017152:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801715a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801715c:	683b      	ldr	r3, [r7, #0]
 801715e:	781b      	ldrb	r3, [r3, #0]
 8017160:	f003 030f 	and.w	r3, r3, #15
 8017164:	2101      	movs	r1, #1
 8017166:	fa01 f303 	lsl.w	r3, r1, r3
 801716a:	041b      	lsls	r3, r3, #16
 801716c:	43db      	mvns	r3, r3
 801716e:	68f9      	ldr	r1, [r7, #12]
 8017170:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017174:	4013      	ands	r3, r2
 8017176:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801717e:	69da      	ldr	r2, [r3, #28]
 8017180:	683b      	ldr	r3, [r7, #0]
 8017182:	781b      	ldrb	r3, [r3, #0]
 8017184:	f003 030f 	and.w	r3, r3, #15
 8017188:	2101      	movs	r1, #1
 801718a:	fa01 f303 	lsl.w	r3, r1, r3
 801718e:	041b      	lsls	r3, r3, #16
 8017190:	43db      	mvns	r3, r3
 8017192:	68f9      	ldr	r1, [r7, #12]
 8017194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017198:	4013      	ands	r3, r2
 801719a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801719c:	68bb      	ldr	r3, [r7, #8]
 801719e:	015a      	lsls	r2, r3, #5
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	4413      	add	r3, r2
 80171a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171a8:	681a      	ldr	r2, [r3, #0]
 80171aa:	68bb      	ldr	r3, [r7, #8]
 80171ac:	0159      	lsls	r1, r3, #5
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	440b      	add	r3, r1
 80171b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171b6:	4619      	mov	r1, r3
 80171b8:	4b05      	ldr	r3, [pc, #20]	; (80171d0 <USB_DeactivateEndpoint+0x1b4>)
 80171ba:	4013      	ands	r3, r2
 80171bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80171be:	2300      	movs	r3, #0
}
 80171c0:	4618      	mov	r0, r3
 80171c2:	3714      	adds	r7, #20
 80171c4:	46bd      	mov	sp, r7
 80171c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ca:	4770      	bx	lr
 80171cc:	ec337800 	.word	0xec337800
 80171d0:	eff37800 	.word	0xeff37800

080171d4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80171d4:	b580      	push	{r7, lr}
 80171d6:	b086      	sub	sp, #24
 80171d8:	af00      	add	r7, sp, #0
 80171da:	6078      	str	r0, [r7, #4]
 80171dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80171e2:	683b      	ldr	r3, [r7, #0]
 80171e4:	781b      	ldrb	r3, [r3, #0]
 80171e6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	785b      	ldrb	r3, [r3, #1]
 80171ec:	2b01      	cmp	r3, #1
 80171ee:	f040 810a 	bne.w	8017406 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	699b      	ldr	r3, [r3, #24]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d132      	bne.n	8017260 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80171fa:	693b      	ldr	r3, [r7, #16]
 80171fc:	015a      	lsls	r2, r3, #5
 80171fe:	697b      	ldr	r3, [r7, #20]
 8017200:	4413      	add	r3, r2
 8017202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017206:	691b      	ldr	r3, [r3, #16]
 8017208:	693a      	ldr	r2, [r7, #16]
 801720a:	0151      	lsls	r1, r2, #5
 801720c:	697a      	ldr	r2, [r7, #20]
 801720e:	440a      	add	r2, r1
 8017210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017214:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8017218:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801721c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801721e:	693b      	ldr	r3, [r7, #16]
 8017220:	015a      	lsls	r2, r3, #5
 8017222:	697b      	ldr	r3, [r7, #20]
 8017224:	4413      	add	r3, r2
 8017226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801722a:	691b      	ldr	r3, [r3, #16]
 801722c:	693a      	ldr	r2, [r7, #16]
 801722e:	0151      	lsls	r1, r2, #5
 8017230:	697a      	ldr	r2, [r7, #20]
 8017232:	440a      	add	r2, r1
 8017234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017238:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801723c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801723e:	693b      	ldr	r3, [r7, #16]
 8017240:	015a      	lsls	r2, r3, #5
 8017242:	697b      	ldr	r3, [r7, #20]
 8017244:	4413      	add	r3, r2
 8017246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801724a:	691b      	ldr	r3, [r3, #16]
 801724c:	693a      	ldr	r2, [r7, #16]
 801724e:	0151      	lsls	r1, r2, #5
 8017250:	697a      	ldr	r2, [r7, #20]
 8017252:	440a      	add	r2, r1
 8017254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017258:	0cdb      	lsrs	r3, r3, #19
 801725a:	04db      	lsls	r3, r3, #19
 801725c:	6113      	str	r3, [r2, #16]
 801725e:	e074      	b.n	801734a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8017260:	693b      	ldr	r3, [r7, #16]
 8017262:	015a      	lsls	r2, r3, #5
 8017264:	697b      	ldr	r3, [r7, #20]
 8017266:	4413      	add	r3, r2
 8017268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801726c:	691b      	ldr	r3, [r3, #16]
 801726e:	693a      	ldr	r2, [r7, #16]
 8017270:	0151      	lsls	r1, r2, #5
 8017272:	697a      	ldr	r2, [r7, #20]
 8017274:	440a      	add	r2, r1
 8017276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801727a:	0cdb      	lsrs	r3, r3, #19
 801727c:	04db      	lsls	r3, r3, #19
 801727e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8017280:	693b      	ldr	r3, [r7, #16]
 8017282:	015a      	lsls	r2, r3, #5
 8017284:	697b      	ldr	r3, [r7, #20]
 8017286:	4413      	add	r3, r2
 8017288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801728c:	691b      	ldr	r3, [r3, #16]
 801728e:	693a      	ldr	r2, [r7, #16]
 8017290:	0151      	lsls	r1, r2, #5
 8017292:	697a      	ldr	r2, [r7, #20]
 8017294:	440a      	add	r2, r1
 8017296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801729a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801729e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80172a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80172a4:	693b      	ldr	r3, [r7, #16]
 80172a6:	015a      	lsls	r2, r3, #5
 80172a8:	697b      	ldr	r3, [r7, #20]
 80172aa:	4413      	add	r3, r2
 80172ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80172b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80172b2:	683b      	ldr	r3, [r7, #0]
 80172b4:	6999      	ldr	r1, [r3, #24]
 80172b6:	683b      	ldr	r3, [r7, #0]
 80172b8:	68db      	ldr	r3, [r3, #12]
 80172ba:	440b      	add	r3, r1
 80172bc:	1e59      	subs	r1, r3, #1
 80172be:	683b      	ldr	r3, [r7, #0]
 80172c0:	68db      	ldr	r3, [r3, #12]
 80172c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80172c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80172c8:	4b9e      	ldr	r3, [pc, #632]	; (8017544 <USB_EPStartXfer+0x370>)
 80172ca:	400b      	ands	r3, r1
 80172cc:	6939      	ldr	r1, [r7, #16]
 80172ce:	0148      	lsls	r0, r1, #5
 80172d0:	6979      	ldr	r1, [r7, #20]
 80172d2:	4401      	add	r1, r0
 80172d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80172d8:	4313      	orrs	r3, r2
 80172da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80172dc:	693b      	ldr	r3, [r7, #16]
 80172de:	015a      	lsls	r2, r3, #5
 80172e0:	697b      	ldr	r3, [r7, #20]
 80172e2:	4413      	add	r3, r2
 80172e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80172e8:	691a      	ldr	r2, [r3, #16]
 80172ea:	683b      	ldr	r3, [r7, #0]
 80172ec:	699b      	ldr	r3, [r3, #24]
 80172ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80172f2:	6939      	ldr	r1, [r7, #16]
 80172f4:	0148      	lsls	r0, r1, #5
 80172f6:	6979      	ldr	r1, [r7, #20]
 80172f8:	4401      	add	r1, r0
 80172fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80172fe:	4313      	orrs	r3, r2
 8017300:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8017302:	683b      	ldr	r3, [r7, #0]
 8017304:	791b      	ldrb	r3, [r3, #4]
 8017306:	2b01      	cmp	r3, #1
 8017308:	d11f      	bne.n	801734a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801730a:	693b      	ldr	r3, [r7, #16]
 801730c:	015a      	lsls	r2, r3, #5
 801730e:	697b      	ldr	r3, [r7, #20]
 8017310:	4413      	add	r3, r2
 8017312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017316:	691b      	ldr	r3, [r3, #16]
 8017318:	693a      	ldr	r2, [r7, #16]
 801731a:	0151      	lsls	r1, r2, #5
 801731c:	697a      	ldr	r2, [r7, #20]
 801731e:	440a      	add	r2, r1
 8017320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017324:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8017328:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801732a:	693b      	ldr	r3, [r7, #16]
 801732c:	015a      	lsls	r2, r3, #5
 801732e:	697b      	ldr	r3, [r7, #20]
 8017330:	4413      	add	r3, r2
 8017332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017336:	691b      	ldr	r3, [r3, #16]
 8017338:	693a      	ldr	r2, [r7, #16]
 801733a:	0151      	lsls	r1, r2, #5
 801733c:	697a      	ldr	r2, [r7, #20]
 801733e:	440a      	add	r2, r1
 8017340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017344:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017348:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801734a:	693b      	ldr	r3, [r7, #16]
 801734c:	015a      	lsls	r2, r3, #5
 801734e:	697b      	ldr	r3, [r7, #20]
 8017350:	4413      	add	r3, r2
 8017352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	693a      	ldr	r2, [r7, #16]
 801735a:	0151      	lsls	r1, r2, #5
 801735c:	697a      	ldr	r2, [r7, #20]
 801735e:	440a      	add	r2, r1
 8017360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017364:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8017368:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 801736a:	683b      	ldr	r3, [r7, #0]
 801736c:	791b      	ldrb	r3, [r3, #4]
 801736e:	2b01      	cmp	r3, #1
 8017370:	d015      	beq.n	801739e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8017372:	683b      	ldr	r3, [r7, #0]
 8017374:	699b      	ldr	r3, [r3, #24]
 8017376:	2b00      	cmp	r3, #0
 8017378:	f000 8106 	beq.w	8017588 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801737c:	697b      	ldr	r3, [r7, #20]
 801737e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017384:	683b      	ldr	r3, [r7, #0]
 8017386:	781b      	ldrb	r3, [r3, #0]
 8017388:	f003 030f 	and.w	r3, r3, #15
 801738c:	2101      	movs	r1, #1
 801738e:	fa01 f303 	lsl.w	r3, r1, r3
 8017392:	6979      	ldr	r1, [r7, #20]
 8017394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017398:	4313      	orrs	r3, r2
 801739a:	634b      	str	r3, [r1, #52]	; 0x34
 801739c:	e0f4      	b.n	8017588 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801739e:	697b      	ldr	r3, [r7, #20]
 80173a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80173a4:	689b      	ldr	r3, [r3, #8]
 80173a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d110      	bne.n	80173d0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80173ae:	693b      	ldr	r3, [r7, #16]
 80173b0:	015a      	lsls	r2, r3, #5
 80173b2:	697b      	ldr	r3, [r7, #20]
 80173b4:	4413      	add	r3, r2
 80173b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	693a      	ldr	r2, [r7, #16]
 80173be:	0151      	lsls	r1, r2, #5
 80173c0:	697a      	ldr	r2, [r7, #20]
 80173c2:	440a      	add	r2, r1
 80173c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80173c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80173cc:	6013      	str	r3, [r2, #0]
 80173ce:	e00f      	b.n	80173f0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80173d0:	693b      	ldr	r3, [r7, #16]
 80173d2:	015a      	lsls	r2, r3, #5
 80173d4:	697b      	ldr	r3, [r7, #20]
 80173d6:	4413      	add	r3, r2
 80173d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	693a      	ldr	r2, [r7, #16]
 80173e0:	0151      	lsls	r1, r2, #5
 80173e2:	697a      	ldr	r2, [r7, #20]
 80173e4:	440a      	add	r2, r1
 80173e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80173ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80173ee:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80173f0:	683b      	ldr	r3, [r7, #0]
 80173f2:	6919      	ldr	r1, [r3, #16]
 80173f4:	683b      	ldr	r3, [r7, #0]
 80173f6:	781a      	ldrb	r2, [r3, #0]
 80173f8:	683b      	ldr	r3, [r7, #0]
 80173fa:	699b      	ldr	r3, [r3, #24]
 80173fc:	b29b      	uxth	r3, r3
 80173fe:	6878      	ldr	r0, [r7, #4]
 8017400:	f000 fa94 	bl	801792c <USB_WritePacket>
 8017404:	e0c0      	b.n	8017588 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8017406:	693b      	ldr	r3, [r7, #16]
 8017408:	015a      	lsls	r2, r3, #5
 801740a:	697b      	ldr	r3, [r7, #20]
 801740c:	4413      	add	r3, r2
 801740e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017412:	691b      	ldr	r3, [r3, #16]
 8017414:	693a      	ldr	r2, [r7, #16]
 8017416:	0151      	lsls	r1, r2, #5
 8017418:	697a      	ldr	r2, [r7, #20]
 801741a:	440a      	add	r2, r1
 801741c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017420:	0cdb      	lsrs	r3, r3, #19
 8017422:	04db      	lsls	r3, r3, #19
 8017424:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8017426:	693b      	ldr	r3, [r7, #16]
 8017428:	015a      	lsls	r2, r3, #5
 801742a:	697b      	ldr	r3, [r7, #20]
 801742c:	4413      	add	r3, r2
 801742e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017432:	691b      	ldr	r3, [r3, #16]
 8017434:	693a      	ldr	r2, [r7, #16]
 8017436:	0151      	lsls	r1, r2, #5
 8017438:	697a      	ldr	r2, [r7, #20]
 801743a:	440a      	add	r2, r1
 801743c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017440:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8017444:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8017448:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801744a:	683b      	ldr	r3, [r7, #0]
 801744c:	699b      	ldr	r3, [r3, #24]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d123      	bne.n	801749a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8017452:	693b      	ldr	r3, [r7, #16]
 8017454:	015a      	lsls	r2, r3, #5
 8017456:	697b      	ldr	r3, [r7, #20]
 8017458:	4413      	add	r3, r2
 801745a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801745e:	691a      	ldr	r2, [r3, #16]
 8017460:	683b      	ldr	r3, [r7, #0]
 8017462:	68db      	ldr	r3, [r3, #12]
 8017464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017468:	6939      	ldr	r1, [r7, #16]
 801746a:	0148      	lsls	r0, r1, #5
 801746c:	6979      	ldr	r1, [r7, #20]
 801746e:	4401      	add	r1, r0
 8017470:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8017474:	4313      	orrs	r3, r2
 8017476:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8017478:	693b      	ldr	r3, [r7, #16]
 801747a:	015a      	lsls	r2, r3, #5
 801747c:	697b      	ldr	r3, [r7, #20]
 801747e:	4413      	add	r3, r2
 8017480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017484:	691b      	ldr	r3, [r3, #16]
 8017486:	693a      	ldr	r2, [r7, #16]
 8017488:	0151      	lsls	r1, r2, #5
 801748a:	697a      	ldr	r2, [r7, #20]
 801748c:	440a      	add	r2, r1
 801748e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017492:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017496:	6113      	str	r3, [r2, #16]
 8017498:	e037      	b.n	801750a <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	699a      	ldr	r2, [r3, #24]
 801749e:	683b      	ldr	r3, [r7, #0]
 80174a0:	68db      	ldr	r3, [r3, #12]
 80174a2:	4413      	add	r3, r2
 80174a4:	1e5a      	subs	r2, r3, #1
 80174a6:	683b      	ldr	r3, [r7, #0]
 80174a8:	68db      	ldr	r3, [r3, #12]
 80174aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80174ae:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80174b0:	683b      	ldr	r3, [r7, #0]
 80174b2:	68db      	ldr	r3, [r3, #12]
 80174b4:	89fa      	ldrh	r2, [r7, #14]
 80174b6:	fb03 f202 	mul.w	r2, r3, r2
 80174ba:	683b      	ldr	r3, [r7, #0]
 80174bc:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80174be:	693b      	ldr	r3, [r7, #16]
 80174c0:	015a      	lsls	r2, r3, #5
 80174c2:	697b      	ldr	r3, [r7, #20]
 80174c4:	4413      	add	r3, r2
 80174c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80174ca:	691a      	ldr	r2, [r3, #16]
 80174cc:	89fb      	ldrh	r3, [r7, #14]
 80174ce:	04d9      	lsls	r1, r3, #19
 80174d0:	4b1c      	ldr	r3, [pc, #112]	; (8017544 <USB_EPStartXfer+0x370>)
 80174d2:	400b      	ands	r3, r1
 80174d4:	6939      	ldr	r1, [r7, #16]
 80174d6:	0148      	lsls	r0, r1, #5
 80174d8:	6979      	ldr	r1, [r7, #20]
 80174da:	4401      	add	r1, r0
 80174dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80174e0:	4313      	orrs	r3, r2
 80174e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80174e4:	693b      	ldr	r3, [r7, #16]
 80174e6:	015a      	lsls	r2, r3, #5
 80174e8:	697b      	ldr	r3, [r7, #20]
 80174ea:	4413      	add	r3, r2
 80174ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80174f0:	691a      	ldr	r2, [r3, #16]
 80174f2:	683b      	ldr	r3, [r7, #0]
 80174f4:	69db      	ldr	r3, [r3, #28]
 80174f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80174fa:	6939      	ldr	r1, [r7, #16]
 80174fc:	0148      	lsls	r0, r1, #5
 80174fe:	6979      	ldr	r1, [r7, #20]
 8017500:	4401      	add	r1, r0
 8017502:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8017506:	4313      	orrs	r3, r2
 8017508:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	791b      	ldrb	r3, [r3, #4]
 801750e:	2b01      	cmp	r3, #1
 8017510:	d12a      	bne.n	8017568 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8017512:	697b      	ldr	r3, [r7, #20]
 8017514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017518:	689b      	ldr	r3, [r3, #8]
 801751a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801751e:	2b00      	cmp	r3, #0
 8017520:	d112      	bne.n	8017548 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8017522:	693b      	ldr	r3, [r7, #16]
 8017524:	015a      	lsls	r2, r3, #5
 8017526:	697b      	ldr	r3, [r7, #20]
 8017528:	4413      	add	r3, r2
 801752a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	693a      	ldr	r2, [r7, #16]
 8017532:	0151      	lsls	r1, r2, #5
 8017534:	697a      	ldr	r2, [r7, #20]
 8017536:	440a      	add	r2, r1
 8017538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801753c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017540:	6013      	str	r3, [r2, #0]
 8017542:	e011      	b.n	8017568 <USB_EPStartXfer+0x394>
 8017544:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8017548:	693b      	ldr	r3, [r7, #16]
 801754a:	015a      	lsls	r2, r3, #5
 801754c:	697b      	ldr	r3, [r7, #20]
 801754e:	4413      	add	r3, r2
 8017550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	693a      	ldr	r2, [r7, #16]
 8017558:	0151      	lsls	r1, r2, #5
 801755a:	697a      	ldr	r2, [r7, #20]
 801755c:	440a      	add	r2, r1
 801755e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017566:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8017568:	693b      	ldr	r3, [r7, #16]
 801756a:	015a      	lsls	r2, r3, #5
 801756c:	697b      	ldr	r3, [r7, #20]
 801756e:	4413      	add	r3, r2
 8017570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	693a      	ldr	r2, [r7, #16]
 8017578:	0151      	lsls	r1, r2, #5
 801757a:	697a      	ldr	r2, [r7, #20]
 801757c:	440a      	add	r2, r1
 801757e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017582:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8017586:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8017588:	2300      	movs	r3, #0
}
 801758a:	4618      	mov	r0, r3
 801758c:	3718      	adds	r7, #24
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}
 8017592:	bf00      	nop

08017594 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8017594:	b480      	push	{r7}
 8017596:	b085      	sub	sp, #20
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
 801759c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80175a2:	683b      	ldr	r3, [r7, #0]
 80175a4:	781b      	ldrb	r3, [r3, #0]
 80175a6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	785b      	ldrb	r3, [r3, #1]
 80175ac:	2b01      	cmp	r3, #1
 80175ae:	f040 80ab 	bne.w	8017708 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80175b2:	683b      	ldr	r3, [r7, #0]
 80175b4:	699b      	ldr	r3, [r3, #24]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d132      	bne.n	8017620 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80175ba:	68bb      	ldr	r3, [r7, #8]
 80175bc:	015a      	lsls	r2, r3, #5
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	4413      	add	r3, r2
 80175c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80175c6:	691b      	ldr	r3, [r3, #16]
 80175c8:	68ba      	ldr	r2, [r7, #8]
 80175ca:	0151      	lsls	r1, r2, #5
 80175cc:	68fa      	ldr	r2, [r7, #12]
 80175ce:	440a      	add	r2, r1
 80175d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80175d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80175d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80175dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80175de:	68bb      	ldr	r3, [r7, #8]
 80175e0:	015a      	lsls	r2, r3, #5
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	4413      	add	r3, r2
 80175e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80175ea:	691b      	ldr	r3, [r3, #16]
 80175ec:	68ba      	ldr	r2, [r7, #8]
 80175ee:	0151      	lsls	r1, r2, #5
 80175f0:	68fa      	ldr	r2, [r7, #12]
 80175f2:	440a      	add	r2, r1
 80175f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80175f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80175fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80175fe:	68bb      	ldr	r3, [r7, #8]
 8017600:	015a      	lsls	r2, r3, #5
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	4413      	add	r3, r2
 8017606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801760a:	691b      	ldr	r3, [r3, #16]
 801760c:	68ba      	ldr	r2, [r7, #8]
 801760e:	0151      	lsls	r1, r2, #5
 8017610:	68fa      	ldr	r2, [r7, #12]
 8017612:	440a      	add	r2, r1
 8017614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017618:	0cdb      	lsrs	r3, r3, #19
 801761a:	04db      	lsls	r3, r3, #19
 801761c:	6113      	str	r3, [r2, #16]
 801761e:	e04e      	b.n	80176be <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8017620:	68bb      	ldr	r3, [r7, #8]
 8017622:	015a      	lsls	r2, r3, #5
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	4413      	add	r3, r2
 8017628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801762c:	691b      	ldr	r3, [r3, #16]
 801762e:	68ba      	ldr	r2, [r7, #8]
 8017630:	0151      	lsls	r1, r2, #5
 8017632:	68fa      	ldr	r2, [r7, #12]
 8017634:	440a      	add	r2, r1
 8017636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801763a:	0cdb      	lsrs	r3, r3, #19
 801763c:	04db      	lsls	r3, r3, #19
 801763e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8017640:	68bb      	ldr	r3, [r7, #8]
 8017642:	015a      	lsls	r2, r3, #5
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	4413      	add	r3, r2
 8017648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801764c:	691b      	ldr	r3, [r3, #16]
 801764e:	68ba      	ldr	r2, [r7, #8]
 8017650:	0151      	lsls	r1, r2, #5
 8017652:	68fa      	ldr	r2, [r7, #12]
 8017654:	440a      	add	r2, r1
 8017656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801765a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801765e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8017662:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8017664:	683b      	ldr	r3, [r7, #0]
 8017666:	699a      	ldr	r2, [r3, #24]
 8017668:	683b      	ldr	r3, [r7, #0]
 801766a:	68db      	ldr	r3, [r3, #12]
 801766c:	429a      	cmp	r2, r3
 801766e:	d903      	bls.n	8017678 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8017670:	683b      	ldr	r3, [r7, #0]
 8017672:	68da      	ldr	r2, [r3, #12]
 8017674:	683b      	ldr	r3, [r7, #0]
 8017676:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8017678:	68bb      	ldr	r3, [r7, #8]
 801767a:	015a      	lsls	r2, r3, #5
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	4413      	add	r3, r2
 8017680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017684:	691b      	ldr	r3, [r3, #16]
 8017686:	68ba      	ldr	r2, [r7, #8]
 8017688:	0151      	lsls	r1, r2, #5
 801768a:	68fa      	ldr	r2, [r7, #12]
 801768c:	440a      	add	r2, r1
 801768e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017692:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017696:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8017698:	68bb      	ldr	r3, [r7, #8]
 801769a:	015a      	lsls	r2, r3, #5
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	4413      	add	r3, r2
 80176a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80176a4:	691a      	ldr	r2, [r3, #16]
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	699b      	ldr	r3, [r3, #24]
 80176aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80176ae:	68b9      	ldr	r1, [r7, #8]
 80176b0:	0148      	lsls	r0, r1, #5
 80176b2:	68f9      	ldr	r1, [r7, #12]
 80176b4:	4401      	add	r1, r0
 80176b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80176ba:	4313      	orrs	r3, r2
 80176bc:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80176be:	68bb      	ldr	r3, [r7, #8]
 80176c0:	015a      	lsls	r2, r3, #5
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	4413      	add	r3, r2
 80176c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	68ba      	ldr	r2, [r7, #8]
 80176ce:	0151      	lsls	r1, r2, #5
 80176d0:	68fa      	ldr	r2, [r7, #12]
 80176d2:	440a      	add	r2, r1
 80176d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80176d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80176dc:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80176de:	683b      	ldr	r3, [r7, #0]
 80176e0:	699b      	ldr	r3, [r3, #24]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d071      	beq.n	80177ca <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80176ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80176ee:	683b      	ldr	r3, [r7, #0]
 80176f0:	781b      	ldrb	r3, [r3, #0]
 80176f2:	f003 030f 	and.w	r3, r3, #15
 80176f6:	2101      	movs	r1, #1
 80176f8:	fa01 f303 	lsl.w	r3, r1, r3
 80176fc:	68f9      	ldr	r1, [r7, #12]
 80176fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017702:	4313      	orrs	r3, r2
 8017704:	634b      	str	r3, [r1, #52]	; 0x34
 8017706:	e060      	b.n	80177ca <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8017708:	68bb      	ldr	r3, [r7, #8]
 801770a:	015a      	lsls	r2, r3, #5
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	4413      	add	r3, r2
 8017710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017714:	691b      	ldr	r3, [r3, #16]
 8017716:	68ba      	ldr	r2, [r7, #8]
 8017718:	0151      	lsls	r1, r2, #5
 801771a:	68fa      	ldr	r2, [r7, #12]
 801771c:	440a      	add	r2, r1
 801771e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017722:	0cdb      	lsrs	r3, r3, #19
 8017724:	04db      	lsls	r3, r3, #19
 8017726:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8017728:	68bb      	ldr	r3, [r7, #8]
 801772a:	015a      	lsls	r2, r3, #5
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	4413      	add	r3, r2
 8017730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017734:	691b      	ldr	r3, [r3, #16]
 8017736:	68ba      	ldr	r2, [r7, #8]
 8017738:	0151      	lsls	r1, r2, #5
 801773a:	68fa      	ldr	r2, [r7, #12]
 801773c:	440a      	add	r2, r1
 801773e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017742:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8017746:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801774a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801774c:	683b      	ldr	r3, [r7, #0]
 801774e:	699b      	ldr	r3, [r3, #24]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d003      	beq.n	801775c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8017754:	683b      	ldr	r3, [r7, #0]
 8017756:	68da      	ldr	r2, [r3, #12]
 8017758:	683b      	ldr	r3, [r7, #0]
 801775a:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801775c:	683b      	ldr	r3, [r7, #0]
 801775e:	68da      	ldr	r2, [r3, #12]
 8017760:	683b      	ldr	r3, [r7, #0]
 8017762:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8017764:	68bb      	ldr	r3, [r7, #8]
 8017766:	015a      	lsls	r2, r3, #5
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	4413      	add	r3, r2
 801776c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017770:	691b      	ldr	r3, [r3, #16]
 8017772:	68ba      	ldr	r2, [r7, #8]
 8017774:	0151      	lsls	r1, r2, #5
 8017776:	68fa      	ldr	r2, [r7, #12]
 8017778:	440a      	add	r2, r1
 801777a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801777e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017782:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8017784:	68bb      	ldr	r3, [r7, #8]
 8017786:	015a      	lsls	r2, r3, #5
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	4413      	add	r3, r2
 801778c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017790:	691a      	ldr	r2, [r3, #16]
 8017792:	683b      	ldr	r3, [r7, #0]
 8017794:	69db      	ldr	r3, [r3, #28]
 8017796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801779a:	68b9      	ldr	r1, [r7, #8]
 801779c:	0148      	lsls	r0, r1, #5
 801779e:	68f9      	ldr	r1, [r7, #12]
 80177a0:	4401      	add	r1, r0
 80177a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80177a6:	4313      	orrs	r3, r2
 80177a8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80177aa:	68bb      	ldr	r3, [r7, #8]
 80177ac:	015a      	lsls	r2, r3, #5
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	4413      	add	r3, r2
 80177b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	68ba      	ldr	r2, [r7, #8]
 80177ba:	0151      	lsls	r1, r2, #5
 80177bc:	68fa      	ldr	r2, [r7, #12]
 80177be:	440a      	add	r2, r1
 80177c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80177c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80177c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80177ca:	2300      	movs	r3, #0
}
 80177cc:	4618      	mov	r0, r3
 80177ce:	3714      	adds	r7, #20
 80177d0:	46bd      	mov	sp, r7
 80177d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d6:	4770      	bx	lr

080177d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80177d8:	b480      	push	{r7}
 80177da:	b087      	sub	sp, #28
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
 80177e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80177e2:	2300      	movs	r3, #0
 80177e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80177e6:	2300      	movs	r3, #0
 80177e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80177ee:	683b      	ldr	r3, [r7, #0]
 80177f0:	785b      	ldrb	r3, [r3, #1]
 80177f2:	2b01      	cmp	r3, #1
 80177f4:	d14a      	bne.n	801788c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80177f6:	683b      	ldr	r3, [r7, #0]
 80177f8:	781b      	ldrb	r3, [r3, #0]
 80177fa:	015a      	lsls	r2, r3, #5
 80177fc:	693b      	ldr	r3, [r7, #16]
 80177fe:	4413      	add	r3, r2
 8017800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801780a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801780e:	f040 8086 	bne.w	801791e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8017812:	683b      	ldr	r3, [r7, #0]
 8017814:	781b      	ldrb	r3, [r3, #0]
 8017816:	015a      	lsls	r2, r3, #5
 8017818:	693b      	ldr	r3, [r7, #16]
 801781a:	4413      	add	r3, r2
 801781c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	683a      	ldr	r2, [r7, #0]
 8017824:	7812      	ldrb	r2, [r2, #0]
 8017826:	0151      	lsls	r1, r2, #5
 8017828:	693a      	ldr	r2, [r7, #16]
 801782a:	440a      	add	r2, r1
 801782c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017830:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8017834:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8017836:	683b      	ldr	r3, [r7, #0]
 8017838:	781b      	ldrb	r3, [r3, #0]
 801783a:	015a      	lsls	r2, r3, #5
 801783c:	693b      	ldr	r3, [r7, #16]
 801783e:	4413      	add	r3, r2
 8017840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	683a      	ldr	r2, [r7, #0]
 8017848:	7812      	ldrb	r2, [r2, #0]
 801784a:	0151      	lsls	r1, r2, #5
 801784c:	693a      	ldr	r2, [r7, #16]
 801784e:	440a      	add	r2, r1
 8017850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017854:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017858:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	3301      	adds	r3, #1
 801785e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	f242 7210 	movw	r2, #10000	; 0x2710
 8017866:	4293      	cmp	r3, r2
 8017868:	d902      	bls.n	8017870 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801786a:	2301      	movs	r3, #1
 801786c:	75fb      	strb	r3, [r7, #23]
          break;
 801786e:	e056      	b.n	801791e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8017870:	683b      	ldr	r3, [r7, #0]
 8017872:	781b      	ldrb	r3, [r3, #0]
 8017874:	015a      	lsls	r2, r3, #5
 8017876:	693b      	ldr	r3, [r7, #16]
 8017878:	4413      	add	r3, r2
 801787a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017888:	d0e7      	beq.n	801785a <USB_EPStopXfer+0x82>
 801788a:	e048      	b.n	801791e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801788c:	683b      	ldr	r3, [r7, #0]
 801788e:	781b      	ldrb	r3, [r3, #0]
 8017890:	015a      	lsls	r2, r3, #5
 8017892:	693b      	ldr	r3, [r7, #16]
 8017894:	4413      	add	r3, r2
 8017896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80178a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80178a4:	d13b      	bne.n	801791e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80178a6:	683b      	ldr	r3, [r7, #0]
 80178a8:	781b      	ldrb	r3, [r3, #0]
 80178aa:	015a      	lsls	r2, r3, #5
 80178ac:	693b      	ldr	r3, [r7, #16]
 80178ae:	4413      	add	r3, r2
 80178b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	683a      	ldr	r2, [r7, #0]
 80178b8:	7812      	ldrb	r2, [r2, #0]
 80178ba:	0151      	lsls	r1, r2, #5
 80178bc:	693a      	ldr	r2, [r7, #16]
 80178be:	440a      	add	r2, r1
 80178c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80178c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80178c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80178ca:	683b      	ldr	r3, [r7, #0]
 80178cc:	781b      	ldrb	r3, [r3, #0]
 80178ce:	015a      	lsls	r2, r3, #5
 80178d0:	693b      	ldr	r3, [r7, #16]
 80178d2:	4413      	add	r3, r2
 80178d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	683a      	ldr	r2, [r7, #0]
 80178dc:	7812      	ldrb	r2, [r2, #0]
 80178de:	0151      	lsls	r1, r2, #5
 80178e0:	693a      	ldr	r2, [r7, #16]
 80178e2:	440a      	add	r2, r1
 80178e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80178e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80178ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	3301      	adds	r3, #1
 80178f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80178fa:	4293      	cmp	r3, r2
 80178fc:	d902      	bls.n	8017904 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80178fe:	2301      	movs	r3, #1
 8017900:	75fb      	strb	r3, [r7, #23]
          break;
 8017902:	e00c      	b.n	801791e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8017904:	683b      	ldr	r3, [r7, #0]
 8017906:	781b      	ldrb	r3, [r3, #0]
 8017908:	015a      	lsls	r2, r3, #5
 801790a:	693b      	ldr	r3, [r7, #16]
 801790c:	4413      	add	r3, r2
 801790e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801791c:	d0e7      	beq.n	80178ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801791e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017920:	4618      	mov	r0, r3
 8017922:	371c      	adds	r7, #28
 8017924:	46bd      	mov	sp, r7
 8017926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792a:	4770      	bx	lr

0801792c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 801792c:	b480      	push	{r7}
 801792e:	b089      	sub	sp, #36	; 0x24
 8017930:	af00      	add	r7, sp, #0
 8017932:	60f8      	str	r0, [r7, #12]
 8017934:	60b9      	str	r1, [r7, #8]
 8017936:	4611      	mov	r1, r2
 8017938:	461a      	mov	r2, r3
 801793a:	460b      	mov	r3, r1
 801793c:	71fb      	strb	r3, [r7, #7]
 801793e:	4613      	mov	r3, r2
 8017940:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8017946:	68bb      	ldr	r3, [r7, #8]
 8017948:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 801794a:	88bb      	ldrh	r3, [r7, #4]
 801794c:	3303      	adds	r3, #3
 801794e:	089b      	lsrs	r3, r3, #2
 8017950:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8017952:	2300      	movs	r3, #0
 8017954:	61bb      	str	r3, [r7, #24]
 8017956:	e018      	b.n	801798a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8017958:	79fb      	ldrb	r3, [r7, #7]
 801795a:	031a      	lsls	r2, r3, #12
 801795c:	697b      	ldr	r3, [r7, #20]
 801795e:	4413      	add	r3, r2
 8017960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017964:	461a      	mov	r2, r3
 8017966:	69fb      	ldr	r3, [r7, #28]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	6013      	str	r3, [r2, #0]
    pSrc++;
 801796c:	69fb      	ldr	r3, [r7, #28]
 801796e:	3301      	adds	r3, #1
 8017970:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8017972:	69fb      	ldr	r3, [r7, #28]
 8017974:	3301      	adds	r3, #1
 8017976:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8017978:	69fb      	ldr	r3, [r7, #28]
 801797a:	3301      	adds	r3, #1
 801797c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 801797e:	69fb      	ldr	r3, [r7, #28]
 8017980:	3301      	adds	r3, #1
 8017982:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8017984:	69bb      	ldr	r3, [r7, #24]
 8017986:	3301      	adds	r3, #1
 8017988:	61bb      	str	r3, [r7, #24]
 801798a:	69ba      	ldr	r2, [r7, #24]
 801798c:	693b      	ldr	r3, [r7, #16]
 801798e:	429a      	cmp	r2, r3
 8017990:	d3e2      	bcc.n	8017958 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8017992:	2300      	movs	r3, #0
}
 8017994:	4618      	mov	r0, r3
 8017996:	3724      	adds	r7, #36	; 0x24
 8017998:	46bd      	mov	sp, r7
 801799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799e:	4770      	bx	lr

080179a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80179a0:	b480      	push	{r7}
 80179a2:	b08b      	sub	sp, #44	; 0x2c
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	60f8      	str	r0, [r7, #12]
 80179a8:	60b9      	str	r1, [r7, #8]
 80179aa:	4613      	mov	r3, r2
 80179ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80179b2:	68bb      	ldr	r3, [r7, #8]
 80179b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80179b6:	88fb      	ldrh	r3, [r7, #6]
 80179b8:	089b      	lsrs	r3, r3, #2
 80179ba:	b29b      	uxth	r3, r3
 80179bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80179be:	88fb      	ldrh	r3, [r7, #6]
 80179c0:	f003 0303 	and.w	r3, r3, #3
 80179c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80179c6:	2300      	movs	r3, #0
 80179c8:	623b      	str	r3, [r7, #32]
 80179ca:	e014      	b.n	80179f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80179cc:	69bb      	ldr	r3, [r7, #24]
 80179ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80179d2:	681a      	ldr	r2, [r3, #0]
 80179d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80179d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179da:	3301      	adds	r3, #1
 80179dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80179de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179e0:	3301      	adds	r3, #1
 80179e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80179e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179e6:	3301      	adds	r3, #1
 80179e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80179ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179ec:	3301      	adds	r3, #1
 80179ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80179f0:	6a3b      	ldr	r3, [r7, #32]
 80179f2:	3301      	adds	r3, #1
 80179f4:	623b      	str	r3, [r7, #32]
 80179f6:	6a3a      	ldr	r2, [r7, #32]
 80179f8:	697b      	ldr	r3, [r7, #20]
 80179fa:	429a      	cmp	r2, r3
 80179fc:	d3e6      	bcc.n	80179cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80179fe:	8bfb      	ldrh	r3, [r7, #30]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d01e      	beq.n	8017a42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8017a04:	2300      	movs	r3, #0
 8017a06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8017a08:	69bb      	ldr	r3, [r7, #24]
 8017a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017a0e:	461a      	mov	r2, r3
 8017a10:	f107 0310 	add.w	r3, r7, #16
 8017a14:	6812      	ldr	r2, [r2, #0]
 8017a16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8017a18:	693a      	ldr	r2, [r7, #16]
 8017a1a:	6a3b      	ldr	r3, [r7, #32]
 8017a1c:	b2db      	uxtb	r3, r3
 8017a1e:	00db      	lsls	r3, r3, #3
 8017a20:	fa22 f303 	lsr.w	r3, r2, r3
 8017a24:	b2da      	uxtb	r2, r3
 8017a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a28:	701a      	strb	r2, [r3, #0]
      i++;
 8017a2a:	6a3b      	ldr	r3, [r7, #32]
 8017a2c:	3301      	adds	r3, #1
 8017a2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8017a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a32:	3301      	adds	r3, #1
 8017a34:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8017a36:	8bfb      	ldrh	r3, [r7, #30]
 8017a38:	3b01      	subs	r3, #1
 8017a3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8017a3c:	8bfb      	ldrh	r3, [r7, #30]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d1ea      	bne.n	8017a18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8017a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017a44:	4618      	mov	r0, r3
 8017a46:	372c      	adds	r7, #44	; 0x2c
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4e:	4770      	bx	lr

08017a50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8017a50:	b480      	push	{r7}
 8017a52:	b085      	sub	sp, #20
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
 8017a58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8017a5e:	683b      	ldr	r3, [r7, #0]
 8017a60:	781b      	ldrb	r3, [r3, #0]
 8017a62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8017a64:	683b      	ldr	r3, [r7, #0]
 8017a66:	785b      	ldrb	r3, [r3, #1]
 8017a68:	2b01      	cmp	r3, #1
 8017a6a:	d12c      	bne.n	8017ac6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8017a6c:	68bb      	ldr	r3, [r7, #8]
 8017a6e:	015a      	lsls	r2, r3, #5
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	4413      	add	r3, r2
 8017a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	db12      	blt.n	8017aa4 <USB_EPSetStall+0x54>
 8017a7e:	68bb      	ldr	r3, [r7, #8]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d00f      	beq.n	8017aa4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8017a84:	68bb      	ldr	r3, [r7, #8]
 8017a86:	015a      	lsls	r2, r3, #5
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	4413      	add	r3, r2
 8017a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	68ba      	ldr	r2, [r7, #8]
 8017a94:	0151      	lsls	r1, r2, #5
 8017a96:	68fa      	ldr	r2, [r7, #12]
 8017a98:	440a      	add	r2, r1
 8017a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017a9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8017aa2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8017aa4:	68bb      	ldr	r3, [r7, #8]
 8017aa6:	015a      	lsls	r2, r3, #5
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	4413      	add	r3, r2
 8017aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	68ba      	ldr	r2, [r7, #8]
 8017ab4:	0151      	lsls	r1, r2, #5
 8017ab6:	68fa      	ldr	r2, [r7, #12]
 8017ab8:	440a      	add	r2, r1
 8017aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017abe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017ac2:	6013      	str	r3, [r2, #0]
 8017ac4:	e02b      	b.n	8017b1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8017ac6:	68bb      	ldr	r3, [r7, #8]
 8017ac8:	015a      	lsls	r2, r3, #5
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	4413      	add	r3, r2
 8017ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	db12      	blt.n	8017afe <USB_EPSetStall+0xae>
 8017ad8:	68bb      	ldr	r3, [r7, #8]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d00f      	beq.n	8017afe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8017ade:	68bb      	ldr	r3, [r7, #8]
 8017ae0:	015a      	lsls	r2, r3, #5
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	4413      	add	r3, r2
 8017ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	68ba      	ldr	r2, [r7, #8]
 8017aee:	0151      	lsls	r1, r2, #5
 8017af0:	68fa      	ldr	r2, [r7, #12]
 8017af2:	440a      	add	r2, r1
 8017af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017af8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8017afc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8017afe:	68bb      	ldr	r3, [r7, #8]
 8017b00:	015a      	lsls	r2, r3, #5
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	4413      	add	r3, r2
 8017b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	68ba      	ldr	r2, [r7, #8]
 8017b0e:	0151      	lsls	r1, r2, #5
 8017b10:	68fa      	ldr	r2, [r7, #12]
 8017b12:	440a      	add	r2, r1
 8017b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017b18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017b1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8017b1e:	2300      	movs	r3, #0
}
 8017b20:	4618      	mov	r0, r3
 8017b22:	3714      	adds	r7, #20
 8017b24:	46bd      	mov	sp, r7
 8017b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b2a:	4770      	bx	lr

08017b2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8017b2c:	b480      	push	{r7}
 8017b2e:	b085      	sub	sp, #20
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	6078      	str	r0, [r7, #4]
 8017b34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8017b3a:	683b      	ldr	r3, [r7, #0]
 8017b3c:	781b      	ldrb	r3, [r3, #0]
 8017b3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8017b40:	683b      	ldr	r3, [r7, #0]
 8017b42:	785b      	ldrb	r3, [r3, #1]
 8017b44:	2b01      	cmp	r3, #1
 8017b46:	d128      	bne.n	8017b9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8017b48:	68bb      	ldr	r3, [r7, #8]
 8017b4a:	015a      	lsls	r2, r3, #5
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	4413      	add	r3, r2
 8017b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	68ba      	ldr	r2, [r7, #8]
 8017b58:	0151      	lsls	r1, r2, #5
 8017b5a:	68fa      	ldr	r2, [r7, #12]
 8017b5c:	440a      	add	r2, r1
 8017b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017b66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8017b68:	683b      	ldr	r3, [r7, #0]
 8017b6a:	791b      	ldrb	r3, [r3, #4]
 8017b6c:	2b03      	cmp	r3, #3
 8017b6e:	d003      	beq.n	8017b78 <USB_EPClearStall+0x4c>
 8017b70:	683b      	ldr	r3, [r7, #0]
 8017b72:	791b      	ldrb	r3, [r3, #4]
 8017b74:	2b02      	cmp	r3, #2
 8017b76:	d138      	bne.n	8017bea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8017b78:	68bb      	ldr	r3, [r7, #8]
 8017b7a:	015a      	lsls	r2, r3, #5
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	4413      	add	r3, r2
 8017b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	68ba      	ldr	r2, [r7, #8]
 8017b88:	0151      	lsls	r1, r2, #5
 8017b8a:	68fa      	ldr	r2, [r7, #12]
 8017b8c:	440a      	add	r2, r1
 8017b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017b96:	6013      	str	r3, [r2, #0]
 8017b98:	e027      	b.n	8017bea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8017b9a:	68bb      	ldr	r3, [r7, #8]
 8017b9c:	015a      	lsls	r2, r3, #5
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	4413      	add	r3, r2
 8017ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	68ba      	ldr	r2, [r7, #8]
 8017baa:	0151      	lsls	r1, r2, #5
 8017bac:	68fa      	ldr	r2, [r7, #12]
 8017bae:	440a      	add	r2, r1
 8017bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017bb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017bb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8017bba:	683b      	ldr	r3, [r7, #0]
 8017bbc:	791b      	ldrb	r3, [r3, #4]
 8017bbe:	2b03      	cmp	r3, #3
 8017bc0:	d003      	beq.n	8017bca <USB_EPClearStall+0x9e>
 8017bc2:	683b      	ldr	r3, [r7, #0]
 8017bc4:	791b      	ldrb	r3, [r3, #4]
 8017bc6:	2b02      	cmp	r3, #2
 8017bc8:	d10f      	bne.n	8017bea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8017bca:	68bb      	ldr	r3, [r7, #8]
 8017bcc:	015a      	lsls	r2, r3, #5
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	4413      	add	r3, r2
 8017bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	68ba      	ldr	r2, [r7, #8]
 8017bda:	0151      	lsls	r1, r2, #5
 8017bdc:	68fa      	ldr	r2, [r7, #12]
 8017bde:	440a      	add	r2, r1
 8017be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017be8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8017bea:	2300      	movs	r3, #0
}
 8017bec:	4618      	mov	r0, r3
 8017bee:	3714      	adds	r7, #20
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf6:	4770      	bx	lr

08017bf8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8017bf8:	b480      	push	{r7}
 8017bfa:	b085      	sub	sp, #20
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	6078      	str	r0, [r7, #4]
 8017c00:	460b      	mov	r3, r1
 8017c02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	68fa      	ldr	r2, [r7, #12]
 8017c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017c16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8017c1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017c22:	681a      	ldr	r2, [r3, #0]
 8017c24:	78fb      	ldrb	r3, [r7, #3]
 8017c26:	011b      	lsls	r3, r3, #4
 8017c28:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8017c2c:	68f9      	ldr	r1, [r7, #12]
 8017c2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017c32:	4313      	orrs	r3, r2
 8017c34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8017c36:	2300      	movs	r3, #0
}
 8017c38:	4618      	mov	r0, r3
 8017c3a:	3714      	adds	r7, #20
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c42:	4770      	bx	lr

08017c44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8017c44:	b480      	push	{r7}
 8017c46:	b085      	sub	sp, #20
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	68fa      	ldr	r2, [r7, #12]
 8017c5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017c5e:	f023 0303 	bic.w	r3, r3, #3
 8017c62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017c6a:	685b      	ldr	r3, [r3, #4]
 8017c6c:	68fa      	ldr	r2, [r7, #12]
 8017c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017c72:	f023 0302 	bic.w	r3, r3, #2
 8017c76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017c78:	2300      	movs	r3, #0
}
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	3714      	adds	r7, #20
 8017c7e:	46bd      	mov	sp, r7
 8017c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c84:	4770      	bx	lr

08017c86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8017c86:	b480      	push	{r7}
 8017c88:	b085      	sub	sp, #20
 8017c8a:	af00      	add	r7, sp, #0
 8017c8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	68fa      	ldr	r2, [r7, #12]
 8017c9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017ca0:	f023 0303 	bic.w	r3, r3, #3
 8017ca4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017cac:	685b      	ldr	r3, [r3, #4]
 8017cae:	68fa      	ldr	r2, [r7, #12]
 8017cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017cb4:	f043 0302 	orr.w	r3, r3, #2
 8017cb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017cba:	2300      	movs	r3, #0
}
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	3714      	adds	r7, #20
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc6:	4770      	bx	lr

08017cc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8017cc8:	b480      	push	{r7}
 8017cca:	b085      	sub	sp, #20
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	695b      	ldr	r3, [r3, #20]
 8017cd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	699b      	ldr	r3, [r3, #24]
 8017cda:	68fa      	ldr	r2, [r7, #12]
 8017cdc:	4013      	ands	r3, r2
 8017cde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8017ce0:	68fb      	ldr	r3, [r7, #12]
}
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	3714      	adds	r7, #20
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cec:	4770      	bx	lr

08017cee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8017cee:	b480      	push	{r7}
 8017cf0:	b085      	sub	sp, #20
 8017cf2:	af00      	add	r7, sp, #0
 8017cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017d00:	699b      	ldr	r3, [r3, #24]
 8017d02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017d0a:	69db      	ldr	r3, [r3, #28]
 8017d0c:	68ba      	ldr	r2, [r7, #8]
 8017d0e:	4013      	ands	r3, r2
 8017d10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8017d12:	68bb      	ldr	r3, [r7, #8]
 8017d14:	0c1b      	lsrs	r3, r3, #16
}
 8017d16:	4618      	mov	r0, r3
 8017d18:	3714      	adds	r7, #20
 8017d1a:	46bd      	mov	sp, r7
 8017d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d20:	4770      	bx	lr

08017d22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8017d22:	b480      	push	{r7}
 8017d24:	b085      	sub	sp, #20
 8017d26:	af00      	add	r7, sp, #0
 8017d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017d34:	699b      	ldr	r3, [r3, #24]
 8017d36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017d3e:	69db      	ldr	r3, [r3, #28]
 8017d40:	68ba      	ldr	r2, [r7, #8]
 8017d42:	4013      	ands	r3, r2
 8017d44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8017d46:	68bb      	ldr	r3, [r7, #8]
 8017d48:	b29b      	uxth	r3, r3
}
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	3714      	adds	r7, #20
 8017d4e:	46bd      	mov	sp, r7
 8017d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d54:	4770      	bx	lr

08017d56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8017d56:	b480      	push	{r7}
 8017d58:	b085      	sub	sp, #20
 8017d5a:	af00      	add	r7, sp, #0
 8017d5c:	6078      	str	r0, [r7, #4]
 8017d5e:	460b      	mov	r3, r1
 8017d60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8017d66:	78fb      	ldrb	r3, [r7, #3]
 8017d68:	015a      	lsls	r2, r3, #5
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	4413      	add	r3, r2
 8017d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017d72:	689b      	ldr	r3, [r3, #8]
 8017d74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017d7c:	695b      	ldr	r3, [r3, #20]
 8017d7e:	68ba      	ldr	r2, [r7, #8]
 8017d80:	4013      	ands	r3, r2
 8017d82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8017d84:	68bb      	ldr	r3, [r7, #8]
}
 8017d86:	4618      	mov	r0, r3
 8017d88:	3714      	adds	r7, #20
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d90:	4770      	bx	lr

08017d92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8017d92:	b480      	push	{r7}
 8017d94:	b087      	sub	sp, #28
 8017d96:	af00      	add	r7, sp, #0
 8017d98:	6078      	str	r0, [r7, #4]
 8017d9a:	460b      	mov	r3, r1
 8017d9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8017da2:	697b      	ldr	r3, [r7, #20]
 8017da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017da8:	691b      	ldr	r3, [r3, #16]
 8017daa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8017dac:	697b      	ldr	r3, [r7, #20]
 8017dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017db4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8017db6:	78fb      	ldrb	r3, [r7, #3]
 8017db8:	f003 030f 	and.w	r3, r3, #15
 8017dbc:	68fa      	ldr	r2, [r7, #12]
 8017dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8017dc2:	01db      	lsls	r3, r3, #7
 8017dc4:	b2db      	uxtb	r3, r3
 8017dc6:	693a      	ldr	r2, [r7, #16]
 8017dc8:	4313      	orrs	r3, r2
 8017dca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8017dcc:	78fb      	ldrb	r3, [r7, #3]
 8017dce:	015a      	lsls	r2, r3, #5
 8017dd0:	697b      	ldr	r3, [r7, #20]
 8017dd2:	4413      	add	r3, r2
 8017dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017dd8:	689b      	ldr	r3, [r3, #8]
 8017dda:	693a      	ldr	r2, [r7, #16]
 8017ddc:	4013      	ands	r3, r2
 8017dde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8017de0:	68bb      	ldr	r3, [r7, #8]
}
 8017de2:	4618      	mov	r0, r3
 8017de4:	371c      	adds	r7, #28
 8017de6:	46bd      	mov	sp, r7
 8017de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dec:	4770      	bx	lr

08017dee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8017dee:	b480      	push	{r7}
 8017df0:	b083      	sub	sp, #12
 8017df2:	af00      	add	r7, sp, #0
 8017df4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	695b      	ldr	r3, [r3, #20]
 8017dfa:	f003 0301 	and.w	r3, r3, #1
}
 8017dfe:	4618      	mov	r0, r3
 8017e00:	370c      	adds	r7, #12
 8017e02:	46bd      	mov	sp, r7
 8017e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e08:	4770      	bx	lr

08017e0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8017e0a:	b480      	push	{r7}
 8017e0c:	b085      	sub	sp, #20
 8017e0e:	af00      	add	r7, sp, #0
 8017e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	68fa      	ldr	r2, [r7, #12]
 8017e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017e24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8017e28:	f023 0307 	bic.w	r3, r3, #7
 8017e2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017e34:	685b      	ldr	r3, [r3, #4]
 8017e36:	68fa      	ldr	r2, [r7, #12]
 8017e38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017e40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017e42:	2300      	movs	r3, #0
}
 8017e44:	4618      	mov	r0, r3
 8017e46:	3714      	adds	r7, #20
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e4e:	4770      	bx	lr

08017e50 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8017e50:	b480      	push	{r7}
 8017e52:	b085      	sub	sp, #20
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]
 8017e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	333c      	adds	r3, #60	; 0x3c
 8017e62:	3304      	adds	r3, #4
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8017e68:	68bb      	ldr	r3, [r7, #8]
 8017e6a:	4a1c      	ldr	r2, [pc, #112]	; (8017edc <USB_EP0_OutStart+0x8c>)
 8017e6c:	4293      	cmp	r3, r2
 8017e6e:	d90a      	bls.n	8017e86 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017e80:	d101      	bne.n	8017e86 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8017e82:	2300      	movs	r3, #0
 8017e84:	e024      	b.n	8017ed0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017e8c:	461a      	mov	r2, r3
 8017e8e:	2300      	movs	r3, #0
 8017e90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017e98:	691b      	ldr	r3, [r3, #16]
 8017e9a:	68fa      	ldr	r2, [r7, #12]
 8017e9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017ea0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017ea4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017eac:	691b      	ldr	r3, [r3, #16]
 8017eae:	68fa      	ldr	r2, [r7, #12]
 8017eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017eb4:	f043 0318 	orr.w	r3, r3, #24
 8017eb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017ec0:	691b      	ldr	r3, [r3, #16]
 8017ec2:	68fa      	ldr	r2, [r7, #12]
 8017ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017ec8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8017ecc:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8017ece:	2300      	movs	r3, #0
}
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	3714      	adds	r7, #20
 8017ed4:	46bd      	mov	sp, r7
 8017ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eda:	4770      	bx	lr
 8017edc:	4f54300a 	.word	0x4f54300a

08017ee0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8017ee0:	b480      	push	{r7}
 8017ee2:	b085      	sub	sp, #20
 8017ee4:	af00      	add	r7, sp, #0
 8017ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8017ee8:	2300      	movs	r3, #0
 8017eea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	3301      	adds	r3, #1
 8017ef0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	4a13      	ldr	r2, [pc, #76]	; (8017f44 <USB_CoreReset+0x64>)
 8017ef6:	4293      	cmp	r3, r2
 8017ef8:	d901      	bls.n	8017efe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8017efa:	2303      	movs	r3, #3
 8017efc:	e01b      	b.n	8017f36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	691b      	ldr	r3, [r3, #16]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	daf2      	bge.n	8017eec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8017f06:	2300      	movs	r3, #0
 8017f08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	691b      	ldr	r3, [r3, #16]
 8017f0e:	f043 0201 	orr.w	r2, r3, #1
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	3301      	adds	r3, #1
 8017f1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	4a09      	ldr	r2, [pc, #36]	; (8017f44 <USB_CoreReset+0x64>)
 8017f20:	4293      	cmp	r3, r2
 8017f22:	d901      	bls.n	8017f28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8017f24:	2303      	movs	r3, #3
 8017f26:	e006      	b.n	8017f36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	691b      	ldr	r3, [r3, #16]
 8017f2c:	f003 0301 	and.w	r3, r3, #1
 8017f30:	2b01      	cmp	r3, #1
 8017f32:	d0f0      	beq.n	8017f16 <USB_CoreReset+0x36>

  return HAL_OK;
 8017f34:	2300      	movs	r3, #0
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3714      	adds	r7, #20
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f40:	4770      	bx	lr
 8017f42:	bf00      	nop
 8017f44:	00030d40 	.word	0x00030d40

08017f48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b084      	sub	sp, #16
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
 8017f50:	460b      	mov	r3, r1
 8017f52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8017f54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8017f58:	f002 fa6c 	bl	801a434 <USBD_static_malloc>
 8017f5c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d105      	bne.n	8017f70 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	2200      	movs	r2, #0
 8017f68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8017f6c:	2302      	movs	r3, #2
 8017f6e:	e066      	b.n	801803e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	68fa      	ldr	r2, [r7, #12]
 8017f74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	7c1b      	ldrb	r3, [r3, #16]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d119      	bne.n	8017fb4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8017f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017f84:	2202      	movs	r2, #2
 8017f86:	2181      	movs	r1, #129	; 0x81
 8017f88:	6878      	ldr	r0, [r7, #4]
 8017f8a:	f002 f83f 	bl	801a00c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	2201      	movs	r2, #1
 8017f92:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8017f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017f98:	2202      	movs	r2, #2
 8017f9a:	2101      	movs	r1, #1
 8017f9c:	6878      	ldr	r0, [r7, #4]
 8017f9e:	f002 f835 	bl	801a00c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	2201      	movs	r2, #1
 8017fa6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	2210      	movs	r2, #16
 8017fae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8017fb2:	e016      	b.n	8017fe2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8017fb4:	2340      	movs	r3, #64	; 0x40
 8017fb6:	2202      	movs	r2, #2
 8017fb8:	2181      	movs	r1, #129	; 0x81
 8017fba:	6878      	ldr	r0, [r7, #4]
 8017fbc:	f002 f826 	bl	801a00c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	2201      	movs	r2, #1
 8017fc4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8017fc6:	2340      	movs	r3, #64	; 0x40
 8017fc8:	2202      	movs	r2, #2
 8017fca:	2101      	movs	r1, #1
 8017fcc:	6878      	ldr	r0, [r7, #4]
 8017fce:	f002 f81d 	bl	801a00c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	2201      	movs	r2, #1
 8017fd6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	2210      	movs	r2, #16
 8017fde:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8017fe2:	2308      	movs	r3, #8
 8017fe4:	2203      	movs	r2, #3
 8017fe6:	2182      	movs	r1, #130	; 0x82
 8017fe8:	6878      	ldr	r0, [r7, #4]
 8017fea:	f002 f80f 	bl	801a00c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	2201      	movs	r2, #1
 8017ff2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	2200      	movs	r2, #0
 8018004:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	2200      	movs	r2, #0
 801800c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	7c1b      	ldrb	r3, [r3, #16]
 8018014:	2b00      	cmp	r3, #0
 8018016:	d109      	bne.n	801802c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801801e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018022:	2101      	movs	r1, #1
 8018024:	6878      	ldr	r0, [r7, #4]
 8018026:	f002 f96b 	bl	801a300 <USBD_LL_PrepareReceive>
 801802a:	e007      	b.n	801803c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018032:	2340      	movs	r3, #64	; 0x40
 8018034:	2101      	movs	r1, #1
 8018036:	6878      	ldr	r0, [r7, #4]
 8018038:	f002 f962 	bl	801a300 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801803c:	2300      	movs	r3, #0
}
 801803e:	4618      	mov	r0, r3
 8018040:	3710      	adds	r7, #16
 8018042:	46bd      	mov	sp, r7
 8018044:	bd80      	pop	{r7, pc}

08018046 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018046:	b580      	push	{r7, lr}
 8018048:	b082      	sub	sp, #8
 801804a:	af00      	add	r7, sp, #0
 801804c:	6078      	str	r0, [r7, #4]
 801804e:	460b      	mov	r3, r1
 8018050:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8018052:	2181      	movs	r1, #129	; 0x81
 8018054:	6878      	ldr	r0, [r7, #4]
 8018056:	f002 f817 	bl	801a088 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	2200      	movs	r2, #0
 801805e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8018060:	2101      	movs	r1, #1
 8018062:	6878      	ldr	r0, [r7, #4]
 8018064:	f002 f810 	bl	801a088 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	2200      	movs	r2, #0
 801806c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8018070:	2182      	movs	r1, #130	; 0x82
 8018072:	6878      	ldr	r0, [r7, #4]
 8018074:	f002 f808 	bl	801a088 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	2200      	movs	r2, #0
 801807c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	2200      	movs	r2, #0
 8018084:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801808e:	2b00      	cmp	r3, #0
 8018090:	d00e      	beq.n	80180b0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018098:	685b      	ldr	r3, [r3, #4]
 801809a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80180a2:	4618      	mov	r0, r3
 80180a4:	f002 f9d4 	bl	801a450 <USBD_static_free>
    pdev->pClassData = NULL;
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	2200      	movs	r2, #0
 80180ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80180b0:	2300      	movs	r3, #0
}
 80180b2:	4618      	mov	r0, r3
 80180b4:	3708      	adds	r7, #8
 80180b6:	46bd      	mov	sp, r7
 80180b8:	bd80      	pop	{r7, pc}
	...

080180bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80180bc:	b580      	push	{r7, lr}
 80180be:	b086      	sub	sp, #24
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
 80180c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80180cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80180ce:	2300      	movs	r3, #0
 80180d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80180d2:	2300      	movs	r3, #0
 80180d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80180d6:	2300      	movs	r3, #0
 80180d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80180da:	693b      	ldr	r3, [r7, #16]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d101      	bne.n	80180e4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80180e0:	2303      	movs	r3, #3
 80180e2:	e0af      	b.n	8018244 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80180e4:	683b      	ldr	r3, [r7, #0]
 80180e6:	781b      	ldrb	r3, [r3, #0]
 80180e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d03f      	beq.n	8018170 <USBD_CDC_Setup+0xb4>
 80180f0:	2b20      	cmp	r3, #32
 80180f2:	f040 809f 	bne.w	8018234 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80180f6:	683b      	ldr	r3, [r7, #0]
 80180f8:	88db      	ldrh	r3, [r3, #6]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d02e      	beq.n	801815c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80180fe:	683b      	ldr	r3, [r7, #0]
 8018100:	781b      	ldrb	r3, [r3, #0]
 8018102:	b25b      	sxtb	r3, r3
 8018104:	2b00      	cmp	r3, #0
 8018106:	da16      	bge.n	8018136 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801810e:	689b      	ldr	r3, [r3, #8]
 8018110:	683a      	ldr	r2, [r7, #0]
 8018112:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8018114:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8018116:	683a      	ldr	r2, [r7, #0]
 8018118:	88d2      	ldrh	r2, [r2, #6]
 801811a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801811c:	683b      	ldr	r3, [r7, #0]
 801811e:	88db      	ldrh	r3, [r3, #6]
 8018120:	2b07      	cmp	r3, #7
 8018122:	bf28      	it	cs
 8018124:	2307      	movcs	r3, #7
 8018126:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8018128:	693b      	ldr	r3, [r7, #16]
 801812a:	89fa      	ldrh	r2, [r7, #14]
 801812c:	4619      	mov	r1, r3
 801812e:	6878      	ldr	r0, [r7, #4]
 8018130:	f001 fb13 	bl	801975a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8018134:	e085      	b.n	8018242 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8018136:	683b      	ldr	r3, [r7, #0]
 8018138:	785a      	ldrb	r2, [r3, #1]
 801813a:	693b      	ldr	r3, [r7, #16]
 801813c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8018140:	683b      	ldr	r3, [r7, #0]
 8018142:	88db      	ldrh	r3, [r3, #6]
 8018144:	b2da      	uxtb	r2, r3
 8018146:	693b      	ldr	r3, [r7, #16]
 8018148:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801814c:	6939      	ldr	r1, [r7, #16]
 801814e:	683b      	ldr	r3, [r7, #0]
 8018150:	88db      	ldrh	r3, [r3, #6]
 8018152:	461a      	mov	r2, r3
 8018154:	6878      	ldr	r0, [r7, #4]
 8018156:	f001 fb2c 	bl	80197b2 <USBD_CtlPrepareRx>
      break;
 801815a:	e072      	b.n	8018242 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018162:	689b      	ldr	r3, [r3, #8]
 8018164:	683a      	ldr	r2, [r7, #0]
 8018166:	7850      	ldrb	r0, [r2, #1]
 8018168:	2200      	movs	r2, #0
 801816a:	6839      	ldr	r1, [r7, #0]
 801816c:	4798      	blx	r3
      break;
 801816e:	e068      	b.n	8018242 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018170:	683b      	ldr	r3, [r7, #0]
 8018172:	785b      	ldrb	r3, [r3, #1]
 8018174:	2b0b      	cmp	r3, #11
 8018176:	d852      	bhi.n	801821e <USBD_CDC_Setup+0x162>
 8018178:	a201      	add	r2, pc, #4	; (adr r2, 8018180 <USBD_CDC_Setup+0xc4>)
 801817a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801817e:	bf00      	nop
 8018180:	080181b1 	.word	0x080181b1
 8018184:	0801822d 	.word	0x0801822d
 8018188:	0801821f 	.word	0x0801821f
 801818c:	0801821f 	.word	0x0801821f
 8018190:	0801821f 	.word	0x0801821f
 8018194:	0801821f 	.word	0x0801821f
 8018198:	0801821f 	.word	0x0801821f
 801819c:	0801821f 	.word	0x0801821f
 80181a0:	0801821f 	.word	0x0801821f
 80181a4:	0801821f 	.word	0x0801821f
 80181a8:	080181db 	.word	0x080181db
 80181ac:	08018205 	.word	0x08018205
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80181b6:	b2db      	uxtb	r3, r3
 80181b8:	2b03      	cmp	r3, #3
 80181ba:	d107      	bne.n	80181cc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80181bc:	f107 030a 	add.w	r3, r7, #10
 80181c0:	2202      	movs	r2, #2
 80181c2:	4619      	mov	r1, r3
 80181c4:	6878      	ldr	r0, [r7, #4]
 80181c6:	f001 fac8 	bl	801975a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80181ca:	e032      	b.n	8018232 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80181cc:	6839      	ldr	r1, [r7, #0]
 80181ce:	6878      	ldr	r0, [r7, #4]
 80181d0:	f001 fa52 	bl	8019678 <USBD_CtlError>
            ret = USBD_FAIL;
 80181d4:	2303      	movs	r3, #3
 80181d6:	75fb      	strb	r3, [r7, #23]
          break;
 80181d8:	e02b      	b.n	8018232 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80181e0:	b2db      	uxtb	r3, r3
 80181e2:	2b03      	cmp	r3, #3
 80181e4:	d107      	bne.n	80181f6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80181e6:	f107 030d 	add.w	r3, r7, #13
 80181ea:	2201      	movs	r2, #1
 80181ec:	4619      	mov	r1, r3
 80181ee:	6878      	ldr	r0, [r7, #4]
 80181f0:	f001 fab3 	bl	801975a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80181f4:	e01d      	b.n	8018232 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80181f6:	6839      	ldr	r1, [r7, #0]
 80181f8:	6878      	ldr	r0, [r7, #4]
 80181fa:	f001 fa3d 	bl	8019678 <USBD_CtlError>
            ret = USBD_FAIL;
 80181fe:	2303      	movs	r3, #3
 8018200:	75fb      	strb	r3, [r7, #23]
          break;
 8018202:	e016      	b.n	8018232 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801820a:	b2db      	uxtb	r3, r3
 801820c:	2b03      	cmp	r3, #3
 801820e:	d00f      	beq.n	8018230 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8018210:	6839      	ldr	r1, [r7, #0]
 8018212:	6878      	ldr	r0, [r7, #4]
 8018214:	f001 fa30 	bl	8019678 <USBD_CtlError>
            ret = USBD_FAIL;
 8018218:	2303      	movs	r3, #3
 801821a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801821c:	e008      	b.n	8018230 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801821e:	6839      	ldr	r1, [r7, #0]
 8018220:	6878      	ldr	r0, [r7, #4]
 8018222:	f001 fa29 	bl	8019678 <USBD_CtlError>
          ret = USBD_FAIL;
 8018226:	2303      	movs	r3, #3
 8018228:	75fb      	strb	r3, [r7, #23]
          break;
 801822a:	e002      	b.n	8018232 <USBD_CDC_Setup+0x176>
          break;
 801822c:	bf00      	nop
 801822e:	e008      	b.n	8018242 <USBD_CDC_Setup+0x186>
          break;
 8018230:	bf00      	nop
      }
      break;
 8018232:	e006      	b.n	8018242 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8018234:	6839      	ldr	r1, [r7, #0]
 8018236:	6878      	ldr	r0, [r7, #4]
 8018238:	f001 fa1e 	bl	8019678 <USBD_CtlError>
      ret = USBD_FAIL;
 801823c:	2303      	movs	r3, #3
 801823e:	75fb      	strb	r3, [r7, #23]
      break;
 8018240:	bf00      	nop
  }

  return (uint8_t)ret;
 8018242:	7dfb      	ldrb	r3, [r7, #23]
}
 8018244:	4618      	mov	r0, r3
 8018246:	3718      	adds	r7, #24
 8018248:	46bd      	mov	sp, r7
 801824a:	bd80      	pop	{r7, pc}

0801824c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801824c:	b580      	push	{r7, lr}
 801824e:	b084      	sub	sp, #16
 8018250:	af00      	add	r7, sp, #0
 8018252:	6078      	str	r0, [r7, #4]
 8018254:	460b      	mov	r3, r1
 8018256:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801825e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018266:	2b00      	cmp	r3, #0
 8018268:	d101      	bne.n	801826e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801826a:	2303      	movs	r3, #3
 801826c:	e04f      	b.n	801830e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018274:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8018276:	78fa      	ldrb	r2, [r7, #3]
 8018278:	6879      	ldr	r1, [r7, #4]
 801827a:	4613      	mov	r3, r2
 801827c:	009b      	lsls	r3, r3, #2
 801827e:	4413      	add	r3, r2
 8018280:	009b      	lsls	r3, r3, #2
 8018282:	440b      	add	r3, r1
 8018284:	3318      	adds	r3, #24
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d029      	beq.n	80182e0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801828c:	78fa      	ldrb	r2, [r7, #3]
 801828e:	6879      	ldr	r1, [r7, #4]
 8018290:	4613      	mov	r3, r2
 8018292:	009b      	lsls	r3, r3, #2
 8018294:	4413      	add	r3, r2
 8018296:	009b      	lsls	r3, r3, #2
 8018298:	440b      	add	r3, r1
 801829a:	3318      	adds	r3, #24
 801829c:	681a      	ldr	r2, [r3, #0]
 801829e:	78f9      	ldrb	r1, [r7, #3]
 80182a0:	68f8      	ldr	r0, [r7, #12]
 80182a2:	460b      	mov	r3, r1
 80182a4:	00db      	lsls	r3, r3, #3
 80182a6:	440b      	add	r3, r1
 80182a8:	009b      	lsls	r3, r3, #2
 80182aa:	4403      	add	r3, r0
 80182ac:	3348      	adds	r3, #72	; 0x48
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80182b4:	fb01 f303 	mul.w	r3, r1, r3
 80182b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d110      	bne.n	80182e0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80182be:	78fa      	ldrb	r2, [r7, #3]
 80182c0:	6879      	ldr	r1, [r7, #4]
 80182c2:	4613      	mov	r3, r2
 80182c4:	009b      	lsls	r3, r3, #2
 80182c6:	4413      	add	r3, r2
 80182c8:	009b      	lsls	r3, r3, #2
 80182ca:	440b      	add	r3, r1
 80182cc:	3318      	adds	r3, #24
 80182ce:	2200      	movs	r2, #0
 80182d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80182d2:	78f9      	ldrb	r1, [r7, #3]
 80182d4:	2300      	movs	r3, #0
 80182d6:	2200      	movs	r2, #0
 80182d8:	6878      	ldr	r0, [r7, #4]
 80182da:	f001 ffd9 	bl	801a290 <USBD_LL_Transmit>
 80182de:	e015      	b.n	801830c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80182e0:	68bb      	ldr	r3, [r7, #8]
 80182e2:	2200      	movs	r2, #0
 80182e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80182ee:	691b      	ldr	r3, [r3, #16]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d00b      	beq.n	801830c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80182fa:	691b      	ldr	r3, [r3, #16]
 80182fc:	68ba      	ldr	r2, [r7, #8]
 80182fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8018302:	68ba      	ldr	r2, [r7, #8]
 8018304:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8018308:	78fa      	ldrb	r2, [r7, #3]
 801830a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801830c:	2300      	movs	r3, #0
}
 801830e:	4618      	mov	r0, r3
 8018310:	3710      	adds	r7, #16
 8018312:	46bd      	mov	sp, r7
 8018314:	bd80      	pop	{r7, pc}

08018316 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018316:	b580      	push	{r7, lr}
 8018318:	b084      	sub	sp, #16
 801831a:	af00      	add	r7, sp, #0
 801831c:	6078      	str	r0, [r7, #4]
 801831e:	460b      	mov	r3, r1
 8018320:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018328:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018330:	2b00      	cmp	r3, #0
 8018332:	d101      	bne.n	8018338 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8018334:	2303      	movs	r3, #3
 8018336:	e015      	b.n	8018364 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8018338:	78fb      	ldrb	r3, [r7, #3]
 801833a:	4619      	mov	r1, r3
 801833c:	6878      	ldr	r0, [r7, #4]
 801833e:	f002 f817 	bl	801a370 <USBD_LL_GetRxDataSize>
 8018342:	4602      	mov	r2, r0
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018350:	68db      	ldr	r3, [r3, #12]
 8018352:	68fa      	ldr	r2, [r7, #12]
 8018354:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8018358:	68fa      	ldr	r2, [r7, #12]
 801835a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801835e:	4611      	mov	r1, r2
 8018360:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8018362:	2300      	movs	r3, #0
}
 8018364:	4618      	mov	r0, r3
 8018366:	3710      	adds	r7, #16
 8018368:	46bd      	mov	sp, r7
 801836a:	bd80      	pop	{r7, pc}

0801836c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b084      	sub	sp, #16
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801837a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d101      	bne.n	8018386 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8018382:	2303      	movs	r3, #3
 8018384:	e01b      	b.n	80183be <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801838c:	2b00      	cmp	r3, #0
 801838e:	d015      	beq.n	80183bc <USBD_CDC_EP0_RxReady+0x50>
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8018396:	2bff      	cmp	r3, #255	; 0xff
 8018398:	d010      	beq.n	80183bc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80183a0:	689b      	ldr	r3, [r3, #8]
 80183a2:	68fa      	ldr	r2, [r7, #12]
 80183a4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80183a8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80183aa:	68fa      	ldr	r2, [r7, #12]
 80183ac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80183b0:	b292      	uxth	r2, r2
 80183b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	22ff      	movs	r2, #255	; 0xff
 80183b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80183bc:	2300      	movs	r3, #0
}
 80183be:	4618      	mov	r0, r3
 80183c0:	3710      	adds	r7, #16
 80183c2:	46bd      	mov	sp, r7
 80183c4:	bd80      	pop	{r7, pc}
	...

080183c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80183c8:	b480      	push	{r7}
 80183ca:	b083      	sub	sp, #12
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	2243      	movs	r2, #67	; 0x43
 80183d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80183d6:	4b03      	ldr	r3, [pc, #12]	; (80183e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80183d8:	4618      	mov	r0, r3
 80183da:	370c      	adds	r7, #12
 80183dc:	46bd      	mov	sp, r7
 80183de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e2:	4770      	bx	lr
 80183e4:	200005ec 	.word	0x200005ec

080183e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80183e8:	b480      	push	{r7}
 80183ea:	b083      	sub	sp, #12
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	2243      	movs	r2, #67	; 0x43
 80183f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80183f6:	4b03      	ldr	r3, [pc, #12]	; (8018404 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80183f8:	4618      	mov	r0, r3
 80183fa:	370c      	adds	r7, #12
 80183fc:	46bd      	mov	sp, r7
 80183fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018402:	4770      	bx	lr
 8018404:	200005a8 	.word	0x200005a8

08018408 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8018408:	b480      	push	{r7}
 801840a:	b083      	sub	sp, #12
 801840c:	af00      	add	r7, sp, #0
 801840e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	2243      	movs	r2, #67	; 0x43
 8018414:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8018416:	4b03      	ldr	r3, [pc, #12]	; (8018424 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8018418:	4618      	mov	r0, r3
 801841a:	370c      	adds	r7, #12
 801841c:	46bd      	mov	sp, r7
 801841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018422:	4770      	bx	lr
 8018424:	20000630 	.word	0x20000630

08018428 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8018428:	b480      	push	{r7}
 801842a:	b083      	sub	sp, #12
 801842c:	af00      	add	r7, sp, #0
 801842e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	220a      	movs	r2, #10
 8018434:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8018436:	4b03      	ldr	r3, [pc, #12]	; (8018444 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8018438:	4618      	mov	r0, r3
 801843a:	370c      	adds	r7, #12
 801843c:	46bd      	mov	sp, r7
 801843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018442:	4770      	bx	lr
 8018444:	20000564 	.word	0x20000564

08018448 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8018448:	b480      	push	{r7}
 801844a:	b083      	sub	sp, #12
 801844c:	af00      	add	r7, sp, #0
 801844e:	6078      	str	r0, [r7, #4]
 8018450:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8018452:	683b      	ldr	r3, [r7, #0]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d101      	bne.n	801845c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8018458:	2303      	movs	r3, #3
 801845a:	e004      	b.n	8018466 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	683a      	ldr	r2, [r7, #0]
 8018460:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8018464:	2300      	movs	r3, #0
}
 8018466:	4618      	mov	r0, r3
 8018468:	370c      	adds	r7, #12
 801846a:	46bd      	mov	sp, r7
 801846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018470:	4770      	bx	lr

08018472 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8018472:	b480      	push	{r7}
 8018474:	b087      	sub	sp, #28
 8018476:	af00      	add	r7, sp, #0
 8018478:	60f8      	str	r0, [r7, #12]
 801847a:	60b9      	str	r1, [r7, #8]
 801847c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018484:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8018486:	697b      	ldr	r3, [r7, #20]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d101      	bne.n	8018490 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801848c:	2303      	movs	r3, #3
 801848e:	e008      	b.n	80184a2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8018490:	697b      	ldr	r3, [r7, #20]
 8018492:	68ba      	ldr	r2, [r7, #8]
 8018494:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8018498:	697b      	ldr	r3, [r7, #20]
 801849a:	687a      	ldr	r2, [r7, #4]
 801849c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80184a0:	2300      	movs	r3, #0
}
 80184a2:	4618      	mov	r0, r3
 80184a4:	371c      	adds	r7, #28
 80184a6:	46bd      	mov	sp, r7
 80184a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ac:	4770      	bx	lr

080184ae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80184ae:	b480      	push	{r7}
 80184b0:	b085      	sub	sp, #20
 80184b2:	af00      	add	r7, sp, #0
 80184b4:	6078      	str	r0, [r7, #4]
 80184b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80184be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d101      	bne.n	80184ca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80184c6:	2303      	movs	r3, #3
 80184c8:	e004      	b.n	80184d4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80184ca:	68fb      	ldr	r3, [r7, #12]
 80184cc:	683a      	ldr	r2, [r7, #0]
 80184ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80184d2:	2300      	movs	r3, #0
}
 80184d4:	4618      	mov	r0, r3
 80184d6:	3714      	adds	r7, #20
 80184d8:	46bd      	mov	sp, r7
 80184da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184de:	4770      	bx	lr

080184e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b084      	sub	sp, #16
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80184ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d101      	bne.n	80184fe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80184fa:	2303      	movs	r3, #3
 80184fc:	e016      	b.n	801852c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	7c1b      	ldrb	r3, [r3, #16]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d109      	bne.n	801851a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801850c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018510:	2101      	movs	r1, #1
 8018512:	6878      	ldr	r0, [r7, #4]
 8018514:	f001 fef4 	bl	801a300 <USBD_LL_PrepareReceive>
 8018518:	e007      	b.n	801852a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801851a:	68fb      	ldr	r3, [r7, #12]
 801851c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018520:	2340      	movs	r3, #64	; 0x40
 8018522:	2101      	movs	r1, #1
 8018524:	6878      	ldr	r0, [r7, #4]
 8018526:	f001 feeb 	bl	801a300 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801852a:	2300      	movs	r3, #0
}
 801852c:	4618      	mov	r0, r3
 801852e:	3710      	adds	r7, #16
 8018530:	46bd      	mov	sp, r7
 8018532:	bd80      	pop	{r7, pc}

08018534 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b086      	sub	sp, #24
 8018538:	af00      	add	r7, sp, #0
 801853a:	60f8      	str	r0, [r7, #12]
 801853c:	60b9      	str	r1, [r7, #8]
 801853e:	4613      	mov	r3, r2
 8018540:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d101      	bne.n	801854c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8018548:	2303      	movs	r3, #3
 801854a:	e01f      	b.n	801858c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	2200      	movs	r2, #0
 8018550:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	2200      	movs	r2, #0
 8018558:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	2200      	movs	r2, #0
 8018560:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8018564:	68bb      	ldr	r3, [r7, #8]
 8018566:	2b00      	cmp	r3, #0
 8018568:	d003      	beq.n	8018572 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	68ba      	ldr	r2, [r7, #8]
 801856e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	2201      	movs	r2, #1
 8018576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	79fa      	ldrb	r2, [r7, #7]
 801857e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8018580:	68f8      	ldr	r0, [r7, #12]
 8018582:	f001 fcc5 	bl	8019f10 <USBD_LL_Init>
 8018586:	4603      	mov	r3, r0
 8018588:	75fb      	strb	r3, [r7, #23]

  return ret;
 801858a:	7dfb      	ldrb	r3, [r7, #23]
}
 801858c:	4618      	mov	r0, r3
 801858e:	3718      	adds	r7, #24
 8018590:	46bd      	mov	sp, r7
 8018592:	bd80      	pop	{r7, pc}

08018594 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8018594:	b580      	push	{r7, lr}
 8018596:	b084      	sub	sp, #16
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
 801859c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801859e:	2300      	movs	r3, #0
 80185a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80185a2:	683b      	ldr	r3, [r7, #0]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d101      	bne.n	80185ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80185a8:	2303      	movs	r3, #3
 80185aa:	e016      	b.n	80185da <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	683a      	ldr	r2, [r7, #0]
 80185b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80185ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d00b      	beq.n	80185d8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80185c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185c8:	f107 020e 	add.w	r2, r7, #14
 80185cc:	4610      	mov	r0, r2
 80185ce:	4798      	blx	r3
 80185d0:	4602      	mov	r2, r0
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80185d8:	2300      	movs	r3, #0
}
 80185da:	4618      	mov	r0, r3
 80185dc:	3710      	adds	r7, #16
 80185de:	46bd      	mov	sp, r7
 80185e0:	bd80      	pop	{r7, pc}

080185e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80185e2:	b580      	push	{r7, lr}
 80185e4:	b082      	sub	sp, #8
 80185e6:	af00      	add	r7, sp, #0
 80185e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80185ea:	6878      	ldr	r0, [r7, #4]
 80185ec:	f001 fcdc 	bl	8019fa8 <USBD_LL_Start>
 80185f0:	4603      	mov	r3, r0
}
 80185f2:	4618      	mov	r0, r3
 80185f4:	3708      	adds	r7, #8
 80185f6:	46bd      	mov	sp, r7
 80185f8:	bd80      	pop	{r7, pc}

080185fa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80185fa:	b480      	push	{r7}
 80185fc:	b083      	sub	sp, #12
 80185fe:	af00      	add	r7, sp, #0
 8018600:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8018602:	2300      	movs	r3, #0
}
 8018604:	4618      	mov	r0, r3
 8018606:	370c      	adds	r7, #12
 8018608:	46bd      	mov	sp, r7
 801860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801860e:	4770      	bx	lr

08018610 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018610:	b580      	push	{r7, lr}
 8018612:	b084      	sub	sp, #16
 8018614:	af00      	add	r7, sp, #0
 8018616:	6078      	str	r0, [r7, #4]
 8018618:	460b      	mov	r3, r1
 801861a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801861c:	2303      	movs	r3, #3
 801861e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018626:	2b00      	cmp	r3, #0
 8018628:	d009      	beq.n	801863e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	78fa      	ldrb	r2, [r7, #3]
 8018634:	4611      	mov	r1, r2
 8018636:	6878      	ldr	r0, [r7, #4]
 8018638:	4798      	blx	r3
 801863a:	4603      	mov	r3, r0
 801863c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801863e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018640:	4618      	mov	r0, r3
 8018642:	3710      	adds	r7, #16
 8018644:	46bd      	mov	sp, r7
 8018646:	bd80      	pop	{r7, pc}

08018648 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018648:	b580      	push	{r7, lr}
 801864a:	b082      	sub	sp, #8
 801864c:	af00      	add	r7, sp, #0
 801864e:	6078      	str	r0, [r7, #4]
 8018650:	460b      	mov	r3, r1
 8018652:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801865a:	2b00      	cmp	r3, #0
 801865c:	d007      	beq.n	801866e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018664:	685b      	ldr	r3, [r3, #4]
 8018666:	78fa      	ldrb	r2, [r7, #3]
 8018668:	4611      	mov	r1, r2
 801866a:	6878      	ldr	r0, [r7, #4]
 801866c:	4798      	blx	r3
  }

  return USBD_OK;
 801866e:	2300      	movs	r3, #0
}
 8018670:	4618      	mov	r0, r3
 8018672:	3708      	adds	r7, #8
 8018674:	46bd      	mov	sp, r7
 8018676:	bd80      	pop	{r7, pc}

08018678 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8018678:	b580      	push	{r7, lr}
 801867a:	b084      	sub	sp, #16
 801867c:	af00      	add	r7, sp, #0
 801867e:	6078      	str	r0, [r7, #4]
 8018680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018688:	6839      	ldr	r1, [r7, #0]
 801868a:	4618      	mov	r0, r3
 801868c:	f000 ffba 	bl	8019604 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	2201      	movs	r2, #1
 8018694:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801869e:	461a      	mov	r2, r3
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80186ac:	f003 031f 	and.w	r3, r3, #31
 80186b0:	2b02      	cmp	r3, #2
 80186b2:	d01a      	beq.n	80186ea <USBD_LL_SetupStage+0x72>
 80186b4:	2b02      	cmp	r3, #2
 80186b6:	d822      	bhi.n	80186fe <USBD_LL_SetupStage+0x86>
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d002      	beq.n	80186c2 <USBD_LL_SetupStage+0x4a>
 80186bc:	2b01      	cmp	r3, #1
 80186be:	d00a      	beq.n	80186d6 <USBD_LL_SetupStage+0x5e>
 80186c0:	e01d      	b.n	80186fe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80186c8:	4619      	mov	r1, r3
 80186ca:	6878      	ldr	r0, [r7, #4]
 80186cc:	f000 fa62 	bl	8018b94 <USBD_StdDevReq>
 80186d0:	4603      	mov	r3, r0
 80186d2:	73fb      	strb	r3, [r7, #15]
      break;
 80186d4:	e020      	b.n	8018718 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80186dc:	4619      	mov	r1, r3
 80186de:	6878      	ldr	r0, [r7, #4]
 80186e0:	f000 fac6 	bl	8018c70 <USBD_StdItfReq>
 80186e4:	4603      	mov	r3, r0
 80186e6:	73fb      	strb	r3, [r7, #15]
      break;
 80186e8:	e016      	b.n	8018718 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80186f0:	4619      	mov	r1, r3
 80186f2:	6878      	ldr	r0, [r7, #4]
 80186f4:	f000 fb05 	bl	8018d02 <USBD_StdEPReq>
 80186f8:	4603      	mov	r3, r0
 80186fa:	73fb      	strb	r3, [r7, #15]
      break;
 80186fc:	e00c      	b.n	8018718 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8018704:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018708:	b2db      	uxtb	r3, r3
 801870a:	4619      	mov	r1, r3
 801870c:	6878      	ldr	r0, [r7, #4]
 801870e:	f001 fcf1 	bl	801a0f4 <USBD_LL_StallEP>
 8018712:	4603      	mov	r3, r0
 8018714:	73fb      	strb	r3, [r7, #15]
      break;
 8018716:	bf00      	nop
  }

  return ret;
 8018718:	7bfb      	ldrb	r3, [r7, #15]
}
 801871a:	4618      	mov	r0, r3
 801871c:	3710      	adds	r7, #16
 801871e:	46bd      	mov	sp, r7
 8018720:	bd80      	pop	{r7, pc}

08018722 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8018722:	b580      	push	{r7, lr}
 8018724:	b086      	sub	sp, #24
 8018726:	af00      	add	r7, sp, #0
 8018728:	60f8      	str	r0, [r7, #12]
 801872a:	460b      	mov	r3, r1
 801872c:	607a      	str	r2, [r7, #4]
 801872e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8018730:	7afb      	ldrb	r3, [r7, #11]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d138      	bne.n	80187a8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801873c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801873e:	68fb      	ldr	r3, [r7, #12]
 8018740:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8018744:	2b03      	cmp	r3, #3
 8018746:	d14a      	bne.n	80187de <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8018748:	693b      	ldr	r3, [r7, #16]
 801874a:	689a      	ldr	r2, [r3, #8]
 801874c:	693b      	ldr	r3, [r7, #16]
 801874e:	68db      	ldr	r3, [r3, #12]
 8018750:	429a      	cmp	r2, r3
 8018752:	d913      	bls.n	801877c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8018754:	693b      	ldr	r3, [r7, #16]
 8018756:	689a      	ldr	r2, [r3, #8]
 8018758:	693b      	ldr	r3, [r7, #16]
 801875a:	68db      	ldr	r3, [r3, #12]
 801875c:	1ad2      	subs	r2, r2, r3
 801875e:	693b      	ldr	r3, [r7, #16]
 8018760:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8018762:	693b      	ldr	r3, [r7, #16]
 8018764:	68da      	ldr	r2, [r3, #12]
 8018766:	693b      	ldr	r3, [r7, #16]
 8018768:	689b      	ldr	r3, [r3, #8]
 801876a:	4293      	cmp	r3, r2
 801876c:	bf28      	it	cs
 801876e:	4613      	movcs	r3, r2
 8018770:	461a      	mov	r2, r3
 8018772:	6879      	ldr	r1, [r7, #4]
 8018774:	68f8      	ldr	r0, [r7, #12]
 8018776:	f001 f839 	bl	80197ec <USBD_CtlContinueRx>
 801877a:	e030      	b.n	80187de <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018782:	b2db      	uxtb	r3, r3
 8018784:	2b03      	cmp	r3, #3
 8018786:	d10b      	bne.n	80187a0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801878e:	691b      	ldr	r3, [r3, #16]
 8018790:	2b00      	cmp	r3, #0
 8018792:	d005      	beq.n	80187a0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801879a:	691b      	ldr	r3, [r3, #16]
 801879c:	68f8      	ldr	r0, [r7, #12]
 801879e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80187a0:	68f8      	ldr	r0, [r7, #12]
 80187a2:	f001 f834 	bl	801980e <USBD_CtlSendStatus>
 80187a6:	e01a      	b.n	80187de <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80187ae:	b2db      	uxtb	r3, r3
 80187b0:	2b03      	cmp	r3, #3
 80187b2:	d114      	bne.n	80187de <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80187ba:	699b      	ldr	r3, [r3, #24]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d00e      	beq.n	80187de <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80187c6:	699b      	ldr	r3, [r3, #24]
 80187c8:	7afa      	ldrb	r2, [r7, #11]
 80187ca:	4611      	mov	r1, r2
 80187cc:	68f8      	ldr	r0, [r7, #12]
 80187ce:	4798      	blx	r3
 80187d0:	4603      	mov	r3, r0
 80187d2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80187d4:	7dfb      	ldrb	r3, [r7, #23]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d001      	beq.n	80187de <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80187da:	7dfb      	ldrb	r3, [r7, #23]
 80187dc:	e000      	b.n	80187e0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80187de:	2300      	movs	r3, #0
}
 80187e0:	4618      	mov	r0, r3
 80187e2:	3718      	adds	r7, #24
 80187e4:	46bd      	mov	sp, r7
 80187e6:	bd80      	pop	{r7, pc}

080187e8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80187e8:	b580      	push	{r7, lr}
 80187ea:	b086      	sub	sp, #24
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	60f8      	str	r0, [r7, #12]
 80187f0:	460b      	mov	r3, r1
 80187f2:	607a      	str	r2, [r7, #4]
 80187f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80187f6:	7afb      	ldrb	r3, [r7, #11]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d16b      	bne.n	80188d4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	3314      	adds	r3, #20
 8018800:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8018808:	2b02      	cmp	r3, #2
 801880a:	d156      	bne.n	80188ba <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801880c:	693b      	ldr	r3, [r7, #16]
 801880e:	689a      	ldr	r2, [r3, #8]
 8018810:	693b      	ldr	r3, [r7, #16]
 8018812:	68db      	ldr	r3, [r3, #12]
 8018814:	429a      	cmp	r2, r3
 8018816:	d914      	bls.n	8018842 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8018818:	693b      	ldr	r3, [r7, #16]
 801881a:	689a      	ldr	r2, [r3, #8]
 801881c:	693b      	ldr	r3, [r7, #16]
 801881e:	68db      	ldr	r3, [r3, #12]
 8018820:	1ad2      	subs	r2, r2, r3
 8018822:	693b      	ldr	r3, [r7, #16]
 8018824:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8018826:	693b      	ldr	r3, [r7, #16]
 8018828:	689b      	ldr	r3, [r3, #8]
 801882a:	461a      	mov	r2, r3
 801882c:	6879      	ldr	r1, [r7, #4]
 801882e:	68f8      	ldr	r0, [r7, #12]
 8018830:	f000 ffae 	bl	8019790 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018834:	2300      	movs	r3, #0
 8018836:	2200      	movs	r2, #0
 8018838:	2100      	movs	r1, #0
 801883a:	68f8      	ldr	r0, [r7, #12]
 801883c:	f001 fd60 	bl	801a300 <USBD_LL_PrepareReceive>
 8018840:	e03b      	b.n	80188ba <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8018842:	693b      	ldr	r3, [r7, #16]
 8018844:	68da      	ldr	r2, [r3, #12]
 8018846:	693b      	ldr	r3, [r7, #16]
 8018848:	689b      	ldr	r3, [r3, #8]
 801884a:	429a      	cmp	r2, r3
 801884c:	d11c      	bne.n	8018888 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801884e:	693b      	ldr	r3, [r7, #16]
 8018850:	685a      	ldr	r2, [r3, #4]
 8018852:	693b      	ldr	r3, [r7, #16]
 8018854:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8018856:	429a      	cmp	r2, r3
 8018858:	d316      	bcc.n	8018888 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801885a:	693b      	ldr	r3, [r7, #16]
 801885c:	685a      	ldr	r2, [r3, #4]
 801885e:	68fb      	ldr	r3, [r7, #12]
 8018860:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8018864:	429a      	cmp	r2, r3
 8018866:	d20f      	bcs.n	8018888 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8018868:	2200      	movs	r2, #0
 801886a:	2100      	movs	r1, #0
 801886c:	68f8      	ldr	r0, [r7, #12]
 801886e:	f000 ff8f 	bl	8019790 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	2200      	movs	r2, #0
 8018876:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801887a:	2300      	movs	r3, #0
 801887c:	2200      	movs	r2, #0
 801887e:	2100      	movs	r1, #0
 8018880:	68f8      	ldr	r0, [r7, #12]
 8018882:	f001 fd3d 	bl	801a300 <USBD_LL_PrepareReceive>
 8018886:	e018      	b.n	80188ba <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801888e:	b2db      	uxtb	r3, r3
 8018890:	2b03      	cmp	r3, #3
 8018892:	d10b      	bne.n	80188ac <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801889a:	68db      	ldr	r3, [r3, #12]
 801889c:	2b00      	cmp	r3, #0
 801889e:	d005      	beq.n	80188ac <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80188a6:	68db      	ldr	r3, [r3, #12]
 80188a8:	68f8      	ldr	r0, [r7, #12]
 80188aa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80188ac:	2180      	movs	r1, #128	; 0x80
 80188ae:	68f8      	ldr	r0, [r7, #12]
 80188b0:	f001 fc20 	bl	801a0f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80188b4:	68f8      	ldr	r0, [r7, #12]
 80188b6:	f000 ffbd 	bl	8019834 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80188c0:	2b01      	cmp	r3, #1
 80188c2:	d122      	bne.n	801890a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80188c4:	68f8      	ldr	r0, [r7, #12]
 80188c6:	f7ff fe98 	bl	80185fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	2200      	movs	r2, #0
 80188ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80188d2:	e01a      	b.n	801890a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80188da:	b2db      	uxtb	r3, r3
 80188dc:	2b03      	cmp	r3, #3
 80188de:	d114      	bne.n	801890a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80188e6:	695b      	ldr	r3, [r3, #20]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d00e      	beq.n	801890a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80188ec:	68fb      	ldr	r3, [r7, #12]
 80188ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80188f2:	695b      	ldr	r3, [r3, #20]
 80188f4:	7afa      	ldrb	r2, [r7, #11]
 80188f6:	4611      	mov	r1, r2
 80188f8:	68f8      	ldr	r0, [r7, #12]
 80188fa:	4798      	blx	r3
 80188fc:	4603      	mov	r3, r0
 80188fe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8018900:	7dfb      	ldrb	r3, [r7, #23]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d001      	beq.n	801890a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8018906:	7dfb      	ldrb	r3, [r7, #23]
 8018908:	e000      	b.n	801890c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801890a:	2300      	movs	r3, #0
}
 801890c:	4618      	mov	r0, r3
 801890e:	3718      	adds	r7, #24
 8018910:	46bd      	mov	sp, r7
 8018912:	bd80      	pop	{r7, pc}

08018914 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8018914:	b580      	push	{r7, lr}
 8018916:	b082      	sub	sp, #8
 8018918:	af00      	add	r7, sp, #0
 801891a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	2201      	movs	r2, #1
 8018920:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	2200      	movs	r2, #0
 8018928:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	2200      	movs	r2, #0
 8018930:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	2200      	movs	r2, #0
 8018936:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018940:	2b00      	cmp	r3, #0
 8018942:	d101      	bne.n	8018948 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8018944:	2303      	movs	r3, #3
 8018946:	e02f      	b.n	80189a8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801894e:	2b00      	cmp	r3, #0
 8018950:	d00f      	beq.n	8018972 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018958:	685b      	ldr	r3, [r3, #4]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d009      	beq.n	8018972 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018964:	685b      	ldr	r3, [r3, #4]
 8018966:	687a      	ldr	r2, [r7, #4]
 8018968:	6852      	ldr	r2, [r2, #4]
 801896a:	b2d2      	uxtb	r2, r2
 801896c:	4611      	mov	r1, r2
 801896e:	6878      	ldr	r0, [r7, #4]
 8018970:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018972:	2340      	movs	r3, #64	; 0x40
 8018974:	2200      	movs	r2, #0
 8018976:	2100      	movs	r1, #0
 8018978:	6878      	ldr	r0, [r7, #4]
 801897a:	f001 fb47 	bl	801a00c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	2201      	movs	r2, #1
 8018982:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	2240      	movs	r2, #64	; 0x40
 801898a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801898e:	2340      	movs	r3, #64	; 0x40
 8018990:	2200      	movs	r2, #0
 8018992:	2180      	movs	r1, #128	; 0x80
 8018994:	6878      	ldr	r0, [r7, #4]
 8018996:	f001 fb39 	bl	801a00c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	2201      	movs	r2, #1
 801899e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	2240      	movs	r2, #64	; 0x40
 80189a4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80189a6:	2300      	movs	r3, #0
}
 80189a8:	4618      	mov	r0, r3
 80189aa:	3708      	adds	r7, #8
 80189ac:	46bd      	mov	sp, r7
 80189ae:	bd80      	pop	{r7, pc}

080189b0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80189b0:	b480      	push	{r7}
 80189b2:	b083      	sub	sp, #12
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	6078      	str	r0, [r7, #4]
 80189b8:	460b      	mov	r3, r1
 80189ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	78fa      	ldrb	r2, [r7, #3]
 80189c0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80189c2:	2300      	movs	r3, #0
}
 80189c4:	4618      	mov	r0, r3
 80189c6:	370c      	adds	r7, #12
 80189c8:	46bd      	mov	sp, r7
 80189ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189ce:	4770      	bx	lr

080189d0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80189d0:	b480      	push	{r7}
 80189d2:	b083      	sub	sp, #12
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80189de:	b2da      	uxtb	r2, r3
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	2204      	movs	r2, #4
 80189ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80189ee:	2300      	movs	r3, #0
}
 80189f0:	4618      	mov	r0, r3
 80189f2:	370c      	adds	r7, #12
 80189f4:	46bd      	mov	sp, r7
 80189f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189fa:	4770      	bx	lr

080189fc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80189fc:	b480      	push	{r7}
 80189fe:	b083      	sub	sp, #12
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018a0a:	b2db      	uxtb	r3, r3
 8018a0c:	2b04      	cmp	r3, #4
 8018a0e:	d106      	bne.n	8018a1e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8018a16:	b2da      	uxtb	r2, r3
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8018a1e:	2300      	movs	r3, #0
}
 8018a20:	4618      	mov	r0, r3
 8018a22:	370c      	adds	r7, #12
 8018a24:	46bd      	mov	sp, r7
 8018a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a2a:	4770      	bx	lr

08018a2c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b082      	sub	sp, #8
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d101      	bne.n	8018a42 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8018a3e:	2303      	movs	r3, #3
 8018a40:	e012      	b.n	8018a68 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018a48:	b2db      	uxtb	r3, r3
 8018a4a:	2b03      	cmp	r3, #3
 8018a4c:	d10b      	bne.n	8018a66 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018a54:	69db      	ldr	r3, [r3, #28]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d005      	beq.n	8018a66 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018a60:	69db      	ldr	r3, [r3, #28]
 8018a62:	6878      	ldr	r0, [r7, #4]
 8018a64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018a66:	2300      	movs	r3, #0
}
 8018a68:	4618      	mov	r0, r3
 8018a6a:	3708      	adds	r7, #8
 8018a6c:	46bd      	mov	sp, r7
 8018a6e:	bd80      	pop	{r7, pc}

08018a70 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8018a70:	b580      	push	{r7, lr}
 8018a72:	b082      	sub	sp, #8
 8018a74:	af00      	add	r7, sp, #0
 8018a76:	6078      	str	r0, [r7, #4]
 8018a78:	460b      	mov	r3, r1
 8018a7a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d101      	bne.n	8018a8a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8018a86:	2303      	movs	r3, #3
 8018a88:	e014      	b.n	8018ab4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018a90:	b2db      	uxtb	r3, r3
 8018a92:	2b03      	cmp	r3, #3
 8018a94:	d10d      	bne.n	8018ab2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018a9c:	6a1b      	ldr	r3, [r3, #32]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d007      	beq.n	8018ab2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018aa8:	6a1b      	ldr	r3, [r3, #32]
 8018aaa:	78fa      	ldrb	r2, [r7, #3]
 8018aac:	4611      	mov	r1, r2
 8018aae:	6878      	ldr	r0, [r7, #4]
 8018ab0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018ab2:	2300      	movs	r3, #0
}
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	3708      	adds	r7, #8
 8018ab8:	46bd      	mov	sp, r7
 8018aba:	bd80      	pop	{r7, pc}

08018abc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b082      	sub	sp, #8
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
 8018ac4:	460b      	mov	r3, r1
 8018ac6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d101      	bne.n	8018ad6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8018ad2:	2303      	movs	r3, #3
 8018ad4:	e014      	b.n	8018b00 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018adc:	b2db      	uxtb	r3, r3
 8018ade:	2b03      	cmp	r3, #3
 8018ae0:	d10d      	bne.n	8018afe <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d007      	beq.n	8018afe <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018af6:	78fa      	ldrb	r2, [r7, #3]
 8018af8:	4611      	mov	r1, r2
 8018afa:	6878      	ldr	r0, [r7, #4]
 8018afc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018afe:	2300      	movs	r3, #0
}
 8018b00:	4618      	mov	r0, r3
 8018b02:	3708      	adds	r7, #8
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}

08018b08 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8018b08:	b480      	push	{r7}
 8018b0a:	b083      	sub	sp, #12
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8018b10:	2300      	movs	r3, #0
}
 8018b12:	4618      	mov	r0, r3
 8018b14:	370c      	adds	r7, #12
 8018b16:	46bd      	mov	sp, r7
 8018b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b1c:	4770      	bx	lr

08018b1e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8018b1e:	b580      	push	{r7, lr}
 8018b20:	b082      	sub	sp, #8
 8018b22:	af00      	add	r7, sp, #0
 8018b24:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	2201      	movs	r2, #1
 8018b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d009      	beq.n	8018b4c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018b3e:	685b      	ldr	r3, [r3, #4]
 8018b40:	687a      	ldr	r2, [r7, #4]
 8018b42:	6852      	ldr	r2, [r2, #4]
 8018b44:	b2d2      	uxtb	r2, r2
 8018b46:	4611      	mov	r1, r2
 8018b48:	6878      	ldr	r0, [r7, #4]
 8018b4a:	4798      	blx	r3
  }

  return USBD_OK;
 8018b4c:	2300      	movs	r3, #0
}
 8018b4e:	4618      	mov	r0, r3
 8018b50:	3708      	adds	r7, #8
 8018b52:	46bd      	mov	sp, r7
 8018b54:	bd80      	pop	{r7, pc}

08018b56 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8018b56:	b480      	push	{r7}
 8018b58:	b087      	sub	sp, #28
 8018b5a:	af00      	add	r7, sp, #0
 8018b5c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8018b62:	697b      	ldr	r3, [r7, #20]
 8018b64:	781b      	ldrb	r3, [r3, #0]
 8018b66:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8018b68:	697b      	ldr	r3, [r7, #20]
 8018b6a:	3301      	adds	r3, #1
 8018b6c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8018b6e:	697b      	ldr	r3, [r7, #20]
 8018b70:	781b      	ldrb	r3, [r3, #0]
 8018b72:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8018b74:	8a3b      	ldrh	r3, [r7, #16]
 8018b76:	021b      	lsls	r3, r3, #8
 8018b78:	b21a      	sxth	r2, r3
 8018b7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018b7e:	4313      	orrs	r3, r2
 8018b80:	b21b      	sxth	r3, r3
 8018b82:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8018b84:	89fb      	ldrh	r3, [r7, #14]
}
 8018b86:	4618      	mov	r0, r3
 8018b88:	371c      	adds	r7, #28
 8018b8a:	46bd      	mov	sp, r7
 8018b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b90:	4770      	bx	lr
	...

08018b94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b084      	sub	sp, #16
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	6078      	str	r0, [r7, #4]
 8018b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018ba2:	683b      	ldr	r3, [r7, #0]
 8018ba4:	781b      	ldrb	r3, [r3, #0]
 8018ba6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018baa:	2b40      	cmp	r3, #64	; 0x40
 8018bac:	d005      	beq.n	8018bba <USBD_StdDevReq+0x26>
 8018bae:	2b40      	cmp	r3, #64	; 0x40
 8018bb0:	d853      	bhi.n	8018c5a <USBD_StdDevReq+0xc6>
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d00b      	beq.n	8018bce <USBD_StdDevReq+0x3a>
 8018bb6:	2b20      	cmp	r3, #32
 8018bb8:	d14f      	bne.n	8018c5a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018bc0:	689b      	ldr	r3, [r3, #8]
 8018bc2:	6839      	ldr	r1, [r7, #0]
 8018bc4:	6878      	ldr	r0, [r7, #4]
 8018bc6:	4798      	blx	r3
 8018bc8:	4603      	mov	r3, r0
 8018bca:	73fb      	strb	r3, [r7, #15]
      break;
 8018bcc:	e04a      	b.n	8018c64 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018bce:	683b      	ldr	r3, [r7, #0]
 8018bd0:	785b      	ldrb	r3, [r3, #1]
 8018bd2:	2b09      	cmp	r3, #9
 8018bd4:	d83b      	bhi.n	8018c4e <USBD_StdDevReq+0xba>
 8018bd6:	a201      	add	r2, pc, #4	; (adr r2, 8018bdc <USBD_StdDevReq+0x48>)
 8018bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bdc:	08018c31 	.word	0x08018c31
 8018be0:	08018c45 	.word	0x08018c45
 8018be4:	08018c4f 	.word	0x08018c4f
 8018be8:	08018c3b 	.word	0x08018c3b
 8018bec:	08018c4f 	.word	0x08018c4f
 8018bf0:	08018c0f 	.word	0x08018c0f
 8018bf4:	08018c05 	.word	0x08018c05
 8018bf8:	08018c4f 	.word	0x08018c4f
 8018bfc:	08018c27 	.word	0x08018c27
 8018c00:	08018c19 	.word	0x08018c19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8018c04:	6839      	ldr	r1, [r7, #0]
 8018c06:	6878      	ldr	r0, [r7, #4]
 8018c08:	f000 f9de 	bl	8018fc8 <USBD_GetDescriptor>
          break;
 8018c0c:	e024      	b.n	8018c58 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8018c0e:	6839      	ldr	r1, [r7, #0]
 8018c10:	6878      	ldr	r0, [r7, #4]
 8018c12:	f000 fb6d 	bl	80192f0 <USBD_SetAddress>
          break;
 8018c16:	e01f      	b.n	8018c58 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8018c18:	6839      	ldr	r1, [r7, #0]
 8018c1a:	6878      	ldr	r0, [r7, #4]
 8018c1c:	f000 fbac 	bl	8019378 <USBD_SetConfig>
 8018c20:	4603      	mov	r3, r0
 8018c22:	73fb      	strb	r3, [r7, #15]
          break;
 8018c24:	e018      	b.n	8018c58 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8018c26:	6839      	ldr	r1, [r7, #0]
 8018c28:	6878      	ldr	r0, [r7, #4]
 8018c2a:	f000 fc4b 	bl	80194c4 <USBD_GetConfig>
          break;
 8018c2e:	e013      	b.n	8018c58 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8018c30:	6839      	ldr	r1, [r7, #0]
 8018c32:	6878      	ldr	r0, [r7, #4]
 8018c34:	f000 fc7c 	bl	8019530 <USBD_GetStatus>
          break;
 8018c38:	e00e      	b.n	8018c58 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8018c3a:	6839      	ldr	r1, [r7, #0]
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	f000 fcab 	bl	8019598 <USBD_SetFeature>
          break;
 8018c42:	e009      	b.n	8018c58 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8018c44:	6839      	ldr	r1, [r7, #0]
 8018c46:	6878      	ldr	r0, [r7, #4]
 8018c48:	f000 fcba 	bl	80195c0 <USBD_ClrFeature>
          break;
 8018c4c:	e004      	b.n	8018c58 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8018c4e:	6839      	ldr	r1, [r7, #0]
 8018c50:	6878      	ldr	r0, [r7, #4]
 8018c52:	f000 fd11 	bl	8019678 <USBD_CtlError>
          break;
 8018c56:	bf00      	nop
      }
      break;
 8018c58:	e004      	b.n	8018c64 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8018c5a:	6839      	ldr	r1, [r7, #0]
 8018c5c:	6878      	ldr	r0, [r7, #4]
 8018c5e:	f000 fd0b 	bl	8019678 <USBD_CtlError>
      break;
 8018c62:	bf00      	nop
  }

  return ret;
 8018c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c66:	4618      	mov	r0, r3
 8018c68:	3710      	adds	r7, #16
 8018c6a:	46bd      	mov	sp, r7
 8018c6c:	bd80      	pop	{r7, pc}
 8018c6e:	bf00      	nop

08018c70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b084      	sub	sp, #16
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	6078      	str	r0, [r7, #4]
 8018c78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018c7e:	683b      	ldr	r3, [r7, #0]
 8018c80:	781b      	ldrb	r3, [r3, #0]
 8018c82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018c86:	2b40      	cmp	r3, #64	; 0x40
 8018c88:	d005      	beq.n	8018c96 <USBD_StdItfReq+0x26>
 8018c8a:	2b40      	cmp	r3, #64	; 0x40
 8018c8c:	d82f      	bhi.n	8018cee <USBD_StdItfReq+0x7e>
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d001      	beq.n	8018c96 <USBD_StdItfReq+0x26>
 8018c92:	2b20      	cmp	r3, #32
 8018c94:	d12b      	bne.n	8018cee <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018c9c:	b2db      	uxtb	r3, r3
 8018c9e:	3b01      	subs	r3, #1
 8018ca0:	2b02      	cmp	r3, #2
 8018ca2:	d81d      	bhi.n	8018ce0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8018ca4:	683b      	ldr	r3, [r7, #0]
 8018ca6:	889b      	ldrh	r3, [r3, #4]
 8018ca8:	b2db      	uxtb	r3, r3
 8018caa:	2b01      	cmp	r3, #1
 8018cac:	d813      	bhi.n	8018cd6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018cb4:	689b      	ldr	r3, [r3, #8]
 8018cb6:	6839      	ldr	r1, [r7, #0]
 8018cb8:	6878      	ldr	r0, [r7, #4]
 8018cba:	4798      	blx	r3
 8018cbc:	4603      	mov	r3, r0
 8018cbe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8018cc0:	683b      	ldr	r3, [r7, #0]
 8018cc2:	88db      	ldrh	r3, [r3, #6]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d110      	bne.n	8018cea <USBD_StdItfReq+0x7a>
 8018cc8:	7bfb      	ldrb	r3, [r7, #15]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d10d      	bne.n	8018cea <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8018cce:	6878      	ldr	r0, [r7, #4]
 8018cd0:	f000 fd9d 	bl	801980e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8018cd4:	e009      	b.n	8018cea <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8018cd6:	6839      	ldr	r1, [r7, #0]
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	f000 fccd 	bl	8019678 <USBD_CtlError>
          break;
 8018cde:	e004      	b.n	8018cea <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8018ce0:	6839      	ldr	r1, [r7, #0]
 8018ce2:	6878      	ldr	r0, [r7, #4]
 8018ce4:	f000 fcc8 	bl	8019678 <USBD_CtlError>
          break;
 8018ce8:	e000      	b.n	8018cec <USBD_StdItfReq+0x7c>
          break;
 8018cea:	bf00      	nop
      }
      break;
 8018cec:	e004      	b.n	8018cf8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8018cee:	6839      	ldr	r1, [r7, #0]
 8018cf0:	6878      	ldr	r0, [r7, #4]
 8018cf2:	f000 fcc1 	bl	8019678 <USBD_CtlError>
      break;
 8018cf6:	bf00      	nop
  }

  return ret;
 8018cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	3710      	adds	r7, #16
 8018cfe:	46bd      	mov	sp, r7
 8018d00:	bd80      	pop	{r7, pc}

08018d02 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018d02:	b580      	push	{r7, lr}
 8018d04:	b084      	sub	sp, #16
 8018d06:	af00      	add	r7, sp, #0
 8018d08:	6078      	str	r0, [r7, #4]
 8018d0a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8018d10:	683b      	ldr	r3, [r7, #0]
 8018d12:	889b      	ldrh	r3, [r3, #4]
 8018d14:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	781b      	ldrb	r3, [r3, #0]
 8018d1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018d1e:	2b40      	cmp	r3, #64	; 0x40
 8018d20:	d007      	beq.n	8018d32 <USBD_StdEPReq+0x30>
 8018d22:	2b40      	cmp	r3, #64	; 0x40
 8018d24:	f200 8145 	bhi.w	8018fb2 <USBD_StdEPReq+0x2b0>
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d00c      	beq.n	8018d46 <USBD_StdEPReq+0x44>
 8018d2c:	2b20      	cmp	r3, #32
 8018d2e:	f040 8140 	bne.w	8018fb2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018d38:	689b      	ldr	r3, [r3, #8]
 8018d3a:	6839      	ldr	r1, [r7, #0]
 8018d3c:	6878      	ldr	r0, [r7, #4]
 8018d3e:	4798      	blx	r3
 8018d40:	4603      	mov	r3, r0
 8018d42:	73fb      	strb	r3, [r7, #15]
      break;
 8018d44:	e13a      	b.n	8018fbc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018d46:	683b      	ldr	r3, [r7, #0]
 8018d48:	785b      	ldrb	r3, [r3, #1]
 8018d4a:	2b03      	cmp	r3, #3
 8018d4c:	d007      	beq.n	8018d5e <USBD_StdEPReq+0x5c>
 8018d4e:	2b03      	cmp	r3, #3
 8018d50:	f300 8129 	bgt.w	8018fa6 <USBD_StdEPReq+0x2a4>
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d07f      	beq.n	8018e58 <USBD_StdEPReq+0x156>
 8018d58:	2b01      	cmp	r3, #1
 8018d5a:	d03c      	beq.n	8018dd6 <USBD_StdEPReq+0xd4>
 8018d5c:	e123      	b.n	8018fa6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018d64:	b2db      	uxtb	r3, r3
 8018d66:	2b02      	cmp	r3, #2
 8018d68:	d002      	beq.n	8018d70 <USBD_StdEPReq+0x6e>
 8018d6a:	2b03      	cmp	r3, #3
 8018d6c:	d016      	beq.n	8018d9c <USBD_StdEPReq+0x9a>
 8018d6e:	e02c      	b.n	8018dca <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018d70:	7bbb      	ldrb	r3, [r7, #14]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d00d      	beq.n	8018d92 <USBD_StdEPReq+0x90>
 8018d76:	7bbb      	ldrb	r3, [r7, #14]
 8018d78:	2b80      	cmp	r3, #128	; 0x80
 8018d7a:	d00a      	beq.n	8018d92 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018d7c:	7bbb      	ldrb	r3, [r7, #14]
 8018d7e:	4619      	mov	r1, r3
 8018d80:	6878      	ldr	r0, [r7, #4]
 8018d82:	f001 f9b7 	bl	801a0f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8018d86:	2180      	movs	r1, #128	; 0x80
 8018d88:	6878      	ldr	r0, [r7, #4]
 8018d8a:	f001 f9b3 	bl	801a0f4 <USBD_LL_StallEP>
 8018d8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018d90:	e020      	b.n	8018dd4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8018d92:	6839      	ldr	r1, [r7, #0]
 8018d94:	6878      	ldr	r0, [r7, #4]
 8018d96:	f000 fc6f 	bl	8019678 <USBD_CtlError>
              break;
 8018d9a:	e01b      	b.n	8018dd4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018d9c:	683b      	ldr	r3, [r7, #0]
 8018d9e:	885b      	ldrh	r3, [r3, #2]
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d10e      	bne.n	8018dc2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8018da4:	7bbb      	ldrb	r3, [r7, #14]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d00b      	beq.n	8018dc2 <USBD_StdEPReq+0xc0>
 8018daa:	7bbb      	ldrb	r3, [r7, #14]
 8018dac:	2b80      	cmp	r3, #128	; 0x80
 8018dae:	d008      	beq.n	8018dc2 <USBD_StdEPReq+0xc0>
 8018db0:	683b      	ldr	r3, [r7, #0]
 8018db2:	88db      	ldrh	r3, [r3, #6]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d104      	bne.n	8018dc2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8018db8:	7bbb      	ldrb	r3, [r7, #14]
 8018dba:	4619      	mov	r1, r3
 8018dbc:	6878      	ldr	r0, [r7, #4]
 8018dbe:	f001 f999 	bl	801a0f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8018dc2:	6878      	ldr	r0, [r7, #4]
 8018dc4:	f000 fd23 	bl	801980e <USBD_CtlSendStatus>

              break;
 8018dc8:	e004      	b.n	8018dd4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8018dca:	6839      	ldr	r1, [r7, #0]
 8018dcc:	6878      	ldr	r0, [r7, #4]
 8018dce:	f000 fc53 	bl	8019678 <USBD_CtlError>
              break;
 8018dd2:	bf00      	nop
          }
          break;
 8018dd4:	e0ec      	b.n	8018fb0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018ddc:	b2db      	uxtb	r3, r3
 8018dde:	2b02      	cmp	r3, #2
 8018de0:	d002      	beq.n	8018de8 <USBD_StdEPReq+0xe6>
 8018de2:	2b03      	cmp	r3, #3
 8018de4:	d016      	beq.n	8018e14 <USBD_StdEPReq+0x112>
 8018de6:	e030      	b.n	8018e4a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018de8:	7bbb      	ldrb	r3, [r7, #14]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d00d      	beq.n	8018e0a <USBD_StdEPReq+0x108>
 8018dee:	7bbb      	ldrb	r3, [r7, #14]
 8018df0:	2b80      	cmp	r3, #128	; 0x80
 8018df2:	d00a      	beq.n	8018e0a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018df4:	7bbb      	ldrb	r3, [r7, #14]
 8018df6:	4619      	mov	r1, r3
 8018df8:	6878      	ldr	r0, [r7, #4]
 8018dfa:	f001 f97b 	bl	801a0f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8018dfe:	2180      	movs	r1, #128	; 0x80
 8018e00:	6878      	ldr	r0, [r7, #4]
 8018e02:	f001 f977 	bl	801a0f4 <USBD_LL_StallEP>
 8018e06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018e08:	e025      	b.n	8018e56 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8018e0a:	6839      	ldr	r1, [r7, #0]
 8018e0c:	6878      	ldr	r0, [r7, #4]
 8018e0e:	f000 fc33 	bl	8019678 <USBD_CtlError>
              break;
 8018e12:	e020      	b.n	8018e56 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018e14:	683b      	ldr	r3, [r7, #0]
 8018e16:	885b      	ldrh	r3, [r3, #2]
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d11b      	bne.n	8018e54 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8018e1c:	7bbb      	ldrb	r3, [r7, #14]
 8018e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d004      	beq.n	8018e30 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8018e26:	7bbb      	ldrb	r3, [r7, #14]
 8018e28:	4619      	mov	r1, r3
 8018e2a:	6878      	ldr	r0, [r7, #4]
 8018e2c:	f001 f998 	bl	801a160 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8018e30:	6878      	ldr	r0, [r7, #4]
 8018e32:	f000 fcec 	bl	801980e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018e3c:	689b      	ldr	r3, [r3, #8]
 8018e3e:	6839      	ldr	r1, [r7, #0]
 8018e40:	6878      	ldr	r0, [r7, #4]
 8018e42:	4798      	blx	r3
 8018e44:	4603      	mov	r3, r0
 8018e46:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8018e48:	e004      	b.n	8018e54 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8018e4a:	6839      	ldr	r1, [r7, #0]
 8018e4c:	6878      	ldr	r0, [r7, #4]
 8018e4e:	f000 fc13 	bl	8019678 <USBD_CtlError>
              break;
 8018e52:	e000      	b.n	8018e56 <USBD_StdEPReq+0x154>
              break;
 8018e54:	bf00      	nop
          }
          break;
 8018e56:	e0ab      	b.n	8018fb0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018e5e:	b2db      	uxtb	r3, r3
 8018e60:	2b02      	cmp	r3, #2
 8018e62:	d002      	beq.n	8018e6a <USBD_StdEPReq+0x168>
 8018e64:	2b03      	cmp	r3, #3
 8018e66:	d032      	beq.n	8018ece <USBD_StdEPReq+0x1cc>
 8018e68:	e097      	b.n	8018f9a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018e6a:	7bbb      	ldrb	r3, [r7, #14]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d007      	beq.n	8018e80 <USBD_StdEPReq+0x17e>
 8018e70:	7bbb      	ldrb	r3, [r7, #14]
 8018e72:	2b80      	cmp	r3, #128	; 0x80
 8018e74:	d004      	beq.n	8018e80 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8018e76:	6839      	ldr	r1, [r7, #0]
 8018e78:	6878      	ldr	r0, [r7, #4]
 8018e7a:	f000 fbfd 	bl	8019678 <USBD_CtlError>
                break;
 8018e7e:	e091      	b.n	8018fa4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	da0b      	bge.n	8018ea0 <USBD_StdEPReq+0x19e>
 8018e88:	7bbb      	ldrb	r3, [r7, #14]
 8018e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018e8e:	4613      	mov	r3, r2
 8018e90:	009b      	lsls	r3, r3, #2
 8018e92:	4413      	add	r3, r2
 8018e94:	009b      	lsls	r3, r3, #2
 8018e96:	3310      	adds	r3, #16
 8018e98:	687a      	ldr	r2, [r7, #4]
 8018e9a:	4413      	add	r3, r2
 8018e9c:	3304      	adds	r3, #4
 8018e9e:	e00b      	b.n	8018eb8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018ea0:	7bbb      	ldrb	r3, [r7, #14]
 8018ea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018ea6:	4613      	mov	r3, r2
 8018ea8:	009b      	lsls	r3, r3, #2
 8018eaa:	4413      	add	r3, r2
 8018eac:	009b      	lsls	r3, r3, #2
 8018eae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8018eb2:	687a      	ldr	r2, [r7, #4]
 8018eb4:	4413      	add	r3, r2
 8018eb6:	3304      	adds	r3, #4
 8018eb8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8018eba:	68bb      	ldr	r3, [r7, #8]
 8018ebc:	2200      	movs	r2, #0
 8018ebe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018ec0:	68bb      	ldr	r3, [r7, #8]
 8018ec2:	2202      	movs	r2, #2
 8018ec4:	4619      	mov	r1, r3
 8018ec6:	6878      	ldr	r0, [r7, #4]
 8018ec8:	f000 fc47 	bl	801975a <USBD_CtlSendData>
              break;
 8018ecc:	e06a      	b.n	8018fa4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8018ece:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	da11      	bge.n	8018efa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8018ed6:	7bbb      	ldrb	r3, [r7, #14]
 8018ed8:	f003 020f 	and.w	r2, r3, #15
 8018edc:	6879      	ldr	r1, [r7, #4]
 8018ede:	4613      	mov	r3, r2
 8018ee0:	009b      	lsls	r3, r3, #2
 8018ee2:	4413      	add	r3, r2
 8018ee4:	009b      	lsls	r3, r3, #2
 8018ee6:	440b      	add	r3, r1
 8018ee8:	3324      	adds	r3, #36	; 0x24
 8018eea:	881b      	ldrh	r3, [r3, #0]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d117      	bne.n	8018f20 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8018ef0:	6839      	ldr	r1, [r7, #0]
 8018ef2:	6878      	ldr	r0, [r7, #4]
 8018ef4:	f000 fbc0 	bl	8019678 <USBD_CtlError>
                  break;
 8018ef8:	e054      	b.n	8018fa4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8018efa:	7bbb      	ldrb	r3, [r7, #14]
 8018efc:	f003 020f 	and.w	r2, r3, #15
 8018f00:	6879      	ldr	r1, [r7, #4]
 8018f02:	4613      	mov	r3, r2
 8018f04:	009b      	lsls	r3, r3, #2
 8018f06:	4413      	add	r3, r2
 8018f08:	009b      	lsls	r3, r3, #2
 8018f0a:	440b      	add	r3, r1
 8018f0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8018f10:	881b      	ldrh	r3, [r3, #0]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d104      	bne.n	8018f20 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8018f16:	6839      	ldr	r1, [r7, #0]
 8018f18:	6878      	ldr	r0, [r7, #4]
 8018f1a:	f000 fbad 	bl	8019678 <USBD_CtlError>
                  break;
 8018f1e:	e041      	b.n	8018fa4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018f20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	da0b      	bge.n	8018f40 <USBD_StdEPReq+0x23e>
 8018f28:	7bbb      	ldrb	r3, [r7, #14]
 8018f2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018f2e:	4613      	mov	r3, r2
 8018f30:	009b      	lsls	r3, r3, #2
 8018f32:	4413      	add	r3, r2
 8018f34:	009b      	lsls	r3, r3, #2
 8018f36:	3310      	adds	r3, #16
 8018f38:	687a      	ldr	r2, [r7, #4]
 8018f3a:	4413      	add	r3, r2
 8018f3c:	3304      	adds	r3, #4
 8018f3e:	e00b      	b.n	8018f58 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018f40:	7bbb      	ldrb	r3, [r7, #14]
 8018f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018f46:	4613      	mov	r3, r2
 8018f48:	009b      	lsls	r3, r3, #2
 8018f4a:	4413      	add	r3, r2
 8018f4c:	009b      	lsls	r3, r3, #2
 8018f4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8018f52:	687a      	ldr	r2, [r7, #4]
 8018f54:	4413      	add	r3, r2
 8018f56:	3304      	adds	r3, #4
 8018f58:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8018f5a:	7bbb      	ldrb	r3, [r7, #14]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d002      	beq.n	8018f66 <USBD_StdEPReq+0x264>
 8018f60:	7bbb      	ldrb	r3, [r7, #14]
 8018f62:	2b80      	cmp	r3, #128	; 0x80
 8018f64:	d103      	bne.n	8018f6e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8018f66:	68bb      	ldr	r3, [r7, #8]
 8018f68:	2200      	movs	r2, #0
 8018f6a:	601a      	str	r2, [r3, #0]
 8018f6c:	e00e      	b.n	8018f8c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8018f6e:	7bbb      	ldrb	r3, [r7, #14]
 8018f70:	4619      	mov	r1, r3
 8018f72:	6878      	ldr	r0, [r7, #4]
 8018f74:	f001 f92a 	bl	801a1cc <USBD_LL_IsStallEP>
 8018f78:	4603      	mov	r3, r0
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d003      	beq.n	8018f86 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8018f7e:	68bb      	ldr	r3, [r7, #8]
 8018f80:	2201      	movs	r2, #1
 8018f82:	601a      	str	r2, [r3, #0]
 8018f84:	e002      	b.n	8018f8c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8018f86:	68bb      	ldr	r3, [r7, #8]
 8018f88:	2200      	movs	r2, #0
 8018f8a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018f8c:	68bb      	ldr	r3, [r7, #8]
 8018f8e:	2202      	movs	r2, #2
 8018f90:	4619      	mov	r1, r3
 8018f92:	6878      	ldr	r0, [r7, #4]
 8018f94:	f000 fbe1 	bl	801975a <USBD_CtlSendData>
              break;
 8018f98:	e004      	b.n	8018fa4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8018f9a:	6839      	ldr	r1, [r7, #0]
 8018f9c:	6878      	ldr	r0, [r7, #4]
 8018f9e:	f000 fb6b 	bl	8019678 <USBD_CtlError>
              break;
 8018fa2:	bf00      	nop
          }
          break;
 8018fa4:	e004      	b.n	8018fb0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8018fa6:	6839      	ldr	r1, [r7, #0]
 8018fa8:	6878      	ldr	r0, [r7, #4]
 8018faa:	f000 fb65 	bl	8019678 <USBD_CtlError>
          break;
 8018fae:	bf00      	nop
      }
      break;
 8018fb0:	e004      	b.n	8018fbc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8018fb2:	6839      	ldr	r1, [r7, #0]
 8018fb4:	6878      	ldr	r0, [r7, #4]
 8018fb6:	f000 fb5f 	bl	8019678 <USBD_CtlError>
      break;
 8018fba:	bf00      	nop
  }

  return ret;
 8018fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	3710      	adds	r7, #16
 8018fc2:	46bd      	mov	sp, r7
 8018fc4:	bd80      	pop	{r7, pc}
	...

08018fc8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	b084      	sub	sp, #16
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	6078      	str	r0, [r7, #4]
 8018fd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8018fd6:	2300      	movs	r3, #0
 8018fd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8018fda:	2300      	movs	r3, #0
 8018fdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8018fde:	683b      	ldr	r3, [r7, #0]
 8018fe0:	885b      	ldrh	r3, [r3, #2]
 8018fe2:	0a1b      	lsrs	r3, r3, #8
 8018fe4:	b29b      	uxth	r3, r3
 8018fe6:	3b01      	subs	r3, #1
 8018fe8:	2b0e      	cmp	r3, #14
 8018fea:	f200 8152 	bhi.w	8019292 <USBD_GetDescriptor+0x2ca>
 8018fee:	a201      	add	r2, pc, #4	; (adr r2, 8018ff4 <USBD_GetDescriptor+0x2c>)
 8018ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ff4:	08019065 	.word	0x08019065
 8018ff8:	0801907d 	.word	0x0801907d
 8018ffc:	080190bd 	.word	0x080190bd
 8019000:	08019293 	.word	0x08019293
 8019004:	08019293 	.word	0x08019293
 8019008:	08019233 	.word	0x08019233
 801900c:	0801925f 	.word	0x0801925f
 8019010:	08019293 	.word	0x08019293
 8019014:	08019293 	.word	0x08019293
 8019018:	08019293 	.word	0x08019293
 801901c:	08019293 	.word	0x08019293
 8019020:	08019293 	.word	0x08019293
 8019024:	08019293 	.word	0x08019293
 8019028:	08019293 	.word	0x08019293
 801902c:	08019031 	.word	0x08019031
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019036:	69db      	ldr	r3, [r3, #28]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d00b      	beq.n	8019054 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019042:	69db      	ldr	r3, [r3, #28]
 8019044:	687a      	ldr	r2, [r7, #4]
 8019046:	7c12      	ldrb	r2, [r2, #16]
 8019048:	f107 0108 	add.w	r1, r7, #8
 801904c:	4610      	mov	r0, r2
 801904e:	4798      	blx	r3
 8019050:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019052:	e126      	b.n	80192a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8019054:	6839      	ldr	r1, [r7, #0]
 8019056:	6878      	ldr	r0, [r7, #4]
 8019058:	f000 fb0e 	bl	8019678 <USBD_CtlError>
        err++;
 801905c:	7afb      	ldrb	r3, [r7, #11]
 801905e:	3301      	adds	r3, #1
 8019060:	72fb      	strb	r3, [r7, #11]
      break;
 8019062:	e11e      	b.n	80192a2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	687a      	ldr	r2, [r7, #4]
 801906e:	7c12      	ldrb	r2, [r2, #16]
 8019070:	f107 0108 	add.w	r1, r7, #8
 8019074:	4610      	mov	r0, r2
 8019076:	4798      	blx	r3
 8019078:	60f8      	str	r0, [r7, #12]
      break;
 801907a:	e112      	b.n	80192a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	7c1b      	ldrb	r3, [r3, #16]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d10d      	bne.n	80190a0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801908a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801908c:	f107 0208 	add.w	r2, r7, #8
 8019090:	4610      	mov	r0, r2
 8019092:	4798      	blx	r3
 8019094:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	3301      	adds	r3, #1
 801909a:	2202      	movs	r2, #2
 801909c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801909e:	e100      	b.n	80192a2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80190a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190a8:	f107 0208 	add.w	r2, r7, #8
 80190ac:	4610      	mov	r0, r2
 80190ae:	4798      	blx	r3
 80190b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	3301      	adds	r3, #1
 80190b6:	2202      	movs	r2, #2
 80190b8:	701a      	strb	r2, [r3, #0]
      break;
 80190ba:	e0f2      	b.n	80192a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80190bc:	683b      	ldr	r3, [r7, #0]
 80190be:	885b      	ldrh	r3, [r3, #2]
 80190c0:	b2db      	uxtb	r3, r3
 80190c2:	2b05      	cmp	r3, #5
 80190c4:	f200 80ac 	bhi.w	8019220 <USBD_GetDescriptor+0x258>
 80190c8:	a201      	add	r2, pc, #4	; (adr r2, 80190d0 <USBD_GetDescriptor+0x108>)
 80190ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190ce:	bf00      	nop
 80190d0:	080190e9 	.word	0x080190e9
 80190d4:	0801911d 	.word	0x0801911d
 80190d8:	08019151 	.word	0x08019151
 80190dc:	08019185 	.word	0x08019185
 80190e0:	080191b9 	.word	0x080191b9
 80190e4:	080191ed 	.word	0x080191ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80190ee:	685b      	ldr	r3, [r3, #4]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d00b      	beq.n	801910c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80190fa:	685b      	ldr	r3, [r3, #4]
 80190fc:	687a      	ldr	r2, [r7, #4]
 80190fe:	7c12      	ldrb	r2, [r2, #16]
 8019100:	f107 0108 	add.w	r1, r7, #8
 8019104:	4610      	mov	r0, r2
 8019106:	4798      	blx	r3
 8019108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801910a:	e091      	b.n	8019230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801910c:	6839      	ldr	r1, [r7, #0]
 801910e:	6878      	ldr	r0, [r7, #4]
 8019110:	f000 fab2 	bl	8019678 <USBD_CtlError>
            err++;
 8019114:	7afb      	ldrb	r3, [r7, #11]
 8019116:	3301      	adds	r3, #1
 8019118:	72fb      	strb	r3, [r7, #11]
          break;
 801911a:	e089      	b.n	8019230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019122:	689b      	ldr	r3, [r3, #8]
 8019124:	2b00      	cmp	r3, #0
 8019126:	d00b      	beq.n	8019140 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801912e:	689b      	ldr	r3, [r3, #8]
 8019130:	687a      	ldr	r2, [r7, #4]
 8019132:	7c12      	ldrb	r2, [r2, #16]
 8019134:	f107 0108 	add.w	r1, r7, #8
 8019138:	4610      	mov	r0, r2
 801913a:	4798      	blx	r3
 801913c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801913e:	e077      	b.n	8019230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019140:	6839      	ldr	r1, [r7, #0]
 8019142:	6878      	ldr	r0, [r7, #4]
 8019144:	f000 fa98 	bl	8019678 <USBD_CtlError>
            err++;
 8019148:	7afb      	ldrb	r3, [r7, #11]
 801914a:	3301      	adds	r3, #1
 801914c:	72fb      	strb	r3, [r7, #11]
          break;
 801914e:	e06f      	b.n	8019230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019156:	68db      	ldr	r3, [r3, #12]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d00b      	beq.n	8019174 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019162:	68db      	ldr	r3, [r3, #12]
 8019164:	687a      	ldr	r2, [r7, #4]
 8019166:	7c12      	ldrb	r2, [r2, #16]
 8019168:	f107 0108 	add.w	r1, r7, #8
 801916c:	4610      	mov	r0, r2
 801916e:	4798      	blx	r3
 8019170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019172:	e05d      	b.n	8019230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019174:	6839      	ldr	r1, [r7, #0]
 8019176:	6878      	ldr	r0, [r7, #4]
 8019178:	f000 fa7e 	bl	8019678 <USBD_CtlError>
            err++;
 801917c:	7afb      	ldrb	r3, [r7, #11]
 801917e:	3301      	adds	r3, #1
 8019180:	72fb      	strb	r3, [r7, #11]
          break;
 8019182:	e055      	b.n	8019230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801918a:	691b      	ldr	r3, [r3, #16]
 801918c:	2b00      	cmp	r3, #0
 801918e:	d00b      	beq.n	80191a8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019196:	691b      	ldr	r3, [r3, #16]
 8019198:	687a      	ldr	r2, [r7, #4]
 801919a:	7c12      	ldrb	r2, [r2, #16]
 801919c:	f107 0108 	add.w	r1, r7, #8
 80191a0:	4610      	mov	r0, r2
 80191a2:	4798      	blx	r3
 80191a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80191a6:	e043      	b.n	8019230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80191a8:	6839      	ldr	r1, [r7, #0]
 80191aa:	6878      	ldr	r0, [r7, #4]
 80191ac:	f000 fa64 	bl	8019678 <USBD_CtlError>
            err++;
 80191b0:	7afb      	ldrb	r3, [r7, #11]
 80191b2:	3301      	adds	r3, #1
 80191b4:	72fb      	strb	r3, [r7, #11]
          break;
 80191b6:	e03b      	b.n	8019230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80191be:	695b      	ldr	r3, [r3, #20]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d00b      	beq.n	80191dc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80191ca:	695b      	ldr	r3, [r3, #20]
 80191cc:	687a      	ldr	r2, [r7, #4]
 80191ce:	7c12      	ldrb	r2, [r2, #16]
 80191d0:	f107 0108 	add.w	r1, r7, #8
 80191d4:	4610      	mov	r0, r2
 80191d6:	4798      	blx	r3
 80191d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80191da:	e029      	b.n	8019230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80191dc:	6839      	ldr	r1, [r7, #0]
 80191de:	6878      	ldr	r0, [r7, #4]
 80191e0:	f000 fa4a 	bl	8019678 <USBD_CtlError>
            err++;
 80191e4:	7afb      	ldrb	r3, [r7, #11]
 80191e6:	3301      	adds	r3, #1
 80191e8:	72fb      	strb	r3, [r7, #11]
          break;
 80191ea:	e021      	b.n	8019230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80191f2:	699b      	ldr	r3, [r3, #24]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d00b      	beq.n	8019210 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80191fe:	699b      	ldr	r3, [r3, #24]
 8019200:	687a      	ldr	r2, [r7, #4]
 8019202:	7c12      	ldrb	r2, [r2, #16]
 8019204:	f107 0108 	add.w	r1, r7, #8
 8019208:	4610      	mov	r0, r2
 801920a:	4798      	blx	r3
 801920c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801920e:	e00f      	b.n	8019230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019210:	6839      	ldr	r1, [r7, #0]
 8019212:	6878      	ldr	r0, [r7, #4]
 8019214:	f000 fa30 	bl	8019678 <USBD_CtlError>
            err++;
 8019218:	7afb      	ldrb	r3, [r7, #11]
 801921a:	3301      	adds	r3, #1
 801921c:	72fb      	strb	r3, [r7, #11]
          break;
 801921e:	e007      	b.n	8019230 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8019220:	6839      	ldr	r1, [r7, #0]
 8019222:	6878      	ldr	r0, [r7, #4]
 8019224:	f000 fa28 	bl	8019678 <USBD_CtlError>
          err++;
 8019228:	7afb      	ldrb	r3, [r7, #11]
 801922a:	3301      	adds	r3, #1
 801922c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801922e:	bf00      	nop
      }
      break;
 8019230:	e037      	b.n	80192a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	7c1b      	ldrb	r3, [r3, #16]
 8019236:	2b00      	cmp	r3, #0
 8019238:	d109      	bne.n	801924e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019242:	f107 0208 	add.w	r2, r7, #8
 8019246:	4610      	mov	r0, r2
 8019248:	4798      	blx	r3
 801924a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801924c:	e029      	b.n	80192a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801924e:	6839      	ldr	r1, [r7, #0]
 8019250:	6878      	ldr	r0, [r7, #4]
 8019252:	f000 fa11 	bl	8019678 <USBD_CtlError>
        err++;
 8019256:	7afb      	ldrb	r3, [r7, #11]
 8019258:	3301      	adds	r3, #1
 801925a:	72fb      	strb	r3, [r7, #11]
      break;
 801925c:	e021      	b.n	80192a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	7c1b      	ldrb	r3, [r3, #16]
 8019262:	2b00      	cmp	r3, #0
 8019264:	d10d      	bne.n	8019282 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801926c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801926e:	f107 0208 	add.w	r2, r7, #8
 8019272:	4610      	mov	r0, r2
 8019274:	4798      	blx	r3
 8019276:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	3301      	adds	r3, #1
 801927c:	2207      	movs	r2, #7
 801927e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019280:	e00f      	b.n	80192a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8019282:	6839      	ldr	r1, [r7, #0]
 8019284:	6878      	ldr	r0, [r7, #4]
 8019286:	f000 f9f7 	bl	8019678 <USBD_CtlError>
        err++;
 801928a:	7afb      	ldrb	r3, [r7, #11]
 801928c:	3301      	adds	r3, #1
 801928e:	72fb      	strb	r3, [r7, #11]
      break;
 8019290:	e007      	b.n	80192a2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8019292:	6839      	ldr	r1, [r7, #0]
 8019294:	6878      	ldr	r0, [r7, #4]
 8019296:	f000 f9ef 	bl	8019678 <USBD_CtlError>
      err++;
 801929a:	7afb      	ldrb	r3, [r7, #11]
 801929c:	3301      	adds	r3, #1
 801929e:	72fb      	strb	r3, [r7, #11]
      break;
 80192a0:	bf00      	nop
  }

  if (err != 0U)
 80192a2:	7afb      	ldrb	r3, [r7, #11]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d11e      	bne.n	80192e6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80192a8:	683b      	ldr	r3, [r7, #0]
 80192aa:	88db      	ldrh	r3, [r3, #6]
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d016      	beq.n	80192de <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80192b0:	893b      	ldrh	r3, [r7, #8]
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d00e      	beq.n	80192d4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80192b6:	683b      	ldr	r3, [r7, #0]
 80192b8:	88da      	ldrh	r2, [r3, #6]
 80192ba:	893b      	ldrh	r3, [r7, #8]
 80192bc:	4293      	cmp	r3, r2
 80192be:	bf28      	it	cs
 80192c0:	4613      	movcs	r3, r2
 80192c2:	b29b      	uxth	r3, r3
 80192c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80192c6:	893b      	ldrh	r3, [r7, #8]
 80192c8:	461a      	mov	r2, r3
 80192ca:	68f9      	ldr	r1, [r7, #12]
 80192cc:	6878      	ldr	r0, [r7, #4]
 80192ce:	f000 fa44 	bl	801975a <USBD_CtlSendData>
 80192d2:	e009      	b.n	80192e8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80192d4:	6839      	ldr	r1, [r7, #0]
 80192d6:	6878      	ldr	r0, [r7, #4]
 80192d8:	f000 f9ce 	bl	8019678 <USBD_CtlError>
 80192dc:	e004      	b.n	80192e8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80192de:	6878      	ldr	r0, [r7, #4]
 80192e0:	f000 fa95 	bl	801980e <USBD_CtlSendStatus>
 80192e4:	e000      	b.n	80192e8 <USBD_GetDescriptor+0x320>
    return;
 80192e6:	bf00      	nop
  }
}
 80192e8:	3710      	adds	r7, #16
 80192ea:	46bd      	mov	sp, r7
 80192ec:	bd80      	pop	{r7, pc}
 80192ee:	bf00      	nop

080192f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80192f0:	b580      	push	{r7, lr}
 80192f2:	b084      	sub	sp, #16
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	6078      	str	r0, [r7, #4]
 80192f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80192fa:	683b      	ldr	r3, [r7, #0]
 80192fc:	889b      	ldrh	r3, [r3, #4]
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d131      	bne.n	8019366 <USBD_SetAddress+0x76>
 8019302:	683b      	ldr	r3, [r7, #0]
 8019304:	88db      	ldrh	r3, [r3, #6]
 8019306:	2b00      	cmp	r3, #0
 8019308:	d12d      	bne.n	8019366 <USBD_SetAddress+0x76>
 801930a:	683b      	ldr	r3, [r7, #0]
 801930c:	885b      	ldrh	r3, [r3, #2]
 801930e:	2b7f      	cmp	r3, #127	; 0x7f
 8019310:	d829      	bhi.n	8019366 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8019312:	683b      	ldr	r3, [r7, #0]
 8019314:	885b      	ldrh	r3, [r3, #2]
 8019316:	b2db      	uxtb	r3, r3
 8019318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801931c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019324:	b2db      	uxtb	r3, r3
 8019326:	2b03      	cmp	r3, #3
 8019328:	d104      	bne.n	8019334 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801932a:	6839      	ldr	r1, [r7, #0]
 801932c:	6878      	ldr	r0, [r7, #4]
 801932e:	f000 f9a3 	bl	8019678 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019332:	e01d      	b.n	8019370 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	7bfa      	ldrb	r2, [r7, #15]
 8019338:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801933c:	7bfb      	ldrb	r3, [r7, #15]
 801933e:	4619      	mov	r1, r3
 8019340:	6878      	ldr	r0, [r7, #4]
 8019342:	f000 ff6f 	bl	801a224 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8019346:	6878      	ldr	r0, [r7, #4]
 8019348:	f000 fa61 	bl	801980e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801934c:	7bfb      	ldrb	r3, [r7, #15]
 801934e:	2b00      	cmp	r3, #0
 8019350:	d004      	beq.n	801935c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	2202      	movs	r2, #2
 8019356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801935a:	e009      	b.n	8019370 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	2201      	movs	r2, #1
 8019360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019364:	e004      	b.n	8019370 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8019366:	6839      	ldr	r1, [r7, #0]
 8019368:	6878      	ldr	r0, [r7, #4]
 801936a:	f000 f985 	bl	8019678 <USBD_CtlError>
  }
}
 801936e:	bf00      	nop
 8019370:	bf00      	nop
 8019372:	3710      	adds	r7, #16
 8019374:	46bd      	mov	sp, r7
 8019376:	bd80      	pop	{r7, pc}

08019378 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019378:	b580      	push	{r7, lr}
 801937a:	b084      	sub	sp, #16
 801937c:	af00      	add	r7, sp, #0
 801937e:	6078      	str	r0, [r7, #4]
 8019380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8019382:	2300      	movs	r3, #0
 8019384:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8019386:	683b      	ldr	r3, [r7, #0]
 8019388:	885b      	ldrh	r3, [r3, #2]
 801938a:	b2da      	uxtb	r2, r3
 801938c:	4b4c      	ldr	r3, [pc, #304]	; (80194c0 <USBD_SetConfig+0x148>)
 801938e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8019390:	4b4b      	ldr	r3, [pc, #300]	; (80194c0 <USBD_SetConfig+0x148>)
 8019392:	781b      	ldrb	r3, [r3, #0]
 8019394:	2b01      	cmp	r3, #1
 8019396:	d905      	bls.n	80193a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8019398:	6839      	ldr	r1, [r7, #0]
 801939a:	6878      	ldr	r0, [r7, #4]
 801939c:	f000 f96c 	bl	8019678 <USBD_CtlError>
    return USBD_FAIL;
 80193a0:	2303      	movs	r3, #3
 80193a2:	e088      	b.n	80194b6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80193aa:	b2db      	uxtb	r3, r3
 80193ac:	2b02      	cmp	r3, #2
 80193ae:	d002      	beq.n	80193b6 <USBD_SetConfig+0x3e>
 80193b0:	2b03      	cmp	r3, #3
 80193b2:	d025      	beq.n	8019400 <USBD_SetConfig+0x88>
 80193b4:	e071      	b.n	801949a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80193b6:	4b42      	ldr	r3, [pc, #264]	; (80194c0 <USBD_SetConfig+0x148>)
 80193b8:	781b      	ldrb	r3, [r3, #0]
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d01c      	beq.n	80193f8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80193be:	4b40      	ldr	r3, [pc, #256]	; (80194c0 <USBD_SetConfig+0x148>)
 80193c0:	781b      	ldrb	r3, [r3, #0]
 80193c2:	461a      	mov	r2, r3
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80193c8:	4b3d      	ldr	r3, [pc, #244]	; (80194c0 <USBD_SetConfig+0x148>)
 80193ca:	781b      	ldrb	r3, [r3, #0]
 80193cc:	4619      	mov	r1, r3
 80193ce:	6878      	ldr	r0, [r7, #4]
 80193d0:	f7ff f91e 	bl	8018610 <USBD_SetClassConfig>
 80193d4:	4603      	mov	r3, r0
 80193d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80193d8:	7bfb      	ldrb	r3, [r7, #15]
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d004      	beq.n	80193e8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80193de:	6839      	ldr	r1, [r7, #0]
 80193e0:	6878      	ldr	r0, [r7, #4]
 80193e2:	f000 f949 	bl	8019678 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80193e6:	e065      	b.n	80194b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80193e8:	6878      	ldr	r0, [r7, #4]
 80193ea:	f000 fa10 	bl	801980e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	2203      	movs	r2, #3
 80193f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80193f6:	e05d      	b.n	80194b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80193f8:	6878      	ldr	r0, [r7, #4]
 80193fa:	f000 fa08 	bl	801980e <USBD_CtlSendStatus>
      break;
 80193fe:	e059      	b.n	80194b4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8019400:	4b2f      	ldr	r3, [pc, #188]	; (80194c0 <USBD_SetConfig+0x148>)
 8019402:	781b      	ldrb	r3, [r3, #0]
 8019404:	2b00      	cmp	r3, #0
 8019406:	d112      	bne.n	801942e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	2202      	movs	r2, #2
 801940c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8019410:	4b2b      	ldr	r3, [pc, #172]	; (80194c0 <USBD_SetConfig+0x148>)
 8019412:	781b      	ldrb	r3, [r3, #0]
 8019414:	461a      	mov	r2, r3
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801941a:	4b29      	ldr	r3, [pc, #164]	; (80194c0 <USBD_SetConfig+0x148>)
 801941c:	781b      	ldrb	r3, [r3, #0]
 801941e:	4619      	mov	r1, r3
 8019420:	6878      	ldr	r0, [r7, #4]
 8019422:	f7ff f911 	bl	8018648 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8019426:	6878      	ldr	r0, [r7, #4]
 8019428:	f000 f9f1 	bl	801980e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801942c:	e042      	b.n	80194b4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801942e:	4b24      	ldr	r3, [pc, #144]	; (80194c0 <USBD_SetConfig+0x148>)
 8019430:	781b      	ldrb	r3, [r3, #0]
 8019432:	461a      	mov	r2, r3
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	685b      	ldr	r3, [r3, #4]
 8019438:	429a      	cmp	r2, r3
 801943a:	d02a      	beq.n	8019492 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	685b      	ldr	r3, [r3, #4]
 8019440:	b2db      	uxtb	r3, r3
 8019442:	4619      	mov	r1, r3
 8019444:	6878      	ldr	r0, [r7, #4]
 8019446:	f7ff f8ff 	bl	8018648 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801944a:	4b1d      	ldr	r3, [pc, #116]	; (80194c0 <USBD_SetConfig+0x148>)
 801944c:	781b      	ldrb	r3, [r3, #0]
 801944e:	461a      	mov	r2, r3
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8019454:	4b1a      	ldr	r3, [pc, #104]	; (80194c0 <USBD_SetConfig+0x148>)
 8019456:	781b      	ldrb	r3, [r3, #0]
 8019458:	4619      	mov	r1, r3
 801945a:	6878      	ldr	r0, [r7, #4]
 801945c:	f7ff f8d8 	bl	8018610 <USBD_SetClassConfig>
 8019460:	4603      	mov	r3, r0
 8019462:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8019464:	7bfb      	ldrb	r3, [r7, #15]
 8019466:	2b00      	cmp	r3, #0
 8019468:	d00f      	beq.n	801948a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801946a:	6839      	ldr	r1, [r7, #0]
 801946c:	6878      	ldr	r0, [r7, #4]
 801946e:	f000 f903 	bl	8019678 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	685b      	ldr	r3, [r3, #4]
 8019476:	b2db      	uxtb	r3, r3
 8019478:	4619      	mov	r1, r3
 801947a:	6878      	ldr	r0, [r7, #4]
 801947c:	f7ff f8e4 	bl	8018648 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	2202      	movs	r2, #2
 8019484:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8019488:	e014      	b.n	80194b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801948a:	6878      	ldr	r0, [r7, #4]
 801948c:	f000 f9bf 	bl	801980e <USBD_CtlSendStatus>
      break;
 8019490:	e010      	b.n	80194b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8019492:	6878      	ldr	r0, [r7, #4]
 8019494:	f000 f9bb 	bl	801980e <USBD_CtlSendStatus>
      break;
 8019498:	e00c      	b.n	80194b4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801949a:	6839      	ldr	r1, [r7, #0]
 801949c:	6878      	ldr	r0, [r7, #4]
 801949e:	f000 f8eb 	bl	8019678 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80194a2:	4b07      	ldr	r3, [pc, #28]	; (80194c0 <USBD_SetConfig+0x148>)
 80194a4:	781b      	ldrb	r3, [r3, #0]
 80194a6:	4619      	mov	r1, r3
 80194a8:	6878      	ldr	r0, [r7, #4]
 80194aa:	f7ff f8cd 	bl	8018648 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80194ae:	2303      	movs	r3, #3
 80194b0:	73fb      	strb	r3, [r7, #15]
      break;
 80194b2:	bf00      	nop
  }

  return ret;
 80194b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80194b6:	4618      	mov	r0, r3
 80194b8:	3710      	adds	r7, #16
 80194ba:	46bd      	mov	sp, r7
 80194bc:	bd80      	pop	{r7, pc}
 80194be:	bf00      	nop
 80194c0:	20001c18 	.word	0x20001c18

080194c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80194c4:	b580      	push	{r7, lr}
 80194c6:	b082      	sub	sp, #8
 80194c8:	af00      	add	r7, sp, #0
 80194ca:	6078      	str	r0, [r7, #4]
 80194cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80194ce:	683b      	ldr	r3, [r7, #0]
 80194d0:	88db      	ldrh	r3, [r3, #6]
 80194d2:	2b01      	cmp	r3, #1
 80194d4:	d004      	beq.n	80194e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80194d6:	6839      	ldr	r1, [r7, #0]
 80194d8:	6878      	ldr	r0, [r7, #4]
 80194da:	f000 f8cd 	bl	8019678 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80194de:	e023      	b.n	8019528 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80194e6:	b2db      	uxtb	r3, r3
 80194e8:	2b02      	cmp	r3, #2
 80194ea:	dc02      	bgt.n	80194f2 <USBD_GetConfig+0x2e>
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	dc03      	bgt.n	80194f8 <USBD_GetConfig+0x34>
 80194f0:	e015      	b.n	801951e <USBD_GetConfig+0x5a>
 80194f2:	2b03      	cmp	r3, #3
 80194f4:	d00b      	beq.n	801950e <USBD_GetConfig+0x4a>
 80194f6:	e012      	b.n	801951e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	2200      	movs	r2, #0
 80194fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	3308      	adds	r3, #8
 8019502:	2201      	movs	r2, #1
 8019504:	4619      	mov	r1, r3
 8019506:	6878      	ldr	r0, [r7, #4]
 8019508:	f000 f927 	bl	801975a <USBD_CtlSendData>
        break;
 801950c:	e00c      	b.n	8019528 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	3304      	adds	r3, #4
 8019512:	2201      	movs	r2, #1
 8019514:	4619      	mov	r1, r3
 8019516:	6878      	ldr	r0, [r7, #4]
 8019518:	f000 f91f 	bl	801975a <USBD_CtlSendData>
        break;
 801951c:	e004      	b.n	8019528 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801951e:	6839      	ldr	r1, [r7, #0]
 8019520:	6878      	ldr	r0, [r7, #4]
 8019522:	f000 f8a9 	bl	8019678 <USBD_CtlError>
        break;
 8019526:	bf00      	nop
}
 8019528:	bf00      	nop
 801952a:	3708      	adds	r7, #8
 801952c:	46bd      	mov	sp, r7
 801952e:	bd80      	pop	{r7, pc}

08019530 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019530:	b580      	push	{r7, lr}
 8019532:	b082      	sub	sp, #8
 8019534:	af00      	add	r7, sp, #0
 8019536:	6078      	str	r0, [r7, #4]
 8019538:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019540:	b2db      	uxtb	r3, r3
 8019542:	3b01      	subs	r3, #1
 8019544:	2b02      	cmp	r3, #2
 8019546:	d81e      	bhi.n	8019586 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8019548:	683b      	ldr	r3, [r7, #0]
 801954a:	88db      	ldrh	r3, [r3, #6]
 801954c:	2b02      	cmp	r3, #2
 801954e:	d004      	beq.n	801955a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8019550:	6839      	ldr	r1, [r7, #0]
 8019552:	6878      	ldr	r0, [r7, #4]
 8019554:	f000 f890 	bl	8019678 <USBD_CtlError>
        break;
 8019558:	e01a      	b.n	8019590 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	2201      	movs	r2, #1
 801955e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8019566:	2b00      	cmp	r3, #0
 8019568:	d005      	beq.n	8019576 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	68db      	ldr	r3, [r3, #12]
 801956e:	f043 0202 	orr.w	r2, r3, #2
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	330c      	adds	r3, #12
 801957a:	2202      	movs	r2, #2
 801957c:	4619      	mov	r1, r3
 801957e:	6878      	ldr	r0, [r7, #4]
 8019580:	f000 f8eb 	bl	801975a <USBD_CtlSendData>
      break;
 8019584:	e004      	b.n	8019590 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8019586:	6839      	ldr	r1, [r7, #0]
 8019588:	6878      	ldr	r0, [r7, #4]
 801958a:	f000 f875 	bl	8019678 <USBD_CtlError>
      break;
 801958e:	bf00      	nop
  }
}
 8019590:	bf00      	nop
 8019592:	3708      	adds	r7, #8
 8019594:	46bd      	mov	sp, r7
 8019596:	bd80      	pop	{r7, pc}

08019598 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b082      	sub	sp, #8
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
 80195a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80195a2:	683b      	ldr	r3, [r7, #0]
 80195a4:	885b      	ldrh	r3, [r3, #2]
 80195a6:	2b01      	cmp	r3, #1
 80195a8:	d106      	bne.n	80195b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	2201      	movs	r2, #1
 80195ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80195b2:	6878      	ldr	r0, [r7, #4]
 80195b4:	f000 f92b 	bl	801980e <USBD_CtlSendStatus>
  }
}
 80195b8:	bf00      	nop
 80195ba:	3708      	adds	r7, #8
 80195bc:	46bd      	mov	sp, r7
 80195be:	bd80      	pop	{r7, pc}

080195c0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b082      	sub	sp, #8
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
 80195c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80195d0:	b2db      	uxtb	r3, r3
 80195d2:	3b01      	subs	r3, #1
 80195d4:	2b02      	cmp	r3, #2
 80195d6:	d80b      	bhi.n	80195f0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	885b      	ldrh	r3, [r3, #2]
 80195dc:	2b01      	cmp	r3, #1
 80195de:	d10c      	bne.n	80195fa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	2200      	movs	r2, #0
 80195e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80195e8:	6878      	ldr	r0, [r7, #4]
 80195ea:	f000 f910 	bl	801980e <USBD_CtlSendStatus>
      }
      break;
 80195ee:	e004      	b.n	80195fa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80195f0:	6839      	ldr	r1, [r7, #0]
 80195f2:	6878      	ldr	r0, [r7, #4]
 80195f4:	f000 f840 	bl	8019678 <USBD_CtlError>
      break;
 80195f8:	e000      	b.n	80195fc <USBD_ClrFeature+0x3c>
      break;
 80195fa:	bf00      	nop
  }
}
 80195fc:	bf00      	nop
 80195fe:	3708      	adds	r7, #8
 8019600:	46bd      	mov	sp, r7
 8019602:	bd80      	pop	{r7, pc}

08019604 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8019604:	b580      	push	{r7, lr}
 8019606:	b084      	sub	sp, #16
 8019608:	af00      	add	r7, sp, #0
 801960a:	6078      	str	r0, [r7, #4]
 801960c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801960e:	683b      	ldr	r3, [r7, #0]
 8019610:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	781a      	ldrb	r2, [r3, #0]
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	3301      	adds	r3, #1
 801961e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	781a      	ldrb	r2, [r3, #0]
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	3301      	adds	r3, #1
 801962c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801962e:	68f8      	ldr	r0, [r7, #12]
 8019630:	f7ff fa91 	bl	8018b56 <SWAPBYTE>
 8019634:	4603      	mov	r3, r0
 8019636:	461a      	mov	r2, r3
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	3301      	adds	r3, #1
 8019640:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	3301      	adds	r3, #1
 8019646:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8019648:	68f8      	ldr	r0, [r7, #12]
 801964a:	f7ff fa84 	bl	8018b56 <SWAPBYTE>
 801964e:	4603      	mov	r3, r0
 8019650:	461a      	mov	r2, r3
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	3301      	adds	r3, #1
 801965a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801965c:	68fb      	ldr	r3, [r7, #12]
 801965e:	3301      	adds	r3, #1
 8019660:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8019662:	68f8      	ldr	r0, [r7, #12]
 8019664:	f7ff fa77 	bl	8018b56 <SWAPBYTE>
 8019668:	4603      	mov	r3, r0
 801966a:	461a      	mov	r2, r3
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	80da      	strh	r2, [r3, #6]
}
 8019670:	bf00      	nop
 8019672:	3710      	adds	r7, #16
 8019674:	46bd      	mov	sp, r7
 8019676:	bd80      	pop	{r7, pc}

08019678 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019678:	b580      	push	{r7, lr}
 801967a:	b082      	sub	sp, #8
 801967c:	af00      	add	r7, sp, #0
 801967e:	6078      	str	r0, [r7, #4]
 8019680:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8019682:	2180      	movs	r1, #128	; 0x80
 8019684:	6878      	ldr	r0, [r7, #4]
 8019686:	f000 fd35 	bl	801a0f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801968a:	2100      	movs	r1, #0
 801968c:	6878      	ldr	r0, [r7, #4]
 801968e:	f000 fd31 	bl	801a0f4 <USBD_LL_StallEP>
}
 8019692:	bf00      	nop
 8019694:	3708      	adds	r7, #8
 8019696:	46bd      	mov	sp, r7
 8019698:	bd80      	pop	{r7, pc}

0801969a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801969a:	b580      	push	{r7, lr}
 801969c:	b086      	sub	sp, #24
 801969e:	af00      	add	r7, sp, #0
 80196a0:	60f8      	str	r0, [r7, #12]
 80196a2:	60b9      	str	r1, [r7, #8]
 80196a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80196a6:	2300      	movs	r3, #0
 80196a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d036      	beq.n	801971e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80196b4:	6938      	ldr	r0, [r7, #16]
 80196b6:	f000 f836 	bl	8019726 <USBD_GetLen>
 80196ba:	4603      	mov	r3, r0
 80196bc:	3301      	adds	r3, #1
 80196be:	b29b      	uxth	r3, r3
 80196c0:	005b      	lsls	r3, r3, #1
 80196c2:	b29a      	uxth	r2, r3
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80196c8:	7dfb      	ldrb	r3, [r7, #23]
 80196ca:	68ba      	ldr	r2, [r7, #8]
 80196cc:	4413      	add	r3, r2
 80196ce:	687a      	ldr	r2, [r7, #4]
 80196d0:	7812      	ldrb	r2, [r2, #0]
 80196d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80196d4:	7dfb      	ldrb	r3, [r7, #23]
 80196d6:	3301      	adds	r3, #1
 80196d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80196da:	7dfb      	ldrb	r3, [r7, #23]
 80196dc:	68ba      	ldr	r2, [r7, #8]
 80196de:	4413      	add	r3, r2
 80196e0:	2203      	movs	r2, #3
 80196e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80196e4:	7dfb      	ldrb	r3, [r7, #23]
 80196e6:	3301      	adds	r3, #1
 80196e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80196ea:	e013      	b.n	8019714 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80196ec:	7dfb      	ldrb	r3, [r7, #23]
 80196ee:	68ba      	ldr	r2, [r7, #8]
 80196f0:	4413      	add	r3, r2
 80196f2:	693a      	ldr	r2, [r7, #16]
 80196f4:	7812      	ldrb	r2, [r2, #0]
 80196f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80196f8:	693b      	ldr	r3, [r7, #16]
 80196fa:	3301      	adds	r3, #1
 80196fc:	613b      	str	r3, [r7, #16]
    idx++;
 80196fe:	7dfb      	ldrb	r3, [r7, #23]
 8019700:	3301      	adds	r3, #1
 8019702:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8019704:	7dfb      	ldrb	r3, [r7, #23]
 8019706:	68ba      	ldr	r2, [r7, #8]
 8019708:	4413      	add	r3, r2
 801970a:	2200      	movs	r2, #0
 801970c:	701a      	strb	r2, [r3, #0]
    idx++;
 801970e:	7dfb      	ldrb	r3, [r7, #23]
 8019710:	3301      	adds	r3, #1
 8019712:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8019714:	693b      	ldr	r3, [r7, #16]
 8019716:	781b      	ldrb	r3, [r3, #0]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d1e7      	bne.n	80196ec <USBD_GetString+0x52>
 801971c:	e000      	b.n	8019720 <USBD_GetString+0x86>
    return;
 801971e:	bf00      	nop
  }
}
 8019720:	3718      	adds	r7, #24
 8019722:	46bd      	mov	sp, r7
 8019724:	bd80      	pop	{r7, pc}

08019726 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8019726:	b480      	push	{r7}
 8019728:	b085      	sub	sp, #20
 801972a:	af00      	add	r7, sp, #0
 801972c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801972e:	2300      	movs	r3, #0
 8019730:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8019736:	e005      	b.n	8019744 <USBD_GetLen+0x1e>
  {
    len++;
 8019738:	7bfb      	ldrb	r3, [r7, #15]
 801973a:	3301      	adds	r3, #1
 801973c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801973e:	68bb      	ldr	r3, [r7, #8]
 8019740:	3301      	adds	r3, #1
 8019742:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8019744:	68bb      	ldr	r3, [r7, #8]
 8019746:	781b      	ldrb	r3, [r3, #0]
 8019748:	2b00      	cmp	r3, #0
 801974a:	d1f5      	bne.n	8019738 <USBD_GetLen+0x12>
  }

  return len;
 801974c:	7bfb      	ldrb	r3, [r7, #15]
}
 801974e:	4618      	mov	r0, r3
 8019750:	3714      	adds	r7, #20
 8019752:	46bd      	mov	sp, r7
 8019754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019758:	4770      	bx	lr

0801975a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801975a:	b580      	push	{r7, lr}
 801975c:	b084      	sub	sp, #16
 801975e:	af00      	add	r7, sp, #0
 8019760:	60f8      	str	r0, [r7, #12]
 8019762:	60b9      	str	r1, [r7, #8]
 8019764:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8019766:	68fb      	ldr	r3, [r7, #12]
 8019768:	2202      	movs	r2, #2
 801976a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801976e:	68fb      	ldr	r3, [r7, #12]
 8019770:	687a      	ldr	r2, [r7, #4]
 8019772:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	687a      	ldr	r2, [r7, #4]
 8019778:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	68ba      	ldr	r2, [r7, #8]
 801977e:	2100      	movs	r1, #0
 8019780:	68f8      	ldr	r0, [r7, #12]
 8019782:	f000 fd85 	bl	801a290 <USBD_LL_Transmit>

  return USBD_OK;
 8019786:	2300      	movs	r3, #0
}
 8019788:	4618      	mov	r0, r3
 801978a:	3710      	adds	r7, #16
 801978c:	46bd      	mov	sp, r7
 801978e:	bd80      	pop	{r7, pc}

08019790 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8019790:	b580      	push	{r7, lr}
 8019792:	b084      	sub	sp, #16
 8019794:	af00      	add	r7, sp, #0
 8019796:	60f8      	str	r0, [r7, #12]
 8019798:	60b9      	str	r1, [r7, #8]
 801979a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	68ba      	ldr	r2, [r7, #8]
 80197a0:	2100      	movs	r1, #0
 80197a2:	68f8      	ldr	r0, [r7, #12]
 80197a4:	f000 fd74 	bl	801a290 <USBD_LL_Transmit>

  return USBD_OK;
 80197a8:	2300      	movs	r3, #0
}
 80197aa:	4618      	mov	r0, r3
 80197ac:	3710      	adds	r7, #16
 80197ae:	46bd      	mov	sp, r7
 80197b0:	bd80      	pop	{r7, pc}

080197b2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80197b2:	b580      	push	{r7, lr}
 80197b4:	b084      	sub	sp, #16
 80197b6:	af00      	add	r7, sp, #0
 80197b8:	60f8      	str	r0, [r7, #12]
 80197ba:	60b9      	str	r1, [r7, #8]
 80197bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	2203      	movs	r2, #3
 80197c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	687a      	ldr	r2, [r7, #4]
 80197ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	687a      	ldr	r2, [r7, #4]
 80197d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	68ba      	ldr	r2, [r7, #8]
 80197da:	2100      	movs	r1, #0
 80197dc:	68f8      	ldr	r0, [r7, #12]
 80197de:	f000 fd8f 	bl	801a300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80197e2:	2300      	movs	r3, #0
}
 80197e4:	4618      	mov	r0, r3
 80197e6:	3710      	adds	r7, #16
 80197e8:	46bd      	mov	sp, r7
 80197ea:	bd80      	pop	{r7, pc}

080197ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	b084      	sub	sp, #16
 80197f0:	af00      	add	r7, sp, #0
 80197f2:	60f8      	str	r0, [r7, #12]
 80197f4:	60b9      	str	r1, [r7, #8]
 80197f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	68ba      	ldr	r2, [r7, #8]
 80197fc:	2100      	movs	r1, #0
 80197fe:	68f8      	ldr	r0, [r7, #12]
 8019800:	f000 fd7e 	bl	801a300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019804:	2300      	movs	r3, #0
}
 8019806:	4618      	mov	r0, r3
 8019808:	3710      	adds	r7, #16
 801980a:	46bd      	mov	sp, r7
 801980c:	bd80      	pop	{r7, pc}

0801980e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801980e:	b580      	push	{r7, lr}
 8019810:	b082      	sub	sp, #8
 8019812:	af00      	add	r7, sp, #0
 8019814:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	2204      	movs	r2, #4
 801981a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801981e:	2300      	movs	r3, #0
 8019820:	2200      	movs	r2, #0
 8019822:	2100      	movs	r1, #0
 8019824:	6878      	ldr	r0, [r7, #4]
 8019826:	f000 fd33 	bl	801a290 <USBD_LL_Transmit>

  return USBD_OK;
 801982a:	2300      	movs	r3, #0
}
 801982c:	4618      	mov	r0, r3
 801982e:	3708      	adds	r7, #8
 8019830:	46bd      	mov	sp, r7
 8019832:	bd80      	pop	{r7, pc}

08019834 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8019834:	b580      	push	{r7, lr}
 8019836:	b082      	sub	sp, #8
 8019838:	af00      	add	r7, sp, #0
 801983a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	2205      	movs	r2, #5
 8019840:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019844:	2300      	movs	r3, #0
 8019846:	2200      	movs	r2, #0
 8019848:	2100      	movs	r1, #0
 801984a:	6878      	ldr	r0, [r7, #4]
 801984c:	f000 fd58 	bl	801a300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019850:	2300      	movs	r3, #0
}
 8019852:	4618      	mov	r0, r3
 8019854:	3708      	adds	r7, #8
 8019856:	46bd      	mov	sp, r7
 8019858:	bd80      	pop	{r7, pc}
	...

0801985c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801985c:	b580      	push	{r7, lr}
 801985e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019860:	2200      	movs	r2, #0
 8019862:	4912      	ldr	r1, [pc, #72]	; (80198ac <MX_USB_DEVICE_Init+0x50>)
 8019864:	4812      	ldr	r0, [pc, #72]	; (80198b0 <MX_USB_DEVICE_Init+0x54>)
 8019866:	f7fe fe65 	bl	8018534 <USBD_Init>
 801986a:	4603      	mov	r3, r0
 801986c:	2b00      	cmp	r3, #0
 801986e:	d001      	beq.n	8019874 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019870:	f7e9 faa2 	bl	8002db8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019874:	490f      	ldr	r1, [pc, #60]	; (80198b4 <MX_USB_DEVICE_Init+0x58>)
 8019876:	480e      	ldr	r0, [pc, #56]	; (80198b0 <MX_USB_DEVICE_Init+0x54>)
 8019878:	f7fe fe8c 	bl	8018594 <USBD_RegisterClass>
 801987c:	4603      	mov	r3, r0
 801987e:	2b00      	cmp	r3, #0
 8019880:	d001      	beq.n	8019886 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019882:	f7e9 fa99 	bl	8002db8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019886:	490c      	ldr	r1, [pc, #48]	; (80198b8 <MX_USB_DEVICE_Init+0x5c>)
 8019888:	4809      	ldr	r0, [pc, #36]	; (80198b0 <MX_USB_DEVICE_Init+0x54>)
 801988a:	f7fe fddd 	bl	8018448 <USBD_CDC_RegisterInterface>
 801988e:	4603      	mov	r3, r0
 8019890:	2b00      	cmp	r3, #0
 8019892:	d001      	beq.n	8019898 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019894:	f7e9 fa90 	bl	8002db8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019898:	4805      	ldr	r0, [pc, #20]	; (80198b0 <MX_USB_DEVICE_Init+0x54>)
 801989a:	f7fe fea2 	bl	80185e2 <USBD_Start>
 801989e:	4603      	mov	r3, r0
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d001      	beq.n	80198a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80198a4:	f7e9 fa88 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80198a8:	bf00      	nop
 80198aa:	bd80      	pop	{r7, pc}
 80198ac:	20000688 	.word	0x20000688
 80198b0:	20001c1c 	.word	0x20001c1c
 80198b4:	20000570 	.word	0x20000570
 80198b8:	20000674 	.word	0x20000674

080198bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80198bc:	b580      	push	{r7, lr}
 80198be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80198c0:	2200      	movs	r2, #0
 80198c2:	4905      	ldr	r1, [pc, #20]	; (80198d8 <CDC_Init_FS+0x1c>)
 80198c4:	4805      	ldr	r0, [pc, #20]	; (80198dc <CDC_Init_FS+0x20>)
 80198c6:	f7fe fdd4 	bl	8018472 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80198ca:	4905      	ldr	r1, [pc, #20]	; (80198e0 <CDC_Init_FS+0x24>)
 80198cc:	4803      	ldr	r0, [pc, #12]	; (80198dc <CDC_Init_FS+0x20>)
 80198ce:	f7fe fdee 	bl	80184ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80198d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80198d4:	4618      	mov	r0, r3
 80198d6:	bd80      	pop	{r7, pc}
 80198d8:	200026ec 	.word	0x200026ec
 80198dc:	20001c1c 	.word	0x20001c1c
 80198e0:	20001eec 	.word	0x20001eec

080198e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80198e4:	b480      	push	{r7}
 80198e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80198e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80198ea:	4618      	mov	r0, r3
 80198ec:	46bd      	mov	sp, r7
 80198ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198f2:	4770      	bx	lr

080198f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80198f4:	b480      	push	{r7}
 80198f6:	b083      	sub	sp, #12
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	4603      	mov	r3, r0
 80198fc:	6039      	str	r1, [r7, #0]
 80198fe:	71fb      	strb	r3, [r7, #7]
 8019900:	4613      	mov	r3, r2
 8019902:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019904:	79fb      	ldrb	r3, [r7, #7]
 8019906:	2b23      	cmp	r3, #35	; 0x23
 8019908:	d84a      	bhi.n	80199a0 <CDC_Control_FS+0xac>
 801990a:	a201      	add	r2, pc, #4	; (adr r2, 8019910 <CDC_Control_FS+0x1c>)
 801990c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019910:	080199a1 	.word	0x080199a1
 8019914:	080199a1 	.word	0x080199a1
 8019918:	080199a1 	.word	0x080199a1
 801991c:	080199a1 	.word	0x080199a1
 8019920:	080199a1 	.word	0x080199a1
 8019924:	080199a1 	.word	0x080199a1
 8019928:	080199a1 	.word	0x080199a1
 801992c:	080199a1 	.word	0x080199a1
 8019930:	080199a1 	.word	0x080199a1
 8019934:	080199a1 	.word	0x080199a1
 8019938:	080199a1 	.word	0x080199a1
 801993c:	080199a1 	.word	0x080199a1
 8019940:	080199a1 	.word	0x080199a1
 8019944:	080199a1 	.word	0x080199a1
 8019948:	080199a1 	.word	0x080199a1
 801994c:	080199a1 	.word	0x080199a1
 8019950:	080199a1 	.word	0x080199a1
 8019954:	080199a1 	.word	0x080199a1
 8019958:	080199a1 	.word	0x080199a1
 801995c:	080199a1 	.word	0x080199a1
 8019960:	080199a1 	.word	0x080199a1
 8019964:	080199a1 	.word	0x080199a1
 8019968:	080199a1 	.word	0x080199a1
 801996c:	080199a1 	.word	0x080199a1
 8019970:	080199a1 	.word	0x080199a1
 8019974:	080199a1 	.word	0x080199a1
 8019978:	080199a1 	.word	0x080199a1
 801997c:	080199a1 	.word	0x080199a1
 8019980:	080199a1 	.word	0x080199a1
 8019984:	080199a1 	.word	0x080199a1
 8019988:	080199a1 	.word	0x080199a1
 801998c:	080199a1 	.word	0x080199a1
 8019990:	080199a1 	.word	0x080199a1
 8019994:	080199a1 	.word	0x080199a1
 8019998:	080199a1 	.word	0x080199a1
 801999c:	080199a1 	.word	0x080199a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80199a0:	bf00      	nop
  }

  return (USBD_OK);
 80199a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80199a4:	4618      	mov	r0, r3
 80199a6:	370c      	adds	r7, #12
 80199a8:	46bd      	mov	sp, r7
 80199aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ae:	4770      	bx	lr

080199b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b082      	sub	sp, #8
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	6078      	str	r0, [r7, #4]
 80199b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80199ba:	6879      	ldr	r1, [r7, #4]
 80199bc:	4805      	ldr	r0, [pc, #20]	; (80199d4 <CDC_Receive_FS+0x24>)
 80199be:	f7fe fd76 	bl	80184ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80199c2:	4804      	ldr	r0, [pc, #16]	; (80199d4 <CDC_Receive_FS+0x24>)
 80199c4:	f7fe fd8c 	bl	80184e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80199c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80199ca:	4618      	mov	r0, r3
 80199cc:	3708      	adds	r7, #8
 80199ce:	46bd      	mov	sp, r7
 80199d0:	bd80      	pop	{r7, pc}
 80199d2:	bf00      	nop
 80199d4:	20001c1c 	.word	0x20001c1c

080199d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80199d8:	b480      	push	{r7}
 80199da:	b087      	sub	sp, #28
 80199dc:	af00      	add	r7, sp, #0
 80199de:	60f8      	str	r0, [r7, #12]
 80199e0:	60b9      	str	r1, [r7, #8]
 80199e2:	4613      	mov	r3, r2
 80199e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80199e6:	2300      	movs	r3, #0
 80199e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80199ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80199ee:	4618      	mov	r0, r3
 80199f0:	371c      	adds	r7, #28
 80199f2:	46bd      	mov	sp, r7
 80199f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199f8:	4770      	bx	lr
	...

080199fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80199fc:	b480      	push	{r7}
 80199fe:	b083      	sub	sp, #12
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	4603      	mov	r3, r0
 8019a04:	6039      	str	r1, [r7, #0]
 8019a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019a08:	683b      	ldr	r3, [r7, #0]
 8019a0a:	2212      	movs	r2, #18
 8019a0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019a0e:	4b03      	ldr	r3, [pc, #12]	; (8019a1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8019a10:	4618      	mov	r0, r3
 8019a12:	370c      	adds	r7, #12
 8019a14:	46bd      	mov	sp, r7
 8019a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a1a:	4770      	bx	lr
 8019a1c:	200006a8 	.word	0x200006a8

08019a20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a20:	b480      	push	{r7}
 8019a22:	b083      	sub	sp, #12
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	4603      	mov	r3, r0
 8019a28:	6039      	str	r1, [r7, #0]
 8019a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019a2c:	683b      	ldr	r3, [r7, #0]
 8019a2e:	2204      	movs	r2, #4
 8019a30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019a32:	4b03      	ldr	r3, [pc, #12]	; (8019a40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019a34:	4618      	mov	r0, r3
 8019a36:	370c      	adds	r7, #12
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a3e:	4770      	bx	lr
 8019a40:	200006c8 	.word	0x200006c8

08019a44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a44:	b580      	push	{r7, lr}
 8019a46:	b082      	sub	sp, #8
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	4603      	mov	r3, r0
 8019a4c:	6039      	str	r1, [r7, #0]
 8019a4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019a50:	79fb      	ldrb	r3, [r7, #7]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d105      	bne.n	8019a62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019a56:	683a      	ldr	r2, [r7, #0]
 8019a58:	4907      	ldr	r1, [pc, #28]	; (8019a78 <USBD_FS_ProductStrDescriptor+0x34>)
 8019a5a:	4808      	ldr	r0, [pc, #32]	; (8019a7c <USBD_FS_ProductStrDescriptor+0x38>)
 8019a5c:	f7ff fe1d 	bl	801969a <USBD_GetString>
 8019a60:	e004      	b.n	8019a6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019a62:	683a      	ldr	r2, [r7, #0]
 8019a64:	4904      	ldr	r1, [pc, #16]	; (8019a78 <USBD_FS_ProductStrDescriptor+0x34>)
 8019a66:	4805      	ldr	r0, [pc, #20]	; (8019a7c <USBD_FS_ProductStrDescriptor+0x38>)
 8019a68:	f7ff fe17 	bl	801969a <USBD_GetString>
  }
  return USBD_StrDesc;
 8019a6c:	4b02      	ldr	r3, [pc, #8]	; (8019a78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019a6e:	4618      	mov	r0, r3
 8019a70:	3708      	adds	r7, #8
 8019a72:	46bd      	mov	sp, r7
 8019a74:	bd80      	pop	{r7, pc}
 8019a76:	bf00      	nop
 8019a78:	20002eec 	.word	0x20002eec
 8019a7c:	0801b924 	.word	0x0801b924

08019a80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b082      	sub	sp, #8
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	4603      	mov	r3, r0
 8019a88:	6039      	str	r1, [r7, #0]
 8019a8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019a8c:	683a      	ldr	r2, [r7, #0]
 8019a8e:	4904      	ldr	r1, [pc, #16]	; (8019aa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019a90:	4804      	ldr	r0, [pc, #16]	; (8019aa4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019a92:	f7ff fe02 	bl	801969a <USBD_GetString>
  return USBD_StrDesc;
 8019a96:	4b02      	ldr	r3, [pc, #8]	; (8019aa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019a98:	4618      	mov	r0, r3
 8019a9a:	3708      	adds	r7, #8
 8019a9c:	46bd      	mov	sp, r7
 8019a9e:	bd80      	pop	{r7, pc}
 8019aa0:	20002eec 	.word	0x20002eec
 8019aa4:	0801b93c 	.word	0x0801b93c

08019aa8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019aa8:	b580      	push	{r7, lr}
 8019aaa:	b082      	sub	sp, #8
 8019aac:	af00      	add	r7, sp, #0
 8019aae:	4603      	mov	r3, r0
 8019ab0:	6039      	str	r1, [r7, #0]
 8019ab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019ab4:	683b      	ldr	r3, [r7, #0]
 8019ab6:	221a      	movs	r2, #26
 8019ab8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019aba:	f000 f855 	bl	8019b68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019abe:	4b02      	ldr	r3, [pc, #8]	; (8019ac8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	3708      	adds	r7, #8
 8019ac4:	46bd      	mov	sp, r7
 8019ac6:	bd80      	pop	{r7, pc}
 8019ac8:	200006cc 	.word	0x200006cc

08019acc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b082      	sub	sp, #8
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	4603      	mov	r3, r0
 8019ad4:	6039      	str	r1, [r7, #0]
 8019ad6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019ad8:	79fb      	ldrb	r3, [r7, #7]
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d105      	bne.n	8019aea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019ade:	683a      	ldr	r2, [r7, #0]
 8019ae0:	4907      	ldr	r1, [pc, #28]	; (8019b00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019ae2:	4808      	ldr	r0, [pc, #32]	; (8019b04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019ae4:	f7ff fdd9 	bl	801969a <USBD_GetString>
 8019ae8:	e004      	b.n	8019af4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019aea:	683a      	ldr	r2, [r7, #0]
 8019aec:	4904      	ldr	r1, [pc, #16]	; (8019b00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019aee:	4805      	ldr	r0, [pc, #20]	; (8019b04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019af0:	f7ff fdd3 	bl	801969a <USBD_GetString>
  }
  return USBD_StrDesc;
 8019af4:	4b02      	ldr	r3, [pc, #8]	; (8019b00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8019af6:	4618      	mov	r0, r3
 8019af8:	3708      	adds	r7, #8
 8019afa:	46bd      	mov	sp, r7
 8019afc:	bd80      	pop	{r7, pc}
 8019afe:	bf00      	nop
 8019b00:	20002eec 	.word	0x20002eec
 8019b04:	0801b950 	.word	0x0801b950

08019b08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b082      	sub	sp, #8
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	4603      	mov	r3, r0
 8019b10:	6039      	str	r1, [r7, #0]
 8019b12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019b14:	79fb      	ldrb	r3, [r7, #7]
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d105      	bne.n	8019b26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019b1a:	683a      	ldr	r2, [r7, #0]
 8019b1c:	4907      	ldr	r1, [pc, #28]	; (8019b3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019b1e:	4808      	ldr	r0, [pc, #32]	; (8019b40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019b20:	f7ff fdbb 	bl	801969a <USBD_GetString>
 8019b24:	e004      	b.n	8019b30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019b26:	683a      	ldr	r2, [r7, #0]
 8019b28:	4904      	ldr	r1, [pc, #16]	; (8019b3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019b2a:	4805      	ldr	r0, [pc, #20]	; (8019b40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019b2c:	f7ff fdb5 	bl	801969a <USBD_GetString>
  }
  return USBD_StrDesc;
 8019b30:	4b02      	ldr	r3, [pc, #8]	; (8019b3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019b32:	4618      	mov	r0, r3
 8019b34:	3708      	adds	r7, #8
 8019b36:	46bd      	mov	sp, r7
 8019b38:	bd80      	pop	{r7, pc}
 8019b3a:	bf00      	nop
 8019b3c:	20002eec 	.word	0x20002eec
 8019b40:	0801b95c 	.word	0x0801b95c

08019b44 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019b44:	b480      	push	{r7}
 8019b46:	b083      	sub	sp, #12
 8019b48:	af00      	add	r7, sp, #0
 8019b4a:	4603      	mov	r3, r0
 8019b4c:	6039      	str	r1, [r7, #0]
 8019b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8019b50:	683b      	ldr	r3, [r7, #0]
 8019b52:	220c      	movs	r2, #12
 8019b54:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8019b56:	4b03      	ldr	r3, [pc, #12]	; (8019b64 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8019b58:	4618      	mov	r0, r3
 8019b5a:	370c      	adds	r7, #12
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b62:	4770      	bx	lr
 8019b64:	200006bc 	.word	0x200006bc

08019b68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019b68:	b580      	push	{r7, lr}
 8019b6a:	b084      	sub	sp, #16
 8019b6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019b6e:	4b0f      	ldr	r3, [pc, #60]	; (8019bac <Get_SerialNum+0x44>)
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019b74:	4b0e      	ldr	r3, [pc, #56]	; (8019bb0 <Get_SerialNum+0x48>)
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019b7a:	4b0e      	ldr	r3, [pc, #56]	; (8019bb4 <Get_SerialNum+0x4c>)
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019b80:	68fa      	ldr	r2, [r7, #12]
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	4413      	add	r3, r2
 8019b86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d009      	beq.n	8019ba2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019b8e:	2208      	movs	r2, #8
 8019b90:	4909      	ldr	r1, [pc, #36]	; (8019bb8 <Get_SerialNum+0x50>)
 8019b92:	68f8      	ldr	r0, [r7, #12]
 8019b94:	f000 f814 	bl	8019bc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019b98:	2204      	movs	r2, #4
 8019b9a:	4908      	ldr	r1, [pc, #32]	; (8019bbc <Get_SerialNum+0x54>)
 8019b9c:	68b8      	ldr	r0, [r7, #8]
 8019b9e:	f000 f80f 	bl	8019bc0 <IntToUnicode>
  }
}
 8019ba2:	bf00      	nop
 8019ba4:	3710      	adds	r7, #16
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	bd80      	pop	{r7, pc}
 8019baa:	bf00      	nop
 8019bac:	1fff7590 	.word	0x1fff7590
 8019bb0:	1fff7594 	.word	0x1fff7594
 8019bb4:	1fff7598 	.word	0x1fff7598
 8019bb8:	200006ce 	.word	0x200006ce
 8019bbc:	200006de 	.word	0x200006de

08019bc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019bc0:	b480      	push	{r7}
 8019bc2:	b087      	sub	sp, #28
 8019bc4:	af00      	add	r7, sp, #0
 8019bc6:	60f8      	str	r0, [r7, #12]
 8019bc8:	60b9      	str	r1, [r7, #8]
 8019bca:	4613      	mov	r3, r2
 8019bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019bce:	2300      	movs	r3, #0
 8019bd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	75fb      	strb	r3, [r7, #23]
 8019bd6:	e027      	b.n	8019c28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	0f1b      	lsrs	r3, r3, #28
 8019bdc:	2b09      	cmp	r3, #9
 8019bde:	d80b      	bhi.n	8019bf8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	0f1b      	lsrs	r3, r3, #28
 8019be4:	b2da      	uxtb	r2, r3
 8019be6:	7dfb      	ldrb	r3, [r7, #23]
 8019be8:	005b      	lsls	r3, r3, #1
 8019bea:	4619      	mov	r1, r3
 8019bec:	68bb      	ldr	r3, [r7, #8]
 8019bee:	440b      	add	r3, r1
 8019bf0:	3230      	adds	r2, #48	; 0x30
 8019bf2:	b2d2      	uxtb	r2, r2
 8019bf4:	701a      	strb	r2, [r3, #0]
 8019bf6:	e00a      	b.n	8019c0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	0f1b      	lsrs	r3, r3, #28
 8019bfc:	b2da      	uxtb	r2, r3
 8019bfe:	7dfb      	ldrb	r3, [r7, #23]
 8019c00:	005b      	lsls	r3, r3, #1
 8019c02:	4619      	mov	r1, r3
 8019c04:	68bb      	ldr	r3, [r7, #8]
 8019c06:	440b      	add	r3, r1
 8019c08:	3237      	adds	r2, #55	; 0x37
 8019c0a:	b2d2      	uxtb	r2, r2
 8019c0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	011b      	lsls	r3, r3, #4
 8019c12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019c14:	7dfb      	ldrb	r3, [r7, #23]
 8019c16:	005b      	lsls	r3, r3, #1
 8019c18:	3301      	adds	r3, #1
 8019c1a:	68ba      	ldr	r2, [r7, #8]
 8019c1c:	4413      	add	r3, r2
 8019c1e:	2200      	movs	r2, #0
 8019c20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019c22:	7dfb      	ldrb	r3, [r7, #23]
 8019c24:	3301      	adds	r3, #1
 8019c26:	75fb      	strb	r3, [r7, #23]
 8019c28:	7dfa      	ldrb	r2, [r7, #23]
 8019c2a:	79fb      	ldrb	r3, [r7, #7]
 8019c2c:	429a      	cmp	r2, r3
 8019c2e:	d3d3      	bcc.n	8019bd8 <IntToUnicode+0x18>
  }
}
 8019c30:	bf00      	nop
 8019c32:	bf00      	nop
 8019c34:	371c      	adds	r7, #28
 8019c36:	46bd      	mov	sp, r7
 8019c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c3c:	4770      	bx	lr
	...

08019c40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019c40:	b580      	push	{r7, lr}
 8019c42:	b08a      	sub	sp, #40	; 0x28
 8019c44:	af00      	add	r7, sp, #0
 8019c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019c48:	f107 0314 	add.w	r3, r7, #20
 8019c4c:	2200      	movs	r2, #0
 8019c4e:	601a      	str	r2, [r3, #0]
 8019c50:	605a      	str	r2, [r3, #4]
 8019c52:	609a      	str	r2, [r3, #8]
 8019c54:	60da      	str	r2, [r3, #12]
 8019c56:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019c60:	d14e      	bne.n	8019d00 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019c62:	4b29      	ldr	r3, [pc, #164]	; (8019d08 <HAL_PCD_MspInit+0xc8>)
 8019c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019c66:	4a28      	ldr	r2, [pc, #160]	; (8019d08 <HAL_PCD_MspInit+0xc8>)
 8019c68:	f043 0301 	orr.w	r3, r3, #1
 8019c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019c6e:	4b26      	ldr	r3, [pc, #152]	; (8019d08 <HAL_PCD_MspInit+0xc8>)
 8019c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019c72:	f003 0301 	and.w	r3, r3, #1
 8019c76:	613b      	str	r3, [r7, #16]
 8019c78:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8019c7a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8019c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019c80:	2302      	movs	r3, #2
 8019c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019c84:	2300      	movs	r3, #0
 8019c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019c88:	2303      	movs	r3, #3
 8019c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019c8c:	230a      	movs	r3, #10
 8019c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019c90:	f107 0314 	add.w	r3, r7, #20
 8019c94:	4619      	mov	r1, r3
 8019c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019c9a:	f7f3 ff6d 	bl	800db78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019c9e:	4b1a      	ldr	r3, [pc, #104]	; (8019d08 <HAL_PCD_MspInit+0xc8>)
 8019ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019ca2:	4a19      	ldr	r2, [pc, #100]	; (8019d08 <HAL_PCD_MspInit+0xc8>)
 8019ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019caa:	4b17      	ldr	r3, [pc, #92]	; (8019d08 <HAL_PCD_MspInit+0xc8>)
 8019cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019cb2:	60fb      	str	r3, [r7, #12]
 8019cb4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019cb6:	4b14      	ldr	r3, [pc, #80]	; (8019d08 <HAL_PCD_MspInit+0xc8>)
 8019cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d114      	bne.n	8019cec <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8019cc2:	4b11      	ldr	r3, [pc, #68]	; (8019d08 <HAL_PCD_MspInit+0xc8>)
 8019cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019cc6:	4a10      	ldr	r2, [pc, #64]	; (8019d08 <HAL_PCD_MspInit+0xc8>)
 8019cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8019cce:	4b0e      	ldr	r3, [pc, #56]	; (8019d08 <HAL_PCD_MspInit+0xc8>)
 8019cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019cd6:	60bb      	str	r3, [r7, #8]
 8019cd8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8019cda:	f7f6 fe25 	bl	8010928 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8019cde:	4b0a      	ldr	r3, [pc, #40]	; (8019d08 <HAL_PCD_MspInit+0xc8>)
 8019ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019ce2:	4a09      	ldr	r2, [pc, #36]	; (8019d08 <HAL_PCD_MspInit+0xc8>)
 8019ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8019cea:	e001      	b.n	8019cf0 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8019cec:	f7f6 fe1c 	bl	8010928 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8019cf0:	2200      	movs	r2, #0
 8019cf2:	2100      	movs	r1, #0
 8019cf4:	2043      	movs	r0, #67	; 0x43
 8019cf6:	f7f3 fd68 	bl	800d7ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019cfa:	2043      	movs	r0, #67	; 0x43
 8019cfc:	f7f3 fd81 	bl	800d802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019d00:	bf00      	nop
 8019d02:	3728      	adds	r7, #40	; 0x28
 8019d04:	46bd      	mov	sp, r7
 8019d06:	bd80      	pop	{r7, pc}
 8019d08:	40021000 	.word	0x40021000

08019d0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d0c:	b580      	push	{r7, lr}
 8019d0e:	b082      	sub	sp, #8
 8019d10:	af00      	add	r7, sp, #0
 8019d12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8019d20:	4619      	mov	r1, r3
 8019d22:	4610      	mov	r0, r2
 8019d24:	f7fe fca8 	bl	8018678 <USBD_LL_SetupStage>
}
 8019d28:	bf00      	nop
 8019d2a:	3708      	adds	r7, #8
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	bd80      	pop	{r7, pc}

08019d30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d30:	b580      	push	{r7, lr}
 8019d32:	b082      	sub	sp, #8
 8019d34:	af00      	add	r7, sp, #0
 8019d36:	6078      	str	r0, [r7, #4]
 8019d38:	460b      	mov	r3, r1
 8019d3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8019d42:	78fa      	ldrb	r2, [r7, #3]
 8019d44:	6879      	ldr	r1, [r7, #4]
 8019d46:	4613      	mov	r3, r2
 8019d48:	00db      	lsls	r3, r3, #3
 8019d4a:	4413      	add	r3, r2
 8019d4c:	009b      	lsls	r3, r3, #2
 8019d4e:	440b      	add	r3, r1
 8019d50:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8019d54:	681a      	ldr	r2, [r3, #0]
 8019d56:	78fb      	ldrb	r3, [r7, #3]
 8019d58:	4619      	mov	r1, r3
 8019d5a:	f7fe fce2 	bl	8018722 <USBD_LL_DataOutStage>
}
 8019d5e:	bf00      	nop
 8019d60:	3708      	adds	r7, #8
 8019d62:	46bd      	mov	sp, r7
 8019d64:	bd80      	pop	{r7, pc}

08019d66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d66:	b580      	push	{r7, lr}
 8019d68:	b082      	sub	sp, #8
 8019d6a:	af00      	add	r7, sp, #0
 8019d6c:	6078      	str	r0, [r7, #4]
 8019d6e:	460b      	mov	r3, r1
 8019d70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8019d78:	78fa      	ldrb	r2, [r7, #3]
 8019d7a:	6879      	ldr	r1, [r7, #4]
 8019d7c:	4613      	mov	r3, r2
 8019d7e:	00db      	lsls	r3, r3, #3
 8019d80:	4413      	add	r3, r2
 8019d82:	009b      	lsls	r3, r3, #2
 8019d84:	440b      	add	r3, r1
 8019d86:	334c      	adds	r3, #76	; 0x4c
 8019d88:	681a      	ldr	r2, [r3, #0]
 8019d8a:	78fb      	ldrb	r3, [r7, #3]
 8019d8c:	4619      	mov	r1, r3
 8019d8e:	f7fe fd2b 	bl	80187e8 <USBD_LL_DataInStage>
}
 8019d92:	bf00      	nop
 8019d94:	3708      	adds	r7, #8
 8019d96:	46bd      	mov	sp, r7
 8019d98:	bd80      	pop	{r7, pc}

08019d9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d9a:	b580      	push	{r7, lr}
 8019d9c:	b082      	sub	sp, #8
 8019d9e:	af00      	add	r7, sp, #0
 8019da0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019da8:	4618      	mov	r0, r3
 8019daa:	f7fe fe3f 	bl	8018a2c <USBD_LL_SOF>
}
 8019dae:	bf00      	nop
 8019db0:	3708      	adds	r7, #8
 8019db2:	46bd      	mov	sp, r7
 8019db4:	bd80      	pop	{r7, pc}

08019db6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019db6:	b580      	push	{r7, lr}
 8019db8:	b084      	sub	sp, #16
 8019dba:	af00      	add	r7, sp, #0
 8019dbc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019dbe:	2301      	movs	r3, #1
 8019dc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	68db      	ldr	r3, [r3, #12]
 8019dc6:	2b02      	cmp	r3, #2
 8019dc8:	d001      	beq.n	8019dce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8019dca:	f7e8 fff5 	bl	8002db8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019dd4:	7bfa      	ldrb	r2, [r7, #15]
 8019dd6:	4611      	mov	r1, r2
 8019dd8:	4618      	mov	r0, r3
 8019dda:	f7fe fde9 	bl	80189b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019de4:	4618      	mov	r0, r3
 8019de6:	f7fe fd95 	bl	8018914 <USBD_LL_Reset>
}
 8019dea:	bf00      	nop
 8019dec:	3710      	adds	r7, #16
 8019dee:	46bd      	mov	sp, r7
 8019df0:	bd80      	pop	{r7, pc}
	...

08019df4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019df4:	b580      	push	{r7, lr}
 8019df6:	b082      	sub	sp, #8
 8019df8:	af00      	add	r7, sp, #0
 8019dfa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	687a      	ldr	r2, [r7, #4]
 8019e08:	6812      	ldr	r2, [r2, #0]
 8019e0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019e0e:	f043 0301 	orr.w	r3, r3, #1
 8019e12:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	f7fe fdd8 	bl	80189d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	6a1b      	ldr	r3, [r3, #32]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d005      	beq.n	8019e34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019e28:	4b04      	ldr	r3, [pc, #16]	; (8019e3c <HAL_PCD_SuspendCallback+0x48>)
 8019e2a:	691b      	ldr	r3, [r3, #16]
 8019e2c:	4a03      	ldr	r2, [pc, #12]	; (8019e3c <HAL_PCD_SuspendCallback+0x48>)
 8019e2e:	f043 0306 	orr.w	r3, r3, #6
 8019e32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019e34:	bf00      	nop
 8019e36:	3708      	adds	r7, #8
 8019e38:	46bd      	mov	sp, r7
 8019e3a:	bd80      	pop	{r7, pc}
 8019e3c:	e000ed00 	.word	0xe000ed00

08019e40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e40:	b580      	push	{r7, lr}
 8019e42:	b082      	sub	sp, #8
 8019e44:	af00      	add	r7, sp, #0
 8019e46:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	681b      	ldr	r3, [r3, #0]
 8019e4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	687a      	ldr	r2, [r7, #4]
 8019e54:	6812      	ldr	r2, [r2, #0]
 8019e56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019e5a:	f023 0301 	bic.w	r3, r3, #1
 8019e5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	6a1b      	ldr	r3, [r3, #32]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d007      	beq.n	8019e78 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019e68:	4b08      	ldr	r3, [pc, #32]	; (8019e8c <HAL_PCD_ResumeCallback+0x4c>)
 8019e6a:	691b      	ldr	r3, [r3, #16]
 8019e6c:	4a07      	ldr	r2, [pc, #28]	; (8019e8c <HAL_PCD_ResumeCallback+0x4c>)
 8019e6e:	f023 0306 	bic.w	r3, r3, #6
 8019e72:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019e74:	f000 faf6 	bl	801a464 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019e7e:	4618      	mov	r0, r3
 8019e80:	f7fe fdbc 	bl	80189fc <USBD_LL_Resume>
}
 8019e84:	bf00      	nop
 8019e86:	3708      	adds	r7, #8
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	bd80      	pop	{r7, pc}
 8019e8c:	e000ed00 	.word	0xe000ed00

08019e90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e90:	b580      	push	{r7, lr}
 8019e92:	b082      	sub	sp, #8
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	6078      	str	r0, [r7, #4]
 8019e98:	460b      	mov	r3, r1
 8019e9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019ea2:	78fa      	ldrb	r2, [r7, #3]
 8019ea4:	4611      	mov	r1, r2
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	f7fe fe08 	bl	8018abc <USBD_LL_IsoOUTIncomplete>
}
 8019eac:	bf00      	nop
 8019eae:	3708      	adds	r7, #8
 8019eb0:	46bd      	mov	sp, r7
 8019eb2:	bd80      	pop	{r7, pc}

08019eb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	b082      	sub	sp, #8
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	6078      	str	r0, [r7, #4]
 8019ebc:	460b      	mov	r3, r1
 8019ebe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019ec6:	78fa      	ldrb	r2, [r7, #3]
 8019ec8:	4611      	mov	r1, r2
 8019eca:	4618      	mov	r0, r3
 8019ecc:	f7fe fdd0 	bl	8018a70 <USBD_LL_IsoINIncomplete>
}
 8019ed0:	bf00      	nop
 8019ed2:	3708      	adds	r7, #8
 8019ed4:	46bd      	mov	sp, r7
 8019ed6:	bd80      	pop	{r7, pc}

08019ed8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019ed8:	b580      	push	{r7, lr}
 8019eda:	b082      	sub	sp, #8
 8019edc:	af00      	add	r7, sp, #0
 8019ede:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	f7fe fe0e 	bl	8018b08 <USBD_LL_DevConnected>
}
 8019eec:	bf00      	nop
 8019eee:	3708      	adds	r7, #8
 8019ef0:	46bd      	mov	sp, r7
 8019ef2:	bd80      	pop	{r7, pc}

08019ef4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b082      	sub	sp, #8
 8019ef8:	af00      	add	r7, sp, #0
 8019efa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019f02:	4618      	mov	r0, r3
 8019f04:	f7fe fe0b 	bl	8018b1e <USBD_LL_DevDisconnected>
}
 8019f08:	bf00      	nop
 8019f0a:	3708      	adds	r7, #8
 8019f0c:	46bd      	mov	sp, r7
 8019f0e:	bd80      	pop	{r7, pc}

08019f10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019f10:	b580      	push	{r7, lr}
 8019f12:	b082      	sub	sp, #8
 8019f14:	af00      	add	r7, sp, #0
 8019f16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	781b      	ldrb	r3, [r3, #0]
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d13c      	bne.n	8019f9a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019f20:	4a20      	ldr	r2, [pc, #128]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	4a1e      	ldr	r2, [pc, #120]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019f30:	4b1c      	ldr	r3, [pc, #112]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019f36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8019f38:	4b1a      	ldr	r3, [pc, #104]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f3a:	2206      	movs	r2, #6
 8019f3c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019f3e:	4b19      	ldr	r3, [pc, #100]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f40:	2202      	movs	r2, #2
 8019f42:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019f44:	4b17      	ldr	r3, [pc, #92]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f46:	2202      	movs	r2, #2
 8019f48:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019f4a:	4b16      	ldr	r3, [pc, #88]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f4c:	2200      	movs	r2, #0
 8019f4e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019f50:	4b14      	ldr	r3, [pc, #80]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f52:	2200      	movs	r2, #0
 8019f54:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019f56:	4b13      	ldr	r3, [pc, #76]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f58:	2200      	movs	r2, #0
 8019f5a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8019f5c:	4b11      	ldr	r3, [pc, #68]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f5e:	2200      	movs	r2, #0
 8019f60:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019f62:	4b10      	ldr	r3, [pc, #64]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f64:	2200      	movs	r2, #0
 8019f66:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019f68:	4b0e      	ldr	r3, [pc, #56]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019f6e:	480d      	ldr	r0, [pc, #52]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f70:	f7f5 fa73 	bl	800f45a <HAL_PCD_Init>
 8019f74:	4603      	mov	r3, r0
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d001      	beq.n	8019f7e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8019f7a:	f7e8 ff1d 	bl	8002db8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019f7e:	2180      	movs	r1, #128	; 0x80
 8019f80:	4808      	ldr	r0, [pc, #32]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f82:	f7f6 fbf4 	bl	801076e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019f86:	2240      	movs	r2, #64	; 0x40
 8019f88:	2100      	movs	r1, #0
 8019f8a:	4806      	ldr	r0, [pc, #24]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f8c:	f7f6 fba8 	bl	80106e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019f90:	2280      	movs	r2, #128	; 0x80
 8019f92:	2101      	movs	r1, #1
 8019f94:	4803      	ldr	r0, [pc, #12]	; (8019fa4 <USBD_LL_Init+0x94>)
 8019f96:	f7f6 fba3 	bl	80106e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8019f9a:	2300      	movs	r3, #0
}
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	3708      	adds	r7, #8
 8019fa0:	46bd      	mov	sp, r7
 8019fa2:	bd80      	pop	{r7, pc}
 8019fa4:	200030ec 	.word	0x200030ec

08019fa8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b084      	sub	sp, #16
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019fb0:	2300      	movs	r3, #0
 8019fb2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	f7f5 fb6f 	bl	800f6a2 <HAL_PCD_Start>
 8019fc4:	4603      	mov	r3, r0
 8019fc6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019fc8:	7bbb      	ldrb	r3, [r7, #14]
 8019fca:	2b03      	cmp	r3, #3
 8019fcc:	d816      	bhi.n	8019ffc <USBD_LL_Start+0x54>
 8019fce:	a201      	add	r2, pc, #4	; (adr r2, 8019fd4 <USBD_LL_Start+0x2c>)
 8019fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019fd4:	08019fe5 	.word	0x08019fe5
 8019fd8:	08019feb 	.word	0x08019feb
 8019fdc:	08019ff1 	.word	0x08019ff1
 8019fe0:	08019ff7 	.word	0x08019ff7
    case HAL_OK :
      usb_status = USBD_OK;
 8019fe4:	2300      	movs	r3, #0
 8019fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8019fe8:	e00b      	b.n	801a002 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019fea:	2303      	movs	r3, #3
 8019fec:	73fb      	strb	r3, [r7, #15]
    break;
 8019fee:	e008      	b.n	801a002 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019ff0:	2301      	movs	r3, #1
 8019ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8019ff4:	e005      	b.n	801a002 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019ff6:	2303      	movs	r3, #3
 8019ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8019ffa:	e002      	b.n	801a002 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8019ffc:	2303      	movs	r3, #3
 8019ffe:	73fb      	strb	r3, [r7, #15]
    break;
 801a000:	bf00      	nop
  }
  return usb_status;
 801a002:	7bfb      	ldrb	r3, [r7, #15]
}
 801a004:	4618      	mov	r0, r3
 801a006:	3710      	adds	r7, #16
 801a008:	46bd      	mov	sp, r7
 801a00a:	bd80      	pop	{r7, pc}

0801a00c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a00c:	b580      	push	{r7, lr}
 801a00e:	b084      	sub	sp, #16
 801a010:	af00      	add	r7, sp, #0
 801a012:	6078      	str	r0, [r7, #4]
 801a014:	4608      	mov	r0, r1
 801a016:	4611      	mov	r1, r2
 801a018:	461a      	mov	r2, r3
 801a01a:	4603      	mov	r3, r0
 801a01c:	70fb      	strb	r3, [r7, #3]
 801a01e:	460b      	mov	r3, r1
 801a020:	70bb      	strb	r3, [r7, #2]
 801a022:	4613      	mov	r3, r2
 801a024:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a026:	2300      	movs	r3, #0
 801a028:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a02a:	2300      	movs	r3, #0
 801a02c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a034:	78bb      	ldrb	r3, [r7, #2]
 801a036:	883a      	ldrh	r2, [r7, #0]
 801a038:	78f9      	ldrb	r1, [r7, #3]
 801a03a:	f7f6 f819 	bl	8010070 <HAL_PCD_EP_Open>
 801a03e:	4603      	mov	r3, r0
 801a040:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801a042:	7bbb      	ldrb	r3, [r7, #14]
 801a044:	2b03      	cmp	r3, #3
 801a046:	d817      	bhi.n	801a078 <USBD_LL_OpenEP+0x6c>
 801a048:	a201      	add	r2, pc, #4	; (adr r2, 801a050 <USBD_LL_OpenEP+0x44>)
 801a04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a04e:	bf00      	nop
 801a050:	0801a061 	.word	0x0801a061
 801a054:	0801a067 	.word	0x0801a067
 801a058:	0801a06d 	.word	0x0801a06d
 801a05c:	0801a073 	.word	0x0801a073
    case HAL_OK :
      usb_status = USBD_OK;
 801a060:	2300      	movs	r3, #0
 801a062:	73fb      	strb	r3, [r7, #15]
    break;
 801a064:	e00b      	b.n	801a07e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a066:	2303      	movs	r3, #3
 801a068:	73fb      	strb	r3, [r7, #15]
    break;
 801a06a:	e008      	b.n	801a07e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a06c:	2301      	movs	r3, #1
 801a06e:	73fb      	strb	r3, [r7, #15]
    break;
 801a070:	e005      	b.n	801a07e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a072:	2303      	movs	r3, #3
 801a074:	73fb      	strb	r3, [r7, #15]
    break;
 801a076:	e002      	b.n	801a07e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 801a078:	2303      	movs	r3, #3
 801a07a:	73fb      	strb	r3, [r7, #15]
    break;
 801a07c:	bf00      	nop
  }
  return usb_status;
 801a07e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a080:	4618      	mov	r0, r3
 801a082:	3710      	adds	r7, #16
 801a084:	46bd      	mov	sp, r7
 801a086:	bd80      	pop	{r7, pc}

0801a088 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a088:	b580      	push	{r7, lr}
 801a08a:	b084      	sub	sp, #16
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	6078      	str	r0, [r7, #4]
 801a090:	460b      	mov	r3, r1
 801a092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a094:	2300      	movs	r3, #0
 801a096:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a098:	2300      	movs	r3, #0
 801a09a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a0a2:	78fa      	ldrb	r2, [r7, #3]
 801a0a4:	4611      	mov	r1, r2
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	f7f6 f84a 	bl	8010140 <HAL_PCD_EP_Close>
 801a0ac:	4603      	mov	r3, r0
 801a0ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801a0b0:	7bbb      	ldrb	r3, [r7, #14]
 801a0b2:	2b03      	cmp	r3, #3
 801a0b4:	d816      	bhi.n	801a0e4 <USBD_LL_CloseEP+0x5c>
 801a0b6:	a201      	add	r2, pc, #4	; (adr r2, 801a0bc <USBD_LL_CloseEP+0x34>)
 801a0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a0bc:	0801a0cd 	.word	0x0801a0cd
 801a0c0:	0801a0d3 	.word	0x0801a0d3
 801a0c4:	0801a0d9 	.word	0x0801a0d9
 801a0c8:	0801a0df 	.word	0x0801a0df
    case HAL_OK :
      usb_status = USBD_OK;
 801a0cc:	2300      	movs	r3, #0
 801a0ce:	73fb      	strb	r3, [r7, #15]
    break;
 801a0d0:	e00b      	b.n	801a0ea <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a0d2:	2303      	movs	r3, #3
 801a0d4:	73fb      	strb	r3, [r7, #15]
    break;
 801a0d6:	e008      	b.n	801a0ea <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a0d8:	2301      	movs	r3, #1
 801a0da:	73fb      	strb	r3, [r7, #15]
    break;
 801a0dc:	e005      	b.n	801a0ea <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a0de:	2303      	movs	r3, #3
 801a0e0:	73fb      	strb	r3, [r7, #15]
    break;
 801a0e2:	e002      	b.n	801a0ea <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801a0e4:	2303      	movs	r3, #3
 801a0e6:	73fb      	strb	r3, [r7, #15]
    break;
 801a0e8:	bf00      	nop
  }
  return usb_status;
 801a0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	3710      	adds	r7, #16
 801a0f0:	46bd      	mov	sp, r7
 801a0f2:	bd80      	pop	{r7, pc}

0801a0f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a0f4:	b580      	push	{r7, lr}
 801a0f6:	b084      	sub	sp, #16
 801a0f8:	af00      	add	r7, sp, #0
 801a0fa:	6078      	str	r0, [r7, #4]
 801a0fc:	460b      	mov	r3, r1
 801a0fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a100:	2300      	movs	r3, #0
 801a102:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a104:	2300      	movs	r3, #0
 801a106:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a10e:	78fa      	ldrb	r2, [r7, #3]
 801a110:	4611      	mov	r1, r2
 801a112:	4618      	mov	r0, r3
 801a114:	f7f6 f8f1 	bl	80102fa <HAL_PCD_EP_SetStall>
 801a118:	4603      	mov	r3, r0
 801a11a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801a11c:	7bbb      	ldrb	r3, [r7, #14]
 801a11e:	2b03      	cmp	r3, #3
 801a120:	d816      	bhi.n	801a150 <USBD_LL_StallEP+0x5c>
 801a122:	a201      	add	r2, pc, #4	; (adr r2, 801a128 <USBD_LL_StallEP+0x34>)
 801a124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a128:	0801a139 	.word	0x0801a139
 801a12c:	0801a13f 	.word	0x0801a13f
 801a130:	0801a145 	.word	0x0801a145
 801a134:	0801a14b 	.word	0x0801a14b
    case HAL_OK :
      usb_status = USBD_OK;
 801a138:	2300      	movs	r3, #0
 801a13a:	73fb      	strb	r3, [r7, #15]
    break;
 801a13c:	e00b      	b.n	801a156 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a13e:	2303      	movs	r3, #3
 801a140:	73fb      	strb	r3, [r7, #15]
    break;
 801a142:	e008      	b.n	801a156 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a144:	2301      	movs	r3, #1
 801a146:	73fb      	strb	r3, [r7, #15]
    break;
 801a148:	e005      	b.n	801a156 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a14a:	2303      	movs	r3, #3
 801a14c:	73fb      	strb	r3, [r7, #15]
    break;
 801a14e:	e002      	b.n	801a156 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801a150:	2303      	movs	r3, #3
 801a152:	73fb      	strb	r3, [r7, #15]
    break;
 801a154:	bf00      	nop
  }
  return usb_status;
 801a156:	7bfb      	ldrb	r3, [r7, #15]
}
 801a158:	4618      	mov	r0, r3
 801a15a:	3710      	adds	r7, #16
 801a15c:	46bd      	mov	sp, r7
 801a15e:	bd80      	pop	{r7, pc}

0801a160 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a160:	b580      	push	{r7, lr}
 801a162:	b084      	sub	sp, #16
 801a164:	af00      	add	r7, sp, #0
 801a166:	6078      	str	r0, [r7, #4]
 801a168:	460b      	mov	r3, r1
 801a16a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a16c:	2300      	movs	r3, #0
 801a16e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a170:	2300      	movs	r3, #0
 801a172:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a17a:	78fa      	ldrb	r2, [r7, #3]
 801a17c:	4611      	mov	r1, r2
 801a17e:	4618      	mov	r0, r3
 801a180:	f7f6 f91d 	bl	80103be <HAL_PCD_EP_ClrStall>
 801a184:	4603      	mov	r3, r0
 801a186:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801a188:	7bbb      	ldrb	r3, [r7, #14]
 801a18a:	2b03      	cmp	r3, #3
 801a18c:	d816      	bhi.n	801a1bc <USBD_LL_ClearStallEP+0x5c>
 801a18e:	a201      	add	r2, pc, #4	; (adr r2, 801a194 <USBD_LL_ClearStallEP+0x34>)
 801a190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a194:	0801a1a5 	.word	0x0801a1a5
 801a198:	0801a1ab 	.word	0x0801a1ab
 801a19c:	0801a1b1 	.word	0x0801a1b1
 801a1a0:	0801a1b7 	.word	0x0801a1b7
    case HAL_OK :
      usb_status = USBD_OK;
 801a1a4:	2300      	movs	r3, #0
 801a1a6:	73fb      	strb	r3, [r7, #15]
    break;
 801a1a8:	e00b      	b.n	801a1c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a1aa:	2303      	movs	r3, #3
 801a1ac:	73fb      	strb	r3, [r7, #15]
    break;
 801a1ae:	e008      	b.n	801a1c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a1b0:	2301      	movs	r3, #1
 801a1b2:	73fb      	strb	r3, [r7, #15]
    break;
 801a1b4:	e005      	b.n	801a1c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a1b6:	2303      	movs	r3, #3
 801a1b8:	73fb      	strb	r3, [r7, #15]
    break;
 801a1ba:	e002      	b.n	801a1c2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801a1bc:	2303      	movs	r3, #3
 801a1be:	73fb      	strb	r3, [r7, #15]
    break;
 801a1c0:	bf00      	nop
  }
  return usb_status;
 801a1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a1c4:	4618      	mov	r0, r3
 801a1c6:	3710      	adds	r7, #16
 801a1c8:	46bd      	mov	sp, r7
 801a1ca:	bd80      	pop	{r7, pc}

0801a1cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a1cc:	b480      	push	{r7}
 801a1ce:	b085      	sub	sp, #20
 801a1d0:	af00      	add	r7, sp, #0
 801a1d2:	6078      	str	r0, [r7, #4]
 801a1d4:	460b      	mov	r3, r1
 801a1d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a1de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a1e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	da0b      	bge.n	801a200 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a1e8:	78fb      	ldrb	r3, [r7, #3]
 801a1ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a1ee:	68f9      	ldr	r1, [r7, #12]
 801a1f0:	4613      	mov	r3, r2
 801a1f2:	00db      	lsls	r3, r3, #3
 801a1f4:	4413      	add	r3, r2
 801a1f6:	009b      	lsls	r3, r3, #2
 801a1f8:	440b      	add	r3, r1
 801a1fa:	333e      	adds	r3, #62	; 0x3e
 801a1fc:	781b      	ldrb	r3, [r3, #0]
 801a1fe:	e00b      	b.n	801a218 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a200:	78fb      	ldrb	r3, [r7, #3]
 801a202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a206:	68f9      	ldr	r1, [r7, #12]
 801a208:	4613      	mov	r3, r2
 801a20a:	00db      	lsls	r3, r3, #3
 801a20c:	4413      	add	r3, r2
 801a20e:	009b      	lsls	r3, r3, #2
 801a210:	440b      	add	r3, r1
 801a212:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801a216:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a218:	4618      	mov	r0, r3
 801a21a:	3714      	adds	r7, #20
 801a21c:	46bd      	mov	sp, r7
 801a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a222:	4770      	bx	lr

0801a224 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a224:	b580      	push	{r7, lr}
 801a226:	b084      	sub	sp, #16
 801a228:	af00      	add	r7, sp, #0
 801a22a:	6078      	str	r0, [r7, #4]
 801a22c:	460b      	mov	r3, r1
 801a22e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a230:	2300      	movs	r3, #0
 801a232:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a234:	2300      	movs	r3, #0
 801a236:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a23e:	78fa      	ldrb	r2, [r7, #3]
 801a240:	4611      	mov	r1, r2
 801a242:	4618      	mov	r0, r3
 801a244:	f7f5 feef 	bl	8010026 <HAL_PCD_SetAddress>
 801a248:	4603      	mov	r3, r0
 801a24a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801a24c:	7bbb      	ldrb	r3, [r7, #14]
 801a24e:	2b03      	cmp	r3, #3
 801a250:	d816      	bhi.n	801a280 <USBD_LL_SetUSBAddress+0x5c>
 801a252:	a201      	add	r2, pc, #4	; (adr r2, 801a258 <USBD_LL_SetUSBAddress+0x34>)
 801a254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a258:	0801a269 	.word	0x0801a269
 801a25c:	0801a26f 	.word	0x0801a26f
 801a260:	0801a275 	.word	0x0801a275
 801a264:	0801a27b 	.word	0x0801a27b
    case HAL_OK :
      usb_status = USBD_OK;
 801a268:	2300      	movs	r3, #0
 801a26a:	73fb      	strb	r3, [r7, #15]
    break;
 801a26c:	e00b      	b.n	801a286 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a26e:	2303      	movs	r3, #3
 801a270:	73fb      	strb	r3, [r7, #15]
    break;
 801a272:	e008      	b.n	801a286 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a274:	2301      	movs	r3, #1
 801a276:	73fb      	strb	r3, [r7, #15]
    break;
 801a278:	e005      	b.n	801a286 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a27a:	2303      	movs	r3, #3
 801a27c:	73fb      	strb	r3, [r7, #15]
    break;
 801a27e:	e002      	b.n	801a286 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 801a280:	2303      	movs	r3, #3
 801a282:	73fb      	strb	r3, [r7, #15]
    break;
 801a284:	bf00      	nop
  }
  return usb_status;
 801a286:	7bfb      	ldrb	r3, [r7, #15]
}
 801a288:	4618      	mov	r0, r3
 801a28a:	3710      	adds	r7, #16
 801a28c:	46bd      	mov	sp, r7
 801a28e:	bd80      	pop	{r7, pc}

0801a290 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a290:	b580      	push	{r7, lr}
 801a292:	b086      	sub	sp, #24
 801a294:	af00      	add	r7, sp, #0
 801a296:	60f8      	str	r0, [r7, #12]
 801a298:	607a      	str	r2, [r7, #4]
 801a29a:	603b      	str	r3, [r7, #0]
 801a29c:	460b      	mov	r3, r1
 801a29e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a2ae:	7af9      	ldrb	r1, [r7, #11]
 801a2b0:	683b      	ldr	r3, [r7, #0]
 801a2b2:	687a      	ldr	r2, [r7, #4]
 801a2b4:	f7f5 ffe4 	bl	8010280 <HAL_PCD_EP_Transmit>
 801a2b8:	4603      	mov	r3, r0
 801a2ba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801a2bc:	7dbb      	ldrb	r3, [r7, #22]
 801a2be:	2b03      	cmp	r3, #3
 801a2c0:	d816      	bhi.n	801a2f0 <USBD_LL_Transmit+0x60>
 801a2c2:	a201      	add	r2, pc, #4	; (adr r2, 801a2c8 <USBD_LL_Transmit+0x38>)
 801a2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2c8:	0801a2d9 	.word	0x0801a2d9
 801a2cc:	0801a2df 	.word	0x0801a2df
 801a2d0:	0801a2e5 	.word	0x0801a2e5
 801a2d4:	0801a2eb 	.word	0x0801a2eb
    case HAL_OK :
      usb_status = USBD_OK;
 801a2d8:	2300      	movs	r3, #0
 801a2da:	75fb      	strb	r3, [r7, #23]
    break;
 801a2dc:	e00b      	b.n	801a2f6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a2de:	2303      	movs	r3, #3
 801a2e0:	75fb      	strb	r3, [r7, #23]
    break;
 801a2e2:	e008      	b.n	801a2f6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a2e4:	2301      	movs	r3, #1
 801a2e6:	75fb      	strb	r3, [r7, #23]
    break;
 801a2e8:	e005      	b.n	801a2f6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a2ea:	2303      	movs	r3, #3
 801a2ec:	75fb      	strb	r3, [r7, #23]
    break;
 801a2ee:	e002      	b.n	801a2f6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 801a2f0:	2303      	movs	r3, #3
 801a2f2:	75fb      	strb	r3, [r7, #23]
    break;
 801a2f4:	bf00      	nop
  }
  return usb_status;
 801a2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 801a2f8:	4618      	mov	r0, r3
 801a2fa:	3718      	adds	r7, #24
 801a2fc:	46bd      	mov	sp, r7
 801a2fe:	bd80      	pop	{r7, pc}

0801a300 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a300:	b580      	push	{r7, lr}
 801a302:	b086      	sub	sp, #24
 801a304:	af00      	add	r7, sp, #0
 801a306:	60f8      	str	r0, [r7, #12]
 801a308:	607a      	str	r2, [r7, #4]
 801a30a:	603b      	str	r3, [r7, #0]
 801a30c:	460b      	mov	r3, r1
 801a30e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a310:	2300      	movs	r3, #0
 801a312:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a314:	2300      	movs	r3, #0
 801a316:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a31e:	7af9      	ldrb	r1, [r7, #11]
 801a320:	683b      	ldr	r3, [r7, #0]
 801a322:	687a      	ldr	r2, [r7, #4]
 801a324:	f7f5 ff56 	bl	80101d4 <HAL_PCD_EP_Receive>
 801a328:	4603      	mov	r3, r0
 801a32a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801a32c:	7dbb      	ldrb	r3, [r7, #22]
 801a32e:	2b03      	cmp	r3, #3
 801a330:	d816      	bhi.n	801a360 <USBD_LL_PrepareReceive+0x60>
 801a332:	a201      	add	r2, pc, #4	; (adr r2, 801a338 <USBD_LL_PrepareReceive+0x38>)
 801a334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a338:	0801a349 	.word	0x0801a349
 801a33c:	0801a34f 	.word	0x0801a34f
 801a340:	0801a355 	.word	0x0801a355
 801a344:	0801a35b 	.word	0x0801a35b
    case HAL_OK :
      usb_status = USBD_OK;
 801a348:	2300      	movs	r3, #0
 801a34a:	75fb      	strb	r3, [r7, #23]
    break;
 801a34c:	e00b      	b.n	801a366 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a34e:	2303      	movs	r3, #3
 801a350:	75fb      	strb	r3, [r7, #23]
    break;
 801a352:	e008      	b.n	801a366 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a354:	2301      	movs	r3, #1
 801a356:	75fb      	strb	r3, [r7, #23]
    break;
 801a358:	e005      	b.n	801a366 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a35a:	2303      	movs	r3, #3
 801a35c:	75fb      	strb	r3, [r7, #23]
    break;
 801a35e:	e002      	b.n	801a366 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 801a360:	2303      	movs	r3, #3
 801a362:	75fb      	strb	r3, [r7, #23]
    break;
 801a364:	bf00      	nop
  }
  return usb_status;
 801a366:	7dfb      	ldrb	r3, [r7, #23]
}
 801a368:	4618      	mov	r0, r3
 801a36a:	3718      	adds	r7, #24
 801a36c:	46bd      	mov	sp, r7
 801a36e:	bd80      	pop	{r7, pc}

0801a370 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a370:	b580      	push	{r7, lr}
 801a372:	b082      	sub	sp, #8
 801a374:	af00      	add	r7, sp, #0
 801a376:	6078      	str	r0, [r7, #4]
 801a378:	460b      	mov	r3, r1
 801a37a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a382:	78fa      	ldrb	r2, [r7, #3]
 801a384:	4611      	mov	r1, r2
 801a386:	4618      	mov	r0, r3
 801a388:	f7f5 ff62 	bl	8010250 <HAL_PCD_EP_GetRxCount>
 801a38c:	4603      	mov	r3, r0
}
 801a38e:	4618      	mov	r0, r3
 801a390:	3708      	adds	r7, #8
 801a392:	46bd      	mov	sp, r7
 801a394:	bd80      	pop	{r7, pc}
	...

0801a398 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b082      	sub	sp, #8
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	6078      	str	r0, [r7, #4]
 801a3a0:	460b      	mov	r3, r1
 801a3a2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801a3a4:	78fb      	ldrb	r3, [r7, #3]
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d002      	beq.n	801a3b0 <HAL_PCDEx_LPM_Callback+0x18>
 801a3aa:	2b01      	cmp	r3, #1
 801a3ac:	d01f      	beq.n	801a3ee <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801a3ae:	e03b      	b.n	801a428 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	6a1b      	ldr	r3, [r3, #32]
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d007      	beq.n	801a3c8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801a3b8:	f000 f854 	bl	801a464 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a3bc:	4b1c      	ldr	r3, [pc, #112]	; (801a430 <HAL_PCDEx_LPM_Callback+0x98>)
 801a3be:	691b      	ldr	r3, [r3, #16]
 801a3c0:	4a1b      	ldr	r2, [pc, #108]	; (801a430 <HAL_PCDEx_LPM_Callback+0x98>)
 801a3c2:	f023 0306 	bic.w	r3, r3, #6
 801a3c6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	687a      	ldr	r2, [r7, #4]
 801a3d4:	6812      	ldr	r2, [r2, #0]
 801a3d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a3da:	f023 0301 	bic.w	r3, r3, #1
 801a3de:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	f7fe fb08 	bl	80189fc <USBD_LL_Resume>
    break;
 801a3ec:	e01c      	b.n	801a428 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	687a      	ldr	r2, [r7, #4]
 801a3fa:	6812      	ldr	r2, [r2, #0]
 801a3fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a400:	f043 0301 	orr.w	r3, r3, #1
 801a404:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a40c:	4618      	mov	r0, r3
 801a40e:	f7fe fadf 	bl	80189d0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	6a1b      	ldr	r3, [r3, #32]
 801a416:	2b00      	cmp	r3, #0
 801a418:	d005      	beq.n	801a426 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a41a:	4b05      	ldr	r3, [pc, #20]	; (801a430 <HAL_PCDEx_LPM_Callback+0x98>)
 801a41c:	691b      	ldr	r3, [r3, #16]
 801a41e:	4a04      	ldr	r2, [pc, #16]	; (801a430 <HAL_PCDEx_LPM_Callback+0x98>)
 801a420:	f043 0306 	orr.w	r3, r3, #6
 801a424:	6113      	str	r3, [r2, #16]
    break;
 801a426:	bf00      	nop
}
 801a428:	bf00      	nop
 801a42a:	3708      	adds	r7, #8
 801a42c:	46bd      	mov	sp, r7
 801a42e:	bd80      	pop	{r7, pc}
 801a430:	e000ed00 	.word	0xe000ed00

0801a434 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a434:	b480      	push	{r7}
 801a436:	b083      	sub	sp, #12
 801a438:	af00      	add	r7, sp, #0
 801a43a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a43c:	4b03      	ldr	r3, [pc, #12]	; (801a44c <USBD_static_malloc+0x18>)
}
 801a43e:	4618      	mov	r0, r3
 801a440:	370c      	adds	r7, #12
 801a442:	46bd      	mov	sp, r7
 801a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a448:	4770      	bx	lr
 801a44a:	bf00      	nop
 801a44c:	200035f8 	.word	0x200035f8

0801a450 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a450:	b480      	push	{r7}
 801a452:	b083      	sub	sp, #12
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]

}
 801a458:	bf00      	nop
 801a45a:	370c      	adds	r7, #12
 801a45c:	46bd      	mov	sp, r7
 801a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a462:	4770      	bx	lr

0801a464 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801a464:	b580      	push	{r7, lr}
 801a466:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801a468:	f7e8 f9ea 	bl	8002840 <SystemClock_Config>
}
 801a46c:	bf00      	nop
 801a46e:	bd80      	pop	{r7, pc}

0801a470 <__errno>:
 801a470:	4b01      	ldr	r3, [pc, #4]	; (801a478 <__errno+0x8>)
 801a472:	6818      	ldr	r0, [r3, #0]
 801a474:	4770      	bx	lr
 801a476:	bf00      	nop
 801a478:	200006e8 	.word	0x200006e8

0801a47c <__libc_init_array>:
 801a47c:	b570      	push	{r4, r5, r6, lr}
 801a47e:	4d0d      	ldr	r5, [pc, #52]	; (801a4b4 <__libc_init_array+0x38>)
 801a480:	4c0d      	ldr	r4, [pc, #52]	; (801a4b8 <__libc_init_array+0x3c>)
 801a482:	1b64      	subs	r4, r4, r5
 801a484:	10a4      	asrs	r4, r4, #2
 801a486:	2600      	movs	r6, #0
 801a488:	42a6      	cmp	r6, r4
 801a48a:	d109      	bne.n	801a4a0 <__libc_init_array+0x24>
 801a48c:	4d0b      	ldr	r5, [pc, #44]	; (801a4bc <__libc_init_array+0x40>)
 801a48e:	4c0c      	ldr	r4, [pc, #48]	; (801a4c0 <__libc_init_array+0x44>)
 801a490:	f001 fa08 	bl	801b8a4 <_init>
 801a494:	1b64      	subs	r4, r4, r5
 801a496:	10a4      	asrs	r4, r4, #2
 801a498:	2600      	movs	r6, #0
 801a49a:	42a6      	cmp	r6, r4
 801a49c:	d105      	bne.n	801a4aa <__libc_init_array+0x2e>
 801a49e:	bd70      	pop	{r4, r5, r6, pc}
 801a4a0:	f855 3b04 	ldr.w	r3, [r5], #4
 801a4a4:	4798      	blx	r3
 801a4a6:	3601      	adds	r6, #1
 801a4a8:	e7ee      	b.n	801a488 <__libc_init_array+0xc>
 801a4aa:	f855 3b04 	ldr.w	r3, [r5], #4
 801a4ae:	4798      	blx	r3
 801a4b0:	3601      	adds	r6, #1
 801a4b2:	e7f2      	b.n	801a49a <__libc_init_array+0x1e>
 801a4b4:	0801d984 	.word	0x0801d984
 801a4b8:	0801d984 	.word	0x0801d984
 801a4bc:	0801d984 	.word	0x0801d984
 801a4c0:	0801d988 	.word	0x0801d988

0801a4c4 <memcpy>:
 801a4c4:	440a      	add	r2, r1
 801a4c6:	4291      	cmp	r1, r2
 801a4c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a4cc:	d100      	bne.n	801a4d0 <memcpy+0xc>
 801a4ce:	4770      	bx	lr
 801a4d0:	b510      	push	{r4, lr}
 801a4d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a4d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a4da:	4291      	cmp	r1, r2
 801a4dc:	d1f9      	bne.n	801a4d2 <memcpy+0xe>
 801a4de:	bd10      	pop	{r4, pc}

0801a4e0 <memset>:
 801a4e0:	4402      	add	r2, r0
 801a4e2:	4603      	mov	r3, r0
 801a4e4:	4293      	cmp	r3, r2
 801a4e6:	d100      	bne.n	801a4ea <memset+0xa>
 801a4e8:	4770      	bx	lr
 801a4ea:	f803 1b01 	strb.w	r1, [r3], #1
 801a4ee:	e7f9      	b.n	801a4e4 <memset+0x4>

0801a4f0 <_free_r>:
 801a4f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a4f2:	2900      	cmp	r1, #0
 801a4f4:	d044      	beq.n	801a580 <_free_r+0x90>
 801a4f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a4fa:	9001      	str	r0, [sp, #4]
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	f1a1 0404 	sub.w	r4, r1, #4
 801a502:	bfb8      	it	lt
 801a504:	18e4      	addlt	r4, r4, r3
 801a506:	f000 fc79 	bl	801adfc <__malloc_lock>
 801a50a:	4a1e      	ldr	r2, [pc, #120]	; (801a584 <_free_r+0x94>)
 801a50c:	9801      	ldr	r0, [sp, #4]
 801a50e:	6813      	ldr	r3, [r2, #0]
 801a510:	b933      	cbnz	r3, 801a520 <_free_r+0x30>
 801a512:	6063      	str	r3, [r4, #4]
 801a514:	6014      	str	r4, [r2, #0]
 801a516:	b003      	add	sp, #12
 801a518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a51c:	f000 bc74 	b.w	801ae08 <__malloc_unlock>
 801a520:	42a3      	cmp	r3, r4
 801a522:	d908      	bls.n	801a536 <_free_r+0x46>
 801a524:	6825      	ldr	r5, [r4, #0]
 801a526:	1961      	adds	r1, r4, r5
 801a528:	428b      	cmp	r3, r1
 801a52a:	bf01      	itttt	eq
 801a52c:	6819      	ldreq	r1, [r3, #0]
 801a52e:	685b      	ldreq	r3, [r3, #4]
 801a530:	1949      	addeq	r1, r1, r5
 801a532:	6021      	streq	r1, [r4, #0]
 801a534:	e7ed      	b.n	801a512 <_free_r+0x22>
 801a536:	461a      	mov	r2, r3
 801a538:	685b      	ldr	r3, [r3, #4]
 801a53a:	b10b      	cbz	r3, 801a540 <_free_r+0x50>
 801a53c:	42a3      	cmp	r3, r4
 801a53e:	d9fa      	bls.n	801a536 <_free_r+0x46>
 801a540:	6811      	ldr	r1, [r2, #0]
 801a542:	1855      	adds	r5, r2, r1
 801a544:	42a5      	cmp	r5, r4
 801a546:	d10b      	bne.n	801a560 <_free_r+0x70>
 801a548:	6824      	ldr	r4, [r4, #0]
 801a54a:	4421      	add	r1, r4
 801a54c:	1854      	adds	r4, r2, r1
 801a54e:	42a3      	cmp	r3, r4
 801a550:	6011      	str	r1, [r2, #0]
 801a552:	d1e0      	bne.n	801a516 <_free_r+0x26>
 801a554:	681c      	ldr	r4, [r3, #0]
 801a556:	685b      	ldr	r3, [r3, #4]
 801a558:	6053      	str	r3, [r2, #4]
 801a55a:	4421      	add	r1, r4
 801a55c:	6011      	str	r1, [r2, #0]
 801a55e:	e7da      	b.n	801a516 <_free_r+0x26>
 801a560:	d902      	bls.n	801a568 <_free_r+0x78>
 801a562:	230c      	movs	r3, #12
 801a564:	6003      	str	r3, [r0, #0]
 801a566:	e7d6      	b.n	801a516 <_free_r+0x26>
 801a568:	6825      	ldr	r5, [r4, #0]
 801a56a:	1961      	adds	r1, r4, r5
 801a56c:	428b      	cmp	r3, r1
 801a56e:	bf04      	itt	eq
 801a570:	6819      	ldreq	r1, [r3, #0]
 801a572:	685b      	ldreq	r3, [r3, #4]
 801a574:	6063      	str	r3, [r4, #4]
 801a576:	bf04      	itt	eq
 801a578:	1949      	addeq	r1, r1, r5
 801a57a:	6021      	streq	r1, [r4, #0]
 801a57c:	6054      	str	r4, [r2, #4]
 801a57e:	e7ca      	b.n	801a516 <_free_r+0x26>
 801a580:	b003      	add	sp, #12
 801a582:	bd30      	pop	{r4, r5, pc}
 801a584:	20003818 	.word	0x20003818

0801a588 <sbrk_aligned>:
 801a588:	b570      	push	{r4, r5, r6, lr}
 801a58a:	4e0e      	ldr	r6, [pc, #56]	; (801a5c4 <sbrk_aligned+0x3c>)
 801a58c:	460c      	mov	r4, r1
 801a58e:	6831      	ldr	r1, [r6, #0]
 801a590:	4605      	mov	r5, r0
 801a592:	b911      	cbnz	r1, 801a59a <sbrk_aligned+0x12>
 801a594:	f000 f91a 	bl	801a7cc <_sbrk_r>
 801a598:	6030      	str	r0, [r6, #0]
 801a59a:	4621      	mov	r1, r4
 801a59c:	4628      	mov	r0, r5
 801a59e:	f000 f915 	bl	801a7cc <_sbrk_r>
 801a5a2:	1c43      	adds	r3, r0, #1
 801a5a4:	d00a      	beq.n	801a5bc <sbrk_aligned+0x34>
 801a5a6:	1cc4      	adds	r4, r0, #3
 801a5a8:	f024 0403 	bic.w	r4, r4, #3
 801a5ac:	42a0      	cmp	r0, r4
 801a5ae:	d007      	beq.n	801a5c0 <sbrk_aligned+0x38>
 801a5b0:	1a21      	subs	r1, r4, r0
 801a5b2:	4628      	mov	r0, r5
 801a5b4:	f000 f90a 	bl	801a7cc <_sbrk_r>
 801a5b8:	3001      	adds	r0, #1
 801a5ba:	d101      	bne.n	801a5c0 <sbrk_aligned+0x38>
 801a5bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a5c0:	4620      	mov	r0, r4
 801a5c2:	bd70      	pop	{r4, r5, r6, pc}
 801a5c4:	2000381c 	.word	0x2000381c

0801a5c8 <_malloc_r>:
 801a5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5cc:	1ccd      	adds	r5, r1, #3
 801a5ce:	f025 0503 	bic.w	r5, r5, #3
 801a5d2:	3508      	adds	r5, #8
 801a5d4:	2d0c      	cmp	r5, #12
 801a5d6:	bf38      	it	cc
 801a5d8:	250c      	movcc	r5, #12
 801a5da:	2d00      	cmp	r5, #0
 801a5dc:	4607      	mov	r7, r0
 801a5de:	db01      	blt.n	801a5e4 <_malloc_r+0x1c>
 801a5e0:	42a9      	cmp	r1, r5
 801a5e2:	d905      	bls.n	801a5f0 <_malloc_r+0x28>
 801a5e4:	230c      	movs	r3, #12
 801a5e6:	603b      	str	r3, [r7, #0]
 801a5e8:	2600      	movs	r6, #0
 801a5ea:	4630      	mov	r0, r6
 801a5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5f0:	4e2e      	ldr	r6, [pc, #184]	; (801a6ac <_malloc_r+0xe4>)
 801a5f2:	f000 fc03 	bl	801adfc <__malloc_lock>
 801a5f6:	6833      	ldr	r3, [r6, #0]
 801a5f8:	461c      	mov	r4, r3
 801a5fa:	bb34      	cbnz	r4, 801a64a <_malloc_r+0x82>
 801a5fc:	4629      	mov	r1, r5
 801a5fe:	4638      	mov	r0, r7
 801a600:	f7ff ffc2 	bl	801a588 <sbrk_aligned>
 801a604:	1c43      	adds	r3, r0, #1
 801a606:	4604      	mov	r4, r0
 801a608:	d14d      	bne.n	801a6a6 <_malloc_r+0xde>
 801a60a:	6834      	ldr	r4, [r6, #0]
 801a60c:	4626      	mov	r6, r4
 801a60e:	2e00      	cmp	r6, #0
 801a610:	d140      	bne.n	801a694 <_malloc_r+0xcc>
 801a612:	6823      	ldr	r3, [r4, #0]
 801a614:	4631      	mov	r1, r6
 801a616:	4638      	mov	r0, r7
 801a618:	eb04 0803 	add.w	r8, r4, r3
 801a61c:	f000 f8d6 	bl	801a7cc <_sbrk_r>
 801a620:	4580      	cmp	r8, r0
 801a622:	d13a      	bne.n	801a69a <_malloc_r+0xd2>
 801a624:	6821      	ldr	r1, [r4, #0]
 801a626:	3503      	adds	r5, #3
 801a628:	1a6d      	subs	r5, r5, r1
 801a62a:	f025 0503 	bic.w	r5, r5, #3
 801a62e:	3508      	adds	r5, #8
 801a630:	2d0c      	cmp	r5, #12
 801a632:	bf38      	it	cc
 801a634:	250c      	movcc	r5, #12
 801a636:	4629      	mov	r1, r5
 801a638:	4638      	mov	r0, r7
 801a63a:	f7ff ffa5 	bl	801a588 <sbrk_aligned>
 801a63e:	3001      	adds	r0, #1
 801a640:	d02b      	beq.n	801a69a <_malloc_r+0xd2>
 801a642:	6823      	ldr	r3, [r4, #0]
 801a644:	442b      	add	r3, r5
 801a646:	6023      	str	r3, [r4, #0]
 801a648:	e00e      	b.n	801a668 <_malloc_r+0xa0>
 801a64a:	6822      	ldr	r2, [r4, #0]
 801a64c:	1b52      	subs	r2, r2, r5
 801a64e:	d41e      	bmi.n	801a68e <_malloc_r+0xc6>
 801a650:	2a0b      	cmp	r2, #11
 801a652:	d916      	bls.n	801a682 <_malloc_r+0xba>
 801a654:	1961      	adds	r1, r4, r5
 801a656:	42a3      	cmp	r3, r4
 801a658:	6025      	str	r5, [r4, #0]
 801a65a:	bf18      	it	ne
 801a65c:	6059      	strne	r1, [r3, #4]
 801a65e:	6863      	ldr	r3, [r4, #4]
 801a660:	bf08      	it	eq
 801a662:	6031      	streq	r1, [r6, #0]
 801a664:	5162      	str	r2, [r4, r5]
 801a666:	604b      	str	r3, [r1, #4]
 801a668:	4638      	mov	r0, r7
 801a66a:	f104 060b 	add.w	r6, r4, #11
 801a66e:	f000 fbcb 	bl	801ae08 <__malloc_unlock>
 801a672:	f026 0607 	bic.w	r6, r6, #7
 801a676:	1d23      	adds	r3, r4, #4
 801a678:	1af2      	subs	r2, r6, r3
 801a67a:	d0b6      	beq.n	801a5ea <_malloc_r+0x22>
 801a67c:	1b9b      	subs	r3, r3, r6
 801a67e:	50a3      	str	r3, [r4, r2]
 801a680:	e7b3      	b.n	801a5ea <_malloc_r+0x22>
 801a682:	6862      	ldr	r2, [r4, #4]
 801a684:	42a3      	cmp	r3, r4
 801a686:	bf0c      	ite	eq
 801a688:	6032      	streq	r2, [r6, #0]
 801a68a:	605a      	strne	r2, [r3, #4]
 801a68c:	e7ec      	b.n	801a668 <_malloc_r+0xa0>
 801a68e:	4623      	mov	r3, r4
 801a690:	6864      	ldr	r4, [r4, #4]
 801a692:	e7b2      	b.n	801a5fa <_malloc_r+0x32>
 801a694:	4634      	mov	r4, r6
 801a696:	6876      	ldr	r6, [r6, #4]
 801a698:	e7b9      	b.n	801a60e <_malloc_r+0x46>
 801a69a:	230c      	movs	r3, #12
 801a69c:	603b      	str	r3, [r7, #0]
 801a69e:	4638      	mov	r0, r7
 801a6a0:	f000 fbb2 	bl	801ae08 <__malloc_unlock>
 801a6a4:	e7a1      	b.n	801a5ea <_malloc_r+0x22>
 801a6a6:	6025      	str	r5, [r4, #0]
 801a6a8:	e7de      	b.n	801a668 <_malloc_r+0xa0>
 801a6aa:	bf00      	nop
 801a6ac:	20003818 	.word	0x20003818

0801a6b0 <iprintf>:
 801a6b0:	b40f      	push	{r0, r1, r2, r3}
 801a6b2:	4b0a      	ldr	r3, [pc, #40]	; (801a6dc <iprintf+0x2c>)
 801a6b4:	b513      	push	{r0, r1, r4, lr}
 801a6b6:	681c      	ldr	r4, [r3, #0]
 801a6b8:	b124      	cbz	r4, 801a6c4 <iprintf+0x14>
 801a6ba:	69a3      	ldr	r3, [r4, #24]
 801a6bc:	b913      	cbnz	r3, 801a6c4 <iprintf+0x14>
 801a6be:	4620      	mov	r0, r4
 801a6c0:	f000 fa96 	bl	801abf0 <__sinit>
 801a6c4:	ab05      	add	r3, sp, #20
 801a6c6:	9a04      	ldr	r2, [sp, #16]
 801a6c8:	68a1      	ldr	r1, [r4, #8]
 801a6ca:	9301      	str	r3, [sp, #4]
 801a6cc:	4620      	mov	r0, r4
 801a6ce:	f000 fd27 	bl	801b120 <_vfiprintf_r>
 801a6d2:	b002      	add	sp, #8
 801a6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6d8:	b004      	add	sp, #16
 801a6da:	4770      	bx	lr
 801a6dc:	200006e8 	.word	0x200006e8

0801a6e0 <_puts_r>:
 801a6e0:	b570      	push	{r4, r5, r6, lr}
 801a6e2:	460e      	mov	r6, r1
 801a6e4:	4605      	mov	r5, r0
 801a6e6:	b118      	cbz	r0, 801a6f0 <_puts_r+0x10>
 801a6e8:	6983      	ldr	r3, [r0, #24]
 801a6ea:	b90b      	cbnz	r3, 801a6f0 <_puts_r+0x10>
 801a6ec:	f000 fa80 	bl	801abf0 <__sinit>
 801a6f0:	69ab      	ldr	r3, [r5, #24]
 801a6f2:	68ac      	ldr	r4, [r5, #8]
 801a6f4:	b913      	cbnz	r3, 801a6fc <_puts_r+0x1c>
 801a6f6:	4628      	mov	r0, r5
 801a6f8:	f000 fa7a 	bl	801abf0 <__sinit>
 801a6fc:	4b2c      	ldr	r3, [pc, #176]	; (801a7b0 <_puts_r+0xd0>)
 801a6fe:	429c      	cmp	r4, r3
 801a700:	d120      	bne.n	801a744 <_puts_r+0x64>
 801a702:	686c      	ldr	r4, [r5, #4]
 801a704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a706:	07db      	lsls	r3, r3, #31
 801a708:	d405      	bmi.n	801a716 <_puts_r+0x36>
 801a70a:	89a3      	ldrh	r3, [r4, #12]
 801a70c:	0598      	lsls	r0, r3, #22
 801a70e:	d402      	bmi.n	801a716 <_puts_r+0x36>
 801a710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a712:	f000 fb0b 	bl	801ad2c <__retarget_lock_acquire_recursive>
 801a716:	89a3      	ldrh	r3, [r4, #12]
 801a718:	0719      	lsls	r1, r3, #28
 801a71a:	d51d      	bpl.n	801a758 <_puts_r+0x78>
 801a71c:	6923      	ldr	r3, [r4, #16]
 801a71e:	b1db      	cbz	r3, 801a758 <_puts_r+0x78>
 801a720:	3e01      	subs	r6, #1
 801a722:	68a3      	ldr	r3, [r4, #8]
 801a724:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a728:	3b01      	subs	r3, #1
 801a72a:	60a3      	str	r3, [r4, #8]
 801a72c:	bb39      	cbnz	r1, 801a77e <_puts_r+0x9e>
 801a72e:	2b00      	cmp	r3, #0
 801a730:	da38      	bge.n	801a7a4 <_puts_r+0xc4>
 801a732:	4622      	mov	r2, r4
 801a734:	210a      	movs	r1, #10
 801a736:	4628      	mov	r0, r5
 801a738:	f000 f880 	bl	801a83c <__swbuf_r>
 801a73c:	3001      	adds	r0, #1
 801a73e:	d011      	beq.n	801a764 <_puts_r+0x84>
 801a740:	250a      	movs	r5, #10
 801a742:	e011      	b.n	801a768 <_puts_r+0x88>
 801a744:	4b1b      	ldr	r3, [pc, #108]	; (801a7b4 <_puts_r+0xd4>)
 801a746:	429c      	cmp	r4, r3
 801a748:	d101      	bne.n	801a74e <_puts_r+0x6e>
 801a74a:	68ac      	ldr	r4, [r5, #8]
 801a74c:	e7da      	b.n	801a704 <_puts_r+0x24>
 801a74e:	4b1a      	ldr	r3, [pc, #104]	; (801a7b8 <_puts_r+0xd8>)
 801a750:	429c      	cmp	r4, r3
 801a752:	bf08      	it	eq
 801a754:	68ec      	ldreq	r4, [r5, #12]
 801a756:	e7d5      	b.n	801a704 <_puts_r+0x24>
 801a758:	4621      	mov	r1, r4
 801a75a:	4628      	mov	r0, r5
 801a75c:	f000 f8c0 	bl	801a8e0 <__swsetup_r>
 801a760:	2800      	cmp	r0, #0
 801a762:	d0dd      	beq.n	801a720 <_puts_r+0x40>
 801a764:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a768:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a76a:	07da      	lsls	r2, r3, #31
 801a76c:	d405      	bmi.n	801a77a <_puts_r+0x9a>
 801a76e:	89a3      	ldrh	r3, [r4, #12]
 801a770:	059b      	lsls	r3, r3, #22
 801a772:	d402      	bmi.n	801a77a <_puts_r+0x9a>
 801a774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a776:	f000 fada 	bl	801ad2e <__retarget_lock_release_recursive>
 801a77a:	4628      	mov	r0, r5
 801a77c:	bd70      	pop	{r4, r5, r6, pc}
 801a77e:	2b00      	cmp	r3, #0
 801a780:	da04      	bge.n	801a78c <_puts_r+0xac>
 801a782:	69a2      	ldr	r2, [r4, #24]
 801a784:	429a      	cmp	r2, r3
 801a786:	dc06      	bgt.n	801a796 <_puts_r+0xb6>
 801a788:	290a      	cmp	r1, #10
 801a78a:	d004      	beq.n	801a796 <_puts_r+0xb6>
 801a78c:	6823      	ldr	r3, [r4, #0]
 801a78e:	1c5a      	adds	r2, r3, #1
 801a790:	6022      	str	r2, [r4, #0]
 801a792:	7019      	strb	r1, [r3, #0]
 801a794:	e7c5      	b.n	801a722 <_puts_r+0x42>
 801a796:	4622      	mov	r2, r4
 801a798:	4628      	mov	r0, r5
 801a79a:	f000 f84f 	bl	801a83c <__swbuf_r>
 801a79e:	3001      	adds	r0, #1
 801a7a0:	d1bf      	bne.n	801a722 <_puts_r+0x42>
 801a7a2:	e7df      	b.n	801a764 <_puts_r+0x84>
 801a7a4:	6823      	ldr	r3, [r4, #0]
 801a7a6:	250a      	movs	r5, #10
 801a7a8:	1c5a      	adds	r2, r3, #1
 801a7aa:	6022      	str	r2, [r4, #0]
 801a7ac:	701d      	strb	r5, [r3, #0]
 801a7ae:	e7db      	b.n	801a768 <_puts_r+0x88>
 801a7b0:	0801d908 	.word	0x0801d908
 801a7b4:	0801d928 	.word	0x0801d928
 801a7b8:	0801d8e8 	.word	0x0801d8e8

0801a7bc <puts>:
 801a7bc:	4b02      	ldr	r3, [pc, #8]	; (801a7c8 <puts+0xc>)
 801a7be:	4601      	mov	r1, r0
 801a7c0:	6818      	ldr	r0, [r3, #0]
 801a7c2:	f7ff bf8d 	b.w	801a6e0 <_puts_r>
 801a7c6:	bf00      	nop
 801a7c8:	200006e8 	.word	0x200006e8

0801a7cc <_sbrk_r>:
 801a7cc:	b538      	push	{r3, r4, r5, lr}
 801a7ce:	4d06      	ldr	r5, [pc, #24]	; (801a7e8 <_sbrk_r+0x1c>)
 801a7d0:	2300      	movs	r3, #0
 801a7d2:	4604      	mov	r4, r0
 801a7d4:	4608      	mov	r0, r1
 801a7d6:	602b      	str	r3, [r5, #0]
 801a7d8:	f7e8 ff4a 	bl	8003670 <_sbrk>
 801a7dc:	1c43      	adds	r3, r0, #1
 801a7de:	d102      	bne.n	801a7e6 <_sbrk_r+0x1a>
 801a7e0:	682b      	ldr	r3, [r5, #0]
 801a7e2:	b103      	cbz	r3, 801a7e6 <_sbrk_r+0x1a>
 801a7e4:	6023      	str	r3, [r4, #0]
 801a7e6:	bd38      	pop	{r3, r4, r5, pc}
 801a7e8:	20003824 	.word	0x20003824

0801a7ec <siprintf>:
 801a7ec:	b40e      	push	{r1, r2, r3}
 801a7ee:	b500      	push	{lr}
 801a7f0:	b09c      	sub	sp, #112	; 0x70
 801a7f2:	ab1d      	add	r3, sp, #116	; 0x74
 801a7f4:	9002      	str	r0, [sp, #8]
 801a7f6:	9006      	str	r0, [sp, #24]
 801a7f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a7fc:	4809      	ldr	r0, [pc, #36]	; (801a824 <siprintf+0x38>)
 801a7fe:	9107      	str	r1, [sp, #28]
 801a800:	9104      	str	r1, [sp, #16]
 801a802:	4909      	ldr	r1, [pc, #36]	; (801a828 <siprintf+0x3c>)
 801a804:	f853 2b04 	ldr.w	r2, [r3], #4
 801a808:	9105      	str	r1, [sp, #20]
 801a80a:	6800      	ldr	r0, [r0, #0]
 801a80c:	9301      	str	r3, [sp, #4]
 801a80e:	a902      	add	r1, sp, #8
 801a810:	f000 fb5c 	bl	801aecc <_svfiprintf_r>
 801a814:	9b02      	ldr	r3, [sp, #8]
 801a816:	2200      	movs	r2, #0
 801a818:	701a      	strb	r2, [r3, #0]
 801a81a:	b01c      	add	sp, #112	; 0x70
 801a81c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a820:	b003      	add	sp, #12
 801a822:	4770      	bx	lr
 801a824:	200006e8 	.word	0x200006e8
 801a828:	ffff0208 	.word	0xffff0208

0801a82c <strcpy>:
 801a82c:	4603      	mov	r3, r0
 801a82e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a832:	f803 2b01 	strb.w	r2, [r3], #1
 801a836:	2a00      	cmp	r2, #0
 801a838:	d1f9      	bne.n	801a82e <strcpy+0x2>
 801a83a:	4770      	bx	lr

0801a83c <__swbuf_r>:
 801a83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a83e:	460e      	mov	r6, r1
 801a840:	4614      	mov	r4, r2
 801a842:	4605      	mov	r5, r0
 801a844:	b118      	cbz	r0, 801a84e <__swbuf_r+0x12>
 801a846:	6983      	ldr	r3, [r0, #24]
 801a848:	b90b      	cbnz	r3, 801a84e <__swbuf_r+0x12>
 801a84a:	f000 f9d1 	bl	801abf0 <__sinit>
 801a84e:	4b21      	ldr	r3, [pc, #132]	; (801a8d4 <__swbuf_r+0x98>)
 801a850:	429c      	cmp	r4, r3
 801a852:	d12b      	bne.n	801a8ac <__swbuf_r+0x70>
 801a854:	686c      	ldr	r4, [r5, #4]
 801a856:	69a3      	ldr	r3, [r4, #24]
 801a858:	60a3      	str	r3, [r4, #8]
 801a85a:	89a3      	ldrh	r3, [r4, #12]
 801a85c:	071a      	lsls	r2, r3, #28
 801a85e:	d52f      	bpl.n	801a8c0 <__swbuf_r+0x84>
 801a860:	6923      	ldr	r3, [r4, #16]
 801a862:	b36b      	cbz	r3, 801a8c0 <__swbuf_r+0x84>
 801a864:	6923      	ldr	r3, [r4, #16]
 801a866:	6820      	ldr	r0, [r4, #0]
 801a868:	1ac0      	subs	r0, r0, r3
 801a86a:	6963      	ldr	r3, [r4, #20]
 801a86c:	b2f6      	uxtb	r6, r6
 801a86e:	4283      	cmp	r3, r0
 801a870:	4637      	mov	r7, r6
 801a872:	dc04      	bgt.n	801a87e <__swbuf_r+0x42>
 801a874:	4621      	mov	r1, r4
 801a876:	4628      	mov	r0, r5
 801a878:	f000 f926 	bl	801aac8 <_fflush_r>
 801a87c:	bb30      	cbnz	r0, 801a8cc <__swbuf_r+0x90>
 801a87e:	68a3      	ldr	r3, [r4, #8]
 801a880:	3b01      	subs	r3, #1
 801a882:	60a3      	str	r3, [r4, #8]
 801a884:	6823      	ldr	r3, [r4, #0]
 801a886:	1c5a      	adds	r2, r3, #1
 801a888:	6022      	str	r2, [r4, #0]
 801a88a:	701e      	strb	r6, [r3, #0]
 801a88c:	6963      	ldr	r3, [r4, #20]
 801a88e:	3001      	adds	r0, #1
 801a890:	4283      	cmp	r3, r0
 801a892:	d004      	beq.n	801a89e <__swbuf_r+0x62>
 801a894:	89a3      	ldrh	r3, [r4, #12]
 801a896:	07db      	lsls	r3, r3, #31
 801a898:	d506      	bpl.n	801a8a8 <__swbuf_r+0x6c>
 801a89a:	2e0a      	cmp	r6, #10
 801a89c:	d104      	bne.n	801a8a8 <__swbuf_r+0x6c>
 801a89e:	4621      	mov	r1, r4
 801a8a0:	4628      	mov	r0, r5
 801a8a2:	f000 f911 	bl	801aac8 <_fflush_r>
 801a8a6:	b988      	cbnz	r0, 801a8cc <__swbuf_r+0x90>
 801a8a8:	4638      	mov	r0, r7
 801a8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8ac:	4b0a      	ldr	r3, [pc, #40]	; (801a8d8 <__swbuf_r+0x9c>)
 801a8ae:	429c      	cmp	r4, r3
 801a8b0:	d101      	bne.n	801a8b6 <__swbuf_r+0x7a>
 801a8b2:	68ac      	ldr	r4, [r5, #8]
 801a8b4:	e7cf      	b.n	801a856 <__swbuf_r+0x1a>
 801a8b6:	4b09      	ldr	r3, [pc, #36]	; (801a8dc <__swbuf_r+0xa0>)
 801a8b8:	429c      	cmp	r4, r3
 801a8ba:	bf08      	it	eq
 801a8bc:	68ec      	ldreq	r4, [r5, #12]
 801a8be:	e7ca      	b.n	801a856 <__swbuf_r+0x1a>
 801a8c0:	4621      	mov	r1, r4
 801a8c2:	4628      	mov	r0, r5
 801a8c4:	f000 f80c 	bl	801a8e0 <__swsetup_r>
 801a8c8:	2800      	cmp	r0, #0
 801a8ca:	d0cb      	beq.n	801a864 <__swbuf_r+0x28>
 801a8cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a8d0:	e7ea      	b.n	801a8a8 <__swbuf_r+0x6c>
 801a8d2:	bf00      	nop
 801a8d4:	0801d908 	.word	0x0801d908
 801a8d8:	0801d928 	.word	0x0801d928
 801a8dc:	0801d8e8 	.word	0x0801d8e8

0801a8e0 <__swsetup_r>:
 801a8e0:	4b32      	ldr	r3, [pc, #200]	; (801a9ac <__swsetup_r+0xcc>)
 801a8e2:	b570      	push	{r4, r5, r6, lr}
 801a8e4:	681d      	ldr	r5, [r3, #0]
 801a8e6:	4606      	mov	r6, r0
 801a8e8:	460c      	mov	r4, r1
 801a8ea:	b125      	cbz	r5, 801a8f6 <__swsetup_r+0x16>
 801a8ec:	69ab      	ldr	r3, [r5, #24]
 801a8ee:	b913      	cbnz	r3, 801a8f6 <__swsetup_r+0x16>
 801a8f0:	4628      	mov	r0, r5
 801a8f2:	f000 f97d 	bl	801abf0 <__sinit>
 801a8f6:	4b2e      	ldr	r3, [pc, #184]	; (801a9b0 <__swsetup_r+0xd0>)
 801a8f8:	429c      	cmp	r4, r3
 801a8fa:	d10f      	bne.n	801a91c <__swsetup_r+0x3c>
 801a8fc:	686c      	ldr	r4, [r5, #4]
 801a8fe:	89a3      	ldrh	r3, [r4, #12]
 801a900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a904:	0719      	lsls	r1, r3, #28
 801a906:	d42c      	bmi.n	801a962 <__swsetup_r+0x82>
 801a908:	06dd      	lsls	r5, r3, #27
 801a90a:	d411      	bmi.n	801a930 <__swsetup_r+0x50>
 801a90c:	2309      	movs	r3, #9
 801a90e:	6033      	str	r3, [r6, #0]
 801a910:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a914:	81a3      	strh	r3, [r4, #12]
 801a916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a91a:	e03e      	b.n	801a99a <__swsetup_r+0xba>
 801a91c:	4b25      	ldr	r3, [pc, #148]	; (801a9b4 <__swsetup_r+0xd4>)
 801a91e:	429c      	cmp	r4, r3
 801a920:	d101      	bne.n	801a926 <__swsetup_r+0x46>
 801a922:	68ac      	ldr	r4, [r5, #8]
 801a924:	e7eb      	b.n	801a8fe <__swsetup_r+0x1e>
 801a926:	4b24      	ldr	r3, [pc, #144]	; (801a9b8 <__swsetup_r+0xd8>)
 801a928:	429c      	cmp	r4, r3
 801a92a:	bf08      	it	eq
 801a92c:	68ec      	ldreq	r4, [r5, #12]
 801a92e:	e7e6      	b.n	801a8fe <__swsetup_r+0x1e>
 801a930:	0758      	lsls	r0, r3, #29
 801a932:	d512      	bpl.n	801a95a <__swsetup_r+0x7a>
 801a934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a936:	b141      	cbz	r1, 801a94a <__swsetup_r+0x6a>
 801a938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a93c:	4299      	cmp	r1, r3
 801a93e:	d002      	beq.n	801a946 <__swsetup_r+0x66>
 801a940:	4630      	mov	r0, r6
 801a942:	f7ff fdd5 	bl	801a4f0 <_free_r>
 801a946:	2300      	movs	r3, #0
 801a948:	6363      	str	r3, [r4, #52]	; 0x34
 801a94a:	89a3      	ldrh	r3, [r4, #12]
 801a94c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a950:	81a3      	strh	r3, [r4, #12]
 801a952:	2300      	movs	r3, #0
 801a954:	6063      	str	r3, [r4, #4]
 801a956:	6923      	ldr	r3, [r4, #16]
 801a958:	6023      	str	r3, [r4, #0]
 801a95a:	89a3      	ldrh	r3, [r4, #12]
 801a95c:	f043 0308 	orr.w	r3, r3, #8
 801a960:	81a3      	strh	r3, [r4, #12]
 801a962:	6923      	ldr	r3, [r4, #16]
 801a964:	b94b      	cbnz	r3, 801a97a <__swsetup_r+0x9a>
 801a966:	89a3      	ldrh	r3, [r4, #12]
 801a968:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a96c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a970:	d003      	beq.n	801a97a <__swsetup_r+0x9a>
 801a972:	4621      	mov	r1, r4
 801a974:	4630      	mov	r0, r6
 801a976:	f000 fa01 	bl	801ad7c <__smakebuf_r>
 801a97a:	89a0      	ldrh	r0, [r4, #12]
 801a97c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a980:	f010 0301 	ands.w	r3, r0, #1
 801a984:	d00a      	beq.n	801a99c <__swsetup_r+0xbc>
 801a986:	2300      	movs	r3, #0
 801a988:	60a3      	str	r3, [r4, #8]
 801a98a:	6963      	ldr	r3, [r4, #20]
 801a98c:	425b      	negs	r3, r3
 801a98e:	61a3      	str	r3, [r4, #24]
 801a990:	6923      	ldr	r3, [r4, #16]
 801a992:	b943      	cbnz	r3, 801a9a6 <__swsetup_r+0xc6>
 801a994:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a998:	d1ba      	bne.n	801a910 <__swsetup_r+0x30>
 801a99a:	bd70      	pop	{r4, r5, r6, pc}
 801a99c:	0781      	lsls	r1, r0, #30
 801a99e:	bf58      	it	pl
 801a9a0:	6963      	ldrpl	r3, [r4, #20]
 801a9a2:	60a3      	str	r3, [r4, #8]
 801a9a4:	e7f4      	b.n	801a990 <__swsetup_r+0xb0>
 801a9a6:	2000      	movs	r0, #0
 801a9a8:	e7f7      	b.n	801a99a <__swsetup_r+0xba>
 801a9aa:	bf00      	nop
 801a9ac:	200006e8 	.word	0x200006e8
 801a9b0:	0801d908 	.word	0x0801d908
 801a9b4:	0801d928 	.word	0x0801d928
 801a9b8:	0801d8e8 	.word	0x0801d8e8

0801a9bc <__sflush_r>:
 801a9bc:	898a      	ldrh	r2, [r1, #12]
 801a9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9c2:	4605      	mov	r5, r0
 801a9c4:	0710      	lsls	r0, r2, #28
 801a9c6:	460c      	mov	r4, r1
 801a9c8:	d458      	bmi.n	801aa7c <__sflush_r+0xc0>
 801a9ca:	684b      	ldr	r3, [r1, #4]
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	dc05      	bgt.n	801a9dc <__sflush_r+0x20>
 801a9d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	dc02      	bgt.n	801a9dc <__sflush_r+0x20>
 801a9d6:	2000      	movs	r0, #0
 801a9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a9de:	2e00      	cmp	r6, #0
 801a9e0:	d0f9      	beq.n	801a9d6 <__sflush_r+0x1a>
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a9e8:	682f      	ldr	r7, [r5, #0]
 801a9ea:	602b      	str	r3, [r5, #0]
 801a9ec:	d032      	beq.n	801aa54 <__sflush_r+0x98>
 801a9ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a9f0:	89a3      	ldrh	r3, [r4, #12]
 801a9f2:	075a      	lsls	r2, r3, #29
 801a9f4:	d505      	bpl.n	801aa02 <__sflush_r+0x46>
 801a9f6:	6863      	ldr	r3, [r4, #4]
 801a9f8:	1ac0      	subs	r0, r0, r3
 801a9fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a9fc:	b10b      	cbz	r3, 801aa02 <__sflush_r+0x46>
 801a9fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aa00:	1ac0      	subs	r0, r0, r3
 801aa02:	2300      	movs	r3, #0
 801aa04:	4602      	mov	r2, r0
 801aa06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aa08:	6a21      	ldr	r1, [r4, #32]
 801aa0a:	4628      	mov	r0, r5
 801aa0c:	47b0      	blx	r6
 801aa0e:	1c43      	adds	r3, r0, #1
 801aa10:	89a3      	ldrh	r3, [r4, #12]
 801aa12:	d106      	bne.n	801aa22 <__sflush_r+0x66>
 801aa14:	6829      	ldr	r1, [r5, #0]
 801aa16:	291d      	cmp	r1, #29
 801aa18:	d82c      	bhi.n	801aa74 <__sflush_r+0xb8>
 801aa1a:	4a2a      	ldr	r2, [pc, #168]	; (801aac4 <__sflush_r+0x108>)
 801aa1c:	40ca      	lsrs	r2, r1
 801aa1e:	07d6      	lsls	r6, r2, #31
 801aa20:	d528      	bpl.n	801aa74 <__sflush_r+0xb8>
 801aa22:	2200      	movs	r2, #0
 801aa24:	6062      	str	r2, [r4, #4]
 801aa26:	04d9      	lsls	r1, r3, #19
 801aa28:	6922      	ldr	r2, [r4, #16]
 801aa2a:	6022      	str	r2, [r4, #0]
 801aa2c:	d504      	bpl.n	801aa38 <__sflush_r+0x7c>
 801aa2e:	1c42      	adds	r2, r0, #1
 801aa30:	d101      	bne.n	801aa36 <__sflush_r+0x7a>
 801aa32:	682b      	ldr	r3, [r5, #0]
 801aa34:	b903      	cbnz	r3, 801aa38 <__sflush_r+0x7c>
 801aa36:	6560      	str	r0, [r4, #84]	; 0x54
 801aa38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aa3a:	602f      	str	r7, [r5, #0]
 801aa3c:	2900      	cmp	r1, #0
 801aa3e:	d0ca      	beq.n	801a9d6 <__sflush_r+0x1a>
 801aa40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aa44:	4299      	cmp	r1, r3
 801aa46:	d002      	beq.n	801aa4e <__sflush_r+0x92>
 801aa48:	4628      	mov	r0, r5
 801aa4a:	f7ff fd51 	bl	801a4f0 <_free_r>
 801aa4e:	2000      	movs	r0, #0
 801aa50:	6360      	str	r0, [r4, #52]	; 0x34
 801aa52:	e7c1      	b.n	801a9d8 <__sflush_r+0x1c>
 801aa54:	6a21      	ldr	r1, [r4, #32]
 801aa56:	2301      	movs	r3, #1
 801aa58:	4628      	mov	r0, r5
 801aa5a:	47b0      	blx	r6
 801aa5c:	1c41      	adds	r1, r0, #1
 801aa5e:	d1c7      	bne.n	801a9f0 <__sflush_r+0x34>
 801aa60:	682b      	ldr	r3, [r5, #0]
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d0c4      	beq.n	801a9f0 <__sflush_r+0x34>
 801aa66:	2b1d      	cmp	r3, #29
 801aa68:	d001      	beq.n	801aa6e <__sflush_r+0xb2>
 801aa6a:	2b16      	cmp	r3, #22
 801aa6c:	d101      	bne.n	801aa72 <__sflush_r+0xb6>
 801aa6e:	602f      	str	r7, [r5, #0]
 801aa70:	e7b1      	b.n	801a9d6 <__sflush_r+0x1a>
 801aa72:	89a3      	ldrh	r3, [r4, #12]
 801aa74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa78:	81a3      	strh	r3, [r4, #12]
 801aa7a:	e7ad      	b.n	801a9d8 <__sflush_r+0x1c>
 801aa7c:	690f      	ldr	r7, [r1, #16]
 801aa7e:	2f00      	cmp	r7, #0
 801aa80:	d0a9      	beq.n	801a9d6 <__sflush_r+0x1a>
 801aa82:	0793      	lsls	r3, r2, #30
 801aa84:	680e      	ldr	r6, [r1, #0]
 801aa86:	bf08      	it	eq
 801aa88:	694b      	ldreq	r3, [r1, #20]
 801aa8a:	600f      	str	r7, [r1, #0]
 801aa8c:	bf18      	it	ne
 801aa8e:	2300      	movne	r3, #0
 801aa90:	eba6 0807 	sub.w	r8, r6, r7
 801aa94:	608b      	str	r3, [r1, #8]
 801aa96:	f1b8 0f00 	cmp.w	r8, #0
 801aa9a:	dd9c      	ble.n	801a9d6 <__sflush_r+0x1a>
 801aa9c:	6a21      	ldr	r1, [r4, #32]
 801aa9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801aaa0:	4643      	mov	r3, r8
 801aaa2:	463a      	mov	r2, r7
 801aaa4:	4628      	mov	r0, r5
 801aaa6:	47b0      	blx	r6
 801aaa8:	2800      	cmp	r0, #0
 801aaaa:	dc06      	bgt.n	801aaba <__sflush_r+0xfe>
 801aaac:	89a3      	ldrh	r3, [r4, #12]
 801aaae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aab2:	81a3      	strh	r3, [r4, #12]
 801aab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aab8:	e78e      	b.n	801a9d8 <__sflush_r+0x1c>
 801aaba:	4407      	add	r7, r0
 801aabc:	eba8 0800 	sub.w	r8, r8, r0
 801aac0:	e7e9      	b.n	801aa96 <__sflush_r+0xda>
 801aac2:	bf00      	nop
 801aac4:	20400001 	.word	0x20400001

0801aac8 <_fflush_r>:
 801aac8:	b538      	push	{r3, r4, r5, lr}
 801aaca:	690b      	ldr	r3, [r1, #16]
 801aacc:	4605      	mov	r5, r0
 801aace:	460c      	mov	r4, r1
 801aad0:	b913      	cbnz	r3, 801aad8 <_fflush_r+0x10>
 801aad2:	2500      	movs	r5, #0
 801aad4:	4628      	mov	r0, r5
 801aad6:	bd38      	pop	{r3, r4, r5, pc}
 801aad8:	b118      	cbz	r0, 801aae2 <_fflush_r+0x1a>
 801aada:	6983      	ldr	r3, [r0, #24]
 801aadc:	b90b      	cbnz	r3, 801aae2 <_fflush_r+0x1a>
 801aade:	f000 f887 	bl	801abf0 <__sinit>
 801aae2:	4b14      	ldr	r3, [pc, #80]	; (801ab34 <_fflush_r+0x6c>)
 801aae4:	429c      	cmp	r4, r3
 801aae6:	d11b      	bne.n	801ab20 <_fflush_r+0x58>
 801aae8:	686c      	ldr	r4, [r5, #4]
 801aaea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d0ef      	beq.n	801aad2 <_fflush_r+0xa>
 801aaf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801aaf4:	07d0      	lsls	r0, r2, #31
 801aaf6:	d404      	bmi.n	801ab02 <_fflush_r+0x3a>
 801aaf8:	0599      	lsls	r1, r3, #22
 801aafa:	d402      	bmi.n	801ab02 <_fflush_r+0x3a>
 801aafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aafe:	f000 f915 	bl	801ad2c <__retarget_lock_acquire_recursive>
 801ab02:	4628      	mov	r0, r5
 801ab04:	4621      	mov	r1, r4
 801ab06:	f7ff ff59 	bl	801a9bc <__sflush_r>
 801ab0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ab0c:	07da      	lsls	r2, r3, #31
 801ab0e:	4605      	mov	r5, r0
 801ab10:	d4e0      	bmi.n	801aad4 <_fflush_r+0xc>
 801ab12:	89a3      	ldrh	r3, [r4, #12]
 801ab14:	059b      	lsls	r3, r3, #22
 801ab16:	d4dd      	bmi.n	801aad4 <_fflush_r+0xc>
 801ab18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab1a:	f000 f908 	bl	801ad2e <__retarget_lock_release_recursive>
 801ab1e:	e7d9      	b.n	801aad4 <_fflush_r+0xc>
 801ab20:	4b05      	ldr	r3, [pc, #20]	; (801ab38 <_fflush_r+0x70>)
 801ab22:	429c      	cmp	r4, r3
 801ab24:	d101      	bne.n	801ab2a <_fflush_r+0x62>
 801ab26:	68ac      	ldr	r4, [r5, #8]
 801ab28:	e7df      	b.n	801aaea <_fflush_r+0x22>
 801ab2a:	4b04      	ldr	r3, [pc, #16]	; (801ab3c <_fflush_r+0x74>)
 801ab2c:	429c      	cmp	r4, r3
 801ab2e:	bf08      	it	eq
 801ab30:	68ec      	ldreq	r4, [r5, #12]
 801ab32:	e7da      	b.n	801aaea <_fflush_r+0x22>
 801ab34:	0801d908 	.word	0x0801d908
 801ab38:	0801d928 	.word	0x0801d928
 801ab3c:	0801d8e8 	.word	0x0801d8e8

0801ab40 <std>:
 801ab40:	2300      	movs	r3, #0
 801ab42:	b510      	push	{r4, lr}
 801ab44:	4604      	mov	r4, r0
 801ab46:	e9c0 3300 	strd	r3, r3, [r0]
 801ab4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ab4e:	6083      	str	r3, [r0, #8]
 801ab50:	8181      	strh	r1, [r0, #12]
 801ab52:	6643      	str	r3, [r0, #100]	; 0x64
 801ab54:	81c2      	strh	r2, [r0, #14]
 801ab56:	6183      	str	r3, [r0, #24]
 801ab58:	4619      	mov	r1, r3
 801ab5a:	2208      	movs	r2, #8
 801ab5c:	305c      	adds	r0, #92	; 0x5c
 801ab5e:	f7ff fcbf 	bl	801a4e0 <memset>
 801ab62:	4b05      	ldr	r3, [pc, #20]	; (801ab78 <std+0x38>)
 801ab64:	6263      	str	r3, [r4, #36]	; 0x24
 801ab66:	4b05      	ldr	r3, [pc, #20]	; (801ab7c <std+0x3c>)
 801ab68:	62a3      	str	r3, [r4, #40]	; 0x28
 801ab6a:	4b05      	ldr	r3, [pc, #20]	; (801ab80 <std+0x40>)
 801ab6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ab6e:	4b05      	ldr	r3, [pc, #20]	; (801ab84 <std+0x44>)
 801ab70:	6224      	str	r4, [r4, #32]
 801ab72:	6323      	str	r3, [r4, #48]	; 0x30
 801ab74:	bd10      	pop	{r4, pc}
 801ab76:	bf00      	nop
 801ab78:	0801b6a9 	.word	0x0801b6a9
 801ab7c:	0801b6cb 	.word	0x0801b6cb
 801ab80:	0801b703 	.word	0x0801b703
 801ab84:	0801b727 	.word	0x0801b727

0801ab88 <_cleanup_r>:
 801ab88:	4901      	ldr	r1, [pc, #4]	; (801ab90 <_cleanup_r+0x8>)
 801ab8a:	f000 b8af 	b.w	801acec <_fwalk_reent>
 801ab8e:	bf00      	nop
 801ab90:	0801aac9 	.word	0x0801aac9

0801ab94 <__sfmoreglue>:
 801ab94:	b570      	push	{r4, r5, r6, lr}
 801ab96:	2268      	movs	r2, #104	; 0x68
 801ab98:	1e4d      	subs	r5, r1, #1
 801ab9a:	4355      	muls	r5, r2
 801ab9c:	460e      	mov	r6, r1
 801ab9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801aba2:	f7ff fd11 	bl	801a5c8 <_malloc_r>
 801aba6:	4604      	mov	r4, r0
 801aba8:	b140      	cbz	r0, 801abbc <__sfmoreglue+0x28>
 801abaa:	2100      	movs	r1, #0
 801abac:	e9c0 1600 	strd	r1, r6, [r0]
 801abb0:	300c      	adds	r0, #12
 801abb2:	60a0      	str	r0, [r4, #8]
 801abb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801abb8:	f7ff fc92 	bl	801a4e0 <memset>
 801abbc:	4620      	mov	r0, r4
 801abbe:	bd70      	pop	{r4, r5, r6, pc}

0801abc0 <__sfp_lock_acquire>:
 801abc0:	4801      	ldr	r0, [pc, #4]	; (801abc8 <__sfp_lock_acquire+0x8>)
 801abc2:	f000 b8b3 	b.w	801ad2c <__retarget_lock_acquire_recursive>
 801abc6:	bf00      	nop
 801abc8:	20003821 	.word	0x20003821

0801abcc <__sfp_lock_release>:
 801abcc:	4801      	ldr	r0, [pc, #4]	; (801abd4 <__sfp_lock_release+0x8>)
 801abce:	f000 b8ae 	b.w	801ad2e <__retarget_lock_release_recursive>
 801abd2:	bf00      	nop
 801abd4:	20003821 	.word	0x20003821

0801abd8 <__sinit_lock_acquire>:
 801abd8:	4801      	ldr	r0, [pc, #4]	; (801abe0 <__sinit_lock_acquire+0x8>)
 801abda:	f000 b8a7 	b.w	801ad2c <__retarget_lock_acquire_recursive>
 801abde:	bf00      	nop
 801abe0:	20003822 	.word	0x20003822

0801abe4 <__sinit_lock_release>:
 801abe4:	4801      	ldr	r0, [pc, #4]	; (801abec <__sinit_lock_release+0x8>)
 801abe6:	f000 b8a2 	b.w	801ad2e <__retarget_lock_release_recursive>
 801abea:	bf00      	nop
 801abec:	20003822 	.word	0x20003822

0801abf0 <__sinit>:
 801abf0:	b510      	push	{r4, lr}
 801abf2:	4604      	mov	r4, r0
 801abf4:	f7ff fff0 	bl	801abd8 <__sinit_lock_acquire>
 801abf8:	69a3      	ldr	r3, [r4, #24]
 801abfa:	b11b      	cbz	r3, 801ac04 <__sinit+0x14>
 801abfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac00:	f7ff bff0 	b.w	801abe4 <__sinit_lock_release>
 801ac04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ac08:	6523      	str	r3, [r4, #80]	; 0x50
 801ac0a:	4b13      	ldr	r3, [pc, #76]	; (801ac58 <__sinit+0x68>)
 801ac0c:	4a13      	ldr	r2, [pc, #76]	; (801ac5c <__sinit+0x6c>)
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	62a2      	str	r2, [r4, #40]	; 0x28
 801ac12:	42a3      	cmp	r3, r4
 801ac14:	bf04      	itt	eq
 801ac16:	2301      	moveq	r3, #1
 801ac18:	61a3      	streq	r3, [r4, #24]
 801ac1a:	4620      	mov	r0, r4
 801ac1c:	f000 f820 	bl	801ac60 <__sfp>
 801ac20:	6060      	str	r0, [r4, #4]
 801ac22:	4620      	mov	r0, r4
 801ac24:	f000 f81c 	bl	801ac60 <__sfp>
 801ac28:	60a0      	str	r0, [r4, #8]
 801ac2a:	4620      	mov	r0, r4
 801ac2c:	f000 f818 	bl	801ac60 <__sfp>
 801ac30:	2200      	movs	r2, #0
 801ac32:	60e0      	str	r0, [r4, #12]
 801ac34:	2104      	movs	r1, #4
 801ac36:	6860      	ldr	r0, [r4, #4]
 801ac38:	f7ff ff82 	bl	801ab40 <std>
 801ac3c:	68a0      	ldr	r0, [r4, #8]
 801ac3e:	2201      	movs	r2, #1
 801ac40:	2109      	movs	r1, #9
 801ac42:	f7ff ff7d 	bl	801ab40 <std>
 801ac46:	68e0      	ldr	r0, [r4, #12]
 801ac48:	2202      	movs	r2, #2
 801ac4a:	2112      	movs	r1, #18
 801ac4c:	f7ff ff78 	bl	801ab40 <std>
 801ac50:	2301      	movs	r3, #1
 801ac52:	61a3      	str	r3, [r4, #24]
 801ac54:	e7d2      	b.n	801abfc <__sinit+0xc>
 801ac56:	bf00      	nop
 801ac58:	0801d8e4 	.word	0x0801d8e4
 801ac5c:	0801ab89 	.word	0x0801ab89

0801ac60 <__sfp>:
 801ac60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac62:	4607      	mov	r7, r0
 801ac64:	f7ff ffac 	bl	801abc0 <__sfp_lock_acquire>
 801ac68:	4b1e      	ldr	r3, [pc, #120]	; (801ace4 <__sfp+0x84>)
 801ac6a:	681e      	ldr	r6, [r3, #0]
 801ac6c:	69b3      	ldr	r3, [r6, #24]
 801ac6e:	b913      	cbnz	r3, 801ac76 <__sfp+0x16>
 801ac70:	4630      	mov	r0, r6
 801ac72:	f7ff ffbd 	bl	801abf0 <__sinit>
 801ac76:	3648      	adds	r6, #72	; 0x48
 801ac78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ac7c:	3b01      	subs	r3, #1
 801ac7e:	d503      	bpl.n	801ac88 <__sfp+0x28>
 801ac80:	6833      	ldr	r3, [r6, #0]
 801ac82:	b30b      	cbz	r3, 801acc8 <__sfp+0x68>
 801ac84:	6836      	ldr	r6, [r6, #0]
 801ac86:	e7f7      	b.n	801ac78 <__sfp+0x18>
 801ac88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ac8c:	b9d5      	cbnz	r5, 801acc4 <__sfp+0x64>
 801ac8e:	4b16      	ldr	r3, [pc, #88]	; (801ace8 <__sfp+0x88>)
 801ac90:	60e3      	str	r3, [r4, #12]
 801ac92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ac96:	6665      	str	r5, [r4, #100]	; 0x64
 801ac98:	f000 f847 	bl	801ad2a <__retarget_lock_init_recursive>
 801ac9c:	f7ff ff96 	bl	801abcc <__sfp_lock_release>
 801aca0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801aca4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801aca8:	6025      	str	r5, [r4, #0]
 801acaa:	61a5      	str	r5, [r4, #24]
 801acac:	2208      	movs	r2, #8
 801acae:	4629      	mov	r1, r5
 801acb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801acb4:	f7ff fc14 	bl	801a4e0 <memset>
 801acb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801acbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801acc0:	4620      	mov	r0, r4
 801acc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acc4:	3468      	adds	r4, #104	; 0x68
 801acc6:	e7d9      	b.n	801ac7c <__sfp+0x1c>
 801acc8:	2104      	movs	r1, #4
 801acca:	4638      	mov	r0, r7
 801accc:	f7ff ff62 	bl	801ab94 <__sfmoreglue>
 801acd0:	4604      	mov	r4, r0
 801acd2:	6030      	str	r0, [r6, #0]
 801acd4:	2800      	cmp	r0, #0
 801acd6:	d1d5      	bne.n	801ac84 <__sfp+0x24>
 801acd8:	f7ff ff78 	bl	801abcc <__sfp_lock_release>
 801acdc:	230c      	movs	r3, #12
 801acde:	603b      	str	r3, [r7, #0]
 801ace0:	e7ee      	b.n	801acc0 <__sfp+0x60>
 801ace2:	bf00      	nop
 801ace4:	0801d8e4 	.word	0x0801d8e4
 801ace8:	ffff0001 	.word	0xffff0001

0801acec <_fwalk_reent>:
 801acec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801acf0:	4606      	mov	r6, r0
 801acf2:	4688      	mov	r8, r1
 801acf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801acf8:	2700      	movs	r7, #0
 801acfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801acfe:	f1b9 0901 	subs.w	r9, r9, #1
 801ad02:	d505      	bpl.n	801ad10 <_fwalk_reent+0x24>
 801ad04:	6824      	ldr	r4, [r4, #0]
 801ad06:	2c00      	cmp	r4, #0
 801ad08:	d1f7      	bne.n	801acfa <_fwalk_reent+0xe>
 801ad0a:	4638      	mov	r0, r7
 801ad0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad10:	89ab      	ldrh	r3, [r5, #12]
 801ad12:	2b01      	cmp	r3, #1
 801ad14:	d907      	bls.n	801ad26 <_fwalk_reent+0x3a>
 801ad16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ad1a:	3301      	adds	r3, #1
 801ad1c:	d003      	beq.n	801ad26 <_fwalk_reent+0x3a>
 801ad1e:	4629      	mov	r1, r5
 801ad20:	4630      	mov	r0, r6
 801ad22:	47c0      	blx	r8
 801ad24:	4307      	orrs	r7, r0
 801ad26:	3568      	adds	r5, #104	; 0x68
 801ad28:	e7e9      	b.n	801acfe <_fwalk_reent+0x12>

0801ad2a <__retarget_lock_init_recursive>:
 801ad2a:	4770      	bx	lr

0801ad2c <__retarget_lock_acquire_recursive>:
 801ad2c:	4770      	bx	lr

0801ad2e <__retarget_lock_release_recursive>:
 801ad2e:	4770      	bx	lr

0801ad30 <__swhatbuf_r>:
 801ad30:	b570      	push	{r4, r5, r6, lr}
 801ad32:	460e      	mov	r6, r1
 801ad34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad38:	2900      	cmp	r1, #0
 801ad3a:	b096      	sub	sp, #88	; 0x58
 801ad3c:	4614      	mov	r4, r2
 801ad3e:	461d      	mov	r5, r3
 801ad40:	da08      	bge.n	801ad54 <__swhatbuf_r+0x24>
 801ad42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ad46:	2200      	movs	r2, #0
 801ad48:	602a      	str	r2, [r5, #0]
 801ad4a:	061a      	lsls	r2, r3, #24
 801ad4c:	d410      	bmi.n	801ad70 <__swhatbuf_r+0x40>
 801ad4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ad52:	e00e      	b.n	801ad72 <__swhatbuf_r+0x42>
 801ad54:	466a      	mov	r2, sp
 801ad56:	f000 fd0d 	bl	801b774 <_fstat_r>
 801ad5a:	2800      	cmp	r0, #0
 801ad5c:	dbf1      	blt.n	801ad42 <__swhatbuf_r+0x12>
 801ad5e:	9a01      	ldr	r2, [sp, #4]
 801ad60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ad64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ad68:	425a      	negs	r2, r3
 801ad6a:	415a      	adcs	r2, r3
 801ad6c:	602a      	str	r2, [r5, #0]
 801ad6e:	e7ee      	b.n	801ad4e <__swhatbuf_r+0x1e>
 801ad70:	2340      	movs	r3, #64	; 0x40
 801ad72:	2000      	movs	r0, #0
 801ad74:	6023      	str	r3, [r4, #0]
 801ad76:	b016      	add	sp, #88	; 0x58
 801ad78:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ad7c <__smakebuf_r>:
 801ad7c:	898b      	ldrh	r3, [r1, #12]
 801ad7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ad80:	079d      	lsls	r5, r3, #30
 801ad82:	4606      	mov	r6, r0
 801ad84:	460c      	mov	r4, r1
 801ad86:	d507      	bpl.n	801ad98 <__smakebuf_r+0x1c>
 801ad88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ad8c:	6023      	str	r3, [r4, #0]
 801ad8e:	6123      	str	r3, [r4, #16]
 801ad90:	2301      	movs	r3, #1
 801ad92:	6163      	str	r3, [r4, #20]
 801ad94:	b002      	add	sp, #8
 801ad96:	bd70      	pop	{r4, r5, r6, pc}
 801ad98:	ab01      	add	r3, sp, #4
 801ad9a:	466a      	mov	r2, sp
 801ad9c:	f7ff ffc8 	bl	801ad30 <__swhatbuf_r>
 801ada0:	9900      	ldr	r1, [sp, #0]
 801ada2:	4605      	mov	r5, r0
 801ada4:	4630      	mov	r0, r6
 801ada6:	f7ff fc0f 	bl	801a5c8 <_malloc_r>
 801adaa:	b948      	cbnz	r0, 801adc0 <__smakebuf_r+0x44>
 801adac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801adb0:	059a      	lsls	r2, r3, #22
 801adb2:	d4ef      	bmi.n	801ad94 <__smakebuf_r+0x18>
 801adb4:	f023 0303 	bic.w	r3, r3, #3
 801adb8:	f043 0302 	orr.w	r3, r3, #2
 801adbc:	81a3      	strh	r3, [r4, #12]
 801adbe:	e7e3      	b.n	801ad88 <__smakebuf_r+0xc>
 801adc0:	4b0d      	ldr	r3, [pc, #52]	; (801adf8 <__smakebuf_r+0x7c>)
 801adc2:	62b3      	str	r3, [r6, #40]	; 0x28
 801adc4:	89a3      	ldrh	r3, [r4, #12]
 801adc6:	6020      	str	r0, [r4, #0]
 801adc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801adcc:	81a3      	strh	r3, [r4, #12]
 801adce:	9b00      	ldr	r3, [sp, #0]
 801add0:	6163      	str	r3, [r4, #20]
 801add2:	9b01      	ldr	r3, [sp, #4]
 801add4:	6120      	str	r0, [r4, #16]
 801add6:	b15b      	cbz	r3, 801adf0 <__smakebuf_r+0x74>
 801add8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801addc:	4630      	mov	r0, r6
 801adde:	f000 fcdb 	bl	801b798 <_isatty_r>
 801ade2:	b128      	cbz	r0, 801adf0 <__smakebuf_r+0x74>
 801ade4:	89a3      	ldrh	r3, [r4, #12]
 801ade6:	f023 0303 	bic.w	r3, r3, #3
 801adea:	f043 0301 	orr.w	r3, r3, #1
 801adee:	81a3      	strh	r3, [r4, #12]
 801adf0:	89a0      	ldrh	r0, [r4, #12]
 801adf2:	4305      	orrs	r5, r0
 801adf4:	81a5      	strh	r5, [r4, #12]
 801adf6:	e7cd      	b.n	801ad94 <__smakebuf_r+0x18>
 801adf8:	0801ab89 	.word	0x0801ab89

0801adfc <__malloc_lock>:
 801adfc:	4801      	ldr	r0, [pc, #4]	; (801ae04 <__malloc_lock+0x8>)
 801adfe:	f7ff bf95 	b.w	801ad2c <__retarget_lock_acquire_recursive>
 801ae02:	bf00      	nop
 801ae04:	20003820 	.word	0x20003820

0801ae08 <__malloc_unlock>:
 801ae08:	4801      	ldr	r0, [pc, #4]	; (801ae10 <__malloc_unlock+0x8>)
 801ae0a:	f7ff bf90 	b.w	801ad2e <__retarget_lock_release_recursive>
 801ae0e:	bf00      	nop
 801ae10:	20003820 	.word	0x20003820

0801ae14 <__ssputs_r>:
 801ae14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae18:	688e      	ldr	r6, [r1, #8]
 801ae1a:	429e      	cmp	r6, r3
 801ae1c:	4682      	mov	sl, r0
 801ae1e:	460c      	mov	r4, r1
 801ae20:	4690      	mov	r8, r2
 801ae22:	461f      	mov	r7, r3
 801ae24:	d838      	bhi.n	801ae98 <__ssputs_r+0x84>
 801ae26:	898a      	ldrh	r2, [r1, #12]
 801ae28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ae2c:	d032      	beq.n	801ae94 <__ssputs_r+0x80>
 801ae2e:	6825      	ldr	r5, [r4, #0]
 801ae30:	6909      	ldr	r1, [r1, #16]
 801ae32:	eba5 0901 	sub.w	r9, r5, r1
 801ae36:	6965      	ldr	r5, [r4, #20]
 801ae38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ae3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ae40:	3301      	adds	r3, #1
 801ae42:	444b      	add	r3, r9
 801ae44:	106d      	asrs	r5, r5, #1
 801ae46:	429d      	cmp	r5, r3
 801ae48:	bf38      	it	cc
 801ae4a:	461d      	movcc	r5, r3
 801ae4c:	0553      	lsls	r3, r2, #21
 801ae4e:	d531      	bpl.n	801aeb4 <__ssputs_r+0xa0>
 801ae50:	4629      	mov	r1, r5
 801ae52:	f7ff fbb9 	bl	801a5c8 <_malloc_r>
 801ae56:	4606      	mov	r6, r0
 801ae58:	b950      	cbnz	r0, 801ae70 <__ssputs_r+0x5c>
 801ae5a:	230c      	movs	r3, #12
 801ae5c:	f8ca 3000 	str.w	r3, [sl]
 801ae60:	89a3      	ldrh	r3, [r4, #12]
 801ae62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ae66:	81a3      	strh	r3, [r4, #12]
 801ae68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ae6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae70:	6921      	ldr	r1, [r4, #16]
 801ae72:	464a      	mov	r2, r9
 801ae74:	f7ff fb26 	bl	801a4c4 <memcpy>
 801ae78:	89a3      	ldrh	r3, [r4, #12]
 801ae7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ae7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ae82:	81a3      	strh	r3, [r4, #12]
 801ae84:	6126      	str	r6, [r4, #16]
 801ae86:	6165      	str	r5, [r4, #20]
 801ae88:	444e      	add	r6, r9
 801ae8a:	eba5 0509 	sub.w	r5, r5, r9
 801ae8e:	6026      	str	r6, [r4, #0]
 801ae90:	60a5      	str	r5, [r4, #8]
 801ae92:	463e      	mov	r6, r7
 801ae94:	42be      	cmp	r6, r7
 801ae96:	d900      	bls.n	801ae9a <__ssputs_r+0x86>
 801ae98:	463e      	mov	r6, r7
 801ae9a:	6820      	ldr	r0, [r4, #0]
 801ae9c:	4632      	mov	r2, r6
 801ae9e:	4641      	mov	r1, r8
 801aea0:	f000 fc9c 	bl	801b7dc <memmove>
 801aea4:	68a3      	ldr	r3, [r4, #8]
 801aea6:	1b9b      	subs	r3, r3, r6
 801aea8:	60a3      	str	r3, [r4, #8]
 801aeaa:	6823      	ldr	r3, [r4, #0]
 801aeac:	4433      	add	r3, r6
 801aeae:	6023      	str	r3, [r4, #0]
 801aeb0:	2000      	movs	r0, #0
 801aeb2:	e7db      	b.n	801ae6c <__ssputs_r+0x58>
 801aeb4:	462a      	mov	r2, r5
 801aeb6:	f000 fcab 	bl	801b810 <_realloc_r>
 801aeba:	4606      	mov	r6, r0
 801aebc:	2800      	cmp	r0, #0
 801aebe:	d1e1      	bne.n	801ae84 <__ssputs_r+0x70>
 801aec0:	6921      	ldr	r1, [r4, #16]
 801aec2:	4650      	mov	r0, sl
 801aec4:	f7ff fb14 	bl	801a4f0 <_free_r>
 801aec8:	e7c7      	b.n	801ae5a <__ssputs_r+0x46>
	...

0801aecc <_svfiprintf_r>:
 801aecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aed0:	4698      	mov	r8, r3
 801aed2:	898b      	ldrh	r3, [r1, #12]
 801aed4:	061b      	lsls	r3, r3, #24
 801aed6:	b09d      	sub	sp, #116	; 0x74
 801aed8:	4607      	mov	r7, r0
 801aeda:	460d      	mov	r5, r1
 801aedc:	4614      	mov	r4, r2
 801aede:	d50e      	bpl.n	801aefe <_svfiprintf_r+0x32>
 801aee0:	690b      	ldr	r3, [r1, #16]
 801aee2:	b963      	cbnz	r3, 801aefe <_svfiprintf_r+0x32>
 801aee4:	2140      	movs	r1, #64	; 0x40
 801aee6:	f7ff fb6f 	bl	801a5c8 <_malloc_r>
 801aeea:	6028      	str	r0, [r5, #0]
 801aeec:	6128      	str	r0, [r5, #16]
 801aeee:	b920      	cbnz	r0, 801aefa <_svfiprintf_r+0x2e>
 801aef0:	230c      	movs	r3, #12
 801aef2:	603b      	str	r3, [r7, #0]
 801aef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aef8:	e0d1      	b.n	801b09e <_svfiprintf_r+0x1d2>
 801aefa:	2340      	movs	r3, #64	; 0x40
 801aefc:	616b      	str	r3, [r5, #20]
 801aefe:	2300      	movs	r3, #0
 801af00:	9309      	str	r3, [sp, #36]	; 0x24
 801af02:	2320      	movs	r3, #32
 801af04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801af08:	f8cd 800c 	str.w	r8, [sp, #12]
 801af0c:	2330      	movs	r3, #48	; 0x30
 801af0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b0b8 <_svfiprintf_r+0x1ec>
 801af12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801af16:	f04f 0901 	mov.w	r9, #1
 801af1a:	4623      	mov	r3, r4
 801af1c:	469a      	mov	sl, r3
 801af1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801af22:	b10a      	cbz	r2, 801af28 <_svfiprintf_r+0x5c>
 801af24:	2a25      	cmp	r2, #37	; 0x25
 801af26:	d1f9      	bne.n	801af1c <_svfiprintf_r+0x50>
 801af28:	ebba 0b04 	subs.w	fp, sl, r4
 801af2c:	d00b      	beq.n	801af46 <_svfiprintf_r+0x7a>
 801af2e:	465b      	mov	r3, fp
 801af30:	4622      	mov	r2, r4
 801af32:	4629      	mov	r1, r5
 801af34:	4638      	mov	r0, r7
 801af36:	f7ff ff6d 	bl	801ae14 <__ssputs_r>
 801af3a:	3001      	adds	r0, #1
 801af3c:	f000 80aa 	beq.w	801b094 <_svfiprintf_r+0x1c8>
 801af40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801af42:	445a      	add	r2, fp
 801af44:	9209      	str	r2, [sp, #36]	; 0x24
 801af46:	f89a 3000 	ldrb.w	r3, [sl]
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	f000 80a2 	beq.w	801b094 <_svfiprintf_r+0x1c8>
 801af50:	2300      	movs	r3, #0
 801af52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801af56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801af5a:	f10a 0a01 	add.w	sl, sl, #1
 801af5e:	9304      	str	r3, [sp, #16]
 801af60:	9307      	str	r3, [sp, #28]
 801af62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801af66:	931a      	str	r3, [sp, #104]	; 0x68
 801af68:	4654      	mov	r4, sl
 801af6a:	2205      	movs	r2, #5
 801af6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af70:	4851      	ldr	r0, [pc, #324]	; (801b0b8 <_svfiprintf_r+0x1ec>)
 801af72:	f7e5 f945 	bl	8000200 <memchr>
 801af76:	9a04      	ldr	r2, [sp, #16]
 801af78:	b9d8      	cbnz	r0, 801afb2 <_svfiprintf_r+0xe6>
 801af7a:	06d0      	lsls	r0, r2, #27
 801af7c:	bf44      	itt	mi
 801af7e:	2320      	movmi	r3, #32
 801af80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801af84:	0711      	lsls	r1, r2, #28
 801af86:	bf44      	itt	mi
 801af88:	232b      	movmi	r3, #43	; 0x2b
 801af8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801af8e:	f89a 3000 	ldrb.w	r3, [sl]
 801af92:	2b2a      	cmp	r3, #42	; 0x2a
 801af94:	d015      	beq.n	801afc2 <_svfiprintf_r+0xf6>
 801af96:	9a07      	ldr	r2, [sp, #28]
 801af98:	4654      	mov	r4, sl
 801af9a:	2000      	movs	r0, #0
 801af9c:	f04f 0c0a 	mov.w	ip, #10
 801afa0:	4621      	mov	r1, r4
 801afa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801afa6:	3b30      	subs	r3, #48	; 0x30
 801afa8:	2b09      	cmp	r3, #9
 801afaa:	d94e      	bls.n	801b04a <_svfiprintf_r+0x17e>
 801afac:	b1b0      	cbz	r0, 801afdc <_svfiprintf_r+0x110>
 801afae:	9207      	str	r2, [sp, #28]
 801afb0:	e014      	b.n	801afdc <_svfiprintf_r+0x110>
 801afb2:	eba0 0308 	sub.w	r3, r0, r8
 801afb6:	fa09 f303 	lsl.w	r3, r9, r3
 801afba:	4313      	orrs	r3, r2
 801afbc:	9304      	str	r3, [sp, #16]
 801afbe:	46a2      	mov	sl, r4
 801afc0:	e7d2      	b.n	801af68 <_svfiprintf_r+0x9c>
 801afc2:	9b03      	ldr	r3, [sp, #12]
 801afc4:	1d19      	adds	r1, r3, #4
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	9103      	str	r1, [sp, #12]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	bfbb      	ittet	lt
 801afce:	425b      	neglt	r3, r3
 801afd0:	f042 0202 	orrlt.w	r2, r2, #2
 801afd4:	9307      	strge	r3, [sp, #28]
 801afd6:	9307      	strlt	r3, [sp, #28]
 801afd8:	bfb8      	it	lt
 801afda:	9204      	strlt	r2, [sp, #16]
 801afdc:	7823      	ldrb	r3, [r4, #0]
 801afde:	2b2e      	cmp	r3, #46	; 0x2e
 801afe0:	d10c      	bne.n	801affc <_svfiprintf_r+0x130>
 801afe2:	7863      	ldrb	r3, [r4, #1]
 801afe4:	2b2a      	cmp	r3, #42	; 0x2a
 801afe6:	d135      	bne.n	801b054 <_svfiprintf_r+0x188>
 801afe8:	9b03      	ldr	r3, [sp, #12]
 801afea:	1d1a      	adds	r2, r3, #4
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	9203      	str	r2, [sp, #12]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	bfb8      	it	lt
 801aff4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801aff8:	3402      	adds	r4, #2
 801affa:	9305      	str	r3, [sp, #20]
 801affc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b0c8 <_svfiprintf_r+0x1fc>
 801b000:	7821      	ldrb	r1, [r4, #0]
 801b002:	2203      	movs	r2, #3
 801b004:	4650      	mov	r0, sl
 801b006:	f7e5 f8fb 	bl	8000200 <memchr>
 801b00a:	b140      	cbz	r0, 801b01e <_svfiprintf_r+0x152>
 801b00c:	2340      	movs	r3, #64	; 0x40
 801b00e:	eba0 000a 	sub.w	r0, r0, sl
 801b012:	fa03 f000 	lsl.w	r0, r3, r0
 801b016:	9b04      	ldr	r3, [sp, #16]
 801b018:	4303      	orrs	r3, r0
 801b01a:	3401      	adds	r4, #1
 801b01c:	9304      	str	r3, [sp, #16]
 801b01e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b022:	4826      	ldr	r0, [pc, #152]	; (801b0bc <_svfiprintf_r+0x1f0>)
 801b024:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b028:	2206      	movs	r2, #6
 801b02a:	f7e5 f8e9 	bl	8000200 <memchr>
 801b02e:	2800      	cmp	r0, #0
 801b030:	d038      	beq.n	801b0a4 <_svfiprintf_r+0x1d8>
 801b032:	4b23      	ldr	r3, [pc, #140]	; (801b0c0 <_svfiprintf_r+0x1f4>)
 801b034:	bb1b      	cbnz	r3, 801b07e <_svfiprintf_r+0x1b2>
 801b036:	9b03      	ldr	r3, [sp, #12]
 801b038:	3307      	adds	r3, #7
 801b03a:	f023 0307 	bic.w	r3, r3, #7
 801b03e:	3308      	adds	r3, #8
 801b040:	9303      	str	r3, [sp, #12]
 801b042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b044:	4433      	add	r3, r6
 801b046:	9309      	str	r3, [sp, #36]	; 0x24
 801b048:	e767      	b.n	801af1a <_svfiprintf_r+0x4e>
 801b04a:	fb0c 3202 	mla	r2, ip, r2, r3
 801b04e:	460c      	mov	r4, r1
 801b050:	2001      	movs	r0, #1
 801b052:	e7a5      	b.n	801afa0 <_svfiprintf_r+0xd4>
 801b054:	2300      	movs	r3, #0
 801b056:	3401      	adds	r4, #1
 801b058:	9305      	str	r3, [sp, #20]
 801b05a:	4619      	mov	r1, r3
 801b05c:	f04f 0c0a 	mov.w	ip, #10
 801b060:	4620      	mov	r0, r4
 801b062:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b066:	3a30      	subs	r2, #48	; 0x30
 801b068:	2a09      	cmp	r2, #9
 801b06a:	d903      	bls.n	801b074 <_svfiprintf_r+0x1a8>
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d0c5      	beq.n	801affc <_svfiprintf_r+0x130>
 801b070:	9105      	str	r1, [sp, #20]
 801b072:	e7c3      	b.n	801affc <_svfiprintf_r+0x130>
 801b074:	fb0c 2101 	mla	r1, ip, r1, r2
 801b078:	4604      	mov	r4, r0
 801b07a:	2301      	movs	r3, #1
 801b07c:	e7f0      	b.n	801b060 <_svfiprintf_r+0x194>
 801b07e:	ab03      	add	r3, sp, #12
 801b080:	9300      	str	r3, [sp, #0]
 801b082:	462a      	mov	r2, r5
 801b084:	4b0f      	ldr	r3, [pc, #60]	; (801b0c4 <_svfiprintf_r+0x1f8>)
 801b086:	a904      	add	r1, sp, #16
 801b088:	4638      	mov	r0, r7
 801b08a:	f3af 8000 	nop.w
 801b08e:	1c42      	adds	r2, r0, #1
 801b090:	4606      	mov	r6, r0
 801b092:	d1d6      	bne.n	801b042 <_svfiprintf_r+0x176>
 801b094:	89ab      	ldrh	r3, [r5, #12]
 801b096:	065b      	lsls	r3, r3, #25
 801b098:	f53f af2c 	bmi.w	801aef4 <_svfiprintf_r+0x28>
 801b09c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b09e:	b01d      	add	sp, #116	; 0x74
 801b0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0a4:	ab03      	add	r3, sp, #12
 801b0a6:	9300      	str	r3, [sp, #0]
 801b0a8:	462a      	mov	r2, r5
 801b0aa:	4b06      	ldr	r3, [pc, #24]	; (801b0c4 <_svfiprintf_r+0x1f8>)
 801b0ac:	a904      	add	r1, sp, #16
 801b0ae:	4638      	mov	r0, r7
 801b0b0:	f000 f9d4 	bl	801b45c <_printf_i>
 801b0b4:	e7eb      	b.n	801b08e <_svfiprintf_r+0x1c2>
 801b0b6:	bf00      	nop
 801b0b8:	0801d948 	.word	0x0801d948
 801b0bc:	0801d952 	.word	0x0801d952
 801b0c0:	00000000 	.word	0x00000000
 801b0c4:	0801ae15 	.word	0x0801ae15
 801b0c8:	0801d94e 	.word	0x0801d94e

0801b0cc <__sfputc_r>:
 801b0cc:	6893      	ldr	r3, [r2, #8]
 801b0ce:	3b01      	subs	r3, #1
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	b410      	push	{r4}
 801b0d4:	6093      	str	r3, [r2, #8]
 801b0d6:	da08      	bge.n	801b0ea <__sfputc_r+0x1e>
 801b0d8:	6994      	ldr	r4, [r2, #24]
 801b0da:	42a3      	cmp	r3, r4
 801b0dc:	db01      	blt.n	801b0e2 <__sfputc_r+0x16>
 801b0de:	290a      	cmp	r1, #10
 801b0e0:	d103      	bne.n	801b0ea <__sfputc_r+0x1e>
 801b0e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0e6:	f7ff bba9 	b.w	801a83c <__swbuf_r>
 801b0ea:	6813      	ldr	r3, [r2, #0]
 801b0ec:	1c58      	adds	r0, r3, #1
 801b0ee:	6010      	str	r0, [r2, #0]
 801b0f0:	7019      	strb	r1, [r3, #0]
 801b0f2:	4608      	mov	r0, r1
 801b0f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0f8:	4770      	bx	lr

0801b0fa <__sfputs_r>:
 801b0fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0fc:	4606      	mov	r6, r0
 801b0fe:	460f      	mov	r7, r1
 801b100:	4614      	mov	r4, r2
 801b102:	18d5      	adds	r5, r2, r3
 801b104:	42ac      	cmp	r4, r5
 801b106:	d101      	bne.n	801b10c <__sfputs_r+0x12>
 801b108:	2000      	movs	r0, #0
 801b10a:	e007      	b.n	801b11c <__sfputs_r+0x22>
 801b10c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b110:	463a      	mov	r2, r7
 801b112:	4630      	mov	r0, r6
 801b114:	f7ff ffda 	bl	801b0cc <__sfputc_r>
 801b118:	1c43      	adds	r3, r0, #1
 801b11a:	d1f3      	bne.n	801b104 <__sfputs_r+0xa>
 801b11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b120 <_vfiprintf_r>:
 801b120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b124:	460d      	mov	r5, r1
 801b126:	b09d      	sub	sp, #116	; 0x74
 801b128:	4614      	mov	r4, r2
 801b12a:	4698      	mov	r8, r3
 801b12c:	4606      	mov	r6, r0
 801b12e:	b118      	cbz	r0, 801b138 <_vfiprintf_r+0x18>
 801b130:	6983      	ldr	r3, [r0, #24]
 801b132:	b90b      	cbnz	r3, 801b138 <_vfiprintf_r+0x18>
 801b134:	f7ff fd5c 	bl	801abf0 <__sinit>
 801b138:	4b89      	ldr	r3, [pc, #548]	; (801b360 <_vfiprintf_r+0x240>)
 801b13a:	429d      	cmp	r5, r3
 801b13c:	d11b      	bne.n	801b176 <_vfiprintf_r+0x56>
 801b13e:	6875      	ldr	r5, [r6, #4]
 801b140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b142:	07d9      	lsls	r1, r3, #31
 801b144:	d405      	bmi.n	801b152 <_vfiprintf_r+0x32>
 801b146:	89ab      	ldrh	r3, [r5, #12]
 801b148:	059a      	lsls	r2, r3, #22
 801b14a:	d402      	bmi.n	801b152 <_vfiprintf_r+0x32>
 801b14c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b14e:	f7ff fded 	bl	801ad2c <__retarget_lock_acquire_recursive>
 801b152:	89ab      	ldrh	r3, [r5, #12]
 801b154:	071b      	lsls	r3, r3, #28
 801b156:	d501      	bpl.n	801b15c <_vfiprintf_r+0x3c>
 801b158:	692b      	ldr	r3, [r5, #16]
 801b15a:	b9eb      	cbnz	r3, 801b198 <_vfiprintf_r+0x78>
 801b15c:	4629      	mov	r1, r5
 801b15e:	4630      	mov	r0, r6
 801b160:	f7ff fbbe 	bl	801a8e0 <__swsetup_r>
 801b164:	b1c0      	cbz	r0, 801b198 <_vfiprintf_r+0x78>
 801b166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b168:	07dc      	lsls	r4, r3, #31
 801b16a:	d50e      	bpl.n	801b18a <_vfiprintf_r+0x6a>
 801b16c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b170:	b01d      	add	sp, #116	; 0x74
 801b172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b176:	4b7b      	ldr	r3, [pc, #492]	; (801b364 <_vfiprintf_r+0x244>)
 801b178:	429d      	cmp	r5, r3
 801b17a:	d101      	bne.n	801b180 <_vfiprintf_r+0x60>
 801b17c:	68b5      	ldr	r5, [r6, #8]
 801b17e:	e7df      	b.n	801b140 <_vfiprintf_r+0x20>
 801b180:	4b79      	ldr	r3, [pc, #484]	; (801b368 <_vfiprintf_r+0x248>)
 801b182:	429d      	cmp	r5, r3
 801b184:	bf08      	it	eq
 801b186:	68f5      	ldreq	r5, [r6, #12]
 801b188:	e7da      	b.n	801b140 <_vfiprintf_r+0x20>
 801b18a:	89ab      	ldrh	r3, [r5, #12]
 801b18c:	0598      	lsls	r0, r3, #22
 801b18e:	d4ed      	bmi.n	801b16c <_vfiprintf_r+0x4c>
 801b190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b192:	f7ff fdcc 	bl	801ad2e <__retarget_lock_release_recursive>
 801b196:	e7e9      	b.n	801b16c <_vfiprintf_r+0x4c>
 801b198:	2300      	movs	r3, #0
 801b19a:	9309      	str	r3, [sp, #36]	; 0x24
 801b19c:	2320      	movs	r3, #32
 801b19e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b1a2:	f8cd 800c 	str.w	r8, [sp, #12]
 801b1a6:	2330      	movs	r3, #48	; 0x30
 801b1a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b36c <_vfiprintf_r+0x24c>
 801b1ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b1b0:	f04f 0901 	mov.w	r9, #1
 801b1b4:	4623      	mov	r3, r4
 801b1b6:	469a      	mov	sl, r3
 801b1b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b1bc:	b10a      	cbz	r2, 801b1c2 <_vfiprintf_r+0xa2>
 801b1be:	2a25      	cmp	r2, #37	; 0x25
 801b1c0:	d1f9      	bne.n	801b1b6 <_vfiprintf_r+0x96>
 801b1c2:	ebba 0b04 	subs.w	fp, sl, r4
 801b1c6:	d00b      	beq.n	801b1e0 <_vfiprintf_r+0xc0>
 801b1c8:	465b      	mov	r3, fp
 801b1ca:	4622      	mov	r2, r4
 801b1cc:	4629      	mov	r1, r5
 801b1ce:	4630      	mov	r0, r6
 801b1d0:	f7ff ff93 	bl	801b0fa <__sfputs_r>
 801b1d4:	3001      	adds	r0, #1
 801b1d6:	f000 80aa 	beq.w	801b32e <_vfiprintf_r+0x20e>
 801b1da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b1dc:	445a      	add	r2, fp
 801b1de:	9209      	str	r2, [sp, #36]	; 0x24
 801b1e0:	f89a 3000 	ldrb.w	r3, [sl]
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	f000 80a2 	beq.w	801b32e <_vfiprintf_r+0x20e>
 801b1ea:	2300      	movs	r3, #0
 801b1ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b1f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b1f4:	f10a 0a01 	add.w	sl, sl, #1
 801b1f8:	9304      	str	r3, [sp, #16]
 801b1fa:	9307      	str	r3, [sp, #28]
 801b1fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b200:	931a      	str	r3, [sp, #104]	; 0x68
 801b202:	4654      	mov	r4, sl
 801b204:	2205      	movs	r2, #5
 801b206:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b20a:	4858      	ldr	r0, [pc, #352]	; (801b36c <_vfiprintf_r+0x24c>)
 801b20c:	f7e4 fff8 	bl	8000200 <memchr>
 801b210:	9a04      	ldr	r2, [sp, #16]
 801b212:	b9d8      	cbnz	r0, 801b24c <_vfiprintf_r+0x12c>
 801b214:	06d1      	lsls	r1, r2, #27
 801b216:	bf44      	itt	mi
 801b218:	2320      	movmi	r3, #32
 801b21a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b21e:	0713      	lsls	r3, r2, #28
 801b220:	bf44      	itt	mi
 801b222:	232b      	movmi	r3, #43	; 0x2b
 801b224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b228:	f89a 3000 	ldrb.w	r3, [sl]
 801b22c:	2b2a      	cmp	r3, #42	; 0x2a
 801b22e:	d015      	beq.n	801b25c <_vfiprintf_r+0x13c>
 801b230:	9a07      	ldr	r2, [sp, #28]
 801b232:	4654      	mov	r4, sl
 801b234:	2000      	movs	r0, #0
 801b236:	f04f 0c0a 	mov.w	ip, #10
 801b23a:	4621      	mov	r1, r4
 801b23c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b240:	3b30      	subs	r3, #48	; 0x30
 801b242:	2b09      	cmp	r3, #9
 801b244:	d94e      	bls.n	801b2e4 <_vfiprintf_r+0x1c4>
 801b246:	b1b0      	cbz	r0, 801b276 <_vfiprintf_r+0x156>
 801b248:	9207      	str	r2, [sp, #28]
 801b24a:	e014      	b.n	801b276 <_vfiprintf_r+0x156>
 801b24c:	eba0 0308 	sub.w	r3, r0, r8
 801b250:	fa09 f303 	lsl.w	r3, r9, r3
 801b254:	4313      	orrs	r3, r2
 801b256:	9304      	str	r3, [sp, #16]
 801b258:	46a2      	mov	sl, r4
 801b25a:	e7d2      	b.n	801b202 <_vfiprintf_r+0xe2>
 801b25c:	9b03      	ldr	r3, [sp, #12]
 801b25e:	1d19      	adds	r1, r3, #4
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	9103      	str	r1, [sp, #12]
 801b264:	2b00      	cmp	r3, #0
 801b266:	bfbb      	ittet	lt
 801b268:	425b      	neglt	r3, r3
 801b26a:	f042 0202 	orrlt.w	r2, r2, #2
 801b26e:	9307      	strge	r3, [sp, #28]
 801b270:	9307      	strlt	r3, [sp, #28]
 801b272:	bfb8      	it	lt
 801b274:	9204      	strlt	r2, [sp, #16]
 801b276:	7823      	ldrb	r3, [r4, #0]
 801b278:	2b2e      	cmp	r3, #46	; 0x2e
 801b27a:	d10c      	bne.n	801b296 <_vfiprintf_r+0x176>
 801b27c:	7863      	ldrb	r3, [r4, #1]
 801b27e:	2b2a      	cmp	r3, #42	; 0x2a
 801b280:	d135      	bne.n	801b2ee <_vfiprintf_r+0x1ce>
 801b282:	9b03      	ldr	r3, [sp, #12]
 801b284:	1d1a      	adds	r2, r3, #4
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	9203      	str	r2, [sp, #12]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	bfb8      	it	lt
 801b28e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b292:	3402      	adds	r4, #2
 801b294:	9305      	str	r3, [sp, #20]
 801b296:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b37c <_vfiprintf_r+0x25c>
 801b29a:	7821      	ldrb	r1, [r4, #0]
 801b29c:	2203      	movs	r2, #3
 801b29e:	4650      	mov	r0, sl
 801b2a0:	f7e4 ffae 	bl	8000200 <memchr>
 801b2a4:	b140      	cbz	r0, 801b2b8 <_vfiprintf_r+0x198>
 801b2a6:	2340      	movs	r3, #64	; 0x40
 801b2a8:	eba0 000a 	sub.w	r0, r0, sl
 801b2ac:	fa03 f000 	lsl.w	r0, r3, r0
 801b2b0:	9b04      	ldr	r3, [sp, #16]
 801b2b2:	4303      	orrs	r3, r0
 801b2b4:	3401      	adds	r4, #1
 801b2b6:	9304      	str	r3, [sp, #16]
 801b2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b2bc:	482c      	ldr	r0, [pc, #176]	; (801b370 <_vfiprintf_r+0x250>)
 801b2be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b2c2:	2206      	movs	r2, #6
 801b2c4:	f7e4 ff9c 	bl	8000200 <memchr>
 801b2c8:	2800      	cmp	r0, #0
 801b2ca:	d03f      	beq.n	801b34c <_vfiprintf_r+0x22c>
 801b2cc:	4b29      	ldr	r3, [pc, #164]	; (801b374 <_vfiprintf_r+0x254>)
 801b2ce:	bb1b      	cbnz	r3, 801b318 <_vfiprintf_r+0x1f8>
 801b2d0:	9b03      	ldr	r3, [sp, #12]
 801b2d2:	3307      	adds	r3, #7
 801b2d4:	f023 0307 	bic.w	r3, r3, #7
 801b2d8:	3308      	adds	r3, #8
 801b2da:	9303      	str	r3, [sp, #12]
 801b2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2de:	443b      	add	r3, r7
 801b2e0:	9309      	str	r3, [sp, #36]	; 0x24
 801b2e2:	e767      	b.n	801b1b4 <_vfiprintf_r+0x94>
 801b2e4:	fb0c 3202 	mla	r2, ip, r2, r3
 801b2e8:	460c      	mov	r4, r1
 801b2ea:	2001      	movs	r0, #1
 801b2ec:	e7a5      	b.n	801b23a <_vfiprintf_r+0x11a>
 801b2ee:	2300      	movs	r3, #0
 801b2f0:	3401      	adds	r4, #1
 801b2f2:	9305      	str	r3, [sp, #20]
 801b2f4:	4619      	mov	r1, r3
 801b2f6:	f04f 0c0a 	mov.w	ip, #10
 801b2fa:	4620      	mov	r0, r4
 801b2fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b300:	3a30      	subs	r2, #48	; 0x30
 801b302:	2a09      	cmp	r2, #9
 801b304:	d903      	bls.n	801b30e <_vfiprintf_r+0x1ee>
 801b306:	2b00      	cmp	r3, #0
 801b308:	d0c5      	beq.n	801b296 <_vfiprintf_r+0x176>
 801b30a:	9105      	str	r1, [sp, #20]
 801b30c:	e7c3      	b.n	801b296 <_vfiprintf_r+0x176>
 801b30e:	fb0c 2101 	mla	r1, ip, r1, r2
 801b312:	4604      	mov	r4, r0
 801b314:	2301      	movs	r3, #1
 801b316:	e7f0      	b.n	801b2fa <_vfiprintf_r+0x1da>
 801b318:	ab03      	add	r3, sp, #12
 801b31a:	9300      	str	r3, [sp, #0]
 801b31c:	462a      	mov	r2, r5
 801b31e:	4b16      	ldr	r3, [pc, #88]	; (801b378 <_vfiprintf_r+0x258>)
 801b320:	a904      	add	r1, sp, #16
 801b322:	4630      	mov	r0, r6
 801b324:	f3af 8000 	nop.w
 801b328:	4607      	mov	r7, r0
 801b32a:	1c78      	adds	r0, r7, #1
 801b32c:	d1d6      	bne.n	801b2dc <_vfiprintf_r+0x1bc>
 801b32e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b330:	07d9      	lsls	r1, r3, #31
 801b332:	d405      	bmi.n	801b340 <_vfiprintf_r+0x220>
 801b334:	89ab      	ldrh	r3, [r5, #12]
 801b336:	059a      	lsls	r2, r3, #22
 801b338:	d402      	bmi.n	801b340 <_vfiprintf_r+0x220>
 801b33a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b33c:	f7ff fcf7 	bl	801ad2e <__retarget_lock_release_recursive>
 801b340:	89ab      	ldrh	r3, [r5, #12]
 801b342:	065b      	lsls	r3, r3, #25
 801b344:	f53f af12 	bmi.w	801b16c <_vfiprintf_r+0x4c>
 801b348:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b34a:	e711      	b.n	801b170 <_vfiprintf_r+0x50>
 801b34c:	ab03      	add	r3, sp, #12
 801b34e:	9300      	str	r3, [sp, #0]
 801b350:	462a      	mov	r2, r5
 801b352:	4b09      	ldr	r3, [pc, #36]	; (801b378 <_vfiprintf_r+0x258>)
 801b354:	a904      	add	r1, sp, #16
 801b356:	4630      	mov	r0, r6
 801b358:	f000 f880 	bl	801b45c <_printf_i>
 801b35c:	e7e4      	b.n	801b328 <_vfiprintf_r+0x208>
 801b35e:	bf00      	nop
 801b360:	0801d908 	.word	0x0801d908
 801b364:	0801d928 	.word	0x0801d928
 801b368:	0801d8e8 	.word	0x0801d8e8
 801b36c:	0801d948 	.word	0x0801d948
 801b370:	0801d952 	.word	0x0801d952
 801b374:	00000000 	.word	0x00000000
 801b378:	0801b0fb 	.word	0x0801b0fb
 801b37c:	0801d94e 	.word	0x0801d94e

0801b380 <_printf_common>:
 801b380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b384:	4616      	mov	r6, r2
 801b386:	4699      	mov	r9, r3
 801b388:	688a      	ldr	r2, [r1, #8]
 801b38a:	690b      	ldr	r3, [r1, #16]
 801b38c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b390:	4293      	cmp	r3, r2
 801b392:	bfb8      	it	lt
 801b394:	4613      	movlt	r3, r2
 801b396:	6033      	str	r3, [r6, #0]
 801b398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b39c:	4607      	mov	r7, r0
 801b39e:	460c      	mov	r4, r1
 801b3a0:	b10a      	cbz	r2, 801b3a6 <_printf_common+0x26>
 801b3a2:	3301      	adds	r3, #1
 801b3a4:	6033      	str	r3, [r6, #0]
 801b3a6:	6823      	ldr	r3, [r4, #0]
 801b3a8:	0699      	lsls	r1, r3, #26
 801b3aa:	bf42      	ittt	mi
 801b3ac:	6833      	ldrmi	r3, [r6, #0]
 801b3ae:	3302      	addmi	r3, #2
 801b3b0:	6033      	strmi	r3, [r6, #0]
 801b3b2:	6825      	ldr	r5, [r4, #0]
 801b3b4:	f015 0506 	ands.w	r5, r5, #6
 801b3b8:	d106      	bne.n	801b3c8 <_printf_common+0x48>
 801b3ba:	f104 0a19 	add.w	sl, r4, #25
 801b3be:	68e3      	ldr	r3, [r4, #12]
 801b3c0:	6832      	ldr	r2, [r6, #0]
 801b3c2:	1a9b      	subs	r3, r3, r2
 801b3c4:	42ab      	cmp	r3, r5
 801b3c6:	dc26      	bgt.n	801b416 <_printf_common+0x96>
 801b3c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b3cc:	1e13      	subs	r3, r2, #0
 801b3ce:	6822      	ldr	r2, [r4, #0]
 801b3d0:	bf18      	it	ne
 801b3d2:	2301      	movne	r3, #1
 801b3d4:	0692      	lsls	r2, r2, #26
 801b3d6:	d42b      	bmi.n	801b430 <_printf_common+0xb0>
 801b3d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b3dc:	4649      	mov	r1, r9
 801b3de:	4638      	mov	r0, r7
 801b3e0:	47c0      	blx	r8
 801b3e2:	3001      	adds	r0, #1
 801b3e4:	d01e      	beq.n	801b424 <_printf_common+0xa4>
 801b3e6:	6823      	ldr	r3, [r4, #0]
 801b3e8:	68e5      	ldr	r5, [r4, #12]
 801b3ea:	6832      	ldr	r2, [r6, #0]
 801b3ec:	f003 0306 	and.w	r3, r3, #6
 801b3f0:	2b04      	cmp	r3, #4
 801b3f2:	bf08      	it	eq
 801b3f4:	1aad      	subeq	r5, r5, r2
 801b3f6:	68a3      	ldr	r3, [r4, #8]
 801b3f8:	6922      	ldr	r2, [r4, #16]
 801b3fa:	bf0c      	ite	eq
 801b3fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b400:	2500      	movne	r5, #0
 801b402:	4293      	cmp	r3, r2
 801b404:	bfc4      	itt	gt
 801b406:	1a9b      	subgt	r3, r3, r2
 801b408:	18ed      	addgt	r5, r5, r3
 801b40a:	2600      	movs	r6, #0
 801b40c:	341a      	adds	r4, #26
 801b40e:	42b5      	cmp	r5, r6
 801b410:	d11a      	bne.n	801b448 <_printf_common+0xc8>
 801b412:	2000      	movs	r0, #0
 801b414:	e008      	b.n	801b428 <_printf_common+0xa8>
 801b416:	2301      	movs	r3, #1
 801b418:	4652      	mov	r2, sl
 801b41a:	4649      	mov	r1, r9
 801b41c:	4638      	mov	r0, r7
 801b41e:	47c0      	blx	r8
 801b420:	3001      	adds	r0, #1
 801b422:	d103      	bne.n	801b42c <_printf_common+0xac>
 801b424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b42c:	3501      	adds	r5, #1
 801b42e:	e7c6      	b.n	801b3be <_printf_common+0x3e>
 801b430:	18e1      	adds	r1, r4, r3
 801b432:	1c5a      	adds	r2, r3, #1
 801b434:	2030      	movs	r0, #48	; 0x30
 801b436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b43a:	4422      	add	r2, r4
 801b43c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b444:	3302      	adds	r3, #2
 801b446:	e7c7      	b.n	801b3d8 <_printf_common+0x58>
 801b448:	2301      	movs	r3, #1
 801b44a:	4622      	mov	r2, r4
 801b44c:	4649      	mov	r1, r9
 801b44e:	4638      	mov	r0, r7
 801b450:	47c0      	blx	r8
 801b452:	3001      	adds	r0, #1
 801b454:	d0e6      	beq.n	801b424 <_printf_common+0xa4>
 801b456:	3601      	adds	r6, #1
 801b458:	e7d9      	b.n	801b40e <_printf_common+0x8e>
	...

0801b45c <_printf_i>:
 801b45c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b460:	7e0f      	ldrb	r7, [r1, #24]
 801b462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b464:	2f78      	cmp	r7, #120	; 0x78
 801b466:	4691      	mov	r9, r2
 801b468:	4680      	mov	r8, r0
 801b46a:	460c      	mov	r4, r1
 801b46c:	469a      	mov	sl, r3
 801b46e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b472:	d807      	bhi.n	801b484 <_printf_i+0x28>
 801b474:	2f62      	cmp	r7, #98	; 0x62
 801b476:	d80a      	bhi.n	801b48e <_printf_i+0x32>
 801b478:	2f00      	cmp	r7, #0
 801b47a:	f000 80d8 	beq.w	801b62e <_printf_i+0x1d2>
 801b47e:	2f58      	cmp	r7, #88	; 0x58
 801b480:	f000 80a3 	beq.w	801b5ca <_printf_i+0x16e>
 801b484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b48c:	e03a      	b.n	801b504 <_printf_i+0xa8>
 801b48e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b492:	2b15      	cmp	r3, #21
 801b494:	d8f6      	bhi.n	801b484 <_printf_i+0x28>
 801b496:	a101      	add	r1, pc, #4	; (adr r1, 801b49c <_printf_i+0x40>)
 801b498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b49c:	0801b4f5 	.word	0x0801b4f5
 801b4a0:	0801b509 	.word	0x0801b509
 801b4a4:	0801b485 	.word	0x0801b485
 801b4a8:	0801b485 	.word	0x0801b485
 801b4ac:	0801b485 	.word	0x0801b485
 801b4b0:	0801b485 	.word	0x0801b485
 801b4b4:	0801b509 	.word	0x0801b509
 801b4b8:	0801b485 	.word	0x0801b485
 801b4bc:	0801b485 	.word	0x0801b485
 801b4c0:	0801b485 	.word	0x0801b485
 801b4c4:	0801b485 	.word	0x0801b485
 801b4c8:	0801b615 	.word	0x0801b615
 801b4cc:	0801b539 	.word	0x0801b539
 801b4d0:	0801b5f7 	.word	0x0801b5f7
 801b4d4:	0801b485 	.word	0x0801b485
 801b4d8:	0801b485 	.word	0x0801b485
 801b4dc:	0801b637 	.word	0x0801b637
 801b4e0:	0801b485 	.word	0x0801b485
 801b4e4:	0801b539 	.word	0x0801b539
 801b4e8:	0801b485 	.word	0x0801b485
 801b4ec:	0801b485 	.word	0x0801b485
 801b4f0:	0801b5ff 	.word	0x0801b5ff
 801b4f4:	682b      	ldr	r3, [r5, #0]
 801b4f6:	1d1a      	adds	r2, r3, #4
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	602a      	str	r2, [r5, #0]
 801b4fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b504:	2301      	movs	r3, #1
 801b506:	e0a3      	b.n	801b650 <_printf_i+0x1f4>
 801b508:	6820      	ldr	r0, [r4, #0]
 801b50a:	6829      	ldr	r1, [r5, #0]
 801b50c:	0606      	lsls	r6, r0, #24
 801b50e:	f101 0304 	add.w	r3, r1, #4
 801b512:	d50a      	bpl.n	801b52a <_printf_i+0xce>
 801b514:	680e      	ldr	r6, [r1, #0]
 801b516:	602b      	str	r3, [r5, #0]
 801b518:	2e00      	cmp	r6, #0
 801b51a:	da03      	bge.n	801b524 <_printf_i+0xc8>
 801b51c:	232d      	movs	r3, #45	; 0x2d
 801b51e:	4276      	negs	r6, r6
 801b520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b524:	485e      	ldr	r0, [pc, #376]	; (801b6a0 <_printf_i+0x244>)
 801b526:	230a      	movs	r3, #10
 801b528:	e019      	b.n	801b55e <_printf_i+0x102>
 801b52a:	680e      	ldr	r6, [r1, #0]
 801b52c:	602b      	str	r3, [r5, #0]
 801b52e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b532:	bf18      	it	ne
 801b534:	b236      	sxthne	r6, r6
 801b536:	e7ef      	b.n	801b518 <_printf_i+0xbc>
 801b538:	682b      	ldr	r3, [r5, #0]
 801b53a:	6820      	ldr	r0, [r4, #0]
 801b53c:	1d19      	adds	r1, r3, #4
 801b53e:	6029      	str	r1, [r5, #0]
 801b540:	0601      	lsls	r1, r0, #24
 801b542:	d501      	bpl.n	801b548 <_printf_i+0xec>
 801b544:	681e      	ldr	r6, [r3, #0]
 801b546:	e002      	b.n	801b54e <_printf_i+0xf2>
 801b548:	0646      	lsls	r6, r0, #25
 801b54a:	d5fb      	bpl.n	801b544 <_printf_i+0xe8>
 801b54c:	881e      	ldrh	r6, [r3, #0]
 801b54e:	4854      	ldr	r0, [pc, #336]	; (801b6a0 <_printf_i+0x244>)
 801b550:	2f6f      	cmp	r7, #111	; 0x6f
 801b552:	bf0c      	ite	eq
 801b554:	2308      	moveq	r3, #8
 801b556:	230a      	movne	r3, #10
 801b558:	2100      	movs	r1, #0
 801b55a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b55e:	6865      	ldr	r5, [r4, #4]
 801b560:	60a5      	str	r5, [r4, #8]
 801b562:	2d00      	cmp	r5, #0
 801b564:	bfa2      	ittt	ge
 801b566:	6821      	ldrge	r1, [r4, #0]
 801b568:	f021 0104 	bicge.w	r1, r1, #4
 801b56c:	6021      	strge	r1, [r4, #0]
 801b56e:	b90e      	cbnz	r6, 801b574 <_printf_i+0x118>
 801b570:	2d00      	cmp	r5, #0
 801b572:	d04d      	beq.n	801b610 <_printf_i+0x1b4>
 801b574:	4615      	mov	r5, r2
 801b576:	fbb6 f1f3 	udiv	r1, r6, r3
 801b57a:	fb03 6711 	mls	r7, r3, r1, r6
 801b57e:	5dc7      	ldrb	r7, [r0, r7]
 801b580:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b584:	4637      	mov	r7, r6
 801b586:	42bb      	cmp	r3, r7
 801b588:	460e      	mov	r6, r1
 801b58a:	d9f4      	bls.n	801b576 <_printf_i+0x11a>
 801b58c:	2b08      	cmp	r3, #8
 801b58e:	d10b      	bne.n	801b5a8 <_printf_i+0x14c>
 801b590:	6823      	ldr	r3, [r4, #0]
 801b592:	07de      	lsls	r6, r3, #31
 801b594:	d508      	bpl.n	801b5a8 <_printf_i+0x14c>
 801b596:	6923      	ldr	r3, [r4, #16]
 801b598:	6861      	ldr	r1, [r4, #4]
 801b59a:	4299      	cmp	r1, r3
 801b59c:	bfde      	ittt	le
 801b59e:	2330      	movle	r3, #48	; 0x30
 801b5a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b5a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801b5a8:	1b52      	subs	r2, r2, r5
 801b5aa:	6122      	str	r2, [r4, #16]
 801b5ac:	f8cd a000 	str.w	sl, [sp]
 801b5b0:	464b      	mov	r3, r9
 801b5b2:	aa03      	add	r2, sp, #12
 801b5b4:	4621      	mov	r1, r4
 801b5b6:	4640      	mov	r0, r8
 801b5b8:	f7ff fee2 	bl	801b380 <_printf_common>
 801b5bc:	3001      	adds	r0, #1
 801b5be:	d14c      	bne.n	801b65a <_printf_i+0x1fe>
 801b5c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b5c4:	b004      	add	sp, #16
 801b5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5ca:	4835      	ldr	r0, [pc, #212]	; (801b6a0 <_printf_i+0x244>)
 801b5cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b5d0:	6829      	ldr	r1, [r5, #0]
 801b5d2:	6823      	ldr	r3, [r4, #0]
 801b5d4:	f851 6b04 	ldr.w	r6, [r1], #4
 801b5d8:	6029      	str	r1, [r5, #0]
 801b5da:	061d      	lsls	r5, r3, #24
 801b5dc:	d514      	bpl.n	801b608 <_printf_i+0x1ac>
 801b5de:	07df      	lsls	r7, r3, #31
 801b5e0:	bf44      	itt	mi
 801b5e2:	f043 0320 	orrmi.w	r3, r3, #32
 801b5e6:	6023      	strmi	r3, [r4, #0]
 801b5e8:	b91e      	cbnz	r6, 801b5f2 <_printf_i+0x196>
 801b5ea:	6823      	ldr	r3, [r4, #0]
 801b5ec:	f023 0320 	bic.w	r3, r3, #32
 801b5f0:	6023      	str	r3, [r4, #0]
 801b5f2:	2310      	movs	r3, #16
 801b5f4:	e7b0      	b.n	801b558 <_printf_i+0xfc>
 801b5f6:	6823      	ldr	r3, [r4, #0]
 801b5f8:	f043 0320 	orr.w	r3, r3, #32
 801b5fc:	6023      	str	r3, [r4, #0]
 801b5fe:	2378      	movs	r3, #120	; 0x78
 801b600:	4828      	ldr	r0, [pc, #160]	; (801b6a4 <_printf_i+0x248>)
 801b602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b606:	e7e3      	b.n	801b5d0 <_printf_i+0x174>
 801b608:	0659      	lsls	r1, r3, #25
 801b60a:	bf48      	it	mi
 801b60c:	b2b6      	uxthmi	r6, r6
 801b60e:	e7e6      	b.n	801b5de <_printf_i+0x182>
 801b610:	4615      	mov	r5, r2
 801b612:	e7bb      	b.n	801b58c <_printf_i+0x130>
 801b614:	682b      	ldr	r3, [r5, #0]
 801b616:	6826      	ldr	r6, [r4, #0]
 801b618:	6961      	ldr	r1, [r4, #20]
 801b61a:	1d18      	adds	r0, r3, #4
 801b61c:	6028      	str	r0, [r5, #0]
 801b61e:	0635      	lsls	r5, r6, #24
 801b620:	681b      	ldr	r3, [r3, #0]
 801b622:	d501      	bpl.n	801b628 <_printf_i+0x1cc>
 801b624:	6019      	str	r1, [r3, #0]
 801b626:	e002      	b.n	801b62e <_printf_i+0x1d2>
 801b628:	0670      	lsls	r0, r6, #25
 801b62a:	d5fb      	bpl.n	801b624 <_printf_i+0x1c8>
 801b62c:	8019      	strh	r1, [r3, #0]
 801b62e:	2300      	movs	r3, #0
 801b630:	6123      	str	r3, [r4, #16]
 801b632:	4615      	mov	r5, r2
 801b634:	e7ba      	b.n	801b5ac <_printf_i+0x150>
 801b636:	682b      	ldr	r3, [r5, #0]
 801b638:	1d1a      	adds	r2, r3, #4
 801b63a:	602a      	str	r2, [r5, #0]
 801b63c:	681d      	ldr	r5, [r3, #0]
 801b63e:	6862      	ldr	r2, [r4, #4]
 801b640:	2100      	movs	r1, #0
 801b642:	4628      	mov	r0, r5
 801b644:	f7e4 fddc 	bl	8000200 <memchr>
 801b648:	b108      	cbz	r0, 801b64e <_printf_i+0x1f2>
 801b64a:	1b40      	subs	r0, r0, r5
 801b64c:	6060      	str	r0, [r4, #4]
 801b64e:	6863      	ldr	r3, [r4, #4]
 801b650:	6123      	str	r3, [r4, #16]
 801b652:	2300      	movs	r3, #0
 801b654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b658:	e7a8      	b.n	801b5ac <_printf_i+0x150>
 801b65a:	6923      	ldr	r3, [r4, #16]
 801b65c:	462a      	mov	r2, r5
 801b65e:	4649      	mov	r1, r9
 801b660:	4640      	mov	r0, r8
 801b662:	47d0      	blx	sl
 801b664:	3001      	adds	r0, #1
 801b666:	d0ab      	beq.n	801b5c0 <_printf_i+0x164>
 801b668:	6823      	ldr	r3, [r4, #0]
 801b66a:	079b      	lsls	r3, r3, #30
 801b66c:	d413      	bmi.n	801b696 <_printf_i+0x23a>
 801b66e:	68e0      	ldr	r0, [r4, #12]
 801b670:	9b03      	ldr	r3, [sp, #12]
 801b672:	4298      	cmp	r0, r3
 801b674:	bfb8      	it	lt
 801b676:	4618      	movlt	r0, r3
 801b678:	e7a4      	b.n	801b5c4 <_printf_i+0x168>
 801b67a:	2301      	movs	r3, #1
 801b67c:	4632      	mov	r2, r6
 801b67e:	4649      	mov	r1, r9
 801b680:	4640      	mov	r0, r8
 801b682:	47d0      	blx	sl
 801b684:	3001      	adds	r0, #1
 801b686:	d09b      	beq.n	801b5c0 <_printf_i+0x164>
 801b688:	3501      	adds	r5, #1
 801b68a:	68e3      	ldr	r3, [r4, #12]
 801b68c:	9903      	ldr	r1, [sp, #12]
 801b68e:	1a5b      	subs	r3, r3, r1
 801b690:	42ab      	cmp	r3, r5
 801b692:	dcf2      	bgt.n	801b67a <_printf_i+0x21e>
 801b694:	e7eb      	b.n	801b66e <_printf_i+0x212>
 801b696:	2500      	movs	r5, #0
 801b698:	f104 0619 	add.w	r6, r4, #25
 801b69c:	e7f5      	b.n	801b68a <_printf_i+0x22e>
 801b69e:	bf00      	nop
 801b6a0:	0801d959 	.word	0x0801d959
 801b6a4:	0801d96a 	.word	0x0801d96a

0801b6a8 <__sread>:
 801b6a8:	b510      	push	{r4, lr}
 801b6aa:	460c      	mov	r4, r1
 801b6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6b0:	f000 f8de 	bl	801b870 <_read_r>
 801b6b4:	2800      	cmp	r0, #0
 801b6b6:	bfab      	itete	ge
 801b6b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b6ba:	89a3      	ldrhlt	r3, [r4, #12]
 801b6bc:	181b      	addge	r3, r3, r0
 801b6be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b6c2:	bfac      	ite	ge
 801b6c4:	6563      	strge	r3, [r4, #84]	; 0x54
 801b6c6:	81a3      	strhlt	r3, [r4, #12]
 801b6c8:	bd10      	pop	{r4, pc}

0801b6ca <__swrite>:
 801b6ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6ce:	461f      	mov	r7, r3
 801b6d0:	898b      	ldrh	r3, [r1, #12]
 801b6d2:	05db      	lsls	r3, r3, #23
 801b6d4:	4605      	mov	r5, r0
 801b6d6:	460c      	mov	r4, r1
 801b6d8:	4616      	mov	r6, r2
 801b6da:	d505      	bpl.n	801b6e8 <__swrite+0x1e>
 801b6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6e0:	2302      	movs	r3, #2
 801b6e2:	2200      	movs	r2, #0
 801b6e4:	f000 f868 	bl	801b7b8 <_lseek_r>
 801b6e8:	89a3      	ldrh	r3, [r4, #12]
 801b6ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b6ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b6f2:	81a3      	strh	r3, [r4, #12]
 801b6f4:	4632      	mov	r2, r6
 801b6f6:	463b      	mov	r3, r7
 801b6f8:	4628      	mov	r0, r5
 801b6fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b6fe:	f000 b817 	b.w	801b730 <_write_r>

0801b702 <__sseek>:
 801b702:	b510      	push	{r4, lr}
 801b704:	460c      	mov	r4, r1
 801b706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b70a:	f000 f855 	bl	801b7b8 <_lseek_r>
 801b70e:	1c43      	adds	r3, r0, #1
 801b710:	89a3      	ldrh	r3, [r4, #12]
 801b712:	bf15      	itete	ne
 801b714:	6560      	strne	r0, [r4, #84]	; 0x54
 801b716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b71a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b71e:	81a3      	strheq	r3, [r4, #12]
 801b720:	bf18      	it	ne
 801b722:	81a3      	strhne	r3, [r4, #12]
 801b724:	bd10      	pop	{r4, pc}

0801b726 <__sclose>:
 801b726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b72a:	f000 b813 	b.w	801b754 <_close_r>
	...

0801b730 <_write_r>:
 801b730:	b538      	push	{r3, r4, r5, lr}
 801b732:	4d07      	ldr	r5, [pc, #28]	; (801b750 <_write_r+0x20>)
 801b734:	4604      	mov	r4, r0
 801b736:	4608      	mov	r0, r1
 801b738:	4611      	mov	r1, r2
 801b73a:	2200      	movs	r2, #0
 801b73c:	602a      	str	r2, [r5, #0]
 801b73e:	461a      	mov	r2, r3
 801b740:	f7e7 ff45 	bl	80035ce <_write>
 801b744:	1c43      	adds	r3, r0, #1
 801b746:	d102      	bne.n	801b74e <_write_r+0x1e>
 801b748:	682b      	ldr	r3, [r5, #0]
 801b74a:	b103      	cbz	r3, 801b74e <_write_r+0x1e>
 801b74c:	6023      	str	r3, [r4, #0]
 801b74e:	bd38      	pop	{r3, r4, r5, pc}
 801b750:	20003824 	.word	0x20003824

0801b754 <_close_r>:
 801b754:	b538      	push	{r3, r4, r5, lr}
 801b756:	4d06      	ldr	r5, [pc, #24]	; (801b770 <_close_r+0x1c>)
 801b758:	2300      	movs	r3, #0
 801b75a:	4604      	mov	r4, r0
 801b75c:	4608      	mov	r0, r1
 801b75e:	602b      	str	r3, [r5, #0]
 801b760:	f7e7 ff51 	bl	8003606 <_close>
 801b764:	1c43      	adds	r3, r0, #1
 801b766:	d102      	bne.n	801b76e <_close_r+0x1a>
 801b768:	682b      	ldr	r3, [r5, #0]
 801b76a:	b103      	cbz	r3, 801b76e <_close_r+0x1a>
 801b76c:	6023      	str	r3, [r4, #0]
 801b76e:	bd38      	pop	{r3, r4, r5, pc}
 801b770:	20003824 	.word	0x20003824

0801b774 <_fstat_r>:
 801b774:	b538      	push	{r3, r4, r5, lr}
 801b776:	4d07      	ldr	r5, [pc, #28]	; (801b794 <_fstat_r+0x20>)
 801b778:	2300      	movs	r3, #0
 801b77a:	4604      	mov	r4, r0
 801b77c:	4608      	mov	r0, r1
 801b77e:	4611      	mov	r1, r2
 801b780:	602b      	str	r3, [r5, #0]
 801b782:	f7e7 ff4c 	bl	800361e <_fstat>
 801b786:	1c43      	adds	r3, r0, #1
 801b788:	d102      	bne.n	801b790 <_fstat_r+0x1c>
 801b78a:	682b      	ldr	r3, [r5, #0]
 801b78c:	b103      	cbz	r3, 801b790 <_fstat_r+0x1c>
 801b78e:	6023      	str	r3, [r4, #0]
 801b790:	bd38      	pop	{r3, r4, r5, pc}
 801b792:	bf00      	nop
 801b794:	20003824 	.word	0x20003824

0801b798 <_isatty_r>:
 801b798:	b538      	push	{r3, r4, r5, lr}
 801b79a:	4d06      	ldr	r5, [pc, #24]	; (801b7b4 <_isatty_r+0x1c>)
 801b79c:	2300      	movs	r3, #0
 801b79e:	4604      	mov	r4, r0
 801b7a0:	4608      	mov	r0, r1
 801b7a2:	602b      	str	r3, [r5, #0]
 801b7a4:	f7e7 ff4b 	bl	800363e <_isatty>
 801b7a8:	1c43      	adds	r3, r0, #1
 801b7aa:	d102      	bne.n	801b7b2 <_isatty_r+0x1a>
 801b7ac:	682b      	ldr	r3, [r5, #0]
 801b7ae:	b103      	cbz	r3, 801b7b2 <_isatty_r+0x1a>
 801b7b0:	6023      	str	r3, [r4, #0]
 801b7b2:	bd38      	pop	{r3, r4, r5, pc}
 801b7b4:	20003824 	.word	0x20003824

0801b7b8 <_lseek_r>:
 801b7b8:	b538      	push	{r3, r4, r5, lr}
 801b7ba:	4d07      	ldr	r5, [pc, #28]	; (801b7d8 <_lseek_r+0x20>)
 801b7bc:	4604      	mov	r4, r0
 801b7be:	4608      	mov	r0, r1
 801b7c0:	4611      	mov	r1, r2
 801b7c2:	2200      	movs	r2, #0
 801b7c4:	602a      	str	r2, [r5, #0]
 801b7c6:	461a      	mov	r2, r3
 801b7c8:	f7e7 ff44 	bl	8003654 <_lseek>
 801b7cc:	1c43      	adds	r3, r0, #1
 801b7ce:	d102      	bne.n	801b7d6 <_lseek_r+0x1e>
 801b7d0:	682b      	ldr	r3, [r5, #0]
 801b7d2:	b103      	cbz	r3, 801b7d6 <_lseek_r+0x1e>
 801b7d4:	6023      	str	r3, [r4, #0]
 801b7d6:	bd38      	pop	{r3, r4, r5, pc}
 801b7d8:	20003824 	.word	0x20003824

0801b7dc <memmove>:
 801b7dc:	4288      	cmp	r0, r1
 801b7de:	b510      	push	{r4, lr}
 801b7e0:	eb01 0402 	add.w	r4, r1, r2
 801b7e4:	d902      	bls.n	801b7ec <memmove+0x10>
 801b7e6:	4284      	cmp	r4, r0
 801b7e8:	4623      	mov	r3, r4
 801b7ea:	d807      	bhi.n	801b7fc <memmove+0x20>
 801b7ec:	1e43      	subs	r3, r0, #1
 801b7ee:	42a1      	cmp	r1, r4
 801b7f0:	d008      	beq.n	801b804 <memmove+0x28>
 801b7f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b7f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b7fa:	e7f8      	b.n	801b7ee <memmove+0x12>
 801b7fc:	4402      	add	r2, r0
 801b7fe:	4601      	mov	r1, r0
 801b800:	428a      	cmp	r2, r1
 801b802:	d100      	bne.n	801b806 <memmove+0x2a>
 801b804:	bd10      	pop	{r4, pc}
 801b806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b80a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b80e:	e7f7      	b.n	801b800 <memmove+0x24>

0801b810 <_realloc_r>:
 801b810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b814:	4680      	mov	r8, r0
 801b816:	4614      	mov	r4, r2
 801b818:	460e      	mov	r6, r1
 801b81a:	b921      	cbnz	r1, 801b826 <_realloc_r+0x16>
 801b81c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b820:	4611      	mov	r1, r2
 801b822:	f7fe bed1 	b.w	801a5c8 <_malloc_r>
 801b826:	b92a      	cbnz	r2, 801b834 <_realloc_r+0x24>
 801b828:	f7fe fe62 	bl	801a4f0 <_free_r>
 801b82c:	4625      	mov	r5, r4
 801b82e:	4628      	mov	r0, r5
 801b830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b834:	f000 f82e 	bl	801b894 <_malloc_usable_size_r>
 801b838:	4284      	cmp	r4, r0
 801b83a:	4607      	mov	r7, r0
 801b83c:	d802      	bhi.n	801b844 <_realloc_r+0x34>
 801b83e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b842:	d812      	bhi.n	801b86a <_realloc_r+0x5a>
 801b844:	4621      	mov	r1, r4
 801b846:	4640      	mov	r0, r8
 801b848:	f7fe febe 	bl	801a5c8 <_malloc_r>
 801b84c:	4605      	mov	r5, r0
 801b84e:	2800      	cmp	r0, #0
 801b850:	d0ed      	beq.n	801b82e <_realloc_r+0x1e>
 801b852:	42bc      	cmp	r4, r7
 801b854:	4622      	mov	r2, r4
 801b856:	4631      	mov	r1, r6
 801b858:	bf28      	it	cs
 801b85a:	463a      	movcs	r2, r7
 801b85c:	f7fe fe32 	bl	801a4c4 <memcpy>
 801b860:	4631      	mov	r1, r6
 801b862:	4640      	mov	r0, r8
 801b864:	f7fe fe44 	bl	801a4f0 <_free_r>
 801b868:	e7e1      	b.n	801b82e <_realloc_r+0x1e>
 801b86a:	4635      	mov	r5, r6
 801b86c:	e7df      	b.n	801b82e <_realloc_r+0x1e>
	...

0801b870 <_read_r>:
 801b870:	b538      	push	{r3, r4, r5, lr}
 801b872:	4d07      	ldr	r5, [pc, #28]	; (801b890 <_read_r+0x20>)
 801b874:	4604      	mov	r4, r0
 801b876:	4608      	mov	r0, r1
 801b878:	4611      	mov	r1, r2
 801b87a:	2200      	movs	r2, #0
 801b87c:	602a      	str	r2, [r5, #0]
 801b87e:	461a      	mov	r2, r3
 801b880:	f7e7 fe88 	bl	8003594 <_read>
 801b884:	1c43      	adds	r3, r0, #1
 801b886:	d102      	bne.n	801b88e <_read_r+0x1e>
 801b888:	682b      	ldr	r3, [r5, #0]
 801b88a:	b103      	cbz	r3, 801b88e <_read_r+0x1e>
 801b88c:	6023      	str	r3, [r4, #0]
 801b88e:	bd38      	pop	{r3, r4, r5, pc}
 801b890:	20003824 	.word	0x20003824

0801b894 <_malloc_usable_size_r>:
 801b894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b898:	1f18      	subs	r0, r3, #4
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	bfbc      	itt	lt
 801b89e:	580b      	ldrlt	r3, [r1, r0]
 801b8a0:	18c0      	addlt	r0, r0, r3
 801b8a2:	4770      	bx	lr

0801b8a4 <_init>:
 801b8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8a6:	bf00      	nop
 801b8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b8aa:	bc08      	pop	{r3}
 801b8ac:	469e      	mov	lr, r3
 801b8ae:	4770      	bx	lr

0801b8b0 <_fini>:
 801b8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8b2:	bf00      	nop
 801b8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b8b6:	bc08      	pop	{r3}
 801b8b8:	469e      	mov	lr, r3
 801b8ba:	4770      	bx	lr
