
AccioRange_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019c54  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002158  08019e04  08019e04  00029e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bf5c  0801bf5c  00030744  2**0
                  CONTENTS
  4 .ARM          00000008  0801bf5c  0801bf5c  0002bf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bf64  0801bf64  00030744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bf64  0801bf64  0002bf64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bf68  0801bf68  0002bf68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000744  20000000  0801bf6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026e8  20000744  0801c6b0  00030744  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e2c  0801c6b0  00032e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030744  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004628f  00000000  00000000  00030774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008b79  00000000  00000000  00076a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000038f8  00000000  00000000  0007f580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003548  00000000  00000000  00082e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003af4b  00000000  00000000  000863c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046dc8  00000000  00000000  000c130b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013fe40  00000000  00000000  001080d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00247f13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fa0c  00000000  00000000  00247f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000744 	.word	0x20000744
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08019dec 	.word	0x08019dec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000748 	.word	0x20000748
 80001ec:	08019dec 	.word	0x08019dec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005b8:	4a2f      	ldr	r2, [pc, #188]	; (8000678 <MX_ADC1_Init+0xe4>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005c4:	2208      	movs	r2, #8
 80005c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_ADC1_Init+0xe0>)
 800060a:	2200      	movs	r2, #0
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000616:	4817      	ldr	r0, [pc, #92]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000618:	f00b f822 	bl	800b660 <HAL_ADC_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000622:	f001 fcdb 	bl	8001fdc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000632:	f00b fda1 	bl	800c178 <HAL_ADCEx_MultiModeConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800063c:	f001 fcce 	bl	8001fdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_ADC1_Init+0xe8>)
 8000642:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000644:	2306      	movs	r3, #6
 8000646:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800064c:	237f      	movs	r3, #127	; 0x7f
 800064e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000650:	2304      	movs	r3, #4
 8000652:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0xe0>)
 800065e:	f00b f959 	bl	800b914 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000668:	f001 fcb8 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3728      	adds	r7, #40	; 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000760 	.word	0x20000760
 8000678:	50040000 	.word	0x50040000
 800067c:	36902000 	.word	0x36902000

08000680 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	463b      	mov	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_ADC2_Init+0xbc>)
 8000698:	4a29      	ldr	r2, [pc, #164]	; (8000740 <MX_ADC2_Init+0xc0>)
 800069a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <MX_ADC2_Init+0xbc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_ADC2_Init+0xbc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <MX_ADC2_Init+0xbc>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_ADC2_Init+0xbc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_ADC2_Init+0xbc>)
 80006b6:	2204      	movs	r2, #4
 80006b8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_ADC2_Init+0xbc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_ADC2_Init+0xbc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC2_Init+0xbc>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_ADC2_Init+0xbc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_ADC2_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_ADC2_Init+0xbc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_ADC2_Init+0xbc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_ADC2_Init+0xbc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_ADC2_Init+0xbc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006f6:	4811      	ldr	r0, [pc, #68]	; (800073c <MX_ADC2_Init+0xbc>)
 80006f8:	f00a ffb2 	bl	800b660 <HAL_ADC_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000702:	f001 fc6b 	bl	8001fdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_ADC2_Init+0xc4>)
 8000708:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070a:	2306      	movs	r3, #6
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000712:	237f      	movs	r3, #127	; 0x7f
 8000714:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000716:	2304      	movs	r3, #4
 8000718:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_ADC2_Init+0xbc>)
 8000724:	f00b f8f6 	bl	800b914 <HAL_ADC_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800072e:	f001 fc55 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200007c8 	.word	0x200007c8
 8000740:	50040100 	.word	0x50040100
 8000744:	25b00200 	.word	0x25b00200

08000748 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000760:	4a29      	ldr	r2, [pc, #164]	; (8000808 <MX_ADC3_Init+0xc0>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_ADC3_Init+0xbc>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_ADC3_Init+0xbc>)
 800077e:	2204      	movs	r2, #4
 8000780:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_ADC3_Init+0xbc>)
 800078a:	2200      	movs	r2, #0
 800078c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000790:	2201      	movs	r2, #1
 8000792:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_ADC3_Init+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007be:	4811      	ldr	r0, [pc, #68]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007c0:	f00a ff4e 	bl	800b660 <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80007ca:	f001 fc07 	bl	8001fdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_ADC3_Init+0xc4>)
 80007d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d2:	2306      	movs	r3, #6
 80007d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007da:	237f      	movs	r3, #127	; 0x7f
 80007dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007de:	2304      	movs	r3, #4
 80007e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007ec:	f00b f892 	bl	800b914 <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80007f6:	f001 fbf1 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000830 	.word	0x20000830
 8000808:	50040200 	.word	0x50040200
 800080c:	36902000 	.word	0x36902000

08000810 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08e      	sub	sp, #56	; 0x38
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a59      	ldr	r2, [pc, #356]	; (8000994 <HAL_ADC_MspInit+0x184>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d12d      	bne.n	800088e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000832:	4b59      	ldr	r3, [pc, #356]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	4a57      	ldr	r2, [pc, #348]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800083a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800083c:	4b56      	ldr	r3, [pc, #344]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10b      	bne.n	800085c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000844:	4b55      	ldr	r3, [pc, #340]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000848:	4a54      	ldr	r2, [pc, #336]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800084a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800084e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000850:	4b52      	ldr	r3, [pc, #328]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000858:	623b      	str	r3, [r7, #32]
 800085a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	4b4f      	ldr	r3, [pc, #316]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000860:	4a4e      	ldr	r2, [pc, #312]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000868:	4b4c      	ldr	r3, [pc, #304]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8000874:	2318      	movs	r3, #24
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000878:	230b      	movs	r3, #11
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	4619      	mov	r1, r3
 8000886:	4846      	ldr	r0, [pc, #280]	; (80009a0 <HAL_ADC_MspInit+0x190>)
 8000888:	f00b fffc 	bl	800c884 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800088c:	e07e      	b.n	800098c <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC2)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a44      	ldr	r2, [pc, #272]	; (80009a4 <HAL_ADC_MspInit+0x194>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d146      	bne.n	8000926 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000898:	4b3f      	ldr	r3, [pc, #252]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a3e      	ldr	r2, [pc, #248]	; (8000998 <HAL_ADC_MspInit+0x188>)
 80008a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80008a2:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <HAL_ADC_MspInit+0x188>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d10b      	bne.n	80008c2 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80008aa:	4b3c      	ldr	r3, [pc, #240]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a3b      	ldr	r2, [pc, #236]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b39      	ldr	r3, [pc, #228]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b36      	ldr	r3, [pc, #216]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a35      	ldr	r2, [pc, #212]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 80008f2:	2303      	movs	r3, #3
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008f6:	230b      	movs	r3, #11
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	4826      	ldr	r0, [pc, #152]	; (80009a0 <HAL_ADC_MspInit+0x190>)
 8000906:	f00b ffbd 	bl	800c884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 800090a:	2312      	movs	r3, #18
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800090e:	230b      	movs	r3, #11
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f00b ffb0 	bl	800c884 <HAL_GPIO_Init>
}
 8000924:	e032      	b.n	800098c <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC3)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <HAL_ADC_MspInit+0x198>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d12d      	bne.n	800098c <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a18      	ldr	r2, [pc, #96]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000938:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d10b      	bne.n	800095a <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000948:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000960:	f043 0320 	orr.w	r3, r3, #32
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000978:	230b      	movs	r3, #11
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4809      	ldr	r0, [pc, #36]	; (80009ac <HAL_ADC_MspInit+0x19c>)
 8000988:	f00b ff7c 	bl	800c884 <HAL_GPIO_Init>
}
 800098c:	bf00      	nop
 800098e:	3738      	adds	r7, #56	; 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	50040000 	.word	0x50040000
 8000998:	20000898 	.word	0x20000898
 800099c:	40021000 	.word	0x40021000
 80009a0:	48000800 	.word	0x48000800
 80009a4:	50040100 	.word	0x50040100
 80009a8:	50040200 	.word	0x50040200
 80009ac:	48001400 	.word	0x48001400

080009b0 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009b6:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <MX_DCMI_Init+0x64>)
 80009b8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009fe:	f00b fdaf 	bl	800c560 <HAL_DCMI_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f001 fae8 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000089c 	.word	0x2000089c
 8000a14:	50050000 	.word	0x50050000

08000a18 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a33      	ldr	r2, [pc, #204]	; (8000b04 <HAL_DCMI_MspInit+0xec>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d160      	bne.n	8000afc <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000a3a:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a32      	ldr	r2, [pc, #200]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a52:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a2c      	ldr	r2, [pc, #176]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 8000a9a:	f645 7320 	movw	r3, #24352	; 0x5f20
 8000a9e:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000aac:	230a      	movs	r3, #10
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4815      	ldr	r0, [pc, #84]	; (8000b0c <HAL_DCMI_MspInit+0xf4>)
 8000ab8:	f00b fee4 	bl	800c884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000abc:	23b0      	movs	r3, #176	; 0xb0
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000acc:	230a      	movs	r3, #10
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480e      	ldr	r0, [pc, #56]	; (8000b10 <HAL_DCMI_MspInit+0xf8>)
 8000ad8:	f00b fed4 	bl	800c884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8000adc:	2320      	movs	r3, #32
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000aec:	230a      	movs	r3, #10
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4807      	ldr	r0, [pc, #28]	; (8000b14 <HAL_DCMI_MspInit+0xfc>)
 8000af8:	f00b fec4 	bl	800c884 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	; 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	50050000 	.word	0x50050000
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	48001c00 	.word	0x48001c00
 8000b10:	48002000 	.word	0x48002000
 8000b14:	48001000 	.word	0x48001000

08000b18 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b1c:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b1e:	4a31      	ldr	r2, [pc, #196]	; (8000be4 <MX_DFSDM1_Init+0xcc>)
 8000b20:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b34:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b3a:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b6a:	481d      	ldr	r0, [pc, #116]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b6c:	f00b fd7e 	bl	800c66c <HAL_DFSDM_ChannelInit>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000b76:	f001 fa31 	bl	8001fdc <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <MX_DFSDM1_Init+0xd4>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b8e:	2202      	movs	r2, #2
 8000b90:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000bca:	4807      	ldr	r0, [pc, #28]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bcc:	f00b fd4e 	bl	800c66c <HAL_DFSDM_ChannelInit>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000bd6:	f001 fa01 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000900 	.word	0x20000900
 8000be4:	40016020 	.word	0x40016020
 8000be8:	20000938 	.word	0x20000938
 8000bec:	40016040 	.word	0x40016040

08000bf0 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0ae      	sub	sp, #184	; 0xb8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	f107 0318 	add.w	r3, r7, #24
 8000c0c:	228c      	movs	r2, #140	; 0x8c
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f018 f8d7 	bl	8018dc4 <memset>
  if(DFSDM1_Init == 0)
 8000c16:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d163      	bne.n	8000ce6 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00f fc4e 	bl	80104d0 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000c3a:	f001 f9cf 	bl	8001fdc <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	4a2c      	ldr	r2, [pc, #176]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c48:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a26      	ldr	r2, [pc, #152]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	4a20      	ldr	r2, [pc, #128]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8000c86:	2384      	movs	r3, #132	; 0x84
 8000c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000cac:	f00b fdea 	bl	800c884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000cca:	2306      	movs	r3, #6
 8000ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_DFSDM_ChannelMspInit+0x10c>)
 8000cd8:	f00b fdd4 	bl	800c884 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000ce4:	6013      	str	r3, [r2, #0]
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	37b8      	adds	r7, #184	; 0xb8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000970 	.word	0x20000970
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	48000400 	.word	0x48000400

08000d00 <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SRAM_HandleTypeDef hsram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2220      	movs	r2, #32
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f018 f859 	bl	8018dc4 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000d12:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d14:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000d18:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000d1a:	4b4d      	ldr	r3, [pc, #308]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d1c:	4a4d      	ldr	r2, [pc, #308]	; (8000e54 <MX_FMC_Init+0x154>)
 8000d1e:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8000d20:	4b4b      	ldr	r3, [pc, #300]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d22:	2202      	movs	r2, #2
 8000d24:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000d26:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000d2c:	4b48      	ldr	r3, [pc, #288]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d32:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d34:	2210      	movs	r2, #16
 8000d36:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000d38:	4b45      	ldr	r3, [pc, #276]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d3e:	4b44      	ldr	r3, [pc, #272]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000d44:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000d4a:	4b41      	ldr	r3, [pc, #260]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000d50:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000d56:	4b3e      	ldr	r3, [pc, #248]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d5c:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000d62:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000d68:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000d6e:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000d7e:	230f      	movs	r3, #15
 8000d80:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000d82:	23ff      	movs	r3, #255	; 0xff
 8000d84:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000d86:	230f      	movs	r3, #15
 8000d88:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000d8e:	2311      	movs	r3, #17
 8000d90:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	482c      	ldr	r0, [pc, #176]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d9e:	f011 ff6c 	bl	8012c7a <HAL_SRAM_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8000da8:	f001 f918 	bl	8001fdc <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dae:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000db2:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000db4:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <MX_FMC_Init+0x158>)
 8000db6:	4a27      	ldr	r2, [pc, #156]	; (8000e54 <MX_FMC_Init+0x154>)
 8000db8:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8000dba:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dce:	2210      	movs	r2, #16
 8000dd0:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_FMC_Init+0x158>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_FMC_Init+0x158>)
 8000de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_FMC_Init+0x158>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000e16:	230f      	movs	r3, #15
 8000e18:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000e1e:	23ff      	movs	r3, #255	; 0xff
 8000e20:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000e22:	230f      	movs	r3, #15
 8000e24:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000e26:	2310      	movs	r3, #16
 8000e28:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000e2a:	2311      	movs	r3, #17
 8000e2c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e3a:	f011 ff1e 	bl	8012c7a <HAL_SRAM_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8000e44:	f001 f8ca 	bl	8001fdc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000974 	.word	0x20000974
 8000e54:	a0000104 	.word	0xa0000104
 8000e58:	200009c4 	.word	0x200009c4

08000e5c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <HAL_FMC_MspInit+0xc4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d14f      	bne.n	8000f18 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <HAL_FMC_MspInit+0xc4>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e82:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6513      	str	r3, [r2, #80]	; 0x50
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8000e96:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e9a:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481d      	ldr	r0, [pc, #116]	; (8000f28 <HAL_FMC_MspInit+0xcc>)
 8000eb2:	f00b fce7 	bl	800c884 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8000eb6:	f240 233f 	movw	r3, #575	; 0x23f
 8000eba:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec8:	230c      	movs	r3, #12
 8000eca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4816      	ldr	r0, [pc, #88]	; (8000f2c <HAL_FMC_MspInit+0xd0>)
 8000ed2:	f00b fcd7 	bl	800c884 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8000ed6:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8000eda:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ee8:	230c      	movs	r3, #12
 8000eea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480f      	ldr	r0, [pc, #60]	; (8000f30 <HAL_FMC_MspInit+0xd4>)
 8000ef2:	f00b fcc7 	bl	800c884 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8000ef6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000efa:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f08:	230c      	movs	r3, #12
 8000f0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <HAL_FMC_MspInit+0xd8>)
 8000f12:	f00b fcb7 	bl	800c884 <HAL_GPIO_Init>
 8000f16:	e000      	b.n	8000f1a <HAL_FMC_MspInit+0xbe>
    return;
 8000f18:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000a14 	.word	0x20000a14
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48001000 	.word	0x48001000
 8000f2c:	48001800 	.word	0x48001800
 8000f30:	48000c00 	.word	0x48000c00
 8000f34:	48001400 	.word	0x48001400

08000f38 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f40:	f7ff ff8c 	bl	8000e5c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <MX_GPIO_Init>:
     PH13   ------> TIM8_CH1N
     PB9   ------> S_TIM4_CH4
     PA8   ------> LPTIM2_OUT
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f62:	4bb4      	ldr	r3, [pc, #720]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4ab3      	ldr	r2, [pc, #716]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4bb1      	ldr	r3, [pc, #708]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f76:	623b      	str	r3, [r7, #32]
 8000f78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	4bae      	ldr	r3, [pc, #696]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4aad      	ldr	r2, [pc, #692]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4bab      	ldr	r3, [pc, #684]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f92:	4ba8      	ldr	r3, [pc, #672]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4aa7      	ldr	r2, [pc, #668]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f98:	f043 0310 	orr.w	r3, r3, #16
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4ba5      	ldr	r3, [pc, #660]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4ba2      	ldr	r3, [pc, #648]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4aa1      	ldr	r2, [pc, #644]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b9f      	ldr	r3, [pc, #636]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b9c      	ldr	r3, [pc, #624]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a9b      	ldr	r2, [pc, #620]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b99      	ldr	r3, [pc, #612]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fda:	4b96      	ldr	r3, [pc, #600]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a95      	ldr	r2, [pc, #596]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b93      	ldr	r3, [pc, #588]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000ff2:	f00e fb15 	bl	800f620 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	4b8f      	ldr	r3, [pc, #572]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a8e      	ldr	r2, [pc, #568]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b8c      	ldr	r3, [pc, #560]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b89      	ldr	r3, [pc, #548]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a88      	ldr	r2, [pc, #544]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b86      	ldr	r3, [pc, #536]	; (8001234 <MX_GPIO_Init+0x2e8>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	4b83      	ldr	r3, [pc, #524]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a82      	ldr	r2, [pc, #520]	; (8001234 <MX_GPIO_Init+0x2e8>)
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b80      	ldr	r3, [pc, #512]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0320 	and.w	r3, r3, #32
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LCD_BL_Pin|ARD_D4_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f640 0101 	movw	r1, #2049	; 0x801
 8001044:	487c      	ldr	r0, [pc, #496]	; (8001238 <MX_GPIO_Init+0x2ec>)
 8001046:	f00b fea1 	bl	800cd8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2143      	movs	r1, #67	; 0x43
 800104e:	487b      	ldr	r0, [pc, #492]	; (800123c <MX_GPIO_Init+0x2f0>)
 8001050:	f00b fe9c 	bl	800cd8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2140      	movs	r1, #64	; 0x40
 8001058:	4879      	ldr	r0, [pc, #484]	; (8001240 <MX_GPIO_Init+0x2f4>)
 800105a:	f00b fe97 	bl	800cd8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARD_D2_Pin|ARD_D7_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8001064:	4877      	ldr	r0, [pc, #476]	; (8001244 <MX_GPIO_Init+0x2f8>)
 8001066:	f00b fe91 	bl	800cd8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001070:	4875      	ldr	r0, [pc, #468]	; (8001248 <MX_GPIO_Init+0x2fc>)
 8001072:	f00b fe8b 	bl	800cd8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 8001076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001082:	2302      	movs	r3, #2
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	4619      	mov	r1, r3
 800108c:	486a      	ldr	r0, [pc, #424]	; (8001238 <MX_GPIO_Init+0x2ec>)
 800108e:	f00b fbf9 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8001092:	2304      	movs	r3, #4
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001096:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	4619      	mov	r1, r3
 80010a6:	4865      	ldr	r0, [pc, #404]	; (800123c <MX_GPIO_Init+0x2f0>)
 80010a8:	f00b fbec 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|ARD_D4_Pin;
 80010ac:	f640 0301 	movw	r3, #2049	; 0x801
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c2:	4619      	mov	r1, r3
 80010c4:	485c      	ldr	r0, [pc, #368]	; (8001238 <MX_GPIO_Init+0x2ec>)
 80010c6:	f00b fbdd 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin;
 80010ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010d0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010d6:	2302      	movs	r3, #2
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_LEFT_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	4619      	mov	r1, r3
 80010e0:	4855      	ldr	r0, [pc, #340]	; (8001238 <MX_GPIO_Init+0x2ec>)
 80010e2:	f00b fbcf 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010e6:	2340      	movs	r3, #64	; 0x40
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80010f6:	2303      	movs	r3, #3
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	484d      	ldr	r0, [pc, #308]	; (8001238 <MX_GPIO_Init+0x2ec>)
 8001102:	f00b fbbf 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8001106:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001118:	2303      	movs	r3, #3
 800111a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001120:	4619      	mov	r1, r3
 8001122:	4846      	ldr	r0, [pc, #280]	; (800123c <MX_GPIO_Init+0x2f0>)
 8001124:	f00b fbae 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_UP_Pin;
 8001128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112e:	2300      	movs	r3, #0
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001132:	2302      	movs	r3, #2
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_UP_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	483e      	ldr	r0, [pc, #248]	; (8001238 <MX_GPIO_Init+0x2ec>)
 800113e:	f00b fba1 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001154:	2302      	movs	r3, #2
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	483a      	ldr	r0, [pc, #232]	; (8001248 <MX_GPIO_Init+0x2fc>)
 8001160:	f00b fb90 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	4619      	mov	r1, r3
 8001176:	4831      	ldr	r0, [pc, #196]	; (800123c <MX_GPIO_Init+0x2f0>)
 8001178:	f00b fb84 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 800117c:	2343      	movs	r3, #67	; 0x43
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800118c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001190:	4619      	mov	r1, r3
 8001192:	482a      	ldr	r0, [pc, #168]	; (800123c <MX_GPIO_Init+0x2f0>)
 8001194:	f00b fb76 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001198:	2340      	movs	r3, #64	; 0x40
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4824      	ldr	r0, [pc, #144]	; (8001240 <MX_GPIO_Init+0x2f4>)
 80011b0:	f00b fb68 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 80011b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	481e      	ldr	r0, [pc, #120]	; (8001244 <MX_GPIO_Init+0x2f8>)
 80011cc:	f00b fb5a 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARD_D2_Pin|ARD_D7_Pin;
 80011d0:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e6:	4619      	mov	r1, r3
 80011e8:	4816      	ldr	r0, [pc, #88]	; (8001244 <MX_GPIO_Init+0x2f8>)
 80011ea:	f00b fb4b 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 80011ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8001200:	230e      	movs	r3, #14
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f00b fb39 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001212:	2320      	movs	r3, #32
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001216:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_GPIO_Init+0x2f4>)
 8001228:	f00b fb2c 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 800122c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001230:	e00c      	b.n	800124c <MX_GPIO_Init+0x300>
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	48002000 	.word	0x48002000
 800123c:	48001c00 	.word	0x48001c00
 8001240:	48000800 	.word	0x48000800
 8001244:	48001800 	.word	0x48001800
 8001248:	48000400 	.word	0x48000400
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800124e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001254:	2302      	movs	r3, #2
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125c:	4619      	mov	r1, r3
 800125e:	4819      	ldr	r0, [pc, #100]	; (80012c4 <MX_GPIO_Init+0x378>)
 8001260:	f00b fb10 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8001264:	2304      	movs	r3, #4
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001274:	4619      	mov	r1, r3
 8001276:	4814      	ldr	r0, [pc, #80]	; (80012c8 <MX_GPIO_Init+0x37c>)
 8001278:	f00b fb04 	bl	800c884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800127c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001282:	2311      	movs	r3, #17
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001292:	4619      	mov	r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <MX_GPIO_Init+0x37c>)
 8001296:	f00b faf5 	bl	800c884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2017      	movs	r0, #23
 80012a0:	f00b f919 	bl	800c4d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012a4:	2017      	movs	r0, #23
 80012a6:	f00b f932 	bl	800c50e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2028      	movs	r0, #40	; 0x28
 80012b0:	f00b f911 	bl	800c4d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012b4:	2028      	movs	r0, #40	; 0x28
 80012b6:	f00b f92a 	bl	800c50e <HAL_NVIC_EnableIRQ>

}
 80012ba:	bf00      	nop
 80012bc:	3738      	adds	r7, #56	; 0x38
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	48001400 	.word	0x48001400
 80012c8:	48000400 	.word	0x48000400

080012cc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <MX_I2C1_Init+0x74>)
 80012d2:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <MX_I2C1_Init+0x78>)
 80012d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_I2C1_Init+0x74>)
 80012d8:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <MX_I2C1_Init+0x7c>)
 80012da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <MX_I2C1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_I2C1_Init+0x74>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_I2C1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_I2C1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_I2C1_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_I2C1_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_I2C1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001306:	480e      	ldr	r0, [pc, #56]	; (8001340 <MX_I2C1_Init+0x74>)
 8001308:	f00b fd70 	bl	800cdec <HAL_I2C_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001312:	f000 fe63 	bl	8001fdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001316:	2100      	movs	r1, #0
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <MX_I2C1_Init+0x74>)
 800131a:	f00c fe73 	bl	800e004 <HAL_I2CEx_ConfigAnalogFilter>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001324:	f000 fe5a 	bl	8001fdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001328:	2100      	movs	r1, #0
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_I2C1_Init+0x74>)
 800132c:	f00c feb5 	bl	800e09a <HAL_I2CEx_ConfigDigitalFilter>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001336:	f000 fe51 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000a18 	.word	0x20000a18
 8001344:	40005400 	.word	0x40005400
 8001348:	20303e5d 	.word	0x20303e5d

0800134c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <MX_I2C2_Init+0x74>)
 8001352:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <MX_I2C2_Init+0x78>)
 8001354:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <MX_I2C2_Init+0x74>)
 8001358:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <MX_I2C2_Init+0x7c>)
 800135a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <MX_I2C2_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <MX_I2C2_Init+0x74>)
 8001364:	2201      	movs	r2, #1
 8001366:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <MX_I2C2_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <MX_I2C2_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MX_I2C2_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_I2C2_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_I2C2_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001386:	480e      	ldr	r0, [pc, #56]	; (80013c0 <MX_I2C2_Init+0x74>)
 8001388:	f00b fd30 	bl	800cdec <HAL_I2C_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001392:	f000 fe23 	bl	8001fdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <MX_I2C2_Init+0x74>)
 800139a:	f00c fe33 	bl	800e004 <HAL_I2CEx_ConfigAnalogFilter>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013a4:	f000 fe1a 	bl	8001fdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013a8:	2100      	movs	r1, #0
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_I2C2_Init+0x74>)
 80013ac:	f00c fe75 	bl	800e09a <HAL_I2CEx_ConfigDigitalFilter>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f000 fe11 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000a6c 	.word	0x20000a6c
 80013c4:	40005800 	.word	0x40005800
 80013c8:	20303e5d 	.word	0x20303e5d

080013cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0b0      	sub	sp, #192	; 0xc0
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	228c      	movs	r2, #140	; 0x8c
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f017 fce9 	bl	8018dc4 <memset>
  if(i2cHandle->Instance==I2C1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a53      	ldr	r2, [pc, #332]	; (8001544 <HAL_I2C_MspInit+0x178>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d13c      	bne.n	8001476 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013fc:	2340      	movs	r3, #64	; 0x40
 80013fe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001400:	2300      	movs	r3, #0
 8001402:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	4618      	mov	r0, r3
 800140a:	f00f f861 	bl	80104d0 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001414:	f000 fde2 	bl	8001fdc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001418:	4b4b      	ldr	r3, [pc, #300]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 800141a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141c:	4a4a      	ldr	r2, [pc, #296]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 800141e:	f043 0302 	orr.w	r3, r3, #2
 8001422:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001424:	4b48      	ldr	r3, [pc, #288]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001430:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001434:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001438:	2312      	movs	r3, #18
 800143a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143e:	2301      	movs	r3, #1
 8001440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800144a:	2304      	movs	r3, #4
 800144c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001454:	4619      	mov	r1, r3
 8001456:	483d      	ldr	r0, [pc, #244]	; (800154c <HAL_I2C_MspInit+0x180>)
 8001458:	f00b fa14 	bl	800c884 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800145c:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 800145e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001460:	4a39      	ldr	r2, [pc, #228]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 8001462:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001466:	6593      	str	r3, [r2, #88]	; 0x58
 8001468:	4b37      	ldr	r3, [pc, #220]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 800146a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001474:	e061      	b.n	800153a <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a35      	ldr	r2, [pc, #212]	; (8001550 <HAL_I2C_MspInit+0x184>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d15c      	bne.n	800153a <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001484:	2300      	movs	r3, #0
 8001486:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	4618      	mov	r0, r3
 800148e:	f00f f81f 	bl	80104d0 <HAL_RCCEx_PeriphCLKConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001498:	f000 fda0 	bl	8001fdc <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	4a29      	ldr	r2, [pc, #164]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 80014a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	4a23      	ldr	r2, [pc, #140]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 80014cc:	2310      	movs	r3, #16
 80014ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d2:	2312      	movs	r3, #18
 80014d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d8:	2301      	movs	r3, #1
 80014da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014e4:	2304      	movs	r3, #4
 80014e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014ee:	4619      	mov	r1, r3
 80014f0:	4818      	ldr	r0, [pc, #96]	; (8001554 <HAL_I2C_MspInit+0x188>)
 80014f2:	f00b f9c7 	bl	800c884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 80014f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001504:	2301      	movs	r3, #1
 8001506:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001510:	2304      	movs	r3, #4
 8001512:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800151a:	4619      	mov	r1, r3
 800151c:	480b      	ldr	r0, [pc, #44]	; (800154c <HAL_I2C_MspInit+0x180>)
 800151e:	f00b f9b1 	bl	800c884 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 8001528:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800152c:	6593      	str	r3, [r2, #88]	; 0x58
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
}
 800153a:	bf00      	nop
 800153c:	37c0      	adds	r7, #192	; 0xc0
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40005400 	.word	0x40005400
 8001548:	40021000 	.word	0x40021000
 800154c:	48000400 	.word	0x48000400
 8001550:	40005800 	.word	0x40005800
 8001554:	48001c00 	.word	0x48001c00

08001558 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a15      	ldr	r2, [pc, #84]	; (80015bc <HAL_I2C_MspDeInit+0x64>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d10f      	bne.n	800158a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_I2C_MspDeInit+0x68>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <HAL_I2C_MspDeInit+0x68>)
 8001570:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001574:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157a:	4812      	ldr	r0, [pc, #72]	; (80015c4 <HAL_I2C_MspDeInit+0x6c>)
 800157c:	f00b fb14 	bl	800cba8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	4810      	ldr	r0, [pc, #64]	; (80015c4 <HAL_I2C_MspDeInit+0x6c>)
 8001584:	f00b fb10 	bl	800cba8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001588:	e013      	b.n	80015b2 <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_I2C_MspDeInit+0x70>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d10e      	bne.n	80015b2 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_I2C_MspDeInit+0x68>)
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_I2C_MspDeInit+0x68>)
 800159a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800159e:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin);
 80015a0:	2110      	movs	r1, #16
 80015a2:	480a      	ldr	r0, [pc, #40]	; (80015cc <HAL_I2C_MspDeInit+0x74>)
 80015a4:	f00b fb00 	bl	800cba8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin);
 80015a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <HAL_I2C_MspDeInit+0x6c>)
 80015ae:	f00b fafb 	bl	800cba8 <HAL_GPIO_DeInit>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40005400 	.word	0x40005400
 80015c0:	40021000 	.word	0x40021000
 80015c4:	48000400 	.word	0x48000400
 80015c8:	40005800 	.word	0x40005800
 80015cc:	48001c00 	.word	0x48001c00

080015d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b097      	sub	sp, #92	; 0x5c
 80015d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d6:	f009 fdeb 	bl	800b1b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015da:	f000 fa63 	bl	8001aa4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015de:	f000 fac3 	bl	8001b68 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e2:	f7ff fcb3 	bl	8000f4c <MX_GPIO_Init>
  MX_ADC1_Init();
 80015e6:	f7fe ffd5 	bl	8000594 <MX_ADC1_Init>
  MX_ADC2_Init();
 80015ea:	f7ff f849 	bl	8000680 <MX_ADC2_Init>
  MX_ADC3_Init();
 80015ee:	f7ff f8ab 	bl	8000748 <MX_ADC3_Init>
  MX_DCMI_Init();
 80015f2:	f7ff f9dd 	bl	80009b0 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 80015f6:	f7ff fa8f 	bl	8000b18 <MX_DFSDM1_Init>
  MX_FMC_Init();
 80015fa:	f7ff fb81 	bl	8000d00 <MX_FMC_Init>
  MX_I2C1_Init();
 80015fe:	f7ff fe65 	bl	80012cc <MX_I2C1_Init>
  MX_I2C2_Init();
 8001602:	f7ff fea3 	bl	800134c <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8001606:	f001 f9d9 	bl	80029bc <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800160a:	f001 fa05 	bl	8002a18 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800160e:	f001 fa33 	bl	8002a78 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8001612:	f000 fce9 	bl	8001fe8 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001616:	f000 fd75 	bl	8002104 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 800161a:	f000 fe95 	bl	8002348 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800161e:	f000 ff25 	bl	800246c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001622:	f000 ff61 	bl	80024e8 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8001626:	f016 fd8b 	bl	8018140 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 800162a:	f001 f971 	bl	8002910 <MX_TIM6_Init>
  // above: MX_SDMMC1_SD_Init(); has to be commented out to not be called



  /* LCD Init */
	if (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE) == LCD_ERROR)
 800162e:	2001      	movs	r0, #1
 8001630:	f008 fdae 	bl	800a190 <BSP_LCD_InitEx>
 8001634:	4603      	mov	r3, r0
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <main+0x6e>
	{
		/* Initialization Error */
		Error_Handler();
 800163a:	f000 fccf 	bl	8001fdc <Error_Handler>
	//BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Accio Range", CENTER_MODE);



	// touchscreen init
	if(BSP_TS_InitEx(BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), LCD_ORIENTATION_LANDSCAPE) != TS_OK) {
 800163e:	f008 fe4d 	bl	800a2dc <BSP_LCD_GetXSize>
 8001642:	4603      	mov	r3, r0
 8001644:	b29c      	uxth	r4, r3
 8001646:	f008 fe55 	bl	800a2f4 <BSP_LCD_GetYSize>
 800164a:	4603      	mov	r3, r0
 800164c:	b29b      	uxth	r3, r3
 800164e:	2201      	movs	r2, #1
 8001650:	4619      	mov	r1, r3
 8001652:	4620      	mov	r0, r4
 8001654:	f009 fb8e 	bl	800ad74 <BSP_TS_InitEx>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <main+0x92>
		Error_Handler();
 800165e:	f000 fcbd 	bl	8001fdc <Error_Handler>
	}


	// LED GPIO
	BSP_LED_Init(LED2_PIN); // LD1
 8001662:	2000      	movs	r0, #0
 8001664:	f007 ff3e 	bl	80094e4 <BSP_LED_Init>
	BSP_LED_On(LED2_PIN); // LD1 orange turns on
 8001668:	2000      	movs	r0, #0
 800166a:	f007 ff89 	bl	8009580 <BSP_LED_On>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET); // LD2 green turns on
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001674:	4895      	ldr	r0, [pc, #596]	; (80018cc <main+0x2fc>)
 8001676:	f00b fb89 	bl	800cd8c <HAL_GPIO_WritePin>
	// LD3 is attached to ARD_D13, which is not an output, it's attached to SPI
	HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET); // laser
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001680:	4893      	ldr	r0, [pc, #588]	; (80018d0 <main+0x300>)
 8001682:	f00b fb83 	bl	800cd8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET); // test point: timer frequency
 8001686:	2200      	movs	r2, #0
 8001688:	2140      	movs	r1, #64	; 0x40
 800168a:	4892      	ldr	r0, [pc, #584]	; (80018d4 <main+0x304>)
 800168c:	f00b fb7e 	bl	800cd8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET); // turn on BT pwr transistor
 8001690:	2201      	movs	r2, #1
 8001692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001696:	488f      	ldr	r0, [pc, #572]	; (80018d4 <main+0x304>)
 8001698:	f00b fb78 	bl	800cd8c <HAL_GPIO_WritePin>


	// Start timer
	HAL_TIM_Base_Start_IT(&htim6);
 800169c:	488e      	ldr	r0, [pc, #568]	; (80018d8 <main+0x308>)
 800169e:	f011 fb8b 	bl	8012db8 <HAL_TIM_Base_Start_IT>
	//ResetAndDetectSensor(1); // EK TODO: the parameter SetDisplay doesn't matter

	// EK test1
	HAL_StatusTypeDef status;
	uint8_t pData;
	status = HAL_I2C_Mem_Read(&hi2c1, 0x52, 0xC0, 1, &pData, 1, HAL_TIMEOUT);
 80016a2:	2303      	movs	r3, #3
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	2301      	movs	r3, #1
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	22c0      	movs	r2, #192	; 0xc0
 80016b4:	2152      	movs	r1, #82	; 0x52
 80016b6:	4889      	ldr	r0, [pc, #548]	; (80018dc <main+0x30c>)
 80016b8:	f00b ff54 	bl	800d564 <HAL_I2C_Mem_Read>
 80016bc:	4603      	mov	r3, r0
 80016be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	// pData should be 0xEE
	if(status == HAL_OK) {
 80016c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <main+0x100>
		printf("good");
 80016ca:	4885      	ldr	r0, [pc, #532]	; (80018e0 <main+0x310>)
 80016cc:	f017 fc62 	bl	8018f94 <iprintf>
	}
	//--

	// EK test2
	VL53L0X_Dev_t *pDev;
	pDev = &VL53L0XDev;
 80016d0:	4b84      	ldr	r3, [pc, #528]	; (80018e4 <main+0x314>)
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	pDev->I2cDevAddr = 0x52;
 80016d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016d6:	2252      	movs	r2, #82	; 0x52
 80016d8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	pDev->Present = 0;
 80016dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016de:	2200      	movs	r2, #0
 80016e0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

	int status2 = VL53L0X_DataInit(pDev);
 80016e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80016e6:	f003 fb69 	bl	8004dbc <VL53L0X_DataInit>
 80016ea:	4603      	mov	r3, r0
 80016ec:	63bb      	str	r3, [r7, #56]	; 0x38
	if( status2 == 0 ){
 80016ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d104      	bne.n	80016fe <main+0x12e>
			pDev->Present = 1;
 80016f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016f6:	2201      	movs	r2, #1
 80016f8:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 80016fc:	e002      	b.n	8001704 <main+0x134>
	}
	else{
			printf("VL53L0X_DataInit fail\n");
 80016fe:	487a      	ldr	r0, [pc, #488]	; (80018e8 <main+0x318>)
 8001700:	f017 fcce 	bl	80190a0 <puts>
	}
	printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 8001704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001706:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 800170a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800170c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001710:	461a      	mov	r2, r3
 8001712:	4876      	ldr	r0, [pc, #472]	; (80018ec <main+0x31c>)
 8001714:	f017 fc3e 	bl	8018f94 <iprintf>
	pDev->Present = 1;
 8001718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800171a:	2201      	movs	r2, #1
 800171c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	uint8_t isApertureSpads;
	VL53L0X_RangingMeasurementData_t RangingMeasurementData;
	//int range;

	// Initialize the device in continuous ranging mode
	VL53L0X_StaticInit(pDev);
 8001720:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001722:	f003 fcaf 	bl	8005084 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 8001726:	f107 0229 	add.w	r2, r7, #41	; 0x29
 800172a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800172e:	4619      	mov	r1, r3
 8001730:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001732:	f004 fb57 	bl	8005de4 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 8001736:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800173a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173e:	4619      	mov	r1, r3
 8001740:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001742:	f004 ffdd 	bl	8006700 <VL53L0X_PerformRefSpadManagement>
	//VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, 250); // Program continuous mode Inter-Measurement period in milliseconds
	//VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
	VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, TIMED_RANGING_PERIOD);
 8001746:	2132      	movs	r1, #50	; 0x32
 8001748:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800174a:	f004 f895 	bl	8005878 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
	VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 800174e:	2103      	movs	r1, #3
 8001750:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001752:	f003 fea9 	bl	80054a8 <VL53L0X_SetDeviceMode>

	// Start continuous ranging
	VL53L0X_StartMeasurement(pDev);
 8001756:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001758:	f004 fbc0 	bl	8005edc <VL53L0X_StartMeasurement>
	WaitStopCompleted(pDev);
	*/
	//--


	uiSetup();
 800175c:	f000 faa6 	bl	8001cac <uiSetup>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	// wake from event, the first thing seen after exiting sleep mode
  	if(SLEEP_MODE_ACTIVE) {
 8001760:	4b63      	ldr	r3, [pc, #396]	; (80018f0 <main+0x320>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d021      	beq.n	80017ac <main+0x1dc>
			reconfigureFromSleep();
 8001768:	f000 fb3c 	bl	8001de4 <reconfigureFromSleep>
			awakeFromSleep();
 800176c:	f000 fb48 	bl	8001e00 <awakeFromSleep>
			// refresh ui
			for(uint8_t i=0; i<num_bubbles; i++) {
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001776:	e010      	b.n	800179a <main+0x1ca>
				struct Bubble *b = &ui_bubbles[i];
 8001778:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4a5b      	ldr	r2, [pc, #364]	; (80018f4 <main+0x324>)
 8001786:	4413      	add	r3, r2
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
				b->redraw = true;
 800178a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178c:	2201      	movs	r2, #1
 800178e:	739a      	strb	r2, [r3, #14]
			for(uint8_t i=0; i<num_bubbles; i++) {
 8001790:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001794:	3301      	adds	r3, #1
 8001796:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800179a:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <main+0x328>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d3e8      	bcc.n	8001778 <main+0x1a8>
			}
			bubble_label_redraw = true;
 80017a6:	4b55      	ldr	r3, [pc, #340]	; (80018fc <main+0x32c>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
		}

  	// flag set from interrupt to enter in to sleep mode
  	if(ENTER_SLEEP_MODE) {
 80017ac:	4b54      	ldr	r3, [pc, #336]	; (8001900 <main+0x330>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d007      	beq.n	80017c4 <main+0x1f4>
  		enterSleep();
 80017b4:	f000 fb74 	bl	8001ea0 <enterSleep>
  		HAL_SuspendTick();
 80017b8:	f009 fd92 	bl	800b2e0 <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE); // left button configured as event
 80017bc:	2102      	movs	r1, #2
 80017be:	2000      	movs	r0, #0
 80017c0:	f00d fe86 	bl	800f4d0 <HAL_PWR_EnterSLEEPMode>




  	// sampling every 50 ms
  	if(sensor_sample) {
 80017c4:	4b4f      	ldr	r3, [pc, #316]	; (8001904 <main+0x334>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <main+0x202>
				}

			}
			*/

  		sensor_sample = false; // hope all of this takes < 50 ms
 80017cc:	4b4d      	ldr	r3, [pc, #308]	; (8001904 <main+0x334>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]


		// by changing the text, we can prove that it's resetting when pressing
		// the reset button - because the display will say Beep instead of the
		// other two possibilities
		if(TimingDelay == 0) {
 80017d2:	4b4d      	ldr	r3, [pc, #308]	; (8001908 <main+0x338>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d119      	bne.n	800180e <main+0x23e>
			if(led_on) {
 80017da:	4b4c      	ldr	r3, [pc, #304]	; (800190c <main+0x33c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <main+0x21a>
				BSP_LED_On(LED2_PIN); // LD1 orange
 80017e2:	2000      	movs	r0, #0
 80017e4:	f007 fecc 	bl	8009580 <BSP_LED_On>
 80017e8:	e002      	b.n	80017f0 <main+0x220>
			} else {
				BSP_LED_Off(LED2_PIN); // LD1 orange
 80017ea:	2000      	movs	r0, #0
 80017ec:	f007 feea 	bl	80095c4 <BSP_LED_Off>
			}
			led_on = !led_on;
 80017f0:	4b46      	ldr	r3, [pc, #280]	; (800190c <main+0x33c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	bf14      	ite	ne
 80017f8:	2301      	movne	r3, #1
 80017fa:	2300      	moveq	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	f083 0301 	eor.w	r3, r3, #1
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b40      	ldr	r3, [pc, #256]	; (800190c <main+0x33c>)
 800180c:	701a      	strb	r2, [r3, #0]




		// update ui
		for(uint8_t i=0; i<num_bubbles; i++) {
 800180e:	2300      	movs	r3, #0
 8001810:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001814:	e00f      	b.n	8001836 <main+0x266>
			drawBubble(&ui_bubbles[i]);
 8001816:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4a34      	ldr	r2, [pc, #208]	; (80018f4 <main+0x324>)
 8001824:	4413      	add	r3, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f9d4 	bl	8001bd4 <drawBubble>
		for(uint8_t i=0; i<num_bubbles; i++) {
 800182c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001830:	3301      	adds	r3, #1
 8001832:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <main+0x328>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800183e:	429a      	cmp	r2, r3
 8001840:	d3e9      	bcc.n	8001816 <main+0x246>
		}
		if(bubble_label_redraw) {
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <main+0x32c>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00f      	beq.n	800186a <main+0x29a>
			BSP_LCD_SetTextColor( LCD_COLOR_DARKGREEN );
 800184a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800184e:	f008 fd5d 	bl	800a30c <BSP_LCD_SetTextColor>
			BSP_LCD_SetFont(&Font24);
 8001852:	482f      	ldr	r0, [pc, #188]	; (8001910 <main+0x340>)
 8001854:	f008 fd6a 	bl	800a32c <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 90, (uint8_t *)" 10   30   90", LEFT_MODE);
 8001858:	2303      	movs	r3, #3
 800185a:	4a2e      	ldr	r2, [pc, #184]	; (8001914 <main+0x344>)
 800185c:	215a      	movs	r1, #90	; 0x5a
 800185e:	2000      	movs	r0, #0
 8001860:	f008 fdd4 	bl	800a40c <BSP_LCD_DisplayStringAt>
			bubble_label_redraw = false;
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <main+0x32c>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
		}

		// update ts
		BSP_TS_GetState(&ts_result);
 800186a:	482b      	ldr	r0, [pc, #172]	; (8001918 <main+0x348>)
 800186c:	f009 fb0a 	bl	800ae84 <BSP_TS_GetState>
		uint8_t num_touches = ts_result.touchDetected;
 8001870:	4b29      	ldr	r3, [pc, #164]	; (8001918 <main+0x348>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		// wake up the screen on touch
		if(num_touches > 0 && DIMMED_SCREEN == true) {
 8001878:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00d      	beq.n	800189c <main+0x2cc>
 8001880:	4b26      	ldr	r3, [pc, #152]	; (800191c <main+0x34c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d009      	beq.n	800189c <main+0x2cc>
			BSP_LCD_ScreenDimmingOff();
 8001888:	f009 f930 	bl	800aaec <BSP_LCD_ScreenDimmingOff>
			DIMMED_SCREEN = false;
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <main+0x34c>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
			last_ts = HAL_GetTick();
 8001892:	f009 fcf5 	bl	800b280 <HAL_GetTick>
 8001896:	4603      	mov	r3, r0
 8001898:	4a21      	ldr	r2, [pc, #132]	; (8001920 <main+0x350>)
 800189a:	6013      	str	r3, [r2, #0]
		}

		// hit testing selected bubbles
		for(uint8_t i=0; i<num_touches; i++) {
 800189c:	2300      	movs	r3, #0
 800189e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80018a2:	e0d0      	b.n	8001a46 <main+0x476>
			Point touch;
			touch.X = ts_result.touchX[i];
 80018a4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80018a8:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <main+0x348>)
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	885b      	ldrh	r3, [r3, #2]
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	803b      	strh	r3, [r7, #0]
			touch.Y = ts_result.touchY[i];
 80018b4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80018b8:	4a17      	ldr	r2, [pc, #92]	; (8001918 <main+0x348>)
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	88db      	ldrh	r3, [r3, #6]
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	807b      	strh	r3, [r7, #2]

			for(uint8_t j=0; j<num_bubbles; j++) {
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80018ca:	e0b0      	b.n	8001a2e <main+0x45e>
 80018cc:	48000400 	.word	0x48000400
 80018d0:	48002000 	.word	0x48002000
 80018d4:	48001800 	.word	0x48001800
 80018d8:	20000dd4 	.word	0x20000dd4
 80018dc:	20000a18 	.word	0x20000a18
 80018e0:	08019ed4 	.word	0x08019ed4
 80018e4:	20000004 	.word	0x20000004
 80018e8:	08019edc 	.word	0x08019edc
 80018ec:	08019e7c 	.word	0x08019e7c
 80018f0:	20000ad6 	.word	0x20000ad6
 80018f4:	20000adc 	.word	0x20000adc
 80018f8:	20000194 	.word	0x20000194
 80018fc:	20000195 	.word	0x20000195
 8001900:	20000ad7 	.word	0x20000ad7
 8001904:	20000ac0 	.word	0x20000ac0
 8001908:	20000ad8 	.word	0x20000ad8
 800190c:	20000ad5 	.word	0x20000ad5
 8001910:	20000538 	.word	0x20000538
 8001914:	08019ef4 	.word	0x08019ef4
 8001918:	20000ac4 	.word	0x20000ac4
 800191c:	20000ad4 	.word	0x20000ad4
 8001920:	20000ad0 	.word	0x20000ad0
				struct Bubble *b = &ui_bubbles[j];
 8001924:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4a58      	ldr	r2, [pc, #352]	; (8001a94 <main+0x4c4>)
 8001932:	4413      	add	r3, r2
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c

				// hit testing
				if(touch.X < b->x + b->hit_diameter && touch.X > b->x - b->hit_diameter) {
 8001936:	f9b7 3000 	ldrsh.w	r3, [r7]
 800193a:	461a      	mov	r2, r3
 800193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001944:	88db      	ldrh	r3, [r3, #6]
 8001946:	440b      	add	r3, r1
 8001948:	429a      	cmp	r2, r3
 800194a:	da6b      	bge.n	8001a24 <main+0x454>
 800194c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001950:	461a      	mov	r2, r3
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	4619      	mov	r1, r3
 8001958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195a:	88db      	ldrh	r3, [r3, #6]
 800195c:	1acb      	subs	r3, r1, r3
 800195e:	429a      	cmp	r2, r3
 8001960:	dd60      	ble.n	8001a24 <main+0x454>
					if(touch.Y < b->y + b->hit_diameter && touch.Y > b->y - b->hit_diameter) {
 8001962:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001966:	461a      	mov	r2, r3
 8001968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196a:	885b      	ldrh	r3, [r3, #2]
 800196c:	4619      	mov	r1, r3
 800196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001970:	88db      	ldrh	r3, [r3, #6]
 8001972:	440b      	add	r3, r1
 8001974:	429a      	cmp	r2, r3
 8001976:	da55      	bge.n	8001a24 <main+0x454>
 8001978:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800197c:	461a      	mov	r2, r3
 800197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001980:	885b      	ldrh	r3, [r3, #2]
 8001982:	4619      	mov	r1, r3
 8001984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001986:	88db      	ldrh	r3, [r3, #6]
 8001988:	1acb      	subs	r3, r1, r3
 800198a:	429a      	cmp	r2, r3
 800198c:	dd4a      	ble.n	8001a24 <main+0x454>

						if(b->type == 1) { // ui bubbles
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	7bdb      	ldrb	r3, [r3, #15]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d123      	bne.n	80019de <main+0x40e>

							if(!b->selected) { // not selected prior
 8001996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001998:	7a1b      	ldrb	r3, [r3, #8]
 800199a:	f083 0301 	eor.w	r3, r3, #1
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d03f      	beq.n	8001a24 <main+0x454>
								b->selected = !b->selected;
 80019a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a6:	7a1b      	ldrb	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf14      	ite	ne
 80019ac:	2301      	movne	r3, #1
 80019ae:	2300      	moveq	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f083 0301 	eor.w	r3, r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c0:	721a      	strb	r2, [r3, #8]
								deselectBubbles(j); // "single touch"
 80019c2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f93c 	bl	8001c44 <deselectBubbles>
								b->redraw = true;
 80019cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ce:	2201      	movs	r2, #1
 80019d0:	739a      	strb	r2, [r3, #14]
								b->last_selected = HAL_GetTick();
 80019d2:	f009 fc55 	bl	800b280 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019da:	611a      	str	r2, [r3, #16]
 80019dc:	e022      	b.n	8001a24 <main+0x454>
							}

						} else if(b->type == 2) { // go bubble
 80019de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e0:	7bdb      	ldrb	r3, [r3, #15]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d11e      	bne.n	8001a24 <main+0x454>

							if(HAL_GetTick()-b->last_selected > 80) { // 80 ms debounce
 80019e6:	f009 fc4b 	bl	800b280 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b50      	cmp	r3, #80	; 0x50
 80019f4:	d916      	bls.n	8001a24 <main+0x454>
								b->selected = !b->selected;
 80019f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f8:	7a1b      	ldrb	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	bf14      	ite	ne
 80019fe:	2301      	movne	r3, #1
 8001a00:	2300      	moveq	r3, #0
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f083 0301 	eor.w	r3, r3, #1
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a12:	721a      	strb	r2, [r3, #8]
								b->redraw = true;
 8001a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a16:	2201      	movs	r2, #1
 8001a18:	739a      	strb	r2, [r3, #14]
								b->last_selected = HAL_GetTick();
 8001a1a:	f009 fc31 	bl	800b280 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a22:	611a      	str	r2, [r3, #16]
			for(uint8_t j=0; j<num_bubbles; j++) {
 8001a24:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <main+0x4c8>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001a36:	429a      	cmp	r2, r3
 8001a38:	f4ff af74 	bcc.w	8001924 <main+0x354>
		for(uint8_t i=0; i<num_touches; i++) {
 8001a3c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a40:	3301      	adds	r3, #1
 8001a42:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8001a46:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001a4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	f4ff af28 	bcc.w	80018a4 <main+0x2d4>
		// imagine the case where gettick has overflowed, but last_ts has not
		// eg 100-30000
		// abs could be used to prevent this from being a negative number, however
		// in this case, it is not needed, because two unsigned integers being
		// subtracted results in an unsigned integer
		if( HAL_GetTick()-last_ts >= 5000 && DIMMED_SCREEN == false) {
 8001a54:	f009 fc14 	bl	800b280 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <main+0x4cc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a64:	4293      	cmp	r3, r2
 8001a66:	f67f ae7b 	bls.w	8001760 <main+0x190>
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <main+0x4d0>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	f083 0301 	eor.w	r3, r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f43f ae73 	beq.w	8001760 <main+0x190>
			//BSP_LCD_ScreenDimmingConfig(100, 5, 5, 20); // 100-5=95/5=19*20=380ms
			BSP_LCD_ScreenDimmingConfig(100, 5, 5, 1); // 100-5=95/5=19*20=380ms
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	2205      	movs	r2, #5
 8001a7e:	2105      	movs	r1, #5
 8001a80:	2064      	movs	r0, #100	; 0x64
 8001a82:	f008 ff07 	bl	800a894 <BSP_LCD_ScreenDimmingConfig>
			BSP_LCD_ScreenDimmingOn();
 8001a86:	f008 ff37 	bl	800a8f8 <BSP_LCD_ScreenDimmingOn>
			DIMMED_SCREEN = true;
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <main+0x4d0>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
  {
 8001a90:	e666      	b.n	8001760 <main+0x190>
 8001a92:	bf00      	nop
 8001a94:	20000adc 	.word	0x20000adc
 8001a98:	20000194 	.word	0x20000194
 8001a9c:	20000ad0 	.word	0x20000ad0
 8001aa0:	20000ad4 	.word	0x20000ad4

08001aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b096      	sub	sp, #88	; 0x58
 8001aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	2244      	movs	r2, #68	; 0x44
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f017 f986 	bl	8018dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab8:	463b      	mov	r3, r7
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ac6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001aca:	f00d fd43 	bl	800f554 <HAL_PWREx_ControlVoltageScaling>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ad4:	f000 fa82 	bl	8001fdc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ad8:	f00d fcea 	bl	800f4b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <SystemClock_Config+0xc0>)
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae2:	4a20      	ldr	r2, [pc, #128]	; (8001b64 <SystemClock_Config+0xc0>)
 8001ae4:	f023 0318 	bic.w	r3, r3, #24
 8001ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001aec:	2314      	movs	r3, #20
 8001aee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001af0:	2301      	movs	r3, #1
 8001af2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001af4:	2301      	movs	r3, #1
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001afc:	2360      	movs	r3, #96	; 0x60
 8001afe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b00:	2302      	movs	r3, #2
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b04:	2301      	movs	r3, #1
 8001b06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001b0c:	2318      	movs	r3, #24
 8001b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b10:	2302      	movs	r3, #2
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4618      	mov	r0, r3
 8001b22:	f00d fe97 	bl	800f854 <HAL_RCC_OscConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001b2c:	f000 fa56 	bl	8001fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b30:	230f      	movs	r3, #15
 8001b32:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b34:	2303      	movs	r3, #3
 8001b36:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b44:	463b      	mov	r3, r7
 8001b46:	2102      	movs	r1, #2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f00e fa9d 	bl	8010088 <HAL_RCC_ClockConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b54:	f000 fa42 	bl	8001fdc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001b58:	f00f fd6e 	bl	8011638 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001b5c:	bf00      	nop
 8001b5e:	3758      	adds	r7, #88	; 0x58
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000

08001b68 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b0a4      	sub	sp, #144	; 0x90
 8001b6c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	228c      	movs	r2, #140	; 0x8c
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f017 f925 	bl	8018dc4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <PeriphCommonClock_Config+0x64>)
 8001b7c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001b8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b8e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8001b90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b94:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b96:	2301      	movs	r3, #1
 8001b98:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001b9e:	2318      	movs	r3, #24
 8001ba0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <PeriphCommonClock_Config+0x68>)
 8001bb0:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00e fc8b 	bl	80104d0 <HAL_RCCEx_PeriphCLKConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001bc0:	f000 fa0c 	bl	8001fdc <Error_Handler>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3790      	adds	r7, #144	; 0x90
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	00086800 	.word	0x00086800
 8001bd0:	01110000 	.word	0x01110000

08001bd4 <drawBubble>:
/* USER CODE BEGIN 4 */


// UI123

void drawBubble(struct Bubble *bubble) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

	if(!bubble->redraw) return;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7b9b      	ldrb	r3, [r3, #14]
 8001be0:	f083 0301 	eor.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d127      	bne.n	8001c3a <drawBubble+0x66>

	if(!bubble->selected) {
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7a1b      	ldrb	r3, [r3, #8]
 8001bee:	f083 0301 	eor.w	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00e      	beq.n	8001c16 <drawBubble+0x42>
		BSP_LCD_SetTextColor( bubble->colour_active );
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	895b      	ldrh	r3, [r3, #10]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f008 fb85 	bl	800a30c <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(bubble->x, bubble->y, bubble->radius);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	8818      	ldrh	r0, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	8859      	ldrh	r1, [r3, #2]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	889b      	ldrh	r3, [r3, #4]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f008 fd9a 	bl	800a748 <BSP_LCD_FillCircle>
 8001c14:	e00d      	b.n	8001c32 <drawBubble+0x5e>
	} else {
		BSP_LCD_SetTextColor( bubble->colour_inactive );
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	899b      	ldrh	r3, [r3, #12]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f008 fb76 	bl	800a30c <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(bubble->x, bubble->y, bubble->radius);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	8818      	ldrh	r0, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	8859      	ldrh	r1, [r3, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	889b      	ldrh	r3, [r3, #4]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	f008 fd8b 	bl	800a748 <BSP_LCD_FillCircle>
	}

	bubble->redraw = false;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	739a      	strb	r2, [r3, #14]
 8001c38:	e000      	b.n	8001c3c <drawBubble+0x68>
	if(!bubble->redraw) return;
 8001c3a:	bf00      	nop

}
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <deselectBubbles>:

void deselectBubbles(uint8_t skip) {
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i=0; i<num_bubbles; i++) {
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
 8001c52:	e01a      	b.n	8001c8a <deselectBubbles+0x46>
		struct Bubble *b = &ui_bubbles[i];
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4a11      	ldr	r2, [pc, #68]	; (8001ca4 <deselectBubbles+0x60>)
 8001c60:	4413      	add	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
		if(b->type == 1) { // ui bubbles
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	7bdb      	ldrb	r3, [r3, #15]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10b      	bne.n	8001c84 <deselectBubbles+0x40>
			if(i == skip) continue;
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d006      	beq.n	8001c82 <deselectBubbles+0x3e>
			b->selected = false;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2200      	movs	r2, #0
 8001c78:	721a      	strb	r2, [r3, #8]
			b->redraw = true;
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	739a      	strb	r2, [r3, #14]
 8001c80:	e000      	b.n	8001c84 <deselectBubbles+0x40>
			if(i == skip) continue;
 8001c82:	bf00      	nop
	for(uint8_t i=0; i<num_bubbles; i++) {
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	3301      	adds	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <deselectBubbles+0x64>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d3df      	bcc.n	8001c54 <deselectBubbles+0x10>
		}
	}

}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000adc 	.word	0x20000adc
 8001ca8:	20000194 	.word	0x20000194

08001cac <uiSetup>:

void uiSetup(void) {
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0

	uint16_t radius = 30;
 8001cb2:	231e      	movs	r3, #30
 8001cb4:	80fb      	strh	r3, [r7, #6]
	uint16_t hit_diameter = 35;
 8001cb6:	2323      	movs	r3, #35	; 0x23
 8001cb8:	80bb      	strh	r3, [r7, #4]
	uint16_t y = 50;
 8001cba:	2332      	movs	r3, #50	; 0x32
 8001cbc:	807b      	strh	r3, [r7, #2]

	// left bubble
	ui_bubbles[0].x = 40;
 8001cbe:	4b48      	ldr	r3, [pc, #288]	; (8001de0 <uiSetup+0x134>)
 8001cc0:	2228      	movs	r2, #40	; 0x28
 8001cc2:	801a      	strh	r2, [r3, #0]
	ui_bubbles[0].y = y;
 8001cc4:	4a46      	ldr	r2, [pc, #280]	; (8001de0 <uiSetup+0x134>)
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	8053      	strh	r3, [r2, #2]
	ui_bubbles[0].radius = radius;
 8001cca:	4a45      	ldr	r2, [pc, #276]	; (8001de0 <uiSetup+0x134>)
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	8093      	strh	r3, [r2, #4]
	ui_bubbles[0].hit_diameter = hit_diameter;
 8001cd0:	4a43      	ldr	r2, [pc, #268]	; (8001de0 <uiSetup+0x134>)
 8001cd2:	88bb      	ldrh	r3, [r7, #4]
 8001cd4:	80d3      	strh	r3, [r2, #6]
	ui_bubbles[0].selected = true;
 8001cd6:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <uiSetup+0x134>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	721a      	strb	r2, [r3, #8]
	ui_bubbles[0].colour_active = LCD_COLOR_CYAN;
 8001cdc:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <uiSetup+0x134>)
 8001cde:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001ce2:	815a      	strh	r2, [r3, #10]
	ui_bubbles[0].colour_inactive = LCD_COLOR_GREEN;
 8001ce4:	4b3e      	ldr	r3, [pc, #248]	; (8001de0 <uiSetup+0x134>)
 8001ce6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001cea:	819a      	strh	r2, [r3, #12]
	ui_bubbles[0].redraw = true;
 8001cec:	4b3c      	ldr	r3, [pc, #240]	; (8001de0 <uiSetup+0x134>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	739a      	strb	r2, [r3, #14]
	ui_bubbles[0].type = 1;
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <uiSetup+0x134>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	73da      	strb	r2, [r3, #15]
	ui_bubbles[0].last_selected = 0;
 8001cf8:	4b39      	ldr	r3, [pc, #228]	; (8001de0 <uiSetup+0x134>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]

	// middle bubble
	ui_bubbles[1].x = 120;
 8001cfe:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <uiSetup+0x134>)
 8001d00:	2278      	movs	r2, #120	; 0x78
 8001d02:	829a      	strh	r2, [r3, #20]
	ui_bubbles[1].y = y;
 8001d04:	4a36      	ldr	r2, [pc, #216]	; (8001de0 <uiSetup+0x134>)
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	82d3      	strh	r3, [r2, #22]
	ui_bubbles[1].radius = radius;
 8001d0a:	4a35      	ldr	r2, [pc, #212]	; (8001de0 <uiSetup+0x134>)
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	8313      	strh	r3, [r2, #24]
	ui_bubbles[1].hit_diameter = hit_diameter;
 8001d10:	4a33      	ldr	r2, [pc, #204]	; (8001de0 <uiSetup+0x134>)
 8001d12:	88bb      	ldrh	r3, [r7, #4]
 8001d14:	8353      	strh	r3, [r2, #26]
	ui_bubbles[1].selected = false;
 8001d16:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <uiSetup+0x134>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]
	ui_bubbles[1].colour_active = LCD_COLOR_LIGHTBLUE;
 8001d1c:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <uiSetup+0x134>)
 8001d1e:	f248 421f 	movw	r2, #33823	; 0x841f
 8001d22:	83da      	strh	r2, [r3, #30]
	ui_bubbles[1].colour_inactive = LCD_COLOR_GREEN;
 8001d24:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <uiSetup+0x134>)
 8001d26:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001d2a:	841a      	strh	r2, [r3, #32]
	ui_bubbles[1].redraw = true;
 8001d2c:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <uiSetup+0x134>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ui_bubbles[1].type = 1;
 8001d34:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <uiSetup+0x134>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ui_bubbles[1].last_selected = 0;
 8001d3c:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <uiSetup+0x134>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24

	// right bubble
	ui_bubbles[2].x = 200;
 8001d42:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <uiSetup+0x134>)
 8001d44:	22c8      	movs	r2, #200	; 0xc8
 8001d46:	851a      	strh	r2, [r3, #40]	; 0x28
	ui_bubbles[2].y = y;
 8001d48:	4a25      	ldr	r2, [pc, #148]	; (8001de0 <uiSetup+0x134>)
 8001d4a:	887b      	ldrh	r3, [r7, #2]
 8001d4c:	8553      	strh	r3, [r2, #42]	; 0x2a
	ui_bubbles[2].radius = radius;
 8001d4e:	4a24      	ldr	r2, [pc, #144]	; (8001de0 <uiSetup+0x134>)
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	8593      	strh	r3, [r2, #44]	; 0x2c
	ui_bubbles[2].hit_diameter = hit_diameter;
 8001d54:	4a22      	ldr	r2, [pc, #136]	; (8001de0 <uiSetup+0x134>)
 8001d56:	88bb      	ldrh	r3, [r7, #4]
 8001d58:	85d3      	strh	r3, [r2, #46]	; 0x2e
	ui_bubbles[2].selected = false;
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <uiSetup+0x134>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	ui_bubbles[2].colour_active = LCD_COLOR_LIGHTMAGENTA;
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <uiSetup+0x134>)
 8001d64:	f64f 421f 	movw	r2, #64543	; 0xfc1f
 8001d68:	865a      	strh	r2, [r3, #50]	; 0x32
	ui_bubbles[2].colour_inactive = LCD_COLOR_GREEN;
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <uiSetup+0x134>)
 8001d6c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001d70:	869a      	strh	r2, [r3, #52]	; 0x34
	ui_bubbles[2].redraw = true;
 8001d72:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <uiSetup+0x134>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	ui_bubbles[2].type = 1;
 8001d7a:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <uiSetup+0x134>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	ui_bubbles[2].last_selected = 0;
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <uiSetup+0x134>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	639a      	str	r2, [r3, #56]	; 0x38

	// go bubble
	ui_bubbles[3].x = 120;
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <uiSetup+0x134>)
 8001d8a:	2278      	movs	r2, #120	; 0x78
 8001d8c:	879a      	strh	r2, [r3, #60]	; 0x3c
	ui_bubbles[3].y = 170;
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <uiSetup+0x134>)
 8001d90:	22aa      	movs	r2, #170	; 0xaa
 8001d92:	87da      	strh	r2, [r3, #62]	; 0x3e
	ui_bubbles[3].radius = 45;
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <uiSetup+0x134>)
 8001d96:	222d      	movs	r2, #45	; 0x2d
 8001d98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	ui_bubbles[3].hit_diameter = 50;
 8001d9c:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <uiSetup+0x134>)
 8001d9e:	2232      	movs	r2, #50	; 0x32
 8001da0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	ui_bubbles[3].selected = true;
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <uiSetup+0x134>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	ui_bubbles[3].colour_active = LCD_COLOR_GREEN;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <uiSetup+0x134>)
 8001dae:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001db2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ui_bubbles[3].colour_inactive = LCD_COLOR_BLUE;
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <uiSetup+0x134>)
 8001db8:	221f      	movs	r2, #31
 8001dba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	ui_bubbles[3].redraw = true;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <uiSetup+0x134>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	ui_bubbles[3].type = 2;
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <uiSetup+0x134>)
 8001dc8:	2202      	movs	r2, #2
 8001dca:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	ui_bubbles[3].last_selected = 0;
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <uiSetup+0x134>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	64da      	str	r2, [r3, #76]	; 0x4c

}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	20000adc 	.word	0x20000adc

08001de4 <reconfigureFromSleep>:





void reconfigureFromSleep(void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	/* System is Low Power Run mode when exiting Low Power Sleep mode,
		 disable low power run mode and reset the clock to initialization configuration */
	HAL_PWREx_DisableLowPowerRunMode();
 8001de8:	f00d fc3a 	bl	800f660 <HAL_PWREx_DisableLowPowerRunMode>

	/* Configure the system clock for the RUN mode */
	SystemClock_Config();
 8001dec:	f7ff fe5a 	bl	8001aa4 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001df0:	f7ff feba 	bl	8001b68 <PeriphCommonClock_Config>

	/* Re-init GPIOs */
	MX_GPIO_Init();
 8001df4:	f7ff f8aa 	bl	8000f4c <MX_GPIO_Init>

	/* Resume Tick interrupt if disabled prior to Low Power Sleep mode entry */
	HAL_ResumeTick();
 8001df8:	f009 fa82 	bl	800b300 <HAL_ResumeTick>
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <awakeFromSleep>:


void awakeFromSleep(void) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0

	// turn on LD1, LD2
	BSP_LED_On(LED2_PIN); // LD1 orange turns off
 8001e04:	2000      	movs	r0, #0
 8001e06:	f007 fbbb 	bl	8009580 <BSP_LED_On>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET); // LD2 green turns on
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e10:	481c      	ldr	r0, [pc, #112]	; (8001e84 <awakeFromSleep+0x84>)
 8001e12:	f00a ffbb 	bl	800cd8c <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8001e16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e1a:	f009 fa3d 	bl	800b298 <HAL_Delay>

	// turn on lcd
	BSP_LCD_DisplayOn();
 8001e1e:	f008 fd25 	bl	800a86c <BSP_LCD_DisplayOn>
	DIMMED_SCREEN = false;
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <awakeFromSleep+0x88>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8001e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e2c:	f009 fa34 	bl	800b298 <HAL_Delay>

	// turn on laser and test point
	HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_SET); // laser
 8001e30:	2201      	movs	r2, #1
 8001e32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e36:	4815      	ldr	r0, [pc, #84]	; (8001e8c <awakeFromSleep+0x8c>)
 8001e38:	f00a ffa8 	bl	800cd8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_SET); // test point: timer frequency
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	2140      	movs	r1, #64	; 0x40
 8001e40:	4813      	ldr	r0, [pc, #76]	; (8001e90 <awakeFromSleep+0x90>)
 8001e42:	f00a ffa3 	bl	800cd8c <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8001e46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e4a:	f009 fa25 	bl	800b298 <HAL_Delay>

	// turn on ts
	BSP_TS_ITConfig();
 8001e4e:	f008 ffe9 	bl	800ae24 <BSP_TS_ITConfig>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8001e52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e56:	f009 fa1f 	bl	800b298 <HAL_Delay>

	// turn on BT pwr transistor
	HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET);
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e60:	480b      	ldr	r0, [pc, #44]	; (8001e90 <awakeFromSleep+0x90>)
 8001e62:	f00a ff93 	bl	800cd8c <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8001e66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e6a:	f009 fa15 	bl	800b298 <HAL_Delay>

	// set flags
	BT_ENABLED = true;
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <awakeFromSleep+0x94>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
	ENTER_SLEEP_MODE = false;
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <awakeFromSleep+0x98>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
	SLEEP_MODE_ACTIVE = false;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <awakeFromSleep+0x9c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]

}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	48000400 	.word	0x48000400
 8001e88:	20000ad4 	.word	0x20000ad4
 8001e8c:	48002000 	.word	0x48002000
 8001e90:	48001800 	.word	0x48001800
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000ad7 	.word	0x20000ad7
 8001e9c:	20000ad6 	.word	0x20000ad6

08001ea0 <enterSleep>:


void enterSleep(void) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0

	// turn off ts
	BSP_TS_ITDeConfig();
 8001ea4:	f008 ffd6 	bl	800ae54 <BSP_TS_ITDeConfig>

	// turn off lcd
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001ea8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001eac:	f008 fa4e 	bl	800a34c <BSP_LCD_Clear>
	if(DIMMED_SCREEN == true) {
 8001eb0:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <enterSleep+0xac>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <enterSleep+0x1c>
		BSP_LCD_ScreenDimmingOff();
 8001eb8:	f008 fe18 	bl	800aaec <BSP_LCD_ScreenDimmingOff>
	}
	BSP_LCD_ScreenDimmingConfig(100, 0, 5, 20);
 8001ebc:	2314      	movs	r3, #20
 8001ebe:	2205      	movs	r2, #5
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2064      	movs	r0, #100	; 0x64
 8001ec4:	f008 fce6 	bl	800a894 <BSP_LCD_ScreenDimmingConfig>
	BSP_LCD_ScreenDimmingOn();
 8001ec8:	f008 fd16 	bl	800a8f8 <BSP_LCD_ScreenDimmingOn>
	BSP_LCD_DisplayOff();
 8001ecc:	f008 fcd8 	bl	800a880 <BSP_LCD_DisplayOff>
	DIMMED_SCREEN = true;
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <enterSleep+0xac>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000); // wait for fade to finish
 8001ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eda:	f009 f9dd 	bl	800b298 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_RESET); // force the backlight off
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	481b      	ldr	r0, [pc, #108]	; (8001f50 <enterSleep+0xb0>)
 8001ee4:	f00a ff52 	bl	800cd8c <HAL_GPIO_WritePin>

	// turn off BT pwr transistor
	HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eee:	4819      	ldr	r0, [pc, #100]	; (8001f54 <enterSleep+0xb4>)
 8001ef0:	f00a ff4c 	bl	800cd8c <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8001ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef8:	f009 f9ce 	bl	800b298 <HAL_Delay>

	// turn off LD1, LD2
	BSP_LED_Off(LED2_PIN); // LD1 orange turns off
 8001efc:	2000      	movs	r0, #0
 8001efe:	f007 fb61 	bl	80095c4 <BSP_LED_Off>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_SET); // LD2 green turns off
 8001f02:	2201      	movs	r2, #1
 8001f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f08:	4813      	ldr	r0, [pc, #76]	; (8001f58 <enterSleep+0xb8>)
 8001f0a:	f00a ff3f 	bl	800cd8c <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8001f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f12:	f009 f9c1 	bl	800b298 <HAL_Delay>

	// turn off laser and test point
	HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET); // laser
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f1c:	480c      	ldr	r0, [pc, #48]	; (8001f50 <enterSleep+0xb0>)
 8001f1e:	f00a ff35 	bl	800cd8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET); // test point: timer frequency
 8001f22:	2200      	movs	r2, #0
 8001f24:	2140      	movs	r1, #64	; 0x40
 8001f26:	480b      	ldr	r0, [pc, #44]	; (8001f54 <enterSleep+0xb4>)
 8001f28:	f00a ff30 	bl	800cd8c <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8001f2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f30:	f009 f9b2 	bl	800b298 <HAL_Delay>

	// set flags
	BT_ENABLED = false;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <enterSleep+0xbc>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
	ENTER_SLEEP_MODE = false;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <enterSleep+0xc0>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
	SLEEP_MODE_ACTIVE = true;
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <enterSleep+0xc4>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000ad4 	.word	0x20000ad4
 8001f50:	48002000 	.word	0x48002000
 8001f54:	48001800 	.word	0x48001800
 8001f58:	48000400 	.word	0x48000400
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000ad7 	.word	0x20000ad7
 8001f64:	20000ad6 	.word	0x20000ad6

08001f68 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80fb      	strh	r3, [r7, #6]

	// DOWN: enter sleep mode
	// LEFT: wake up (event)
	// RIGHT: toggle bt enabled

	if(GPIO_Pin == JOY_DOWN_Pin) {
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f78:	d102      	bne.n	8001f80 <HAL_GPIO_EXTI_Callback+0x18>
		// set flag to enter sleep mode
		ENTER_SLEEP_MODE = true;
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_GPIO_EXTI_Callback+0x68>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == JOY_RIGHT_Pin) {
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f86:	d11f      	bne.n	8001fc8 <HAL_GPIO_EXTI_Callback+0x60>

		if(BT_ENABLED) {
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <HAL_GPIO_EXTI_Callback+0x36>
			HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_RESET); // turn off BT pwr transistor
 8001f90:	2200      	movs	r2, #0
 8001f92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f96:	4810      	ldr	r0, [pc, #64]	; (8001fd8 <HAL_GPIO_EXTI_Callback+0x70>)
 8001f98:	f00a fef8 	bl	800cd8c <HAL_GPIO_WritePin>
 8001f9c:	e005      	b.n	8001faa <HAL_GPIO_EXTI_Callback+0x42>
		} else {
			HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET); // turn on BT pwr transistor
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <HAL_GPIO_EXTI_Callback+0x70>)
 8001fa6:	f00a fef1 	bl	800cd8c <HAL_GPIO_WritePin>
		}

		BT_ENABLED = !BT_ENABLED;
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bf14      	ite	ne
 8001fb2:	2301      	movne	r3, #1
 8001fb4:	2300      	moveq	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f083 0301 	eor.w	r3, r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001fc6:	701a      	strb	r2, [r3, #0]

	}

}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000ad7 	.word	0x20000ad7
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	48001800 	.word	0x48001800

08001fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe0:	b672      	cpsid	i
}
 8001fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <Error_Handler+0x8>
	...

08001fe8 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <MX_QUADSPI_Init+0x54>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8002000:	2210      	movs	r2, #16
 8002002:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8002006:	2217      	movs	r2, #23
 8002008:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <MX_QUADSPI_Init+0x50>)
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8002018:	2200      	movs	r2, #0
 800201a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <MX_QUADSPI_Init+0x50>)
 800201e:	2200      	movs	r2, #0
 8002020:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002022:	4805      	ldr	r0, [pc, #20]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8002024:	f00d fb54 	bl	800f6d0 <HAL_QSPI_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800202e:	f7ff ffd5 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000b2c 	.word	0x20000b2c
 800203c:	a0001000 	.word	0xa0001000

08002040 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a26      	ldr	r2, [pc, #152]	; (80020f8 <HAL_QSPI_MspInit+0xb8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d145      	bne.n	80020ee <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002062:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_QSPI_MspInit+0xbc>)
 8002064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002066:	4a25      	ldr	r2, [pc, #148]	; (80020fc <HAL_QSPI_MspInit+0xbc>)
 8002068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206c:	6513      	str	r3, [r2, #80]	; 0x50
 800206e:	4b23      	ldr	r3, [pc, #140]	; (80020fc <HAL_QSPI_MspInit+0xbc>)
 8002070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_QSPI_MspInit+0xbc>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <HAL_QSPI_MspInit+0xbc>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002086:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_QSPI_MspInit+0xbc>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_QSPI_MspInit+0xbc>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4a19      	ldr	r2, [pc, #100]	; (80020fc <HAL_QSPI_MspInit+0xbc>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_QSPI_MspInit+0xbc>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80020aa:	f640 0303 	movw	r3, #2051	; 0x803
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80020bc:	230a      	movs	r3, #10
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	480e      	ldr	r0, [pc, #56]	; (8002100 <HAL_QSPI_MspInit+0xc0>)
 80020c8:	f00a fbdc 	bl	800c884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 80020cc:	23c8      	movs	r3, #200	; 0xc8
 80020ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80020dc:	230a      	movs	r3, #10
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4619      	mov	r1, r3
 80020e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ea:	f00a fbcb 	bl	800c884 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80020ee:	bf00      	nop
 80020f0:	3728      	adds	r7, #40	; 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	a0001000 	.word	0xa0001000
 80020fc:	40021000 	.word	0x40021000
 8002100:	48000400 	.word	0x48000400

08002104 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002108:	4b4d      	ldr	r3, [pc, #308]	; (8002240 <MX_SAI1_Init+0x13c>)
 800210a:	4a4e      	ldr	r2, [pc, #312]	; (8002244 <MX_SAI1_Init+0x140>)
 800210c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800210e:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <MX_SAI1_Init+0x13c>)
 8002110:	2200      	movs	r2, #0
 8002112:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002114:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <MX_SAI1_Init+0x13c>)
 8002116:	2200      	movs	r2, #0
 8002118:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800211a:	4b49      	ldr	r3, [pc, #292]	; (8002240 <MX_SAI1_Init+0x13c>)
 800211c:	2240      	movs	r2, #64	; 0x40
 800211e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002120:	4b47      	ldr	r3, [pc, #284]	; (8002240 <MX_SAI1_Init+0x13c>)
 8002122:	2200      	movs	r2, #0
 8002124:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002126:	4b46      	ldr	r3, [pc, #280]	; (8002240 <MX_SAI1_Init+0x13c>)
 8002128:	2200      	movs	r2, #0
 800212a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800212c:	4b44      	ldr	r3, [pc, #272]	; (8002240 <MX_SAI1_Init+0x13c>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002132:	4b43      	ldr	r3, [pc, #268]	; (8002240 <MX_SAI1_Init+0x13c>)
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002138:	4b41      	ldr	r3, [pc, #260]	; (8002240 <MX_SAI1_Init+0x13c>)
 800213a:	2200      	movs	r2, #0
 800213c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800213e:	4b40      	ldr	r3, [pc, #256]	; (8002240 <MX_SAI1_Init+0x13c>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002144:	4b3e      	ldr	r3, [pc, #248]	; (8002240 <MX_SAI1_Init+0x13c>)
 8002146:	4a40      	ldr	r2, [pc, #256]	; (8002248 <MX_SAI1_Init+0x144>)
 8002148:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <MX_SAI1_Init+0x13c>)
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002150:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <MX_SAI1_Init+0x13c>)
 8002152:	2200      	movs	r2, #0
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002156:	4b3a      	ldr	r3, [pc, #232]	; (8002240 <MX_SAI1_Init+0x13c>)
 8002158:	2200      	movs	r2, #0
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800215c:	4b38      	ldr	r3, [pc, #224]	; (8002240 <MX_SAI1_Init+0x13c>)
 800215e:	2200      	movs	r2, #0
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8002162:	4b37      	ldr	r3, [pc, #220]	; (8002240 <MX_SAI1_Init+0x13c>)
 8002164:	2208      	movs	r2, #8
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002168:	4b35      	ldr	r3, [pc, #212]	; (8002240 <MX_SAI1_Init+0x13c>)
 800216a:	2201      	movs	r2, #1
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800216e:	4b34      	ldr	r3, [pc, #208]	; (8002240 <MX_SAI1_Init+0x13c>)
 8002170:	2200      	movs	r2, #0
 8002172:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002174:	4b32      	ldr	r3, [pc, #200]	; (8002240 <MX_SAI1_Init+0x13c>)
 8002176:	2200      	movs	r2, #0
 8002178:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800217a:	4b31      	ldr	r3, [pc, #196]	; (8002240 <MX_SAI1_Init+0x13c>)
 800217c:	2200      	movs	r2, #0
 800217e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002180:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <MX_SAI1_Init+0x13c>)
 8002182:	2200      	movs	r2, #0
 8002184:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002186:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <MX_SAI1_Init+0x13c>)
 8002188:	2200      	movs	r2, #0
 800218a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800218c:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <MX_SAI1_Init+0x13c>)
 800218e:	2201      	movs	r2, #1
 8002190:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8002192:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <MX_SAI1_Init+0x13c>)
 8002194:	2200      	movs	r2, #0
 8002196:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002198:	4829      	ldr	r0, [pc, #164]	; (8002240 <MX_SAI1_Init+0x13c>)
 800219a:	f00f fd2d 	bl	8011bf8 <HAL_SAI_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 80021a4:	f7ff ff1a 	bl	8001fdc <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <MX_SAI1_Init+0x148>)
 80021aa:	4a29      	ldr	r2, [pc, #164]	; (8002250 <MX_SAI1_Init+0x14c>)
 80021ac:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80021ae:	4b27      	ldr	r3, [pc, #156]	; (800224c <MX_SAI1_Init+0x148>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80021b4:	4b25      	ldr	r3, [pc, #148]	; (800224c <MX_SAI1_Init+0x148>)
 80021b6:	2203      	movs	r2, #3
 80021b8:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <MX_SAI1_Init+0x148>)
 80021bc:	2240      	movs	r2, #64	; 0x40
 80021be:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80021c0:	4b22      	ldr	r3, [pc, #136]	; (800224c <MX_SAI1_Init+0x148>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80021c6:	4b21      	ldr	r3, [pc, #132]	; (800224c <MX_SAI1_Init+0x148>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80021cc:	4b1f      	ldr	r3, [pc, #124]	; (800224c <MX_SAI1_Init+0x148>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80021d2:	4b1e      	ldr	r3, [pc, #120]	; (800224c <MX_SAI1_Init+0x148>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80021d8:	4b1c      	ldr	r3, [pc, #112]	; (800224c <MX_SAI1_Init+0x148>)
 80021da:	2200      	movs	r2, #0
 80021dc:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <MX_SAI1_Init+0x148>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <MX_SAI1_Init+0x148>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80021ea:	4b18      	ldr	r3, [pc, #96]	; (800224c <MX_SAI1_Init+0x148>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <MX_SAI1_Init+0x148>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <MX_SAI1_Init+0x148>)
 80021f8:	2208      	movs	r2, #8
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <MX_SAI1_Init+0x148>)
 80021fe:	2201      	movs	r2, #1
 8002200:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <MX_SAI1_Init+0x148>)
 8002204:	2200      	movs	r2, #0
 8002206:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <MX_SAI1_Init+0x148>)
 800220a:	2200      	movs	r2, #0
 800220c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <MX_SAI1_Init+0x148>)
 8002210:	2200      	movs	r2, #0
 8002212:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8002214:	4b0d      	ldr	r3, [pc, #52]	; (800224c <MX_SAI1_Init+0x148>)
 8002216:	2200      	movs	r2, #0
 8002218:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <MX_SAI1_Init+0x148>)
 800221c:	2200      	movs	r2, #0
 800221e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <MX_SAI1_Init+0x148>)
 8002222:	2201      	movs	r2, #1
 8002224:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <MX_SAI1_Init+0x148>)
 8002228:	2200      	movs	r2, #0
 800222a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800222c:	4807      	ldr	r0, [pc, #28]	; (800224c <MX_SAI1_Init+0x148>)
 800222e:	f00f fce3 	bl	8011bf8 <HAL_SAI_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8002238:	f7ff fed0 	bl	8001fdc <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000b78 	.word	0x20000b78
 8002244:	40015404 	.word	0x40015404
 8002248:	0002ee00 	.word	0x0002ee00
 800224c:	20000bfc 	.word	0x20000bfc
 8002250:	40015424 	.word	0x40015424

08002254 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a33      	ldr	r2, [pc, #204]	; (8002330 <HAL_SAI_MspInit+0xdc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d135      	bne.n	80022d2 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8002266:	4b33      	ldr	r3, [pc, #204]	; (8002334 <HAL_SAI_MspInit+0xe0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10b      	bne.n	8002286 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800226e:	4b32      	ldr	r3, [pc, #200]	; (8002338 <HAL_SAI_MspInit+0xe4>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002272:	4a31      	ldr	r2, [pc, #196]	; (8002338 <HAL_SAI_MspInit+0xe4>)
 8002274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002278:	6613      	str	r3, [r2, #96]	; 0x60
 800227a:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <HAL_SAI_MspInit+0xe4>)
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002286:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <HAL_SAI_MspInit+0xe0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	4a29      	ldr	r2, [pc, #164]	; (8002334 <HAL_SAI_MspInit+0xe0>)
 800228e:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8002290:	2354      	movs	r3, #84	; 0x54
 8002292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80022a0:	230d      	movs	r3, #13
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	4824      	ldr	r0, [pc, #144]	; (800233c <HAL_SAI_MspInit+0xe8>)
 80022ac:	f00a faea 	bl	800c884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80022c2:	230d      	movs	r3, #13
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4619      	mov	r1, r3
 80022cc:	481c      	ldr	r0, [pc, #112]	; (8002340 <HAL_SAI_MspInit+0xec>)
 80022ce:	f00a fad9 	bl	800c884 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <HAL_SAI_MspInit+0xf0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d124      	bne.n	8002326 <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_SAI_MspInit+0xe0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10b      	bne.n	80022fc <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <HAL_SAI_MspInit+0xe4>)
 80022e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e8:	4a13      	ldr	r2, [pc, #76]	; (8002338 <HAL_SAI_MspInit+0xe4>)
 80022ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022ee:	6613      	str	r3, [r2, #96]	; 0x60
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_SAI_MspInit+0xe4>)
 80022f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_SAI_MspInit+0xe0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3301      	adds	r3, #1
 8002302:	4a0c      	ldr	r2, [pc, #48]	; (8002334 <HAL_SAI_MspInit+0xe0>)
 8002304:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8002306:	2308      	movs	r3, #8
 8002308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002316:	230d      	movs	r3, #13
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	4806      	ldr	r0, [pc, #24]	; (800233c <HAL_SAI_MspInit+0xe8>)
 8002322:	f00a faaf 	bl	800c884 <HAL_GPIO_Init>

    }
}
 8002326:	bf00      	nop
 8002328:	3728      	adds	r7, #40	; 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40015404 	.word	0x40015404
 8002334:	20000c80 	.word	0x20000c80
 8002338:	40021000 	.word	0x40021000
 800233c:	48001000 	.word	0x48001000
 8002340:	48000400 	.word	0x48000400
 8002344:	40015424 	.word	0x40015424

08002348 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800234c:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <MX_SDMMC1_SD_Init+0x58>)
 800234e:	4a15      	ldr	r2, [pc, #84]	; (80023a4 <MX_SDMMC1_SD_Init+0x5c>)
 8002350:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <MX_SDMMC1_SD_Init+0x58>)
 8002354:	2200      	movs	r2, #0
 8002356:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <MX_SDMMC1_SD_Init+0x58>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <MX_SDMMC1_SD_Init+0x58>)
 8002360:	2200      	movs	r2, #0
 8002362:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <MX_SDMMC1_SD_Init+0x58>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <MX_SDMMC1_SD_Init+0x58>)
 800236c:	2200      	movs	r2, #0
 800236e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <MX_SDMMC1_SD_Init+0x58>)
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002376:	480a      	ldr	r0, [pc, #40]	; (80023a0 <MX_SDMMC1_SD_Init+0x58>)
 8002378:	f00f fdea 	bl	8011f50 <HAL_SD_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8002382:	f7ff fe2b 	bl	8001fdc <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8002386:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800238a:	4805      	ldr	r0, [pc, #20]	; (80023a0 <MX_SDMMC1_SD_Init+0x58>)
 800238c:	f010 f85a 	bl	8012444 <HAL_SD_ConfigWideBusOperation>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8002396:	f7ff fe21 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000c84 	.word	0x20000c84
 80023a4:	40012800 	.word	0x40012800

080023a8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a25      	ldr	r2, [pc, #148]	; (800245c <HAL_SD_MspInit+0xb4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d144      	bne.n	8002454 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80023ca:	4b25      	ldr	r3, [pc, #148]	; (8002460 <HAL_SD_MspInit+0xb8>)
 80023cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ce:	4a24      	ldr	r2, [pc, #144]	; (8002460 <HAL_SD_MspInit+0xb8>)
 80023d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023d4:	6613      	str	r3, [r2, #96]	; 0x60
 80023d6:	4b22      	ldr	r3, [pc, #136]	; (8002460 <HAL_SD_MspInit+0xb8>)
 80023d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e2:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <HAL_SD_MspInit+0xb8>)
 80023e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e6:	4a1e      	ldr	r2, [pc, #120]	; (8002460 <HAL_SD_MspInit+0xb8>)
 80023e8:	f043 0308 	orr.w	r3, r3, #8
 80023ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ee:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <HAL_SD_MspInit+0xb8>)
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023fa:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_SD_MspInit+0xb8>)
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	4a18      	ldr	r2, [pc, #96]	; (8002460 <HAL_SD_MspInit+0xb8>)
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002406:	4b16      	ldr	r3, [pc, #88]	; (8002460 <HAL_SD_MspInit+0xb8>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8002412:	2304      	movs	r3, #4
 8002414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241e:	2303      	movs	r3, #3
 8002420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002422:	230c      	movs	r3, #12
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	480d      	ldr	r0, [pc, #52]	; (8002464 <HAL_SD_MspInit+0xbc>)
 800242e:	f00a fa29 	bl	800c884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8002432:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002436:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	2302      	movs	r3, #2
 800243a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002440:	2303      	movs	r3, #3
 8002442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002444:	230c      	movs	r3, #12
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	4806      	ldr	r0, [pc, #24]	; (8002468 <HAL_SD_MspInit+0xc0>)
 8002450:	f00a fa18 	bl	800c884 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002454:	bf00      	nop
 8002456:	3728      	adds	r7, #40	; 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40012800 	.word	0x40012800
 8002460:	40021000 	.word	0x40021000
 8002464:	48000c00 	.word	0x48000c00
 8002468:	48000800 	.word	0x48000800

0800246c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <MX_SPI1_Init+0x74>)
 8002472:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <MX_SPI1_Init+0x78>)
 8002474:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <MX_SPI1_Init+0x74>)
 8002478:	f44f 7282 	mov.w	r2, #260	; 0x104
 800247c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800247e:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <MX_SPI1_Init+0x74>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002484:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <MX_SPI1_Init+0x74>)
 8002486:	f44f 7240 	mov.w	r2, #768	; 0x300
 800248a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800248c:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <MX_SPI1_Init+0x74>)
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002492:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <MX_SPI1_Init+0x74>)
 8002494:	2200      	movs	r2, #0
 8002496:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <MX_SPI1_Init+0x74>)
 800249a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800249e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024ba:	2207      	movs	r2, #7
 80024bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024c6:	2208      	movs	r2, #8
 80024c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <MX_SPI1_Init+0x74>)
 80024cc:	f010 fb32 	bl	8012b34 <HAL_SPI_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024d6:	f7ff fd81 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000d08 	.word	0x20000d08
 80024e4:	40013000 	.word	0x40013000

080024e8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <MX_SPI2_Init+0x74>)
 80024ee:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <MX_SPI2_Init+0x78>)
 80024f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <MX_SPI2_Init+0x74>)
 80024f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <MX_SPI2_Init+0x74>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002500:	4b16      	ldr	r3, [pc, #88]	; (800255c <MX_SPI2_Init+0x74>)
 8002502:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002506:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002508:	4b14      	ldr	r3, [pc, #80]	; (800255c <MX_SPI2_Init+0x74>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800250e:	4b13      	ldr	r3, [pc, #76]	; (800255c <MX_SPI2_Init+0x74>)
 8002510:	2200      	movs	r2, #0
 8002512:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <MX_SPI2_Init+0x74>)
 8002516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <MX_SPI2_Init+0x74>)
 800251e:	2200      	movs	r2, #0
 8002520:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <MX_SPI2_Init+0x74>)
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <MX_SPI2_Init+0x74>)
 800252a:	2200      	movs	r2, #0
 800252c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <MX_SPI2_Init+0x74>)
 8002530:	2200      	movs	r2, #0
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <MX_SPI2_Init+0x74>)
 8002536:	2207      	movs	r2, #7
 8002538:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <MX_SPI2_Init+0x74>)
 800253c:	2200      	movs	r2, #0
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <MX_SPI2_Init+0x74>)
 8002542:	2208      	movs	r2, #8
 8002544:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002546:	4805      	ldr	r0, [pc, #20]	; (800255c <MX_SPI2_Init+0x74>)
 8002548:	f010 faf4 	bl	8012b34 <HAL_SPI_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002552:	f7ff fd43 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000d6c 	.word	0x20000d6c
 8002560:	40003800 	.word	0x40003800

08002564 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08e      	sub	sp, #56	; 0x38
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a4b      	ldr	r2, [pc, #300]	; (80026b0 <HAL_SPI_MspInit+0x14c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d146      	bne.n	8002614 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002586:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 8002588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258a:	4a4a      	ldr	r2, [pc, #296]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 800258c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002590:	6613      	str	r3, [r2, #96]	; 0x60
 8002592:	4b48      	ldr	r3, [pc, #288]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 8002594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259a:	623b      	str	r3, [r7, #32]
 800259c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	4b45      	ldr	r3, [pc, #276]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a2:	4a44      	ldr	r2, [pc, #272]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025aa:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b6:	4b3f      	ldr	r3, [pc, #252]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	4a3e      	ldr	r2, [pc, #248]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c2:	4b3c      	ldr	r3, [pc, #240]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80025ce:	2330      	movs	r3, #48	; 0x30
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025da:	2303      	movs	r3, #3
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025de:	2305      	movs	r3, #5
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e6:	4619      	mov	r1, r3
 80025e8:	4833      	ldr	r0, [pc, #204]	; (80026b8 <HAL_SPI_MspInit+0x154>)
 80025ea:	f00a f94b 	bl	800c884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 80025ee:	f248 0320 	movw	r3, #32800	; 0x8020
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fc:	2303      	movs	r3, #3
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002600:	2305      	movs	r3, #5
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002608:	4619      	mov	r1, r3
 800260a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800260e:	f00a f939 	bl	800c884 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002612:	e049      	b.n	80026a8 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a28      	ldr	r2, [pc, #160]	; (80026bc <HAL_SPI_MspInit+0x158>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d144      	bne.n	80026a8 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800261e:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	4a24      	ldr	r2, [pc, #144]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 8002624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002628:	6593      	str	r3, [r2, #88]	; 0x58
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002636:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	4a1e      	ldr	r2, [pc, #120]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002642:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264e:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	4a18      	ldr	r2, [pc, #96]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <HAL_SPI_MspInit+0x150>)
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8002666:	2306      	movs	r3, #6
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002672:	2303      	movs	r3, #3
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002676:	2305      	movs	r3, #5
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800267a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800267e:	4619      	mov	r1, r3
 8002680:	480f      	ldr	r0, [pc, #60]	; (80026c0 <HAL_SPI_MspInit+0x15c>)
 8002682:	f00a f8ff 	bl	800c884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8002686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002694:	2303      	movs	r3, #3
 8002696:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002698:	2305      	movs	r3, #5
 800269a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 800269c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a0:	4619      	mov	r1, r3
 80026a2:	4805      	ldr	r0, [pc, #20]	; (80026b8 <HAL_SPI_MspInit+0x154>)
 80026a4:	f00a f8ee 	bl	800c884 <HAL_GPIO_Init>
}
 80026a8:	bf00      	nop
 80026aa:	3738      	adds	r7, #56	; 0x38
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40013000 	.word	0x40013000
 80026b4:	40021000 	.word	0x40021000
 80026b8:	48000400 	.word	0x48000400
 80026bc:	40003800 	.word	0x40003800
 80026c0:	48002000 	.word	0x48002000

080026c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <HAL_MspInit+0x44>)
 80026cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ce:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <HAL_MspInit+0x44>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6613      	str	r3, [r2, #96]	; 0x60
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <HAL_MspInit+0x44>)
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_MspInit+0x44>)
 80026e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e6:	4a08      	ldr	r2, [pc, #32]	; (8002708 <HAL_MspInit+0x44>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ec:	6593      	str	r3, [r2, #88]	; 0x58
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_MspInit+0x44>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000

0800270c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002710:	e7fe      	b.n	8002710 <NMI_Handler+0x4>

08002712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002716:	e7fe      	b.n	8002716 <HardFault_Handler+0x4>

08002718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800271c:	e7fe      	b.n	800271c <MemManage_Handler+0x4>

0800271e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002722:	e7fe      	b.n	8002722 <BusFault_Handler+0x4>

08002724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <UsageFault_Handler+0x4>

0800272a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002758:	f008 fd7e 	bl	800b258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}

08002760 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQ_OUT_Pin);
 8002764:	2020      	movs	r0, #32
 8002766:	f00a fb29 	bl	800cdbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}

0800276e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 8002772:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002776:	f00a fb21 	bl	800cdbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 800277a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800277e:	f00a fb1d 	bl	800cdbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 8002782:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002786:	f00a fb19 	bl	800cdbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <OTG_FS_IRQHandler+0x10>)
 8002796:	f00b fe1f 	bl	800e3d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200026f0 	.word	0x200026f0

080027a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	e00a      	b.n	80027cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027b6:	f3af 8000 	nop.w
 80027ba:	4601      	mov	r1, r0
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	60ba      	str	r2, [r7, #8]
 80027c2:	b2ca      	uxtb	r2, r1
 80027c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3301      	adds	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	dbf0      	blt.n	80027b6 <_read+0x12>
	}

return len;
 80027d4:	687b      	ldr	r3, [r7, #4]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e009      	b.n	8002804 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	60ba      	str	r2, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3301      	adds	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	dbf1      	blt.n	80027f0 <_write+0x12>
	}
	return len;
 800280c:	687b      	ldr	r3, [r7, #4]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <_close>:

int _close(int file)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
	return -1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800283e:	605a      	str	r2, [r3, #4]
	return 0;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <_isatty>:

int _isatty(int file)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
	return 1;
 8002856:	2301      	movs	r3, #1
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
	return 0;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <_sbrk+0x5c>)
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <_sbrk+0x60>)
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <_sbrk+0x64>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <_sbrk+0x64>)
 800289e:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <_sbrk+0x68>)
 80028a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <_sbrk+0x64>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d207      	bcs.n	80028c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b0:	f016 fa50 	bl	8018d54 <__errno>
 80028b4:	4603      	mov	r3, r0
 80028b6:	220c      	movs	r2, #12
 80028b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028be:	e009      	b.n	80028d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <_sbrk+0x64>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028c6:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <_sbrk+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	4a05      	ldr	r2, [pc, #20]	; (80028e4 <_sbrk+0x64>)
 80028d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028d2:	68fb      	ldr	r3, [r7, #12]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20050000 	.word	0x20050000
 80028e0:	00000400 	.word	0x00000400
 80028e4:	20000dd0 	.word	0x20000dd0
 80028e8:	20002e30 	.word	0x20002e30

080028ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <SystemInit+0x20>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <SystemInit+0x20>)
 80028f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <MX_TIM6_Init+0x64>)
 8002922:	4a15      	ldr	r2, [pc, #84]	; (8002978 <MX_TIM6_Init+0x68>)
 8002924:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <MX_TIM6_Init+0x64>)
 8002928:	2263      	movs	r2, #99	; 0x63
 800292a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <MX_TIM6_Init+0x64>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19200-1;
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <MX_TIM6_Init+0x64>)
 8002934:	f644 22ff 	movw	r2, #19199	; 0x4aff
 8002938:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <MX_TIM6_Init+0x64>)
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002940:	480c      	ldr	r0, [pc, #48]	; (8002974 <MX_TIM6_Init+0x64>)
 8002942:	f010 f9e2 	bl	8012d0a <HAL_TIM_Base_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800294c:	f7ff fb46 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002950:	2300      	movs	r3, #0
 8002952:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	4619      	mov	r1, r3
 800295c:	4805      	ldr	r0, [pc, #20]	; (8002974 <MX_TIM6_Init+0x64>)
 800295e:	f011 f939 	bl	8013bd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002968:	f7ff fb38 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000dd4 	.word	0x20000dd4
 8002978:	40001000 	.word	0x40001000

0800297c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <HAL_TIM_Base_MspInit+0x38>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d10b      	bne.n	80029a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_TIM_Base_MspInit+0x3c>)
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	4a09      	ldr	r2, [pc, #36]	; (80029b8 <HAL_TIM_Base_MspInit+0x3c>)
 8002994:	f043 0310 	orr.w	r3, r3, #16
 8002998:	6593      	str	r3, [r2, #88]	; 0x58
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <HAL_TIM_Base_MspInit+0x3c>)
 800299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40001000 	.word	0x40001000
 80029b8:	40021000 	.word	0x40021000

080029bc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <MX_LPUART1_UART_Init+0x50>)
 80029c2:	4a13      	ldr	r2, [pc, #76]	; (8002a10 <MX_LPUART1_UART_Init+0x54>)
 80029c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <MX_LPUART1_UART_Init+0x50>)
 80029c8:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <MX_LPUART1_UART_Init+0x58>)
 80029ca:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <MX_LPUART1_UART_Init+0x50>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <MX_LPUART1_UART_Init+0x50>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <MX_LPUART1_UART_Init+0x50>)
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <MX_LPUART1_UART_Init+0x50>)
 80029e0:	220c      	movs	r2, #12
 80029e2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <MX_LPUART1_UART_Init+0x50>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <MX_LPUART1_UART_Init+0x50>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <MX_LPUART1_UART_Init+0x50>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80029f6:	4805      	ldr	r0, [pc, #20]	; (8002a0c <MX_LPUART1_UART_Init+0x50>)
 80029f8:	f011 f974 	bl	8013ce4 <HAL_UART_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 8002a02:	f7ff faeb 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000e20 	.word	0x20000e20
 8002a10:	40008000 	.word	0x40008000
 8002a14:	00033324 	.word	0x00033324

08002a18 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <MX_USART1_UART_Init+0x58>)
 8002a1e:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <MX_USART1_UART_Init+0x5c>)
 8002a20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a22:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <MX_USART1_UART_Init+0x58>)
 8002a24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <MX_USART1_UART_Init+0x58>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <MX_USART1_UART_Init+0x58>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <MX_USART1_UART_Init+0x58>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <MX_USART1_UART_Init+0x58>)
 8002a3e:	220c      	movs	r2, #12
 8002a40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <MX_USART1_UART_Init+0x58>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <MX_USART1_UART_Init+0x58>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <MX_USART1_UART_Init+0x58>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <MX_USART1_UART_Init+0x58>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a5a:	4805      	ldr	r0, [pc, #20]	; (8002a70 <MX_USART1_UART_Init+0x58>)
 8002a5c:	f011 f942 	bl	8013ce4 <HAL_UART_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002a66:	f7ff fab9 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000ea4 	.word	0x20000ea4
 8002a74:	40013800 	.word	0x40013800

08002a78 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <MX_USART2_UART_Init+0x58>)
 8002a7e:	4a15      	ldr	r2, [pc, #84]	; (8002ad4 <MX_USART2_UART_Init+0x5c>)
 8002a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a82:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <MX_USART2_UART_Init+0x58>)
 8002a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <MX_USART2_UART_Init+0x58>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <MX_USART2_UART_Init+0x58>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <MX_USART2_UART_Init+0x58>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <MX_USART2_UART_Init+0x58>)
 8002a9e:	220c      	movs	r2, #12
 8002aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <MX_USART2_UART_Init+0x58>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <MX_USART2_UART_Init+0x58>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <MX_USART2_UART_Init+0x58>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <MX_USART2_UART_Init+0x58>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002aba:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <MX_USART2_UART_Init+0x58>)
 8002abc:	f011 f912 	bl	8013ce4 <HAL_UART_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002ac6:	f7ff fa89 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000f28 	.word	0x20000f28
 8002ad4:	40004400 	.word	0x40004400

08002ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b0b2      	sub	sp, #200	; 0xc8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002af4:	228c      	movs	r2, #140	; 0x8c
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f016 f963 	bl	8018dc4 <memset>
  if(uartHandle->Instance==LPUART1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a86      	ldr	r2, [pc, #536]	; (8002d1c <HAL_UART_MspInit+0x244>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d13e      	bne.n	8002b86 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b08:	2320      	movs	r3, #32
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b14:	4618      	mov	r0, r3
 8002b16:	f00d fcdb 	bl	80104d0 <HAL_RCCEx_PeriphCLKConfig>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b20:	f7ff fa5c 	bl	8001fdc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b24:	4b7e      	ldr	r3, [pc, #504]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	4a7d      	ldr	r2, [pc, #500]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002b30:	4b7b      	ldr	r3, [pc, #492]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b3c:	4b78      	ldr	r3, [pc, #480]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b40:	4a77      	ldr	r2, [pc, #476]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b48:	4b75      	ldr	r3, [pc, #468]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	623b      	str	r3, [r7, #32]
 8002b52:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8002b54:	f00c fd64 	bl	800f620 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8002b58:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002b72:	2308      	movs	r3, #8
 8002b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4869      	ldr	r0, [pc, #420]	; (8002d24 <HAL_UART_MspInit+0x24c>)
 8002b80:	f009 fe80 	bl	800c884 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b84:	e0c6      	b.n	8002d14 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a67      	ldr	r2, [pc, #412]	; (8002d28 <HAL_UART_MspInit+0x250>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d15f      	bne.n	8002c50 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b90:	2301      	movs	r3, #1
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b94:	2300      	movs	r3, #0
 8002b96:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f00d fc97 	bl	80104d0 <HAL_RCCEx_PeriphCLKConfig>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002ba8:	f7ff fa18 	bl	8001fdc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bac:	4b5c      	ldr	r3, [pc, #368]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb0:	4a5b      	ldr	r2, [pc, #364]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb6:	6613      	str	r3, [r2, #96]	; 0x60
 8002bb8:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc4:	4b56      	ldr	r3, [pc, #344]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc8:	4a55      	ldr	r2, [pc, #340]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002bca:	f043 0302 	orr.w	r3, r3, #2
 8002bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be0:	4a4f      	ldr	r2, [pc, #316]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be8:	4b4d      	ldr	r3, [pc, #308]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8002bf4:	f00c fd14 	bl	800f620 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8002bf8:	2340      	movs	r3, #64	; 0x40
 8002bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c10:	2307      	movs	r3, #7
 8002c12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8002c16:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4843      	ldr	r0, [pc, #268]	; (8002d2c <HAL_UART_MspInit+0x254>)
 8002c1e:	f009 fe31 	bl	800c884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8002c22:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c36:	2303      	movs	r3, #3
 8002c38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c3c:	2307      	movs	r3, #7
 8002c3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c42:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c46:	4619      	mov	r1, r3
 8002c48:	4836      	ldr	r0, [pc, #216]	; (8002d24 <HAL_UART_MspInit+0x24c>)
 8002c4a:	f009 fe1b 	bl	800c884 <HAL_GPIO_Init>
}
 8002c4e:	e061      	b.n	8002d14 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a36      	ldr	r2, [pc, #216]	; (8002d30 <HAL_UART_MspInit+0x258>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d15c      	bne.n	8002d14 <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c66:	4618      	mov	r0, r3
 8002c68:	f00d fc32 	bl	80104d0 <HAL_RCCEx_PeriphCLKConfig>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8002c72:	f7ff f9b3 	bl	8001fdc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c76:	4b2a      	ldr	r3, [pc, #168]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7a:	4a29      	ldr	r2, [pc, #164]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c80:	6593      	str	r3, [r2, #88]	; 0x58
 8002c82:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c8e:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	4a23      	ldr	r2, [pc, #140]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c9a:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002caa:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_UART_MspInit+0x248>)
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8002cbe:	2340      	movs	r3, #64	; 0x40
 8002cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8002cdc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4814      	ldr	r0, [pc, #80]	; (8002d34 <HAL_UART_MspInit+0x25c>)
 8002ce4:	f009 fdce 	bl	800c884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8002ce8:	2304      	movs	r3, #4
 8002cea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d00:	2307      	movs	r3, #7
 8002d02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8002d06:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d10:	f009 fdb8 	bl	800c884 <HAL_GPIO_Init>
}
 8002d14:	bf00      	nop
 8002d16:	37c8      	adds	r7, #200	; 0xc8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40008000 	.word	0x40008000
 8002d20:	40021000 	.word	0x40021000
 8002d24:	48001800 	.word	0x48001800
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	48000400 	.word	0x48000400
 8002d30:	40004400 	.word	0x40004400
 8002d34:	48000c00 	.word	0x48000c00

08002d38 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	330a      	adds	r3, #10
 8002d48:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002d56:	b299      	uxth	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	f00a f900 	bl	800cf68 <HAL_I2C_Master_Transmit>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002d6c:	693b      	ldr	r3, [r7, #16]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b088      	sub	sp, #32
 8002d7a:	af02      	add	r7, sp, #8
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	330a      	adds	r3, #10
 8002d86:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	b299      	uxth	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	f00a f9d2 	bl	800d150 <HAL_I2C_Master_Receive>
 8002dac:	4603      	mov	r3, r0
 8002dae:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002db0:	693b      	ldr	r3, [r7, #16]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	603b      	str	r3, [r7, #0]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b3f      	cmp	r3, #63	; 0x3f
 8002dd4:	d902      	bls.n	8002ddc <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8002dd6:	f06f 0303 	mvn.w	r3, #3
 8002dda:	e016      	b.n	8002e0a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8002ddc:	4a0d      	ldr	r2, [pc, #52]	; (8002e14 <VL53L0X_WriteMulti+0x58>)
 8002dde:	7afb      	ldrb	r3, [r7, #11]
 8002de0:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	480c      	ldr	r0, [pc, #48]	; (8002e18 <VL53L0X_WriteMulti+0x5c>)
 8002de8:	f015 ffde 	bl	8018da8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	3301      	adds	r3, #1
 8002df0:	461a      	mov	r2, r3
 8002df2:	4908      	ldr	r1, [pc, #32]	; (8002e14 <VL53L0X_WriteMulti+0x58>)
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7ff ff9f 	bl	8002d38 <_I2CWrite>
 8002dfa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002e02:	23ec      	movs	r3, #236	; 0xec
 8002e04:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002e06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000fac 	.word	0x20000fac
 8002e18:	20000fad 	.word	0x20000fad

08002e1c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002e30:	f107 030b 	add.w	r3, r7, #11
 8002e34:	2201      	movs	r2, #1
 8002e36:	4619      	mov	r1, r3
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff ff7d 	bl	8002d38 <_I2CWrite>
 8002e3e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002e46:	23ec      	movs	r3, #236	; 0xec
 8002e48:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002e4a:	e00c      	b.n	8002e66 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff ff90 	bl	8002d76 <_I2CRead>
 8002e56:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002e5e:	23ec      	movs	r3, #236	; 0xec
 8002e60:	75fb      	strb	r3, [r7, #23]
 8002e62:	e000      	b.n	8002e66 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8002e64:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8002e66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	70fb      	strb	r3, [r7, #3]
 8002e80:	4613      	mov	r3, r2
 8002e82:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8002e88:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <VL53L0X_WrByte+0x44>)
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <VL53L0X_WrByte+0x44>)
 8002e90:	78bb      	ldrb	r3, [r7, #2]
 8002e92:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8002e94:	2202      	movs	r2, #2
 8002e96:	4908      	ldr	r1, [pc, #32]	; (8002eb8 <VL53L0X_WrByte+0x44>)
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff ff4d 	bl	8002d38 <_I2CWrite>
 8002e9e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002ea6:	23ec      	movs	r3, #236	; 0xec
 8002ea8:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000fac 	.word	0x20000fac

08002ebc <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	70fb      	strb	r3, [r7, #3]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8002ed0:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <VL53L0X_WrWord+0x50>)
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8002ed6:	883b      	ldrh	r3, [r7, #0]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <VL53L0X_WrWord+0x50>)
 8002ee0:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8002ee2:	883b      	ldrh	r3, [r7, #0]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <VL53L0X_WrWord+0x50>)
 8002ee8:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8002eea:	2203      	movs	r2, #3
 8002eec:	4907      	ldr	r1, [pc, #28]	; (8002f0c <VL53L0X_WrWord+0x50>)
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ff22 	bl	8002d38 <_I2CWrite>
 8002ef4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002efc:	23ec      	movs	r3, #236	; 0xec
 8002efe:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20000fac 	.word	0x20000fac

08002f10 <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    _I2CBuffer[0] = index;
 8002f22:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <VL53L0X_WrDWord+0x60>)
 8002f24:	7afb      	ldrb	r3, [r7, #11]
 8002f26:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = (data >> 24) & 0xFF;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	0e1b      	lsrs	r3, r3, #24
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <VL53L0X_WrDWord+0x60>)
 8002f30:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 16) & 0xFF;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	0c1b      	lsrs	r3, r3, #16
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <VL53L0X_WrDWord+0x60>)
 8002f3a:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 8)  & 0xFF;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	0a1b      	lsrs	r3, r3, #8
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <VL53L0X_WrDWord+0x60>)
 8002f44:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 0 ) & 0xFF;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <VL53L0X_WrDWord+0x60>)
 8002f4c:	711a      	strb	r2, [r3, #4]
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 5);
 8002f4e:	2205      	movs	r2, #5
 8002f50:	4907      	ldr	r1, [pc, #28]	; (8002f70 <VL53L0X_WrDWord+0x60>)
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff fef0 	bl	8002d38 <_I2CWrite>
 8002f58:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <VL53L0X_WrDWord+0x54>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002f60:	23ec      	movs	r3, #236	; 0xec
 8002f62:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002f64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000fac 	.word	0x20000fac

08002f74 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	4608      	mov	r0, r1
 8002f7e:	4611      	mov	r1, r2
 8002f80:	461a      	mov	r2, r3
 8002f82:	4603      	mov	r3, r0
 8002f84:	70fb      	strb	r3, [r7, #3]
 8002f86:	460b      	mov	r3, r1
 8002f88:	70bb      	strb	r3, [r7, #2]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8002f92:	f107 020e 	add.w	r2, r7, #14
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f81e 	bl	8002fdc <VL53L0X_RdByte>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8002fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d110      	bne.n	8002fce <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8002fac:	7bba      	ldrb	r2, [r7, #14]
 8002fae:	78bb      	ldrb	r3, [r7, #2]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	787b      	ldrb	r3, [r7, #1]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8002fbc:	7bba      	ldrb	r2, [r7, #14]
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ff56 	bl	8002e74 <VL53L0X_WrByte>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	73fb      	strb	r3, [r7, #15]
 8002fcc:	e000      	b.n	8002fd0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8002fce:	bf00      	nop
done:
    return Status;
 8002fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002fee:	f107 030b 	add.w	r3, r7, #11
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f7ff fe9e 	bl	8002d38 <_I2CWrite>
 8002ffc:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003004:	23ec      	movs	r3, #236	; 0xec
 8003006:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003008:	e00c      	b.n	8003024 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800300a:	2201      	movs	r2, #1
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff feb1 	bl	8002d76 <_I2CRead>
 8003014:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800301c:	23ec      	movs	r3, #236	; 0xec
 800301e:	75fb      	strb	r3, [r7, #23]
 8003020:	e000      	b.n	8003024 <VL53L0X_RdByte+0x48>
    }
done:
 8003022:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8003024:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	460b      	mov	r3, r1
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8003042:	f107 030b 	add.w	r3, r7, #11
 8003046:	2201      	movs	r2, #1
 8003048:	4619      	mov	r1, r3
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f7ff fe74 	bl	8002d38 <_I2CWrite>
 8003050:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003058:	23ec      	movs	r3, #236	; 0xec
 800305a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800305c:	e017      	b.n	800308e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800305e:	2202      	movs	r2, #2
 8003060:	490e      	ldr	r1, [pc, #56]	; (800309c <VL53L0X_RdWord+0x6c>)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f7ff fe87 	bl	8002d76 <_I2CRead>
 8003068:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003070:	23ec      	movs	r3, #236	; 0xec
 8003072:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003074:	e00b      	b.n	800308e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <VL53L0X_RdWord+0x6c>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	b29a      	uxth	r2, r3
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <VL53L0X_RdWord+0x6c>)
 8003082:	785b      	ldrb	r3, [r3, #1]
 8003084:	b29b      	uxth	r3, r3
 8003086:	4413      	add	r3, r2
 8003088:	b29a      	uxth	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800308e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000fac 	.word	0x20000fac

080030a0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	460b      	mov	r3, r1
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80030b2:	f107 030b 	add.w	r3, r7, #11
 80030b6:	2201      	movs	r2, #1
 80030b8:	4619      	mov	r1, r3
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f7ff fe3c 	bl	8002d38 <_I2CWrite>
 80030c0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80030c8:	23ec      	movs	r3, #236	; 0xec
 80030ca:	75fb      	strb	r3, [r7, #23]
        goto done;
 80030cc:	e01b      	b.n	8003106 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80030ce:	2204      	movs	r2, #4
 80030d0:	4910      	ldr	r1, [pc, #64]	; (8003114 <VL53L0X_RdDWord+0x74>)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f7ff fe4f 	bl	8002d76 <_I2CRead>
 80030d8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80030e0:	23ec      	movs	r3, #236	; 0xec
 80030e2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80030e4:	e00f      	b.n	8003106 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80030e6:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <VL53L0X_RdDWord+0x74>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	061a      	lsls	r2, r3, #24
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <VL53L0X_RdDWord+0x74>)
 80030ee:	785b      	ldrb	r3, [r3, #1]
 80030f0:	041b      	lsls	r3, r3, #16
 80030f2:	441a      	add	r2, r3
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <VL53L0X_RdDWord+0x74>)
 80030f6:	789b      	ldrb	r3, [r3, #2]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	4413      	add	r3, r2
 80030fc:	4a05      	ldr	r2, [pc, #20]	; (8003114 <VL53L0X_RdDWord+0x74>)
 80030fe:	78d2      	ldrb	r2, [r2, #3]
 8003100:	441a      	add	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8003106:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000fac 	.word	0x20000fac

08003118 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8003124:	2002      	movs	r0, #2
 8003126:	f008 f8b7 	bl	800b298 <HAL_Delay>
    return status;
 800312a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003170 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800313c:	f7ff fbd6 	bl	80028ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003140:	480c      	ldr	r0, [pc, #48]	; (8003174 <LoopForever+0x6>)
  ldr r1, =_edata
 8003142:	490d      	ldr	r1, [pc, #52]	; (8003178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003144:	4a0d      	ldr	r2, [pc, #52]	; (800317c <LoopForever+0xe>)
  movs r3, #0
 8003146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003148:	e002      	b.n	8003150 <LoopCopyDataInit>

0800314a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800314a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800314c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800314e:	3304      	adds	r3, #4

08003150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003154:	d3f9      	bcc.n	800314a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003156:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003158:	4c0a      	ldr	r4, [pc, #40]	; (8003184 <LoopForever+0x16>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800315c:	e001      	b.n	8003162 <LoopFillZerobss>

0800315e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800315e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003160:	3204      	adds	r2, #4

08003162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003164:	d3fb      	bcc.n	800315e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003166:	f015 fdfb 	bl	8018d60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800316a:	f7fe fa31 	bl	80015d0 <main>

0800316e <LoopForever>:

LoopForever:
    b LoopForever
 800316e:	e7fe      	b.n	800316e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003170:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003178:	20000744 	.word	0x20000744
  ldr r2, =_sidata
 800317c:	0801bf6c 	.word	0x0801bf6c
  ldr r2, =_sbss
 8003180:	20000744 	.word	0x20000744
  ldr r4, =_ebss
 8003184:	20002e2c 	.word	0x20002e2c

08003188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003188:	e7fe      	b.n	8003188 <ADC1_2_IRQHandler>
	...

0800318c <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f90d 	bl	80033b8 <ft6x06_GetInstance>
 800319e:	4603      	mov	r3, r0
 80031a0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	2bff      	cmp	r3, #255	; 0xff
 80031a6:	d10e      	bne.n	80031c6 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 80031a8:	2000      	movs	r0, #0
 80031aa:	f000 f905 	bl	80033b8 <ft6x06_GetInstance>
 80031ae:	4603      	mov	r3, r0
 80031b0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 80031b2:	7bbb      	ldrb	r3, [r7, #14]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d806      	bhi.n	80031c6 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 80031b8:	7bbb      	ldrb	r3, [r7, #14]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	b2d1      	uxtb	r1, r2
 80031be:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <ft6x06_Init+0x44>)
 80031c0:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 80031c2:	f006 fee7 	bl	8009f94 <TS_IO_Init>
    }
  }
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000fec 	.word	0x20000fec

080031d4 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 80031f4:	f006 fece 	bl	8009f94 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	21a8      	movs	r1, #168	; 0xa8
 80031fe:	4618      	mov	r0, r3
 8003200:	f006 ff0e 	bl	800a020 <TS_IO_Read>
 8003204:	4603      	mov	r3, r0
 8003206:	b29b      	uxth	r3, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	4618      	mov	r0, r3
 800321e:	f000 f8bc 	bl	800339a <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f88d 	bl	8003344 <ft6x06_TS_DisableIT>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2102      	movs	r1, #2
 8003248:	4618      	mov	r0, r3
 800324a:	f006 fee9 	bl	800a020 <TS_IO_Read>
 800324e:	4603      	mov	r3, r0
 8003250:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	b2db      	uxtb	r3, r3
 800325c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <ft6x06_TS_DetectTouch+0x50>)
 8003270:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8003272:	4b04      	ldr	r3, [pc, #16]	; (8003284 <ft6x06_TS_DetectTouch+0x50>)
 8003274:	2200      	movs	r2, #0
 8003276:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	b2db      	uxtb	r3, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20000ff0 	.word	0x20000ff0

08003288 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 800329a:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <ft6x06_TS_GetXY+0x90>)
 800329c:	789a      	ldrb	r2, [r3, #2]
 800329e:	4b1e      	ldr	r3, [pc, #120]	; (8003318 <ft6x06_TS_GetXY+0x90>)
 80032a0:	785b      	ldrb	r3, [r3, #1]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d234      	bcs.n	8003310 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80032a6:	4b1c      	ldr	r3, [pc, #112]	; (8003318 <ft6x06_TS_GetXY+0x90>)
 80032a8:	789b      	ldrb	r3, [r3, #2]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <ft6x06_TS_GetXY+0x2c>
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d003      	beq.n	80032ba <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 80032b2:	e005      	b.n	80032c0 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 80032b4:	2303      	movs	r3, #3
 80032b6:	75fb      	strb	r3, [r7, #23]
      break;
 80032b8:	e002      	b.n	80032c0 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 80032ba:	2309      	movs	r3, #9
 80032bc:	75fb      	strb	r3, [r7, #23]
      break;
 80032be:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 80032c0:	89fb      	ldrh	r3, [r7, #14]
 80032c2:	b2d8      	uxtb	r0, r3
 80032c4:	f107 0210 	add.w	r2, r7, #16
 80032c8:	7df9      	ldrb	r1, [r7, #23]
 80032ca:	2304      	movs	r3, #4
 80032cc:	f006 febe 	bl	800a04c <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80032d0:	7c3b      	ldrb	r3, [r7, #16]
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	b21b      	sxth	r3, r3
 80032d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80032da:	b21a      	sxth	r2, r3
 80032dc:	7c7b      	ldrb	r3, [r7, #17]
 80032de:	b21b      	sxth	r3, r3
 80032e0:	4313      	orrs	r3, r2
 80032e2:	b21b      	sxth	r3, r3
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80032ea:	7cbb      	ldrb	r3, [r7, #18]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	b21b      	sxth	r3, r3
 80032f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80032f4:	b21a      	sxth	r2, r3
 80032f6:	7cfb      	ldrb	r3, [r7, #19]
 80032f8:	b21b      	sxth	r3, r3
 80032fa:	4313      	orrs	r3, r2
 80032fc:	b21b      	sxth	r3, r3
 80032fe:	b29a      	uxth	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <ft6x06_TS_GetXY+0x90>)
 8003306:	789b      	ldrb	r3, [r3, #2]
 8003308:	3301      	adds	r3, #1
 800330a:	b2da      	uxtb	r2, r3
 800330c:	4b02      	ldr	r3, [pc, #8]	; (8003318 <ft6x06_TS_GetXY+0x90>)
 800330e:	709a      	strb	r2, [r3, #2]
  }
}
 8003310:	bf00      	nop
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000ff0 	.word	0x20000ff0

0800331c <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	21a4      	movs	r1, #164	; 0xa4
 8003336:	4618      	mov	r0, r3
 8003338:	f006 fe58 	bl	8009fec <TS_IO_Write>
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8003352:	2300      	movs	r3, #0
 8003354:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	21a4      	movs	r1, #164	; 0xa4
 800335e:	4618      	mov	r0, r3
 8003360:	f006 fe44 	bl	8009fec <TS_IO_Write>
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 800339a:	b480      	push	{r7}
 800339c:	b085      	sub	sp, #20
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4603      	mov	r3, r0
 80033a2:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80033a8:	68fb      	ldr	r3, [r7, #12]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
 80033ca:	e00b      	b.n	80033e4 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <ft6x06_GetInstance+0x40>)
 80033d0:	5cd3      	ldrb	r3, [r2, r3]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d101      	bne.n	80033de <ft6x06_GetInstance+0x26>
    {
      return idx; 
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	e006      	b.n	80033ec <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	3301      	adds	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d9f0      	bls.n	80033cc <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80033ea:	23ff      	movs	r3, #255	; 0xff
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	20000fec 	.word	0x20000fec

080033fc <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	4618      	mov	r0, r3
 800340a:	f000 ffd1 	bl	80043b0 <mfxstm32l152_GetInstance>
 800340e:	4603      	mov	r3, r0
 8003410:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	2bff      	cmp	r3, #255	; 0xff
 8003416:	d10e      	bne.n	8003436 <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8003418:	2000      	movs	r0, #0
 800341a:	f000 ffc9 	bl	80043b0 <mfxstm32l152_GetInstance>
 800341e:	4603      	mov	r3, r0
 8003420:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 8003422:	7bbb      	ldrb	r3, [r7, #14]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d806      	bhi.n	8003436 <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8003428:	7bbb      	ldrb	r3, [r7, #14]
 800342a:	88fa      	ldrh	r2, [r7, #6]
 800342c:	b2d1      	uxtb	r1, r2
 800342e:	4a09      	ldr	r2, [pc, #36]	; (8003454 <mfxstm32l152_Init+0x58>)
 8003430:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 8003432:	f006 fb81 	bl	8009b38 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	2102      	movs	r1, #2
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f8db 	bl	80035f6 <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	2101      	movs	r1, #1
 8003444:	4618      	mov	r0, r3
 8003446:	f000 f8fc 	bl	8003642 <mfxstm32l152_SetIrqOutPinType>
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000ff4 	.word	0x20000ff4

08003458 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 ffc3 	bl	80043f0 <mfxstm32l152_ReleaseInstance>
 800346a:	4603      	mov	r3, r0
 800346c:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	2bff      	cmp	r3, #255	; 0xff
 8003472:	d001      	beq.n	8003478 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 8003474:	f006 fb70 	bl	8009b58 <MFX_IO_DeInit>
  }
}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	2280      	movs	r2, #128	; 0x80
 800348e:	2140      	movs	r1, #64	; 0x40
 8003490:	4618      	mov	r0, r3
 8003492:	f006 fc03 	bl	8009c9c <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8003496:	200a      	movs	r0, #10
 8003498:	f006 fc42 	bl	8009d20 <MFX_IO_Delay>
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	2240      	movs	r2, #64	; 0x40
 80034b2:	2140      	movs	r1, #64	; 0x40
 80034b4:	4618      	mov	r0, r3
 80034b6:	f006 fbf1 	bl	8009c9c <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 80034ba:	f006 fbb7 	bl	8009c2c <MFX_IO_EnableWakeupPin>
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4603      	mov	r3, r0
 80034ce:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 ff6c 	bl	80043b0 <mfxstm32l152_GetInstance>
 80034d8:	4603      	mov	r3, r0
 80034da:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2bff      	cmp	r3, #255	; 0xff
 80034e0:	d101      	bne.n	80034e6 <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 80034e2:	f006 fba3 	bl	8009c2c <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 80034e6:	f006 fbc5 	bl	8009c74 <MFX_IO_Wakeup>
}
 80034ea:	bf00      	nop
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 80034fc:	2001      	movs	r0, #1
 80034fe:	f006 fc0f 	bl	8009d20 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 8003502:	f006 fb19 	bl	8009b38 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f006 fbda 	bl	8009cc4 <MFX_IO_Read>
 8003510:	4603      	mov	r3, r0
 8003512:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	b29b      	uxth	r3, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	460a      	mov	r2, r1
 800352a:	80fb      	strh	r3, [r7, #6]
 800352c:	4613      	mov	r3, r2
 800352e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	2142      	movs	r1, #66	; 0x42
 8003538:	4618      	mov	r0, r3
 800353a:	f006 fbc3 	bl	8009cc4 <MFX_IO_Read>
 800353e:	4603      	mov	r3, r0
 8003540:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	797b      	ldrb	r3, [r7, #5]
 8003546:	4313      	orrs	r3, r2
 8003548:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	2142      	movs	r1, #66	; 0x42
 8003550:	4618      	mov	r0, r3
 8003552:	f006 fba3 	bl	8009c9c <MFX_IO_Write>
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	460a      	mov	r2, r1
 8003568:	80fb      	strh	r3, [r7, #6]
 800356a:	4613      	mov	r3, r2
 800356c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	2142      	movs	r1, #66	; 0x42
 8003576:	4618      	mov	r0, r3
 8003578:	f006 fba4 	bl	8009cc4 <MFX_IO_Read>
 800357c:	4603      	mov	r3, r0
 800357e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 8003580:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003584:	43db      	mvns	r3, r3
 8003586:	b25a      	sxtb	r2, r3
 8003588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358c:	4013      	ands	r3, r2
 800358e:	b25b      	sxtb	r3, r3
 8003590:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	2142      	movs	r1, #66	; 0x42
 8003598:	4618      	mov	r0, r3
 800359a:	f006 fb7f 	bl	8009c9c <MFX_IO_Write>
}
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	4603      	mov	r3, r0
 80035ae:	460a      	mov	r2, r1
 80035b0:	80fb      	strh	r3, [r7, #6]
 80035b2:	4613      	mov	r3, r2
 80035b4:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	2108      	movs	r1, #8
 80035ba:	4618      	mov	r0, r3
 80035bc:	f006 fb82 	bl	8009cc4 <MFX_IO_Read>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	797b      	ldrb	r3, [r7, #5]
 80035c6:	4013      	ands	r3, r2
 80035c8:	b2db      	uxtb	r3, r3
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	4603      	mov	r3, r0
 80035da:	460a      	mov	r2, r1
 80035dc:	80fb      	strh	r3, [r7, #6]
 80035de:	4613      	mov	r3, r2
 80035e0:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 80035e2:	797a      	ldrb	r2, [r7, #5]
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	2144      	movs	r1, #68	; 0x44
 80035e8:	4618      	mov	r0, r3
 80035ea:	f006 fb57 	bl	8009c9c <MFX_IO_Write>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	4603      	mov	r3, r0
 80035fe:	460a      	mov	r2, r1
 8003600:	80fb      	strh	r3, [r7, #6]
 8003602:	4613      	mov	r3, r2
 8003604:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	2141      	movs	r1, #65	; 0x41
 800360e:	4618      	mov	r0, r3
 8003610:	f006 fb58 	bl	8009cc4 <MFX_IO_Read>
 8003614:	4603      	mov	r3, r0
 8003616:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	f023 0302 	bic.w	r3, r3, #2
 800361e:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	797b      	ldrb	r3, [r7, #5]
 8003624:	4313      	orrs	r3, r2
 8003626:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2141      	movs	r1, #65	; 0x41
 800362e:	4618      	mov	r0, r3
 8003630:	f006 fb34 	bl	8009c9c <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003634:	2001      	movs	r0, #1
 8003636:	f006 fb73 	bl	8009d20 <MFX_IO_Delay>

}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	460a      	mov	r2, r1
 800364c:	80fb      	strh	r3, [r7, #6]
 800364e:	4613      	mov	r3, r2
 8003650:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	2141      	movs	r1, #65	; 0x41
 800365a:	4618      	mov	r0, r3
 800365c:	f006 fb32 	bl	8009cc4 <MFX_IO_Read>
 8003660:	4603      	mov	r3, r0
 8003662:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 800366c:	7bfa      	ldrb	r2, [r7, #15]
 800366e:	797b      	ldrb	r3, [r7, #5]
 8003670:	4313      	orrs	r3, r2
 8003672:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	2141      	movs	r1, #65	; 0x41
 800367a:	4618      	mov	r0, r3
 800367c:	f006 fb0e 	bl	8009c9c <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003680:	2001      	movs	r0, #1
 8003682:	f006 fb4d 	bl	8009d20 <MFX_IO_Delay>

}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	4603      	mov	r3, r0
 8003696:	6039      	str	r1, [r7, #0]
 8003698:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	2140      	movs	r1, #64	; 0x40
 800369e:	4618      	mov	r0, r3
 80036a0:	f006 fb10 	bl	8009cc4 <MFX_IO_Read>
 80036a4:	4603      	mov	r3, r0
 80036a6:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b6:	d304      	bcc.n	80036c2 <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	f043 0308 	orr.w	r3, r3, #8
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e003      	b.n	80036ca <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	f023 0308 	bic.w	r3, r3, #8
 80036c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80036ca:	7bfa      	ldrb	r2, [r7, #15]
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	2140      	movs	r1, #64	; 0x40
 80036d0:	4618      	mov	r0, r3
 80036d2:	f006 fae3 	bl	8009c9c <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80036d6:	2001      	movs	r0, #1
 80036d8:	f006 fb22 	bl	8009d20 <MFX_IO_Delay>
}
 80036dc:	bf00      	nop
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	6039      	str	r1, [r7, #0]
 80036ee:	80fb      	strh	r3, [r7, #6]
 80036f0:	4613      	mov	r3, r2
 80036f2:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 80036f8:	797b      	ldrb	r3, [r7, #5]
 80036fa:	2b17      	cmp	r3, #23
 80036fc:	f200 82d4 	bhi.w	8003ca8 <mfxstm32l152_IO_Config+0x5c4>
 8003700:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <mfxstm32l152_IO_Config+0x24>)
 8003702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003706:	bf00      	nop
 8003708:	08003799 	.word	0x08003799
 800370c:	08003829 	.word	0x08003829
 8003710:	080038e9 	.word	0x080038e9
 8003714:	080039d9 	.word	0x080039d9
 8003718:	08003ac9 	.word	0x08003ac9
 800371c:	08003bb9 	.word	0x08003bb9
 8003720:	08003769 	.word	0x08003769
 8003724:	08003769 	.word	0x08003769
 8003728:	080037c9 	.word	0x080037c9
 800372c:	080037f9 	.word	0x080037f9
 8003730:	08003ca9 	.word	0x08003ca9
 8003734:	080038b9 	.word	0x080038b9
 8003738:	08003889 	.word	0x08003889
 800373c:	08003ca9 	.word	0x08003ca9
 8003740:	08003859 	.word	0x08003859
 8003744:	08003829 	.word	0x08003829
 8003748:	08003939 	.word	0x08003939
 800374c:	08003989 	.word	0x08003989
 8003750:	08003a29 	.word	0x08003a29
 8003754:	08003a79 	.word	0x08003a79
 8003758:	08003b19 	.word	0x08003b19
 800375c:	08003b69 	.word	0x08003b69
 8003760:	08003c09 	.word	0x08003c09
 8003764:	08003c59 	.word	0x08003c59
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	6839      	ldr	r1, [r7, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fb67 	bl	8003e40 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	2200      	movs	r2, #0
 8003776:	6839      	ldr	r1, [r7, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fa9d 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800377e:	88f8      	ldrh	r0, [r7, #6]
 8003780:	2300      	movs	r3, #0
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	2164      	movs	r1, #100	; 0x64
 8003786:	f000 fe57 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800378a:	88f8      	ldrh	r0, [r7, #6]
 800378c:	2300      	movs	r3, #0
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	2168      	movs	r1, #104	; 0x68
 8003792:	f000 fe51 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    break;
 8003796:	e28a      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	6839      	ldr	r1, [r7, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fb4f 	bl	8003e40 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	2200      	movs	r2, #0
 80037a6:	6839      	ldr	r1, [r7, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fa85 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80037ae:	88f8      	ldrh	r0, [r7, #6]
 80037b0:	2300      	movs	r3, #0
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	2164      	movs	r1, #100	; 0x64
 80037b6:	f000 fe3f 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80037ba:	88f8      	ldrh	r0, [r7, #6]
 80037bc:	2301      	movs	r3, #1
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	2168      	movs	r1, #104	; 0x68
 80037c2:	f000 fe39 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    break;
 80037c6:	e272      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80037c8:	88fb      	ldrh	r3, [r7, #6]
 80037ca:	6839      	ldr	r1, [r7, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fb37 	bl	8003e40 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	2200      	movs	r2, #0
 80037d6:	6839      	ldr	r1, [r7, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fa6d 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80037de:	88f8      	ldrh	r0, [r7, #6]
 80037e0:	2301      	movs	r3, #1
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	2164      	movs	r1, #100	; 0x64
 80037e6:	f000 fe27 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80037ea:	88f8      	ldrh	r0, [r7, #6]
 80037ec:	2301      	movs	r3, #1
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	2168      	movs	r1, #104	; 0x68
 80037f2:	f000 fe21 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    break;
 80037f6:	e25a      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	6839      	ldr	r1, [r7, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fb1f 	bl	8003e40 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	2200      	movs	r2, #0
 8003806:	6839      	ldr	r1, [r7, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fa55 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800380e:	88f8      	ldrh	r0, [r7, #6]
 8003810:	2301      	movs	r3, #1
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	2164      	movs	r1, #100	; 0x64
 8003816:	f000 fe0f 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800381a:	88f8      	ldrh	r0, [r7, #6]
 800381c:	2300      	movs	r3, #0
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	2168      	movs	r1, #104	; 0x68
 8003822:	f000 fe09 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    break;
 8003826:	e242      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	6839      	ldr	r1, [r7, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fb07 	bl	8003e40 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	2201      	movs	r2, #1
 8003836:	6839      	ldr	r1, [r7, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fa3d 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 800383e:	88f8      	ldrh	r0, [r7, #6]
 8003840:	2300      	movs	r3, #0
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	2164      	movs	r1, #100	; 0x64
 8003846:	f000 fdf7 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800384a:	88f8      	ldrh	r0, [r7, #6]
 800384c:	2300      	movs	r3, #0
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	2168      	movs	r1, #104	; 0x68
 8003852:	f000 fdf1 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    break;
 8003856:	e22a      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	6839      	ldr	r1, [r7, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 faef 	bl	8003e40 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	2201      	movs	r2, #1
 8003866:	6839      	ldr	r1, [r7, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fa25 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 800386e:	88f8      	ldrh	r0, [r7, #6]
 8003870:	2300      	movs	r3, #0
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	2164      	movs	r1, #100	; 0x64
 8003876:	f000 fddf 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800387a:	88f8      	ldrh	r0, [r7, #6]
 800387c:	2301      	movs	r3, #1
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	2168      	movs	r1, #104	; 0x68
 8003882:	f000 fdd9 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    break;
 8003886:	e212      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	6839      	ldr	r1, [r7, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fad7 	bl	8003e40 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	2201      	movs	r2, #1
 8003896:	6839      	ldr	r1, [r7, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fa0d 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 800389e:	88f8      	ldrh	r0, [r7, #6]
 80038a0:	2301      	movs	r3, #1
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	2164      	movs	r1, #100	; 0x64
 80038a6:	f000 fdc7 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80038aa:	88f8      	ldrh	r0, [r7, #6]
 80038ac:	2300      	movs	r3, #0
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	2168      	movs	r1, #104	; 0x68
 80038b2:	f000 fdc1 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    break;
 80038b6:	e1fa      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	6839      	ldr	r1, [r7, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fabf 	bl	8003e40 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	2201      	movs	r2, #1
 80038c6:	6839      	ldr	r1, [r7, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f9f5 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80038ce:	88f8      	ldrh	r0, [r7, #6]
 80038d0:	2301      	movs	r3, #1
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	2164      	movs	r1, #100	; 0x64
 80038d6:	f000 fdaf 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80038da:	88f8      	ldrh	r0, [r7, #6]
 80038dc:	2301      	movs	r3, #1
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	2168      	movs	r1, #104	; 0x68
 80038e2:	f000 fda9 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    break;
 80038e6:	e1e2      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fa7a 	bl	8003de4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	2200      	movs	r2, #0
 80038f4:	6839      	ldr	r1, [r7, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f9de 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80038fc:	88f8      	ldrh	r0, [r7, #6]
 80038fe:	2300      	movs	r3, #0
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	2164      	movs	r1, #100	; 0x64
 8003904:	f000 fd98 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003908:	88f8      	ldrh	r0, [r7, #6]
 800390a:	2301      	movs	r3, #1
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	2168      	movs	r1, #104	; 0x68
 8003910:	f000 fd92 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003914:	88fb      	ldrh	r3, [r7, #6]
 8003916:	2201      	movs	r2, #1
 8003918:	6839      	ldr	r1, [r7, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 f9de 	bl	8003cdc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	2201      	movs	r2, #1
 8003924:	6839      	ldr	r1, [r7, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f000 f9ed 	bl	8003d06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	6839      	ldr	r1, [r7, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fa75 	bl	8003e20 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003936:	e1ba      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fa52 	bl	8003de4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	2200      	movs	r2, #0
 8003944:	6839      	ldr	r1, [r7, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f9b6 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800394c:	88f8      	ldrh	r0, [r7, #6]
 800394e:	2301      	movs	r3, #1
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	2164      	movs	r1, #100	; 0x64
 8003954:	f000 fd70 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003958:	88f8      	ldrh	r0, [r7, #6]
 800395a:	2301      	movs	r3, #1
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	2168      	movs	r1, #104	; 0x68
 8003960:	f000 fd6a 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	2201      	movs	r2, #1
 8003968:	6839      	ldr	r1, [r7, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f9b6 	bl	8003cdc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	2201      	movs	r2, #1
 8003974:	6839      	ldr	r1, [r7, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f9c5 	bl	8003d06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	6839      	ldr	r1, [r7, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fa4d 	bl	8003e20 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003986:	e192      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fa2a 	bl	8003de4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	2200      	movs	r2, #0
 8003994:	6839      	ldr	r1, [r7, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f98e 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800399c:	88f8      	ldrh	r0, [r7, #6]
 800399e:	2301      	movs	r3, #1
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	2164      	movs	r1, #100	; 0x64
 80039a4:	f000 fd48 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80039a8:	88f8      	ldrh	r0, [r7, #6]
 80039aa:	2300      	movs	r3, #0
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	2168      	movs	r1, #104	; 0x68
 80039b0:	f000 fd42 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	2201      	movs	r2, #1
 80039b8:	6839      	ldr	r1, [r7, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 f98e 	bl	8003cdc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	2201      	movs	r2, #1
 80039c4:	6839      	ldr	r1, [r7, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 f99d 	bl	8003d06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	6839      	ldr	r1, [r7, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fa25 	bl	8003e20 <mfxstm32l152_IO_EnablePinIT>
    break;
 80039d6:	e16a      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fa02 	bl	8003de4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	2200      	movs	r2, #0
 80039e4:	6839      	ldr	r1, [r7, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 f966 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80039ec:	88f8      	ldrh	r0, [r7, #6]
 80039ee:	2300      	movs	r3, #0
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	2164      	movs	r1, #100	; 0x64
 80039f4:	f000 fd20 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80039f8:	88f8      	ldrh	r0, [r7, #6]
 80039fa:	2301      	movs	r3, #1
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	2168      	movs	r1, #104	; 0x68
 8003a00:	f000 fd1a 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	2201      	movs	r2, #1
 8003a08:	6839      	ldr	r1, [r7, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f966 	bl	8003cdc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	2200      	movs	r2, #0
 8003a14:	6839      	ldr	r1, [r7, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f975 	bl	8003d06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	6839      	ldr	r1, [r7, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 f9fd 	bl	8003e20 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003a26:	e142      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f9da 	bl	8003de4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	2200      	movs	r2, #0
 8003a34:	6839      	ldr	r1, [r7, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f93e 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003a3c:	88f8      	ldrh	r0, [r7, #6]
 8003a3e:	2301      	movs	r3, #1
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	2164      	movs	r1, #100	; 0x64
 8003a44:	f000 fcf8 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003a48:	88f8      	ldrh	r0, [r7, #6]
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	2168      	movs	r1, #104	; 0x68
 8003a50:	f000 fcf2 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	2201      	movs	r2, #1
 8003a58:	6839      	ldr	r1, [r7, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f93e 	bl	8003cdc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	2200      	movs	r2, #0
 8003a64:	6839      	ldr	r1, [r7, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f94d 	bl	8003d06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	6839      	ldr	r1, [r7, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 f9d5 	bl	8003e20 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003a76:	e11a      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f9b2 	bl	8003de4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	2200      	movs	r2, #0
 8003a84:	6839      	ldr	r1, [r7, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f916 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003a8c:	88f8      	ldrh	r0, [r7, #6]
 8003a8e:	2301      	movs	r3, #1
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	2164      	movs	r1, #100	; 0x64
 8003a94:	f000 fcd0 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003a98:	88f8      	ldrh	r0, [r7, #6]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	2168      	movs	r1, #104	; 0x68
 8003aa0:	f000 fcca 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	6839      	ldr	r1, [r7, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f916 	bl	8003cdc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	6839      	ldr	r1, [r7, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f925 	bl	8003d06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	6839      	ldr	r1, [r7, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 f9ad 	bl	8003e20 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003ac6:	e0f2      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f98a 	bl	8003de4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	6839      	ldr	r1, [r7, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f8ee 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003adc:	88f8      	ldrh	r0, [r7, #6]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	2164      	movs	r1, #100	; 0x64
 8003ae4:	f000 fca8 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003ae8:	88f8      	ldrh	r0, [r7, #6]
 8003aea:	2301      	movs	r3, #1
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	2168      	movs	r1, #104	; 0x68
 8003af0:	f000 fca2 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	2200      	movs	r2, #0
 8003af8:	6839      	ldr	r1, [r7, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 f8ee 	bl	8003cdc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	2200      	movs	r2, #0
 8003b04:	6839      	ldr	r1, [r7, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f8fd 	bl	8003d06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	6839      	ldr	r1, [r7, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 f985 	bl	8003e20 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003b16:	e0ca      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f962 	bl	8003de4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	2200      	movs	r2, #0
 8003b24:	6839      	ldr	r1, [r7, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f8c6 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003b2c:	88f8      	ldrh	r0, [r7, #6]
 8003b2e:	2301      	movs	r3, #1
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	2164      	movs	r1, #100	; 0x64
 8003b34:	f000 fc80 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003b38:	88f8      	ldrh	r0, [r7, #6]
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	2168      	movs	r1, #104	; 0x68
 8003b40:	f000 fc7a 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	2200      	movs	r2, #0
 8003b48:	6839      	ldr	r1, [r7, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f8c6 	bl	8003cdc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	2200      	movs	r2, #0
 8003b54:	6839      	ldr	r1, [r7, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f8d5 	bl	8003d06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	6839      	ldr	r1, [r7, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 f95d 	bl	8003e20 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003b66:	e0a2      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 f93a 	bl	8003de4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	2200      	movs	r2, #0
 8003b74:	6839      	ldr	r1, [r7, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f89e 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003b7c:	88f8      	ldrh	r0, [r7, #6]
 8003b7e:	2301      	movs	r3, #1
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	2164      	movs	r1, #100	; 0x64
 8003b84:	f000 fc58 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003b88:	88f8      	ldrh	r0, [r7, #6]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	2168      	movs	r1, #104	; 0x68
 8003b90:	f000 fc52 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	2200      	movs	r2, #0
 8003b98:	6839      	ldr	r1, [r7, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f89e 	bl	8003cdc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f8ad 	bl	8003d06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003bac:	88fb      	ldrh	r3, [r7, #6]
 8003bae:	6839      	ldr	r1, [r7, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 f935 	bl	8003e20 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003bb6:	e07a      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f912 	bl	8003de4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	6839      	ldr	r1, [r7, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f876 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003bcc:	88f8      	ldrh	r0, [r7, #6]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	2164      	movs	r1, #100	; 0x64
 8003bd4:	f000 fc30 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003bd8:	88f8      	ldrh	r0, [r7, #6]
 8003bda:	2301      	movs	r3, #1
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	2168      	movs	r1, #104	; 0x68
 8003be0:	f000 fc2a 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003be4:	88fb      	ldrh	r3, [r7, #6]
 8003be6:	2200      	movs	r2, #0
 8003be8:	6839      	ldr	r1, [r7, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f876 	bl	8003cdc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	6839      	ldr	r1, [r7, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 f885 	bl	8003d06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	6839      	ldr	r1, [r7, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 f90d 	bl	8003e20 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003c06:	e052      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 f8ea 	bl	8003de4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	2200      	movs	r2, #0
 8003c14:	6839      	ldr	r1, [r7, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 f84e 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003c1c:	88f8      	ldrh	r0, [r7, #6]
 8003c1e:	2301      	movs	r3, #1
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	2164      	movs	r1, #100	; 0x64
 8003c24:	f000 fc08 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003c28:	88f8      	ldrh	r0, [r7, #6]
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	2168      	movs	r1, #104	; 0x68
 8003c30:	f000 fc02 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	2200      	movs	r2, #0
 8003c38:	6839      	ldr	r1, [r7, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 f84e 	bl	8003cdc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	2201      	movs	r2, #1
 8003c44:	6839      	ldr	r1, [r7, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f85d 	bl	8003d06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	6839      	ldr	r1, [r7, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 f8e5 	bl	8003e20 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003c56:	e02a      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003c58:	88fb      	ldrh	r3, [r7, #6]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f8c2 	bl	8003de4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	2200      	movs	r2, #0
 8003c64:	6839      	ldr	r1, [r7, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 f826 	bl	8003cb8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003c6c:	88f8      	ldrh	r0, [r7, #6]
 8003c6e:	2301      	movs	r3, #1
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	2164      	movs	r1, #100	; 0x64
 8003c74:	f000 fbe0 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003c78:	88f8      	ldrh	r0, [r7, #6]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	2168      	movs	r1, #104	; 0x68
 8003c80:	f000 fbda 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003c84:	88fb      	ldrh	r3, [r7, #6]
 8003c86:	2200      	movs	r2, #0
 8003c88:	6839      	ldr	r1, [r7, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 f826 	bl	8003cdc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	2201      	movs	r2, #1
 8003c94:	6839      	ldr	r1, [r7, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 f835 	bl	8003d06 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	6839      	ldr	r1, [r7, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 f8bd 	bl	8003e20 <mfxstm32l152_IO_EnablePinIT>
    break;
 8003ca6:	e002      	b.n	8003cae <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 8003ca8:	797b      	ldrb	r3, [r7, #5]
 8003caa:	73fb      	strb	r3, [r7, #15]
    break;
 8003cac:	bf00      	nop
  }

  return error_code;
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	6039      	str	r1, [r7, #0]
 8003cc2:	80fb      	strh	r3, [r7, #6]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8003cc8:	797b      	ldrb	r3, [r7, #5]
 8003cca:	88f8      	ldrh	r0, [r7, #6]
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	2160      	movs	r1, #96	; 0x60
 8003cd0:	f000 fbb2 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
}
 8003cd4:	bf00      	nop
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	6039      	str	r1, [r7, #0]
 8003ce6:	80fb      	strh	r3, [r7, #6]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8003cec:	797b      	ldrb	r3, [r7, #5]
 8003cee:	88f8      	ldrh	r0, [r7, #6]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	214c      	movs	r1, #76	; 0x4c
 8003cf4:	f000 fba0 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f006 f811 	bl	8009d20 <MFX_IO_Delay>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	6039      	str	r1, [r7, #0]
 8003d10:	80fb      	strh	r3, [r7, #6]
 8003d12:	4613      	mov	r3, r2
 8003d14:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8003d16:	797b      	ldrb	r3, [r7, #5]
 8003d18:	88f8      	ldrh	r0, [r7, #6]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	2150      	movs	r1, #80	; 0x50
 8003d1e:	f000 fb8b 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8003d22:	2001      	movs	r0, #1
 8003d24:	f005 fffc 	bl	8009d20 <MFX_IO_Delay>
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	6039      	str	r1, [r7, #0]
 8003d3a:	80fb      	strh	r3, [r7, #6]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8003d40:	797b      	ldrb	r3, [r7, #5]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d006      	beq.n	8003d54 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8003d46:	88f8      	ldrh	r0, [r7, #6]
 8003d48:	2301      	movs	r3, #1
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	216c      	movs	r1, #108	; 0x6c
 8003d4e:	f000 fb73 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8003d52:	e005      	b.n	8003d60 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8003d54:	88f8      	ldrh	r0, [r7, #6]
 8003d56:	2301      	movs	r3, #1
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	2170      	movs	r1, #112	; 0x70
 8003d5c:	f000 fb6c 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
}
 8003d60:	bf00      	nop
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	6039      	str	r1, [r7, #0]
 8003d72:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d006      	beq.n	8003d96 <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	2110      	movs	r1, #16
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f005 ff99 	bl	8009cc4 <MFX_IO_Read>
 8003d92:	4603      	mov	r3, r0
 8003d94:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d006      	beq.n	8003dae <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	2111      	movs	r1, #17
 8003da4:	4618      	mov	r0, r3
 8003da6:	f005 ff8d 	bl	8009cc4 <MFX_IO_Read>
 8003daa:	4603      	mov	r3, r0
 8003dac:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d006      	beq.n	8003dc6 <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	2112      	movs	r1, #18
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f005 ff81 	bl	8009cc4 <MFX_IO_Read>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	021a      	lsls	r2, r3, #8
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	441a      	add	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	4413      	add	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	4013      	ands	r3, r2
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003dee:	f005 feef 	bl	8009bd0 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	2101      	movs	r1, #1
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fb92 	bl	8003520 <mfxstm32l152_EnableITSource>
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2101      	movs	r1, #1
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fba3 	bl	800355e <mfxstm32l152_DisableITSource>
}
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	6039      	str	r1, [r7, #0]
 8003e2a:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8003e2c:	88f8      	ldrh	r0, [r7, #6]
 8003e2e:	2301      	movs	r3, #1
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	2148      	movs	r1, #72	; 0x48
 8003e34:	f000 fb00 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	6039      	str	r1, [r7, #0]
 8003e4a:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8003e4c:	88f8      	ldrh	r0, [r7, #6]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	2148      	movs	r1, #72	; 0x48
 8003e54:	f000 faf0 	bl	8004438 <mfxstm32l152_reg24_setPinValue>
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	6039      	str	r1, [r7, #0]
 8003e6a:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d006      	beq.n	8003e8e <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8003e80:	88fb      	ldrh	r3, [r7, #6]
 8003e82:	210c      	movs	r1, #12
 8003e84:	4618      	mov	r0, r3
 8003e86:	f005 ff1d 	bl	8009cc4 <MFX_IO_Read>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d006      	beq.n	8003eaa <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	210d      	movs	r1, #13
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f005 ff0f 	bl	8009cc4 <MFX_IO_Read>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	0c1b      	lsrs	r3, r3, #16
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d006      	beq.n	8003ec2 <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	210e      	movs	r1, #14
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f005 ff03 	bl	8009cc4 <MFX_IO_Read>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8003ec2:	7bfa      	ldrb	r2, [r7, #15]
 8003ec4:	89bb      	ldrh	r3, [r7, #12]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	4413      	add	r3, r2
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	4413      	add	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	4013      	ands	r3, r2
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	6039      	str	r1, [r7, #0]
 8003eec:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	0c1b      	lsrs	r3, r3, #16
 8003efc:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	2154      	movs	r1, #84	; 0x54
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f005 fec6 	bl	8009c9c <MFX_IO_Write>
  }
  if (pin_8_15)
 8003f10:	7bbb      	ldrb	r3, [r7, #14]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8003f16:	7bba      	ldrb	r2, [r7, #14]
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	2155      	movs	r1, #85	; 0x55
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f005 febd 	bl	8009c9c <MFX_IO_Write>
  }
  if (pin_16_23)
 8003f22:	7b7b      	ldrb	r3, [r7, #13]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8003f28:	7b7a      	ldrb	r2, [r7, #13]
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	2156      	movs	r1, #86	; 0x56
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f005 feb4 	bl	8009c9c <MFX_IO_Write>
  }
}
 8003f34:	bf00      	nop
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	4603      	mov	r3, r0
 8003f44:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8003f4a:	88fb      	ldrh	r3, [r7, #6]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2180      	movs	r1, #128	; 0x80
 8003f52:	4618      	mov	r0, r3
 8003f54:	f005 feb6 	bl	8009cc4 <MFX_IO_Read>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	7bfa      	ldrb	r2, [r7, #15]
 8003f6c:	2180      	movs	r1, #128	; 0x80
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f005 fe94 	bl	8009c9c <MFX_IO_Write>
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	b590      	push	{r4, r7, lr}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	4604      	mov	r4, r0
 8003f86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003f8e:	4623      	mov	r3, r4
 8003f90:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2140      	movs	r1, #64	; 0x40
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f005 fe8e 	bl	8009cc4 <MFX_IO_Read>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8003fac:	7bbb      	ldrb	r3, [r7, #14]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10b      	bne.n	8003fce <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 8003fb6:	7bbb      	ldrb	r3, [r7, #14]
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	7bba      	ldrb	r2, [r7, #14]
 8003fc6:	2140      	movs	r1, #64	; 0x40
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f005 fe67 	bl	8009c9c <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8003fce:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f003 030e 	and.w	r3, r3, #14
 8003fda:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8003fdc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003fe0:	b25b      	sxtb	r3, r3
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	b25a      	sxtb	r2, r3
 8003fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	b25b      	sxtb	r3, r3
 8003ff0:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8003ff2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ff6:	b25b      	sxtb	r3, r3
 8003ff8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ffc:	b25a      	sxtb	r2, r3
 8003ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004002:	4313      	orrs	r3, r2
 8004004:	b25b      	sxtb	r3, r3
 8004006:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	b29b      	uxth	r3, r3
 800400e:	7bfa      	ldrb	r2, [r7, #15]
 8004010:	2180      	movs	r1, #128	; 0x80
 8004012:	4618      	mov	r0, r3
 8004014:	f005 fe42 	bl	8009c9c <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8004018:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800401c:	b25b      	sxtb	r3, r3
 800401e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004022:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8004024:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004028:	b25b      	sxtb	r3, r3
 800402a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800402e:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8004030:	4313      	orrs	r3, r2
 8004032:	b25b      	sxtb	r3, r3
 8004034:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	b29b      	uxth	r3, r3
 800403c:	7bfa      	ldrb	r2, [r7, #15]
 800403e:	2181      	movs	r1, #129	; 0x81
 8004040:	4618      	mov	r0, r3
 8004042:	f005 fe2b 	bl	8009c9c <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8004046:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	b29b      	uxth	r3, r3
 800404c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	b29b      	uxth	r3, r3
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	2182      	movs	r1, #130	; 0x82
 8004058:	4618      	mov	r0, r3
 800405a:	f005 fe1f 	bl	8009c9c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 800405e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004060:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	b29b      	uxth	r3, r3
 8004068:	7bfa      	ldrb	r2, [r7, #15]
 800406a:	2183      	movs	r1, #131	; 0x83
 800406c:	4618      	mov	r0, r3
 800406e:	f005 fe15 	bl	8009c9c <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8004072:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004074:	0a1b      	lsrs	r3, r3, #8
 8004076:	b29b      	uxth	r3, r3
 8004078:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	b29b      	uxth	r3, r3
 8004080:	7bfa      	ldrb	r2, [r7, #15]
 8004082:	2184      	movs	r1, #132	; 0x84
 8004084:	4618      	mov	r0, r3
 8004086:	f005 fe09 	bl	8009c9c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 800408a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800408c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	b29b      	uxth	r3, r3
 8004094:	7bfa      	ldrb	r2, [r7, #15]
 8004096:	2185      	movs	r1, #133	; 0x85
 8004098:	4618      	mov	r0, r3
 800409a:	f005 fdff 	bl	8009c9c <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 800409e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	7bfa      	ldrb	r2, [r7, #15]
 80040ae:	2186      	movs	r1, #134	; 0x86
 80040b0:	4618      	mov	r0, r3
 80040b2:	f005 fdf3 	bl	8009c9c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 80040b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80040b8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	b29b      	uxth	r3, r3
 80040c0:	7bfa      	ldrb	r2, [r7, #15]
 80040c2:	2187      	movs	r1, #135	; 0x87
 80040c4:	4618      	mov	r0, r3
 80040c6:	f005 fde9 	bl	8009c9c <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 80040ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80040cc:	0a1b      	lsrs	r3, r3, #8
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	7bfa      	ldrb	r2, [r7, #15]
 80040da:	2188      	movs	r1, #136	; 0x88
 80040dc:	4618      	mov	r0, r3
 80040de:	f005 fddd 	bl	8009c9c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 80040e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80040e4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	7bfa      	ldrb	r2, [r7, #15]
 80040ee:	2189      	movs	r1, #137	; 0x89
 80040f0:	4618      	mov	r0, r3
 80040f2:	f005 fdd3 	bl	8009c9c <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 80040f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80040f8:	0a1b      	lsrs	r3, r3, #8
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 80040fe:	88fb      	ldrh	r3, [r7, #6]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	b29b      	uxth	r3, r3
 8004104:	7bfa      	ldrb	r2, [r7, #15]
 8004106:	218a      	movs	r1, #138	; 0x8a
 8004108:	4618      	mov	r0, r3
 800410a:	f005 fdc7 	bl	8009c9c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 800410e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004110:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	b29b      	uxth	r3, r3
 8004118:	7bfa      	ldrb	r2, [r7, #15]
 800411a:	218b      	movs	r1, #139	; 0x8b
 800411c:	4618      	mov	r0, r3
 800411e:	f005 fdbd 	bl	8009c9c <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8004122:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004124:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	b29b      	uxth	r3, r3
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	2190      	movs	r1, #144	; 0x90
 8004130:	4618      	mov	r0, r3
 8004132:	f005 fdb3 	bl	8009c9c <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8004136:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004138:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	b29b      	uxth	r3, r3
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	2191      	movs	r1, #145	; 0x91
 8004144:	4618      	mov	r0, r3
 8004146:	f005 fda9 	bl	8009c9c <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 800414a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800414c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	b29b      	uxth	r3, r3
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	2192      	movs	r1, #146	; 0x92
 8004158:	4618      	mov	r0, r3
 800415a:	f005 fd9f 	bl	8009c9c <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 800415e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004160:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	b29b      	uxth	r3, r3
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	2193      	movs	r1, #147	; 0x93
 800416c:	4618      	mov	r0, r3
 800416e:	f005 fd95 	bl	8009c9c <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8004172:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004174:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8004176:	88fb      	ldrh	r3, [r7, #6]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	b29b      	uxth	r3, r3
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	2194      	movs	r1, #148	; 0x94
 8004180:	4618      	mov	r0, r3
 8004182:	f005 fd8b 	bl	8009c9c <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8004186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	b29b      	uxth	r3, r3
 800418c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	b29b      	uxth	r3, r3
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	218c      	movs	r1, #140	; 0x8c
 8004198:	4618      	mov	r0, r3
 800419a:	f005 fd7f 	bl	8009c9c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 800419e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041a0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 80041a2:	88fb      	ldrh	r3, [r7, #6]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	218d      	movs	r1, #141	; 0x8d
 80041ac:	4618      	mov	r0, r3
 80041ae:	f005 fd75 	bl	8009c9c <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 80041b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041b4:	0a1b      	lsrs	r3, r3, #8
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	b29b      	uxth	r3, r3
 80041c0:	7bfa      	ldrb	r2, [r7, #15]
 80041c2:	218e      	movs	r1, #142	; 0x8e
 80041c4:	4618      	mov	r0, r3
 80041c6:	f005 fd69 	bl	8009c9c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 80041ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041cc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	218f      	movs	r1, #143	; 0x8f
 80041d8:	4618      	mov	r0, r3
 80041da:	f005 fd5f 	bl	8009c9c <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 80041de:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80041e2:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	2196      	movs	r1, #150	; 0x96
 80041ee:	4618      	mov	r0, r3
 80041f0:	f005 fd54 	bl	8009c9c <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 80041f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80041f8:	b25b      	sxtb	r3, r3
 80041fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80041fe:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8004200:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004204:	b25b      	sxtb	r3, r3
 8004206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800420a:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 800420c:	4313      	orrs	r3, r2
 800420e:	b25b      	sxtb	r3, r3
 8004210:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	b29b      	uxth	r3, r3
 8004218:	7bfa      	ldrb	r2, [r7, #15]
 800421a:	2197      	movs	r1, #151	; 0x97
 800421c:	4618      	mov	r0, r3
 800421e:	f005 fd3d 	bl	8009c9c <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8004222:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004226:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	b29b      	uxth	r3, r3
 800422e:	7bfa      	ldrb	r2, [r7, #15]
 8004230:	2198      	movs	r1, #152	; 0x98
 8004232:	4618      	mov	r0, r3
 8004234:	f005 fd32 	bl	8009c9c <MFX_IO_Write>
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004242:	b004      	add	sp, #16
 8004244:	4770      	bx	lr

08004246 <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	4603      	mov	r3, r0
 800424e:	6039      	str	r1, [r7, #0]
 8004250:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	b298      	uxth	r0, r3
 8004258:	f107 020c 	add.w	r2, r7, #12
 800425c:	2303      	movs	r3, #3
 800425e:	2114      	movs	r1, #20
 8004260:	f005 fd44 	bl	8009cec <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8004264:	7b3b      	ldrb	r3, [r7, #12]
 8004266:	041a      	lsls	r2, r3, #16
 8004268:	7b7b      	ldrb	r3, [r7, #13]
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	4313      	orrs	r3, r2
 800426e:	7bba      	ldrb	r2, [r7, #14]
 8004270:	4313      	orrs	r3, r2
 8004272:	461a      	mov	r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	601a      	str	r2, [r3, #0]

}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 800428a:	f005 fca1 	bl	8009bd0 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 800428e:	88fb      	ldrh	r3, [r7, #6]
 8004290:	2102      	movs	r1, #2
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff f944 	bl	8003520 <mfxstm32l152_EnableITSource>
}
 8004298:	bf00      	nop
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	2102      	movs	r1, #2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff f98f 	bl	80035d2 <mfxstm32l152_ClearGlobalIT>
}
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	2102      	movs	r1, #2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff f96b 	bl	80035a6 <mfxstm32l152_GlobalITStatus>
 80042d0:	4603      	mov	r3, r0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b082      	sub	sp, #8
 80042de:	af00      	add	r7, sp, #0
 80042e0:	4603      	mov	r3, r0
 80042e2:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	2102      	movs	r1, #2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff f938 	bl	800355e <mfxstm32l152_DisableITSource>
}
 80042ee:	bf00      	nop
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	4603      	mov	r3, r0
 80042fe:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	b29b      	uxth	r3, r3
 8004306:	2103      	movs	r1, #3
 8004308:	4618      	mov	r0, r3
 800430a:	f005 fcdb 	bl	8009cc4 <MFX_IO_Read>
 800430e:	4603      	mov	r3, r0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	b29b      	uxth	r3, r3
 8004328:	2104      	movs	r1, #4
 800432a:	4618      	mov	r0, r3
 800432c:	f005 fcca 	bl	8009cc4 <MFX_IO_Read>
 8004330:	4603      	mov	r3, r0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	4603      	mov	r3, r0
 8004342:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8004344:	f005 fc44 	bl	8009bd0 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	2104      	movs	r1, #4
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff f8e7 	bl	8003520 <mfxstm32l152_EnableITSource>
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	4603      	mov	r3, r0
 8004362:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	2104      	movs	r1, #4
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff f932 	bl	80035d2 <mfxstm32l152_ClearGlobalIT>
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b082      	sub	sp, #8
 800437a:	af00      	add	r7, sp, #0
 800437c:	4603      	mov	r3, r0
 800437e:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8004380:	88fb      	ldrh	r3, [r7, #6]
 8004382:	2104      	movs	r1, #4
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff f90e 	bl	80035a6 <mfxstm32l152_GlobalITStatus>
 800438a:	4603      	mov	r3, r0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	2104      	movs	r1, #4
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff f8db 	bl	800355e <mfxstm32l152_DisableITSource>
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80043ba:	2300      	movs	r3, #0
 80043bc:	73fb      	strb	r3, [r7, #15]
 80043be:	e00b      	b.n	80043d8 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <mfxstm32l152_GetInstance+0x3c>)
 80043c4:	5cd3      	ldrb	r3, [r2, r3]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	88fa      	ldrh	r2, [r7, #6]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d101      	bne.n	80043d2 <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	e006      	b.n	80043e0 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	3301      	adds	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d9f0      	bls.n	80043c0 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 80043de:	23ff      	movs	r3, #255	; 0xff
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	20000ff4 	.word	0x20000ff4

080043f0 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
 80043fe:	e00f      	b.n	8004420 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	4a0c      	ldr	r2, [pc, #48]	; (8004434 <mfxstm32l152_ReleaseInstance+0x44>)
 8004404:	5cd3      	ldrb	r3, [r2, r3]
 8004406:	b29b      	uxth	r3, r3
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	429a      	cmp	r2, r3
 800440c:	d105      	bne.n	800441a <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	4a08      	ldr	r2, [pc, #32]	; (8004434 <mfxstm32l152_ReleaseInstance+0x44>)
 8004412:	2100      	movs	r1, #0
 8004414:	54d1      	strb	r1, [r2, r3]
      return idx;
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	e006      	b.n	8004428 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	3301      	adds	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d9ec      	bls.n	8004400 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 8004426:	23ff      	movs	r3, #255	; 0xff
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	20000ff4 	.word	0x20000ff4

08004438 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	603a      	str	r2, [r7, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	4603      	mov	r3, r0
 8004444:	80fb      	strh	r3, [r7, #6]
 8004446:	460b      	mov	r3, r1
 8004448:	717b      	strb	r3, [r7, #5]
 800444a:	4613      	mov	r3, r2
 800444c:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 800444e:	2300      	movs	r3, #0
 8004450:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	0a1b      	lsrs	r3, r3, #8
 800445a:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	0c1b      	lsrs	r3, r3, #16
 8004460:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 8004462:	7bbb      	ldrb	r3, [r7, #14]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01e      	beq.n	80044a6 <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8004468:	797a      	ldrb	r2, [r7, #5]
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	4611      	mov	r1, r2
 800446e:	4618      	mov	r0, r3
 8004470:	f005 fc28 	bl	8009cc4 <MFX_IO_Read>
 8004474:	4603      	mov	r3, r0
 8004476:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8004478:	793b      	ldrb	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d004      	beq.n	8004488 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 800447e:	7bfa      	ldrb	r2, [r7, #15]
 8004480:	7bbb      	ldrb	r3, [r7, #14]
 8004482:	4313      	orrs	r3, r2
 8004484:	73fb      	strb	r3, [r7, #15]
 8004486:	e008      	b.n	800449a <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8004488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800448c:	43db      	mvns	r3, r3
 800448e:	b25a      	sxtb	r2, r3
 8004490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004494:	4013      	ands	r3, r2
 8004496:	b25b      	sxtb	r3, r3
 8004498:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 800449a:	7bfa      	ldrb	r2, [r7, #15]
 800449c:	7979      	ldrb	r1, [r7, #5]
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f005 fbfb 	bl	8009c9c <MFX_IO_Write>
  }

  if (pin_8_15)
 80044a6:	7b7b      	ldrb	r3, [r7, #13]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d022      	beq.n	80044f2 <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 80044ac:	797b      	ldrb	r3, [r7, #5]
 80044ae:	3301      	adds	r3, #1
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	4611      	mov	r1, r2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f005 fc04 	bl	8009cc4 <MFX_IO_Read>
 80044bc:	4603      	mov	r3, r0
 80044be:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80044c0:	793b      	ldrb	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d004      	beq.n	80044d0 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 80044c6:	7bfa      	ldrb	r2, [r7, #15]
 80044c8:	7b7b      	ldrb	r3, [r7, #13]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	73fb      	strb	r3, [r7, #15]
 80044ce:	e008      	b.n	80044e2 <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 80044d0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80044d4:	43db      	mvns	r3, r3
 80044d6:	b25a      	sxtb	r2, r3
 80044d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044dc:	4013      	ands	r3, r2
 80044de:	b25b      	sxtb	r3, r3
 80044e0:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 80044e2:	797b      	ldrb	r3, [r7, #5]
 80044e4:	3301      	adds	r3, #1
 80044e6:	b2d9      	uxtb	r1, r3
 80044e8:	7bfa      	ldrb	r2, [r7, #15]
 80044ea:	88fb      	ldrh	r3, [r7, #6]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f005 fbd5 	bl	8009c9c <MFX_IO_Write>
  }

  if (pin_16_23)
 80044f2:	7b3b      	ldrb	r3, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d022      	beq.n	800453e <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 80044f8:	797b      	ldrb	r3, [r7, #5]
 80044fa:	3302      	adds	r3, #2
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f005 fbde 	bl	8009cc4 <MFX_IO_Read>
 8004508:	4603      	mov	r3, r0
 800450a:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 800450c:	793b      	ldrb	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 8004512:	7bfa      	ldrb	r2, [r7, #15]
 8004514:	7b3b      	ldrb	r3, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	73fb      	strb	r3, [r7, #15]
 800451a:	e008      	b.n	800452e <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 800451c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8004520:	43db      	mvns	r3, r3
 8004522:	b25a      	sxtb	r2, r3
 8004524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004528:	4013      	ands	r3, r2
 800452a:	b25b      	sxtb	r3, r3
 800452c:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 800452e:	797b      	ldrb	r3, [r7, #5]
 8004530:	3302      	adds	r3, #2
 8004532:	b2d9      	uxtb	r1, r3
 8004534:	7bfa      	ldrb	r2, [r7, #15]
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	4618      	mov	r0, r3
 800453a:	f005 fbaf 	bl	8009c9c <MFX_IO_Write>
  }
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800454c:	f005 fcf0 	bl	8009f30 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8004550:	2200      	movs	r2, #0
 8004552:	2100      	movs	r1, #0
 8004554:	2010      	movs	r0, #16
 8004556:	f000 f9e4 	bl	8004922 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 800455a:	200a      	movs	r0, #10
 800455c:	f005 fd0f 	bl	8009f7e <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8004560:	2200      	movs	r2, #0
 8004562:	2100      	movs	r1, #0
 8004564:	2001      	movs	r0, #1
 8004566:	f000 f9dc 	bl	8004922 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 800456a:	20c8      	movs	r0, #200	; 0xc8
 800456c:	f005 fd07 	bl	8009f7e <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8004570:	2200      	movs	r2, #0
 8004572:	2100      	movs	r1, #0
 8004574:	2011      	movs	r0, #17
 8004576:	f000 f9d4 	bl	8004922 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 800457a:	2078      	movs	r0, #120	; 0x78
 800457c:	f005 fcff 	bl	8009f7e <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8004580:	2300      	movs	r3, #0
 8004582:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8004584:	463b      	mov	r3, r7
 8004586:	2201      	movs	r2, #1
 8004588:	4619      	mov	r1, r3
 800458a:	2036      	movs	r0, #54	; 0x36
 800458c:	f000 f9c9 	bl	8004922 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8004590:	2305      	movs	r3, #5
 8004592:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8004594:	463b      	mov	r3, r7
 8004596:	2201      	movs	r2, #1
 8004598:	4619      	mov	r1, r3
 800459a:	203a      	movs	r0, #58	; 0x3a
 800459c:	f000 f9c1 	bl	8004922 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80045a0:	2200      	movs	r2, #0
 80045a2:	2100      	movs	r1, #0
 80045a4:	2021      	movs	r0, #33	; 0x21
 80045a6:	f000 f9bc 	bl	8004922 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 80045aa:	2300      	movs	r3, #0
 80045ac:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80045ae:	2300      	movs	r3, #0
 80045b0:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80045b2:	2300      	movs	r3, #0
 80045b4:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80045b6:	23ef      	movs	r3, #239	; 0xef
 80045b8:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80045ba:	463b      	mov	r3, r7
 80045bc:	2204      	movs	r2, #4
 80045be:	4619      	mov	r1, r3
 80045c0:	202a      	movs	r0, #42	; 0x2a
 80045c2:	f000 f9ae 	bl	8004922 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 80045c6:	2300      	movs	r3, #0
 80045c8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80045ca:	2300      	movs	r3, #0
 80045cc:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80045ce:	2300      	movs	r3, #0
 80045d0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80045d2:	23ef      	movs	r3, #239	; 0xef
 80045d4:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80045d6:	463b      	mov	r3, r7
 80045d8:	2204      	movs	r2, #4
 80045da:	4619      	mov	r1, r3
 80045dc:	202b      	movs	r0, #43	; 0x2b
 80045de:	f000 f9a0 	bl	8004922 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 80045e2:	230c      	movs	r3, #12
 80045e4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 80045e6:	230c      	movs	r3, #12
 80045e8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80045ea:	2300      	movs	r3, #0
 80045ec:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 80045ee:	2333      	movs	r3, #51	; 0x33
 80045f0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 80045f2:	2333      	movs	r3, #51	; 0x33
 80045f4:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 80045f6:	463b      	mov	r3, r7
 80045f8:	2205      	movs	r2, #5
 80045fa:	4619      	mov	r1, r3
 80045fc:	20b2      	movs	r0, #178	; 0xb2
 80045fe:	f000 f990 	bl	8004922 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8004602:	2335      	movs	r3, #53	; 0x35
 8004604:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8004606:	463b      	mov	r3, r7
 8004608:	2201      	movs	r2, #1
 800460a:	4619      	mov	r1, r3
 800460c:	20b7      	movs	r0, #183	; 0xb7
 800460e:	f000 f988 	bl	8004922 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8004612:	231f      	movs	r3, #31
 8004614:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8004616:	463b      	mov	r3, r7
 8004618:	2201      	movs	r2, #1
 800461a:	4619      	mov	r1, r3
 800461c:	20bb      	movs	r0, #187	; 0xbb
 800461e:	f000 f980 	bl	8004922 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8004622:	232c      	movs	r3, #44	; 0x2c
 8004624:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8004626:	463b      	mov	r3, r7
 8004628:	2201      	movs	r2, #1
 800462a:	4619      	mov	r1, r3
 800462c:	20c0      	movs	r0, #192	; 0xc0
 800462e:	f000 f978 	bl	8004922 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8004632:	2301      	movs	r3, #1
 8004634:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8004636:	23c3      	movs	r3, #195	; 0xc3
 8004638:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 800463a:	463b      	mov	r3, r7
 800463c:	2202      	movs	r2, #2
 800463e:	4619      	mov	r1, r3
 8004640:	20c2      	movs	r0, #194	; 0xc2
 8004642:	f000 f96e 	bl	8004922 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8004646:	2320      	movs	r3, #32
 8004648:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 800464a:	463b      	mov	r3, r7
 800464c:	2201      	movs	r2, #1
 800464e:	4619      	mov	r1, r3
 8004650:	20c4      	movs	r0, #196	; 0xc4
 8004652:	f000 f966 	bl	8004922 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8004656:	230f      	movs	r3, #15
 8004658:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 800465a:	463b      	mov	r3, r7
 800465c:	2201      	movs	r2, #1
 800465e:	4619      	mov	r1, r3
 8004660:	20c6      	movs	r0, #198	; 0xc6
 8004662:	f000 f95e 	bl	8004922 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8004666:	23a4      	movs	r3, #164	; 0xa4
 8004668:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 800466a:	23a1      	movs	r3, #161	; 0xa1
 800466c:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 800466e:	463b      	mov	r3, r7
 8004670:	2202      	movs	r2, #2
 8004672:	4619      	mov	r1, r3
 8004674:	20d0      	movs	r0, #208	; 0xd0
 8004676:	f000 f954 	bl	8004922 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 800467a:	23d0      	movs	r3, #208	; 0xd0
 800467c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800467e:	2308      	movs	r3, #8
 8004680:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8004682:	2311      	movs	r3, #17
 8004684:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8004686:	2308      	movs	r3, #8
 8004688:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 800468a:	230c      	movs	r3, #12
 800468c:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 800468e:	2315      	movs	r3, #21
 8004690:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8004692:	2339      	movs	r3, #57	; 0x39
 8004694:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8004696:	2333      	movs	r3, #51	; 0x33
 8004698:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 800469a:	2350      	movs	r3, #80	; 0x50
 800469c:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 800469e:	2336      	movs	r3, #54	; 0x36
 80046a0:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 80046a2:	2313      	movs	r3, #19
 80046a4:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80046a6:	2314      	movs	r3, #20
 80046a8:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 80046aa:	2329      	movs	r3, #41	; 0x29
 80046ac:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 80046ae:	232d      	movs	r3, #45	; 0x2d
 80046b0:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 80046b2:	463b      	mov	r3, r7
 80046b4:	220e      	movs	r2, #14
 80046b6:	4619      	mov	r1, r3
 80046b8:	20e0      	movs	r0, #224	; 0xe0
 80046ba:	f000 f932 	bl	8004922 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 80046be:	23d0      	movs	r3, #208	; 0xd0
 80046c0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80046c2:	2308      	movs	r3, #8
 80046c4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 80046c6:	2310      	movs	r3, #16
 80046c8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80046ca:	2308      	movs	r3, #8
 80046cc:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 80046ce:	2306      	movs	r3, #6
 80046d0:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 80046d2:	2306      	movs	r3, #6
 80046d4:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80046d6:	2339      	movs	r3, #57	; 0x39
 80046d8:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 80046da:	2344      	movs	r3, #68	; 0x44
 80046dc:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 80046de:	2351      	movs	r3, #81	; 0x51
 80046e0:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 80046e2:	230b      	movs	r3, #11
 80046e4:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 80046e6:	2316      	movs	r3, #22
 80046e8:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80046ea:	2314      	movs	r3, #20
 80046ec:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 80046ee:	232f      	movs	r3, #47	; 0x2f
 80046f0:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 80046f2:	2331      	movs	r3, #49	; 0x31
 80046f4:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80046f6:	463b      	mov	r3, r7
 80046f8:	220e      	movs	r2, #14
 80046fa:	4619      	mov	r1, r3
 80046fc:	20e1      	movs	r0, #225	; 0xe1
 80046fe:	f000 f910 	bl	8004922 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8004702:	f000 f847 	bl	8004794 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8004706:	2300      	movs	r3, #0
 8004708:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 800470a:	463b      	mov	r3, r7
 800470c:	2201      	movs	r2, #1
 800470e:	4619      	mov	r1, r3
 8004710:	2035      	movs	r0, #53	; 0x35
 8004712:	f000 f906 	bl	8004922 <ST7789H2_WriteReg>

}
 8004716:	bf00      	nop
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d102      	bne.n	8004732 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 800472c:	2300      	movs	r3, #0
 800472e:	723b      	strb	r3, [r7, #8]
 8004730:	e025      	b.n	800477e <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d120      	bne.n	800477a <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8004738:	2300      	movs	r3, #0
 800473a:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 800473c:	2300      	movs	r3, #0
 800473e:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8004740:	2301      	movs	r3, #1
 8004742:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8004744:	23f0      	movs	r3, #240	; 0xf0
 8004746:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8004748:	2300      	movs	r3, #0
 800474a:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 800474c:	2300      	movs	r3, #0
 800474e:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8004750:	f107 0308 	add.w	r3, r7, #8
 8004754:	2206      	movs	r2, #6
 8004756:	4619      	mov	r1, r3
 8004758:	2033      	movs	r0, #51	; 0x33
 800475a:	f000 f8e2 	bl	8004922 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 800475e:	2300      	movs	r3, #0
 8004760:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8004762:	2350      	movs	r3, #80	; 0x50
 8004764:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8004766:	f107 0308 	add.w	r3, r7, #8
 800476a:	2202      	movs	r2, #2
 800476c:	4619      	mov	r1, r3
 800476e:	2037      	movs	r0, #55	; 0x37
 8004770:	f000 f8d7 	bl	8004922 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8004774:	23c0      	movs	r3, #192	; 0xc0
 8004776:	723b      	strb	r3, [r7, #8]
 8004778:	e001      	b.n	800477e <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 800477a:	2360      	movs	r3, #96	; 0x60
 800477c:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 800477e:	f107 0308 	add.w	r3, r7, #8
 8004782:	2201      	movs	r2, #1
 8004784:	4619      	mov	r1, r3
 8004786:	2036      	movs	r0, #54	; 0x36
 8004788:	f000 f8cb 	bl	8004922 <ST7789H2_WriteReg>
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8004798:	2200      	movs	r2, #0
 800479a:	2100      	movs	r1, #0
 800479c:	2029      	movs	r0, #41	; 0x29
 800479e:	f000 f8c0 	bl	8004922 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80047a2:	2200      	movs	r2, #0
 80047a4:	2100      	movs	r1, #0
 80047a6:	2011      	movs	r0, #17
 80047a8:	f000 f8bb 	bl	8004922 <ST7789H2_WriteReg>
}
 80047ac:	bf00      	nop
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 80047b6:	23fe      	movs	r3, #254	; 0xfe
 80047b8:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 80047ba:	1d3b      	adds	r3, r7, #4
 80047bc:	2201      	movs	r2, #1
 80047be:	4619      	mov	r1, r3
 80047c0:	20bd      	movs	r0, #189	; 0xbd
 80047c2:	f000 f8ae 	bl	8004922 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80047c6:	2200      	movs	r2, #0
 80047c8:	2100      	movs	r1, #0
 80047ca:	2010      	movs	r0, #16
 80047cc:	f000 f8a9 	bl	8004922 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80047d0:	200a      	movs	r0, #10
 80047d2:	f005 fbd4 	bl	8009f7e <LCD_IO_Delay>
}
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 80047de:	b480      	push	{r7}
 80047e0:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 80047e2:	23f0      	movs	r3, #240	; 0xf0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 80047ee:	b480      	push	{r7}
 80047f0:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 80047f2:	23f0      	movs	r3, #240	; 0xf0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8004802:	f005 fb95 	bl	8009f30 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8004806:	2004      	movs	r0, #4
 8004808:	f000 f8ae 	bl	8004968 <ST7789H2_ReadReg>
 800480c:	4603      	mov	r3, r0
 800480e:	b29b      	uxth	r3, r3
}
 8004810:	4618      	mov	r0, r3
 8004812:	bd80      	pop	{r7, pc}

08004814 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	460a      	mov	r2, r1
 800481e:	80fb      	strh	r3, [r7, #6]
 8004820:	4613      	mov	r3, r2
 8004822:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8004824:	2300      	movs	r3, #0
 8004826:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800482e:	2300      	movs	r3, #0
 8004830:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	3b11      	subs	r3, #17
 8004838:	b2db      	uxtb	r3, r3
 800483a:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 800483c:	f107 030c 	add.w	r3, r7, #12
 8004840:	2204      	movs	r2, #4
 8004842:	4619      	mov	r1, r3
 8004844:	202a      	movs	r0, #42	; 0x2a
 8004846:	f000 f86c 	bl	8004922 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 800484a:	2300      	movs	r3, #0
 800484c:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 800484e:	88bb      	ldrh	r3, [r7, #4]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8004854:	2300      	movs	r3, #0
 8004856:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8004858:	88bb      	ldrh	r3, [r7, #4]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	3b11      	subs	r3, #17
 800485e:	b2db      	uxtb	r3, r3
 8004860:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8004862:	f107 030c 	add.w	r3, r7, #12
 8004866:	2204      	movs	r2, #4
 8004868:	4619      	mov	r1, r3
 800486a:	202b      	movs	r0, #43	; 0x2b
 800486c:	f000 f859 	bl	8004922 <ST7789H2_WriteReg>
}
 8004870:	bf00      	nop
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	80fb      	strh	r3, [r7, #6]
 8004882:	460b      	mov	r3, r1
 8004884:	80bb      	strh	r3, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800488a:	88ba      	ldrh	r2, [r7, #4]
 800488c:	88fb      	ldrh	r3, [r7, #6]
 800488e:	4611      	mov	r1, r2
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff ffbf 	bl	8004814 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004896:	2200      	movs	r2, #0
 8004898:	2100      	movs	r1, #0
 800489a:	202c      	movs	r0, #44	; 0x2c
 800489c:	f000 f841 	bl	8004922 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 80048a0:	887b      	ldrh	r3, [r7, #2]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f005 fb4a 	bl	8009f3c <LCD_IO_WriteData>
}
 80048a8:	bf00      	nop
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	460a      	mov	r2, r1
 80048ba:	80fb      	strh	r3, [r7, #6]
 80048bc:	4613      	mov	r3, r2
 80048be:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80048c0:	88ba      	ldrh	r2, [r7, #4]
 80048c2:	88fb      	ldrh	r3, [r7, #6]
 80048c4:	4611      	mov	r1, r2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff ffa4 	bl	8004814 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 80048cc:	88ba      	ldrh	r2, [r7, #4]
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f9c0 	bl	8004c58 <ST7789H2_ReadPixel_rgb888>
 80048d8:	4603      	mov	r3, r0
 80048da:	461a      	mov	r2, r3
 80048dc:	733a      	strb	r2, [r7, #12]
 80048de:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80048e2:	737a      	strb	r2, [r7, #13]
 80048e4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80048e8:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 80048ea:	7b3b      	ldrb	r3, [r7, #12]
 80048ec:	08db      	lsrs	r3, r3, #3
 80048ee:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 80048f0:	7b7b      	ldrb	r3, [r7, #13]
 80048f2:	089b      	lsrs	r3, r3, #2
 80048f4:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 80048f6:	7bbb      	ldrb	r3, [r7, #14]
 80048f8:	08db      	lsrs	r3, r3, #3
 80048fa:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	02db      	lsls	r3, r3, #11
 8004902:	b29a      	uxth	r2, r3
 8004904:	7dbb      	ldrb	r3, [r7, #22]
 8004906:	b29b      	uxth	r3, r3
 8004908:	015b      	lsls	r3, r3, #5
 800490a:	b29b      	uxth	r3, r3
 800490c:	4413      	add	r3, r2
 800490e:	b29a      	uxth	r2, r3
 8004910:	7d7b      	ldrb	r3, [r7, #21]
 8004912:	b29b      	uxth	r3, r3
 8004914:	4413      	add	r3, r2
 8004916:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8004918:	8a7b      	ldrh	r3, [r7, #18]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	4603      	mov	r3, r0
 800492a:	6039      	str	r1, [r7, #0]
 800492c:	71fb      	strb	r3, [r7, #7]
 800492e:	4613      	mov	r3, r2
 8004930:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	4618      	mov	r0, r3
 8004936:	f005 fb0e 	bl	8009f56 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 800493a:	2300      	movs	r3, #0
 800493c:	73fb      	strb	r3, [r7, #15]
 800493e:	e00a      	b.n	8004956 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	4413      	add	r3, r2
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	4618      	mov	r0, r3
 800494c:	f005 faf6 	bl	8009f3c <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	3301      	adds	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
 8004956:	7bfa      	ldrb	r2, [r7, #15]
 8004958:	79bb      	ldrb	r3, [r7, #6]
 800495a:	429a      	cmp	r2, r3
 800495c:	d3f0      	bcc.n	8004940 <ST7789H2_WriteReg+0x1e>
  }
}
 800495e:	bf00      	nop
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	4618      	mov	r0, r3
 8004976:	f005 faee 	bl	8009f56 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 800497a:	f005 faf9 	bl	8009f70 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 800497e:	f005 faf7 	bl	8009f70 <LCD_IO_ReadData>
 8004982:	4603      	mov	r3, r0
 8004984:	b2db      	uxtb	r3, r3
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004990:	b490      	push	{r4, r7}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	4604      	mov	r4, r0
 8004998:	4608      	mov	r0, r1
 800499a:	4611      	mov	r1, r2
 800499c:	461a      	mov	r2, r3
 800499e:	4623      	mov	r3, r4
 80049a0:	80fb      	strh	r3, [r7, #6]
 80049a2:	4603      	mov	r3, r0
 80049a4:	80bb      	strh	r3, [r7, #4]
 80049a6:	460b      	mov	r3, r1
 80049a8:	807b      	strh	r3, [r7, #2]
 80049aa:	4613      	mov	r3, r2
 80049ac:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 80049ae:	88fb      	ldrh	r3, [r7, #6]
 80049b0:	2bef      	cmp	r3, #239	; 0xef
 80049b2:	d803      	bhi.n	80049bc <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80049b4:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <ST7789H2_SetDisplayWindow+0x94>)
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	8013      	strh	r3, [r2, #0]
 80049ba:	e002      	b.n	80049c2 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80049bc:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <ST7789H2_SetDisplayWindow+0x94>)
 80049be:	2200      	movs	r2, #0
 80049c0:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 80049c2:	88bb      	ldrh	r3, [r7, #4]
 80049c4:	2bef      	cmp	r3, #239	; 0xef
 80049c6:	d803      	bhi.n	80049d0 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80049c8:	4a17      	ldr	r2, [pc, #92]	; (8004a28 <ST7789H2_SetDisplayWindow+0x98>)
 80049ca:	88bb      	ldrh	r3, [r7, #4]
 80049cc:	8013      	strh	r3, [r2, #0]
 80049ce:	e002      	b.n	80049d6 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 80049d0:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <ST7789H2_SetDisplayWindow+0x98>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	88fb      	ldrh	r3, [r7, #6]
 80049da:	4413      	add	r3, r2
 80049dc:	2bf0      	cmp	r3, #240	; 0xf0
 80049de:	dc08      	bgt.n	80049f2 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 80049e0:	887a      	ldrh	r2, [r7, #2]
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	4413      	add	r3, r2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <ST7789H2_SetDisplayWindow+0x9c>)
 80049ee:	801a      	strh	r2, [r3, #0]
 80049f0:	e002      	b.n	80049f8 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 80049f2:	4b0e      	ldr	r3, [pc, #56]	; (8004a2c <ST7789H2_SetDisplayWindow+0x9c>)
 80049f4:	22ef      	movs	r2, #239	; 0xef
 80049f6:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 80049f8:	883a      	ldrh	r2, [r7, #0]
 80049fa:	88bb      	ldrh	r3, [r7, #4]
 80049fc:	4413      	add	r3, r2
 80049fe:	2bf0      	cmp	r3, #240	; 0xf0
 8004a00:	dc08      	bgt.n	8004a14 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8004a02:	883a      	ldrh	r2, [r7, #0]
 8004a04:	88bb      	ldrh	r3, [r7, #4]
 8004a06:	4413      	add	r3, r2
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <ST7789H2_SetDisplayWindow+0xa0>)
 8004a10:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8004a12:	e002      	b.n	8004a1a <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8004a14:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <ST7789H2_SetDisplayWindow+0xa0>)
 8004a16:	22ef      	movs	r2, #239	; 0xef
 8004a18:	801a      	strh	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc90      	pop	{r4, r7}
 8004a22:	4770      	bx	lr
 8004a24:	20000ff8 	.word	0x20000ff8
 8004a28:	20000ffa 	.word	0x20000ffa
 8004a2c:	20000274 	.word	0x20000274
 8004a30:	20000276 	.word	0x20000276

08004a34 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	461a      	mov	r2, r3
 8004a42:	4623      	mov	r3, r4
 8004a44:	80fb      	strh	r3, [r7, #6]
 8004a46:	4603      	mov	r3, r0
 8004a48:	80bb      	strh	r3, [r7, #4]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	807b      	strh	r3, [r7, #2]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8004a52:	887a      	ldrh	r2, [r7, #2]
 8004a54:	88bb      	ldrh	r3, [r7, #4]
 8004a56:	4611      	mov	r1, r2
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff fedb 	bl	8004814 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2100      	movs	r1, #0
 8004a62:	202c      	movs	r0, #44	; 0x2c
 8004a64:	f7ff ff5d 	bl	8004922 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8004a68:	2300      	movs	r3, #0
 8004a6a:	81fb      	strh	r3, [r7, #14]
 8004a6c:	e006      	b.n	8004a7c <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f005 fa63 	bl	8009f3c <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8004a76:	89fb      	ldrh	r3, [r7, #14]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	81fb      	strh	r3, [r7, #14]
 8004a7c:	89fa      	ldrh	r2, [r7, #14]
 8004a7e:	883b      	ldrh	r3, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d3f4      	bcc.n	8004a6e <ST7789H2_DrawHLine+0x3a>
  }  
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd90      	pop	{r4, r7, pc}

08004a8e <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004a8e:	b590      	push	{r4, r7, lr}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	4604      	mov	r4, r0
 8004a96:	4608      	mov	r0, r1
 8004a98:	4611      	mov	r1, r2
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4623      	mov	r3, r4
 8004a9e:	80fb      	strh	r3, [r7, #6]
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	80bb      	strh	r3, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	807b      	strh	r3, [r7, #2]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004aac:	887a      	ldrh	r2, [r7, #2]
 8004aae:	88bb      	ldrh	r3, [r7, #4]
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff feae 	bl	8004814 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2100      	movs	r1, #0
 8004abc:	202c      	movs	r0, #44	; 0x2c
 8004abe:	f7ff ff30 	bl	8004922 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	81fb      	strh	r3, [r7, #14]
 8004ac6:	e00b      	b.n	8004ae0 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8004ac8:	887a      	ldrh	r2, [r7, #2]
 8004aca:	89fb      	ldrh	r3, [r7, #14]
 8004acc:	4413      	add	r3, r2
 8004ace:	b299      	uxth	r1, r3
 8004ad0:	88fa      	ldrh	r2, [r7, #6]
 8004ad2:	88bb      	ldrh	r3, [r7, #4]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fecf 	bl	8004878 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8004ada:	89fb      	ldrh	r3, [r7, #14]
 8004adc:	3301      	adds	r3, #1
 8004ade:	81fb      	strh	r3, [r7, #14]
 8004ae0:	89fa      	ldrh	r2, [r7, #14]
 8004ae2:	883b      	ldrh	r3, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d3ef      	bcc.n	8004ac8 <ST7789H2_DrawVLine+0x3a>
  }
}
 8004ae8:	bf00      	nop
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd90      	pop	{r4, r7, pc}
	...

08004af4 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	603a      	str	r2, [r7, #0]
 8004afe:	80fb      	strh	r3, [r7, #6]
 8004b00:	460b      	mov	r3, r1
 8004b02:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8004b10:	4b30      	ldr	r3, [pc, #192]	; (8004bd4 <ST7789H2_DrawBitmap+0xe0>)
 8004b12:	881a      	ldrh	r2, [r3, #0]
 8004b14:	4b30      	ldr	r3, [pc, #192]	; (8004bd8 <ST7789H2_DrawBitmap+0xe4>)
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8004b20:	4b2e      	ldr	r3, [pc, #184]	; (8004bdc <ST7789H2_DrawBitmap+0xe8>)
 8004b22:	881a      	ldrh	r2, [r3, #0]
 8004b24:	4b2e      	ldr	r3, [pc, #184]	; (8004be0 <ST7789H2_DrawBitmap+0xec>)
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	3302      	adds	r3, #2
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	041b      	lsls	r3, r3, #16
 8004b44:	461a      	mov	r2, r3
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	330a      	adds	r3, #10
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	330c      	adds	r3, #12
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	461a      	mov	r2, r3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	4413      	add	r3, r2
 8004b78:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8004b7a:	88ba      	ldrh	r2, [r7, #4]
 8004b7c:	89bb      	ldrh	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	e01d      	b.n	8004bc0 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	4611      	mov	r1, r2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff fe3f 	bl	8004814 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b299      	uxth	r1, r3
 8004b9e:	89fb      	ldrh	r3, [r7, #14]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	4413      	add	r3, r2
 8004bac:	89fa      	ldrh	r2, [r7, #14]
 8004bae:	88f8      	ldrh	r0, [r7, #6]
 8004bb0:	f000 f89c 	bl	8004cec <ST7789H2_DrawRGBHLine>
    nb_line++;
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	88bb      	ldrh	r3, [r7, #4]
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d8dd      	bhi.n	8004b84 <ST7789H2_DrawBitmap+0x90>
  }
}
 8004bc8:	bf00      	nop
 8004bca:	bf00      	nop
 8004bcc:	3720      	adds	r7, #32
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000274 	.word	0x20000274
 8004bd8:	20000ff8 	.word	0x20000ff8
 8004bdc:	20000276 	.word	0x20000276
 8004be0:	20000ffa 	.word	0x20000ffa

08004be4 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8004be4:	b590      	push	{r4, r7, lr}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4604      	mov	r4, r0
 8004bec:	4608      	mov	r0, r1
 8004bee:	4611      	mov	r1, r2
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4623      	mov	r3, r4
 8004bf4:	80fb      	strh	r3, [r7, #6]
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	80bb      	strh	r3, [r7, #4]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	807b      	strh	r3, [r7, #2]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8004c06:	88bb      	ldrh	r3, [r7, #4]
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	e019      	b.n	8004c40 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	88fb      	ldrh	r3, [r7, #6]
 8004c12:	4611      	mov	r1, r2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fdfd 	bl	8004814 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	b299      	uxth	r1, r3
 8004c1e:	887b      	ldrh	r3, [r7, #2]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	6a3a      	ldr	r2, [r7, #32]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	887a      	ldrh	r2, [r7, #2]
 8004c2e:	88f8      	ldrh	r0, [r7, #6]
 8004c30:	f000 f85c 	bl	8004cec <ST7789H2_DrawRGBHLine>
    nb_line++;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	3301      	adds	r3, #1
 8004c38:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	88ba      	ldrh	r2, [r7, #4]
 8004c42:	883b      	ldrh	r3, [r7, #0]
 8004c44:	4413      	add	r3, r2
 8004c46:	461a      	mov	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d3de      	bcc.n	8004c0c <ST7789H2_DrawRGBImage+0x28>
  }
}
 8004c4e:	bf00      	nop
 8004c50:	bf00      	nop
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd90      	pop	{r4, r7, pc}

08004c58 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	460a      	mov	r2, r1
 8004c62:	80fb      	strh	r3, [r7, #6]
 8004c64:	4613      	mov	r3, r2
 8004c66:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004c68:	88ba      	ldrh	r2, [r7, #4]
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fdd0 	bl	8004814 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8004c74:	2200      	movs	r2, #0
 8004c76:	2100      	movs	r1, #0
 8004c78:	202e      	movs	r0, #46	; 0x2e
 8004c7a:	f7ff fe52 	bl	8004922 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8004c7e:	f005 f977 	bl	8009f70 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8004c82:	f005 f975 	bl	8009f70 <LCD_IO_ReadData>
 8004c86:	4603      	mov	r3, r0
 8004c88:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8004c8a:	f005 f971 	bl	8009f70 <LCD_IO_ReadData>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8004c92:	8afb      	ldrh	r3, [r7, #22]
 8004c94:	121b      	asrs	r3, r3, #8
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f023 0303 	bic.w	r3, r3, #3
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8004ca0:	8afb      	ldrh	r3, [r7, #22]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f023 0303 	bic.w	r3, r3, #3
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8004cac:	8abb      	ldrh	r3, [r7, #20]
 8004cae:	121b      	asrs	r3, r3, #8
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8004cba:	f107 0310 	add.w	r3, r7, #16
 8004cbe:	f107 020c 	add.w	r2, r7, #12
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	8019      	strh	r1, [r3, #0]
 8004cc8:	3302      	adds	r3, #2
 8004cca:	0c12      	lsrs	r2, r2, #16
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	7c3a      	ldrb	r2, [r7, #16]
 8004cd2:	f362 0307 	bfi	r3, r2, #0, #8
 8004cd6:	7c7a      	ldrb	r2, [r7, #17]
 8004cd8:	f362 230f 	bfi	r3, r2, #8, #8
 8004cdc:	7cba      	ldrb	r2, [r7, #18]
 8004cde:	f362 4317 	bfi	r3, r2, #16, #8
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	607b      	str	r3, [r7, #4]
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	81fb      	strh	r3, [r7, #14]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	81bb      	strh	r3, [r7, #12]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	202c      	movs	r0, #44	; 0x2c
 8004d0e:	f7ff fe08 	bl	8004922 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8004d12:	89fb      	ldrh	r3, [r7, #14]
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	e029      	b.n	8004d6c <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8004d18:	4b1a      	ldr	r3, [pc, #104]	; (8004d84 <ST7789H2_DrawRGBHLine+0x98>)
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d320      	bcc.n	8004d66 <ST7789H2_DrawRGBHLine+0x7a>
 8004d24:	4b18      	ldr	r3, [pc, #96]	; (8004d88 <ST7789H2_DrawRGBHLine+0x9c>)
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	89ba      	ldrh	r2, [r7, #12]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d31b      	bcc.n	8004d66 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8004d2e:	4b17      	ldr	r3, [pc, #92]	; (8004d8c <ST7789H2_DrawRGBHLine+0xa0>)
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d815      	bhi.n	8004d66 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8004d3a:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <ST7789H2_DrawRGBHLine+0xa4>)
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	89ba      	ldrh	r2, [r7, #12]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d810      	bhi.n	8004d66 <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8004d44:	897a      	ldrh	r2, [r7, #10]
 8004d46:	89fb      	ldrh	r3, [r7, #14]
 8004d48:	441a      	add	r2, r3
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d007      	beq.n	8004d60 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f005 f8ee 	bl	8009f3c <LCD_IO_WriteData>
      }      
      i++;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	3301      	adds	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	61bb      	str	r3, [r7, #24]
 8004d6c:	897a      	ldrh	r2, [r7, #10]
 8004d6e:	89fb      	ldrh	r3, [r7, #14]
 8004d70:	4413      	add	r3, r2
 8004d72:	461a      	mov	r2, r3
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d3ce      	bcc.n	8004d18 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8004d7a:	bf00      	nop
 8004d7c:	bf00      	nop
 8004d7e:	3720      	adds	r7, #32
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20000ff8 	.word	0x20000ff8
 8004d88:	20000ffa 	.word	0x20000ffa
 8004d8c:	20000274 	.word	0x20000274
 8004d90:	20000276 	.word	0x20000276

08004d94 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004da2:	6839      	ldr	r1, [r7, #0]
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f001 fcc0 	bl	800672a <VL53L0X_get_offset_calibration_data_micro_meter>
 8004daa:	4603      	mov	r3, r0
 8004dac:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004dbc:	b5b0      	push	{r4, r5, r7, lr}
 8004dbe:	b096      	sub	sp, #88	; 0x58
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004dca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d107      	bne.n	8004de2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2188      	movs	r1, #136	; 0x88
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fe f84c 	bl	8002e74 <VL53L0X_WrByte>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004df0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004dfa:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a9e      	ldr	r2, [pc, #632]	; (800507c <VL53L0X_DataInit+0x2c0>)
 8004e02:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a9d      	ldr	r2, [pc, #628]	; (8005080 <VL53L0X_DataInit+0x2c4>)
 8004e0a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004e14:	f107 0310 	add.w	r3, r7, #16
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fab4 	bl	8005388 <VL53L0X_GetDeviceParameters>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8004e26:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d112      	bne.n	8004e54 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004e32:	2300      	movs	r3, #0
 8004e34:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f103 0410 	add.w	r4, r3, #16
 8004e3c:	f107 0510 	add.w	r5, r7, #16
 8004e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2264      	movs	r2, #100	; 0x64
 8004e58:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004e62:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004e6c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004e76:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004e82:	2201      	movs	r2, #1
 8004e84:	2180      	movs	r1, #128	; 0x80
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fd fff4 	bl	8002e74 <VL53L0X_WrByte>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	21ff      	movs	r1, #255	; 0xff
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fd ffe8 	bl	8002e74 <VL53L0X_WrByte>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fd ffdc 	bl	8002e74 <VL53L0X_WrByte>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004eca:	f107 030f 	add.w	r3, r7, #15
 8004ece:	461a      	mov	r2, r3
 8004ed0:	2191      	movs	r1, #145	; 0x91
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fe f882 	bl	8002fdc <VL53L0X_RdByte>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	461a      	mov	r2, r3
 8004edc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004ee6:	7bfa      	ldrb	r2, [r7, #15]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004eee:	2201      	movs	r2, #1
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fd ffbe 	bl	8002e74 <VL53L0X_WrByte>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	461a      	mov	r2, r3
 8004efc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004f06:	2200      	movs	r2, #0
 8004f08:	21ff      	movs	r1, #255	; 0xff
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fd ffb2 	bl	8002e74 <VL53L0X_WrByte>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2180      	movs	r1, #128	; 0x80
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fd ffa6 	bl	8002e74 <VL53L0X_WrByte>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004f36:	2300      	movs	r3, #0
 8004f38:	653b      	str	r3, [r7, #80]	; 0x50
 8004f3a:	e014      	b.n	8004f66 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8004f3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d114      	bne.n	8004f6e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2201      	movs	r2, #1
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fd43 	bl	80059d8 <VL53L0X_SetLimitCheckEnable>
 8004f52:	4603      	mov	r3, r0
 8004f54:	461a      	mov	r2, r3
 8004f56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f62:	3301      	adds	r3, #1
 8004f64:	653b      	str	r3, [r7, #80]	; 0x50
 8004f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f68:	2b05      	cmp	r3, #5
 8004f6a:	dde7      	ble.n	8004f3c <VL53L0X_DataInit+0x180>
 8004f6c:	e000      	b.n	8004f70 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8004f6e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004f70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d107      	bne.n	8004f88 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2102      	movs	r1, #2
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 fd2b 	bl	80059d8 <VL53L0X_SetLimitCheckEnable>
 8004f82:	4603      	mov	r3, r0
 8004f84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004f88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d107      	bne.n	8004fa0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004f90:	2200      	movs	r2, #0
 8004f92:	2103      	movs	r1, #3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fd1f 	bl	80059d8 <VL53L0X_SetLimitCheckEnable>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004fa0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d107      	bne.n	8004fb8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2104      	movs	r1, #4
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fd13 	bl	80059d8 <VL53L0X_SetLimitCheckEnable>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004fb8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d107      	bne.n	8004fd0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2105      	movs	r1, #5
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fd07 	bl	80059d8 <VL53L0X_SetLimitCheckEnable>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004fd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d108      	bne.n	8004fea <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004fd8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004fdc:	2100      	movs	r1, #0
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fdaa 	bl	8005b38 <VL53L0X_SetLimitCheckValue>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004fea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d108      	bne.n	8005004 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fd9d 	bl	8005b38 <VL53L0X_SetLimitCheckValue>
 8004ffe:	4603      	mov	r3, r0
 8005000:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005004:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005008:	2b00      	cmp	r3, #0
 800500a:	d108      	bne.n	800501e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800500c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005010:	2102      	movs	r1, #2
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fd90 	bl	8005b38 <VL53L0X_SetLimitCheckValue>
 8005018:	4603      	mov	r3, r0
 800501a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800501e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005022:	2b00      	cmp	r3, #0
 8005024:	d107      	bne.n	8005036 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005026:	2200      	movs	r2, #0
 8005028:	2103      	movs	r1, #3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fd84 	bl	8005b38 <VL53L0X_SetLimitCheckValue>
 8005030:	4603      	mov	r3, r0
 8005032:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005036:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10f      	bne.n	800505e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	22ff      	movs	r2, #255	; 0xff
 8005042:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005046:	22ff      	movs	r2, #255	; 0xff
 8005048:	2101      	movs	r1, #1
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fd ff12 	bl	8002e74 <VL53L0X_WrByte>
 8005050:	4603      	mov	r3, r0
 8005052:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800505e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005062:	2b00      	cmp	r3, #0
 8005064:	d103      	bne.n	800506e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800506e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005072:	4618      	mov	r0, r3
 8005074:	3758      	adds	r7, #88	; 0x58
 8005076:	46bd      	mov	sp, r7
 8005078:	bdb0      	pop	{r4, r5, r7, pc}
 800507a:	bf00      	nop
 800507c:	00016b85 	.word	0x00016b85
 8005080:	000970a4 	.word	0x000970a4

08005084 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8005084:	b5b0      	push	{r4, r5, r7, lr}
 8005086:	b09e      	sub	sp, #120	; 0x78
 8005088:	af02      	add	r7, sp, #8
 800508a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800508c:	2300      	movs	r3, #0
 800508e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8005092:	f107 031c 	add.w	r3, r7, #28
 8005096:	2240      	movs	r2, #64	; 0x40
 8005098:	2100      	movs	r1, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f013 fe92 	bl	8018dc4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80050c0:	2101      	movs	r1, #1
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f002 fa74 	bl	80075b0 <VL53L0X_get_info_from_device>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80050d4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80050dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80050e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d80d      	bhi.n	8005104 <VL53L0X_StaticInit+0x80>
 80050e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d102      	bne.n	80050f6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80050f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d806      	bhi.n	8005104 <VL53L0X_StaticInit+0x80>
 80050f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10e      	bne.n	800511c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80050fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005100:	2b0c      	cmp	r3, #12
 8005102:	d90b      	bls.n	800511c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8005104:	f107 0218 	add.w	r2, r7, #24
 8005108:	f107 0314 	add.w	r3, r7, #20
 800510c:	4619      	mov	r1, r3
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f001 fd06 	bl	8006b20 <VL53L0X_perform_ref_spad_management>
 8005114:	4603      	mov	r3, r0
 8005116:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800511a:	e009      	b.n	8005130 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800511c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005120:	461a      	mov	r2, r3
 8005122:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f001 ff07 	bl	8006f38 <VL53L0X_set_reference_spads>
 800512a:	4603      	mov	r3, r0
 800512c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8005130:	4b94      	ldr	r3, [pc, #592]	; (8005384 <VL53L0X_StaticInit+0x300>)
 8005132:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8005134:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10f      	bne.n	800515c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005142:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8005146:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800514a:	2b00      	cmp	r3, #0
 800514c:	d104      	bne.n	8005158 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005154:	66bb      	str	r3, [r7, #104]	; 0x68
 8005156:	e001      	b.n	800515c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8005158:	4b8a      	ldr	r3, [pc, #552]	; (8005384 <VL53L0X_StaticInit+0x300>)
 800515a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800515c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8005164:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f003 fb40 	bl	80087ec <VL53L0X_load_tuning_settings>
 800516c:	4603      	mov	r3, r0
 800516e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8005172:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800517a:	2300      	movs	r3, #0
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	2304      	movs	r3, #4
 8005180:	2200      	movs	r2, #0
 8005182:	2100      	movs	r1, #0
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f001 f8ff 	bl	8006388 <VL53L0X_SetGpioConfig>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005190:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005194:	2b00      	cmp	r3, #0
 8005196:	d121      	bne.n	80051dc <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005198:	2201      	movs	r2, #1
 800519a:	21ff      	movs	r1, #255	; 0xff
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7fd fe69 	bl	8002e74 <VL53L0X_WrByte>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80051a8:	f107 031a 	add.w	r3, r7, #26
 80051ac:	461a      	mov	r2, r3
 80051ae:	2184      	movs	r1, #132	; 0x84
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fd ff3d 	bl	8003030 <VL53L0X_RdWord>
 80051b6:	4603      	mov	r3, r0
 80051b8:	461a      	mov	r2, r3
 80051ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80051be:	4313      	orrs	r3, r2
 80051c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80051c4:	2200      	movs	r2, #0
 80051c6:	21ff      	movs	r1, #255	; 0xff
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7fd fe53 	bl	8002e74 <VL53L0X_WrByte>
 80051ce:	4603      	mov	r3, r0
 80051d0:	461a      	mov	r2, r3
 80051d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80051dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d105      	bne.n	80051f0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80051e4:	8b7b      	ldrh	r3, [r7, #26]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	461a      	mov	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80051f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d108      	bne.n	800520a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80051f8:	f107 031c 	add.w	r3, r7, #28
 80051fc:	4619      	mov	r1, r3
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f8c2 	bl	8005388 <VL53L0X_GetDeviceParameters>
 8005204:	4603      	mov	r3, r0
 8005206:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800520a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800520e:	2b00      	cmp	r3, #0
 8005210:	d110      	bne.n	8005234 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8005212:	f107 0319 	add.w	r3, r7, #25
 8005216:	4619      	mov	r1, r3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f984 	bl	8005526 <VL53L0X_GetFractionEnable>
 800521e:	4603      	mov	r3, r0
 8005220:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8005224:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005228:	2b00      	cmp	r3, #0
 800522a:	d103      	bne.n	8005234 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800522c:	7e7a      	ldrb	r2, [r7, #25]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005234:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10e      	bne.n	800525a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f103 0410 	add.w	r4, r3, #16
 8005242:	f107 051c 	add.w	r5, r7, #28
 8005246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800524a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800524c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800524e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005252:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005256:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800525a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800525e:	2b00      	cmp	r3, #0
 8005260:	d111      	bne.n	8005286 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8005262:	f107 0319 	add.w	r3, r7, #25
 8005266:	461a      	mov	r2, r3
 8005268:	2101      	movs	r1, #1
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fd feb6 	bl	8002fdc <VL53L0X_RdByte>
 8005270:	4603      	mov	r3, r0
 8005272:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8005276:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800527a:	2b00      	cmp	r3, #0
 800527c:	d103      	bne.n	8005286 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800527e:	7e7a      	ldrb	r2, [r7, #25]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8005286:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800528a:	2b00      	cmp	r3, #0
 800528c:	d107      	bne.n	800529e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800528e:	2200      	movs	r2, #0
 8005290:	2100      	movs	r1, #0
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f9a4 	bl	80055e0 <VL53L0X_SetSequenceStepEnable>
 8005298:	4603      	mov	r3, r0
 800529a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800529e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d107      	bne.n	80052b6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80052a6:	2200      	movs	r2, #0
 80052a8:	2102      	movs	r1, #2
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f998 	bl	80055e0 <VL53L0X_SetSequenceStepEnable>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80052b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d103      	bne.n	80052c6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2203      	movs	r2, #3
 80052c2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80052c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80052ce:	f107 0313 	add.w	r3, r7, #19
 80052d2:	461a      	mov	r2, r3
 80052d4:	2100      	movs	r1, #0
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f96a 	bl	80055b0 <VL53L0X_GetVcselPulsePeriod>
 80052dc:	4603      	mov	r3, r0
 80052de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80052e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d103      	bne.n	80052f2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80052ea:	7cfa      	ldrb	r2, [r7, #19]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80052f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80052fa:	f107 0313 	add.w	r3, r7, #19
 80052fe:	461a      	mov	r2, r3
 8005300:	2101      	movs	r1, #1
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f954 	bl	80055b0 <VL53L0X_GetVcselPulsePeriod>
 8005308:	4603      	mov	r3, r0
 800530a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800530e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005312:	2b00      	cmp	r3, #0
 8005314:	d103      	bne.n	800531e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005316:	7cfa      	ldrb	r2, [r7, #19]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800531e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8005326:	f107 030c 	add.w	r3, r7, #12
 800532a:	461a      	mov	r2, r3
 800532c:	2103      	movs	r1, #3
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f002 fec0 	bl	80080b4 <get_sequence_step_timeout>
 8005334:	4603      	mov	r3, r0
 8005336:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800533a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800534a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8005352:	f107 030c 	add.w	r3, r7, #12
 8005356:	461a      	mov	r2, r3
 8005358:	2104      	movs	r1, #4
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f002 feaa 	bl	80080b4 <get_sequence_step_timeout>
 8005360:	4603      	mov	r3, r0
 8005362:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005366:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800536a:	2b00      	cmp	r3, #0
 800536c:	d103      	bne.n	8005376 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005376:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800537a:	4618      	mov	r0, r3
 800537c:	3770      	adds	r7, #112	; 0x70
 800537e:	46bd      	mov	sp, r7
 8005380:	bdb0      	pop	{r4, r5, r7, pc}
 8005382:	bf00      	nop
 8005384:	20000278 	.word	0x20000278

08005388 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005392:	2300      	movs	r3, #0
 8005394:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f8b0 	bl	8005500 <VL53L0X_GetDeviceMode>
 80053a0:	4603      	mov	r3, r0
 80053a2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80053a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d107      	bne.n	80053bc <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	3308      	adds	r3, #8
 80053b0:	4619      	mov	r1, r3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fa94 	bl	80058e0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80053b8:	4603      	mov	r3, r0
 80053ba:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80053bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d102      	bne.n	80053ca <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2200      	movs	r2, #0
 80053c8:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80053ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d107      	bne.n	80053e2 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	3310      	adds	r3, #16
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 faca 	bl	8005972 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80053de:	4603      	mov	r3, r0
 80053e0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80053e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d107      	bne.n	80053fa <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	3314      	adds	r3, #20
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff fccf 	bl	8004d94 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80053f6:	4603      	mov	r3, r0
 80053f8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80053fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d134      	bne.n	800546c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005402:	2300      	movs	r3, #0
 8005404:	60bb      	str	r3, [r7, #8]
 8005406:	e02a      	b.n	800545e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d12a      	bne.n	8005466 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	b299      	uxth	r1, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	3308      	adds	r3, #8
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	4413      	add	r3, r2
 800541e:	3304      	adds	r3, #4
 8005420:	461a      	mov	r2, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fbea 	bl	8005bfc <VL53L0X_GetLimitCheckValue>
 8005428:	4603      	mov	r3, r0
 800542a:	461a      	mov	r2, r3
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	4313      	orrs	r3, r2
 8005430:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d117      	bne.n	800546a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	b299      	uxth	r1, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	3318      	adds	r3, #24
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	4413      	add	r3, r2
 8005446:	461a      	mov	r2, r3
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fb51 	bl	8005af0 <VL53L0X_GetLimitCheckEnable>
 800544e:	4603      	mov	r3, r0
 8005450:	461a      	mov	r2, r3
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	4313      	orrs	r3, r2
 8005456:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	3301      	adds	r3, #1
 800545c:	60bb      	str	r3, [r7, #8]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b05      	cmp	r3, #5
 8005462:	ddd1      	ble.n	8005408 <VL53L0X_GetDeviceParameters+0x80>
 8005464:	e002      	b.n	800546c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005466:	bf00      	nop
 8005468:	e000      	b.n	800546c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800546a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800546c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d107      	bne.n	8005484 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	333c      	adds	r3, #60	; 0x3c
 8005478:	4619      	mov	r1, r3
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fc4c 	bl	8005d18 <VL53L0X_GetWrapAroundCheckEnable>
 8005480:	4603      	mov	r3, r0
 8005482:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8005484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d107      	bne.n	800549c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	3304      	adds	r3, #4
 8005490:	4619      	mov	r1, r3
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f879 	bl	800558a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8005498:	4603      	mov	r3, r0
 800549a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800549c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054b4:	2300      	movs	r3, #0
 80054b6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	2b15      	cmp	r3, #21
 80054bc:	bf8c      	ite	hi
 80054be:	2201      	movhi	r2, #1
 80054c0:	2200      	movls	r2, #0
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	2a00      	cmp	r2, #0
 80054c6:	d10e      	bne.n	80054e6 <VL53L0X_SetDeviceMode+0x3e>
 80054c8:	2201      	movs	r2, #1
 80054ca:	409a      	lsls	r2, r3
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <VL53L0X_SetDeviceMode+0x54>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	78fa      	ldrb	r2, [r7, #3]
 80054e2:	741a      	strb	r2, [r3, #16]
		break;
 80054e4:	e001      	b.n	80054ea <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80054e6:	23f8      	movs	r3, #248	; 0xf8
 80054e8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80054ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	0030000b 	.word	0x0030000b

08005500 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800550a:	2300      	movs	r3, #0
 800550c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	7c1a      	ldrb	r2, [r3, #16]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005516:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005530:	2300      	movs	r3, #0
 8005532:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	2109      	movs	r1, #9
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7fd fd4f 	bl	8002fdc <VL53L0X_RdByte>
 800553e:	4603      	mov	r3, r0
 8005540:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	b2da      	uxtb	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005558:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f002 ffa7 	bl	80084c8 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800557a:	4603      	mov	r3, r0
 800557c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800557e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005594:	2300      	movs	r3, #0
 8005596:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f003 f874 	bl	8008688 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80055a0:	4603      	mov	r3, r0
 80055a2:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80055a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	460b      	mov	r3, r1
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055be:	2300      	movs	r3, #0
 80055c0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80055c2:	7afb      	ldrb	r3, [r7, #11]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	4619      	mov	r1, r3
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f002 ff46 	bl	800845a <VL53L0X_get_vcsel_pulse_period>
 80055ce:	4603      	mov	r3, r0
 80055d0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80055d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	70fb      	strb	r3, [r7, #3]
 80055ec:	4613      	mov	r3, r2
 80055ee:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055f0:	2300      	movs	r3, #0
 80055f2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80055fc:	f107 030f 	add.w	r3, r7, #15
 8005600:	461a      	mov	r2, r3
 8005602:	2101      	movs	r1, #1
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7fd fce9 	bl	8002fdc <VL53L0X_RdByte>
 800560a:	4603      	mov	r3, r0
 800560c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8005612:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d15a      	bne.n	80056d0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800561a:	78bb      	ldrb	r3, [r7, #2]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d12b      	bne.n	8005678 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	2b04      	cmp	r3, #4
 8005624:	d825      	bhi.n	8005672 <VL53L0X_SetSequenceStepEnable+0x92>
 8005626:	a201      	add	r2, pc, #4	; (adr r2, 800562c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	08005641 	.word	0x08005641
 8005630:	0800564b 	.word	0x0800564b
 8005634:	08005655 	.word	0x08005655
 8005638:	0800565f 	.word	0x0800565f
 800563c:	08005669 	.word	0x08005669
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005640:	7dbb      	ldrb	r3, [r7, #22]
 8005642:	f043 0310 	orr.w	r3, r3, #16
 8005646:	75bb      	strb	r3, [r7, #22]
				break;
 8005648:	e043      	b.n	80056d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800564a:	7dbb      	ldrb	r3, [r7, #22]
 800564c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005650:	75bb      	strb	r3, [r7, #22]
				break;
 8005652:	e03e      	b.n	80056d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8005654:	7dbb      	ldrb	r3, [r7, #22]
 8005656:	f043 0304 	orr.w	r3, r3, #4
 800565a:	75bb      	strb	r3, [r7, #22]
				break;
 800565c:	e039      	b.n	80056d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800565e:	7dbb      	ldrb	r3, [r7, #22]
 8005660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005664:	75bb      	strb	r3, [r7, #22]
				break;
 8005666:	e034      	b.n	80056d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8005668:	7dbb      	ldrb	r3, [r7, #22]
 800566a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800566e:	75bb      	strb	r3, [r7, #22]
				break;
 8005670:	e02f      	b.n	80056d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005672:	23fc      	movs	r3, #252	; 0xfc
 8005674:	75fb      	strb	r3, [r7, #23]
 8005676:	e02c      	b.n	80056d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	2b04      	cmp	r3, #4
 800567c:	d825      	bhi.n	80056ca <VL53L0X_SetSequenceStepEnable+0xea>
 800567e:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005684:	08005699 	.word	0x08005699
 8005688:	080056a3 	.word	0x080056a3
 800568c:	080056ad 	.word	0x080056ad
 8005690:	080056b7 	.word	0x080056b7
 8005694:	080056c1 	.word	0x080056c1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8005698:	7dbb      	ldrb	r3, [r7, #22]
 800569a:	f023 0310 	bic.w	r3, r3, #16
 800569e:	75bb      	strb	r3, [r7, #22]
				break;
 80056a0:	e017      	b.n	80056d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80056a2:	7dbb      	ldrb	r3, [r7, #22]
 80056a4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80056a8:	75bb      	strb	r3, [r7, #22]
				break;
 80056aa:	e012      	b.n	80056d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80056ac:	7dbb      	ldrb	r3, [r7, #22]
 80056ae:	f023 0304 	bic.w	r3, r3, #4
 80056b2:	75bb      	strb	r3, [r7, #22]
				break;
 80056b4:	e00d      	b.n	80056d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80056b6:	7dbb      	ldrb	r3, [r7, #22]
 80056b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056bc:	75bb      	strb	r3, [r7, #22]
				break;
 80056be:	e008      	b.n	80056d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80056c0:	7dbb      	ldrb	r3, [r7, #22]
 80056c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c6:	75bb      	strb	r3, [r7, #22]
				break;
 80056c8:	e003      	b.n	80056d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80056ca:	23fc      	movs	r3, #252	; 0xfc
 80056cc:	75fb      	strb	r3, [r7, #23]
 80056ce:	e000      	b.n	80056d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80056d0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	7dba      	ldrb	r2, [r7, #22]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d01e      	beq.n	8005718 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80056da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d107      	bne.n	80056f2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80056e2:	7dbb      	ldrb	r3, [r7, #22]
 80056e4:	461a      	mov	r2, r3
 80056e6:	2101      	movs	r1, #1
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7fd fbc3 	bl	8002e74 <VL53L0X_WrByte>
 80056ee:	4603      	mov	r3, r0
 80056f0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80056f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d103      	bne.n	8005702 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	7dba      	ldrb	r2, [r7, #22]
 80056fe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8005702:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005710:	6939      	ldr	r1, [r7, #16]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff ff26 	bl	8005564 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005718:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	607b      	str	r3, [r7, #4]
 800572e:	460b      	mov	r3, r1
 8005730:	72fb      	strb	r3, [r7, #11]
 8005732:	4613      	mov	r3, r2
 8005734:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8005740:	7afb      	ldrb	r3, [r7, #11]
 8005742:	2b04      	cmp	r3, #4
 8005744:	d836      	bhi.n	80057b4 <sequence_step_enabled+0x90>
 8005746:	a201      	add	r2, pc, #4	; (adr r2, 800574c <sequence_step_enabled+0x28>)
 8005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574c:	08005761 	.word	0x08005761
 8005750:	08005773 	.word	0x08005773
 8005754:	08005785 	.word	0x08005785
 8005758:	08005797 	.word	0x08005797
 800575c:	080057a9 	.word	0x080057a9
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005760:	7abb      	ldrb	r3, [r7, #10]
 8005762:	111b      	asrs	r3, r3, #4
 8005764:	b2db      	uxtb	r3, r3
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	b2da      	uxtb	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	701a      	strb	r2, [r3, #0]
		break;
 8005770:	e022      	b.n	80057b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8005772:	7abb      	ldrb	r3, [r7, #10]
 8005774:	10db      	asrs	r3, r3, #3
 8005776:	b2db      	uxtb	r3, r3
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	b2da      	uxtb	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	701a      	strb	r2, [r3, #0]
		break;
 8005782:	e019      	b.n	80057b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005784:	7abb      	ldrb	r3, [r7, #10]
 8005786:	109b      	asrs	r3, r3, #2
 8005788:	b2db      	uxtb	r3, r3
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	b2da      	uxtb	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	701a      	strb	r2, [r3, #0]
		break;
 8005794:	e010      	b.n	80057b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005796:	7abb      	ldrb	r3, [r7, #10]
 8005798:	119b      	asrs	r3, r3, #6
 800579a:	b2db      	uxtb	r3, r3
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	701a      	strb	r2, [r3, #0]
		break;
 80057a6:	e007      	b.n	80057b8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80057a8:	7abb      	ldrb	r3, [r7, #10]
 80057aa:	09db      	lsrs	r3, r3, #7
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	701a      	strb	r2, [r3, #0]
		break;
 80057b2:	e001      	b.n	80057b8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80057b4:	23fc      	movs	r3, #252	; 0xfc
 80057b6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80057b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	371c      	adds	r7, #28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80057d6:	2300      	movs	r3, #0
 80057d8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80057da:	f107 030e 	add.w	r3, r7, #14
 80057de:	461a      	mov	r2, r3
 80057e0:	2101      	movs	r1, #1
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fd fbfa 	bl	8002fdc <VL53L0X_RdByte>
 80057e8:	4603      	mov	r3, r0
 80057ea:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80057ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d107      	bne.n	8005804 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80057f4:	7bba      	ldrb	r2, [r7, #14]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2100      	movs	r1, #0
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff ff92 	bl	8005724 <sequence_step_enabled>
 8005800:	4603      	mov	r3, r0
 8005802:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d108      	bne.n	800581e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800580c:	7bba      	ldrb	r2, [r7, #14]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	3302      	adds	r3, #2
 8005812:	2101      	movs	r1, #1
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff ff85 	bl	8005724 <sequence_step_enabled>
 800581a:	4603      	mov	r3, r0
 800581c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800581e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d108      	bne.n	8005838 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8005826:	7bba      	ldrb	r2, [r7, #14]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	3301      	adds	r3, #1
 800582c:	2102      	movs	r1, #2
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff ff78 	bl	8005724 <sequence_step_enabled>
 8005834:	4603      	mov	r3, r0
 8005836:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d108      	bne.n	8005852 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8005840:	7bba      	ldrb	r2, [r7, #14]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	3303      	adds	r3, #3
 8005846:	2103      	movs	r1, #3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff ff6b 	bl	8005724 <sequence_step_enabled>
 800584e:	4603      	mov	r3, r0
 8005850:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d108      	bne.n	800586c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800585a:	7bba      	ldrb	r2, [r7, #14]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	3304      	adds	r3, #4
 8005860:	2104      	movs	r1, #4
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff ff5e 	bl	8005724 <sequence_step_enabled>
 8005868:	4603      	mov	r3, r0
 800586a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800586c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005882:	2300      	movs	r3, #0
 8005884:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005886:	f107 030e 	add.w	r3, r7, #14
 800588a:	461a      	mov	r2, r3
 800588c:	21f8      	movs	r1, #248	; 0xf8
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fd fbce 	bl	8003030 <VL53L0X_RdWord>
 8005894:	4603      	mov	r3, r0
 8005896:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005898:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d112      	bne.n	80058c6 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 80058a0:	89fb      	ldrh	r3, [r7, #14]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d006      	beq.n	80058b4 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 80058a6:	89fb      	ldrh	r3, [r7, #14]
 80058a8:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	fb02 f303 	mul.w	r3, r2, r3
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e001      	b.n	80058b8 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	2104      	movs	r1, #4
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fd fb27 	bl	8002f10 <VL53L0X_WrDWord>
 80058c2:	4603      	mov	r3, r0
 80058c4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80058c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d102      	bne.n	80058d4 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80058d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058ea:	2300      	movs	r3, #0
 80058ec:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80058ee:	f107 030c 	add.w	r3, r7, #12
 80058f2:	461a      	mov	r2, r3
 80058f4:	21f8      	movs	r1, #248	; 0xf8
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fd fb9a 	bl	8003030 <VL53L0X_RdWord>
 80058fc:	4603      	mov	r3, r0
 80058fe:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d108      	bne.n	800591a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8005908:	f107 0308 	add.w	r3, r7, #8
 800590c:	461a      	mov	r2, r3
 800590e:	2104      	movs	r1, #4
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7fd fbc5 	bl	80030a0 <VL53L0X_RdDWord>
 8005916:	4603      	mov	r3, r0
 8005918:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800591a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10c      	bne.n	800593c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8005922:	89bb      	ldrh	r3, [r7, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	89ba      	ldrh	r2, [r7, #12]
 800592c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800593c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005952:	2300      	movs	r3, #0
 8005954:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	7f1b      	ldrb	r3, [r3, #28]
 800595a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	7bba      	ldrb	r2, [r7, #14]
 8005960:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005962:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b086      	sub	sp, #24
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800597c:	2300      	movs	r3, #0
 800597e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005980:	f107 030e 	add.w	r3, r7, #14
 8005984:	461a      	mov	r2, r3
 8005986:	2120      	movs	r1, #32
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7fd fb51 	bl	8003030 <VL53L0X_RdWord>
 800598e:	4603      	mov	r3, r0
 8005990:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8005992:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d118      	bne.n	80059cc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800599a:	89fb      	ldrh	r3, [r7, #14]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d109      	bne.n	80059b4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	771a      	strb	r2, [r3, #28]
 80059b2:	e00b      	b.n	80059cc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80059b4:	89fb      	ldrh	r3, [r7, #14]
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80059cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	807b      	strh	r3, [r7, #2]
 80059e4:	4613      	mov	r3, r2
 80059e6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80059f8:	887b      	ldrh	r3, [r7, #2]
 80059fa:	2b05      	cmp	r3, #5
 80059fc:	d902      	bls.n	8005a04 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80059fe:	23fc      	movs	r3, #252	; 0xfc
 8005a00:	75fb      	strb	r3, [r7, #23]
 8005a02:	e05b      	b.n	8005abc <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8005a04:	787b      	ldrb	r3, [r7, #1]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8005a12:	2301      	movs	r3, #1
 8005a14:	73bb      	strb	r3, [r7, #14]
 8005a16:	e00a      	b.n	8005a2e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005a18:	887b      	ldrh	r3, [r7, #2]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	330c      	adds	r3, #12
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8005a2e:	887b      	ldrh	r3, [r7, #2]
 8005a30:	2b05      	cmp	r3, #5
 8005a32:	d841      	bhi.n	8005ab8 <VL53L0X_SetLimitCheckEnable+0xe0>
 8005a34:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <VL53L0X_SetLimitCheckEnable+0x64>)
 8005a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3a:	bf00      	nop
 8005a3c:	08005a55 	.word	0x08005a55
 8005a40:	08005a5f 	.word	0x08005a5f
 8005a44:	08005a75 	.word	0x08005a75
 8005a48:	08005a7f 	.word	0x08005a7f
 8005a4c:	08005a89 	.word	0x08005a89
 8005a50:	08005aa1 	.word	0x08005aa1

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	7bfa      	ldrb	r2, [r7, #15]
 8005a58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8005a5c:	e02e      	b.n	8005abc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	461a      	mov	r2, r3
 8005a66:	2144      	movs	r1, #68	; 0x44
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7fd fa27 	bl	8002ebc <VL53L0X_WrWord>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	75fb      	strb	r3, [r7, #23]

			break;
 8005a72:	e023      	b.n	8005abc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	7bfa      	ldrb	r2, [r7, #15]
 8005a78:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8005a7c:	e01e      	b.n	8005abc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	7bfa      	ldrb	r2, [r7, #15]
 8005a82:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005a86:	e019      	b.n	8005abc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005a88:	7bbb      	ldrb	r3, [r7, #14]
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005a8e:	7b7b      	ldrb	r3, [r7, #13]
 8005a90:	22fe      	movs	r2, #254	; 0xfe
 8005a92:	2160      	movs	r1, #96	; 0x60
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7fd fa6d 	bl	8002f74 <VL53L0X_UpdateByte>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8005a9e:	e00d      	b.n	8005abc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8005aa0:	7bbb      	ldrb	r3, [r7, #14]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005aa6:	7b7b      	ldrb	r3, [r7, #13]
 8005aa8:	22ef      	movs	r2, #239	; 0xef
 8005aaa:	2160      	movs	r1, #96	; 0x60
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7fd fa61 	bl	8002f74 <VL53L0X_UpdateByte>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005ab6:	e001      	b.n	8005abc <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005ab8:	23fc      	movs	r3, #252	; 0xfc
 8005aba:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10f      	bne.n	8005ae4 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005ac4:	787b      	ldrb	r3, [r7, #1]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005aca:	887b      	ldrh	r3, [r7, #2]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	4413      	add	r3, r2
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005ad6:	e005      	b.n	8005ae4 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005ad8:	887b      	ldrh	r3, [r7, #2]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ae4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	460b      	mov	r3, r1
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005b02:	897b      	ldrh	r3, [r7, #10]
 8005b04:	2b05      	cmp	r3, #5
 8005b06:	d905      	bls.n	8005b14 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005b08:	23fc      	movs	r3, #252	; 0xfc
 8005b0a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	e008      	b.n	8005b26 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005b14:	897b      	ldrh	r3, [r7, #10]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b1e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	7dba      	ldrb	r2, [r7, #22]
 8005b24:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
	...

08005b38 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	460b      	mov	r3, r1
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8005b4a:	897b      	ldrh	r3, [r7, #10]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b54:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005b56:	7dbb      	ldrb	r3, [r7, #22]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d107      	bne.n	8005b6c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005b5c:	897b      	ldrh	r3, [r7, #10]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	330c      	adds	r3, #12
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	605a      	str	r2, [r3, #4]
 8005b6a:	e040      	b.n	8005bee <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8005b6c:	897b      	ldrh	r3, [r7, #10]
 8005b6e:	2b05      	cmp	r3, #5
 8005b70:	d830      	bhi.n	8005bd4 <VL53L0X_SetLimitCheckValue+0x9c>
 8005b72:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <VL53L0X_SetLimitCheckValue+0x40>)
 8005b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b78:	08005b91 	.word	0x08005b91
 8005b7c:	08005b99 	.word	0x08005b99
 8005b80:	08005baf 	.word	0x08005baf
 8005b84:	08005bb7 	.word	0x08005bb7
 8005b88:	08005bbf 	.word	0x08005bbf
 8005b8c:	08005bbf 	.word	0x08005bbf

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8005b96:	e01f      	b.n	8005bd8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	2144      	movs	r1, #68	; 0x44
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7fd f98a 	bl	8002ebc <VL53L0X_WrWord>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005bac:	e014      	b.n	8005bd8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005bb4:	e010      	b.n	8005bd8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8005bbc:	e00c      	b.n	8005bd8 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2164      	movs	r1, #100	; 0x64
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7fd f977 	bl	8002ebc <VL53L0X_WrWord>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005bd2:	e001      	b.n	8005bd8 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005bd4:	23fc      	movs	r3, #252	; 0xfc
 8005bd6:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005bd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005be0:	897b      	ldrh	r3, [r7, #10]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	330c      	adds	r3, #12
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005bee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop

08005bfc <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	460b      	mov	r3, r1
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8005c12:	897b      	ldrh	r3, [r7, #10]
 8005c14:	2b05      	cmp	r3, #5
 8005c16:	d847      	bhi.n	8005ca8 <VL53L0X_GetLimitCheckValue+0xac>
 8005c18:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <VL53L0X_GetLimitCheckValue+0x24>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c39 	.word	0x08005c39
 8005c24:	08005c45 	.word	0x08005c45
 8005c28:	08005c6b 	.word	0x08005c6b
 8005c2c:	08005c77 	.word	0x08005c77
 8005c30:	08005c83 	.word	0x08005c83
 8005c34:	08005c83 	.word	0x08005c83

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	77bb      	strb	r3, [r7, #30]
		break;
 8005c42:	e033      	b.n	8005cac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005c44:	f107 0316 	add.w	r3, r7, #22
 8005c48:	461a      	mov	r2, r3
 8005c4a:	2144      	movs	r1, #68	; 0x44
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f7fd f9ef 	bl	8003030 <VL53L0X_RdWord>
 8005c52:	4603      	mov	r3, r0
 8005c54:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005c56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d102      	bne.n	8005c64 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005c5e:	8afb      	ldrh	r3, [r7, #22]
 8005c60:	025b      	lsls	r3, r3, #9
 8005c62:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005c64:	2301      	movs	r3, #1
 8005c66:	77bb      	strb	r3, [r7, #30]
		break;
 8005c68:	e020      	b.n	8005cac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	77bb      	strb	r3, [r7, #30]
		break;
 8005c74:	e01a      	b.n	8005cac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	77bb      	strb	r3, [r7, #30]
		break;
 8005c80:	e014      	b.n	8005cac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005c82:	f107 0316 	add.w	r3, r7, #22
 8005c86:	461a      	mov	r2, r3
 8005c88:	2164      	movs	r1, #100	; 0x64
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7fd f9d0 	bl	8003030 <VL53L0X_RdWord>
 8005c90:	4603      	mov	r3, r0
 8005c92:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005c94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005c9c:	8afb      	ldrh	r3, [r7, #22]
 8005c9e:	025b      	lsls	r3, r3, #9
 8005ca0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	77bb      	strb	r3, [r7, #30]
		break;
 8005ca6:	e001      	b.n	8005cac <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005ca8:	23fc      	movs	r3, #252	; 0xfc
 8005caa:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005cac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d12a      	bne.n	8005d0a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8005cb4:	7fbb      	ldrb	r3, [r7, #30]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d124      	bne.n	8005d04 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d110      	bne.n	8005ce2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005cc0:	897b      	ldrh	r3, [r7, #10]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005cd4:	897b      	ldrh	r3, [r7, #10]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005ce0:	e013      	b.n	8005d0a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005ce8:	897b      	ldrh	r3, [r7, #10]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	330c      	adds	r3, #12
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005cf6:	897b      	ldrh	r3, [r7, #10]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005d02:	e002      	b.n	8005d0a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d0a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop

08005d18 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d22:	2300      	movs	r3, #0
 8005d24:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005d26:	f107 030e 	add.w	r3, r7, #14
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fd f954 	bl	8002fdc <VL53L0X_RdByte>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8005d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10e      	bne.n	8005d5e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005d40:	7bba      	ldrb	r2, [r7, #14]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8005d48:	7bbb      	ldrb	r3, [r7, #14]
 8005d4a:	b25b      	sxtb	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	da03      	bge.n	8005d58 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2201      	movs	r2, #1
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	e002      	b.n	8005d5e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d104      	bne.n	8005d70 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	781a      	ldrb	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005d88:	f107 030e 	add.w	r3, r7, #14
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff fbb6 	bl	8005500 <VL53L0X_GetDeviceMode>
 8005d94:	4603      	mov	r3, r0
 8005d96:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d107      	bne.n	8005db0 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005da0:	7bbb      	ldrb	r3, [r7, #14]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f898 	bl	8005edc <VL53L0X_StartMeasurement>
 8005dac:	4603      	mov	r3, r0
 8005dae:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d104      	bne.n	8005dc2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 fb3f 	bl	800743c <VL53L0X_measurement_poll_for_completion>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005dca:	7bbb      	ldrb	r3, [r7, #14]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d103      	bne.n	8005dd8 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2203      	movs	r2, #3
 8005dd4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8005dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005df4:	2301      	movs	r3, #1
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f001 fae1 	bl	80073c2 <VL53L0X_perform_ref_calibration>
 8005e00:	4603      	mov	r3, r0
 8005e02:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8005e04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005e26:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8005e28:	7dbb      	ldrb	r3, [r7, #22]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d005      	beq.n	8005e3a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005e2e:	7dbb      	ldrb	r3, [r7, #22]
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d002      	beq.n	8005e3a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005e34:	7dbb      	ldrb	r3, [r7, #22]
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d147      	bne.n	8005eca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005e3a:	f107 030c 	add.w	r3, r7, #12
 8005e3e:	f107 0210 	add.w	r2, r7, #16
 8005e42:	2101      	movs	r1, #1
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fbc3 	bl	80065d0 <VL53L0X_GetInterruptThresholds>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005e54:	d803      	bhi.n	8005e5e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8005e56:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005e58:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005e5c:	d935      	bls.n	8005eca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8005e5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d131      	bne.n	8005eca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d006      	beq.n	8005e7a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005e6c:	491a      	ldr	r1, [pc, #104]	; (8005ed8 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f002 fcbc 	bl	80087ec <VL53L0X_load_tuning_settings>
 8005e74:	4603      	mov	r3, r0
 8005e76:	75fb      	strb	r3, [r7, #23]
 8005e78:	e027      	b.n	8005eca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	21ff      	movs	r1, #255	; 0xff
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7fc fff8 	bl	8002e74 <VL53L0X_WrByte>
 8005e84:	4603      	mov	r3, r0
 8005e86:	461a      	mov	r2, r3
 8005e88:	7dfb      	ldrb	r3, [r7, #23]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2170      	movs	r1, #112	; 0x70
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fc ffee 	bl	8002e74 <VL53L0X_WrByte>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	21ff      	movs	r1, #255	; 0xff
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fc ffe4 	bl	8002e74 <VL53L0X_WrByte>
 8005eac:	4603      	mov	r3, r0
 8005eae:	461a      	mov	r2, r3
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2180      	movs	r1, #128	; 0x80
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fc ffda 	bl	8002e74 <VL53L0X_WrByte>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	7dfb      	ldrb	r3, [r7, #23]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8005eca:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	2000036c 	.word	0x2000036c

08005edc <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005eec:	f107 030e 	add.w	r3, r7, #14
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff fb04 	bl	8005500 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005ef8:	2201      	movs	r2, #1
 8005efa:	2180      	movs	r1, #128	; 0x80
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7fc ffb9 	bl	8002e74 <VL53L0X_WrByte>
 8005f02:	4603      	mov	r3, r0
 8005f04:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005f06:	2201      	movs	r2, #1
 8005f08:	21ff      	movs	r1, #255	; 0xff
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fc ffb2 	bl	8002e74 <VL53L0X_WrByte>
 8005f10:	4603      	mov	r3, r0
 8005f12:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005f14:	2200      	movs	r2, #0
 8005f16:	2100      	movs	r1, #0
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7fc ffab 	bl	8002e74 <VL53L0X_WrByte>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005f28:	461a      	mov	r2, r3
 8005f2a:	2191      	movs	r1, #145	; 0x91
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7fc ffa1 	bl	8002e74 <VL53L0X_WrByte>
 8005f32:	4603      	mov	r3, r0
 8005f34:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005f36:	2201      	movs	r2, #1
 8005f38:	2100      	movs	r1, #0
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fc ff9a 	bl	8002e74 <VL53L0X_WrByte>
 8005f40:	4603      	mov	r3, r0
 8005f42:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005f44:	2200      	movs	r2, #0
 8005f46:	21ff      	movs	r1, #255	; 0xff
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7fc ff93 	bl	8002e74 <VL53L0X_WrByte>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005f52:	2200      	movs	r2, #0
 8005f54:	2180      	movs	r1, #128	; 0x80
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fc ff8c 	bl	8002e74 <VL53L0X_WrByte>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005f60:	7bbb      	ldrb	r3, [r7, #14]
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d054      	beq.n	8006010 <VL53L0X_StartMeasurement+0x134>
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	dc6c      	bgt.n	8006044 <VL53L0X_StartMeasurement+0x168>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <VL53L0X_StartMeasurement+0x98>
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d034      	beq.n	8005fdc <VL53L0X_StartMeasurement+0x100>
 8005f72:	e067      	b.n	8006044 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005f74:	2201      	movs	r2, #1
 8005f76:	2100      	movs	r1, #0
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7fc ff7b 	bl	8002e74 <VL53L0X_WrByte>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8005f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d15d      	bne.n	800604a <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d008      	beq.n	8005faa <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8005f98:	f107 030d 	add.w	r3, r7, #13
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7fd f81b 	bl	8002fdc <VL53L0X_RdByte>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	3301      	adds	r3, #1
 8005fae:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005fb0:	7b7a      	ldrb	r2, [r7, #13]
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005fb8:	7bfa      	ldrb	r2, [r7, #15]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d107      	bne.n	8005fce <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8005fbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d103      	bne.n	8005fce <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005fcc:	d3e1      	bcc.n	8005f92 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005fd4:	d339      	bcc.n	800604a <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005fd6:	23f9      	movs	r3, #249	; 0xf9
 8005fd8:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005fda:	e036      	b.n	800604a <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d105      	bne.n	8005ff0 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff ff12 	bl	8005e10 <VL53L0X_CheckAndLoadInterruptSettings>
 8005fec:	4603      	mov	r3, r0
 8005fee:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7fc ff3d 	bl	8002e74 <VL53L0X_WrByte>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8005ffe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d123      	bne.n	800604e <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2204      	movs	r2, #4
 800600a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800600e:	e01e      	b.n	800604e <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d105      	bne.n	8006024 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006018:	2101      	movs	r1, #1
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff fef8 	bl	8005e10 <VL53L0X_CheckAndLoadInterruptSettings>
 8006020:	4603      	mov	r3, r0
 8006022:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006024:	2204      	movs	r2, #4
 8006026:	2100      	movs	r1, #0
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7fc ff23 	bl	8002e74 <VL53L0X_WrByte>
 800602e:	4603      	mov	r3, r0
 8006030:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8006032:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2204      	movs	r2, #4
 800603e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006042:	e006      	b.n	8006052 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006044:	23f8      	movs	r3, #248	; 0xf8
 8006046:	75fb      	strb	r3, [r7, #23]
 8006048:	e004      	b.n	8006054 <VL53L0X_StartMeasurement+0x178>
		break;
 800604a:	bf00      	nop
 800604c:	e002      	b.n	8006054 <VL53L0X_StartMeasurement+0x178>
		break;
 800604e:	bf00      	nop
 8006050:	e000      	b.n	8006054 <VL53L0X_StartMeasurement+0x178>
		break;
 8006052:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8006054:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800606a:	2300      	movs	r3, #0
 800606c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006074:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	2b04      	cmp	r3, #4
 800607a:	d112      	bne.n	80060a2 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800607c:	f107 0308 	add.w	r3, r7, #8
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fb1a 	bl	80066bc <VL53L0X_GetInterruptMaskStatus>
 8006088:	4603      	mov	r3, r0
 800608a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b04      	cmp	r3, #4
 8006090:	d103      	bne.n	800609a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2201      	movs	r2, #1
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	e01c      	b.n	80060d4 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2200      	movs	r2, #0
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	e018      	b.n	80060d4 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80060a2:	f107 030d 	add.w	r3, r7, #13
 80060a6:	461a      	mov	r2, r3
 80060a8:	2114      	movs	r1, #20
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fc ff96 	bl	8002fdc <VL53L0X_RdByte>
 80060b0:	4603      	mov	r3, r0
 80060b2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80060b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10b      	bne.n	80060d4 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80060bc:	7b7b      	ldrb	r3, [r7, #13]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2201      	movs	r2, #1
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	e002      	b.n	80060d4 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2200      	movs	r2, #0
 80060d2:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80060d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80060e0:	b5b0      	push	{r4, r5, r7, lr}
 80060e2:	b096      	sub	sp, #88	; 0x58
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80060f0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80060f4:	230c      	movs	r3, #12
 80060f6:	2114      	movs	r1, #20
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fc fe8f 	bl	8002e1c <VL53L0X_ReadMulti>
 80060fe:	4603      	mov	r3, r0
 8006100:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8006104:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006108:	2b00      	cmp	r3, #0
 800610a:	f040 80d1 	bne.w	80062b0 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2200      	movs	r2, #0
 8006112:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800611a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800611e:	b29b      	uxth	r3, r3
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	b29a      	uxth	r2, r3
 8006124:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006128:	b29b      	uxth	r3, r3
 800612a:	4413      	add	r3, r2
 800612c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2200      	movs	r2, #0
 8006134:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8006136:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800613a:	b29b      	uxth	r3, r3
 800613c:	021b      	lsls	r3, r3, #8
 800613e:	b29a      	uxth	r2, r3
 8006140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006144:	b29b      	uxth	r3, r3
 8006146:	4413      	add	r3, r2
 8006148:	b29b      	uxth	r3, r3
 800614a:	025b      	lsls	r3, r3, #9
 800614c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006152:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8006154:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006158:	b29b      	uxth	r3, r3
 800615a:	021b      	lsls	r3, r3, #8
 800615c:	b29a      	uxth	r2, r3
 800615e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006162:	b29b      	uxth	r3, r3
 8006164:	4413      	add	r3, r2
 8006166:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800616a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800616e:	025b      	lsls	r3, r3, #9
 8006170:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8006176:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800617a:	b29b      	uxth	r3, r3
 800617c:	021b      	lsls	r3, r3, #8
 800617e:	b29a      	uxth	r2, r3
 8006180:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006184:	b29b      	uxth	r3, r3
 8006186:	4413      	add	r3, r2
 8006188:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006192:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8006194:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006198:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80061a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80061aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80061ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80061b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061b4:	d046      	beq.n	8006244 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80061b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80061b8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80061bc:	fb02 f303 	mul.w	r3, r2, r3
 80061c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80061c4:	4a57      	ldr	r2, [pc, #348]	; (8006324 <VL53L0X_GetRangingMeasurementData+0x244>)
 80061c6:	fb82 1203 	smull	r1, r2, r2, r3
 80061ca:	1192      	asrs	r2, r2, #6
 80061cc:	17db      	asrs	r3, r3, #31
 80061ce:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80061d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	7f1b      	ldrb	r3, [r3, #28]
 80061de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80061e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d02c      	beq.n	8006244 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80061ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061ec:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80061f0:	fb02 f303 	mul.w	r3, r2, r3
 80061f4:	121a      	asrs	r2, r3, #8
					<= 0) {
 80061f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d10d      	bne.n	8006218 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80061fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006200:	2b00      	cmp	r3, #0
 8006202:	d004      	beq.n	800620e <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8006204:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8006208:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800620c:	e016      	b.n	800623c <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800620e:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8006212:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006216:	e011      	b.n	800623c <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8006218:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800621c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800621e:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8006222:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006224:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006228:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800622c:	121b      	asrs	r3, r3, #8
 800622e:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8006230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006232:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8006234:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8006238:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800623c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006240:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8006244:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00d      	beq.n	8006268 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800624c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006250:	089b      	lsrs	r3, r3, #2
 8006252:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8006258:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800625c:	b2db      	uxtb	r3, r3
 800625e:	019b      	lsls	r3, r3, #6
 8006260:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	75da      	strb	r2, [r3, #23]
 8006266:	e006      	b.n	8006276 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800626e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2200      	movs	r2, #0
 8006274:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8006276:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800627a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800627e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8006282:	9301      	str	r3, [sp, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	4613      	mov	r3, r2
 800628a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f002 ff4b 	bl	8009128 <VL53L0X_get_pal_range_status>
 8006292:	4603      	mov	r3, r0
 8006294:	461a      	mov	r2, r3
 8006296:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800629a:	4313      	orrs	r3, r2
 800629c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80062a0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80062a8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80062b0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d12f      	bne.n	8006318 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f107 040c 	add.w	r4, r7, #12
 80062be:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80062c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80062ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80062d2:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80062d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80062e0:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80062e6:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80062ec:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80062f2:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80062f8:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80062fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8006308:	f107 050c 	add.w	r5, r7, #12
 800630c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800630e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006310:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006314:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006318:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800631c:	4618      	mov	r0, r3
 800631e:	3750      	adds	r7, #80	; 0x50
 8006320:	46bd      	mov	sp, r7
 8006322:	bdb0      	pop	{r4, r5, r7, pc}
 8006324:	10624dd3 	.word	0x10624dd3

08006328 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8006336:	2100      	movs	r1, #0
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff f8b5 	bl	80054a8 <VL53L0X_SetDeviceMode>
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff fd16 	bl	8005d7c <VL53L0X_PerformSingleMeasurement>
 8006350:	4603      	mov	r3, r0
 8006352:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d105      	bne.n	8006368 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff febe 	bl	80060e0 <VL53L0X_GetRangingMeasurementData>
 8006364:	4603      	mov	r3, r0
 8006366:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d105      	bne.n	800637c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006370:	2100      	movs	r1, #0
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f962 	bl	800663c <VL53L0X_ClearInterruptMask>
 8006378:	4603      	mov	r3, r0
 800637a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800637c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	4608      	mov	r0, r1
 8006392:	4611      	mov	r1, r2
 8006394:	461a      	mov	r2, r3
 8006396:	4603      	mov	r3, r0
 8006398:	70fb      	strb	r3, [r7, #3]
 800639a:	460b      	mov	r3, r1
 800639c:	70bb      	strb	r3, [r7, #2]
 800639e:	4613      	mov	r3, r2
 80063a0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80063ac:	23f6      	movs	r3, #246	; 0xf6
 80063ae:	73fb      	strb	r3, [r7, #15]
 80063b0:	e107      	b.n	80065c2 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80063b2:	78bb      	ldrb	r3, [r7, #2]
 80063b4:	2b14      	cmp	r3, #20
 80063b6:	d110      	bne.n	80063da <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80063b8:	7e3b      	ldrb	r3, [r7, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d102      	bne.n	80063c4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80063be:	2310      	movs	r3, #16
 80063c0:	73bb      	strb	r3, [r7, #14]
 80063c2:	e001      	b.n	80063c8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80063c4:	2301      	movs	r3, #1
 80063c6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80063c8:	7bbb      	ldrb	r3, [r7, #14]
 80063ca:	461a      	mov	r2, r3
 80063cc:	2184      	movs	r1, #132	; 0x84
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fc fd50 	bl	8002e74 <VL53L0X_WrByte>
 80063d4:	4603      	mov	r3, r0
 80063d6:	73fb      	strb	r3, [r7, #15]
 80063d8:	e0f3      	b.n	80065c2 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80063da:	78bb      	ldrb	r3, [r7, #2]
 80063dc:	2b15      	cmp	r3, #21
 80063de:	f040 8097 	bne.w	8006510 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80063e2:	2201      	movs	r2, #1
 80063e4:	21ff      	movs	r1, #255	; 0xff
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fc fd44 	bl	8002e74 <VL53L0X_WrByte>
 80063ec:	4603      	mov	r3, r0
 80063ee:	461a      	mov	r2, r3
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80063f6:	2200      	movs	r2, #0
 80063f8:	2100      	movs	r1, #0
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fc fd3a 	bl	8002e74 <VL53L0X_WrByte>
 8006400:	4603      	mov	r3, r0
 8006402:	461a      	mov	r2, r3
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	4313      	orrs	r3, r2
 8006408:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800640a:	2200      	movs	r2, #0
 800640c:	21ff      	movs	r1, #255	; 0xff
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7fc fd30 	bl	8002e74 <VL53L0X_WrByte>
 8006414:	4603      	mov	r3, r0
 8006416:	461a      	mov	r2, r3
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	4313      	orrs	r3, r2
 800641c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800641e:	2201      	movs	r2, #1
 8006420:	2180      	movs	r1, #128	; 0x80
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fc fd26 	bl	8002e74 <VL53L0X_WrByte>
 8006428:	4603      	mov	r3, r0
 800642a:	461a      	mov	r2, r3
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	4313      	orrs	r3, r2
 8006430:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006432:	2202      	movs	r2, #2
 8006434:	2185      	movs	r1, #133	; 0x85
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fc fd1c 	bl	8002e74 <VL53L0X_WrByte>
 800643c:	4603      	mov	r3, r0
 800643e:	461a      	mov	r2, r3
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	4313      	orrs	r3, r2
 8006444:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8006446:	2204      	movs	r2, #4
 8006448:	21ff      	movs	r1, #255	; 0xff
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7fc fd12 	bl	8002e74 <VL53L0X_WrByte>
 8006450:	4603      	mov	r3, r0
 8006452:	461a      	mov	r2, r3
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	4313      	orrs	r3, r2
 8006458:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800645a:	2200      	movs	r2, #0
 800645c:	21cd      	movs	r1, #205	; 0xcd
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fc fd08 	bl	8002e74 <VL53L0X_WrByte>
 8006464:	4603      	mov	r3, r0
 8006466:	461a      	mov	r2, r3
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	4313      	orrs	r3, r2
 800646c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800646e:	2211      	movs	r2, #17
 8006470:	21cc      	movs	r1, #204	; 0xcc
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fc fcfe 	bl	8002e74 <VL53L0X_WrByte>
 8006478:	4603      	mov	r3, r0
 800647a:	461a      	mov	r2, r3
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	4313      	orrs	r3, r2
 8006480:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8006482:	2207      	movs	r2, #7
 8006484:	21ff      	movs	r1, #255	; 0xff
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fc fcf4 	bl	8002e74 <VL53L0X_WrByte>
 800648c:	4603      	mov	r3, r0
 800648e:	461a      	mov	r2, r3
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	4313      	orrs	r3, r2
 8006494:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8006496:	2200      	movs	r2, #0
 8006498:	21be      	movs	r1, #190	; 0xbe
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fc fcea 	bl	8002e74 <VL53L0X_WrByte>
 80064a0:	4603      	mov	r3, r0
 80064a2:	461a      	mov	r2, r3
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80064aa:	2206      	movs	r2, #6
 80064ac:	21ff      	movs	r1, #255	; 0xff
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fc fce0 	bl	8002e74 <VL53L0X_WrByte>
 80064b4:	4603      	mov	r3, r0
 80064b6:	461a      	mov	r2, r3
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80064be:	2209      	movs	r2, #9
 80064c0:	21cc      	movs	r1, #204	; 0xcc
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fc fcd6 	bl	8002e74 <VL53L0X_WrByte>
 80064c8:	4603      	mov	r3, r0
 80064ca:	461a      	mov	r2, r3
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80064d2:	2200      	movs	r2, #0
 80064d4:	21ff      	movs	r1, #255	; 0xff
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fc fccc 	bl	8002e74 <VL53L0X_WrByte>
 80064dc:	4603      	mov	r3, r0
 80064de:	461a      	mov	r2, r3
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80064e6:	2201      	movs	r2, #1
 80064e8:	21ff      	movs	r1, #255	; 0xff
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fc fcc2 	bl	8002e74 <VL53L0X_WrByte>
 80064f0:	4603      	mov	r3, r0
 80064f2:	461a      	mov	r2, r3
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80064fa:	2200      	movs	r2, #0
 80064fc:	2100      	movs	r1, #0
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fc fcb8 	bl	8002e74 <VL53L0X_WrByte>
 8006504:	4603      	mov	r3, r0
 8006506:	461a      	mov	r2, r3
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	4313      	orrs	r3, r2
 800650c:	73fb      	strb	r3, [r7, #15]
 800650e:	e058      	b.n	80065c2 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8006510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d121      	bne.n	800655c <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8006518:	787b      	ldrb	r3, [r7, #1]
 800651a:	2b04      	cmp	r3, #4
 800651c:	d81b      	bhi.n	8006556 <VL53L0X_SetGpioConfig+0x1ce>
 800651e:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <VL53L0X_SetGpioConfig+0x19c>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	08006539 	.word	0x08006539
 8006528:	0800653f 	.word	0x0800653f
 800652c:	08006545 	.word	0x08006545
 8006530:	0800654b 	.word	0x0800654b
 8006534:	08006551 	.word	0x08006551
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8006538:	2300      	movs	r3, #0
 800653a:	73bb      	strb	r3, [r7, #14]
				break;
 800653c:	e00f      	b.n	800655e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800653e:	2301      	movs	r3, #1
 8006540:	73bb      	strb	r3, [r7, #14]
				break;
 8006542:	e00c      	b.n	800655e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8006544:	2302      	movs	r3, #2
 8006546:	73bb      	strb	r3, [r7, #14]
				break;
 8006548:	e009      	b.n	800655e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800654a:	2303      	movs	r3, #3
 800654c:	73bb      	strb	r3, [r7, #14]
				break;
 800654e:	e006      	b.n	800655e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8006550:	2304      	movs	r3, #4
 8006552:	73bb      	strb	r3, [r7, #14]
				break;
 8006554:	e003      	b.n	800655e <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8006556:	23f5      	movs	r3, #245	; 0xf5
 8006558:	73fb      	strb	r3, [r7, #15]
 800655a:	e000      	b.n	800655e <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800655c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800655e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d107      	bne.n	8006576 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8006566:	7bbb      	ldrb	r3, [r7, #14]
 8006568:	461a      	mov	r2, r3
 800656a:	210a      	movs	r1, #10
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7fc fc81 	bl	8002e74 <VL53L0X_WrByte>
 8006572:	4603      	mov	r3, r0
 8006574:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8006576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10f      	bne.n	800659e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800657e:	7e3b      	ldrb	r3, [r7, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d102      	bne.n	800658a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8006584:	2300      	movs	r3, #0
 8006586:	73bb      	strb	r3, [r7, #14]
 8006588:	e001      	b.n	800658e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800658a:	2310      	movs	r3, #16
 800658c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800658e:	7bbb      	ldrb	r3, [r7, #14]
 8006590:	22ef      	movs	r2, #239	; 0xef
 8006592:	2184      	movs	r1, #132	; 0x84
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7fc fced 	bl	8002f74 <VL53L0X_UpdateByte>
 800659a:	4603      	mov	r3, r0
 800659c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800659e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d103      	bne.n	80065ae <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	787a      	ldrb	r2, [r7, #1]
 80065aa:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80065ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d105      	bne.n	80065c2 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80065b6:	2100      	movs	r1, #0
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f83f 	bl	800663c <VL53L0X_ClearInterruptMask>
 80065be:	4603      	mov	r3, r0
 80065c0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80065c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop

080065d0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	607a      	str	r2, [r7, #4]
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	460b      	mov	r3, r1
 80065de:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065e0:	2300      	movs	r3, #0
 80065e2:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80065e4:	f107 0314 	add.w	r3, r7, #20
 80065e8:	461a      	mov	r2, r3
 80065ea:	210e      	movs	r1, #14
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7fc fd1f 	bl	8003030 <VL53L0X_RdWord>
 80065f2:	4603      	mov	r3, r0
 80065f4:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80065f6:	8abb      	ldrh	r3, [r7, #20]
 80065f8:	045b      	lsls	r3, r3, #17
 80065fa:	461a      	mov	r2, r3
 80065fc:	4b0e      	ldr	r3, [pc, #56]	; (8006638 <VL53L0X_GetInterruptThresholds+0x68>)
 80065fe:	4013      	ands	r3, r2
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8006604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10f      	bne.n	800662c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800660c:	f107 0314 	add.w	r3, r7, #20
 8006610:	461a      	mov	r2, r3
 8006612:	210c      	movs	r1, #12
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f7fc fd0b 	bl	8003030 <VL53L0X_RdWord>
 800661a:	4603      	mov	r3, r0
 800661c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800661e:	8abb      	ldrh	r3, [r7, #20]
 8006620:	045b      	lsls	r3, r3, #17
 8006622:	461a      	mov	r2, r3
 8006624:	4b04      	ldr	r3, [pc, #16]	; (8006638 <VL53L0X_GetInterruptThresholds+0x68>)
 8006626:	4013      	ands	r3, r2
		*pThresholdHigh =
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800662c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	1ffe0000 	.word	0x1ffe0000

0800663c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800664e:	2201      	movs	r2, #1
 8006650:	210b      	movs	r1, #11
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fc fc0e 	bl	8002e74 <VL53L0X_WrByte>
 8006658:	4603      	mov	r3, r0
 800665a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800665c:	2200      	movs	r2, #0
 800665e:	210b      	movs	r1, #11
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7fc fc07 	bl	8002e74 <VL53L0X_WrByte>
 8006666:	4603      	mov	r3, r0
 8006668:	461a      	mov	r2, r3
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	4313      	orrs	r3, r2
 800666e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8006670:	f107 030d 	add.w	r3, r7, #13
 8006674:	461a      	mov	r2, r3
 8006676:	2113      	movs	r1, #19
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7fc fcaf 	bl	8002fdc <VL53L0X_RdByte>
 800667e:	4603      	mov	r3, r0
 8006680:	461a      	mov	r2, r3
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	4313      	orrs	r3, r2
 8006686:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	3301      	adds	r3, #1
 800668c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800668e:	7b7b      	ldrb	r3, [r7, #13]
 8006690:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006694:	2b00      	cmp	r3, #0
 8006696:	d006      	beq.n	80066a6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006698:	7bbb      	ldrb	r3, [r7, #14]
 800669a:	2b02      	cmp	r3, #2
 800669c:	d803      	bhi.n	80066a6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800669e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0d3      	beq.n	800664e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80066a6:	7bbb      	ldrb	r3, [r7, #14]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d901      	bls.n	80066b0 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80066ac:	23f4      	movs	r3, #244	; 0xf4
 80066ae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80066b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80066ca:	f107 030e 	add.w	r3, r7, #14
 80066ce:	461a      	mov	r2, r3
 80066d0:	2113      	movs	r1, #19
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7fc fc82 	bl	8002fdc <VL53L0X_RdByte>
 80066d8:	4603      	mov	r3, r0
 80066da:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	f003 0207 	and.w	r2, r3, #7
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
 80066e8:	f003 0318 	and.w	r3, r3, #24
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80066f0:	23fa      	movs	r3, #250	; 0xfa
 80066f2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80066f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800670c:	2300      	movs	r3, #0
 800670e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 fa03 	bl	8006b20 <VL53L0X_perform_ref_spad_management>
 800671a:	4603      	mov	r3, r0
 800671c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800671e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006734:	2300      	movs	r3, #0
 8006736:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8006738:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800673c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800673e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006742:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8006744:	f107 0308 	add.w	r3, r7, #8
 8006748:	461a      	mov	r2, r3
 800674a:	2128      	movs	r1, #40	; 0x28
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7fc fc6f 	bl	8003030 <VL53L0X_RdWord>
 8006752:	4603      	mov	r3, r0
 8006754:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8006756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d11e      	bne.n	800679c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800675e:	893b      	ldrh	r3, [r7, #8]
 8006760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006764:	b29b      	uxth	r3, r3
 8006766:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006768:	893b      	ldrh	r3, [r7, #8]
 800676a:	461a      	mov	r2, r3
 800676c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006770:	429a      	cmp	r2, r3
 8006772:	dd0b      	ble.n	800678c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8006774:	893a      	ldrh	r2, [r7, #8]
 8006776:	897b      	ldrh	r3, [r7, #10]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	b29b      	uxth	r3, r3
 800677c:	b21b      	sxth	r3, r3
 800677e:	461a      	mov	r2, r3
					* 250;
 8006780:	23fa      	movs	r3, #250	; 0xfa
 8006782:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	e007      	b.n	800679c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800678c:	893b      	ldrh	r3, [r7, #8]
 800678e:	b21b      	sxth	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	23fa      	movs	r3, #250	; 0xfa
 8006794:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800679c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b08b      	sub	sp, #44	; 0x2c
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80067b6:	2308      	movs	r3, #8
 80067b8:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067c4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ce:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80067d8:	69b9      	ldr	r1, [r7, #24]
 80067da:	fb01 f202 	mul.w	r2, r1, r2
 80067de:	1a9b      	subs	r3, r3, r2
 80067e0:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
 80067e6:	e030      	b.n	800684a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	4413      	add	r3, r2
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80067f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d11e      	bne.n	800683c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80067fe:	7ffa      	ldrb	r2, [r7, #31]
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	fa42 f303 	asr.w	r3, r2, r3
 8006806:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800680c:	e016      	b.n	800683c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800680e:	7ffb      	ldrb	r3, [r7, #31]
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00b      	beq.n	8006830 <get_next_good_spad+0x88>
				success = 1;
 8006818:	2301      	movs	r3, #1
 800681a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	fb03 f202 	mul.w	r2, r3, r2
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	4413      	add	r3, r2
 8006828:	461a      	mov	r2, r3
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	601a      	str	r2, [r3, #0]
				break;
 800682e:	e009      	b.n	8006844 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8006830:	7ffb      	ldrb	r3, [r7, #31]
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	3301      	adds	r3, #1
 800683a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800683c:	6a3a      	ldr	r2, [r7, #32]
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	429a      	cmp	r2, r3
 8006842:	d3e4      	bcc.n	800680e <get_next_good_spad+0x66>
				coarseIndex++) {
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	3301      	adds	r3, #1
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800684a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	429a      	cmp	r2, r3
 8006850:	d202      	bcs.n	8006858 <get_next_good_spad+0xb0>
 8006852:	7fbb      	ldrb	r3, [r7, #30]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0c7      	beq.n	80067e8 <get_next_good_spad+0x40>
		}
	}
}
 8006858:	bf00      	nop
 800685a:	372c      	adds	r7, #44	; 0x2c
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800686c:	2301      	movs	r3, #1
 800686e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	099b      	lsrs	r3, r3, #6
 8006874:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8006876:	4a07      	ldr	r2, [pc, #28]	; (8006894 <is_aperture+0x30>)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <is_aperture+0x22>
		isAperture = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8006886:	7bfb      	ldrb	r3, [r7, #15]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	20000524 	.word	0x20000524

08006898 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8006898:	b480      	push	{r7}
 800689a:	b089      	sub	sp, #36	; 0x24
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80068a8:	2308      	movs	r3, #8
 80068aa:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80068be:	69b9      	ldr	r1, [r7, #24]
 80068c0:	fb01 f202 	mul.w	r2, r1, r2
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d302      	bcc.n	80068d6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80068d0:	23ce      	movs	r3, #206	; 0xce
 80068d2:	77fb      	strb	r3, [r7, #31]
 80068d4:	e010      	b.n	80068f8 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	4413      	add	r3, r2
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	b25a      	sxtb	r2, r3
 80068e0:	2101      	movs	r1, #1
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	fa01 f303 	lsl.w	r3, r1, r3
 80068e8:	b25b      	sxtb	r3, r3
 80068ea:	4313      	orrs	r3, r2
 80068ec:	b259      	sxtb	r1, r3
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	4413      	add	r3, r2
 80068f4:	b2ca      	uxtb	r2, r1
 80068f6:	701a      	strb	r2, [r3, #0]

	return status;
 80068f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3724      	adds	r7, #36	; 0x24
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8006912:	2306      	movs	r3, #6
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	21b0      	movs	r1, #176	; 0xb0
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fc fa4f 	bl	8002dbc <VL53L0X_WriteMulti>
 800691e:	4603      	mov	r3, r0
 8006920:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8006922:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8006938:	2306      	movs	r3, #6
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	21b0      	movs	r1, #176	; 0xb0
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7fc fa6c 	bl	8002e1c <VL53L0X_ReadMulti>
 8006944:	4603      	mov	r3, r0
 8006946:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8006948:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08c      	sub	sp, #48	; 0x30
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	607a      	str	r2, [r7, #4]
 800695e:	603b      	str	r3, [r7, #0]
 8006960:	460b      	mov	r3, r1
 8006962:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006964:	2300      	movs	r3, #0
 8006966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800696a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800696c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800696e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006970:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006972:	2300      	movs	r3, #0
 8006974:	62bb      	str	r3, [r7, #40]	; 0x28
 8006976:	e02b      	b.n	80069d0 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8006978:	f107 031c 	add.w	r3, r7, #28
 800697c:	6a3a      	ldr	r2, [r7, #32]
 800697e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff ff11 	bl	80067a8 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800698c:	d103      	bne.n	8006996 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800698e:	23ce      	movs	r3, #206	; 0xce
 8006990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006994:	e020      	b.n	80069d8 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	461a      	mov	r2, r3
 800699a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699c:	4413      	add	r3, r2
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff ff60 	bl	8006864 <is_aperture>
 80069a4:	4603      	mov	r3, r0
 80069a6:	461a      	mov	r2, r3
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d003      	beq.n	80069b6 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80069ae:	23ce      	movs	r3, #206	; 0xce
 80069b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80069b4:	e010      	b.n	80069d8 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80069ba:	6a3a      	ldr	r2, [r7, #32]
 80069bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069be:	6838      	ldr	r0, [r7, #0]
 80069c0:	f7ff ff6a 	bl	8006898 <enable_spad_bit>
		currentSpad++;
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	3301      	adds	r3, #1
 80069c8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	3301      	adds	r3, #1
 80069ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80069d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d3cf      	bcc.n	8006978 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80069d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069da:	6a3a      	ldr	r2, [r7, #32]
 80069dc:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80069de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d106      	bne.n	80069f4 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f7ff ff8d 	bl	8006908 <set_ref_spad_map>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80069f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d121      	bne.n	8006a40 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	4619      	mov	r1, r3
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff ff93 	bl	800692e <get_ref_spad_map>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8006a12:	e011      	b.n	8006a38 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	4413      	add	r3, r2
 8006a1a:	781a      	ldrb	r2, [r3, #0]
 8006a1c:	f107 0114 	add.w	r1, r7, #20
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	440b      	add	r3, r1
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d003      	beq.n	8006a32 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006a2a:	23ce      	movs	r3, #206	; 0xce
 8006a2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8006a30:	e006      	b.n	8006a40 <enable_ref_spads+0xec>
			}
			i++;
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	3301      	adds	r3, #1
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8006a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d3e9      	bcc.n	8006a14 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8006a40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3730      	adds	r7, #48	; 0x30
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08a      	sub	sp, #40	; 0x28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006a56:	2300      	movs	r3, #0
 8006a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006a68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8006a6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d107      	bne.n	8006a84 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8006a74:	22c0      	movs	r2, #192	; 0xc0
 8006a76:	2101      	movs	r1, #1
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7fc f9fb 	bl	8002e74 <VL53L0X_WrByte>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8006a84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d108      	bne.n	8006a9e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8006a8c:	f107 0308 	add.w	r3, r7, #8
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff fc48 	bl	8006328 <VL53L0X_PerformSingleRangingMeasurement>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8006a9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d107      	bne.n	8006ab6 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	21ff      	movs	r1, #255	; 0xff
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fc f9e2 	bl	8002e74 <VL53L0X_WrByte>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8006ab6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d107      	bne.n	8006ace <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	21b6      	movs	r1, #182	; 0xb6
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fc fab4 	bl	8003030 <VL53L0X_RdWord>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006ace:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d107      	bne.n	8006ae6 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	21ff      	movs	r1, #255	; 0xff
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7fc f9ca 	bl	8002e74 <VL53L0X_WrByte>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8006ae6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d112      	bne.n	8006b14 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006aee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006af2:	461a      	mov	r2, r3
 8006af4:	2101      	movs	r1, #1
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7fc f9bc 	bl	8002e74 <VL53L0X_WrByte>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8006b02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d104      	bne.n	8006b14 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006b10:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8006b14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3728      	adds	r7, #40	; 0x28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006b20:	b590      	push	{r4, r7, lr}
 8006b22:	b09d      	sub	sp, #116	; 0x74
 8006b24:	af06      	add	r7, sp, #24
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8006b32:	23b4      	movs	r3, #180	; 0xb4
 8006b34:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8006b3c:	232c      	movs	r3, #44	; 0x2c
 8006b3e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8006b4c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006b50:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8006b5a:	2306      	movs	r3, #6
 8006b5c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8006b84:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8006b86:	2300      	movs	r3, #0
 8006b88:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b8a:	e009      	b.n	8006ba0 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006b96:	2200      	movs	r2, #0
 8006b98:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d3f1      	bcc.n	8006b8c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006ba8:	2201      	movs	r2, #1
 8006baa:	21ff      	movs	r1, #255	; 0xff
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f7fc f961 	bl	8002e74 <VL53L0X_WrByte>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006bb8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d107      	bne.n	8006bd0 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	214f      	movs	r1, #79	; 0x4f
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f7fc f955 	bl	8002e74 <VL53L0X_WrByte>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006bd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d107      	bne.n	8006be8 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006bd8:	222c      	movs	r2, #44	; 0x2c
 8006bda:	214e      	movs	r1, #78	; 0x4e
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f7fc f949 	bl	8002e74 <VL53L0X_WrByte>
 8006be2:	4603      	mov	r3, r0
 8006be4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006be8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d107      	bne.n	8006c00 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	21ff      	movs	r1, #255	; 0xff
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7fc f93d 	bl	8002e74 <VL53L0X_WrByte>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006c00:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d109      	bne.n	8006c1c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8006c08:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	21b6      	movs	r1, #182	; 0xb6
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f7fc f92f 	bl	8002e74 <VL53L0X_WrByte>
 8006c16:	4603      	mov	r3, r0
 8006c18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8006c1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d107      	bne.n	8006c34 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8006c24:	2200      	movs	r2, #0
 8006c26:	2180      	movs	r1, #128	; 0x80
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f7fc f923 	bl	8002e74 <VL53L0X_WrByte>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8006c34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10a      	bne.n	8006c52 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006c3c:	f107 0210 	add.w	r2, r7, #16
 8006c40:	f107 0111 	add.w	r1, r7, #17
 8006c44:	2300      	movs	r3, #0
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 fbbb 	bl	80073c2 <VL53L0X_perform_ref_calibration>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8006c52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d121      	bne.n	8006c9e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8006c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c60:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8006c62:	2300      	movs	r3, #0
 8006c64:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8006c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c68:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8006c76:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006c7a:	f107 0218 	add.w	r2, r7, #24
 8006c7e:	9204      	str	r2, [sp, #16]
 8006c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c82:	9203      	str	r2, [sp, #12]
 8006c84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c86:	9202      	str	r2, [sp, #8]
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	4623      	mov	r3, r4
 8006c90:	4602      	mov	r2, r0
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f7ff fe5e 	bl	8006954 <enable_ref_spads>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d174      	bne.n	8006d90 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8006caa:	f107 0312 	add.w	r3, r7, #18
 8006cae:	4619      	mov	r1, r3
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f7ff fecb 	bl	8006a4c <perform_ref_signal_measurement>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006cbc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d161      	bne.n	8006d88 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8006cc4:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006cc6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d25d      	bcs.n	8006d88 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cd0:	e009      	b.n	8006ce6 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006cdc:	2200      	movs	r2, #0
 8006cde:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d3f1      	bcc.n	8006cd2 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8006cee:	e002      	b.n	8006cf6 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8006cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8006cf6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8006cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cfc:	4413      	add	r3, r2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff fdb0 	bl	8006864 <is_aperture>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d103      	bne.n	8006d12 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8006d0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d3ee      	bcc.n	8006cf0 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8006d12:	2301      	movs	r3, #1
 8006d14:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8006d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d18:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8006d26:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006d2a:	f107 0218 	add.w	r2, r7, #24
 8006d2e:	9204      	str	r2, [sp, #16]
 8006d30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d32:	9203      	str	r2, [sp, #12]
 8006d34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d36:	9202      	str	r2, [sp, #8]
 8006d38:	9301      	str	r3, [sp, #4]
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	4623      	mov	r3, r4
 8006d40:	4602      	mov	r2, r0
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f7ff fe06 	bl	8006954 <enable_ref_spads>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006d4e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d11b      	bne.n	8006d8e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8006d5a:	f107 0312 	add.w	r3, r7, #18
 8006d5e:	4619      	mov	r1, r3
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7ff fe73 	bl	8006a4c <perform_ref_signal_measurement>
 8006d66:	4603      	mov	r3, r0
 8006d68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8006d6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10c      	bne.n	8006d8e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006d74:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006d76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d208      	bcs.n	8006d8e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8006d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d84:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8006d86:	e002      	b.n	8006d8e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d8c:	e000      	b.n	8006d90 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8006d8e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006d90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f040 80af 	bne.w	8006ef8 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8006d9a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006d9c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	f240 80aa 	bls.w	8006ef8 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8006daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dac:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8006db4:	f107 031c 	add.w	r3, r7, #28
 8006db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f011 fff4 	bl	8018da8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006dc0:	8a7b      	ldrh	r3, [r7, #18]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	bfb8      	it	lt
 8006dcc:	425b      	neglt	r3, r3
 8006dce:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8006dd6:	e086      	b.n	8006ee6 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8006dde:	f107 0314 	add.w	r3, r7, #20
 8006de2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006de6:	f7ff fcdf 	bl	80067a8 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006df0:	d103      	bne.n	8006dfa <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006df2:	23ce      	movs	r3, #206	; 0xce
 8006df4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006df8:	e07e      	b.n	8006ef8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006dfa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4413      	add	r3, r2
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7ff fd2e 	bl	8006864 <is_aperture>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d003      	beq.n	8006e1a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8006e12:	2301      	movs	r3, #1
 8006e14:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006e18:	e06e      	b.n	8006ef8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8006e2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff fd32 	bl	8006898 <enable_spad_bit>
 8006e34:	4603      	mov	r3, r0
 8006e36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006e3a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10c      	bne.n	8006e5c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e44:	3301      	adds	r3, #1
 8006e46:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8006e4e:	4619      	mov	r1, r3
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f7ff fd59 	bl	8006908 <set_ref_spad_map>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006e5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d146      	bne.n	8006ef2 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006e64:	f107 0312 	add.w	r3, r7, #18
 8006e68:	4619      	mov	r1, r3
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff fdee 	bl	8006a4c <perform_ref_signal_measurement>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006e76:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d13b      	bne.n	8006ef6 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006e7e:	8a7b      	ldrh	r3, [r7, #18]
 8006e80:	461a      	mov	r2, r3
 8006e82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	bfb8      	it	lt
 8006e8a:	425b      	neglt	r3, r3
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8006e8e:	8a7b      	ldrh	r3, [r7, #18]
 8006e90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d21c      	bcs.n	8006ed0 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8006e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d914      	bls.n	8006ec8 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8006e9e:	f107 031c 	add.w	r3, r7, #28
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f7ff fd2f 	bl	8006908 <set_ref_spad_map>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8006eb6:	f107 011c 	add.w	r1, r7, #28
 8006eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f011 ff73 	bl	8018da8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ece:	e00a      	b.n	8006ee6 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8006eda:	f107 031c 	add.w	r3, r7, #28
 8006ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f011 ff61 	bl	8018da8 <memcpy>
		while (!complete) {
 8006ee6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f43f af74 	beq.w	8006dd8 <VL53L0X_perform_ref_spad_management+0x2b8>
 8006ef0:	e002      	b.n	8006ef8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006ef2:	bf00      	nop
 8006ef4:	e000      	b.n	8006ef8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006ef6:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ef8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d115      	bne.n	8006f2c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f04:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006f0c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	781a      	ldrb	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006f2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	375c      	adds	r7, #92	; 0x5c
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd90      	pop	{r4, r7, pc}

08006f38 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006f38:	b590      	push	{r4, r7, lr}
 8006f3a:	b093      	sub	sp, #76	; 0x4c
 8006f3c:	af06      	add	r7, sp, #24
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	4613      	mov	r3, r2
 8006f44:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f46:	2300      	movs	r3, #0
 8006f48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006f50:	23b4      	movs	r3, #180	; 0xb4
 8006f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006f56:	2306      	movs	r3, #6
 8006f58:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8006f5a:	232c      	movs	r3, #44	; 0x2c
 8006f5c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006f5e:	2201      	movs	r2, #1
 8006f60:	21ff      	movs	r1, #255	; 0xff
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7fb ff86 	bl	8002e74 <VL53L0X_WrByte>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006f6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d107      	bne.n	8006f86 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006f76:	2200      	movs	r2, #0
 8006f78:	214f      	movs	r1, #79	; 0x4f
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f7fb ff7a 	bl	8002e74 <VL53L0X_WrByte>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006f86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d107      	bne.n	8006f9e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006f8e:	222c      	movs	r2, #44	; 0x2c
 8006f90:	214e      	movs	r1, #78	; 0x4e
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7fb ff6e 	bl	8002e74 <VL53L0X_WrByte>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006f9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d107      	bne.n	8006fb6 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	21ff      	movs	r1, #255	; 0xff
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f7fb ff62 	bl	8002e74 <VL53L0X_WrByte>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006fb6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d109      	bne.n	8006fd2 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006fbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	21b6      	movs	r1, #182	; 0xb6
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f7fb ff54 	bl	8002e74 <VL53L0X_WrByte>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd6:	e009      	b.n	8006fec <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	3301      	adds	r3, #1
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
 8006fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d3f1      	bcc.n	8006fd8 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d011      	beq.n	800701e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006ffa:	e002      	b.n	8007002 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	3301      	adds	r3, #1
 8007000:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007002:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	4413      	add	r3, r2
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff fc2a 	bl	8006864 <is_aperture>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d103      	bne.n	800701e <VL53L0X_set_reference_spads+0xe6>
 8007016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	429a      	cmp	r2, r3
 800701c:	d3ee      	bcc.n	8006ffc <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800702a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800702e:	79f9      	ldrb	r1, [r7, #7]
 8007030:	f107 0214 	add.w	r2, r7, #20
 8007034:	9204      	str	r2, [sp, #16]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	9203      	str	r2, [sp, #12]
 800703a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800703c:	9202      	str	r2, [sp, #8]
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	4623      	mov	r3, r4
 8007046:	4602      	mov	r2, r0
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f7ff fc83 	bl	8006954 <enable_ref_spads>
 800704e:	4603      	mov	r3, r0
 8007050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8007054:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10c      	bne.n	8007076 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	b2da      	uxtb	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	79fa      	ldrb	r2, [r7, #7]
 8007072:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8007076:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800707a:	4618      	mov	r0, r3
 800707c:	3734      	adds	r7, #52	; 0x34
 800707e:	46bd      	mov	sp, r7
 8007080:	bd90      	pop	{r4, r7, pc}

08007082 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	460b      	mov	r3, r1
 800708c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10a      	bne.n	80070b0 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800709a:	78fb      	ldrb	r3, [r7, #3]
 800709c:	f043 0301 	orr.w	r3, r3, #1
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	2100      	movs	r1, #0
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7fb fee4 	bl	8002e74 <VL53L0X_WrByte>
 80070ac:	4603      	mov	r3, r0
 80070ae:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80070b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d104      	bne.n	80070c2 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f9bf 	bl	800743c <VL53L0X_measurement_poll_for_completion>
 80070be:	4603      	mov	r3, r0
 80070c0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80070c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80070ca:	2100      	movs	r1, #0
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7ff fab5 	bl	800663c <VL53L0X_ClearInterruptMask>
 80070d2:	4603      	mov	r3, r0
 80070d4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80070d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d106      	bne.n	80070ec <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80070de:	2200      	movs	r2, #0
 80070e0:	2100      	movs	r1, #0
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fb fec6 	bl	8002e74 <VL53L0X_WrByte>
 80070e8:	4603      	mov	r3, r0
 80070ea:	73fb      	strb	r3, [r7, #15]

	return Status;
 80070ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	4608      	mov	r0, r1
 8007102:	4611      	mov	r1, r2
 8007104:	461a      	mov	r2, r3
 8007106:	4603      	mov	r3, r0
 8007108:	70fb      	strb	r3, [r7, #3]
 800710a:	460b      	mov	r3, r1
 800710c:	70bb      	strb	r3, [r7, #2]
 800710e:	4613      	mov	r3, r2
 8007110:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007112:	2300      	movs	r3, #0
 8007114:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800711a:	2201      	movs	r2, #1
 800711c:	21ff      	movs	r1, #255	; 0xff
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fb fea8 	bl	8002e74 <VL53L0X_WrByte>
 8007124:	4603      	mov	r3, r0
 8007126:	461a      	mov	r2, r3
 8007128:	7bfb      	ldrb	r3, [r7, #15]
 800712a:	4313      	orrs	r3, r2
 800712c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800712e:	2200      	movs	r2, #0
 8007130:	2100      	movs	r1, #0
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7fb fe9e 	bl	8002e74 <VL53L0X_WrByte>
 8007138:	4603      	mov	r3, r0
 800713a:	461a      	mov	r2, r3
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	4313      	orrs	r3, r2
 8007140:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007142:	2200      	movs	r2, #0
 8007144:	21ff      	movs	r1, #255	; 0xff
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fb fe94 	bl	8002e74 <VL53L0X_WrByte>
 800714c:	4603      	mov	r3, r0
 800714e:	461a      	mov	r2, r3
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	4313      	orrs	r3, r2
 8007154:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8007156:	78fb      	ldrb	r3, [r7, #3]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01e      	beq.n	800719a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800715c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d009      	beq.n	8007178 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	21cb      	movs	r1, #203	; 0xcb
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7fb ff37 	bl	8002fdc <VL53L0X_RdByte>
 800716e:	4603      	mov	r3, r0
 8007170:	461a      	mov	r2, r3
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	4313      	orrs	r3, r2
 8007176:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007178:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	d02a      	beq.n	80071d6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8007180:	f107 030e 	add.w	r3, r7, #14
 8007184:	461a      	mov	r2, r3
 8007186:	21ee      	movs	r1, #238	; 0xee
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7fb ff27 	bl	8002fdc <VL53L0X_RdByte>
 800718e:	4603      	mov	r3, r0
 8007190:	461a      	mov	r2, r3
 8007192:	7bfb      	ldrb	r3, [r7, #15]
 8007194:	4313      	orrs	r3, r2
 8007196:	73fb      	strb	r3, [r7, #15]
 8007198:	e01d      	b.n	80071d6 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800719a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80071a2:	78bb      	ldrb	r3, [r7, #2]
 80071a4:	461a      	mov	r2, r3
 80071a6:	21cb      	movs	r1, #203	; 0xcb
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7fb fe63 	bl	8002e74 <VL53L0X_WrByte>
 80071ae:	4603      	mov	r3, r0
 80071b0:	461a      	mov	r2, r3
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80071b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80071c0:	787b      	ldrb	r3, [r7, #1]
 80071c2:	2280      	movs	r2, #128	; 0x80
 80071c4:	21ee      	movs	r1, #238	; 0xee
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7fb fed4 	bl	8002f74 <VL53L0X_UpdateByte>
 80071cc:	4603      	mov	r3, r0
 80071ce:	461a      	mov	r2, r3
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80071d6:	2201      	movs	r2, #1
 80071d8:	21ff      	movs	r1, #255	; 0xff
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fb fe4a 	bl	8002e74 <VL53L0X_WrByte>
 80071e0:	4603      	mov	r3, r0
 80071e2:	461a      	mov	r2, r3
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80071ea:	2201      	movs	r2, #1
 80071ec:	2100      	movs	r1, #0
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7fb fe40 	bl	8002e74 <VL53L0X_WrByte>
 80071f4:	4603      	mov	r3, r0
 80071f6:	461a      	mov	r2, r3
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80071fe:	2200      	movs	r2, #0
 8007200:	21ff      	movs	r1, #255	; 0xff
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fb fe36 	bl	8002e74 <VL53L0X_WrByte>
 8007208:	4603      	mov	r3, r0
 800720a:	461a      	mov	r2, r3
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	4313      	orrs	r3, r2
 8007210:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8007212:	7bbb      	ldrb	r3, [r7, #14]
 8007214:	f023 0310 	bic.w	r3, r3, #16
 8007218:	b2da      	uxtb	r2, r3
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	701a      	strb	r2, [r3, #0]

	return Status;
 800721e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b08a      	sub	sp, #40	; 0x28
 800722e:	af04      	add	r7, sp, #16
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	4611      	mov	r1, r2
 8007236:	461a      	mov	r2, r3
 8007238:	460b      	mov	r3, r1
 800723a:	71fb      	strb	r3, [r7, #7]
 800723c:	4613      	mov	r3, r2
 800723e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007240:	2300      	movs	r3, #0
 8007242:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007244:	2300      	movs	r3, #0
 8007246:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800724c:	2300      	movs	r3, #0
 800724e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8007250:	2300      	movs	r3, #0
 8007252:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007254:	79bb      	ldrb	r3, [r7, #6]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007260:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8007262:	2201      	movs	r2, #1
 8007264:	2101      	movs	r1, #1
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f7fb fe04 	bl	8002e74 <VL53L0X_WrByte>
 800726c:	4603      	mov	r3, r0
 800726e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007270:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d105      	bne.n	8007284 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8007278:	2140      	movs	r1, #64	; 0x40
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f7ff ff01 	bl	8007082 <VL53L0X_perform_single_ref_calibration>
 8007280:	4603      	mov	r3, r0
 8007282:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007284:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d115      	bne.n	80072b8 <VL53L0X_perform_vhv_calibration+0x8e>
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d112      	bne.n	80072b8 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007292:	7d39      	ldrb	r1, [r7, #20]
 8007294:	7d7a      	ldrb	r2, [r7, #21]
 8007296:	2300      	movs	r3, #0
 8007298:	9303      	str	r3, [sp, #12]
 800729a:	2301      	movs	r3, #1
 800729c:	9302      	str	r3, [sp, #8]
 800729e:	f107 0313 	add.w	r3, r7, #19
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	460b      	mov	r3, r1
 80072aa:	2101      	movs	r1, #1
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f7ff ff23 	bl	80070f8 <VL53L0X_ref_calibration_io>
 80072b2:	4603      	mov	r3, r0
 80072b4:	75fb      	strb	r3, [r7, #23]
 80072b6:	e002      	b.n	80072be <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2200      	movs	r2, #0
 80072bc:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80072be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d112      	bne.n	80072ec <VL53L0X_perform_vhv_calibration+0xc2>
 80072c6:	79bb      	ldrb	r3, [r7, #6]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00f      	beq.n	80072ec <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80072cc:	7dbb      	ldrb	r3, [r7, #22]
 80072ce:	461a      	mov	r2, r3
 80072d0:	2101      	movs	r1, #1
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f7fb fdce 	bl	8002e74 <VL53L0X_WrByte>
 80072d8:	4603      	mov	r3, r0
 80072da:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80072dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d103      	bne.n	80072ec <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	7dba      	ldrb	r2, [r7, #22]
 80072e8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80072ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3718      	adds	r7, #24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	; 0x28
 80072fc:	af04      	add	r7, sp, #16
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	4611      	mov	r1, r2
 8007304:	461a      	mov	r2, r3
 8007306:	460b      	mov	r3, r1
 8007308:	71fb      	strb	r3, [r7, #7]
 800730a:	4613      	mov	r3, r2
 800730c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800730e:	2300      	movs	r3, #0
 8007310:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800731a:	2300      	movs	r3, #0
 800731c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800731e:	79bb      	ldrb	r3, [r7, #6]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800732a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800732c:	2202      	movs	r2, #2
 800732e:	2101      	movs	r1, #1
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f7fb fd9f 	bl	8002e74 <VL53L0X_WrByte>
 8007336:	4603      	mov	r3, r0
 8007338:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800733a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d105      	bne.n	800734e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8007342:	2100      	movs	r1, #0
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f7ff fe9c 	bl	8007082 <VL53L0X_perform_single_ref_calibration>
 800734a:	4603      	mov	r3, r0
 800734c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800734e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d115      	bne.n	8007382 <VL53L0X_perform_phase_calibration+0x8a>
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d112      	bne.n	8007382 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800735c:	7d39      	ldrb	r1, [r7, #20]
 800735e:	7d7a      	ldrb	r2, [r7, #21]
 8007360:	2301      	movs	r3, #1
 8007362:	9303      	str	r3, [sp, #12]
 8007364:	2300      	movs	r3, #0
 8007366:	9302      	str	r3, [sp, #8]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	9301      	str	r3, [sp, #4]
 800736c:	f107 0313 	add.w	r3, r7, #19
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	460b      	mov	r3, r1
 8007374:	2101      	movs	r1, #1
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7ff febe 	bl	80070f8 <VL53L0X_ref_calibration_io>
 800737c:	4603      	mov	r3, r0
 800737e:	75fb      	strb	r3, [r7, #23]
 8007380:	e002      	b.n	8007388 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2200      	movs	r2, #0
 8007386:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007388:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d112      	bne.n	80073b6 <VL53L0X_perform_phase_calibration+0xbe>
 8007390:	79bb      	ldrb	r3, [r7, #6]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00f      	beq.n	80073b6 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007396:	7dbb      	ldrb	r3, [r7, #22]
 8007398:	461a      	mov	r2, r3
 800739a:	2101      	movs	r1, #1
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7fb fd69 	bl	8002e74 <VL53L0X_WrByte>
 80073a2:	4603      	mov	r3, r0
 80073a4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80073a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d103      	bne.n	80073b6 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	7dba      	ldrb	r2, [r7, #22]
 80073b2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80073b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b086      	sub	sp, #24
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	607a      	str	r2, [r7, #4]
 80073ce:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073d0:	2300      	movs	r3, #0
 80073d2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80073d4:	2300      	movs	r3, #0
 80073d6:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80073de:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80073e0:	78fa      	ldrb	r2, [r7, #3]
 80073e2:	2300      	movs	r3, #0
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7ff ff1f 	bl	800722a <VL53L0X_perform_vhv_calibration>
 80073ec:	4603      	mov	r3, r0
 80073ee:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80073f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d107      	bne.n	8007408 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80073f8:	78fa      	ldrb	r2, [r7, #3]
 80073fa:	2300      	movs	r3, #0
 80073fc:	6879      	ldr	r1, [r7, #4]
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f7ff ff7a 	bl	80072f8 <VL53L0X_perform_phase_calibration>
 8007404:	4603      	mov	r3, r0
 8007406:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8007408:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10f      	bne.n	8007430 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007410:	7dbb      	ldrb	r3, [r7, #22]
 8007412:	461a      	mov	r2, r3
 8007414:	2101      	movs	r1, #1
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f7fb fd2c 	bl	8002e74 <VL53L0X_WrByte>
 800741c:	4603      	mov	r3, r0
 800741e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007420:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d103      	bne.n	8007430 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	7dba      	ldrb	r2, [r7, #22]
 800742c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007430:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007444:	2300      	movs	r3, #0
 8007446:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800744c:	2300      	movs	r3, #0
 800744e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007450:	f107 030f 	add.w	r3, r7, #15
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7fe fe02 	bl	8006060 <VL53L0X_GetMeasurementDataReady>
 800745c:	4603      	mov	r3, r0
 800745e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8007460:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d110      	bne.n	800748a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007468:	7bfb      	ldrb	r3, [r7, #15]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d00f      	beq.n	800748e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	3301      	adds	r3, #1
 8007472:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800747a:	d302      	bcc.n	8007482 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800747c:	23f9      	movs	r3, #249	; 0xf9
 800747e:	75fb      	strb	r3, [r7, #23]
			break;
 8007480:	e006      	b.n	8007490 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7fb fe48 	bl	8003118 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007488:	e7e2      	b.n	8007450 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800748a:	bf00      	nop
 800748c:	e000      	b.n	8007490 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800748e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8007490:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80074aa:	79fb      	ldrb	r3, [r7, #7]
 80074ac:	3301      	adds	r3, #1
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b085      	sub	sp, #20
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80074ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074d2:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80074d4:	e002      	b.n	80074dc <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	089b      	lsrs	r3, r3, #2
 80074da:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d8f8      	bhi.n	80074d6 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80074e4:	e017      	b.n	8007516 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4413      	add	r3, r2
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d30b      	bcc.n	800750a <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4413      	add	r3, r2
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	085b      	lsrs	r3, r3, #1
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	4413      	add	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	e002      	b.n	8007510 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	085b      	lsrs	r3, r3, #1
 800750e:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	089b      	lsrs	r3, r3, #2
 8007514:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e4      	bne.n	80074e6 <VL53L0X_isqrt+0x24>
	}

	return res;
 800751c:	68fb      	ldr	r3, [r7, #12]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b086      	sub	sp, #24
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007532:	2300      	movs	r3, #0
 8007534:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8007536:	2200      	movs	r2, #0
 8007538:	2183      	movs	r1, #131	; 0x83
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7fb fc9a 	bl	8002e74 <VL53L0X_WrByte>
 8007540:	4603      	mov	r3, r0
 8007542:	461a      	mov	r2, r3
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	4313      	orrs	r3, r2
 8007548:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800754a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d11e      	bne.n	8007590 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8007556:	f107 030f 	add.w	r3, r7, #15
 800755a:	461a      	mov	r2, r3
 800755c:	2183      	movs	r1, #131	; 0x83
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fb fd3c 	bl	8002fdc <VL53L0X_RdByte>
 8007564:	4603      	mov	r3, r0
 8007566:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10a      	bne.n	8007584 <VL53L0X_device_read_strobe+0x5a>
 800756e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d106      	bne.n	8007584 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	3301      	adds	r3, #1
 800757a:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007582:	d3e8      	bcc.n	8007556 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800758a:	d301      	bcc.n	8007590 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800758c:	23f9      	movs	r3, #249	; 0xf9
 800758e:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8007590:	2201      	movs	r2, #1
 8007592:	2183      	movs	r1, #131	; 0x83
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7fb fc6d 	bl	8002e74 <VL53L0X_WrByte>
 800759a:	4603      	mov	r3, r0
 800759c:	461a      	mov	r2, r3
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80075a4:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3718      	adds	r7, #24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b098      	sub	sp, #96	; 0x60
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075bc:	2300      	movs	r3, #0
 80075be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80075e0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80075e4:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80075f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80075fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007600:	2b07      	cmp	r3, #7
 8007602:	f000 8408 	beq.w	8007e16 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007606:	2201      	movs	r2, #1
 8007608:	2180      	movs	r1, #128	; 0x80
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7fb fc32 	bl	8002e74 <VL53L0X_WrByte>
 8007610:	4603      	mov	r3, r0
 8007612:	461a      	mov	r2, r3
 8007614:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007618:	4313      	orrs	r3, r2
 800761a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800761e:	2201      	movs	r2, #1
 8007620:	21ff      	movs	r1, #255	; 0xff
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7fb fc26 	bl	8002e74 <VL53L0X_WrByte>
 8007628:	4603      	mov	r3, r0
 800762a:	461a      	mov	r2, r3
 800762c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007630:	4313      	orrs	r3, r2
 8007632:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007636:	2200      	movs	r2, #0
 8007638:	2100      	movs	r1, #0
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7fb fc1a 	bl	8002e74 <VL53L0X_WrByte>
 8007640:	4603      	mov	r3, r0
 8007642:	461a      	mov	r2, r3
 8007644:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007648:	4313      	orrs	r3, r2
 800764a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800764e:	2206      	movs	r2, #6
 8007650:	21ff      	movs	r1, #255	; 0xff
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7fb fc0e 	bl	8002e74 <VL53L0X_WrByte>
 8007658:	4603      	mov	r3, r0
 800765a:	461a      	mov	r2, r3
 800765c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007660:	4313      	orrs	r3, r2
 8007662:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007666:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800766a:	461a      	mov	r2, r3
 800766c:	2183      	movs	r1, #131	; 0x83
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7fb fcb4 	bl	8002fdc <VL53L0X_RdByte>
 8007674:	4603      	mov	r3, r0
 8007676:	461a      	mov	r2, r3
 8007678:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800767c:	4313      	orrs	r3, r2
 800767e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8007682:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007686:	f043 0304 	orr.w	r3, r3, #4
 800768a:	b2db      	uxtb	r3, r3
 800768c:	461a      	mov	r2, r3
 800768e:	2183      	movs	r1, #131	; 0x83
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7fb fbef 	bl	8002e74 <VL53L0X_WrByte>
 8007696:	4603      	mov	r3, r0
 8007698:	461a      	mov	r2, r3
 800769a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800769e:	4313      	orrs	r3, r2
 80076a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80076a4:	2207      	movs	r2, #7
 80076a6:	21ff      	movs	r1, #255	; 0xff
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7fb fbe3 	bl	8002e74 <VL53L0X_WrByte>
 80076ae:	4603      	mov	r3, r0
 80076b0:	461a      	mov	r2, r3
 80076b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076b6:	4313      	orrs	r3, r2
 80076b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80076bc:	2201      	movs	r2, #1
 80076be:	2181      	movs	r1, #129	; 0x81
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7fb fbd7 	bl	8002e74 <VL53L0X_WrByte>
 80076c6:	4603      	mov	r3, r0
 80076c8:	461a      	mov	r2, r3
 80076ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076ce:	4313      	orrs	r3, r2
 80076d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7fb fd1f 	bl	8003118 <VL53L0X_PollingDelay>
 80076da:	4603      	mov	r3, r0
 80076dc:	461a      	mov	r2, r3
 80076de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076e2:	4313      	orrs	r3, r2
 80076e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80076e8:	2201      	movs	r2, #1
 80076ea:	2180      	movs	r1, #128	; 0x80
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7fb fbc1 	bl	8002e74 <VL53L0X_WrByte>
 80076f2:	4603      	mov	r3, r0
 80076f4:	461a      	mov	r2, r3
 80076f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076fa:	4313      	orrs	r3, r2
 80076fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 8098 	beq.w	800783c <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800770c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007710:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007714:	2b00      	cmp	r3, #0
 8007716:	f040 8091 	bne.w	800783c <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800771a:	226b      	movs	r2, #107	; 0x6b
 800771c:	2194      	movs	r1, #148	; 0x94
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fb fba8 	bl	8002e74 <VL53L0X_WrByte>
 8007724:	4603      	mov	r3, r0
 8007726:	461a      	mov	r2, r3
 8007728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800772c:	4313      	orrs	r3, r2
 800772e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff fef9 	bl	800752a <VL53L0X_device_read_strobe>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007740:	4313      	orrs	r3, r2
 8007742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800774a:	461a      	mov	r2, r3
 800774c:	2190      	movs	r1, #144	; 0x90
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7fb fca6 	bl	80030a0 <VL53L0X_RdDWord>
 8007754:	4603      	mov	r3, r0
 8007756:	461a      	mov	r2, r3
 8007758:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800775c:	4313      	orrs	r3, r2
 800775e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	b2db      	uxtb	r3, r3
 8007768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800776c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	0bdb      	lsrs	r3, r3, #15
 8007774:	b2db      	uxtb	r3, r3
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800777e:	2224      	movs	r2, #36	; 0x24
 8007780:	2194      	movs	r1, #148	; 0x94
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7fb fb76 	bl	8002e74 <VL53L0X_WrByte>
 8007788:	4603      	mov	r3, r0
 800778a:	461a      	mov	r2, r3
 800778c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007790:	4313      	orrs	r3, r2
 8007792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7ff fec7 	bl	800752a <VL53L0X_device_read_strobe>
 800779c:	4603      	mov	r3, r0
 800779e:	461a      	mov	r2, r3
 80077a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80077aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077ae:	461a      	mov	r2, r3
 80077b0:	2190      	movs	r1, #144	; 0x90
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fb fc74 	bl	80030a0 <VL53L0X_RdDWord>
 80077b8:	4603      	mov	r3, r0
 80077ba:	461a      	mov	r2, r3
 80077bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077c0:	4313      	orrs	r3, r2
 80077c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80077c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c8:	0e1b      	lsrs	r3, r3, #24
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	0c1b      	lsrs	r3, r3, #16
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	0a1b      	lsrs	r3, r3, #8
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80077e4:	2225      	movs	r2, #37	; 0x25
 80077e6:	2194      	movs	r1, #148	; 0x94
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7fb fb43 	bl	8002e74 <VL53L0X_WrByte>
 80077ee:	4603      	mov	r3, r0
 80077f0:	461a      	mov	r2, r3
 80077f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7ff fe94 	bl	800752a <VL53L0X_device_read_strobe>
 8007802:	4603      	mov	r3, r0
 8007804:	461a      	mov	r2, r3
 8007806:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800780a:	4313      	orrs	r3, r2
 800780c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007810:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007814:	461a      	mov	r2, r3
 8007816:	2190      	movs	r1, #144	; 0x90
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f7fb fc41 	bl	80030a0 <VL53L0X_RdDWord>
 800781e:	4603      	mov	r3, r0
 8007820:	461a      	mov	r2, r3
 8007822:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007826:	4313      	orrs	r3, r2
 8007828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	0e1b      	lsrs	r3, r3, #24
 8007830:	b2db      	uxtb	r3, r3
 8007832:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	0c1b      	lsrs	r3, r3, #16
 8007838:	b2db      	uxtb	r3, r3
 800783a:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800783c:	78fb      	ldrb	r3, [r7, #3]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 8189 	beq.w	8007b5a <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007848:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800784c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007850:	2b00      	cmp	r3, #0
 8007852:	f040 8182 	bne.w	8007b5a <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8007856:	2202      	movs	r2, #2
 8007858:	2194      	movs	r1, #148	; 0x94
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fb fb0a 	bl	8002e74 <VL53L0X_WrByte>
 8007860:	4603      	mov	r3, r0
 8007862:	461a      	mov	r2, r3
 8007864:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007868:	4313      	orrs	r3, r2
 800786a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7ff fe5b 	bl	800752a <VL53L0X_device_read_strobe>
 8007874:	4603      	mov	r3, r0
 8007876:	461a      	mov	r2, r3
 8007878:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800787c:	4313      	orrs	r3, r2
 800787e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8007882:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8007886:	461a      	mov	r2, r3
 8007888:	2190      	movs	r1, #144	; 0x90
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7fb fba6 	bl	8002fdc <VL53L0X_RdByte>
 8007890:	4603      	mov	r3, r0
 8007892:	461a      	mov	r2, r3
 8007894:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007898:	4313      	orrs	r3, r2
 800789a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800789e:	227b      	movs	r2, #123	; 0x7b
 80078a0:	2194      	movs	r1, #148	; 0x94
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7fb fae6 	bl	8002e74 <VL53L0X_WrByte>
 80078a8:	4603      	mov	r3, r0
 80078aa:	461a      	mov	r2, r3
 80078ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078b0:	4313      	orrs	r3, r2
 80078b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff fe37 	bl	800752a <VL53L0X_device_read_strobe>
 80078bc:	4603      	mov	r3, r0
 80078be:	461a      	mov	r2, r3
 80078c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078c4:	4313      	orrs	r3, r2
 80078c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80078ca:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80078ce:	461a      	mov	r2, r3
 80078d0:	2190      	movs	r1, #144	; 0x90
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7fb fb82 	bl	8002fdc <VL53L0X_RdByte>
 80078d8:	4603      	mov	r3, r0
 80078da:	461a      	mov	r2, r3
 80078dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078e0:	4313      	orrs	r3, r2
 80078e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80078e6:	2277      	movs	r2, #119	; 0x77
 80078e8:	2194      	movs	r1, #148	; 0x94
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7fb fac2 	bl	8002e74 <VL53L0X_WrByte>
 80078f0:	4603      	mov	r3, r0
 80078f2:	461a      	mov	r2, r3
 80078f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078f8:	4313      	orrs	r3, r2
 80078fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff fe13 	bl	800752a <VL53L0X_device_read_strobe>
 8007904:	4603      	mov	r3, r0
 8007906:	461a      	mov	r2, r3
 8007908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800790c:	4313      	orrs	r3, r2
 800790e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007912:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007916:	461a      	mov	r2, r3
 8007918:	2190      	movs	r1, #144	; 0x90
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fb fbc0 	bl	80030a0 <VL53L0X_RdDWord>
 8007920:	4603      	mov	r3, r0
 8007922:	461a      	mov	r2, r3
 8007924:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007928:	4313      	orrs	r3, r2
 800792a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	0e5b      	lsrs	r3, r3, #25
 8007932:	b2db      	uxtb	r3, r3
 8007934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007938:	b2db      	uxtb	r3, r3
 800793a:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	0c9b      	lsrs	r3, r3, #18
 8007940:	b2db      	uxtb	r3, r3
 8007942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007946:	b2db      	uxtb	r3, r3
 8007948:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	0adb      	lsrs	r3, r3, #11
 800794e:	b2db      	uxtb	r3, r3
 8007950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007954:	b2db      	uxtb	r3, r3
 8007956:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8007958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795a:	091b      	lsrs	r3, r3, #4
 800795c:	b2db      	uxtb	r3, r3
 800795e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007962:	b2db      	uxtb	r3, r3
 8007964:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	b2db      	uxtb	r3, r3
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	b2db      	uxtb	r3, r3
 800796e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007972:	b2db      	uxtb	r3, r3
 8007974:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8007978:	2278      	movs	r2, #120	; 0x78
 800797a:	2194      	movs	r1, #148	; 0x94
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7fb fa79 	bl	8002e74 <VL53L0X_WrByte>
 8007982:	4603      	mov	r3, r0
 8007984:	461a      	mov	r2, r3
 8007986:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800798a:	4313      	orrs	r3, r2
 800798c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff fdca 	bl	800752a <VL53L0X_device_read_strobe>
 8007996:	4603      	mov	r3, r0
 8007998:	461a      	mov	r2, r3
 800799a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800799e:	4313      	orrs	r3, r2
 80079a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80079a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079a8:	461a      	mov	r2, r3
 80079aa:	2190      	movs	r1, #144	; 0x90
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7fb fb77 	bl	80030a0 <VL53L0X_RdDWord>
 80079b2:	4603      	mov	r3, r0
 80079b4:	461a      	mov	r2, r3
 80079b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079ba:	4313      	orrs	r3, r2
 80079bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	0f5b      	lsrs	r3, r3, #29
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ca:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80079cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079d0:	4413      	add	r3, r2
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	0d9b      	lsrs	r3, r3, #22
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	0bdb      	lsrs	r3, r3, #15
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	0a1b      	lsrs	r3, r3, #8
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8007a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	019b      	lsls	r3, r3, #6
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8007a20:	2279      	movs	r2, #121	; 0x79
 8007a22:	2194      	movs	r1, #148	; 0x94
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7fb fa25 	bl	8002e74 <VL53L0X_WrByte>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a32:	4313      	orrs	r3, r2
 8007a34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7ff fd76 	bl	800752a <VL53L0X_device_read_strobe>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	461a      	mov	r2, r3
 8007a42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a46:	4313      	orrs	r3, r2
 8007a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007a4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a50:	461a      	mov	r2, r3
 8007a52:	2190      	movs	r1, #144	; 0x90
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7fb fb23 	bl	80030a0 <VL53L0X_RdDWord>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a62:	4313      	orrs	r3, r2
 8007a64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	0e9b      	lsrs	r3, r3, #26
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a72:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8007a74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a78:	4413      	add	r3, r2
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	0cdb      	lsrs	r3, r3, #19
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	0b1b      	lsrs	r3, r3, #12
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	095b      	lsrs	r3, r3, #5
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007aba:	227a      	movs	r2, #122	; 0x7a
 8007abc:	2194      	movs	r1, #148	; 0x94
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7fb f9d8 	bl	8002e74 <VL53L0X_WrByte>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007acc:	4313      	orrs	r3, r2
 8007ace:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff fd29 	bl	800752a <VL53L0X_device_read_strobe>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	461a      	mov	r2, r3
 8007adc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007ae6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007aea:	461a      	mov	r2, r3
 8007aec:	2190      	movs	r1, #144	; 0x90
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7fb fad6 	bl	80030a0 <VL53L0X_RdDWord>
 8007af4:	4603      	mov	r3, r0
 8007af6:	461a      	mov	r2, r3
 8007af8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007afc:	4313      	orrs	r3, r2
 8007afe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8007b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b04:	0f9b      	lsrs	r3, r3, #30
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b0c:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8007b0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b12:	4413      	add	r3, r2
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8007b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1a:	0ddb      	lsrs	r3, r3, #23
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	0c1b      	lsrs	r3, r3, #16
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	0a5b      	lsrs	r3, r3, #9
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	089b      	lsrs	r3, r3, #2
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8007b54:	2300      	movs	r3, #0
 8007b56:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8007b5a:	78fb      	ldrb	r3, [r7, #3]
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 80f1 	beq.w	8007d48 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007b66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b6a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f040 80ea 	bne.w	8007d48 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007b74:	227b      	movs	r2, #123	; 0x7b
 8007b76:	2194      	movs	r1, #148	; 0x94
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7fb f97b 	bl	8002e74 <VL53L0X_WrByte>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	461a      	mov	r2, r3
 8007b82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff fccc 	bl	800752a <VL53L0X_device_read_strobe>
 8007b92:	4603      	mov	r3, r0
 8007b94:	461a      	mov	r2, r3
 8007b96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8007ba0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	2190      	movs	r1, #144	; 0x90
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7fb fa79 	bl	80030a0 <VL53L0X_RdDWord>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007bbc:	227c      	movs	r2, #124	; 0x7c
 8007bbe:	2194      	movs	r1, #148	; 0x94
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7fb f957 	bl	8002e74 <VL53L0X_WrByte>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	461a      	mov	r2, r3
 8007bca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff fca8 	bl	800752a <VL53L0X_device_read_strobe>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	461a      	mov	r2, r3
 8007bde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007be2:	4313      	orrs	r3, r2
 8007be4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8007be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bec:	461a      	mov	r2, r3
 8007bee:	2190      	movs	r1, #144	; 0x90
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7fb fa55 	bl	80030a0 <VL53L0X_RdDWord>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8007c04:	2273      	movs	r2, #115	; 0x73
 8007c06:	2194      	movs	r1, #148	; 0x94
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7fb f933 	bl	8002e74 <VL53L0X_WrByte>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	461a      	mov	r2, r3
 8007c12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c16:	4313      	orrs	r3, r2
 8007c18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff fc84 	bl	800752a <VL53L0X_device_read_strobe>
 8007c22:	4603      	mov	r3, r0
 8007c24:	461a      	mov	r2, r3
 8007c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007c30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c34:	461a      	mov	r2, r3
 8007c36:	2190      	movs	r1, #144	; 0x90
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7fb fa31 	bl	80030a0 <VL53L0X_RdDWord>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	461a      	mov	r2, r3
 8007c42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8007c54:	2274      	movs	r2, #116	; 0x74
 8007c56:	2194      	movs	r1, #148	; 0x94
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7fb f90b 	bl	8002e74 <VL53L0X_WrByte>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	461a      	mov	r2, r3
 8007c62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff fc5c 	bl	800752a <VL53L0X_device_read_strobe>
 8007c72:	4603      	mov	r3, r0
 8007c74:	461a      	mov	r2, r3
 8007c76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007c80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c84:	461a      	mov	r2, r3
 8007c86:	2190      	movs	r1, #144	; 0x90
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7fb fa09 	bl	80030a0 <VL53L0X_RdDWord>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	461a      	mov	r2, r3
 8007c92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c96:	4313      	orrs	r3, r2
 8007c98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9e:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8007ca0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8007ca6:	2275      	movs	r2, #117	; 0x75
 8007ca8:	2194      	movs	r1, #148	; 0x94
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7fb f8e2 	bl	8002e74 <VL53L0X_WrByte>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7ff fc33 	bl	800752a <VL53L0X_device_read_strobe>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007cd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	2190      	movs	r1, #144	; 0x90
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7fb f9e0 	bl	80030a0 <VL53L0X_RdDWord>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8007cf6:	2276      	movs	r2, #118	; 0x76
 8007cf8:	2194      	movs	r1, #148	; 0x94
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7fb f8ba 	bl	8002e74 <VL53L0X_WrByte>
 8007d00:	4603      	mov	r3, r0
 8007d02:	461a      	mov	r2, r3
 8007d04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff fc0b 	bl	800752a <VL53L0X_device_read_strobe>
 8007d14:	4603      	mov	r3, r0
 8007d16:	461a      	mov	r2, r3
 8007d18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007d22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d26:	461a      	mov	r2, r3
 8007d28:	2190      	movs	r1, #144	; 0x90
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fb f9b8 	bl	80030a0 <VL53L0X_RdDWord>
 8007d30:	4603      	mov	r3, r0
 8007d32:	461a      	mov	r2, r3
 8007d34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8007d42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d44:	4313      	orrs	r3, r2
 8007d46:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2181      	movs	r1, #129	; 0x81
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7fb f891 	bl	8002e74 <VL53L0X_WrByte>
 8007d52:	4603      	mov	r3, r0
 8007d54:	461a      	mov	r2, r3
 8007d56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007d60:	2206      	movs	r2, #6
 8007d62:	21ff      	movs	r1, #255	; 0xff
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7fb f885 	bl	8002e74 <VL53L0X_WrByte>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d72:	4313      	orrs	r3, r2
 8007d74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007d78:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	2183      	movs	r1, #131	; 0x83
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7fb f92b 	bl	8002fdc <VL53L0X_RdByte>
 8007d86:	4603      	mov	r3, r0
 8007d88:	461a      	mov	r2, r3
 8007d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007d94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d98:	f023 0304 	bic.w	r3, r3, #4
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	2183      	movs	r1, #131	; 0x83
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7fb f866 	bl	8002e74 <VL53L0X_WrByte>
 8007da8:	4603      	mov	r3, r0
 8007daa:	461a      	mov	r2, r3
 8007dac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007db0:	4313      	orrs	r3, r2
 8007db2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007db6:	2201      	movs	r2, #1
 8007db8:	21ff      	movs	r1, #255	; 0xff
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7fb f85a 	bl	8002e74 <VL53L0X_WrByte>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007dce:	2201      	movs	r2, #1
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7fb f84e 	bl	8002e74 <VL53L0X_WrByte>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007de0:	4313      	orrs	r3, r2
 8007de2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007de6:	2200      	movs	r2, #0
 8007de8:	21ff      	movs	r1, #255	; 0xff
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7fb f842 	bl	8002e74 <VL53L0X_WrByte>
 8007df0:	4603      	mov	r3, r0
 8007df2:	461a      	mov	r2, r3
 8007df4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2180      	movs	r1, #128	; 0x80
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7fb f836 	bl	8002e74 <VL53L0X_WrByte>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e10:	4313      	orrs	r3, r2
 8007e12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007e16:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f040 808f 	bne.w	8007f3e <VL53L0X_get_info_from_device+0x98e>
 8007e20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007e24:	2b07      	cmp	r3, #7
 8007e26:	f000 808a 	beq.w	8007f3e <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d024      	beq.n	8007e7e <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007e34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007e38:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d11e      	bne.n	8007e7e <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007e46:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007e50:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007e54:	2300      	movs	r3, #0
 8007e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e58:	e00e      	b.n	8007e78 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8007e5a:	f107 0208 	add.w	r2, r7, #8
 8007e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e60:	4413      	add	r3, r2
 8007e62:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007e6e:	460a      	mov	r2, r1
 8007e70:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e74:	3301      	adds	r3, #1
 8007e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e7a:	2b05      	cmp	r3, #5
 8007e7c:	dded      	ble.n	8007e5a <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007e7e:	78fb      	ldrb	r3, [r7, #3]
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d018      	beq.n	8007eba <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007e88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007e8c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d112      	bne.n	8007eba <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007e94:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007e9e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	33f3      	adds	r3, #243	; 0xf3
 8007eac:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007eae:	f107 0310 	add.w	r3, r7, #16
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007eb6:	f011 f90b 	bl	80190d0 <strcpy>

		}

		if (((option & 4) == 4) &&
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d030      	beq.n	8007f26 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007ec4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ec8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d12a      	bne.n	8007f26 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ee2:	025b      	lsls	r3, r3, #9
 8007ee4:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007eea:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d011      	beq.n	8007f1e <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8007efa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8007f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f08:	fb02 f303 	mul.w	r3, r2, r3
 8007f0c:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8007f0e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8007f12:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007f16:	425b      	negs	r3, r3
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8007f1e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007f26:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007f34:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007f3e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3760      	adds	r7, #96	; 0x60
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b087      	sub	sp, #28
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	460b      	mov	r3, r1
 8007f54:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8007f56:	f240 6277 	movw	r2, #1655	; 0x677
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8007f62:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007f66:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	fb02 f303 	mul.w	r3, r2, r3
 8007f76:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007f78:	68bb      	ldr	r3, [r7, #8]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	371c      	adds	r7, #28
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b087      	sub	sp, #28
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d017      	beq.n	8007fd0 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007fa6:	e005      	b.n	8007fb4 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	085b      	lsrs	r3, r3, #1
 8007fac:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007fae:	89fb      	ldrh	r3, [r7, #14]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1f4      	bne.n	8007fa8 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007fbe:	89fb      	ldrh	r3, [r7, #14]
 8007fc0:	021b      	lsls	r3, r3, #8
 8007fc2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007fcc:	4413      	add	r3, r2
 8007fce:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007fd0:	8afb      	ldrh	r3, [r7, #22]

}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b085      	sub	sp, #20
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007fec:	88fb      	ldrh	r3, [r7, #6]
 8007fee:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007ff0:	88fa      	ldrh	r2, [r7, #6]
 8007ff2:	0a12      	lsrs	r2, r2, #8
 8007ff4:	b292      	uxth	r2, r2
 8007ff6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
	...

0800800c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b088      	sub	sp, #32
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	4613      	mov	r3, r2
 8008018:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800801e:	79fb      	ldrb	r3, [r7, #7]
 8008020:	4619      	mov	r1, r3
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f7ff ff91 	bl	8007f4a <VL53L0X_calc_macro_period_ps>
 8008028:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008030:	4a0a      	ldr	r2, [pc, #40]	; (800805c <VL53L0X_calc_timeout_mclks+0x50>)
 8008032:	fba2 2303 	umull	r2, r3, r2, r3
 8008036:	099b      	lsrs	r3, r3, #6
 8008038:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008040:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	085b      	lsrs	r3, r3, #1
 8008048:	441a      	add	r2, r3
	timeout_period_mclks =
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008050:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8008052:	69fb      	ldr	r3, [r7, #28]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3720      	adds	r7, #32
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	10624dd3 	.word	0x10624dd3

08008060 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	807b      	strh	r3, [r7, #2]
 800806c:	4613      	mov	r3, r2
 800806e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008074:	787b      	ldrb	r3, [r7, #1]
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff ff66 	bl	8007f4a <VL53L0X_calc_macro_period_ps>
 800807e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008086:	4a0a      	ldr	r2, [pc, #40]	; (80080b0 <VL53L0X_calc_timeout_us+0x50>)
 8008088:	fba2 2303 	umull	r2, r3, r2, r3
 800808c:	099b      	lsrs	r3, r3, #6
 800808e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8008090:	887b      	ldrh	r3, [r7, #2]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	fb02 f303 	mul.w	r3, r2, r3
 8008098:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800809c:	4a04      	ldr	r2, [pc, #16]	; (80080b0 <VL53L0X_calc_timeout_us+0x50>)
 800809e:	fba2 2303 	umull	r2, r3, r2, r3
 80080a2:	099b      	lsrs	r3, r3, #6
 80080a4:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80080a6:	697b      	ldr	r3, [r7, #20]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	10624dd3 	.word	0x10624dd3

080080b4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08c      	sub	sp, #48	; 0x30
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	460b      	mov	r3, r1
 80080be:	607a      	str	r2, [r7, #4]
 80080c0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080c2:	2300      	movs	r3, #0
 80080c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80080ce:	2300      	movs	r3, #0
 80080d0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80080da:	7afb      	ldrb	r3, [r7, #11]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d005      	beq.n	80080ec <get_sequence_step_timeout+0x38>
 80080e0:	7afb      	ldrb	r3, [r7, #11]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d002      	beq.n	80080ec <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80080e6:	7afb      	ldrb	r3, [r7, #11]
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d128      	bne.n	800813e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80080ec:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80080f0:	461a      	mov	r2, r3
 80080f2:	2100      	movs	r1, #0
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7fd fa5b 	bl	80055b0 <VL53L0X_GetVcselPulsePeriod>
 80080fa:	4603      	mov	r3, r0
 80080fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8008100:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008104:	2b00      	cmp	r3, #0
 8008106:	d109      	bne.n	800811c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8008108:	f107 0320 	add.w	r3, r7, #32
 800810c:	461a      	mov	r2, r3
 800810e:	2146      	movs	r1, #70	; 0x46
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f7fa ff63 	bl	8002fdc <VL53L0X_RdByte>
 8008116:	4603      	mov	r3, r0
 8008118:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800811c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008120:	b29b      	uxth	r3, r3
 8008122:	4618      	mov	r0, r3
 8008124:	f7ff ff5b 	bl	8007fde <VL53L0X_decode_timeout>
 8008128:	4603      	mov	r3, r0
 800812a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800812c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008130:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008132:	4619      	mov	r1, r3
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f7ff ff93 	bl	8008060 <VL53L0X_calc_timeout_us>
 800813a:	62b8      	str	r0, [r7, #40]	; 0x28
 800813c:	e092      	b.n	8008264 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800813e:	7afb      	ldrb	r3, [r7, #11]
 8008140:	2b03      	cmp	r3, #3
 8008142:	d135      	bne.n	80081b0 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008144:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008148:	461a      	mov	r2, r3
 800814a:	2100      	movs	r1, #0
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f7fd fa2f 	bl	80055b0 <VL53L0X_GetVcselPulsePeriod>
 8008152:	4603      	mov	r3, r0
 8008154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008158:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800815c:	2b00      	cmp	r3, #0
 800815e:	f040 8081 	bne.w	8008264 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008162:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008166:	461a      	mov	r2, r3
 8008168:	2100      	movs	r1, #0
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f7fd fa20 	bl	80055b0 <VL53L0X_GetVcselPulsePeriod>
 8008170:	4603      	mov	r3, r0
 8008172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8008176:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800817a:	2b00      	cmp	r3, #0
 800817c:	d109      	bne.n	8008192 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800817e:	f107 031e 	add.w	r3, r7, #30
 8008182:	461a      	mov	r2, r3
 8008184:	2151      	movs	r1, #81	; 0x51
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f7fa ff52 	bl	8003030 <VL53L0X_RdWord>
 800818c:	4603      	mov	r3, r0
 800818e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008192:	8bfb      	ldrh	r3, [r7, #30]
 8008194:	4618      	mov	r0, r3
 8008196:	f7ff ff22 	bl	8007fde <VL53L0X_decode_timeout>
 800819a:	4603      	mov	r3, r0
 800819c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800819e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80081a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081a4:	4619      	mov	r1, r3
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f7ff ff5a 	bl	8008060 <VL53L0X_calc_timeout_us>
 80081ac:	62b8      	str	r0, [r7, #40]	; 0x28
 80081ae:	e059      	b.n	8008264 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80081b0:	7afb      	ldrb	r3, [r7, #11]
 80081b2:	2b04      	cmp	r3, #4
 80081b4:	d156      	bne.n	8008264 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80081b6:	f107 0314 	add.w	r3, r7, #20
 80081ba:	4619      	mov	r1, r3
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f7fd fb03 	bl	80057c8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d01d      	beq.n	8008208 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80081cc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80081d0:	461a      	mov	r2, r3
 80081d2:	2100      	movs	r1, #0
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f7fd f9eb 	bl	80055b0 <VL53L0X_GetVcselPulsePeriod>
 80081da:	4603      	mov	r3, r0
 80081dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80081e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10f      	bne.n	8008208 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80081e8:	f107 031e 	add.w	r3, r7, #30
 80081ec:	461a      	mov	r2, r3
 80081ee:	2151      	movs	r1, #81	; 0x51
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f7fa ff1d 	bl	8003030 <VL53L0X_RdWord>
 80081f6:	4603      	mov	r3, r0
 80081f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80081fc:	8bfb      	ldrh	r3, [r7, #30]
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff feed 	bl	8007fde <VL53L0X_decode_timeout>
 8008204:	4603      	mov	r3, r0
 8008206:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008208:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800820c:	2b00      	cmp	r3, #0
 800820e:	d109      	bne.n	8008224 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008210:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008214:	461a      	mov	r2, r3
 8008216:	2101      	movs	r1, #1
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f7fd f9c9 	bl	80055b0 <VL53L0X_GetVcselPulsePeriod>
 800821e:	4603      	mov	r3, r0
 8008220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008224:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10f      	bne.n	800824c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800822c:	f107 031c 	add.w	r3, r7, #28
 8008230:	461a      	mov	r2, r3
 8008232:	2171      	movs	r1, #113	; 0x71
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f7fa fefb 	bl	8003030 <VL53L0X_RdWord>
 800823a:	4603      	mov	r3, r0
 800823c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008240:	8bbb      	ldrh	r3, [r7, #28]
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff fecb 	bl	8007fde <VL53L0X_decode_timeout>
 8008248:	4603      	mov	r3, r0
 800824a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800824c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800824e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008254:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800825a:	4619      	mov	r1, r3
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f7ff feff 	bl	8008060 <VL53L0X_calc_timeout_us>
 8008262:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008268:	601a      	str	r2, [r3, #0]

	return Status;
 800826a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800826e:	4618      	mov	r0, r3
 8008270:	3730      	adds	r7, #48	; 0x30
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b08a      	sub	sp, #40	; 0x28
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	460b      	mov	r3, r1
 8008280:	607a      	str	r2, [r7, #4]
 8008282:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008284:	2300      	movs	r3, #0
 8008286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800828a:	7afb      	ldrb	r3, [r7, #11]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d005      	beq.n	800829c <set_sequence_step_timeout+0x26>
 8008290:	7afb      	ldrb	r3, [r7, #11]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d002      	beq.n	800829c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008296:	7afb      	ldrb	r3, [r7, #11]
 8008298:	2b02      	cmp	r3, #2
 800829a:	d138      	bne.n	800830e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800829c:	f107 031b 	add.w	r3, r7, #27
 80082a0:	461a      	mov	r2, r3
 80082a2:	2100      	movs	r1, #0
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f7fd f983 	bl	80055b0 <VL53L0X_GetVcselPulsePeriod>
 80082aa:	4603      	mov	r3, r0
 80082ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80082b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d11a      	bne.n	80082ee <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80082b8:	7efb      	ldrb	r3, [r7, #27]
 80082ba:	461a      	mov	r2, r3
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f7ff fea4 	bl	800800c <VL53L0X_calc_timeout_mclks>
 80082c4:	4603      	mov	r3, r0
 80082c6:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80082c8:	8bbb      	ldrh	r3, [r7, #28]
 80082ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ce:	d903      	bls.n	80082d8 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80082d0:	23ff      	movs	r3, #255	; 0xff
 80082d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80082d6:	e004      	b.n	80082e2 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80082d8:	8bbb      	ldrh	r3, [r7, #28]
 80082da:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80082dc:	3b01      	subs	r3, #1
 80082de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80082e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80082ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f040 80ab 	bne.w	800844e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80082f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082fc:	461a      	mov	r2, r3
 80082fe:	2146      	movs	r1, #70	; 0x46
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7fa fdb7 	bl	8002e74 <VL53L0X_WrByte>
 8008306:	4603      	mov	r3, r0
 8008308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800830c:	e09f      	b.n	800844e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800830e:	7afb      	ldrb	r3, [r7, #11]
 8008310:	2b03      	cmp	r3, #3
 8008312:	d135      	bne.n	8008380 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8008314:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008318:	2b00      	cmp	r3, #0
 800831a:	d11b      	bne.n	8008354 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800831c:	f107 031b 	add.w	r3, r7, #27
 8008320:	461a      	mov	r2, r3
 8008322:	2100      	movs	r1, #0
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f7fd f943 	bl	80055b0 <VL53L0X_GetVcselPulsePeriod>
 800832a:	4603      	mov	r3, r0
 800832c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008330:	7efb      	ldrb	r3, [r7, #27]
 8008332:	461a      	mov	r2, r3
 8008334:	6879      	ldr	r1, [r7, #4]
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f7ff fe68 	bl	800800c <VL53L0X_calc_timeout_mclks>
 800833c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800833e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8008340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008342:	4618      	mov	r0, r3
 8008344:	f7ff fe1f 	bl	8007f86 <VL53L0X_encode_timeout>
 8008348:	4603      	mov	r3, r0
 800834a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800834c:	8b3a      	ldrh	r2, [r7, #24]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008354:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008358:	2b00      	cmp	r3, #0
 800835a:	d108      	bne.n	800836e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800835c:	8b3b      	ldrh	r3, [r7, #24]
 800835e:	461a      	mov	r2, r3
 8008360:	2151      	movs	r1, #81	; 0x51
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f7fa fdaa 	bl	8002ebc <VL53L0X_WrWord>
 8008368:	4603      	mov	r3, r0
 800836a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800836e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008372:	2b00      	cmp	r3, #0
 8008374:	d16b      	bne.n	800844e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800837e:	e066      	b.n	800844e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	2b04      	cmp	r3, #4
 8008384:	d160      	bne.n	8008448 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8008386:	f107 0310 	add.w	r3, r7, #16
 800838a:	4619      	mov	r1, r3
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f7fd fa1b 	bl	80057c8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8008396:	7cfb      	ldrb	r3, [r7, #19]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d01d      	beq.n	80083d8 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800839c:	f107 031b 	add.w	r3, r7, #27
 80083a0:	461a      	mov	r2, r3
 80083a2:	2100      	movs	r1, #0
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f7fd f903 	bl	80055b0 <VL53L0X_GetVcselPulsePeriod>
 80083aa:	4603      	mov	r3, r0
 80083ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80083b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10f      	bne.n	80083d8 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80083b8:	f107 0318 	add.w	r3, r7, #24
 80083bc:	461a      	mov	r2, r3
 80083be:	2151      	movs	r1, #81	; 0x51
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f7fa fe35 	bl	8003030 <VL53L0X_RdWord>
 80083c6:	4603      	mov	r3, r0
 80083c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80083cc:	8b3b      	ldrh	r3, [r7, #24]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff fe05 	bl	8007fde <VL53L0X_decode_timeout>
 80083d4:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80083d6:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80083d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d109      	bne.n	80083f4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80083e0:	f107 031b 	add.w	r3, r7, #27
 80083e4:	461a      	mov	r2, r3
 80083e6:	2101      	movs	r1, #1
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f7fd f8e1 	bl	80055b0 <VL53L0X_GetVcselPulsePeriod>
 80083ee:	4603      	mov	r3, r0
 80083f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80083f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d128      	bne.n	800844e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80083fc:	7efb      	ldrb	r3, [r7, #27]
 80083fe:	461a      	mov	r2, r3
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f7ff fe02 	bl	800800c <VL53L0X_calc_timeout_mclks>
 8008408:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800840a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800840c:	6a3a      	ldr	r2, [r7, #32]
 800840e:	4413      	add	r3, r2
 8008410:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8008412:	6a38      	ldr	r0, [r7, #32]
 8008414:	f7ff fdb7 	bl	8007f86 <VL53L0X_encode_timeout>
 8008418:	4603      	mov	r3, r0
 800841a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800841c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008420:	2b00      	cmp	r3, #0
 8008422:	d108      	bne.n	8008436 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8008424:	8bfb      	ldrh	r3, [r7, #30]
 8008426:	461a      	mov	r2, r3
 8008428:	2171      	movs	r1, #113	; 0x71
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7fa fd46 	bl	8002ebc <VL53L0X_WrWord>
 8008430:	4603      	mov	r3, r0
 8008432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8008436:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800843a:	2b00      	cmp	r3, #0
 800843c:	d107      	bne.n	800844e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8008446:	e002      	b.n	800844e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008448:	23fc      	movs	r3, #252	; 0xfc
 800844a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800844e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008452:	4618      	mov	r0, r3
 8008454:	3728      	adds	r7, #40	; 0x28
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b086      	sub	sp, #24
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	460b      	mov	r3, r1
 8008464:	607a      	str	r2, [r7, #4]
 8008466:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008468:	2300      	movs	r3, #0
 800846a:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800846c:	7afb      	ldrb	r3, [r7, #11]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d002      	beq.n	8008478 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8008472:	2b01      	cmp	r3, #1
 8008474:	d00a      	beq.n	800848c <VL53L0X_get_vcsel_pulse_period+0x32>
 8008476:	e013      	b.n	80084a0 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008478:	f107 0316 	add.w	r3, r7, #22
 800847c:	461a      	mov	r2, r3
 800847e:	2150      	movs	r1, #80	; 0x50
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7fa fdab 	bl	8002fdc <VL53L0X_RdByte>
 8008486:	4603      	mov	r3, r0
 8008488:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800848a:	e00b      	b.n	80084a4 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800848c:	f107 0316 	add.w	r3, r7, #22
 8008490:	461a      	mov	r2, r3
 8008492:	2170      	movs	r1, #112	; 0x70
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f7fa fda1 	bl	8002fdc <VL53L0X_RdByte>
 800849a:	4603      	mov	r3, r0
 800849c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800849e:	e001      	b.n	80084a4 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80084a0:	23fc      	movs	r3, #252	; 0xfc
 80084a2:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80084a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d107      	bne.n	80084bc <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80084ac:	7dbb      	ldrb	r3, [r7, #22]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fff4 	bl	800749c <VL53L0X_decode_vcsel_period>
 80084b4:	4603      	mov	r3, r0
 80084b6:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	701a      	strb	r2, [r3, #0]

	return Status;
 80084bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3718      	adds	r7, #24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b092      	sub	sp, #72	; 0x48
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084d2:	2300      	movs	r3, #0
 80084d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80084d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80084dc:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80084de:	f240 7376 	movw	r3, #1910	; 0x776
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80084e4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80084e8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80084ea:	f44f 7325 	mov.w	r3, #660	; 0x294
 80084ee:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80084f0:	f240 234e 	movw	r3, #590	; 0x24e
 80084f4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80084f6:	f240 23b2 	movw	r3, #690	; 0x2b2
 80084fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80084fc:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008500:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008502:	f240 2326 	movw	r3, #550	; 0x226
 8008506:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008508:	2300      	movs	r3, #0
 800850a:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800850c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008510:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	429a      	cmp	r2, r3
 800851c:	d205      	bcs.n	800852a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800851e:	23fc      	movs	r3, #252	; 0xfc
 8008520:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8008524:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008528:	e0aa      	b.n	8008680 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800852a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008536:	f107 0314 	add.w	r3, r7, #20
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7fd f943 	bl	80057c8 <VL53L0X_GetSequenceStepEnables>
 8008542:	4603      	mov	r3, r0
 8008544:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8008548:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800854c:	2b00      	cmp	r3, #0
 800854e:	d15b      	bne.n	8008608 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8008550:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8008552:	2b00      	cmp	r3, #0
 8008554:	d105      	bne.n	8008562 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8008556:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8008558:	2b00      	cmp	r3, #0
 800855a:	d102      	bne.n	8008562 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800855c:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800855e:	2b00      	cmp	r3, #0
 8008560:	d052      	beq.n	8008608 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8008562:	f107 0310 	add.w	r3, r7, #16
 8008566:	461a      	mov	r2, r3
 8008568:	2102      	movs	r1, #2
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff fda2 	bl	80080b4 <get_sequence_step_timeout>
 8008570:	4603      	mov	r3, r0
 8008572:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8008576:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800857e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008582:	e07d      	b.n	8008680 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8008584:	7d3b      	ldrb	r3, [r7, #20]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00f      	beq.n	80085aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800858a:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800858c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800858e:	4413      	add	r3, r2
 8008590:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008596:	429a      	cmp	r2, r3
 8008598:	d204      	bcs.n	80085a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800859a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	643b      	str	r3, [r7, #64]	; 0x40
 80085a2:	e002      	b.n	80085aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80085a4:	23fc      	movs	r3, #252	; 0xfc
 80085a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80085aa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 80085b2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80085b6:	e063      	b.n	8008680 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80085b8:	7dbb      	ldrb	r3, [r7, #22]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d011      	beq.n	80085e2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c2:	4413      	add	r3, r2
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80085c8:	69fa      	ldr	r2, [r7, #28]
 80085ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d204      	bcs.n	80085da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80085d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	643b      	str	r3, [r7, #64]	; 0x40
 80085d8:	e016      	b.n	8008608 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80085da:	23fc      	movs	r3, #252	; 0xfc
 80085dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80085e0:	e012      	b.n	8008608 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80085e2:	7d7b      	ldrb	r3, [r7, #21]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00f      	beq.n	8008608 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085ec:	4413      	add	r3, r2
 80085ee:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80085f0:	69fa      	ldr	r2, [r7, #28]
 80085f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d204      	bcs.n	8008602 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80085f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	643b      	str	r3, [r7, #64]	; 0x40
 8008600:	e002      	b.n	8008608 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008602:	23fc      	movs	r3, #252	; 0xfc
 8008604:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008608:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008610:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008614:	e034      	b.n	8008680 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8008616:	7dfb      	ldrb	r3, [r7, #23]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d019      	beq.n	8008650 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800861c:	f107 030c 	add.w	r3, r7, #12
 8008620:	461a      	mov	r2, r3
 8008622:	2103      	movs	r1, #3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7ff fd45 	bl	80080b4 <get_sequence_step_timeout>
 800862a:	4603      	mov	r3, r0
 800862c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008634:	4413      	add	r3, r2
 8008636:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008638:	69fa      	ldr	r2, [r7, #28]
 800863a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800863c:	429a      	cmp	r2, r3
 800863e:	d204      	bcs.n	800864a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8008640:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	643b      	str	r3, [r7, #64]	; 0x40
 8008648:	e002      	b.n	8008650 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800864a:	23fc      	movs	r3, #252	; 0xfc
 800864c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8008650:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008654:	2b00      	cmp	r3, #0
 8008656:	d111      	bne.n	800867c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8008658:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00e      	beq.n	800867c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800865e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8008666:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008668:	2104      	movs	r1, #4
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff fe03 	bl	8008276 <set_sequence_step_timeout>
 8008670:	4603      	mov	r3, r0
 8008672:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800867c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8008680:	4618      	mov	r0, r3
 8008682:	3748      	adds	r7, #72	; 0x48
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b090      	sub	sp, #64	; 0x40
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008692:	2300      	movs	r3, #0
 8008694:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008698:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800869c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800869e:	f240 7376 	movw	r3, #1910	; 0x776
 80086a2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80086a4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80086a8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80086aa:	f44f 7325 	mov.w	r3, #660	; 0x294
 80086ae:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80086b0:	f240 234e 	movw	r3, #590	; 0x24e
 80086b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80086b6:	f240 23b2 	movw	r3, #690	; 0x2b2
 80086ba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80086bc:	f44f 7325 	mov.w	r3, #660	; 0x294
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80086c2:	f240 2326 	movw	r3, #550	; 0x226
 80086c6:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80086cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d0:	441a      	add	r2, r3
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80086d6:	f107 0318 	add.w	r3, r7, #24
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7fd f873 	bl	80057c8 <VL53L0X_GetSequenceStepEnables>
 80086e2:	4603      	mov	r3, r0
 80086e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80086e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80086f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80086f4:	e075      	b.n	80087e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80086f6:	7e3b      	ldrb	r3, [r7, #24]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d105      	bne.n	8008708 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80086fc:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d102      	bne.n	8008708 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8008702:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8008704:	2b00      	cmp	r3, #0
 8008706:	d030      	beq.n	800876a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8008708:	f107 0310 	add.w	r3, r7, #16
 800870c:	461a      	mov	r2, r3
 800870e:	2102      	movs	r1, #2
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7ff fccf 	bl	80080b4 <get_sequence_step_timeout>
 8008716:	4603      	mov	r3, r0
 8008718:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800871c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008720:	2b00      	cmp	r3, #0
 8008722:	d122      	bne.n	800876a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8008724:	7e3b      	ldrb	r3, [r7, #24]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d007      	beq.n	800873a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800872e:	6939      	ldr	r1, [r7, #16]
 8008730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008732:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008734:	441a      	add	r2, r3
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800873a:	7ebb      	ldrb	r3, [r7, #26]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d009      	beq.n	8008754 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8008744:	6939      	ldr	r1, [r7, #16]
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	440b      	add	r3, r1
 800874a:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800874c:	441a      	add	r2, r3
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	e00a      	b.n	800876a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8008754:	7e7b      	ldrb	r3, [r7, #25]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d007      	beq.n	800876a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800875e:	6939      	ldr	r1, [r7, #16]
 8008760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008762:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008764:	441a      	add	r2, r3
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800876a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800876e:	2b00      	cmp	r3, #0
 8008770:	d114      	bne.n	800879c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8008772:	7efb      	ldrb	r3, [r7, #27]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d011      	beq.n	800879c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8008778:	f107 030c 	add.w	r3, r7, #12
 800877c:	461a      	mov	r2, r3
 800877e:	2103      	movs	r1, #3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7ff fc97 	bl	80080b4 <get_sequence_step_timeout>
 8008786:	4603      	mov	r3, r0
 8008788:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8008790:	68f9      	ldr	r1, [r7, #12]
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008796:	441a      	add	r2, r3
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800879c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d114      	bne.n	80087ce <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80087a4:	7f3b      	ldrb	r3, [r7, #28]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d011      	beq.n	80087ce <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80087aa:	f107 0314 	add.w	r3, r7, #20
 80087ae:	461a      	mov	r2, r3
 80087b0:	2104      	movs	r1, #4
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7ff fc7e 	bl	80080b4 <get_sequence_step_timeout>
 80087b8:	4603      	mov	r3, r0
 80087ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80087c2:	6979      	ldr	r1, [r7, #20]
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80087c8:	441a      	add	r2, r3
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80087ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d103      	bne.n	80087de <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80087de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3740      	adds	r7, #64	; 0x40
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087f6:	2300      	movs	r3, #0
 80087f8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80087fe:	e0c6      	b.n	800898e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	4413      	add	r3, r2
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	74fb      	strb	r3, [r7, #19]
		Index++;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	3301      	adds	r3, #1
 800880e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8008810:	7cfb      	ldrb	r3, [r7, #19]
 8008812:	2bff      	cmp	r3, #255	; 0xff
 8008814:	f040 808d 	bne.w	8008932 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	4413      	add	r3, r2
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	747b      	strb	r3, [r7, #17]
			Index++;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	3301      	adds	r3, #1
 8008826:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8008828:	7c7b      	ldrb	r3, [r7, #17]
 800882a:	2b03      	cmp	r3, #3
 800882c:	d87e      	bhi.n	800892c <VL53L0X_load_tuning_settings+0x140>
 800882e:	a201      	add	r2, pc, #4	; (adr r2, 8008834 <VL53L0X_load_tuning_settings+0x48>)
 8008830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008834:	08008845 	.word	0x08008845
 8008838:	0800887f 	.word	0x0800887f
 800883c:	080088b9 	.word	0x080088b9
 8008840:	080088f3 	.word	0x080088f3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	4413      	add	r3, r2
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	743b      	strb	r3, [r7, #16]
				Index++;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	3301      	adds	r3, #1
 8008852:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	4413      	add	r3, r2
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	3301      	adds	r3, #1
 8008862:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008864:	7c3b      	ldrb	r3, [r7, #16]
 8008866:	b29b      	uxth	r3, r3
 8008868:	021b      	lsls	r3, r3, #8
 800886a:	b29a      	uxth	r2, r3
 800886c:	7bfb      	ldrb	r3, [r7, #15]
 800886e:	b29b      	uxth	r3, r3
 8008870:	4413      	add	r3, r2
 8008872:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	89ba      	ldrh	r2, [r7, #12]
 8008878:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800887c:	e087      	b.n	800898e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	4413      	add	r3, r2
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	743b      	strb	r3, [r7, #16]
				Index++;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	3301      	adds	r3, #1
 800888c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	4413      	add	r3, r2
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	3301      	adds	r3, #1
 800889c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800889e:	7c3b      	ldrb	r3, [r7, #16]
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	021b      	lsls	r3, r3, #8
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	4413      	add	r3, r2
 80088ac:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	89ba      	ldrh	r2, [r7, #12]
 80088b2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 80088b6:	e06a      	b.n	800898e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	4413      	add	r3, r2
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	743b      	strb	r3, [r7, #16]
				Index++;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	3301      	adds	r3, #1
 80088c6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	4413      	add	r3, r2
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	73fb      	strb	r3, [r7, #15]
				Index++;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	3301      	adds	r3, #1
 80088d6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80088d8:	7c3b      	ldrb	r3, [r7, #16]
 80088da:	b29b      	uxth	r3, r3
 80088dc:	021b      	lsls	r3, r3, #8
 80088de:	b29a      	uxth	r2, r3
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	4413      	add	r3, r2
 80088e6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	89ba      	ldrh	r2, [r7, #12]
 80088ec:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80088f0:	e04d      	b.n	800898e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	4413      	add	r3, r2
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	743b      	strb	r3, [r7, #16]
				Index++;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	3301      	adds	r3, #1
 8008900:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	4413      	add	r3, r2
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	3301      	adds	r3, #1
 8008910:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008912:	7c3b      	ldrb	r3, [r7, #16]
 8008914:	b29b      	uxth	r3, r3
 8008916:	021b      	lsls	r3, r3, #8
 8008918:	b29a      	uxth	r2, r3
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	b29b      	uxth	r3, r3
 800891e:	4413      	add	r3, r2
 8008920:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	89ba      	ldrh	r2, [r7, #12]
 8008926:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800892a:	e030      	b.n	800898e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800892c:	23fc      	movs	r3, #252	; 0xfc
 800892e:	77fb      	strb	r3, [r7, #31]
 8008930:	e02d      	b.n	800898e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8008932:	7cfb      	ldrb	r3, [r7, #19]
 8008934:	2b04      	cmp	r3, #4
 8008936:	d828      	bhi.n	800898a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	683a      	ldr	r2, [r7, #0]
 800893c:	4413      	add	r3, r2
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	74bb      	strb	r3, [r7, #18]
			Index++;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	3301      	adds	r3, #1
 8008946:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8008948:	2300      	movs	r3, #0
 800894a:	61bb      	str	r3, [r7, #24]
 800894c:	e00f      	b.n	800896e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	4413      	add	r3, r2
 8008954:	7819      	ldrb	r1, [r3, #0]
 8008956:	f107 0208 	add.w	r2, r7, #8
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	4413      	add	r3, r2
 800895e:	460a      	mov	r2, r1
 8008960:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	3301      	adds	r3, #1
 8008966:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	3301      	adds	r3, #1
 800896c:	61bb      	str	r3, [r7, #24]
 800896e:	7cfb      	ldrb	r3, [r7, #19]
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	429a      	cmp	r2, r3
 8008974:	dbeb      	blt.n	800894e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8008976:	7cfb      	ldrb	r3, [r7, #19]
 8008978:	f107 0208 	add.w	r2, r7, #8
 800897c:	7cb9      	ldrb	r1, [r7, #18]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7fa fa1c 	bl	8002dbc <VL53L0X_WriteMulti>
 8008984:	4603      	mov	r3, r0
 8008986:	77fb      	strb	r3, [r7, #31]
 8008988:	e001      	b.n	800898e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800898a:	23fc      	movs	r3, #252	; 0xfc
 800898c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	683a      	ldr	r2, [r7, #0]
 8008992:	4413      	add	r3, r2
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d004      	beq.n	80089a4 <VL53L0X_load_tuning_settings+0x1b8>
 800899a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f43f af2e 	beq.w	8008800 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80089a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3720      	adds	r7, #32
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b088      	sub	sp, #32
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089bc:	2300      	movs	r3, #0
 80089be:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80089c6:	f107 0313 	add.w	r3, r7, #19
 80089ca:	4619      	mov	r1, r3
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f7fc ffbb 	bl	8005948 <VL53L0X_GetXTalkCompensationEnable>
 80089d2:	4603      	mov	r3, r0
 80089d4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80089d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d111      	bne.n	8008a02 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80089de:	7cfb      	ldrb	r3, [r7, #19]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00e      	beq.n	8008a02 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	8a9b      	ldrh	r3, [r3, #20]
 80089ee:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	fb02 f303 	mul.w	r3, r2, r3
 80089f6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	3380      	adds	r3, #128	; 0x80
 80089fc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8008a02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3720      	adds	r7, #32
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b086      	sub	sp, #24
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	60f8      	str	r0, [r7, #12]
 8008a16:	60b9      	str	r1, [r7, #8]
 8008a18:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8008a26:	f107 0310 	add.w	r3, r7, #16
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	68b9      	ldr	r1, [r7, #8]
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f7ff ffbe 	bl	80089b0 <VL53L0X_get_total_xtalk_rate>
 8008a34:	4603      	mov	r3, r0
 8008a36:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8008a38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d105      	bne.n	8008a4c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	441a      	add	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	601a      	str	r2, [r3, #0]

	return Status;
 8008a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b09a      	sub	sp, #104	; 0x68
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8008a66:	2312      	movs	r3, #18
 8008a68:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8008a6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a6e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8008a70:	2342      	movs	r3, #66	; 0x42
 8008a72:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8008a74:	2306      	movs	r3, #6
 8008a76:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8008a78:	2307      	movs	r3, #7
 8008a7a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8008a88:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8008a90:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8008a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a96:	fb02 f303 	mul.w	r3, r2, r3
 8008a9a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9e:	3380      	adds	r3, #128	; 0x80
 8008aa0:	0a1b      	lsrs	r3, r3, #8
 8008aa2:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8008aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008aa8:	fb02 f303 	mul.w	r3, r2, r3
 8008aac:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d01a      	beq.n	8008aee <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	029b      	lsls	r3, r3, #10
 8008abc:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8008ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ac4:	4413      	add	r3, r2
 8008ac6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008ac8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8008ad2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	4413      	add	r3, r2
 8008ada:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ade:	fb03 f303 	mul.w	r3, r3, r3
 8008ae2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8008ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ae6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008aea:	0c1b      	lsrs	r3, r3, #16
 8008aec:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008af2:	fb02 f303 	mul.w	r3, r2, r3
 8008af6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008afe:	0c1b      	lsrs	r3, r3, #16
 8008b00:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8008b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b04:	fb03 f303 	mul.w	r3, r3, r3
 8008b08:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8008b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b0c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008b10:	0c1b      	lsrs	r3, r3, #16
 8008b12:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8008b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b16:	085a      	lsrs	r2, r3, #1
 8008b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1a:	441a      	add	r2, r3
 8008b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b22:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b28:	fb02 f303 	mul.w	r3, r2, r3
 8008b2c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8008b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b34:	d302      	bcc.n	8008b3c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8008b36:	4b54      	ldr	r3, [pc, #336]	; (8008c88 <VL53L0X_calc_dmax+0x230>)
 8008b38:	663b      	str	r3, [r7, #96]	; 0x60
 8008b3a:	e015      	b.n	8008b68 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8008b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b3e:	085a      	lsrs	r2, r3, #1
 8008b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b42:	441a      	add	r2, r3
 8008b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8008b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b50:	fb02 f303 	mul.w	r3, r2, r3
 8008b54:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8008b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008b5c:	0c1b      	lsrs	r3, r3, #16
 8008b5e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8008b60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b62:	fb03 f303 	mul.w	r3, r3, r3
 8008b66:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8008b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b6a:	039b      	lsls	r3, r3, #14
 8008b6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008b70:	4a46      	ldr	r2, [pc, #280]	; (8008c8c <VL53L0X_calc_dmax+0x234>)
 8008b72:	fba2 2303 	umull	r2, r3, r2, r3
 8008b76:	099b      	lsrs	r3, r3, #6
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	fb03 f303 	mul.w	r3, r3, r3
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8008b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b84:	fb03 f303 	mul.w	r3, r3, r3
 8008b88:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	3308      	adds	r3, #8
 8008b8e:	091b      	lsrs	r3, r3, #4
 8008b90:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8008b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8008b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	4413      	add	r3, r2
 8008ba2:	011b      	lsls	r3, r3, #4
 8008ba4:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008bac:	0b9b      	lsrs	r3, r3, #14
 8008bae:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bb4:	4413      	add	r3, r2
 8008bb6:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bba:	085b      	lsrs	r3, r3, #1
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8008bc2:	69ba      	ldr	r2, [r7, #24]
 8008bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bca:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	039b      	lsls	r3, r3, #14
 8008bd0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	085b      	lsrs	r3, r3, #1
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	4413      	add	r3, r2
 8008bda:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008bea:	fb02 f303 	mul.w	r3, r2, r3
 8008bee:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008bf6:	4a25      	ldr	r2, [pc, #148]	; (8008c8c <VL53L0X_calc_dmax+0x234>)
 8008bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bfc:	099b      	lsrs	r3, r3, #6
 8008bfe:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	011b      	lsls	r3, r3, #4
 8008c04:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008c0c:	4a1f      	ldr	r2, [pc, #124]	; (8008c8c <VL53L0X_calc_dmax+0x234>)
 8008c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c12:	099b      	lsrs	r3, r3, #6
 8008c14:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8008c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c18:	3380      	adds	r3, #128	; 0x80
 8008c1a:	0a1b      	lsrs	r3, r3, #8
 8008c1c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d008      	beq.n	8008c36 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	085a      	lsrs	r2, r3, #1
 8008c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c2a:	441a      	add	r2, r3
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c32:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c34:	e001      	b.n	8008c3a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8008c36:	2300      	movs	r3, #0
 8008c38:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8008c3a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008c3c:	f7fe fc41 	bl	80074c2 <VL53L0X_isqrt>
 8008c40:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d008      	beq.n	8008c5a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	085a      	lsrs	r2, r3, #1
 8008c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4e:	441a      	add	r2, r3
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c58:	e001      	b.n	8008c5e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8008c5e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008c60:	f7fe fc2f 	bl	80074c2 <VL53L0X_isqrt>
 8008c64:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8008c66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d902      	bls.n	8008c7a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8008c74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c78:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8008c7a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3768      	adds	r7, #104	; 0x68
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	fff00000 	.word	0xfff00000
 8008c8c:	10624dd3 	.word	0x10624dd3

08008c90 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b0b4      	sub	sp, #208	; 0xd0
 8008c94:	af04      	add	r7, sp, #16
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8008c9e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008ca2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8008ca6:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008caa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8008cae:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8008cb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8008cb6:	f241 235c 	movw	r3, #4700	; 0x125c
 8008cba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8008cbe:	4b9e      	ldr	r3, [pc, #632]	; (8008f38 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008cc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8008cc4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008cc8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8008cca:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8008cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008cd8:	4b98      	ldr	r3, [pc, #608]	; (8008f3c <VL53L0X_calc_sigma_estimate+0x2ac>)
 8008cda:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8008cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ce0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8008ce2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8008ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8008ce8:	f240 6377 	movw	r3, #1655	; 0x677
 8008cec:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6a1b      	ldr	r3, [r3, #32]
 8008cf8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d02:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8008d06:	0c1b      	lsrs	r3, r3, #16
 8008d08:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8008d10:	f107 0310 	add.w	r3, r7, #16
 8008d14:	461a      	mov	r2, r3
 8008d16:	68b9      	ldr	r1, [r7, #8]
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f7ff fe78 	bl	8008a0e <VL53L0X_get_total_signal_rate>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8008d24:	f107 0314 	add.w	r3, r7, #20
 8008d28:	461a      	mov	r2, r3
 8008d2a:	68b9      	ldr	r1, [r7, #8]
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f7ff fe3f 	bl	80089b0 <VL53L0X_get_total_xtalk_rate>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d3e:	fb02 f303 	mul.w	r3, r2, r3
 8008d42:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8008d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d46:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008d4a:	0c1b      	lsrs	r3, r3, #16
 8008d4c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d54:	fb02 f303 	mul.w	r3, r2, r3
 8008d58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8008d5c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d902      	bls.n	8008d6c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8008d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008d6c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d168      	bne.n	8008e46 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008d7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8008d84:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008d88:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7ff f93a 	bl	800800c <VL53L0X_calc_timeout_mclks>
 8008d98:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8008daa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008dae:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008db2:	461a      	mov	r2, r3
 8008db4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f7ff f927 	bl	800800c <VL53L0X_calc_timeout_mclks>
 8008dbe:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8008dc6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	d102      	bne.n	8008dd4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8008dce:	2302      	movs	r3, #2
 8008dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8008dd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dd8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008dda:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008dde:	fb02 f303 	mul.w	r3, r2, r3
 8008de2:	02db      	lsls	r3, r3, #11
 8008de4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008dec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008df0:	4a53      	ldr	r2, [pc, #332]	; (8008f40 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008df2:	fba2 2303 	umull	r2, r3, r2, r3
 8008df6:	099b      	lsrs	r3, r3, #6
 8008df8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8008dfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e02:	fb02 f303 	mul.w	r3, r2, r3
 8008e06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008e0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e0e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008e12:	4a4b      	ldr	r2, [pc, #300]	; (8008f40 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008e14:	fba2 2303 	umull	r2, r3, r2, r3
 8008e18:	099b      	lsrs	r3, r3, #6
 8008e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	3380      	adds	r3, #128	; 0x80
 8008e22:	0a1b      	lsrs	r3, r3, #8
 8008e24:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e2c:	fb02 f303 	mul.w	r3, r2, r3
 8008e30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8008e34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e38:	3380      	adds	r3, #128	; 0x80
 8008e3a:	0a1b      	lsrs	r3, r3, #8
 8008e3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	021b      	lsls	r3, r3, #8
 8008e44:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008e46:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8008e4e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008e52:	e15e      	b.n	8009112 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8008e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10c      	bne.n	8008e74 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008e60:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008e68:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	e14c      	b.n	800910e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8008e74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d102      	bne.n	8008e82 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8008e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e86:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8008e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e8a:	041a      	lsls	r2, r3, #16
 8008e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8008e96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d902      	bls.n	8008ea6 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8008ea6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008eaa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008eae:	fb02 f303 	mul.w	r3, r2, r3
 8008eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8008eb6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008eba:	4613      	mov	r3, r2
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe fafd 	bl	80074c2 <VL53L0X_isqrt>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	005b      	lsls	r3, r3, #1
 8008ecc:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	891b      	ldrh	r3, [r3, #8]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ed6:	fb02 f303 	mul.w	r3, r2, r3
 8008eda:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ede:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008ee0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ee4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008ee6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008ee8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008eec:	4a14      	ldr	r2, [pc, #80]	; (8008f40 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008eee:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef2:	099b      	lsrs	r3, r3, #6
 8008ef4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8008ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ef8:	041b      	lsls	r3, r3, #16
 8008efa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008efe:	4a10      	ldr	r2, [pc, #64]	; (8008f40 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008f00:	fba2 2303 	umull	r2, r3, r2, r3
 8008f04:	099b      	lsrs	r3, r3, #6
 8008f06:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8008f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f0a:	021b      	lsls	r3, r3, #8
 8008f0c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8008f0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	bfb8      	it	lt
 8008f1a:	425b      	neglt	r3, r3
 8008f1c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8008f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f20:	021b      	lsls	r3, r3, #8
 8008f22:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	7e1b      	ldrb	r3, [r3, #24]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8008f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f34:	e033      	b.n	8008f9e <VL53L0X_calc_sigma_estimate+0x30e>
 8008f36:	bf00      	nop
 8008f38:	028f87ae 	.word	0x028f87ae
 8008f3c:	0006999a 	.word	0x0006999a
 8008f40:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8008f44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8008f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f54:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8008f58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f5c:	fb02 f303 	mul.w	r3, r2, r3
 8008f60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8008f64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f6a:	4413      	add	r3, r2
 8008f6c:	0c1b      	lsrs	r3, r3, #16
 8008f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8008f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f76:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8008f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f82:	085b      	lsrs	r3, r3, #1
 8008f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8008f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f8c:	fb03 f303 	mul.w	r3, r3, r3
 8008f90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8008f94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f98:	0b9b      	lsrs	r3, r3, #14
 8008f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fa4:	fb02 f303 	mul.w	r3, r2, r3
 8008fa8:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008fb0:	0c1b      	lsrs	r3, r3, #16
 8008fb2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	fb03 f303 	mul.w	r3, r3, r3
 8008fba:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8008fbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008fc0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8008fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008fc8:	0c1b      	lsrs	r3, r3, #16
 8008fca:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8008fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fce:	fb03 f303 	mul.w	r3, r3, r3
 8008fd2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8008fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	4413      	add	r3, r2
 8008fda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8008fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fde:	f7fe fa70 	bl	80074c2 <VL53L0X_isqrt>
 8008fe2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	041b      	lsls	r3, r3, #16
 8008fe8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	3332      	adds	r3, #50	; 0x32
 8008fee:	4a4b      	ldr	r2, [pc, #300]	; (800911c <VL53L0X_calc_sigma_estimate+0x48c>)
 8008ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff4:	095a      	lsrs	r2, r3, #5
 8008ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8009000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009004:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8009008:	fb02 f303 	mul.w	r3, r2, r3
 800900c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8009010:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009014:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009018:	3308      	adds	r3, #8
 800901a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800901e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009022:	4a3f      	ldr	r2, [pc, #252]	; (8009120 <VL53L0X_calc_sigma_estimate+0x490>)
 8009024:	fba2 2303 	umull	r2, r3, r2, r3
 8009028:	0b5b      	lsrs	r3, r3, #13
 800902a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800902e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009032:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009034:	429a      	cmp	r2, r3
 8009036:	d902      	bls.n	800903e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8009038:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800903a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800903e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009042:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009046:	4413      	add	r3, r2
 8009048:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800904c:	4a35      	ldr	r2, [pc, #212]	; (8009124 <VL53L0X_calc_sigma_estimate+0x494>)
 800904e:	fba2 2303 	umull	r2, r3, r2, r3
 8009052:	099b      	lsrs	r3, r3, #6
 8009054:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800905a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800905e:	441a      	add	r2, r3
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	fbb2 f3f3 	udiv	r3, r2, r3
 8009066:	4618      	mov	r0, r3
 8009068:	f7fe fa2b 	bl	80074c2 <VL53L0X_isqrt>
 800906c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	021b      	lsls	r3, r3, #8
 8009072:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800907a:	4a2a      	ldr	r2, [pc, #168]	; (8009124 <VL53L0X_calc_sigma_estimate+0x494>)
 800907c:	fba2 2303 	umull	r2, r3, r2, r3
 8009080:	099b      	lsrs	r3, r3, #6
 8009082:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8009084:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009088:	fb03 f303 	mul.w	r3, r3, r3
 800908c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	fb03 f303 	mul.w	r3, r3, r3
 8009094:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8009096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909a:	4413      	add	r3, r2
 800909c:	4618      	mov	r0, r3
 800909e:	f7fe fa10 	bl	80074c2 <VL53L0X_isqrt>
 80090a2:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090aa:	fb02 f303 	mul.w	r3, r2, r3
 80090ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80090b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d009      	beq.n	80090cc <VL53L0X_calc_sigma_estimate+0x43c>
 80090b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d005      	beq.n	80090cc <VL53L0X_calc_sigma_estimate+0x43c>
 80090c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80090c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d903      	bls.n	80090d4 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80090cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80090d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80090da:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80090e6:	6939      	ldr	r1, [r7, #16]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	9303      	str	r3, [sp, #12]
 80090ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80090f0:	9302      	str	r3, [sp, #8]
 80090f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80090f6:	9301      	str	r3, [sp, #4]
 80090f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009100:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f7ff fca8 	bl	8008a58 <VL53L0X_calc_dmax>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800910e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8009112:	4618      	mov	r0, r3
 8009114:	37c0      	adds	r7, #192	; 0xc0
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	51eb851f 	.word	0x51eb851f
 8009120:	d1b71759 	.word	0xd1b71759
 8009124:	10624dd3 	.word	0x10624dd3

08009128 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b090      	sub	sp, #64	; 0x40
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	607a      	str	r2, [r7, #4]
 8009132:	461a      	mov	r2, r3
 8009134:	460b      	mov	r3, r1
 8009136:	72fb      	strb	r3, [r7, #11]
 8009138:	4613      	mov	r3, r2
 800913a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800913c:	2300      	movs	r3, #0
 800913e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8009148:	2300      	movs	r3, #0
 800914a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8009154:	2300      	movs	r3, #0
 8009156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800915a:	2300      	movs	r3, #0
 800915c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800917a:	7afb      	ldrb	r3, [r7, #11]
 800917c:	10db      	asrs	r3, r3, #3
 800917e:	b2db      	uxtb	r3, r3
 8009180:	f003 030f 	and.w	r3, r3, #15
 8009184:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009188:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800918c:	2b00      	cmp	r3, #0
 800918e:	d017      	beq.n	80091c0 <VL53L0X_get_pal_range_status+0x98>
 8009190:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009194:	2b05      	cmp	r3, #5
 8009196:	d013      	beq.n	80091c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8009198:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800919c:	2b07      	cmp	r3, #7
 800919e:	d00f      	beq.n	80091c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 80091a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80091a4:	2b0c      	cmp	r3, #12
 80091a6:	d00b      	beq.n	80091c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 80091a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80091ac:	2b0d      	cmp	r3, #13
 80091ae:	d007      	beq.n	80091c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 80091b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80091b4:	2b0e      	cmp	r3, #14
 80091b6:	d003      	beq.n	80091c0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80091b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80091bc:	2b0f      	cmp	r3, #15
 80091be:	d103      	bne.n	80091c8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80091c0:	2301      	movs	r3, #1
 80091c2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80091c6:	e002      	b.n	80091ce <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80091c8:	2300      	movs	r3, #0
 80091ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80091ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d109      	bne.n	80091ea <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80091d6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80091da:	461a      	mov	r2, r3
 80091dc:	2100      	movs	r1, #0
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f7fc fc86 	bl	8005af0 <VL53L0X_GetLimitCheckEnable>
 80091e4:	4603      	mov	r3, r0
 80091e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80091ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d02e      	beq.n	8009250 <VL53L0X_get_pal_range_status+0x128>
 80091f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d12a      	bne.n	8009250 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80091fa:	f107 0310 	add.w	r3, r7, #16
 80091fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009202:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f7ff fd43 	bl	8008c90 <VL53L0X_calc_sigma_estimate>
 800920a:	4603      	mov	r3, r0
 800920c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8009210:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009214:	2b00      	cmp	r3, #0
 8009216:	d103      	bne.n	8009220 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	b29a      	uxth	r2, r3
 800921c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800921e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8009220:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009224:	2b00      	cmp	r3, #0
 8009226:	d113      	bne.n	8009250 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8009228:	f107 0320 	add.w	r3, r7, #32
 800922c:	461a      	mov	r2, r3
 800922e:	2100      	movs	r1, #0
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f7fc fce3 	bl	8005bfc <VL53L0X_GetLimitCheckValue>
 8009236:	4603      	mov	r3, r0
 8009238:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d006      	beq.n	8009250 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8009242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009244:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8009246:	429a      	cmp	r2, r3
 8009248:	d902      	bls.n	8009250 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800924a:	2301      	movs	r3, #1
 800924c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009250:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009254:	2b00      	cmp	r3, #0
 8009256:	d109      	bne.n	800926c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009258:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800925c:	461a      	mov	r2, r3
 800925e:	2102      	movs	r1, #2
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f7fc fc45 	bl	8005af0 <VL53L0X_GetLimitCheckEnable>
 8009266:	4603      	mov	r3, r0
 8009268:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800926c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009270:	2b00      	cmp	r3, #0
 8009272:	d044      	beq.n	80092fe <VL53L0X_get_pal_range_status+0x1d6>
 8009274:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009278:	2b00      	cmp	r3, #0
 800927a:	d140      	bne.n	80092fe <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800927c:	f107 031c 	add.w	r3, r7, #28
 8009280:	461a      	mov	r2, r3
 8009282:	2102      	movs	r1, #2
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f7fc fcb9 	bl	8005bfc <VL53L0X_GetLimitCheckValue>
 800928a:	4603      	mov	r3, r0
 800928c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8009290:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009294:	2b00      	cmp	r3, #0
 8009296:	d107      	bne.n	80092a8 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009298:	2201      	movs	r2, #1
 800929a:	21ff      	movs	r1, #255	; 0xff
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f7f9 fde9 	bl	8002e74 <VL53L0X_WrByte>
 80092a2:	4603      	mov	r3, r0
 80092a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 80092a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d109      	bne.n	80092c4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 80092b0:	f107 0316 	add.w	r3, r7, #22
 80092b4:	461a      	mov	r2, r3
 80092b6:	21b6      	movs	r1, #182	; 0xb6
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f7f9 feb9 	bl	8003030 <VL53L0X_RdWord>
 80092be:	4603      	mov	r3, r0
 80092c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80092c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d107      	bne.n	80092dc <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80092cc:	2200      	movs	r2, #0
 80092ce:	21ff      	movs	r1, #255	; 0xff
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f7f9 fdcf 	bl	8002e74 <VL53L0X_WrByte>
 80092d6:	4603      	mov	r3, r0
 80092d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80092dc:	8afb      	ldrh	r3, [r7, #22]
 80092de:	025b      	lsls	r3, r3, #9
 80092e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d006      	beq.n	80092fe <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80092f0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80092f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d902      	bls.n	80092fe <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80092f8:	2301      	movs	r3, #1
 80092fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80092fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009302:	2b00      	cmp	r3, #0
 8009304:	d109      	bne.n	800931a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800930a:	461a      	mov	r2, r3
 800930c:	2103      	movs	r1, #3
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f7fc fbee 	bl	8005af0 <VL53L0X_GetLimitCheckEnable>
 8009314:	4603      	mov	r3, r0
 8009316:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800931a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800931e:	2b00      	cmp	r3, #0
 8009320:	d023      	beq.n	800936a <VL53L0X_get_pal_range_status+0x242>
 8009322:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009326:	2b00      	cmp	r3, #0
 8009328:	d11f      	bne.n	800936a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800932a:	893b      	ldrh	r3, [r7, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d102      	bne.n	8009336 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8009330:	2300      	movs	r3, #0
 8009332:	637b      	str	r3, [r7, #52]	; 0x34
 8009334:	e005      	b.n	8009342 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	021a      	lsls	r2, r3, #8
 800933a:	893b      	ldrh	r3, [r7, #8]
 800933c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009340:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009342:	f107 0318 	add.w	r3, r7, #24
 8009346:	461a      	mov	r2, r3
 8009348:	2103      	movs	r1, #3
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f7fc fc56 	bl	8005bfc <VL53L0X_GetLimitCheckValue>
 8009350:	4603      	mov	r3, r0
 8009352:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d006      	beq.n	800936a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800935c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800935e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009360:	429a      	cmp	r2, r3
 8009362:	d202      	bcs.n	800936a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8009364:	2301      	movs	r3, #1
 8009366:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800936a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800936e:	2b00      	cmp	r3, #0
 8009370:	d14a      	bne.n	8009408 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8009372:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009376:	2b01      	cmp	r3, #1
 8009378:	d103      	bne.n	8009382 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800937a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800937c:	22ff      	movs	r2, #255	; 0xff
 800937e:	701a      	strb	r2, [r3, #0]
 8009380:	e042      	b.n	8009408 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8009382:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009386:	2b01      	cmp	r3, #1
 8009388:	d007      	beq.n	800939a <VL53L0X_get_pal_range_status+0x272>
 800938a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800938e:	2b02      	cmp	r3, #2
 8009390:	d003      	beq.n	800939a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8009392:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009396:	2b03      	cmp	r3, #3
 8009398:	d103      	bne.n	80093a2 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800939a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800939c:	2205      	movs	r2, #5
 800939e:	701a      	strb	r2, [r3, #0]
 80093a0:	e032      	b.n	8009408 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 80093a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093a6:	2b06      	cmp	r3, #6
 80093a8:	d003      	beq.n	80093b2 <VL53L0X_get_pal_range_status+0x28a>
 80093aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093ae:	2b09      	cmp	r3, #9
 80093b0:	d103      	bne.n	80093ba <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80093b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b4:	2204      	movs	r2, #4
 80093b6:	701a      	strb	r2, [r3, #0]
 80093b8:	e026      	b.n	8009408 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80093ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093be:	2b08      	cmp	r3, #8
 80093c0:	d007      	beq.n	80093d2 <VL53L0X_get_pal_range_status+0x2aa>
 80093c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093c6:	2b0a      	cmp	r3, #10
 80093c8:	d003      	beq.n	80093d2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80093ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d103      	bne.n	80093da <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80093d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093d4:	2203      	movs	r2, #3
 80093d6:	701a      	strb	r2, [r3, #0]
 80093d8:	e016      	b.n	8009408 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80093da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d003      	beq.n	80093ea <VL53L0X_get_pal_range_status+0x2c2>
 80093e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d103      	bne.n	80093f2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80093ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ec:	2202      	movs	r2, #2
 80093ee:	701a      	strb	r2, [r3, #0]
 80093f0:	e00a      	b.n	8009408 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80093f2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d103      	bne.n	8009402 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80093fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093fc:	2201      	movs	r2, #1
 80093fe:	701a      	strb	r2, [r3, #0]
 8009400:	e002      	b.n	8009408 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8009402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009404:	2200      	movs	r2, #0
 8009406:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8009408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d102      	bne.n	8009416 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8009410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009412:	2200      	movs	r2, #0
 8009414:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009416:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800941a:	461a      	mov	r2, r3
 800941c:	2101      	movs	r1, #1
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f7fc fb66 	bl	8005af0 <VL53L0X_GetLimitCheckEnable>
 8009424:	4603      	mov	r3, r0
 8009426:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800942a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800942e:	2b00      	cmp	r3, #0
 8009430:	d14f      	bne.n	80094d2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8009432:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009436:	2b00      	cmp	r3, #0
 8009438:	d003      	beq.n	8009442 <VL53L0X_get_pal_range_status+0x31a>
 800943a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800943e:	2b01      	cmp	r3, #1
 8009440:	d103      	bne.n	800944a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8009442:	2301      	movs	r3, #1
 8009444:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009448:	e002      	b.n	8009450 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009456:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800945a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800945e:	2b04      	cmp	r3, #4
 8009460:	d003      	beq.n	800946a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8009462:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8009466:	2b00      	cmp	r3, #0
 8009468:	d103      	bne.n	8009472 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800946a:	2301      	movs	r3, #1
 800946c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009470:	e002      	b.n	8009478 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800947e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8009482:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <VL53L0X_get_pal_range_status+0x36a>
 800948a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800948e:	2b01      	cmp	r3, #1
 8009490:	d103      	bne.n	800949a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8009492:	2301      	movs	r3, #1
 8009494:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009498:	e002      	b.n	80094a0 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800949a:	2300      	movs	r3, #0
 800949c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80094a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80094aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <VL53L0X_get_pal_range_status+0x392>
 80094b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d103      	bne.n	80094c2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80094ba:	2301      	movs	r3, #1
 80094bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094c0:	e002      	b.n	80094c8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80094c2:	2300      	movs	r3, #0
 80094c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80094ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80094d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3740      	adds	r7, #64	; 0x40
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 80094de:	b480      	push	{r7}
 80094e0:	af00      	add	r7, sp, #0
  while (1);
 80094e2:	e7fe      	b.n	80094e2 <BSP_ErrorHandler+0x4>

080094e4 <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b088      	sub	sp, #32
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	4603      	mov	r3, r0
 80094ec:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  if (Led == LED2)
 80094ee:	79fb      	ldrb	r3, [r7, #7]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d124      	bne.n	800953e <BSP_LED_Init+0x5a>
  {
    /* Enable the GPIO_LED clock */
    LED2_GPIO_CLK_ENABLE();
 80094f4:	4b1f      	ldr	r3, [pc, #124]	; (8009574 <BSP_LED_Init+0x90>)
 80094f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094f8:	4a1e      	ldr	r2, [pc, #120]	; (8009574 <BSP_LED_Init+0x90>)
 80094fa:	f043 0302 	orr.w	r3, r3, #2
 80094fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009500:	4b1c      	ldr	r3, [pc, #112]	; (8009574 <BSP_LED_Init+0x90>)
 8009502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009504:	f003 0302 	and.w	r3, r3, #2
 8009508:	60bb      	str	r3, [r7, #8]
 800950a:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.Pin = LED_PIN[Led];
 800950c:	79fb      	ldrb	r3, [r7, #7]
 800950e:	4a1a      	ldr	r2, [pc, #104]	; (8009578 <BSP_LED_Init+0x94>)
 8009510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009514:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8009516:	2301      	movs	r3, #1
 8009518:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 800951a:	2300      	movs	r3, #0
 800951c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800951e:	2303      	movs	r3, #3
 8009520:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 8009522:	f107 030c 	add.w	r3, r7, #12
 8009526:	4619      	mov	r1, r3
 8009528:	4814      	ldr	r0, [pc, #80]	; (800957c <BSP_LED_Init+0x98>)
 800952a:	f003 f9ab 	bl	800c884 <HAL_GPIO_Init>
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, GPIO_InitStructure.Pin, GPIO_PIN_SET);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	b29b      	uxth	r3, r3
 8009532:	2201      	movs	r2, #1
 8009534:	4619      	mov	r1, r3
 8009536:	4811      	ldr	r0, [pc, #68]	; (800957c <BSP_LED_Init+0x98>)
 8009538:	f003 fc28 	bl	800cd8c <HAL_GPIO_WritePin>

    /* By default, turn off LED */
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }

}
 800953c:	e016      	b.n	800956c <BSP_LED_Init+0x88>
    if (BSP_IO_Init() == IO_ERROR)
 800953e:	f000 fda3 	bl	800a088 <BSP_IO_Init>
 8009542:	4603      	mov	r3, r0
 8009544:	2b01      	cmp	r3, #1
 8009546:	d101      	bne.n	800954c <BSP_LED_Init+0x68>
      BSP_ErrorHandler();
 8009548:	f7ff ffc9 	bl	80094de <BSP_ErrorHandler>
    BSP_IO_ConfigPin(LED_PIN[Led], IO_MODE_OUTPUT);
 800954c:	79fb      	ldrb	r3, [r7, #7]
 800954e:	4a0a      	ldr	r2, [pc, #40]	; (8009578 <BSP_LED_Init+0x94>)
 8009550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009554:	2101      	movs	r1, #1
 8009556:	4618      	mov	r0, r3
 8009558:	f000 fdda 	bl	800a110 <BSP_IO_ConfigPin>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 800955c:	79fb      	ldrb	r3, [r7, #7]
 800955e:	4a06      	ldr	r2, [pc, #24]	; (8009578 <BSP_LED_Init+0x94>)
 8009560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009564:	2101      	movs	r1, #1
 8009566:	4618      	mov	r0, r3
 8009568:	f000 fdee 	bl	800a148 <BSP_IO_WritePin>
}
 800956c:	bf00      	nop
 800956e:	3720      	adds	r7, #32
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	40021000 	.word	0x40021000
 8009578:	08019f94 	.word	0x08019f94
 800957c:	48000400 	.word	0x48000400

08009580 <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	4603      	mov	r3, r0
 8009588:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 800958a:	79fb      	ldrb	r3, [r7, #7]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d109      	bne.n	80095a4 <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	4a0a      	ldr	r2, [pc, #40]	; (80095bc <BSP_LED_On+0x3c>)
 8009594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009598:	2200      	movs	r2, #0
 800959a:	4619      	mov	r1, r3
 800959c:	4808      	ldr	r0, [pc, #32]	; (80095c0 <BSP_LED_On+0x40>)
 800959e:	f003 fbf5 	bl	800cd8c <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 80095a2:	e007      	b.n	80095b4 <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 80095a4:	79fb      	ldrb	r3, [r7, #7]
 80095a6:	4a05      	ldr	r2, [pc, #20]	; (80095bc <BSP_LED_On+0x3c>)
 80095a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095ac:	2100      	movs	r1, #0
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 fdca 	bl	800a148 <BSP_IO_WritePin>
}
 80095b4:	bf00      	nop
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	08019f94 	.word	0x08019f94
 80095c0:	48000400 	.word	0x48000400

080095c4 <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 80095ce:	79fb      	ldrb	r3, [r7, #7]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d109      	bne.n	80095e8 <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 80095d4:	79fb      	ldrb	r3, [r7, #7]
 80095d6:	4a0a      	ldr	r2, [pc, #40]	; (8009600 <BSP_LED_Off+0x3c>)
 80095d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095dc:	2201      	movs	r2, #1
 80095de:	4619      	mov	r1, r3
 80095e0:	4808      	ldr	r0, [pc, #32]	; (8009604 <BSP_LED_Off+0x40>)
 80095e2:	f003 fbd3 	bl	800cd8c <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 80095e6:	e007      	b.n	80095f8 <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 80095e8:	79fb      	ldrb	r3, [r7, #7]
 80095ea:	4a05      	ldr	r2, [pc, #20]	; (8009600 <BSP_LED_Off+0x3c>)
 80095ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095f0:	2101      	movs	r1, #1
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 fda8 	bl	800a148 <BSP_IO_WritePin>
}
 80095f8:	bf00      	nop
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	08019f94 	.word	0x08019f94
 8009604:	48000400 	.word	0x48000400

08009608 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 800960c:	4812      	ldr	r0, [pc, #72]	; (8009658 <I2C2_Init+0x50>)
 800960e:	f004 f9ca 	bl	800d9a6 <HAL_I2C_GetState>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d11d      	bne.n	8009654 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 8009618:	4b0f      	ldr	r3, [pc, #60]	; (8009658 <I2C2_Init+0x50>)
 800961a:	4a10      	ldr	r2, [pc, #64]	; (800965c <I2C2_Init+0x54>)
 800961c:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 800961e:	4b0e      	ldr	r3, [pc, #56]	; (8009658 <I2C2_Init+0x50>)
 8009620:	4a0f      	ldr	r2, [pc, #60]	; (8009660 <I2C2_Init+0x58>)
 8009622:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8009624:	4b0c      	ldr	r3, [pc, #48]	; (8009658 <I2C2_Init+0x50>)
 8009626:	2270      	movs	r2, #112	; 0x70
 8009628:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800962a:	4b0b      	ldr	r3, [pc, #44]	; (8009658 <I2C2_Init+0x50>)
 800962c:	2201      	movs	r2, #1
 800962e:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009630:	4b09      	ldr	r3, [pc, #36]	; (8009658 <I2C2_Init+0x50>)
 8009632:	2200      	movs	r2, #0
 8009634:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 8009636:	4b08      	ldr	r3, [pc, #32]	; (8009658 <I2C2_Init+0x50>)
 8009638:	22ff      	movs	r2, #255	; 0xff
 800963a:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800963c:	4b06      	ldr	r3, [pc, #24]	; (8009658 <I2C2_Init+0x50>)
 800963e:	2200      	movs	r2, #0
 8009640:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009642:	4b05      	ldr	r3, [pc, #20]	; (8009658 <I2C2_Init+0x50>)
 8009644:	2200      	movs	r2, #0
 8009646:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8009648:	4803      	ldr	r0, [pc, #12]	; (8009658 <I2C2_Init+0x50>)
 800964a:	f000 f80b 	bl	8009664 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 800964e:	4802      	ldr	r0, [pc, #8]	; (8009658 <I2C2_Init+0x50>)
 8009650:	f003 fbcc 	bl	800cdec <HAL_I2C_Init>
  }
}
 8009654:	bf00      	nop
 8009656:	bd80      	pop	{r7, pc}
 8009658:	20001000 	.word	0x20001000
 800965c:	40005800 	.word	0x40005800
 8009660:	40403e5d 	.word	0x40403e5d

08009664 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b0ae      	sub	sp, #184	; 0xb8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a37      	ldr	r2, [pc, #220]	; (8009750 <I2C2_MspInit+0xec>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d168      	bne.n	8009748 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8009676:	2380      	movs	r3, #128	; 0x80
 8009678:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 800967a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800967e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8009680:	f107 0318 	add.w	r3, r7, #24
 8009684:	4618      	mov	r0, r3
 8009686:	f006 ff23 	bl	80104d0 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 800968a:	4b32      	ldr	r3, [pc, #200]	; (8009754 <I2C2_MspInit+0xf0>)
 800968c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800968e:	4a31      	ldr	r2, [pc, #196]	; (8009754 <I2C2_MspInit+0xf0>)
 8009690:	f043 0302 	orr.w	r3, r3, #2
 8009694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009696:	4b2f      	ldr	r3, [pc, #188]	; (8009754 <I2C2_MspInit+0xf0>)
 8009698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800969a:	f003 0302 	and.w	r3, r3, #2
 800969e:	617b      	str	r3, [r7, #20]
 80096a0:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 80096a2:	4b2c      	ldr	r3, [pc, #176]	; (8009754 <I2C2_MspInit+0xf0>)
 80096a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096a6:	4a2b      	ldr	r2, [pc, #172]	; (8009754 <I2C2_MspInit+0xf0>)
 80096a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80096ae:	4b29      	ldr	r3, [pc, #164]	; (8009754 <I2C2_MspInit+0xf0>)
 80096b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b6:	613b      	str	r3, [r7, #16]
 80096b8:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 80096ba:	2310      	movs	r3, #16
 80096bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 80096c0:	2312      	movs	r3, #18
 80096c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 80096c6:	2301      	movs	r3, #1
 80096c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 80096cc:	2303      	movs	r3, #3
 80096ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 80096d2:	2304      	movs	r3, #4
 80096d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 80096d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80096dc:	4619      	mov	r1, r3
 80096de:	481e      	ldr	r0, [pc, #120]	; (8009758 <I2C2_MspInit+0xf4>)
 80096e0:	f003 f8d0 	bl	800c884 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 80096e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80096e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 80096ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80096f0:	4619      	mov	r1, r3
 80096f2:	481a      	ldr	r0, [pc, #104]	; (800975c <I2C2_MspInit+0xf8>)
 80096f4:	f003 f8c6 	bl	800c884 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 80096f8:	4b16      	ldr	r3, [pc, #88]	; (8009754 <I2C2_MspInit+0xf0>)
 80096fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096fc:	4a15      	ldr	r2, [pc, #84]	; (8009754 <I2C2_MspInit+0xf0>)
 80096fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009702:	6593      	str	r3, [r2, #88]	; 0x58
 8009704:	4b13      	ldr	r3, [pc, #76]	; (8009754 <I2C2_MspInit+0xf0>)
 8009706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800970c:	60fb      	str	r3, [r7, #12]
 800970e:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8009710:	4b10      	ldr	r3, [pc, #64]	; (8009754 <I2C2_MspInit+0xf0>)
 8009712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009714:	4a0f      	ldr	r2, [pc, #60]	; (8009754 <I2C2_MspInit+0xf0>)
 8009716:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800971a:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 800971c:	4b0d      	ldr	r3, [pc, #52]	; (8009754 <I2C2_MspInit+0xf0>)
 800971e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009720:	4a0c      	ldr	r2, [pc, #48]	; (8009754 <I2C2_MspInit+0xf0>)
 8009722:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009726:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 8009728:	2200      	movs	r2, #0
 800972a:	2100      	movs	r1, #0
 800972c:	2021      	movs	r0, #33	; 0x21
 800972e:	f002 fed2 	bl	800c4d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8009732:	2021      	movs	r0, #33	; 0x21
 8009734:	f002 feeb 	bl	800c50e <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 8009738:	2200      	movs	r2, #0
 800973a:	2100      	movs	r1, #0
 800973c:	2022      	movs	r0, #34	; 0x22
 800973e:	f002 feca 	bl	800c4d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8009742:	2022      	movs	r0, #34	; 0x22
 8009744:	f002 fee3 	bl	800c50e <HAL_NVIC_EnableIRQ>
  }
}
 8009748:	bf00      	nop
 800974a:	37b8      	adds	r7, #184	; 0xb8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	40005800 	.word	0x40005800
 8009754:	40021000 	.word	0x40021000
 8009758:	48001c00 	.word	0x48001c00
 800975c:	48000400 	.word	0x48000400

08009760 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8009764:	4806      	ldr	r0, [pc, #24]	; (8009780 <I2C2_DeInit+0x20>)
 8009766:	f004 f91e 	bl	800d9a6 <HAL_I2C_GetState>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d005      	beq.n	800977c <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 8009770:	4803      	ldr	r0, [pc, #12]	; (8009780 <I2C2_DeInit+0x20>)
 8009772:	f003 fbca 	bl	800cf0a <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 8009776:	4802      	ldr	r0, [pc, #8]	; (8009780 <I2C2_DeInit+0x20>)
 8009778:	f000 f804 	bl	8009784 <I2C2_MspDeInit>
  }
}
 800977c:	bf00      	nop
 800977e:	bd80      	pop	{r7, pc}
 8009780:	20001000 	.word	0x20001000

08009784 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a1f      	ldr	r2, [pc, #124]	; (8009810 <I2C2_MspDeInit+0x8c>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d138      	bne.n	8009808 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8009796:	4b1f      	ldr	r3, [pc, #124]	; (8009814 <I2C2_MspDeInit+0x90>)
 8009798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800979a:	4a1e      	ldr	r2, [pc, #120]	; (8009814 <I2C2_MspDeInit+0x90>)
 800979c:	f043 0302 	orr.w	r3, r3, #2
 80097a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097a2:	4b1c      	ldr	r3, [pc, #112]	; (8009814 <I2C2_MspDeInit+0x90>)
 80097a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	60fb      	str	r3, [r7, #12]
 80097ac:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 80097ae:	4b19      	ldr	r3, [pc, #100]	; (8009814 <I2C2_MspDeInit+0x90>)
 80097b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b2:	4a18      	ldr	r2, [pc, #96]	; (8009814 <I2C2_MspDeInit+0x90>)
 80097b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097ba:	4b16      	ldr	r3, [pc, #88]	; (8009814 <I2C2_MspDeInit+0x90>)
 80097bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c2:	60bb      	str	r3, [r7, #8]
 80097c4:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 80097c6:	2110      	movs	r1, #16
 80097c8:	4813      	ldr	r0, [pc, #76]	; (8009818 <I2C2_MspDeInit+0x94>)
 80097ca:	f003 f9ed 	bl	800cba8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 80097ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80097d2:	4812      	ldr	r0, [pc, #72]	; (800981c <I2C2_MspDeInit+0x98>)
 80097d4:	f003 f9e8 	bl	800cba8 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 80097d8:	4b0e      	ldr	r3, [pc, #56]	; (8009814 <I2C2_MspDeInit+0x90>)
 80097da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097dc:	4a0d      	ldr	r2, [pc, #52]	; (8009814 <I2C2_MspDeInit+0x90>)
 80097de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80097e2:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 80097e4:	4b0b      	ldr	r3, [pc, #44]	; (8009814 <I2C2_MspDeInit+0x90>)
 80097e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e8:	4a0a      	ldr	r2, [pc, #40]	; (8009814 <I2C2_MspDeInit+0x90>)
 80097ea:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80097ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 80097f0:	4b08      	ldr	r3, [pc, #32]	; (8009814 <I2C2_MspDeInit+0x90>)
 80097f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097f4:	4a07      	ldr	r2, [pc, #28]	; (8009814 <I2C2_MspDeInit+0x90>)
 80097f6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80097fa:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 80097fc:	2021      	movs	r0, #33	; 0x21
 80097fe:	f002 fe94 	bl	800c52a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8009802:	2022      	movs	r0, #34	; 0x22
 8009804:	f002 fe91 	bl	800c52a <HAL_NVIC_DisableIRQ>
  }
}
 8009808:	bf00      	nop
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	40005800 	.word	0x40005800
 8009814:	40021000 	.word	0x40021000
 8009818:	48001c00 	.word	0x48001c00
 800981c:	48000400 	.word	0x48000400

08009820 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 8009820:	b590      	push	{r4, r7, lr}
 8009822:	b089      	sub	sp, #36	; 0x24
 8009824:	af04      	add	r7, sp, #16
 8009826:	4604      	mov	r4, r0
 8009828:	4608      	mov	r0, r1
 800982a:	4611      	mov	r1, r2
 800982c:	461a      	mov	r2, r3
 800982e:	4623      	mov	r3, r4
 8009830:	80fb      	strh	r3, [r7, #6]
 8009832:	4603      	mov	r3, r0
 8009834:	80bb      	strh	r3, [r7, #4]
 8009836:	460b      	mov	r3, r1
 8009838:	807b      	strh	r3, [r7, #2]
 800983a:	4613      	mov	r3, r2
 800983c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8009842:	b672      	cpsid	i
}
 8009844:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 8009846:	4b0d      	ldr	r3, [pc, #52]	; (800987c <I2C2_WriteData+0x5c>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	8878      	ldrh	r0, [r7, #2]
 800984c:	88ba      	ldrh	r2, [r7, #4]
 800984e:	88f9      	ldrh	r1, [r7, #6]
 8009850:	9302      	str	r3, [sp, #8]
 8009852:	2301      	movs	r3, #1
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	1c7b      	adds	r3, r7, #1
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	4603      	mov	r3, r0
 800985c:	4808      	ldr	r0, [pc, #32]	; (8009880 <I2C2_WriteData+0x60>)
 800985e:	f003 fd6d 	bl	800d33c <HAL_I2C_Mem_Write>
 8009862:	4603      	mov	r3, r0
 8009864:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8009866:	b662      	cpsie	i
}
 8009868:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8009870:	f000 f890 	bl	8009994 <I2C2_Error>
  }
}
 8009874:	bf00      	nop
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	bd90      	pop	{r4, r7, pc}
 800987c:	20000534 	.word	0x20000534
 8009880:	20001000 	.word	0x20001000

08009884 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b088      	sub	sp, #32
 8009888:	af04      	add	r7, sp, #16
 800988a:	4603      	mov	r3, r0
 800988c:	80fb      	strh	r3, [r7, #6]
 800988e:	460b      	mov	r3, r1
 8009890:	80bb      	strh	r3, [r7, #4]
 8009892:	4613      	mov	r3, r2
 8009894:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 800989a:	2300      	movs	r3, #0
 800989c:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800989e:	b672      	cpsid	i
}
 80098a0:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 80098a2:	4b10      	ldr	r3, [pc, #64]	; (80098e4 <I2C2_ReadData+0x60>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	8878      	ldrh	r0, [r7, #2]
 80098a8:	88ba      	ldrh	r2, [r7, #4]
 80098aa:	88f9      	ldrh	r1, [r7, #6]
 80098ac:	9302      	str	r3, [sp, #8]
 80098ae:	2301      	movs	r3, #1
 80098b0:	9301      	str	r3, [sp, #4]
 80098b2:	f107 030e 	add.w	r3, r7, #14
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	4603      	mov	r3, r0
 80098ba:	480b      	ldr	r0, [pc, #44]	; (80098e8 <I2C2_ReadData+0x64>)
 80098bc:	f003 fe52 	bl	800d564 <HAL_I2C_Mem_Read>
 80098c0:	4603      	mov	r3, r0
 80098c2:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80098c4:	b662      	cpsie	i
}
 80098c6:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d004      	beq.n	80098d8 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80098ce:	f000 f861 	bl	8009994 <I2C2_Error>
    HAL_Delay(200);
 80098d2:	20c8      	movs	r0, #200	; 0xc8
 80098d4:	f001 fce0 	bl	800b298 <HAL_Delay>
  }

  return value;
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20000534 	.word	0x20000534
 80098e8:	20001000 	.word	0x20001000

080098ec <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	6039      	str	r1, [r7, #0]
 80098f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8009900:	b672      	cpsid	i
}
 8009902:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 8009904:	88f9      	ldrh	r1, [r7, #6]
 8009906:	2332      	movs	r3, #50	; 0x32
 8009908:	683a      	ldr	r2, [r7, #0]
 800990a:	480a      	ldr	r0, [pc, #40]	; (8009934 <I2C2_isDeviceReady+0x48>)
 800990c:	f003 ff44 	bl	800d798 <HAL_I2C_IsDeviceReady>
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8009914:	b662      	cpsie	i
}
 8009916:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d004      	beq.n	8009928 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800991e:	f000 f839 	bl	8009994 <I2C2_Error>
    HAL_Delay(200);
 8009922:	20c8      	movs	r0, #200	; 0xc8
 8009924:	f001 fcb8 	bl	800b298 <HAL_Delay>
  }

  return value;
 8009928:	7bbb      	ldrb	r3, [r7, #14]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20001000 	.word	0x20001000

08009938 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b08a      	sub	sp, #40	; 0x28
 800993c:	af04      	add	r7, sp, #16
 800993e:	607b      	str	r3, [r7, #4]
 8009940:	4603      	mov	r3, r0
 8009942:	81fb      	strh	r3, [r7, #14]
 8009944:	460b      	mov	r3, r1
 8009946:	81bb      	strh	r3, [r7, #12]
 8009948:	4613      	mov	r3, r2
 800994a:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 800994c:	2300      	movs	r3, #0
 800994e:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8009950:	b672      	cpsid	i
}
 8009952:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8009954:	4b0d      	ldr	r3, [pc, #52]	; (800998c <I2C2_ReadBuffer+0x54>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	8978      	ldrh	r0, [r7, #10]
 800995a:	89ba      	ldrh	r2, [r7, #12]
 800995c:	89f9      	ldrh	r1, [r7, #14]
 800995e:	9302      	str	r3, [sp, #8]
 8009960:	8c3b      	ldrh	r3, [r7, #32]
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	4603      	mov	r3, r0
 800996a:	4809      	ldr	r0, [pc, #36]	; (8009990 <I2C2_ReadBuffer+0x58>)
 800996c:	f003 fdfa 	bl	800d564 <HAL_I2C_Mem_Read>
 8009970:	4603      	mov	r3, r0
 8009972:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8009974:	b662      	cpsie	i
}
 8009976:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8009978:	7dfb      	ldrb	r3, [r7, #23]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800997e:	f000 f809 	bl	8009994 <I2C2_Error>
  }

  return status;
 8009982:	7dfb      	ldrb	r3, [r7, #23]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	20000534 	.word	0x20000534
 8009990:	20001000 	.word	0x20001000

08009994 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 8009998:	f7ff fda1 	bl	80094de <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 800999c:	4803      	ldr	r0, [pc, #12]	; (80099ac <I2C2_Error+0x18>)
 800999e:	f003 fab4 	bl	800cf0a <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 80099a2:	f7ff fe31 	bl	8009608 <I2C2_Init>
}
 80099a6:	bf00      	nop
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	20001000 	.word	0x20001000

080099b0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]

  if (HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f003 fff4 	bl	800d9a6 <HAL_I2C_GetState>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d132      	bne.n	8009a2a <I2Cx_Init+0x7a>
  {
    if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a1b      	ldr	r2, [pc, #108]	; (8009a34 <I2Cx_Init+0x84>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d103      	bne.n	80099d4 <I2Cx_Init+0x24>
    {
      /* TS (Capacitive Touch Panel) and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_TS_I2Cx;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a1a      	ldr	r2, [pc, #104]	; (8009a38 <I2Cx_Init+0x88>)
 80099d0:	601a      	str	r2, [r3, #0]
 80099d2:	e012      	b.n	80099fa <I2Cx_Init+0x4a>

      /* Need to enable MFX, and in doing so, initialize I2C at the same time */
      /* MFX_IO_Init();*/

    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cAudioHandler))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a19      	ldr	r2, [pc, #100]	; (8009a3c <I2Cx_Init+0x8c>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d103      	bne.n	80099e4 <I2Cx_Init+0x34>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a18      	ldr	r2, [pc, #96]	; (8009a40 <I2Cx_Init+0x90>)
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	e00a      	b.n	80099fa <I2Cx_Init+0x4a>
    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cCameraHandler))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a17      	ldr	r2, [pc, #92]	; (8009a44 <I2Cx_Init+0x94>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d103      	bne.n	80099f4 <I2Cx_Init+0x44>
    {
      i2c_handler->Instance = DISCOVERY_CAMERA_I2Cx;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a12      	ldr	r2, [pc, #72]	; (8009a38 <I2Cx_Init+0x88>)
 80099f0:	601a      	str	r2, [r3, #0]
 80099f2:	e002      	b.n	80099fa <I2Cx_Init+0x4a>
    }
    else
    {
      /* External, EEPROM and Arduino connector I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a10      	ldr	r2, [pc, #64]	; (8009a38 <I2Cx_Init+0x88>)
 80099f8:	601a      	str	r2, [r3, #0]
    }

    i2c_handler->Init.Timing           = DISCOVERY_I2C_TIMING;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a12      	ldr	r2, [pc, #72]	; (8009a48 <I2Cx_Init+0x98>)
 80099fe:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0x70;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2270      	movs	r2, #112	; 0x70
 8009a04:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0xFF;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	22ff      	movs	r2, #255	; 0xff
 8009a16:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	621a      	str	r2, [r3, #32]


    /* Init the I2C */
    HAL_I2C_Init(i2c_handler);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f003 f9e1 	bl	800cdec <HAL_I2C_Init>

  }

}
 8009a2a:	bf00      	nop
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20001054 	.word	0x20001054
 8009a38:	40005800 	.word	0x40005800
 8009a3c:	200010a8 	.word	0x200010a8
 8009a40:	40005400 	.word	0x40005400
 8009a44:	200010fc 	.word	0x200010fc
 8009a48:	90112626 	.word	0x90112626

08009a4c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08a      	sub	sp, #40	; 0x28
 8009a50:	af04      	add	r7, sp, #16
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	4608      	mov	r0, r1
 8009a56:	4611      	mov	r1, r2
 8009a58:	461a      	mov	r2, r3
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	72fb      	strb	r3, [r7, #11]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	813b      	strh	r3, [r7, #8]
 8009a62:	4613      	mov	r3, r2
 8009a64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009a66:	2300      	movs	r3, #0
 8009a68:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009a6a:	7afb      	ldrb	r3, [r7, #11]
 8009a6c:	b299      	uxth	r1, r3
 8009a6e:	88f8      	ldrh	r0, [r7, #6]
 8009a70:	893a      	ldrh	r2, [r7, #8]
 8009a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a76:	9302      	str	r3, [sp, #8]
 8009a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	4603      	mov	r3, r0
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f003 fd6e 	bl	800d564 <HAL_I2C_Mem_Read>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d004      	beq.n	8009a9c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8009a92:	7afb      	ldrb	r3, [r7, #11]
 8009a94:	4619      	mov	r1, r3
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f000 f832 	bl	8009b00 <I2Cx_Error>
  }
  return status;
 8009a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3718      	adds	r7, #24
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b08a      	sub	sp, #40	; 0x28
 8009aaa:	af04      	add	r7, sp, #16
 8009aac:	60f8      	str	r0, [r7, #12]
 8009aae:	4608      	mov	r0, r1
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	72fb      	strb	r3, [r7, #11]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	813b      	strh	r3, [r7, #8]
 8009abc:	4613      	mov	r3, r2
 8009abe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009ac4:	7afb      	ldrb	r3, [r7, #11]
 8009ac6:	b299      	uxth	r1, r3
 8009ac8:	88f8      	ldrh	r0, [r7, #6]
 8009aca:	893a      	ldrh	r2, [r7, #8]
 8009acc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009ad0:	9302      	str	r3, [sp, #8]
 8009ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ad4:	9301      	str	r3, [sp, #4]
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	9300      	str	r3, [sp, #0]
 8009ada:	4603      	mov	r3, r0
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f003 fc2d 	bl	800d33c <HAL_I2C_Mem_Write>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d004      	beq.n	8009af6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initialize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009aec:	7afb      	ldrb	r3, [r7, #11]
 8009aee:	4619      	mov	r1, r3
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f000 f805 	bl	8009b00 <I2Cx_Error>
  }
  return status;
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70fb      	strb	r3, [r7, #3]
  BSP_ErrorHandler();
 8009b0c:	f7ff fce7 	bl	80094de <BSP_ErrorHandler>

  /* De-initialize the I2C communication bus */
  if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a08      	ldr	r2, [pc, #32]	; (8009b34 <I2Cx_Error+0x34>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d102      	bne.n	8009b1e <I2Cx_Error+0x1e>
  {
    I2C2_DeInit();
 8009b18:	f7ff fe22 	bl	8009760 <I2C2_DeInit>
 8009b1c:	e002      	b.n	8009b24 <I2Cx_Error+0x24>
  }
  else
  {
    HAL_I2C_DeInit(i2c_handler);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f003 f9f3 	bl	800cf0a <HAL_I2C_DeInit>
  }

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7ff ff43 	bl	80099b0 <I2Cx_Init>
}
 8009b2a:	bf00      	nop
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	20001054 	.word	0x20001054

08009b38 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 8009b3c:	f7ff fd64 	bl	8009608 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 8009b40:	2104      	movs	r1, #4
 8009b42:	2084      	movs	r0, #132	; 0x84
 8009b44:	f7ff fed2 	bl	80098ec <I2C2_isDeviceReady>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 8009b4e:	f7ff fcc6 	bl	80094de <BSP_ErrorHandler>
  }
}
 8009b52:	bf00      	nop
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b088      	sub	sp, #32
 8009b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8009b5e:	4b19      	ldr	r3, [pc, #100]	; (8009bc4 <MFX_IO_DeInit+0x6c>)
 8009b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b62:	4a18      	ldr	r2, [pc, #96]	; (8009bc4 <MFX_IO_DeInit+0x6c>)
 8009b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b6a:	4b16      	ldr	r3, [pc, #88]	; (8009bc4 <MFX_IO_DeInit+0x6c>)
 8009b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b72:	60bb      	str	r3, [r7, #8]
 8009b74:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8009b76:	2340      	movs	r3, #64	; 0x40
 8009b78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8009b82:	2302      	movs	r3, #2
 8009b84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8009b86:	f107 030c 	add.w	r3, r7, #12
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	480e      	ldr	r0, [pc, #56]	; (8009bc8 <MFX_IO_DeInit+0x70>)
 8009b8e:	f002 fe79 	bl	800c884 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8009b92:	2017      	movs	r0, #23
 8009b94:	f002 fcc9 	bl	800c52a <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8009b98:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <MFX_IO_DeInit+0x6c>)
 8009b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b9c:	4a09      	ldr	r2, [pc, #36]	; (8009bc4 <MFX_IO_DeInit+0x6c>)
 8009b9e:	f043 0304 	orr.w	r3, r3, #4
 8009ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ba4:	4b07      	ldr	r3, [pc, #28]	; (8009bc4 <MFX_IO_DeInit+0x6c>)
 8009ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ba8:	f003 0304 	and.w	r3, r3, #4
 8009bac:	607b      	str	r3, [r7, #4]
 8009bae:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8009bb0:	2120      	movs	r1, #32
 8009bb2:	4806      	ldr	r0, [pc, #24]	; (8009bcc <MFX_IO_DeInit+0x74>)
 8009bb4:	f002 fff8 	bl	800cba8 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8009bb8:	f7ff fdd2 	bl	8009760 <I2C2_DeInit>
}
 8009bbc:	bf00      	nop
 8009bbe:	3720      	adds	r7, #32
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	40021000 	.word	0x40021000
 8009bc8:	48001c00 	.word	0x48001c00
 8009bcc:	48000800 	.word	0x48000800

08009bd0 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 8009bd6:	4b13      	ldr	r3, [pc, #76]	; (8009c24 <MFX_IO_ITConfig+0x54>)
 8009bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bda:	4a12      	ldr	r2, [pc, #72]	; (8009c24 <MFX_IO_ITConfig+0x54>)
 8009bdc:	f043 0304 	orr.w	r3, r3, #4
 8009be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009be2:	4b10      	ldr	r3, [pc, #64]	; (8009c24 <MFX_IO_ITConfig+0x54>)
 8009be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009be6:	f003 0304 	and.w	r3, r3, #4
 8009bea:	603b      	str	r3, [r7, #0]
 8009bec:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8009bee:	2320      	movs	r3, #32
 8009bf0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 8009bfa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009bfe:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8009c00:	1d3b      	adds	r3, r7, #4
 8009c02:	4619      	mov	r1, r3
 8009c04:	4808      	ldr	r0, [pc, #32]	; (8009c28 <MFX_IO_ITConfig+0x58>)
 8009c06:	f002 fe3d 	bl	800c884 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 8009c0a:	220f      	movs	r2, #15
 8009c0c:	210f      	movs	r1, #15
 8009c0e:	2017      	movs	r0, #23
 8009c10:	f002 fc61 	bl	800c4d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8009c14:	2017      	movs	r0, #23
 8009c16:	f002 fc7a 	bl	800c50e <HAL_NVIC_EnableIRQ>
}
 8009c1a:	bf00      	nop
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	40021000 	.word	0x40021000
 8009c28:	48000800 	.word	0x48000800

08009c2c <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8009c32:	4b0e      	ldr	r3, [pc, #56]	; (8009c6c <MFX_IO_EnableWakeupPin+0x40>)
 8009c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c36:	4a0d      	ldr	r2, [pc, #52]	; (8009c6c <MFX_IO_EnableWakeupPin+0x40>)
 8009c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c3e:	4b0b      	ldr	r3, [pc, #44]	; (8009c6c <MFX_IO_EnableWakeupPin+0x40>)
 8009c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c46:	603b      	str	r3, [r7, #0]
 8009c48:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8009c4a:	2340      	movs	r3, #64	; 0x40
 8009c4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009c52:	2302      	movs	r3, #2
 8009c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8009c56:	2300      	movs	r3, #0
 8009c58:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8009c5a:	1d3b      	adds	r3, r7, #4
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	4804      	ldr	r0, [pc, #16]	; (8009c70 <MFX_IO_EnableWakeupPin+0x44>)
 8009c60:	f002 fe10 	bl	800c884 <HAL_GPIO_Init>
}
 8009c64:	bf00      	nop
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	40021000 	.word	0x40021000
 8009c70:	48001c00 	.word	0x48001c00

08009c74 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 8009c78:	2201      	movs	r2, #1
 8009c7a:	2140      	movs	r1, #64	; 0x40
 8009c7c:	4806      	ldr	r0, [pc, #24]	; (8009c98 <MFX_IO_Wakeup+0x24>)
 8009c7e:	f003 f885 	bl	800cd8c <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 8009c82:	2001      	movs	r0, #1
 8009c84:	f001 fb08 	bl	800b298 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 8009c88:	2200      	movs	r2, #0
 8009c8a:	2140      	movs	r1, #64	; 0x40
 8009c8c:	4802      	ldr	r0, [pc, #8]	; (8009c98 <MFX_IO_Wakeup+0x24>)
 8009c8e:	f003 f87d 	bl	800cd8c <HAL_GPIO_WritePin>
}
 8009c92:	bf00      	nop
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	48001c00 	.word	0x48001c00

08009c9c <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	80fb      	strh	r3, [r7, #6]
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	717b      	strb	r3, [r7, #5]
 8009caa:	4613      	mov	r3, r2
 8009cac:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 8009cae:	797b      	ldrb	r3, [r7, #5]
 8009cb0:	b299      	uxth	r1, r3
 8009cb2:	793b      	ldrb	r3, [r7, #4]
 8009cb4:	88f8      	ldrh	r0, [r7, #6]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f7ff fdb2 	bl	8009820 <I2C2_WriteData>
}
 8009cbc:	bf00      	nop
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	460a      	mov	r2, r1
 8009cce:	80fb      	strh	r3, [r7, #6]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8009cd4:	797b      	ldrb	r3, [r7, #5]
 8009cd6:	b299      	uxth	r1, r3
 8009cd8:	88fb      	ldrh	r3, [r7, #6]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7ff fdd1 	bl	8009884 <I2C2_ReadData>
 8009ce2:	4603      	mov	r3, r0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af02      	add	r7, sp, #8
 8009cf2:	60ba      	str	r2, [r7, #8]
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	81fb      	strh	r3, [r7, #14]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	737b      	strb	r3, [r7, #13]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8009d02:	7b7b      	ldrb	r3, [r7, #13]
 8009d04:	b299      	uxth	r1, r3
 8009d06:	89f8      	ldrh	r0, [r7, #14]
 8009d08:	88fb      	ldrh	r3, [r7, #6]
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f7ff fe12 	bl	8009938 <I2C2_ReadBuffer>
 8009d14:	4603      	mov	r3, r0
 8009d16:	b29b      	uxth	r3, r3
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f001 fab5 	bl	800b298 <HAL_Delay>
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08c      	sub	sp, #48	; 0x30
 8009d3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8009d3e:	4b38      	ldr	r3, [pc, #224]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d42:	4a37      	ldr	r2, [pc, #220]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009d44:	f043 0301 	orr.w	r3, r3, #1
 8009d48:	6513      	str	r3, [r2, #80]	; 0x50
 8009d4a:	4b35      	ldr	r3, [pc, #212]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d4e:	f003 0301 	and.w	r3, r3, #1
 8009d52:	61bb      	str	r3, [r7, #24]
 8009d54:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009d56:	4b32      	ldr	r3, [pc, #200]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d5a:	4a31      	ldr	r2, [pc, #196]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009d5c:	f043 0308 	orr.w	r3, r3, #8
 8009d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d62:	4b2f      	ldr	r3, [pc, #188]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d66:	f003 0308 	and.w	r3, r3, #8
 8009d6a:	617b      	str	r3, [r7, #20]
 8009d6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009d6e:	4b2c      	ldr	r3, [pc, #176]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d72:	4a2b      	ldr	r2, [pc, #172]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009d74:	f043 0310 	orr.w	r3, r3, #16
 8009d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d7a:	4b29      	ldr	r3, [pc, #164]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d7e:	f003 0310 	and.w	r3, r3, #16
 8009d82:	613b      	str	r3, [r7, #16]
 8009d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009d86:	4b26      	ldr	r3, [pc, #152]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d8a:	4a25      	ldr	r2, [pc, #148]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009d8c:	f043 0320 	orr.w	r3, r3, #32
 8009d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d92:	4b23      	ldr	r3, [pc, #140]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d96:	f003 0320 	and.w	r3, r3, #32
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009d9e:	4b20      	ldr	r3, [pc, #128]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009da2:	4a1f      	ldr	r2, [pc, #124]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009daa:	4b1d      	ldr	r3, [pc, #116]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009db2:	60bb      	str	r3, [r7, #8]
 8009db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009db6:	4b1a      	ldr	r3, [pc, #104]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dba:	4a19      	ldr	r2, [pc, #100]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8009dc2:	4b17      	ldr	r3, [pc, #92]	; (8009e20 <FMC_BANK1_MspInit+0xe8>)
 8009dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dca:	607b      	str	r3, [r7, #4]
 8009dcc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8009dce:	f005 fc27 	bl	800f620 <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 8009dde:	230c      	movs	r3, #12
 8009de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 8009de2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8009de6:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8009de8:	f107 031c 	add.w	r3, r7, #28
 8009dec:	4619      	mov	r1, r3
 8009dee:	480d      	ldr	r0, [pc, #52]	; (8009e24 <FMC_BANK1_MspInit+0xec>)
 8009df0:	f002 fd48 	bl	800c884 <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 8009df4:	f64f 7380 	movw	r3, #65408	; 0xff80
 8009df8:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8009dfa:	f107 031c 	add.w	r3, r7, #28
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4809      	ldr	r0, [pc, #36]	; (8009e28 <FMC_BANK1_MspInit+0xf0>)
 8009e02:	f002 fd3f 	bl	800c884 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 8009e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8009e0c:	f107 031c 	add.w	r3, r7, #28
 8009e10:	4619      	mov	r1, r3
 8009e12:	4804      	ldr	r0, [pc, #16]	; (8009e24 <FMC_BANK1_MspInit+0xec>)
 8009e14:	f002 fd36 	bl	800c884 <HAL_GPIO_Init>

}
 8009e18:	bf00      	nop
 8009e1a:	3730      	adds	r7, #48	; 0x30
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	40021000 	.word	0x40021000
 8009e24:	48000c00 	.word	0x48000c00
 8009e28:	48001000 	.word	0x48001000

08009e2c <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b0a4      	sub	sp, #144	; 0x90
 8009e30:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 8009e32:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8009e36:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 8009e38:	4b26      	ldr	r3, [pc, #152]	; (8009ed4 <FMC_BANK1_Init+0xa8>)
 8009e3a:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 8009e40:	2301      	movs	r3, #1
 8009e42:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 8009e44:	2301      	movs	r3, #1
 8009e46:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 8009e50:	2302      	movs	r3, #2
 8009e52:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 8009e54:	2300      	movs	r3, #0
 8009e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 8009e58:	2305      	movs	r3, #5
 8009e5a:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 8009e60:	2303      	movs	r3, #3
 8009e62:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 8009e64:	2302      	movs	r3, #2
 8009e66:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 8009e68:	2302      	movs	r3, #2
 8009e6a:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 8009e70:	2300      	movs	r3, #0
 8009e72:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 8009e74:	2300      	movs	r3, #0
 8009e76:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8009e80:	2310      	movs	r3, #16
 8009e82:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 8009e84:	2300      	movs	r3, #0
 8009e86:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 8009e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e94:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 8009e96:	2300      	movs	r3, #0
 8009e98:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 8009eac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009eb0:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 8009eb6:	f7ff ff3f 	bl	8009d38 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 8009eba:	463a      	mov	r2, r7
 8009ebc:	f107 0120 	add.w	r1, r7, #32
 8009ec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f008 fed8 	bl	8012c7a <HAL_SRAM_Init>

}
 8009eca:	bf00      	nop
 8009ecc:	3790      	adds	r7, #144	; 0x90
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	a0000104 	.word	0xa0000104

08009ed8 <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	4603      	mov	r3, r0
 8009ee0:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 8009ee2:	4a04      	ldr	r2, [pc, #16]	; (8009ef4 <FMC_BANK1_WriteData+0x1c>)
 8009ee4:	88fb      	ldrh	r3, [r7, #6]
 8009ee6:	8013      	strh	r3, [r2, #0]
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	60080000 	.word	0x60080000

08009ef8 <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	4603      	mov	r3, r0
 8009f00:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 8009f02:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8009f06:	79fa      	ldrb	r2, [r7, #7]
 8009f08:	b292      	uxth	r2, r2
 8009f0a:	801a      	strh	r2, [r3, #0]
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 8009f1c:	4b03      	ldr	r3, [pc, #12]	; (8009f2c <FMC_BANK1_ReadData+0x14>)
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	b29b      	uxth	r3, r3
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	60080000 	.word	0x60080000

08009f30 <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 8009f34:	f7ff ff7a 	bl	8009e2c <FMC_BANK1_Init>
}
 8009f38:	bf00      	nop
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	4603      	mov	r3, r0
 8009f44:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 8009f46:	88fb      	ldrh	r3, [r7, #6]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7ff ffc5 	bl	8009ed8 <FMC_BANK1_WriteData>
}
 8009f4e:	bf00      	nop
 8009f50:	3708      	adds	r7, #8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b082      	sub	sp, #8
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 8009f60:	79fb      	ldrb	r3, [r7, #7]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7ff ffc8 	bl	8009ef8 <FMC_BANK1_WriteReg>
}
 8009f68:	bf00      	nop
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 8009f74:	f7ff ffd0 	bl	8009f18 <FMC_BANK1_ReadData>
 8009f78:	4603      	mov	r3, r0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b082      	sub	sp, #8
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f001 f986 	bl	800b298 <HAL_Delay>
}
 8009f8c:	bf00      	nop
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cTSHandler);
 8009f98:	4812      	ldr	r0, [pc, #72]	; (8009fe4 <TS_IO_Init+0x50>)
 8009f9a:	f7ff fd09 	bl	80099b0 <I2Cx_Init>

  if (ts_io_init == 0)
 8009f9e:	4b12      	ldr	r3, [pc, #72]	; (8009fe8 <TS_IO_Init+0x54>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d11b      	bne.n	8009fde <TS_IO_Init+0x4a>
  {
    if (BSP_LCD_Init() == LCD_ERROR)
 8009fa6:	f000 f8eb 	bl	800a180 <BSP_LCD_Init>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d101      	bne.n	8009fb4 <TS_IO_Init+0x20>
    {
      BSP_ErrorHandler();
 8009fb0:	f7ff fa95 	bl	80094de <BSP_ErrorHandler>
    }

    BSP_IO_ConfigPin(TS_RST_PIN, IO_MODE_OUTPUT);
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	2002      	movs	r0, #2
 8009fb8:	f000 f8aa 	bl	800a110 <BSP_IO_ConfigPin>

    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_RESET);
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	2002      	movs	r0, #2
 8009fc0:	f000 f8c2 	bl	800a148 <BSP_IO_WritePin>
    HAL_Delay(10);
 8009fc4:	200a      	movs	r0, #10
 8009fc6:	f001 f967 	bl	800b298 <HAL_Delay>
    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_SET);
 8009fca:	2101      	movs	r1, #1
 8009fcc:	2002      	movs	r0, #2
 8009fce:	f000 f8bb 	bl	800a148 <BSP_IO_WritePin>
    HAL_Delay(200);
 8009fd2:	20c8      	movs	r0, #200	; 0xc8
 8009fd4:	f001 f960 	bl	800b298 <HAL_Delay>

    ts_io_init = 1;
 8009fd8:	4b03      	ldr	r3, [pc, #12]	; (8009fe8 <TS_IO_Init+0x54>)
 8009fda:	2201      	movs	r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]
  }
}
 8009fde:	bf00      	nop
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20001054 	.word	0x20001054
 8009fe8:	20000ffc 	.word	0x20000ffc

08009fec <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af02      	add	r7, sp, #8
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	71fb      	strb	r3, [r7, #7]
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	71bb      	strb	r3, [r7, #6]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&Value, 1);
 8009ffe:	79bb      	ldrb	r3, [r7, #6]
 800a000:	b29a      	uxth	r2, r3
 800a002:	79f9      	ldrb	r1, [r7, #7]
 800a004:	2301      	movs	r3, #1
 800a006:	9301      	str	r3, [sp, #4]
 800a008:	1d7b      	adds	r3, r7, #5
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	2301      	movs	r3, #1
 800a00e:	4803      	ldr	r0, [pc, #12]	; (800a01c <TS_IO_Write+0x30>)
 800a010:	f7ff fd49 	bl	8009aa6 <I2Cx_WriteMultiple>
}
 800a014:	bf00      	nop
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	20001054 	.word	0x20001054

0800a020 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	460a      	mov	r2, r1
 800a02a:	71fb      	strb	r3, [r7, #7]
 800a02c:	4613      	mov	r3, r2
 800a02e:	71bb      	strb	r3, [r7, #6]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 800a030:	79fb      	ldrb	r3, [r7, #7]
 800a032:	b29b      	uxth	r3, r3
 800a034:	79ba      	ldrb	r2, [r7, #6]
 800a036:	b291      	uxth	r1, r2
 800a038:	2201      	movs	r2, #1
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7ff fc22 	bl	8009884 <I2C2_ReadData>
 800a040:	4603      	mov	r3, r0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
	...

0800a04c <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af02      	add	r7, sp, #8
 800a052:	603a      	str	r2, [r7, #0]
 800a054:	461a      	mov	r2, r3
 800a056:	4603      	mov	r3, r0
 800a058:	71fb      	strb	r3, [r7, #7]
 800a05a:	460b      	mov	r3, r1
 800a05c:	71bb      	strb	r3, [r7, #6]
 800a05e:	4613      	mov	r3, r2
 800a060:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800a062:	79bb      	ldrb	r3, [r7, #6]
 800a064:	b29a      	uxth	r2, r3
 800a066:	79f9      	ldrb	r1, [r7, #7]
 800a068:	88bb      	ldrh	r3, [r7, #4]
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	2301      	movs	r3, #1
 800a072:	4804      	ldr	r0, [pc, #16]	; (800a084 <TS_IO_ReadMultiple+0x38>)
 800a074:	f7ff fcea 	bl	8009a4c <I2Cx_ReadMultiple>
 800a078:	4603      	mov	r3, r0
 800a07a:	b29b      	uxth	r3, r3
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	20001054 	.word	0x20001054

0800a088 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 800a096:	4b1a      	ldr	r3, [pc, #104]	; (800a100 <BSP_IO_Init+0x78>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d128      	bne.n	800a0f0 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 800a09e:	4b19      	ldr	r3, [pc, #100]	; (800a104 <BSP_IO_Init+0x7c>)
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	2084      	movs	r0, #132	; 0x84
 800a0a4:	4798      	blx	r3

    HAL_Delay(10);
 800a0a6:	200a      	movs	r0, #10
 800a0a8:	f001 f8f6 	bl	800b298 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 800a0ac:	4b16      	ldr	r3, [pc, #88]	; (800a108 <BSP_IO_Init+0x80>)
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	2084      	movs	r0, #132	; 0x84
 800a0b2:	4798      	blx	r3
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 800a0b8:	79bb      	ldrb	r3, [r7, #6]
 800a0ba:	2b7b      	cmp	r3, #123	; 0x7b
 800a0bc:	d002      	beq.n	800a0c4 <BSP_IO_Init+0x3c>
 800a0be:	79bb      	ldrb	r3, [r7, #6]
 800a0c0:	2b79      	cmp	r3, #121	; 0x79
 800a0c2:	d117      	bne.n	800a0f4 <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 800a0c4:	4b0e      	ldr	r3, [pc, #56]	; (800a100 <BSP_IO_Init+0x78>)
 800a0c6:	4a10      	ldr	r2, [pc, #64]	; (800a108 <BSP_IO_Init+0x80>)
 800a0c8:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 800a0ca:	4b0d      	ldr	r3, [pc, #52]	; (800a100 <BSP_IO_Init+0x78>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00f      	beq.n	800a0f4 <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 800a0d4:	4b0a      	ldr	r3, [pc, #40]	; (800a100 <BSP_IO_Init+0x78>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2084      	movs	r0, #132	; 0x84
 800a0dc:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 800a0de:	4b08      	ldr	r3, [pc, #32]	; (800a100 <BSP_IO_Init+0x78>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	4909      	ldr	r1, [pc, #36]	; (800a10c <BSP_IO_Init+0x84>)
 800a0e6:	2084      	movs	r0, #132	; 0x84
 800a0e8:	4798      	blx	r3

        ret = IO_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	71fb      	strb	r3, [r7, #7]
 800a0ee:	e001      	b.n	800a0f4 <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	20001150 	.word	0x20001150
 800a104:	200001f0 	.word	0x200001f0
 800a108:	200001c4 	.word	0x200001c4
 800a10c:	000301ff 	.word	0x000301ff

0800a110 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 800a11c:	2300      	movs	r3, #0
 800a11e:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	4b07      	ldr	r3, [pc, #28]	; (800a140 <BSP_IO_ConfigPin+0x30>)
 800a124:	4013      	ands	r3, r2
 800a126:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 800a128:	4b06      	ldr	r3, [pc, #24]	; (800a144 <BSP_IO_ConfigPin+0x34>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	78fa      	ldrb	r2, [r7, #3]
 800a130:	68f9      	ldr	r1, [r7, #12]
 800a132:	2084      	movs	r0, #132	; 0x84
 800a134:	4798      	blx	r3

  return IO_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	000301ff 	.word	0x000301ff
 800a144:	20001150 	.word	0x20001150

0800a148 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 800a154:	2300      	movs	r3, #0
 800a156:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	4b07      	ldr	r3, [pc, #28]	; (800a178 <BSP_IO_WritePin+0x30>)
 800a15c:	4013      	ands	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 800a160:	4b06      	ldr	r3, [pc, #24]	; (800a17c <BSP_IO_WritePin+0x34>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	78fa      	ldrb	r2, [r7, #3]
 800a168:	68f9      	ldr	r1, [r7, #12]
 800a16a:	2084      	movs	r0, #132	; 0x84
 800a16c:	4798      	blx	r3

}
 800a16e:	bf00      	nop
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	000301ff 	.word	0x000301ff
 800a17c:	20001150 	.word	0x20001150

0800a180 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800a184:	2001      	movs	r0, #1
 800a186:	f000 f803 	bl	800a190 <BSP_LCD_InitEx>
 800a18a:	4603      	mov	r3, r0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 800a19c:	2300      	movs	r3, #0
 800a19e:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 800a1a0:	4b33      	ldr	r3, [pc, #204]	; (800a270 <BSP_LCD_InitEx+0xe0>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d102      	bne.n	800a1ae <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	73fb      	strb	r3, [r7, #15]
 800a1ac:	e05b      	b.n	800a266 <BSP_LCD_InitEx+0xd6>
  }
  else
  {
    /* Initialize the IO functionalities */
    if (BSP_IO_Init() == IO_ERROR)
 800a1ae:	f7ff ff6b 	bl	800a088 <BSP_IO_Init>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d101      	bne.n	800a1bc <BSP_LCD_InitEx+0x2c>
    {
      BSP_ErrorHandler();
 800a1b8:	f7ff f991 	bl	80094de <BSP_ErrorHandler>
    }

    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 800a1bc:	f000 fce4 	bl	800ab88 <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	2101      	movs	r1, #1
 800a1c4:	482b      	ldr	r0, [pc, #172]	; (800a274 <BSP_LCD_InitEx+0xe4>)
 800a1c6:	f002 fde1 	bl	800cd8c <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 800a1ca:	4b2b      	ldr	r3, [pc, #172]	; (800a278 <BSP_LCD_InitEx+0xe8>)
 800a1cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1d0:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 800a1d2:	4b29      	ldr	r3, [pc, #164]	; (800a278 <BSP_LCD_InitEx+0xe8>)
 800a1d4:	4a29      	ldr	r2, [pc, #164]	; (800a27c <BSP_LCD_InitEx+0xec>)
 800a1d6:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 800a1d8:	4b27      	ldr	r3, [pc, #156]	; (800a278 <BSP_LCD_InitEx+0xe8>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 800a1de:	4b28      	ldr	r3, [pc, #160]	; (800a280 <BSP_LCD_InitEx+0xf0>)
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d108      	bne.n	800a1f8 <BSP_LCD_InitEx+0x68>
 800a1e6:	4b27      	ldr	r3, [pc, #156]	; (800a284 <BSP_LCD_InitEx+0xf4>)
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d104      	bne.n	800a1f8 <BSP_LCD_InitEx+0x68>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	4825      	ldr	r0, [pc, #148]	; (800a288 <BSP_LCD_InitEx+0xf8>)
 800a1f4:	f002 fdca 	bl	800cd8c <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 800a1f8:	f000 f850 	bl	800a29c <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 800a1fc:	4b23      	ldr	r3, [pc, #140]	; (800a28c <BSP_LCD_InitEx+0xfc>)
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	4798      	blx	r3
 800a202:	4603      	mov	r3, r0
 800a204:	2b85      	cmp	r3, #133	; 0x85
 800a206:	d12e      	bne.n	800a266 <BSP_LCD_InitEx+0xd6>
    {
      LcdDrv = &ST7789H2_drv;
 800a208:	4b21      	ldr	r3, [pc, #132]	; (800a290 <BSP_LCD_InitEx+0x100>)
 800a20a:	4a20      	ldr	r2, [pc, #128]	; (800a28c <BSP_LCD_InitEx+0xfc>)
 800a20c:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 800a20e:	4b20      	ldr	r3, [pc, #128]	; (800a290 <BSP_LCD_InitEx+0x100>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 800a216:	2200      	movs	r2, #0
 800a218:	2100      	movs	r1, #0
 800a21a:	202c      	movs	r0, #44	; 0x2c
 800a21c:	f7fa fb81 	bl	8004922 <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 800a220:	2300      	movs	r3, #0
 800a222:	60bb      	str	r3, [r7, #8]
 800a224:	e006      	b.n	800a234 <BSP_LCD_InitEx+0xa4>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 800a226:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a22a:	f7ff fe87 	bl	8009f3c <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	3301      	adds	r3, #1
 800a232:	60bb      	str	r3, [r7, #8]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 800a23a:	d3f4      	bcc.n	800a226 <BSP_LCD_InitEx+0x96>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d106      	bne.n	800a250 <BSP_LCD_InitEx+0xc0>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 800a242:	2000      	movs	r0, #0
 800a244:	f7fa fa6b 	bl	800471e <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 800a248:	4b12      	ldr	r3, [pc, #72]	; (800a294 <BSP_LCD_InitEx+0x104>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	701a      	strb	r2, [r3, #0]
 800a24e:	e002      	b.n	800a256 <BSP_LCD_InitEx+0xc6>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 800a250:	4b10      	ldr	r3, [pc, #64]	; (800a294 <BSP_LCD_InitEx+0x104>)
 800a252:	2201      	movs	r2, #1
 800a254:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800a256:	4810      	ldr	r0, [pc, #64]	; (800a298 <BSP_LCD_InitEx+0x108>)
 800a258:	f000 f868 	bl	800a32c <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 800a25c:	4b04      	ldr	r3, [pc, #16]	; (800a270 <BSP_LCD_InitEx+0xe0>)
 800a25e:	2201      	movs	r2, #1
 800a260:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a266:	7bfb      	ldrb	r3, [r7, #15]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	20001154 	.word	0x20001154
 800a274:	48001c00 	.word	0x48001c00
 800a278:	200011c8 	.word	0x200011c8
 800a27c:	20000538 	.word	0x20000538
 800a280:	200011c4 	.word	0x200011c4
 800a284:	200011c5 	.word	0x200011c5
 800a288:	48002000 	.word	0x48002000
 800a28c:	2000023c 	.word	0x2000023c
 800a290:	200011d4 	.word	0x200011d4
 800a294:	20000548 	.word	0x20000548
 800a298:	20000540 	.word	0x20000540

0800a29c <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	2004      	movs	r0, #4
 800a2a4:	f7ff ff50 	bl	800a148 <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800a2a8:	2005      	movs	r0, #5
 800a2aa:	f000 fff5 	bl	800b298 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	2004      	movs	r0, #4
 800a2b2:	f7ff ff49 	bl	800a148 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800a2b6:	200a      	movs	r0, #10
 800a2b8:	f000 ffee 	bl	800b298 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 800a2bc:	2100      	movs	r1, #0
 800a2be:	2004      	movs	r0, #4
 800a2c0:	f7ff ff42 	bl	800a148 <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 800a2c4:	2014      	movs	r0, #20
 800a2c6:	f000 ffe7 	bl	800b298 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	2004      	movs	r0, #4
 800a2ce:	f7ff ff3b 	bl	800a148 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800a2d2:	200a      	movs	r0, #10
 800a2d4:	f000 ffe0 	bl	800b298 <HAL_Delay>
}
 800a2d8:	bf00      	nop
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelWidth());
 800a2e0:	4b03      	ldr	r3, [pc, #12]	; (800a2f0 <BSP_LCD_GetXSize+0x14>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e6:	4798      	blx	r3
 800a2e8:	4603      	mov	r3, r0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	200011d4 	.word	0x200011d4

0800a2f4 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelHeight());
 800a2f8:	4b03      	ldr	r3, [pc, #12]	; (800a308 <BSP_LCD_GetYSize+0x14>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fe:	4798      	blx	r3
 800a300:	4603      	mov	r3, r0
}
 800a302:	4618      	mov	r0, r3
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	200011d4 	.word	0x200011d4

0800a30c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800a316:	88fb      	ldrh	r3, [r7, #6]
 800a318:	4a03      	ldr	r2, [pc, #12]	; (800a328 <BSP_LCD_SetTextColor+0x1c>)
 800a31a:	6013      	str	r3, [r2, #0]
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	200011c8 	.word	0x200011c8

0800a32c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 800a334:	4a04      	ldr	r2, [pc, #16]	; (800a348 <BSP_LCD_SetFont+0x1c>)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6093      	str	r3, [r2, #8]
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	200011c8 	.word	0x200011c8

0800a34c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 800a34c:	b590      	push	{r4, r7, lr}
 800a34e:	b087      	sub	sp, #28
 800a350:	af00      	add	r7, sp, #0
 800a352:	4603      	mov	r3, r0
 800a354:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 800a35a:	2300      	movs	r3, #0
 800a35c:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor;
 800a35e:	4b15      	ldr	r3, [pc, #84]	; (800a3b4 <BSP_LCD_Clear+0x68>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 800a364:	88fb      	ldrh	r3, [r7, #6]
 800a366:	4a13      	ldr	r2, [pc, #76]	; (800a3b4 <BSP_LCD_Clear+0x68>)
 800a368:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 800a36a:	f7ff ffc3 	bl	800a2f4 <BSP_LCD_GetYSize>
 800a36e:	6138      	str	r0, [r7, #16]

  for (counter = 0; counter < y_size; counter++)
 800a370:	2300      	movs	r3, #0
 800a372:	617b      	str	r3, [r7, #20]
 800a374:	e00d      	b.n	800a392 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	b29c      	uxth	r4, r3
 800a37a:	f7ff ffaf 	bl	800a2dc <BSP_LCD_GetXSize>
 800a37e:	4603      	mov	r3, r0
 800a380:	b29b      	uxth	r3, r3
 800a382:	461a      	mov	r2, r3
 800a384:	4621      	mov	r1, r4
 800a386:	2000      	movs	r0, #0
 800a388:	f000 f8e8 	bl	800a55c <BSP_LCD_DrawHLine>
  for (counter = 0; counter < y_size; counter++)
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	3301      	adds	r3, #1
 800a390:	617b      	str	r3, [r7, #20]
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	429a      	cmp	r2, r3
 800a398:	d3ed      	bcc.n	800a376 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup;
 800a39a:	4a06      	ldr	r2, [pc, #24]	; (800a3b4 <BSP_LCD_Clear+0x68>)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800a3a0:	4b04      	ldr	r3, [pc, #16]	; (800a3b4 <BSP_LCD_Clear+0x68>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7ff ffb0 	bl	800a30c <BSP_LCD_SetTextColor>
}
 800a3ac:	bf00      	nop
 800a3ae:	371c      	adds	r7, #28
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd90      	pop	{r4, r7, pc}
 800a3b4:	200011c8 	.word	0x200011c8

0800a3b8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	80fb      	strh	r3, [r7, #6]
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	80bb      	strh	r3, [r7, #4]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800a3ca:	4b0f      	ldr	r3, [pc, #60]	; (800a408 <BSP_LCD_DisplayChar+0x50>)
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	78fb      	ldrb	r3, [r7, #3]
 800a3d2:	3b20      	subs	r3, #32
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800a3d4:	490c      	ldr	r1, [pc, #48]	; (800a408 <BSP_LCD_DisplayChar+0x50>)
 800a3d6:	6889      	ldr	r1, [r1, #8]
 800a3d8:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800a3da:	fb03 f101 	mul.w	r1, r3, r1
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800a3de:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <BSP_LCD_DisplayChar+0x50>)
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	889b      	ldrh	r3, [r3, #4]
 800a3e4:	3307      	adds	r3, #7
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	da00      	bge.n	800a3ec <BSP_LCD_DisplayChar+0x34>
 800a3ea:	3307      	adds	r3, #7
 800a3ec:	10db      	asrs	r3, r3, #3
 800a3ee:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800a3f2:	441a      	add	r2, r3
 800a3f4:	88b9      	ldrh	r1, [r7, #4]
 800a3f6:	88fb      	ldrh	r3, [r7, #6]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 fc21 	bl	800ac40 <DrawChar>
}
 800a3fe:	bf00      	nop
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	200011c8 	.word	0x200011c8

0800a40c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b088      	sub	sp, #32
 800a410:	af00      	add	r7, sp, #0
 800a412:	60ba      	str	r2, [r7, #8]
 800a414:	461a      	mov	r2, r3
 800a416:	4603      	mov	r3, r0
 800a418:	81fb      	strh	r3, [r7, #14]
 800a41a:	460b      	mov	r3, r1
 800a41c:	81bb      	strh	r3, [r7, #12]
 800a41e:	4613      	mov	r3, r2
 800a420:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800a422:	2301      	movs	r3, #1
 800a424:	83fb      	strh	r3, [r7, #30]
 800a426:	2300      	movs	r3, #0
 800a428:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	61bb      	str	r3, [r7, #24]
 800a42e:	2300      	movs	r3, #0
 800a430:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++)
 800a436:	e002      	b.n	800a43e <BSP_LCD_DisplayStringAt+0x32>
  {
    size ++ ;
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	3301      	adds	r3, #1
 800a43c:	61bb      	str	r3, [r7, #24]
  while (*ptr++)
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	1c5a      	adds	r2, r3, #1
 800a442:	617a      	str	r2, [r7, #20]
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1f6      	bne.n	800a438 <BSP_LCD_DisplayStringAt+0x2c>
  }

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp.pFont->Width);
 800a44a:	f7ff ff47 	bl	800a2dc <BSP_LCD_GetXSize>
 800a44e:	4602      	mov	r2, r0
 800a450:	4b33      	ldr	r3, [pc, #204]	; (800a520 <BSP_LCD_DisplayStringAt+0x114>)
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	889b      	ldrh	r3, [r3, #4]
 800a456:	fbb2 f3f3 	udiv	r3, r2, r3
 800a45a:	613b      	str	r3, [r7, #16]

  switch (Mode)
 800a45c:	79fb      	ldrb	r3, [r7, #7]
 800a45e:	2b03      	cmp	r3, #3
 800a460:	d014      	beq.n	800a48c <BSP_LCD_DisplayStringAt+0x80>
 800a462:	2b03      	cmp	r3, #3
 800a464:	dc23      	bgt.n	800a4ae <BSP_LCD_DisplayStringAt+0xa2>
 800a466:	2b01      	cmp	r3, #1
 800a468:	d002      	beq.n	800a470 <BSP_LCD_DisplayStringAt+0x64>
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d011      	beq.n	800a492 <BSP_LCD_DisplayStringAt+0x86>
 800a46e:	e01e      	b.n	800a4ae <BSP_LCD_DisplayStringAt+0xa2>
  {
    case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size) * DrawProp.pFont->Width) / 2;
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	4a2a      	ldr	r2, [pc, #168]	; (800a520 <BSP_LCD_DisplayStringAt+0x114>)
 800a478:	6892      	ldr	r2, [r2, #8]
 800a47a:	8892      	ldrh	r2, [r2, #4]
 800a47c:	fb02 f303 	mul.w	r3, r2, r3
 800a480:	085b      	lsrs	r3, r3, #1
 800a482:	b29a      	uxth	r2, r3
 800a484:	89fb      	ldrh	r3, [r7, #14]
 800a486:	4413      	add	r3, r2
 800a488:	83fb      	strh	r3, [r7, #30]
      break;
 800a48a:	e013      	b.n	800a4b4 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case LEFT_MODE:
    {
      refcolumn = Xpos;
 800a48c:	89fb      	ldrh	r3, [r7, #14]
 800a48e:	83fb      	strh	r3, [r7, #30]
      break;
 800a490:	e010      	b.n	800a4b4 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size) * DrawProp.pFont->Width);
 800a492:	693a      	ldr	r2, [r7, #16]
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	b29a      	uxth	r2, r3
 800a49a:	4b21      	ldr	r3, [pc, #132]	; (800a520 <BSP_LCD_DisplayStringAt+0x114>)
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	889b      	ldrh	r3, [r3, #4]
 800a4a0:	fb12 f303 	smulbb	r3, r2, r3
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	89fb      	ldrh	r3, [r7, #14]
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	83fb      	strh	r3, [r7, #30]
      break;
 800a4ac:	e002      	b.n	800a4b4 <BSP_LCD_DisplayStringAt+0xa8>
    }
    default:
    {
      refcolumn = Xpos;
 800a4ae:	89fb      	ldrh	r3, [r7, #14]
 800a4b0:	83fb      	strh	r3, [r7, #30]
      break;
 800a4b2:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800a4b4:	8bfb      	ldrh	r3, [r7, #30]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d003      	beq.n	800a4c2 <BSP_LCD_DisplayStringAt+0xb6>
 800a4ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	da15      	bge.n	800a4ee <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800a4c6:	e012      	b.n	800a4ee <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	781a      	ldrb	r2, [r3, #0]
 800a4cc:	89b9      	ldrh	r1, [r7, #12]
 800a4ce:	8bfb      	ldrh	r3, [r7, #30]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7ff ff71 	bl	800a3b8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800a4d6:	4b12      	ldr	r3, [pc, #72]	; (800a520 <BSP_LCD_DisplayStringAt+0x114>)
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	889a      	ldrh	r2, [r3, #4]
 800a4dc:	8bfb      	ldrh	r3, [r7, #30]
 800a4de:	4413      	add	r3, r2
 800a4e0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	60bb      	str	r3, [r7, #8]
    i++;
 800a4e8:	8bbb      	ldrh	r3, [r7, #28]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00f      	beq.n	800a516 <BSP_LCD_DisplayStringAt+0x10a>
 800a4f6:	f7ff fef1 	bl	800a2dc <BSP_LCD_GetXSize>
 800a4fa:	4601      	mov	r1, r0
 800a4fc:	8bbb      	ldrh	r3, [r7, #28]
 800a4fe:	4a08      	ldr	r2, [pc, #32]	; (800a520 <BSP_LCD_DisplayStringAt+0x114>)
 800a500:	6892      	ldr	r2, [r2, #8]
 800a502:	8892      	ldrh	r2, [r2, #4]
 800a504:	fb02 f303 	mul.w	r3, r2, r3
 800a508:	1acb      	subs	r3, r1, r3
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	4a04      	ldr	r2, [pc, #16]	; (800a520 <BSP_LCD_DisplayStringAt+0x114>)
 800a50e:	6892      	ldr	r2, [r2, #8]
 800a510:	8892      	ldrh	r2, [r2, #4]
 800a512:	4293      	cmp	r3, r2
 800a514:	d2d8      	bcs.n	800a4c8 <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 800a516:	bf00      	nop
 800a518:	3720      	adds	r7, #32
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	200011c8 	.word	0x200011c8

0800a524 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	4603      	mov	r3, r0
 800a52c:	80fb      	strh	r3, [r7, #6]
 800a52e:	460b      	mov	r3, r1
 800a530:	80bb      	strh	r3, [r7, #4]
 800a532:	4613      	mov	r3, r2
 800a534:	807b      	strh	r3, [r7, #2]
  if (LcdDrv->WritePixel != NULL)
 800a536:	4b08      	ldr	r3, [pc, #32]	; (800a558 <BSP_LCD_DrawPixel+0x34>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d006      	beq.n	800a54e <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 800a540:	4b05      	ldr	r3, [pc, #20]	; (800a558 <BSP_LCD_DrawPixel+0x34>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	887a      	ldrh	r2, [r7, #2]
 800a548:	88b9      	ldrh	r1, [r7, #4]
 800a54a:	88f8      	ldrh	r0, [r7, #6]
 800a54c:	4798      	blx	r3
  }
}
 800a54e:	bf00      	nop
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	200011d4 	.word	0x200011d4

0800a55c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800a55c:	b590      	push	{r4, r7, lr}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	80fb      	strh	r3, [r7, #6]
 800a566:	460b      	mov	r3, r1
 800a568:	80bb      	strh	r3, [r7, #4]
 800a56a:	4613      	mov	r3, r2
 800a56c:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	60fb      	str	r3, [r7, #12]

  if (LcdDrv->DrawHLine != NULL)
 800a572:	4b15      	ldr	r3, [pc, #84]	; (800a5c8 <BSP_LCD_DrawHLine+0x6c>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6a1b      	ldr	r3, [r3, #32]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00a      	beq.n	800a592 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800a57c:	4b12      	ldr	r3, [pc, #72]	; (800a5c8 <BSP_LCD_DrawHLine+0x6c>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6a1c      	ldr	r4, [r3, #32]
 800a582:	4b12      	ldr	r3, [pc, #72]	; (800a5cc <BSP_LCD_DrawHLine+0x70>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	b298      	uxth	r0, r3
 800a588:	887b      	ldrh	r3, [r7, #2]
 800a58a:	88ba      	ldrh	r2, [r7, #4]
 800a58c:	88f9      	ldrh	r1, [r7, #6]
 800a58e:	47a0      	blx	r4
    for (index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800a590:	e015      	b.n	800a5be <BSP_LCD_DrawHLine+0x62>
    for (index = 0; index < Length; index++)
 800a592:	2300      	movs	r3, #0
 800a594:	60fb      	str	r3, [r7, #12]
 800a596:	e00e      	b.n	800a5b6 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	88fb      	ldrh	r3, [r7, #6]
 800a59e:	4413      	add	r3, r2
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	4a0a      	ldr	r2, [pc, #40]	; (800a5cc <BSP_LCD_DrawHLine+0x70>)
 800a5a4:	6812      	ldr	r2, [r2, #0]
 800a5a6:	b292      	uxth	r2, r2
 800a5a8:	88b9      	ldrh	r1, [r7, #4]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7ff ffba 	bl	800a524 <BSP_LCD_DrawPixel>
    for (index = 0; index < Length; index++)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	60fb      	str	r3, [r7, #12]
 800a5b6:	887b      	ldrh	r3, [r7, #2]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d3ec      	bcc.n	800a598 <BSP_LCD_DrawHLine+0x3c>
}
 800a5be:	bf00      	nop
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd90      	pop	{r4, r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	200011d4 	.word	0x200011d4
 800a5cc:	200011c8 	.word	0x200011c8

0800a5d0 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	80fb      	strh	r3, [r7, #6]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	80bb      	strh	r3, [r7, #4]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */

  decision = 3 - (Radius << 1);
 800a5e2:	887b      	ldrh	r3, [r7, #2]
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	f1c3 0303 	rsb	r3, r3, #3
 800a5ea:	617b      	str	r3, [r7, #20]
  current_x = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800a5f0:	887b      	ldrh	r3, [r7, #2]
 800a5f2:	60fb      	str	r3, [r7, #12]

  while (current_x <= current_y)
 800a5f4:	e09a      	b.n	800a72c <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	88fb      	ldrh	r3, [r7, #6]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	b298      	uxth	r0, r3
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	b29b      	uxth	r3, r3
 800a604:	88ba      	ldrh	r2, [r7, #4]
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	b29b      	uxth	r3, r3
 800a60a:	4a4d      	ldr	r2, [pc, #308]	; (800a740 <BSP_LCD_DrawCircle+0x170>)
 800a60c:	6812      	ldr	r2, [r2, #0]
 800a60e:	b292      	uxth	r2, r2
 800a610:	4619      	mov	r1, r3
 800a612:	f7ff ff87 	bl	800a524 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	b29b      	uxth	r3, r3
 800a61a:	88fa      	ldrh	r2, [r7, #6]
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	b298      	uxth	r0, r3
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	b29b      	uxth	r3, r3
 800a624:	88ba      	ldrh	r2, [r7, #4]
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	b29b      	uxth	r3, r3
 800a62a:	4a45      	ldr	r2, [pc, #276]	; (800a740 <BSP_LCD_DrawCircle+0x170>)
 800a62c:	6812      	ldr	r2, [r2, #0]
 800a62e:	b292      	uxth	r2, r2
 800a630:	4619      	mov	r1, r3
 800a632:	f7ff ff77 	bl	800a524 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	b29a      	uxth	r2, r3
 800a63a:	88fb      	ldrh	r3, [r7, #6]
 800a63c:	4413      	add	r3, r2
 800a63e:	b298      	uxth	r0, r3
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	b29b      	uxth	r3, r3
 800a644:	88ba      	ldrh	r2, [r7, #4]
 800a646:	1ad3      	subs	r3, r2, r3
 800a648:	b29b      	uxth	r3, r3
 800a64a:	4a3d      	ldr	r2, [pc, #244]	; (800a740 <BSP_LCD_DrawCircle+0x170>)
 800a64c:	6812      	ldr	r2, [r2, #0]
 800a64e:	b292      	uxth	r2, r2
 800a650:	4619      	mov	r1, r3
 800a652:	f7ff ff67 	bl	800a524 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	88fa      	ldrh	r2, [r7, #6]
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	b298      	uxth	r0, r3
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	b29b      	uxth	r3, r3
 800a664:	88ba      	ldrh	r2, [r7, #4]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	b29b      	uxth	r3, r3
 800a66a:	4a35      	ldr	r2, [pc, #212]	; (800a740 <BSP_LCD_DrawCircle+0x170>)
 800a66c:	6812      	ldr	r2, [r2, #0]
 800a66e:	b292      	uxth	r2, r2
 800a670:	4619      	mov	r1, r3
 800a672:	f7ff ff57 	bl	800a524 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	b29a      	uxth	r2, r3
 800a67a:	88fb      	ldrh	r3, [r7, #6]
 800a67c:	4413      	add	r3, r2
 800a67e:	b298      	uxth	r0, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	b29a      	uxth	r2, r3
 800a684:	88bb      	ldrh	r3, [r7, #4]
 800a686:	4413      	add	r3, r2
 800a688:	b29b      	uxth	r3, r3
 800a68a:	4a2d      	ldr	r2, [pc, #180]	; (800a740 <BSP_LCD_DrawCircle+0x170>)
 800a68c:	6812      	ldr	r2, [r2, #0]
 800a68e:	b292      	uxth	r2, r2
 800a690:	4619      	mov	r1, r3
 800a692:	f7ff ff47 	bl	800a524 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	b29b      	uxth	r3, r3
 800a69a:	88fa      	ldrh	r2, [r7, #6]
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	b298      	uxth	r0, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	88bb      	ldrh	r3, [r7, #4]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	4a25      	ldr	r2, [pc, #148]	; (800a740 <BSP_LCD_DrawCircle+0x170>)
 800a6ac:	6812      	ldr	r2, [r2, #0]
 800a6ae:	b292      	uxth	r2, r2
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	f7ff ff37 	bl	800a524 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	88fb      	ldrh	r3, [r7, #6]
 800a6bc:	4413      	add	r3, r2
 800a6be:	b298      	uxth	r0, r3
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	88bb      	ldrh	r3, [r7, #4]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	4a1d      	ldr	r2, [pc, #116]	; (800a740 <BSP_LCD_DrawCircle+0x170>)
 800a6cc:	6812      	ldr	r2, [r2, #0]
 800a6ce:	b292      	uxth	r2, r2
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	f7ff ff27 	bl	800a524 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	88fa      	ldrh	r2, [r7, #6]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	b298      	uxth	r0, r3
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	88bb      	ldrh	r3, [r7, #4]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	4a15      	ldr	r2, [pc, #84]	; (800a740 <BSP_LCD_DrawCircle+0x170>)
 800a6ec:	6812      	ldr	r2, [r2, #0]
 800a6ee:	b292      	uxth	r2, r2
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	f7ff ff17 	bl	800a524 <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800a6f6:	4813      	ldr	r0, [pc, #76]	; (800a744 <BSP_LCD_DrawCircle+0x174>)
 800a6f8:	f7ff fe18 	bl	800a32c <BSP_LCD_SetFont>

    if (decision < 0)
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	da06      	bge.n	800a710 <BSP_LCD_DrawCircle+0x140>
    {
      decision += (current_x << 2) + 6;
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	009a      	lsls	r2, r3, #2
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	4413      	add	r3, r2
 800a70a:	3306      	adds	r3, #6
 800a70c:	617b      	str	r3, [r7, #20]
 800a70e:	e00a      	b.n	800a726 <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800a710:	693a      	ldr	r2, [r7, #16]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	009a      	lsls	r2, r3, #2
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	4413      	add	r3, r2
 800a71c:	330a      	adds	r3, #10
 800a71e:	617b      	str	r3, [r7, #20]
      current_y--;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	3b01      	subs	r3, #1
 800a724:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	3301      	adds	r3, #1
 800a72a:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	429a      	cmp	r2, r3
 800a732:	f67f af60 	bls.w	800a5f6 <BSP_LCD_DrawCircle+0x26>
  }
}
 800a736:	bf00      	nop
 800a738:	bf00      	nop
 800a73a:	3718      	adds	r7, #24
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	200011c8 	.word	0x200011c8
 800a744:	20000540 	.word	0x20000540

0800a748 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	4603      	mov	r3, r0
 800a750:	80fb      	strh	r3, [r7, #6]
 800a752:	460b      	mov	r3, r1
 800a754:	80bb      	strh	r3, [r7, #4]
 800a756:	4613      	mov	r3, r2
 800a758:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */

  decision = 3 - (Radius << 1);
 800a75a:	887b      	ldrh	r3, [r7, #2]
 800a75c:	005b      	lsls	r3, r3, #1
 800a75e:	f1c3 0303 	rsb	r3, r3, #3
 800a762:	617b      	str	r3, [r7, #20]

  current_x = 0;
 800a764:	2300      	movs	r3, #0
 800a766:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800a768:	887b      	ldrh	r3, [r7, #2]
 800a76a:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800a76c:	4b3e      	ldr	r3, [pc, #248]	; (800a868 <BSP_LCD_FillCircle+0x120>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	b29b      	uxth	r3, r3
 800a772:	4618      	mov	r0, r3
 800a774:	f7ff fdca 	bl	800a30c <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 800a778:	e061      	b.n	800a83e <BSP_LCD_FillCircle+0xf6>
  {
    if (current_y > 0)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d021      	beq.n	800a7c4 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2 * current_y);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	b29b      	uxth	r3, r3
 800a784:	88fa      	ldrh	r2, [r7, #6]
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	b298      	uxth	r0, r3
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	88bb      	ldrh	r3, [r7, #4]
 800a790:	4413      	add	r3, r2
 800a792:	b299      	uxth	r1, r3
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	b29b      	uxth	r3, r3
 800a798:	005b      	lsls	r3, r3, #1
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	461a      	mov	r2, r3
 800a79e:	f7ff fedd 	bl	800a55c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2 * current_y);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	88fa      	ldrh	r2, [r7, #6]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	b298      	uxth	r0, r3
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	88ba      	ldrh	r2, [r7, #4]
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	b299      	uxth	r1, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	005b      	lsls	r3, r3, #1
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	461a      	mov	r2, r3
 800a7c0:	f7ff fecc 	bl	800a55c <BSP_LCD_DrawHLine>
    }

    if (current_x > 0)
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d021      	beq.n	800a80e <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2 * current_x);
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	88fa      	ldrh	r2, [r7, #6]
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	b298      	uxth	r0, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	88ba      	ldrh	r2, [r7, #4]
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	b299      	uxth	r1, r3
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	005b      	lsls	r3, r3, #1
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	f7ff feb8 	bl	800a55c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2 * current_x);
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	88fa      	ldrh	r2, [r7, #6]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	b298      	uxth	r0, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	88bb      	ldrh	r3, [r7, #4]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	b299      	uxth	r1, r3
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	b29b      	uxth	r3, r3
 800a804:	005b      	lsls	r3, r3, #1
 800a806:	b29b      	uxth	r3, r3
 800a808:	461a      	mov	r2, r3
 800a80a:	f7ff fea7 	bl	800a55c <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	2b00      	cmp	r3, #0
 800a812:	da06      	bge.n	800a822 <BSP_LCD_FillCircle+0xda>
    {
      decision += (current_x << 2) + 6;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	009a      	lsls	r2, r3, #2
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	4413      	add	r3, r2
 800a81c:	3306      	adds	r3, #6
 800a81e:	617b      	str	r3, [r7, #20]
 800a820:	e00a      	b.n	800a838 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	1ad3      	subs	r3, r2, r3
 800a828:	009a      	lsls	r2, r3, #2
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	4413      	add	r3, r2
 800a82e:	330a      	adds	r3, #10
 800a830:	617b      	str	r3, [r7, #20]
      current_y--;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	3b01      	subs	r3, #1
 800a836:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	3301      	adds	r3, #1
 800a83c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800a83e:	693a      	ldr	r2, [r7, #16]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	429a      	cmp	r2, r3
 800a844:	d999      	bls.n	800a77a <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800a846:	4b08      	ldr	r3, [pc, #32]	; (800a868 <BSP_LCD_FillCircle+0x120>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7ff fd5d 	bl	800a30c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800a852:	887a      	ldrh	r2, [r7, #2]
 800a854:	88b9      	ldrh	r1, [r7, #4]
 800a856:	88fb      	ldrh	r3, [r7, #6]
 800a858:	4618      	mov	r0, r3
 800a85a:	f7ff feb9 	bl	800a5d0 <BSP_LCD_DrawCircle>
}
 800a85e:	bf00      	nop
 800a860:	3718      	adds	r7, #24
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	200011c8 	.word	0x200011c8

0800a86c <BSP_LCD_DisplayOn>:
  * @brief  Enables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
  LcdDrv->DisplayOn();
 800a870:	4b02      	ldr	r3, [pc, #8]	; (800a87c <BSP_LCD_DisplayOn+0x10>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	4798      	blx	r3
}
 800a878:	bf00      	nop
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	200011d4 	.word	0x200011d4

0800a880 <BSP_LCD_DisplayOff>:
  * @brief  Disables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
  LcdDrv->DisplayOff();
 800a884:	4b02      	ldr	r3, [pc, #8]	; (800a890 <BSP_LCD_DisplayOff+0x10>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	4798      	blx	r3
}
 800a88c:	bf00      	nop
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	200011d4 	.word	0x200011d4

0800a894 <BSP_LCD_ScreenDimmingConfig>:
  * @param  step    : step value in percent
  * @param  delay   : delay in milliseconds between each step
  * @retval None
  */
void BSP_LCD_ScreenDimmingConfig(const uint8_t start, const uint8_t stop, const uint8_t step, const uint8_t delay)
{
 800a894:	b490      	push	{r4, r7}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4604      	mov	r4, r0
 800a89c:	4608      	mov	r0, r1
 800a89e:	4611      	mov	r1, r2
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	4623      	mov	r3, r4
 800a8a4:	71fb      	strb	r3, [r7, #7]
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	71bb      	strb	r3, [r7, #6]
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	717b      	strb	r3, [r7, #5]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	713b      	strb	r3, [r7, #4]
  if ((dimming_config.ongoing == 0)
 800a8b2:	4b10      	ldr	r3, [pc, #64]	; (800a8f4 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d117      	bne.n	800a8ea <BSP_LCD_ScreenDimmingConfig+0x56>
      && (start <= 100) && (stop <= 100)
 800a8ba:	79fb      	ldrb	r3, [r7, #7]
 800a8bc:	2b64      	cmp	r3, #100	; 0x64
 800a8be:	d814      	bhi.n	800a8ea <BSP_LCD_ScreenDimmingConfig+0x56>
 800a8c0:	79bb      	ldrb	r3, [r7, #6]
 800a8c2:	2b64      	cmp	r3, #100	; 0x64
 800a8c4:	d811      	bhi.n	800a8ea <BSP_LCD_ScreenDimmingConfig+0x56>
      && (step > 0) && (step < 100))
 800a8c6:	797b      	ldrb	r3, [r7, #5]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00e      	beq.n	800a8ea <BSP_LCD_ScreenDimmingConfig+0x56>
 800a8cc:	797b      	ldrb	r3, [r7, #5]
 800a8ce:	2b63      	cmp	r3, #99	; 0x63
 800a8d0:	d80b      	bhi.n	800a8ea <BSP_LCD_ScreenDimmingConfig+0x56>
  {
    dimming_config.start = start;
 800a8d2:	4a08      	ldr	r2, [pc, #32]	; (800a8f4 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a8d4:	79fb      	ldrb	r3, [r7, #7]
 800a8d6:	7053      	strb	r3, [r2, #1]
    dimming_config.stop  = stop;
 800a8d8:	4a06      	ldr	r2, [pc, #24]	; (800a8f4 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a8da:	79bb      	ldrb	r3, [r7, #6]
 800a8dc:	7093      	strb	r3, [r2, #2]
    dimming_config.step  = step;
 800a8de:	4a05      	ldr	r2, [pc, #20]	; (800a8f4 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a8e0:	797b      	ldrb	r3, [r7, #5]
 800a8e2:	70d3      	strb	r3, [r2, #3]
    dimming_config.delay = delay;
 800a8e4:	4a03      	ldr	r2, [pc, #12]	; (800a8f4 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a8e6:	793b      	ldrb	r3, [r7, #4]
 800a8e8:	7113      	strb	r3, [r2, #4]
  }
}
 800a8ea:	bf00      	nop
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bc90      	pop	{r4, r7}
 800a8f2:	4770      	bx	lr
 800a8f4:	2000054c 	.word	0x2000054c

0800a8f8 <BSP_LCD_ScreenDimmingOn>:
  * @note   Screen brightness is gradually decreased
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOn(void)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
  }


#else
  /* Counter Prescaler value */
  uint32_t uhPrescalerValue = 0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	603b      	str	r3, [r7, #0]
  int32_t   step;

  /* Reject this while ongoing dimming */
  if (dimming_config.ongoing)
 800a902:	4b71      	ldr	r3, [pc, #452]	; (800aac8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	f040 80d9 	bne.w	800aabe <BSP_LCD_ScreenDimmingOn+0x1c6>
  {
    return;
  }

  /* Set that dim feature is active */
  dimming_on = 1;
 800a90c:	4b6f      	ldr	r3, [pc, #444]	; (800aacc <BSP_LCD_ScreenDimmingOn+0x1d4>)
 800a90e:	2201      	movs	r2, #1
 800a910:	601a      	str	r2, [r3, #0]
  dimming_config.ongoing = 1;
 800a912:	4b6d      	ldr	r3, [pc, #436]	; (800aac8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a914:	2201      	movs	r2, #1
 800a916:	701a      	strb	r2, [r3, #0]

  if (dimming_config.stop > dimming_config.start)
 800a918:	4b6b      	ldr	r3, [pc, #428]	; (800aac8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a91a:	789a      	ldrb	r2, [r3, #2]
 800a91c:	4b6a      	ldr	r3, [pc, #424]	; (800aac8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a91e:	785b      	ldrb	r3, [r3, #1]
 800a920:	429a      	cmp	r2, r3
 800a922:	d903      	bls.n	800a92c <BSP_LCD_ScreenDimmingOn+0x34>
  {
    step      = dimming_config.step;
 800a924:	4b68      	ldr	r3, [pc, #416]	; (800aac8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a926:	78db      	ldrb	r3, [r3, #3]
 800a928:	607b      	str	r3, [r7, #4]
 800a92a:	e003      	b.n	800a934 <BSP_LCD_ScreenDimmingOn+0x3c>
  }
  else
  {
    step      = -dimming_config.step;
 800a92c:	4b66      	ldr	r3, [pc, #408]	; (800aac8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a92e:	78db      	ldrb	r3, [r3, #3]
 800a930:	425b      	negs	r3, r3
 800a932:	607b      	str	r3, [r7, #4]

  /* Always redo the full initialization as there is no apriori knowledge
    of IO or timer settings at this point (may have been modified by application) */

  /* Compute the prescaler value to have TIM1 counter clock equal to 16000000 Hz */
  uhPrescalerValue = (uint32_t)(SystemCoreClock / 16000000) - 1;
 800a934:	4b66      	ldr	r3, [pc, #408]	; (800aad0 <BSP_LCD_ScreenDimmingOn+0x1d8>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a66      	ldr	r2, [pc, #408]	; (800aad4 <BSP_LCD_ScreenDimmingOn+0x1dc>)
 800a93a:	fba2 2303 	umull	r2, r3, r2, r3
 800a93e:	0d9b      	lsrs	r3, r3, #22
 800a940:	3b01      	subs	r3, #1
 800a942:	603b      	str	r3, [r7, #0]

  LCD_TimHandle.Instance = TIMx;
 800a944:	4b64      	ldr	r3, [pc, #400]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a946:	4a65      	ldr	r2, [pc, #404]	; (800aadc <BSP_LCD_ScreenDimmingOn+0x1e4>)
 800a948:	601a      	str	r2, [r3, #0]

  __HAL_TIM_RESET_HANDLE_STATE(&LCD_TimHandle); /* to force MSP call */
 800a94a:	4b63      	ldr	r3, [pc, #396]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a952:	4b61      	ldr	r3, [pc, #388]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a954:	2200      	movs	r2, #0
 800a956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a95a:	4b5f      	ldr	r3, [pc, #380]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a962:	4b5d      	ldr	r3, [pc, #372]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a964:	2200      	movs	r2, #0
 800a966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a96a:	4b5b      	ldr	r3, [pc, #364]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a972:	4b59      	ldr	r3, [pc, #356]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a97a:	4b57      	ldr	r3, [pc, #348]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a982:	4b55      	ldr	r3, [pc, #340]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a98a:	4b53      	ldr	r3, [pc, #332]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a992:	4b51      	ldr	r3, [pc, #324]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a994:	2200      	movs	r2, #0
 800a996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a99a:	4b4f      	ldr	r3, [pc, #316]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800a9a2:	4b4d      	ldr	r3, [pc, #308]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  LCD_TimHandle.Init.Prescaler         = uhPrescalerValue;
 800a9aa:	4a4b      	ldr	r2, [pc, #300]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	6053      	str	r3, [r2, #4]
  LCD_TimHandle.Init.Period            = PERIOD_VALUE;
 800a9b0:	4b49      	ldr	r3, [pc, #292]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a9b2:	f240 2299 	movw	r2, #665	; 0x299
 800a9b6:	60da      	str	r2, [r3, #12]
  LCD_TimHandle.Init.ClockDivision     = 0;
 800a9b8:	4b47      	ldr	r3, [pc, #284]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	611a      	str	r2, [r3, #16]
  LCD_TimHandle.Init.CounterMode       = (step > 0 ? TIM_COUNTERMODE_DOWN : TIM_COUNTERMODE_UP);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	dd01      	ble.n	800a9c8 <BSP_LCD_ScreenDimmingOn+0xd0>
 800a9c4:	2310      	movs	r3, #16
 800a9c6:	e000      	b.n	800a9ca <BSP_LCD_ScreenDimmingOn+0xd2>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	4a43      	ldr	r2, [pc, #268]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a9cc:	6093      	str	r3, [r2, #8]
  LCD_TimHandle.Init.RepetitionCounter = 0;
 800a9ce:	4b42      	ldr	r3, [pc, #264]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&LCD_TimHandle) != HAL_OK)
 800a9d4:	4840      	ldr	r0, [pc, #256]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a9d6:	f008 fa5f 	bl	8012e98 <HAL_TIM_PWM_Init>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <BSP_LCD_ScreenDimmingOn+0xec>
  {
    /* Initialization Error */
    BSP_ErrorHandler();
 800a9e0:	f7fe fd7d 	bl	80094de <BSP_ErrorHandler>
  }

  /* Common configuration for all channels */
  LCD_sConfig.OCMode       = TIM_OCMODE_PWM1;
 800a9e4:	4b3e      	ldr	r3, [pc, #248]	; (800aae0 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a9e6:	2260      	movs	r2, #96	; 0x60
 800a9e8:	601a      	str	r2, [r3, #0]
  LCD_sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800a9ea:	4b3d      	ldr	r3, [pc, #244]	; (800aae0 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	609a      	str	r2, [r3, #8]
  LCD_sConfig.OCFastMode   = TIM_OCFAST_DISABLE;
 800a9f0:	4b3b      	ldr	r3, [pc, #236]	; (800aae0 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	611a      	str	r2, [r3, #16]
  LCD_sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800a9f6:	4b3a      	ldr	r3, [pc, #232]	; (800aae0 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	60da      	str	r2, [r3, #12]
  LCD_sConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a9fc:	4b38      	ldr	r3, [pc, #224]	; (800aae0 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	619a      	str	r2, [r3, #24]

  LCD_sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800aa02:	4b37      	ldr	r3, [pc, #220]	; (800aae0 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	615a      	str	r2, [r3, #20]

  /* Set the pulse value for channel */
  LCD_sConfig.Pulse = __DIMMING_CYCLE_VALUE(dimming_config.start);
 800aa08:	4b2f      	ldr	r3, [pc, #188]	; (800aac8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800aa0a:	785b      	ldrb	r3, [r3, #1]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	f240 2399 	movw	r3, #665	; 0x299
 800aa12:	fb02 f303 	mul.w	r3, r2, r3
 800aa16:	4a33      	ldr	r2, [pc, #204]	; (800aae4 <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800aa18:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1c:	095b      	lsrs	r3, r3, #5
 800aa1e:	4a30      	ldr	r2, [pc, #192]	; (800aae0 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800aa20:	6053      	str	r3, [r2, #4]
  if (HAL_TIM_PWM_ConfigChannel(&LCD_TimHandle, &LCD_sConfig, TIMx_CHANNEL) != HAL_OK)
 800aa22:	220c      	movs	r2, #12
 800aa24:	492e      	ldr	r1, [pc, #184]	; (800aae0 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800aa26:	482c      	ldr	r0, [pc, #176]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800aa28:	f008 fc2a 	bl	8013280 <HAL_TIM_PWM_ConfigChannel>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d001      	beq.n	800aa36 <BSP_LCD_ScreenDimmingOn+0x13e>
  {
    /* Configuration Error */
    BSP_ErrorHandler();
 800aa32:	f7fe fd54 	bl	80094de <BSP_ErrorHandler>
  }

  /* Start Timer channel */
  if (HAL_TIM_PWM_Start(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800aa36:	210c      	movs	r1, #12
 800aa38:	4827      	ldr	r0, [pc, #156]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800aa3a:	f008 fa85 	bl	8012f48 <HAL_TIM_PWM_Start>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <BSP_LCD_ScreenDimmingOn+0x150>
  {
    /* PWM Generation Error */
    BSP_ErrorHandler();
 800aa44:	f7fe fd4b 	bl	80094de <BSP_ErrorHandler>
  }

  /* Set the pulse value for the timer channel */
  i = dimming_config.start;
 800aa48:	4b1f      	ldr	r3, [pc, #124]	; (800aac8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800aa4a:	785b      	ldrb	r3, [r3, #1]
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	4b26      	ldr	r3, [pc, #152]	; (800aae8 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800aa50:	601a      	str	r2, [r3, #0]
  while (dimming_config.ongoing)
 800aa52:	e02f      	b.n	800aab4 <BSP_LCD_ScreenDimmingOn+0x1bc>
  {
    __HAL_TIM_SET_COMPARE(&LCD_TimHandle, TIMx_CHANNEL, __DIMMING_CYCLE_VALUE(i));
 800aa54:	4b24      	ldr	r3, [pc, #144]	; (800aae8 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f240 2299 	movw	r2, #665	; 0x299
 800aa5c:	fb03 f202 	mul.w	r2, r3, r2
 800aa60:	4b1d      	ldr	r3, [pc, #116]	; (800aad8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	491f      	ldr	r1, [pc, #124]	; (800aae4 <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800aa66:	fba1 1202 	umull	r1, r2, r1, r2
 800aa6a:	0952      	lsrs	r2, r2, #5
 800aa6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Exit if stop is reached */
    if (((step > 0) && (i >= dimming_config.stop))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	dd06      	ble.n	800aa82 <BSP_LCD_ScreenDimmingOn+0x18a>
 800aa74:	4b14      	ldr	r3, [pc, #80]	; (800aac8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800aa76:	789b      	ldrb	r3, [r3, #2]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	4b1b      	ldr	r3, [pc, #108]	; (800aae8 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d909      	bls.n	800aa96 <BSP_LCD_ScreenDimmingOn+0x19e>
        || ((step < 0) && (i <= dimming_config.stop)))
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	da0a      	bge.n	800aa9e <BSP_LCD_ScreenDimmingOn+0x1a6>
 800aa88:	4b0f      	ldr	r3, [pc, #60]	; (800aac8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800aa8a:	789b      	ldrb	r3, [r3, #2]
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	4b16      	ldr	r3, [pc, #88]	; (800aae8 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d303      	bcc.n	800aa9e <BSP_LCD_ScreenDimmingOn+0x1a6>
    {
      dimming_config.ongoing = 0;
 800aa96:	4b0c      	ldr	r3, [pc, #48]	; (800aac8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	701a      	strb	r2, [r3, #0]
 800aa9c:	e00a      	b.n	800aab4 <BSP_LCD_ScreenDimmingOn+0x1bc>
    }
    else
    {
      HAL_Delay(dimming_config.delay);
 800aa9e:	4b0a      	ldr	r3, [pc, #40]	; (800aac8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800aaa0:	791b      	ldrb	r3, [r3, #4]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f000 fbf8 	bl	800b298 <HAL_Delay>
      i += step;
 800aaa8:	4b0f      	ldr	r3, [pc, #60]	; (800aae8 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4413      	add	r3, r2
 800aab0:	4a0d      	ldr	r2, [pc, #52]	; (800aae8 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800aab2:	6013      	str	r3, [r2, #0]
  while (dimming_config.ongoing)
 800aab4:	4b04      	ldr	r3, [pc, #16]	; (800aac8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1cb      	bne.n	800aa54 <BSP_LCD_ScreenDimmingOn+0x15c>
 800aabc:	e000      	b.n	800aac0 <BSP_LCD_ScreenDimmingOn+0x1c8>
    return;
 800aabe:	bf00      	nop
    }
  }
#endif
}
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	2000054c 	.word	0x2000054c
 800aacc:	20001158 	.word	0x20001158
 800aad0:	20000198 	.word	0x20000198
 800aad4:	431bde83 	.word	0x431bde83
 800aad8:	2000115c 	.word	0x2000115c
 800aadc:	40000c00 	.word	0x40000c00
 800aae0:	200011a8 	.word	0x200011a8
 800aae4:	51eb851f 	.word	0x51eb851f
 800aae8:	200011d8 	.word	0x200011d8

0800aaec <BSP_LCD_ScreenDimmingOff>:
  * @note   Screen brightness is immediately set to its highest level
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOff(void)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	af00      	add	r7, sp, #0
#if defined(LPTIMER_DIMMING)
  GPIO_InitTypeDef GPIO_InitStructure;
#endif

  if (dimming_on == 1)
 800aaf0:	4b0d      	ldr	r3, [pc, #52]	; (800ab28 <BSP_LCD_ScreenDimmingOff+0x3c>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d114      	bne.n	800ab22 <BSP_LCD_ScreenDimmingOff+0x36>
  {
    /* Stop ongoing dimming */
    dimming_config.ongoing = 0;
 800aaf8:	4b0c      	ldr	r3, [pc, #48]	; (800ab2c <BSP_LCD_ScreenDimmingOff+0x40>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	701a      	strb	r2, [r3, #0]

    /* Disable timer clock for power consumption reasons */
    __HAL_RCC_LPTIM1_CLK_DISABLE();
#else
    /* Stop Timer channel */
    if (HAL_TIM_PWM_Stop(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800aafe:	210c      	movs	r1, #12
 800ab00:	480b      	ldr	r0, [pc, #44]	; (800ab30 <BSP_LCD_ScreenDimmingOff+0x44>)
 800ab02:	f008 fb27 	bl	8013154 <HAL_TIM_PWM_Stop>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d001      	beq.n	800ab10 <BSP_LCD_ScreenDimmingOff+0x24>
    {
      /* PWM Generation Error */
      BSP_ErrorHandler();
 800ab0c:	f7fe fce7 	bl	80094de <BSP_ErrorHandler>
    }

    /* Disable timer clock for power consumption reasons */
    TIMx_CLK_DISABLE();
 800ab10:	4b08      	ldr	r3, [pc, #32]	; (800ab34 <BSP_LCD_ScreenDimmingOff+0x48>)
 800ab12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab14:	4a07      	ldr	r2, [pc, #28]	; (800ab34 <BSP_LCD_ScreenDimmingOff+0x48>)
 800ab16:	f023 0308 	bic.w	r3, r3, #8
 800ab1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif

    dimming_on = 0;
 800ab1c:	4b02      	ldr	r3, [pc, #8]	; (800ab28 <BSP_LCD_ScreenDimmingOff+0x3c>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	601a      	str	r2, [r3, #0]
  }
}
 800ab22:	bf00      	nop
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	20001158 	.word	0x20001158
 800ab2c:	2000054c 	.word	0x2000054c
 800ab30:	2000115c 	.word	0x2000115c
 800ab34:	40021000 	.word	0x40021000

0800ab38 <HAL_TIM_PWM_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b088      	sub	sp, #32
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 800ab40:	4b0f      	ldr	r3, [pc, #60]	; (800ab80 <HAL_TIM_PWM_MspInit+0x48>)
 800ab42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab44:	4a0e      	ldr	r2, [pc, #56]	; (800ab80 <HAL_TIM_PWM_MspInit+0x48>)
 800ab46:	f043 0308 	orr.w	r3, r3, #8
 800ab4a:	6593      	str	r3, [r2, #88]	; 0x58
 800ab4c:	4b0c      	ldr	r3, [pc, #48]	; (800ab80 <HAL_TIM_PWM_MspInit+0x48>)
 800ab4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab50:	f003 0308 	and.w	r3, r3, #8
 800ab54:	60bb      	str	r3, [r7, #8]
 800ab56:	68bb      	ldr	r3, [r7, #8]

  /* Timer channel configuration */

  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab58:	2302      	movs	r3, #2
 800ab5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab60:	2303      	movs	r3, #3
 800ab62:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Alternate = TIMx_CHANNEl_AF;
 800ab64:	2302      	movs	r3, #2
 800ab66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ab6c:	f107 030c 	add.w	r3, r7, #12
 800ab70:	4619      	mov	r1, r3
 800ab72:	4804      	ldr	r0, [pc, #16]	; (800ab84 <HAL_TIM_PWM_MspInit+0x4c>)
 800ab74:	f001 fe86 	bl	800c884 <HAL_GPIO_Init>
}
 800ab78:	bf00      	nop
 800ab7a:	3720      	adds	r7, #32
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	40021000 	.word	0x40021000
 800ab84:	48002000 	.word	0x48002000

0800ab88 <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b088      	sub	sp, #32
 800ab8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 800ab8e:	4b29      	ldr	r3, [pc, #164]	; (800ac34 <BSP_LCD_MspInit+0xac>)
 800ab90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab92:	4a28      	ldr	r2, [pc, #160]	; (800ac34 <BSP_LCD_MspInit+0xac>)
 800ab94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab98:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab9a:	4b26      	ldr	r3, [pc, #152]	; (800ac34 <BSP_LCD_MspInit+0xac>)
 800ab9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aba2:	60bb      	str	r3, [r7, #8]
 800aba4:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800aba6:	4b23      	ldr	r3, [pc, #140]	; (800ac34 <BSP_LCD_MspInit+0xac>)
 800aba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abaa:	4a22      	ldr	r2, [pc, #136]	; (800ac34 <BSP_LCD_MspInit+0xac>)
 800abac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abb2:	4b20      	ldr	r3, [pc, #128]	; (800ac34 <BSP_LCD_MspInit+0xac>)
 800abb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abba:	607b      	str	r3, [r7, #4]
 800abbc:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 800abbe:	4b1d      	ldr	r3, [pc, #116]	; (800ac34 <BSP_LCD_MspInit+0xac>)
 800abc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abc2:	4a1c      	ldr	r2, [pc, #112]	; (800ac34 <BSP_LCD_MspInit+0xac>)
 800abc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abca:	4b1a      	ldr	r3, [pc, #104]	; (800ac34 <BSP_LCD_MspInit+0xac>)
 800abcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd2:	603b      	str	r3, [r7, #0]
 800abd4:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 800abd6:	f7ff fa57 	bl	800a088 <BSP_IO_Init>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d101      	bne.n	800abe4 <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 800abe0:	f7fe fc7d 	bl	80094de <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 800abe4:	2101      	movs	r1, #1
 800abe6:	2004      	movs	r0, #4
 800abe8:	f7ff fa92 	bl	800a110 <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 800abec:	2301      	movs	r3, #1
 800abee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 800abf0:	2301      	movs	r3, #1
 800abf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 800abf4:	2300      	movs	r3, #0
 800abf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 800abfc:	2300      	movs	r3, #0
 800abfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800ac00:	f107 030c 	add.w	r3, r7, #12
 800ac04:	4619      	mov	r1, r3
 800ac06:	480c      	ldr	r0, [pc, #48]	; (800ac38 <BSP_LCD_MspInit+0xb0>)
 800ac08:	f001 fe3c 	bl	800c884 <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 800ac10:	2301      	movs	r3, #1
 800ac12:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 800ac14:	2300      	movs	r3, #0
 800ac16:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800ac20:	f107 030c 	add.w	r3, r7, #12
 800ac24:	4619      	mov	r1, r3
 800ac26:	4805      	ldr	r0, [pc, #20]	; (800ac3c <BSP_LCD_MspInit+0xb4>)
 800ac28:	f001 fe2c 	bl	800c884 <HAL_GPIO_Init>
}
 800ac2c:	bf00      	nop
 800ac2e:	3720      	adds	r7, #32
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	40021000 	.word	0x40021000
 800ac38:	48002000 	.word	0x48002000
 800ac3c:	48001c00 	.word	0x48001c00

0800ac40 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b088      	sub	sp, #32
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	4603      	mov	r3, r0
 800ac48:	603a      	str	r2, [r7, #0]
 800ac4a:	80fb      	strh	r3, [r7, #6]
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800ac50:	2300      	movs	r3, #0
 800ac52:	61fb      	str	r3, [r7, #28]
 800ac54:	2300      	movs	r3, #0
 800ac56:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  height = DrawProp.pFont->Height;
 800ac58:	4b45      	ldr	r3, [pc, #276]	; (800ad70 <DrawChar+0x130>)
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	88db      	ldrh	r3, [r3, #6]
 800ac5e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 800ac60:	4b43      	ldr	r3, [pc, #268]	; (800ad70 <DrawChar+0x130>)
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	889b      	ldrh	r3, [r3, #4]
 800ac66:	823b      	strh	r3, [r7, #16]

  offset =  8 * ((width + 7) / 8) -  width ;
 800ac68:	8a3b      	ldrh	r3, [r7, #16]
 800ac6a:	3307      	adds	r3, #7
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	da00      	bge.n	800ac72 <DrawChar+0x32>
 800ac70:	3307      	adds	r3, #7
 800ac72:	10db      	asrs	r3, r3, #3
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	00db      	lsls	r3, r3, #3
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	8a3b      	ldrh	r3, [r7, #16]
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	1ad3      	subs	r3, r2, r3
 800ac80:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 800ac82:	2300      	movs	r3, #0
 800ac84:	61fb      	str	r3, [r7, #28]
 800ac86:	e069      	b.n	800ad5c <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 800ac88:	8a3b      	ldrh	r3, [r7, #16]
 800ac8a:	3307      	adds	r3, #7
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	da00      	bge.n	800ac92 <DrawChar+0x52>
 800ac90:	3307      	adds	r3, #7
 800ac92:	10db      	asrs	r3, r3, #3
 800ac94:	461a      	mov	r2, r3
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	fb02 f303 	mul.w	r3, r2, r3
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	4413      	add	r3, r2
 800aca0:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 800aca2:	8a3b      	ldrh	r3, [r7, #16]
 800aca4:	3307      	adds	r3, #7
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	da00      	bge.n	800acac <DrawChar+0x6c>
 800acaa:	3307      	adds	r3, #7
 800acac:	10db      	asrs	r3, r3, #3
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d002      	beq.n	800acb8 <DrawChar+0x78>
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d004      	beq.n	800acc0 <DrawChar+0x80>
 800acb6:	e00c      	b.n	800acd2 <DrawChar+0x92>
    {
      case 1:
        line =  pchar[0];
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	617b      	str	r3, [r7, #20]
        break;
 800acbe:	e016      	b.n	800acee <DrawChar+0xae>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	021b      	lsls	r3, r3, #8
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	3201      	adds	r2, #1
 800acca:	7812      	ldrb	r2, [r2, #0]
 800accc:	4313      	orrs	r3, r2
 800acce:	617b      	str	r3, [r7, #20]
        break;
 800acd0:	e00d      	b.n	800acee <DrawChar+0xae>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	041a      	lsls	r2, r3, #16
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	3301      	adds	r3, #1
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	021b      	lsls	r3, r3, #8
 800ace0:	4313      	orrs	r3, r2
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	3202      	adds	r2, #2
 800ace6:	7812      	ldrb	r2, [r2, #0]
 800ace8:	4313      	orrs	r3, r2
 800acea:	617b      	str	r3, [r7, #20]
        break;
 800acec:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800acee:	2300      	movs	r3, #0
 800acf0:	61bb      	str	r3, [r7, #24]
 800acf2:	e029      	b.n	800ad48 <DrawChar+0x108>
    {
      if ((line & (1 << (width - j + offset - 1))) != 0)
 800acf4:	8a3a      	ldrh	r2, [r7, #16]
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	1ad2      	subs	r2, r2, r3
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
 800acfc:	4413      	add	r3, r2
 800acfe:	3b01      	subs	r3, #1
 800ad00:	2201      	movs	r2, #1
 800ad02:	fa02 f303 	lsl.w	r3, r2, r3
 800ad06:	461a      	mov	r2, r3
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00c      	beq.n	800ad2a <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	88fb      	ldrh	r3, [r7, #6]
 800ad16:	4413      	add	r3, r2
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	4a15      	ldr	r2, [pc, #84]	; (800ad70 <DrawChar+0x130>)
 800ad1c:	6812      	ldr	r2, [r2, #0]
 800ad1e:	b292      	uxth	r2, r2
 800ad20:	88b9      	ldrh	r1, [r7, #4]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7ff fbfe 	bl	800a524 <BSP_LCD_DrawPixel>
 800ad28:	e00b      	b.n	800ad42 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	b29a      	uxth	r2, r3
 800ad2e:	88fb      	ldrh	r3, [r7, #6]
 800ad30:	4413      	add	r3, r2
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	4a0e      	ldr	r2, [pc, #56]	; (800ad70 <DrawChar+0x130>)
 800ad36:	6852      	ldr	r2, [r2, #4]
 800ad38:	b292      	uxth	r2, r2
 800ad3a:	88b9      	ldrh	r1, [r7, #4]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7ff fbf1 	bl	800a524 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	3301      	adds	r3, #1
 800ad46:	61bb      	str	r3, [r7, #24]
 800ad48:	8a3b      	ldrh	r3, [r7, #16]
 800ad4a:	69ba      	ldr	r2, [r7, #24]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d3d1      	bcc.n	800acf4 <DrawChar+0xb4>
      }
    }
    Ypos++;
 800ad50:	88bb      	ldrh	r3, [r7, #4]
 800ad52:	3301      	adds	r3, #1
 800ad54:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	61fb      	str	r3, [r7, #28]
 800ad5c:	8a7b      	ldrh	r3, [r7, #18]
 800ad5e:	69fa      	ldr	r2, [r7, #28]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d391      	bcc.n	800ac88 <DrawChar+0x48>
  }
}
 800ad64:	bf00      	nop
 800ad66:	bf00      	nop
 800ad68:	3720      	adds	r7, #32
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	200011c8 	.word	0x200011c8

0800ad74 <BSP_TS_InitEx>:
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @param  orientation : TS_ORIENTATION_LANDSCAPE or TS_ORIENTATION_PORTRAIT
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_InitEx(uint16_t ts_SizeX, uint16_t ts_SizeY, uint8_t  orientation)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	80fb      	strh	r3, [r7, #6]
 800ad7e:	460b      	mov	r3, r1
 800ad80:	80bb      	strh	r3, [r7, #4]
 800ad82:	4613      	mov	r3, r2
 800ad84:	70fb      	strb	r3, [r7, #3]
  uint8_t ts_status = TS_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	73fb      	strb	r3, [r7, #15]
  uint16_t read_id = 0;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	81bb      	strh	r3, [r7, #12]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800ad8e:	4b20      	ldr	r3, [pc, #128]	; (800ae10 <BSP_TS_InitEx+0x9c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a20      	ldr	r2, [pc, #128]	; (800ae14 <BSP_TS_InitEx+0xa0>)
 800ad94:	7812      	ldrb	r2, [r2, #0]
 800ad96:	b292      	uxth	r2, r2
 800ad98:	4610      	mov	r0, r2
 800ad9a:	4798      	blx	r3

  /* Scan FT6x36 TouchScreen IC controller ID register by I2C Read */
  /* Verify this is a FT6x36, otherwise this is an error case      */

  read_id = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800ad9c:	4b1c      	ldr	r3, [pc, #112]	; (800ae10 <BSP_TS_InitEx+0x9c>)
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	2070      	movs	r0, #112	; 0x70
 800ada2:	4798      	blx	r3
 800ada4:	4603      	mov	r3, r0
 800ada6:	81bb      	strh	r3, [r7, #12]

  if (read_id == FT6x36_ID_VALUE)
 800ada8:	89bb      	ldrh	r3, [r7, #12]
 800adaa:	2bcd      	cmp	r3, #205	; 0xcd
 800adac:	d12a      	bne.n	800ae04 <BSP_TS_InitEx+0x90>
  {
    /* Found FT6x36 : Initialize the TS driver structure */
    tsDriver = &ft6x06_ts_drv;
 800adae:	4b1a      	ldr	r3, [pc, #104]	; (800ae18 <BSP_TS_InitEx+0xa4>)
 800adb0:	4a17      	ldr	r2, [pc, #92]	; (800ae10 <BSP_TS_InitEx+0x9c>)
 800adb2:	601a      	str	r2, [r3, #0]

    I2C_Address    = TS_I2C_ADDRESS;
 800adb4:	4b17      	ldr	r3, [pc, #92]	; (800ae14 <BSP_TS_InitEx+0xa0>)
 800adb6:	2270      	movs	r2, #112	; 0x70
 800adb8:	701a      	strb	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if (orientation == TS_ORIENTATION_PORTRAIT)
 800adba:	78fb      	ldrb	r3, [r7, #3]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d106      	bne.n	800adce <BSP_TS_InitEx+0x5a>
    {
      tsOrientation = TS_SWAP_X | TS_SWAP_Y;
 800adc0:	4b16      	ldr	r3, [pc, #88]	; (800ae1c <BSP_TS_InitEx+0xa8>)
 800adc2:	2206      	movs	r2, #6
 800adc4:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_PORTRAIT;
 800adc6:	4b16      	ldr	r3, [pc, #88]	; (800ae20 <BSP_TS_InitEx+0xac>)
 800adc8:	2200      	movs	r2, #0
 800adca:	701a      	strb	r2, [r3, #0]
 800adcc:	e005      	b.n	800adda <BSP_TS_InitEx+0x66>
    }
    else
    {
      tsOrientation = TS_SWAP_XY | TS_SWAP_Y;
 800adce:	4b13      	ldr	r3, [pc, #76]	; (800ae1c <BSP_TS_InitEx+0xa8>)
 800add0:	220c      	movs	r2, #12
 800add2:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_LANDSCAPE;
 800add4:	4b12      	ldr	r3, [pc, #72]	; (800ae20 <BSP_TS_InitEx+0xac>)
 800add6:	2201      	movs	r2, #1
 800add8:	701a      	strb	r2, [r3, #0]
    }

    if (ts_status == TS_OK)
 800adda:	7bfb      	ldrb	r3, [r7, #15]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d111      	bne.n	800ae04 <BSP_TS_InitEx+0x90>
    {
      /* Software reset the TouchScreen */
      tsDriver->Reset(I2C_Address);
 800ade0:	4b0d      	ldr	r3, [pc, #52]	; (800ae18 <BSP_TS_InitEx+0xa4>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	4a0b      	ldr	r2, [pc, #44]	; (800ae14 <BSP_TS_InitEx+0xa0>)
 800ade8:	7812      	ldrb	r2, [r2, #0]
 800adea:	b292      	uxth	r2, r2
 800adec:	4610      	mov	r0, r2
 800adee:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      tsDriver->Start(I2C_Address);
 800adf0:	4b09      	ldr	r3, [pc, #36]	; (800ae18 <BSP_TS_InitEx+0xa4>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	4a07      	ldr	r2, [pc, #28]	; (800ae14 <BSP_TS_InitEx+0xa0>)
 800adf8:	7812      	ldrb	r2, [r2, #0]
 800adfa:	b292      	uxth	r2, r2
 800adfc:	4610      	mov	r0, r2
 800adfe:	4798      	blx	r3

      return TS_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	e000      	b.n	800ae06 <BSP_TS_InitEx+0x92>

    } /* of if(ts_status == TS_OK) */
  }

  return TS_DEVICE_NOT_FOUND;
 800ae04:	2303      	movs	r3, #3


}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	2000019c 	.word	0x2000019c
 800ae14:	200011e0 	.word	0x200011e0
 800ae18:	200011dc 	.word	0x200011dc
 800ae1c:	20000551 	.word	0x20000551
 800ae20:	20000552 	.word	0x20000552

0800ae24 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	71fb      	strb	r3, [r7, #7]

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x36 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 800ae2e:	f000 f93b 	bl	800b0a8 <BSP_TS_INT_MspInit>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  tsDriver->EnableIT(I2C_Address);
 800ae32:	4b06      	ldr	r3, [pc, #24]	; (800ae4c <BSP_TS_ITConfig+0x28>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	699b      	ldr	r3, [r3, #24]
 800ae38:	4a05      	ldr	r2, [pc, #20]	; (800ae50 <BSP_TS_ITConfig+0x2c>)
 800ae3a:	7812      	ldrb	r2, [r2, #0]
 800ae3c:	b292      	uxth	r2, r2
 800ae3e:	4610      	mov	r0, r2
 800ae40:	4798      	blx	r3

  return (ts_status);
 800ae42:	79fb      	ldrb	r3, [r7, #7]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	200011dc 	.word	0x200011dc
 800ae50:	200011e0 	.word	0x200011e0

0800ae54 <BSP_TS_ITDeConfig>:
/**
  * @brief  deConfigures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITDeConfig(void)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	71fb      	strb	r3, [r7, #7]

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x36 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspDeInit();
 800ae5e:	f000 f969 	bl	800b134 <BSP_TS_INT_MspDeInit>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  tsDriver->DisableIT(I2C_Address);
 800ae62:	4b06      	ldr	r3, [pc, #24]	; (800ae7c <BSP_TS_ITDeConfig+0x28>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae68:	4a05      	ldr	r2, [pc, #20]	; (800ae80 <BSP_TS_ITDeConfig+0x2c>)
 800ae6a:	7812      	ldrb	r2, [r2, #0]
 800ae6c:	b292      	uxth	r2, r2
 800ae6e:	4610      	mov	r0, r2
 800ae70:	4798      	blx	r3

  return (ts_status);
 800ae72:	79fb      	ldrb	r3, [r7, #7]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	200011dc 	.word	0x200011dc
 800ae80:	200011e0 	.word	0x200011e0

0800ae84 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800ae84:	b590      	push	{r4, r7, lr}
 800ae86:	b089      	sub	sp, #36	; 0x24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2C_Address);
 800ae90:	4b80      	ldr	r3, [pc, #512]	; (800b094 <BSP_TS_GetState+0x210>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	691b      	ldr	r3, [r3, #16]
 800ae96:	4a80      	ldr	r2, [pc, #512]	; (800b098 <BSP_TS_GetState+0x214>)
 800ae98:	7812      	ldrb	r2, [r2, #0]
 800ae9a:	b292      	uxth	r2, r2
 800ae9c:	4610      	mov	r0, r2
 800ae9e:	4798      	blx	r3
 800aea0:	4603      	mov	r3, r0
 800aea2:	461a      	mov	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	701a      	strb	r2, [r3, #0]
  if (TS_State->touchDetected)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f000 80ec 	beq.w	800b08a <BSP_TS_GetState+0x206>
  {
    for (index = 0; index < TS_State->touchDetected; index++)
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	61fb      	str	r3, [r7, #28]
 800aeb6:	e0e1      	b.n	800b07c <BSP_TS_GetState+0x1f8>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800aeb8:	4b76      	ldr	r3, [pc, #472]	; (800b094 <BSP_TS_GetState+0x210>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	4a76      	ldr	r2, [pc, #472]	; (800b098 <BSP_TS_GetState+0x214>)
 800aec0:	7812      	ldrb	r2, [r2, #0]
 800aec2:	b290      	uxth	r0, r2
 800aec4:	f107 0110 	add.w	r1, r7, #16
 800aec8:	69fa      	ldr	r2, [r7, #28]
 800aeca:	0052      	lsls	r2, r2, #1
 800aecc:	188c      	adds	r4, r1, r2
 800aece:	f107 010c 	add.w	r1, r7, #12
 800aed2:	69fa      	ldr	r2, [r7, #28]
 800aed4:	0052      	lsls	r2, r2, #1
 800aed6:	440a      	add	r2, r1
 800aed8:	4621      	mov	r1, r4
 800aeda:	4798      	blx	r3

      if (tsOrientation & TS_SWAP_XY)
 800aedc:	4b6f      	ldr	r3, [pc, #444]	; (800b09c <BSP_TS_GetState+0x218>)
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	f003 0308 	and.w	r3, r3, #8
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d019      	beq.n	800af1c <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	005b      	lsls	r3, r3, #1
 800aeec:	3320      	adds	r3, #32
 800aeee:	443b      	add	r3, r7
 800aef0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800aef4:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index];
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	005b      	lsls	r3, r3, #1
 800aefa:	3320      	adds	r3, #32
 800aefc:	443b      	add	r3, r7
 800aefe:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	005b      	lsls	r3, r3, #1
 800af06:	3320      	adds	r3, #32
 800af08:	443b      	add	r3, r7
 800af0a:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	005b      	lsls	r3, r3, #1
 800af12:	3320      	adds	r3, #32
 800af14:	443b      	add	r3, r7
 800af16:	8b3a      	ldrh	r2, [r7, #24]
 800af18:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      if (tsOrientation & TS_SWAP_X)
 800af1c:	4b5f      	ldr	r3, [pc, #380]	; (800b09c <BSP_TS_GetState+0x218>)
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	f003 0302 	and.w	r3, r3, #2
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00e      	beq.n	800af46 <BSP_TS_GetState+0xc2>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_x[index];
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	005b      	lsls	r3, r3, #1
 800af2c:	3320      	adds	r3, #32
 800af2e:	443b      	add	r3, r7
 800af30:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800af34:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800af38:	b29a      	uxth	r2, r3
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	005b      	lsls	r3, r3, #1
 800af3e:	3320      	adds	r3, #32
 800af40:	443b      	add	r3, r7
 800af42:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if (tsOrientation & TS_SWAP_Y)
 800af46:	4b55      	ldr	r3, [pc, #340]	; (800b09c <BSP_TS_GetState+0x218>)
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	f003 0304 	and.w	r3, r3, #4
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00e      	beq.n	800af70 <BSP_TS_GetState+0xec>
      {
        Raw_y[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_y[index];
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	005b      	lsls	r3, r3, #1
 800af56:	3320      	adds	r3, #32
 800af58:	443b      	add	r3, r7
 800af5a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800af5e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800af62:	b29a      	uxth	r2, r3
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	005b      	lsls	r3, r3, #1
 800af68:	3320      	adds	r3, #32
 800af6a:	443b      	add	r3, r7
 800af6c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	005b      	lsls	r3, r3, #1
 800af74:	3320      	adds	r3, #32
 800af76:	443b      	add	r3, r7
 800af78:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800af7c:	4619      	mov	r1, r3
 800af7e:	4a48      	ldr	r2, [pc, #288]	; (800b0a0 <BSP_TS_GetState+0x21c>)
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af86:	4299      	cmp	r1, r3
 800af88:	d90d      	bls.n	800afa6 <BSP_TS_GetState+0x122>
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	005b      	lsls	r3, r3, #1
 800af8e:	3320      	adds	r3, #32
 800af90:	443b      	add	r3, r7
 800af92:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800af96:	4942      	ldr	r1, [pc, #264]	; (800b0a0 <BSP_TS_GetState+0x21c>)
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	e00c      	b.n	800afc0 <BSP_TS_GetState+0x13c>
 800afa6:	4a3e      	ldr	r2, [pc, #248]	; (800b0a0 <BSP_TS_GetState+0x21c>)
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afae:	b29a      	uxth	r2, r3
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	005b      	lsls	r3, r3, #1
 800afb4:	3320      	adds	r3, #32
 800afb6:	443b      	add	r3, r7
 800afb8:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	3320      	adds	r3, #32
 800afc8:	443b      	add	r3, r7
 800afca:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800afce:	4619      	mov	r1, r3
 800afd0:	4a34      	ldr	r2, [pc, #208]	; (800b0a4 <BSP_TS_GetState+0x220>)
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afd8:	4299      	cmp	r1, r3
 800afda:	d90d      	bls.n	800aff8 <BSP_TS_GetState+0x174>
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	005b      	lsls	r3, r3, #1
 800afe0:	3320      	adds	r3, #32
 800afe2:	443b      	add	r3, r7
 800afe4:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800afe8:	492e      	ldr	r1, [pc, #184]	; (800b0a4 <BSP_TS_GetState+0x220>)
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	e00c      	b.n	800b012 <BSP_TS_GetState+0x18e>
 800aff8:	4a2a      	ldr	r2, [pc, #168]	; (800b0a4 <BSP_TS_GetState+0x220>)
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b000:	b29a      	uxth	r2, r3
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	005b      	lsls	r3, r3, #1
 800b006:	3320      	adds	r3, #32
 800b008:	443b      	add	r3, r7
 800b00a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	b29b      	uxth	r3, r3
 800b012:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 800b014:	8afa      	ldrh	r2, [r7, #22]
 800b016:	8abb      	ldrh	r3, [r7, #20]
 800b018:	4413      	add	r3, r2
 800b01a:	2b05      	cmp	r3, #5
 800b01c:	dd15      	ble.n	800b04a <BSP_TS_GetState+0x1c6>
      {
        _x[index] = Raw_x[index];
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	005b      	lsls	r3, r3, #1
 800b022:	3320      	adds	r3, #32
 800b024:	443b      	add	r3, r7
 800b026:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800b02a:	4619      	mov	r1, r3
 800b02c:	4a1c      	ldr	r2, [pc, #112]	; (800b0a0 <BSP_TS_GetState+0x21c>)
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	3320      	adds	r3, #32
 800b03a:	443b      	add	r3, r7
 800b03c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800b040:	4619      	mov	r1, r3
 800b042:	4a18      	ldr	r2, [pc, #96]	; (800b0a4 <BSP_TS_GetState+0x220>)
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 800b04a:	4a15      	ldr	r2, [pc, #84]	; (800b0a0 <BSP_TS_GetState+0x21c>)
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b052:	b299      	uxth	r1, r3
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	005b      	lsls	r3, r3, #1
 800b05a:	4413      	add	r3, r2
 800b05c:	460a      	mov	r2, r1
 800b05e:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 800b060:	4a10      	ldr	r2, [pc, #64]	; (800b0a4 <BSP_TS_GetState+0x220>)
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b068:	b299      	uxth	r1, r3
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	005b      	lsls	r3, r3, #1
 800b070:	4413      	add	r3, r2
 800b072:	460a      	mov	r2, r1
 800b074:	80da      	strh	r2, [r3, #6]
    for (index = 0; index < TS_State->touchDetected; index++)
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	3301      	adds	r3, #1
 800b07a:	61fb      	str	r3, [r7, #28]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	461a      	mov	r2, r3
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	4293      	cmp	r3, r2
 800b086:	f4ff af17 	bcc.w	800aeb8 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800b08a:	7efb      	ldrb	r3, [r7, #27]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3724      	adds	r7, #36	; 0x24
 800b090:	46bd      	mov	sp, r7
 800b092:	bd90      	pop	{r4, r7, pc}
 800b094:	200011dc 	.word	0x200011dc
 800b098:	200011e0 	.word	0x200011e0
 800b09c:	20000551 	.word	0x20000551
 800b0a0:	200011e4 	.word	0x200011e4
 800b0a4:	200011ec 	.word	0x200011ec

0800b0a8 <BSP_TS_INT_MspInit>:
  * @brief  Initializes the TS_INT pin MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b088      	sub	sp, #32
 800b0ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_PWR_CLK_ENABLE();
 800b0ae:	4b1e      	ldr	r3, [pc, #120]	; (800b128 <BSP_TS_INT_MspInit+0x80>)
 800b0b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0b2:	4a1d      	ldr	r2, [pc, #116]	; (800b128 <BSP_TS_INT_MspInit+0x80>)
 800b0b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0b8:	6593      	str	r3, [r2, #88]	; 0x58
 800b0ba:	4b1b      	ldr	r3, [pc, #108]	; (800b128 <BSP_TS_INT_MspInit+0x80>)
 800b0bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0c2:	60bb      	str	r3, [r7, #8]
 800b0c4:	68bb      	ldr	r3, [r7, #8]
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800b0c6:	4b19      	ldr	r3, [pc, #100]	; (800b12c <BSP_TS_INT_MspInit+0x84>)
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	4a18      	ldr	r2, [pc, #96]	; (800b12c <BSP_TS_INT_MspInit+0x84>)
 800b0cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b0d0:	6053      	str	r3, [r2, #4]

  TS_INT_GPIO_CLK_ENABLE();
 800b0d2:	4b15      	ldr	r3, [pc, #84]	; (800b128 <BSP_TS_INT_MspInit+0x80>)
 800b0d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0d6:	4a14      	ldr	r2, [pc, #80]	; (800b128 <BSP_TS_INT_MspInit+0x80>)
 800b0d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b0de:	4b12      	ldr	r3, [pc, #72]	; (800b128 <BSP_TS_INT_MspInit+0x80>)
 800b0e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e6:	607b      	str	r3, [r7, #4]
 800b0e8:	687b      	ldr	r3, [r7, #4]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800b0ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b0ee:	60fb      	str	r3, [r7, #12]

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 800b0f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b0f4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800b0fa:	2302      	movs	r3, #2
 800b0fc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800b0fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800b102:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 800b104:	f107 030c 	add.w	r3, r7, #12
 800b108:	4619      	mov	r1, r3
 800b10a:	4809      	ldr	r0, [pc, #36]	; (800b130 <BSP_TS_INT_MspInit+0x88>)
 800b10c:	f001 fbba 	bl	800c884 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x08, 0x00);
 800b110:	2200      	movs	r2, #0
 800b112:	2108      	movs	r1, #8
 800b114:	2028      	movs	r0, #40	; 0x28
 800b116:	f001 f9de 	bl	800c4d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 800b11a:	2028      	movs	r0, #40	; 0x28
 800b11c:	f001 f9f7 	bl	800c50e <HAL_NVIC_EnableIRQ>
}
 800b120:	bf00      	nop
 800b122:	3720      	adds	r7, #32
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	40021000 	.word	0x40021000
 800b12c:	40007000 	.word	0x40007000
 800b130:	48001800 	.word	0x48001800

0800b134 <BSP_TS_INT_MspDeInit>:
  * @brief  Initializes the TS_INT pin MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_TS_INT_MspDeInit(void)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b088      	sub	sp, #32
 800b138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_PWR_CLK_ENABLE();
 800b13a:	4b1a      	ldr	r3, [pc, #104]	; (800b1a4 <BSP_TS_INT_MspDeInit+0x70>)
 800b13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b13e:	4a19      	ldr	r2, [pc, #100]	; (800b1a4 <BSP_TS_INT_MspDeInit+0x70>)
 800b140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b144:	6593      	str	r3, [r2, #88]	; 0x58
 800b146:	4b17      	ldr	r3, [pc, #92]	; (800b1a4 <BSP_TS_INT_MspDeInit+0x70>)
 800b148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b14a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b14e:	60bb      	str	r3, [r7, #8]
 800b150:	68bb      	ldr	r3, [r7, #8]
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800b152:	4b15      	ldr	r3, [pc, #84]	; (800b1a8 <BSP_TS_INT_MspDeInit+0x74>)
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	4a14      	ldr	r2, [pc, #80]	; (800b1a8 <BSP_TS_INT_MspDeInit+0x74>)
 800b158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b15c:	6053      	str	r3, [r2, #4]

  TS_INT_GPIO_CLK_ENABLE();
 800b15e:	4b11      	ldr	r3, [pc, #68]	; (800b1a4 <BSP_TS_INT_MspDeInit+0x70>)
 800b160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b162:	4a10      	ldr	r2, [pc, #64]	; (800b1a4 <BSP_TS_INT_MspDeInit+0x70>)
 800b164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b16a:	4b0e      	ldr	r3, [pc, #56]	; (800b1a4 <BSP_TS_INT_MspDeInit+0x70>)
 800b16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b172:	607b      	str	r3, [r7, #4]
 800b174:	687b      	ldr	r3, [r7, #4]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800b176:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b17a:	60fb      	str	r3, [r7, #12]

  gpio_init_structure.Pin = GPIO_PIN_All;
 800b17c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b180:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_ANALOG;
 800b182:	2303      	movs	r3, #3
 800b184:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800b186:	2300      	movs	r3, #0
 800b188:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 800b18a:	f107 030c 	add.w	r3, r7, #12
 800b18e:	4619      	mov	r1, r3
 800b190:	4806      	ldr	r0, [pc, #24]	; (800b1ac <BSP_TS_INT_MspDeInit+0x78>)
 800b192:	f001 fb77 	bl	800c884 <HAL_GPIO_Init>

  HAL_NVIC_DisableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 800b196:	2028      	movs	r0, #40	; 0x28
 800b198:	f001 f9c7 	bl	800c52a <HAL_NVIC_DisableIRQ>
}
 800b19c:	bf00      	nop
 800b19e:	3720      	adds	r7, #32
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	40021000 	.word	0x40021000
 800b1a8:	40007000 	.word	0x40007000
 800b1ac:	48001800 	.word	0x48001800

0800b1b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b1ba:	2003      	movs	r0, #3
 800b1bc:	f001 f980 	bl	800c4c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	f000 f80d 	bl	800b1e0 <HAL_InitTick>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d002      	beq.n	800b1d2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	71fb      	strb	r3, [r7, #7]
 800b1d0:	e001      	b.n	800b1d6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b1d2:	f7f7 fa77 	bl	80026c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b1d6:	79fb      	ldrb	r3, [r7, #7]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3708      	adds	r7, #8
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800b1ec:	4b17      	ldr	r3, [pc, #92]	; (800b24c <HAL_InitTick+0x6c>)
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d023      	beq.n	800b23c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800b1f4:	4b16      	ldr	r3, [pc, #88]	; (800b250 <HAL_InitTick+0x70>)
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	4b14      	ldr	r3, [pc, #80]	; (800b24c <HAL_InitTick+0x6c>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b202:	fbb3 f3f1 	udiv	r3, r3, r1
 800b206:	fbb2 f3f3 	udiv	r3, r2, r3
 800b20a:	4618      	mov	r0, r3
 800b20c:	f001 f99b 	bl	800c546 <HAL_SYSTICK_Config>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d10f      	bne.n	800b236 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2b0f      	cmp	r3, #15
 800b21a:	d809      	bhi.n	800b230 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b21c:	2200      	movs	r2, #0
 800b21e:	6879      	ldr	r1, [r7, #4]
 800b220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b224:	f001 f957 	bl	800c4d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b228:	4a0a      	ldr	r2, [pc, #40]	; (800b254 <HAL_InitTick+0x74>)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6013      	str	r3, [r2, #0]
 800b22e:	e007      	b.n	800b240 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	73fb      	strb	r3, [r7, #15]
 800b234:	e004      	b.n	800b240 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	73fb      	strb	r3, [r7, #15]
 800b23a:	e001      	b.n	800b240 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800b240:	7bfb      	ldrb	r3, [r7, #15]
}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	20000558 	.word	0x20000558
 800b250:	20000198 	.word	0x20000198
 800b254:	20000554 	.word	0x20000554

0800b258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b258:	b480      	push	{r7}
 800b25a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b25c:	4b06      	ldr	r3, [pc, #24]	; (800b278 <HAL_IncTick+0x20>)
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	461a      	mov	r2, r3
 800b262:	4b06      	ldr	r3, [pc, #24]	; (800b27c <HAL_IncTick+0x24>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4413      	add	r3, r2
 800b268:	4a04      	ldr	r2, [pc, #16]	; (800b27c <HAL_IncTick+0x24>)
 800b26a:	6013      	str	r3, [r2, #0]
}
 800b26c:	bf00      	nop
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	20000558 	.word	0x20000558
 800b27c:	200011f4 	.word	0x200011f4

0800b280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b280:	b480      	push	{r7}
 800b282:	af00      	add	r7, sp, #0
  return uwTick;
 800b284:	4b03      	ldr	r3, [pc, #12]	; (800b294 <HAL_GetTick+0x14>)
 800b286:	681b      	ldr	r3, [r3, #0]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	200011f4 	.word	0x200011f4

0800b298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b2a0:	f7ff ffee 	bl	800b280 <HAL_GetTick>
 800b2a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2b0:	d005      	beq.n	800b2be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800b2b2:	4b0a      	ldr	r3, [pc, #40]	; (800b2dc <HAL_Delay+0x44>)
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b2be:	bf00      	nop
 800b2c0:	f7ff ffde 	bl	800b280 <HAL_GetTick>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	1ad3      	subs	r3, r2, r3
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d8f7      	bhi.n	800b2c0 <HAL_Delay+0x28>
  {
  }
}
 800b2d0:	bf00      	nop
 800b2d2:	bf00      	nop
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	20000558 	.word	0x20000558

0800b2e0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800b2e4:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <HAL_SuspendTick+0x1c>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a04      	ldr	r2, [pc, #16]	; (800b2fc <HAL_SuspendTick+0x1c>)
 800b2ea:	f023 0302 	bic.w	r3, r3, #2
 800b2ee:	6013      	str	r3, [r2, #0]
}
 800b2f0:	bf00      	nop
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	e000e010 	.word	0xe000e010

0800b300 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800b300:	b480      	push	{r7}
 800b302:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800b304:	4b05      	ldr	r3, [pc, #20]	; (800b31c <HAL_ResumeTick+0x1c>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a04      	ldr	r2, [pc, #16]	; (800b31c <HAL_ResumeTick+0x1c>)
 800b30a:	f043 0302 	orr.w	r3, r3, #2
 800b30e:	6013      	str	r3, [r2, #0]
}
 800b310:	bf00      	nop
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	e000e010 	.word	0xe000e010

0800b320 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	431a      	orrs	r2, r3
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	609a      	str	r2, [r3, #8]
}
 800b33a:	bf00      	nop
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800b346:	b480      	push	{r7}
 800b348:	b083      	sub	sp, #12
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	431a      	orrs	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	609a      	str	r2, [r3, #8]
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b388:	b480      	push	{r7}
 800b38a:	b087      	sub	sp, #28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
 800b394:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	3360      	adds	r3, #96	; 0x60
 800b39a:	461a      	mov	r2, r3
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4413      	add	r3, r2
 800b3a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	4b08      	ldr	r3, [pc, #32]	; (800b3cc <LL_ADC_SetOffset+0x44>)
 800b3aa:	4013      	ands	r3, r2
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	430a      	orrs	r2, r1
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800b3c0:	bf00      	nop
 800b3c2:	371c      	adds	r7, #28
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr
 800b3cc:	03fff000 	.word	0x03fff000

0800b3d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	3360      	adds	r3, #96	; 0x60
 800b3de:	461a      	mov	r2, r3
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b087      	sub	sp, #28
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	3360      	adds	r3, #96	; 0x60
 800b40c:	461a      	mov	r2, r3
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4413      	add	r3, r2
 800b414:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	431a      	orrs	r2, r3
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800b426:	bf00      	nop
 800b428:	371c      	adds	r7, #28
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr

0800b432 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800b432:	b480      	push	{r7}
 800b434:	b083      	sub	sp, #12
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	695b      	ldr	r3, [r3, #20]
 800b440:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	431a      	orrs	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	615a      	str	r2, [r3, #20]
}
 800b44c:	bf00      	nop
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b458:	b480      	push	{r7}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	3330      	adds	r3, #48	; 0x30
 800b468:	461a      	mov	r2, r3
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	0a1b      	lsrs	r3, r3, #8
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	f003 030c 	and.w	r3, r3, #12
 800b474:	4413      	add	r3, r2
 800b476:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	f003 031f 	and.w	r3, r3, #31
 800b482:	211f      	movs	r1, #31
 800b484:	fa01 f303 	lsl.w	r3, r1, r3
 800b488:	43db      	mvns	r3, r3
 800b48a:	401a      	ands	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	0e9b      	lsrs	r3, r3, #26
 800b490:	f003 011f 	and.w	r1, r3, #31
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	f003 031f 	and.w	r3, r3, #31
 800b49a:	fa01 f303 	lsl.w	r3, r1, r3
 800b49e:	431a      	orrs	r2, r3
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b4a4:	bf00      	nop
 800b4a6:	371c      	adds	r7, #28
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b087      	sub	sp, #28
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3314      	adds	r3, #20
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	0e5b      	lsrs	r3, r3, #25
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	f003 0304 	and.w	r3, r3, #4
 800b4cc:	4413      	add	r3, r2
 800b4ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	0d1b      	lsrs	r3, r3, #20
 800b4d8:	f003 031f 	and.w	r3, r3, #31
 800b4dc:	2107      	movs	r1, #7
 800b4de:	fa01 f303 	lsl.w	r3, r1, r3
 800b4e2:	43db      	mvns	r3, r3
 800b4e4:	401a      	ands	r2, r3
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	0d1b      	lsrs	r3, r3, #20
 800b4ea:	f003 031f 	and.w	r3, r3, #31
 800b4ee:	6879      	ldr	r1, [r7, #4]
 800b4f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b4f4:	431a      	orrs	r2, r3
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b4fa:	bf00      	nop
 800b4fc:	371c      	adds	r7, #28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
	...

0800b508 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b520:	43db      	mvns	r3, r3
 800b522:	401a      	ands	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f003 0318 	and.w	r3, r3, #24
 800b52a:	4908      	ldr	r1, [pc, #32]	; (800b54c <LL_ADC_SetChannelSingleDiff+0x44>)
 800b52c:	40d9      	lsrs	r1, r3
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	400b      	ands	r3, r1
 800b532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b536:	431a      	orrs	r2, r3
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800b53e:	bf00      	nop
 800b540:	3714      	adds	r7, #20
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	0007ffff 	.word	0x0007ffff

0800b550 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800b560:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	6093      	str	r3, [r2, #8]
}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b588:	d101      	bne.n	800b58e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b58a:	2301      	movs	r3, #1
 800b58c:	e000      	b.n	800b590 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800b5ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b5b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5d8:	d101      	bne.n	800b5de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e000      	b.n	800b5e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	f003 0301 	and.w	r3, r3, #1
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d101      	bne.n	800b604 <LL_ADC_IsEnabled+0x18>
 800b600:	2301      	movs	r3, #1
 800b602:	e000      	b.n	800b606 <LL_ADC_IsEnabled+0x1a>
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	370c      	adds	r7, #12
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b612:	b480      	push	{r7}
 800b614:	b083      	sub	sp, #12
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	f003 0304 	and.w	r3, r3, #4
 800b622:	2b04      	cmp	r3, #4
 800b624:	d101      	bne.n	800b62a <LL_ADC_REG_IsConversionOngoing+0x18>
 800b626:	2301      	movs	r3, #1
 800b628:	e000      	b.n	800b62c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b62a:	2300      	movs	r3, #0
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	f003 0308 	and.w	r3, r3, #8
 800b648:	2b08      	cmp	r3, #8
 800b64a:	d101      	bne.n	800b650 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b64c:	2301      	movs	r3, #1
 800b64e:	e000      	b.n	800b652 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr
	...

0800b660 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b660:	b590      	push	{r4, r7, lr}
 800b662:	b089      	sub	sp, #36	; 0x24
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800b66c:	2300      	movs	r3, #0
 800b66e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d101      	bne.n	800b67a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	e139      	b.n	800b8ee <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b684:	2b00      	cmp	r3, #0
 800b686:	d109      	bne.n	800b69c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7f5 f8c1 	bl	8000810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7ff ff67 	bl	800b574 <LL_ADC_IsDeepPowerDownEnabled>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d004      	beq.n	800b6b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7ff ff4d 	bl	800b550 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7ff ff82 	bl	800b5c4 <LL_ADC_IsInternalRegulatorEnabled>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d115      	bne.n	800b6f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7ff ff66 	bl	800b59c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b6d0:	4b89      	ldr	r3, [pc, #548]	; (800b8f8 <HAL_ADC_Init+0x298>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	099b      	lsrs	r3, r3, #6
 800b6d6:	4a89      	ldr	r2, [pc, #548]	; (800b8fc <HAL_ADC_Init+0x29c>)
 800b6d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b6dc:	099b      	lsrs	r3, r3, #6
 800b6de:	3301      	adds	r3, #1
 800b6e0:	005b      	lsls	r3, r3, #1
 800b6e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b6e4:	e002      	b.n	800b6ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1f9      	bne.n	800b6e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7ff ff64 	bl	800b5c4 <LL_ADC_IsInternalRegulatorEnabled>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d10d      	bne.n	800b71e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b706:	f043 0210 	orr.w	r2, r3, #16
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b712:	f043 0201 	orr.w	r2, r3, #1
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4618      	mov	r0, r3
 800b724:	f7ff ff75 	bl	800b612 <LL_ADC_REG_IsConversionOngoing>
 800b728:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b72e:	f003 0310 	and.w	r3, r3, #16
 800b732:	2b00      	cmp	r3, #0
 800b734:	f040 80d2 	bne.w	800b8dc <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f040 80ce 	bne.w	800b8dc <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b744:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b748:	f043 0202 	orr.w	r2, r3, #2
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4618      	mov	r0, r3
 800b756:	f7ff ff49 	bl	800b5ec <LL_ADC_IsEnabled>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d115      	bne.n	800b78c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b760:	4867      	ldr	r0, [pc, #412]	; (800b900 <HAL_ADC_Init+0x2a0>)
 800b762:	f7ff ff43 	bl	800b5ec <LL_ADC_IsEnabled>
 800b766:	4604      	mov	r4, r0
 800b768:	4866      	ldr	r0, [pc, #408]	; (800b904 <HAL_ADC_Init+0x2a4>)
 800b76a:	f7ff ff3f 	bl	800b5ec <LL_ADC_IsEnabled>
 800b76e:	4603      	mov	r3, r0
 800b770:	431c      	orrs	r4, r3
 800b772:	4865      	ldr	r0, [pc, #404]	; (800b908 <HAL_ADC_Init+0x2a8>)
 800b774:	f7ff ff3a 	bl	800b5ec <LL_ADC_IsEnabled>
 800b778:	4603      	mov	r3, r0
 800b77a:	4323      	orrs	r3, r4
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d105      	bne.n	800b78c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	4619      	mov	r1, r3
 800b786:	4861      	ldr	r0, [pc, #388]	; (800b90c <HAL_ADC_Init+0x2ac>)
 800b788:	f7ff fdca 	bl	800b320 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	7e5b      	ldrb	r3, [r3, #25]
 800b790:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b796:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800b79c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800b7a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b7aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d106      	bne.n	800b7c8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	045b      	lsls	r3, r3, #17
 800b7c2:	69ba      	ldr	r2, [r7, #24]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d009      	beq.n	800b7e4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b7de:	69ba      	ldr	r2, [r7, #24]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	68da      	ldr	r2, [r3, #12]
 800b7ea:	4b49      	ldr	r3, [pc, #292]	; (800b910 <HAL_ADC_Init+0x2b0>)
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	6812      	ldr	r2, [r2, #0]
 800b7f2:	69b9      	ldr	r1, [r7, #24]
 800b7f4:	430b      	orrs	r3, r1
 800b7f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7ff ff08 	bl	800b612 <LL_ADC_REG_IsConversionOngoing>
 800b802:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4618      	mov	r0, r3
 800b80a:	f7ff ff15 	bl	800b638 <LL_ADC_INJ_IsConversionOngoing>
 800b80e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d140      	bne.n	800b898 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d13d      	bne.n	800b898 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	7e1b      	ldrb	r3, [r3, #24]
 800b824:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b826:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b82e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b830:	4313      	orrs	r3, r2
 800b832:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b83e:	f023 0306 	bic.w	r3, r3, #6
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	6812      	ldr	r2, [r2, #0]
 800b846:	69b9      	ldr	r1, [r7, #24]
 800b848:	430b      	orrs	r3, r1
 800b84a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b852:	2b01      	cmp	r3, #1
 800b854:	d118      	bne.n	800b888 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b860:	f023 0304 	bic.w	r3, r3, #4
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b86c:	4311      	orrs	r1, r2
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b872:	4311      	orrs	r1, r2
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b878:	430a      	orrs	r2, r1
 800b87a:	431a      	orrs	r2, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f042 0201 	orr.w	r2, r2, #1
 800b884:	611a      	str	r2, [r3, #16]
 800b886:	e007      	b.n	800b898 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	691a      	ldr	r2, [r3, #16]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f022 0201 	bic.w	r2, r2, #1
 800b896:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d10c      	bne.n	800b8ba <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a6:	f023 010f 	bic.w	r1, r3, #15
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	69db      	ldr	r3, [r3, #28]
 800b8ae:	1e5a      	subs	r2, r3, #1
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	430a      	orrs	r2, r1
 800b8b6:	631a      	str	r2, [r3, #48]	; 0x30
 800b8b8:	e007      	b.n	800b8ca <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f022 020f 	bic.w	r2, r2, #15
 800b8c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ce:	f023 0303 	bic.w	r3, r3, #3
 800b8d2:	f043 0201 	orr.w	r2, r3, #1
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	659a      	str	r2, [r3, #88]	; 0x58
 800b8da:	e007      	b.n	800b8ec <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8e0:	f043 0210 	orr.w	r2, r3, #16
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b8ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3724      	adds	r7, #36	; 0x24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd90      	pop	{r4, r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20000198 	.word	0x20000198
 800b8fc:	053e2d63 	.word	0x053e2d63
 800b900:	50040000 	.word	0x50040000
 800b904:	50040100 	.word	0x50040100
 800b908:	50040200 	.word	0x50040200
 800b90c:	50040300 	.word	0x50040300
 800b910:	fff0c007 	.word	0xfff0c007

0800b914 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b0b6      	sub	sp, #216	; 0xd8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b91e:	2300      	movs	r3, #0
 800b920:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b924:	2300      	movs	r3, #0
 800b926:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d101      	bne.n	800b936 <HAL_ADC_ConfigChannel+0x22>
 800b932:	2302      	movs	r3, #2
 800b934:	e3e3      	b.n	800c0fe <HAL_ADC_ConfigChannel+0x7ea>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4618      	mov	r0, r3
 800b944:	f7ff fe65 	bl	800b612 <LL_ADC_REG_IsConversionOngoing>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	f040 83c4 	bne.w	800c0d8 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	2b05      	cmp	r3, #5
 800b956:	d824      	bhi.n	800b9a2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	3b02      	subs	r3, #2
 800b95e:	2b03      	cmp	r3, #3
 800b960:	d81b      	bhi.n	800b99a <HAL_ADC_ConfigChannel+0x86>
 800b962:	a201      	add	r2, pc, #4	; (adr r2, 800b968 <HAL_ADC_ConfigChannel+0x54>)
 800b964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b968:	0800b979 	.word	0x0800b979
 800b96c:	0800b981 	.word	0x0800b981
 800b970:	0800b989 	.word	0x0800b989
 800b974:	0800b991 	.word	0x0800b991
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	220c      	movs	r2, #12
 800b97c:	605a      	str	r2, [r3, #4]
          break;
 800b97e:	e011      	b.n	800b9a4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	2212      	movs	r2, #18
 800b984:	605a      	str	r2, [r3, #4]
          break;
 800b986:	e00d      	b.n	800b9a4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	2218      	movs	r2, #24
 800b98c:	605a      	str	r2, [r3, #4]
          break;
 800b98e:	e009      	b.n	800b9a4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b996:	605a      	str	r2, [r3, #4]
          break;
 800b998:	e004      	b.n	800b9a4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	2206      	movs	r2, #6
 800b99e:	605a      	str	r2, [r3, #4]
          break;
 800b9a0:	e000      	b.n	800b9a4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800b9a2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6818      	ldr	r0, [r3, #0]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	6859      	ldr	r1, [r3, #4]
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	f7ff fd51 	bl	800b458 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff fe29 	bl	800b612 <LL_ADC_REG_IsConversionOngoing>
 800b9c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7ff fe35 	bl	800b638 <LL_ADC_INJ_IsConversionOngoing>
 800b9ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b9d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	f040 81c1 	bne.w	800bd5e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b9dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f040 81bc 	bne.w	800bd5e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9ee:	d10f      	bne.n	800ba10 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6818      	ldr	r0, [r3, #0]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	f7ff fd58 	bl	800b4b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7ff fd12 	bl	800b432 <LL_ADC_SetSamplingTimeCommonConfig>
 800ba0e:	e00e      	b.n	800ba2e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6818      	ldr	r0, [r3, #0]
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	6819      	ldr	r1, [r3, #0]
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	f7ff fd47 	bl	800b4b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2100      	movs	r1, #0
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7ff fd02 	bl	800b432 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	695a      	ldr	r2, [r3, #20]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	08db      	lsrs	r3, r3, #3
 800ba3a:	f003 0303 	and.w	r3, r3, #3
 800ba3e:	005b      	lsls	r3, r3, #1
 800ba40:	fa02 f303 	lsl.w	r3, r2, r3
 800ba44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	691b      	ldr	r3, [r3, #16]
 800ba4c:	2b04      	cmp	r3, #4
 800ba4e:	d00a      	beq.n	800ba66 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6818      	ldr	r0, [r3, #0]
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	6919      	ldr	r1, [r3, #16]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba60:	f7ff fc92 	bl	800b388 <LL_ADC_SetOffset>
 800ba64:	e17b      	b.n	800bd5e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7ff fcaf 	bl	800b3d0 <LL_ADC_GetOffsetChannel>
 800ba72:	4603      	mov	r3, r0
 800ba74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10a      	bne.n	800ba92 <HAL_ADC_ConfigChannel+0x17e>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2100      	movs	r1, #0
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7ff fca4 	bl	800b3d0 <LL_ADC_GetOffsetChannel>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	0e9b      	lsrs	r3, r3, #26
 800ba8c:	f003 021f 	and.w	r2, r3, #31
 800ba90:	e01e      	b.n	800bad0 <HAL_ADC_ConfigChannel+0x1bc>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2100      	movs	r1, #0
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7ff fc99 	bl	800b3d0 <LL_ADC_GetOffsetChannel>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800baa4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800baa8:	fa93 f3a3 	rbit	r3, r3
 800baac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bab0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800bab8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d101      	bne.n	800bac4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800bac0:	2320      	movs	r3, #32
 800bac2:	e004      	b.n	800bace <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800bac4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bac8:	fab3 f383 	clz	r3, r3
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d105      	bne.n	800bae8 <HAL_ADC_ConfigChannel+0x1d4>
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	0e9b      	lsrs	r3, r3, #26
 800bae2:	f003 031f 	and.w	r3, r3, #31
 800bae6:	e018      	b.n	800bb1a <HAL_ADC_ConfigChannel+0x206>
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800baf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800baf4:	fa93 f3a3 	rbit	r3, r3
 800baf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800bafc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800bb04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d101      	bne.n	800bb10 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800bb0c:	2320      	movs	r3, #32
 800bb0e:	e004      	b.n	800bb1a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800bb10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bb14:	fab3 f383 	clz	r3, r3
 800bb18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d106      	bne.n	800bb2c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2200      	movs	r2, #0
 800bb24:	2100      	movs	r1, #0
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7ff fc68 	bl	800b3fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2101      	movs	r1, #1
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7ff fc4c 	bl	800b3d0 <LL_ADC_GetOffsetChannel>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10a      	bne.n	800bb58 <HAL_ADC_ConfigChannel+0x244>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2101      	movs	r1, #1
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7ff fc41 	bl	800b3d0 <LL_ADC_GetOffsetChannel>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	0e9b      	lsrs	r3, r3, #26
 800bb52:	f003 021f 	and.w	r2, r3, #31
 800bb56:	e01e      	b.n	800bb96 <HAL_ADC_ConfigChannel+0x282>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2101      	movs	r1, #1
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7ff fc36 	bl	800b3d0 <LL_ADC_GetOffsetChannel>
 800bb64:	4603      	mov	r3, r0
 800bb66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bb6e:	fa93 f3a3 	rbit	r3, r3
 800bb72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800bb76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800bb7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d101      	bne.n	800bb8a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800bb86:	2320      	movs	r3, #32
 800bb88:	e004      	b.n	800bb94 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800bb8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb8e:	fab3 f383 	clz	r3, r3
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d105      	bne.n	800bbae <HAL_ADC_ConfigChannel+0x29a>
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	0e9b      	lsrs	r3, r3, #26
 800bba8:	f003 031f 	and.w	r3, r3, #31
 800bbac:	e018      	b.n	800bbe0 <HAL_ADC_ConfigChannel+0x2cc>
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bbba:	fa93 f3a3 	rbit	r3, r3
 800bbbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800bbc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bbc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800bbca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d101      	bne.n	800bbd6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800bbd2:	2320      	movs	r3, #32
 800bbd4:	e004      	b.n	800bbe0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800bbd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bbda:	fab3 f383 	clz	r3, r3
 800bbde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d106      	bne.n	800bbf2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	2101      	movs	r1, #1
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7ff fc05 	bl	800b3fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2102      	movs	r1, #2
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7ff fbe9 	bl	800b3d0 <LL_ADC_GetOffsetChannel>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10a      	bne.n	800bc1e <HAL_ADC_ConfigChannel+0x30a>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2102      	movs	r1, #2
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7ff fbde 	bl	800b3d0 <LL_ADC_GetOffsetChannel>
 800bc14:	4603      	mov	r3, r0
 800bc16:	0e9b      	lsrs	r3, r3, #26
 800bc18:	f003 021f 	and.w	r2, r3, #31
 800bc1c:	e01e      	b.n	800bc5c <HAL_ADC_ConfigChannel+0x348>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2102      	movs	r1, #2
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7ff fbd3 	bl	800b3d0 <LL_ADC_GetOffsetChannel>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc34:	fa93 f3a3 	rbit	r3, r3
 800bc38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800bc3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800bc44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800bc4c:	2320      	movs	r3, #32
 800bc4e:	e004      	b.n	800bc5a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800bc50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc54:	fab3 f383 	clz	r3, r3
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d105      	bne.n	800bc74 <HAL_ADC_ConfigChannel+0x360>
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	0e9b      	lsrs	r3, r3, #26
 800bc6e:	f003 031f 	and.w	r3, r3, #31
 800bc72:	e016      	b.n	800bca2 <HAL_ADC_ConfigChannel+0x38e>
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc80:	fa93 f3a3 	rbit	r3, r3
 800bc84:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800bc86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800bc8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d101      	bne.n	800bc98 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800bc94:	2320      	movs	r3, #32
 800bc96:	e004      	b.n	800bca2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800bc98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc9c:	fab3 f383 	clz	r3, r3
 800bca0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d106      	bne.n	800bcb4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	2102      	movs	r1, #2
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7ff fba4 	bl	800b3fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2103      	movs	r1, #3
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7ff fb88 	bl	800b3d0 <LL_ADC_GetOffsetChannel>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d10a      	bne.n	800bce0 <HAL_ADC_ConfigChannel+0x3cc>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2103      	movs	r1, #3
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7ff fb7d 	bl	800b3d0 <LL_ADC_GetOffsetChannel>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	0e9b      	lsrs	r3, r3, #26
 800bcda:	f003 021f 	and.w	r2, r3, #31
 800bcde:	e017      	b.n	800bd10 <HAL_ADC_ConfigChannel+0x3fc>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2103      	movs	r1, #3
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7ff fb72 	bl	800b3d0 <LL_ADC_GetOffsetChannel>
 800bcec:	4603      	mov	r3, r0
 800bcee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcf2:	fa93 f3a3 	rbit	r3, r3
 800bcf6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800bcf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcfa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800bcfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d101      	bne.n	800bd06 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800bd02:	2320      	movs	r3, #32
 800bd04:	e003      	b.n	800bd0e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800bd06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd08:	fab3 f383 	clz	r3, r3
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d105      	bne.n	800bd28 <HAL_ADC_ConfigChannel+0x414>
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	0e9b      	lsrs	r3, r3, #26
 800bd22:	f003 031f 	and.w	r3, r3, #31
 800bd26:	e011      	b.n	800bd4c <HAL_ADC_ConfigChannel+0x438>
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd30:	fa93 f3a3 	rbit	r3, r3
 800bd34:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800bd36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd38:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800bd3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d101      	bne.n	800bd44 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800bd40:	2320      	movs	r3, #32
 800bd42:	e003      	b.n	800bd4c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800bd44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd46:	fab3 f383 	clz	r3, r3
 800bd4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d106      	bne.n	800bd5e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2200      	movs	r2, #0
 800bd56:	2103      	movs	r1, #3
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7ff fb4f 	bl	800b3fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7ff fc42 	bl	800b5ec <LL_ADC_IsEnabled>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f040 8140 	bne.w	800bff0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6818      	ldr	r0, [r3, #0]
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	6819      	ldr	r1, [r3, #0]
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	f7ff fbc3 	bl	800b508 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	4a8f      	ldr	r2, [pc, #572]	; (800bfc4 <HAL_ADC_ConfigChannel+0x6b0>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	f040 8131 	bne.w	800bff0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10b      	bne.n	800bdb6 <HAL_ADC_ConfigChannel+0x4a2>
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	0e9b      	lsrs	r3, r3, #26
 800bda4:	3301      	adds	r3, #1
 800bda6:	f003 031f 	and.w	r3, r3, #31
 800bdaa:	2b09      	cmp	r3, #9
 800bdac:	bf94      	ite	ls
 800bdae:	2301      	movls	r3, #1
 800bdb0:	2300      	movhi	r3, #0
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	e019      	b.n	800bdea <HAL_ADC_ConfigChannel+0x4d6>
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdbe:	fa93 f3a3 	rbit	r3, r3
 800bdc2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800bdc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdc6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800bdc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d101      	bne.n	800bdd2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800bdce:	2320      	movs	r3, #32
 800bdd0:	e003      	b.n	800bdda <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800bdd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdd4:	fab3 f383 	clz	r3, r3
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	3301      	adds	r3, #1
 800bddc:	f003 031f 	and.w	r3, r3, #31
 800bde0:	2b09      	cmp	r3, #9
 800bde2:	bf94      	ite	ls
 800bde4:	2301      	movls	r3, #1
 800bde6:	2300      	movhi	r3, #0
 800bde8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d079      	beq.n	800bee2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d107      	bne.n	800be0a <HAL_ADC_ConfigChannel+0x4f6>
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	0e9b      	lsrs	r3, r3, #26
 800be00:	3301      	adds	r3, #1
 800be02:	069b      	lsls	r3, r3, #26
 800be04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800be08:	e015      	b.n	800be36 <HAL_ADC_ConfigChannel+0x522>
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be12:	fa93 f3a3 	rbit	r3, r3
 800be16:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800be18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be1a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800be1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d101      	bne.n	800be26 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800be22:	2320      	movs	r3, #32
 800be24:	e003      	b.n	800be2e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800be26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be28:	fab3 f383 	clz	r3, r3
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	3301      	adds	r3, #1
 800be30:	069b      	lsls	r3, r3, #26
 800be32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d109      	bne.n	800be56 <HAL_ADC_ConfigChannel+0x542>
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	0e9b      	lsrs	r3, r3, #26
 800be48:	3301      	adds	r3, #1
 800be4a:	f003 031f 	and.w	r3, r3, #31
 800be4e:	2101      	movs	r1, #1
 800be50:	fa01 f303 	lsl.w	r3, r1, r3
 800be54:	e017      	b.n	800be86 <HAL_ADC_ConfigChannel+0x572>
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be5e:	fa93 f3a3 	rbit	r3, r3
 800be62:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800be64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be66:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800be68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d101      	bne.n	800be72 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800be6e:	2320      	movs	r3, #32
 800be70:	e003      	b.n	800be7a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800be72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be74:	fab3 f383 	clz	r3, r3
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	3301      	adds	r3, #1
 800be7c:	f003 031f 	and.w	r3, r3, #31
 800be80:	2101      	movs	r1, #1
 800be82:	fa01 f303 	lsl.w	r3, r1, r3
 800be86:	ea42 0103 	orr.w	r1, r2, r3
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be92:	2b00      	cmp	r3, #0
 800be94:	d10a      	bne.n	800beac <HAL_ADC_ConfigChannel+0x598>
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	0e9b      	lsrs	r3, r3, #26
 800be9c:	3301      	adds	r3, #1
 800be9e:	f003 021f 	and.w	r2, r3, #31
 800bea2:	4613      	mov	r3, r2
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	4413      	add	r3, r2
 800bea8:	051b      	lsls	r3, r3, #20
 800beaa:	e018      	b.n	800bede <HAL_ADC_ConfigChannel+0x5ca>
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800beb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb4:	fa93 f3a3 	rbit	r3, r3
 800beb8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800beba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bebc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800bebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d101      	bne.n	800bec8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800bec4:	2320      	movs	r3, #32
 800bec6:	e003      	b.n	800bed0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800bec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beca:	fab3 f383 	clz	r3, r3
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	3301      	adds	r3, #1
 800bed2:	f003 021f 	and.w	r2, r3, #31
 800bed6:	4613      	mov	r3, r2
 800bed8:	005b      	lsls	r3, r3, #1
 800beda:	4413      	add	r3, r2
 800bedc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bede:	430b      	orrs	r3, r1
 800bee0:	e081      	b.n	800bfe6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800beea:	2b00      	cmp	r3, #0
 800beec:	d107      	bne.n	800befe <HAL_ADC_ConfigChannel+0x5ea>
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	0e9b      	lsrs	r3, r3, #26
 800bef4:	3301      	adds	r3, #1
 800bef6:	069b      	lsls	r3, r3, #26
 800bef8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800befc:	e015      	b.n	800bf2a <HAL_ADC_ConfigChannel+0x616>
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf06:	fa93 f3a3 	rbit	r3, r3
 800bf0a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800bf0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d101      	bne.n	800bf1a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800bf16:	2320      	movs	r3, #32
 800bf18:	e003      	b.n	800bf22 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1c:	fab3 f383 	clz	r3, r3
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	3301      	adds	r3, #1
 800bf24:	069b      	lsls	r3, r3, #26
 800bf26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d109      	bne.n	800bf4a <HAL_ADC_ConfigChannel+0x636>
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	0e9b      	lsrs	r3, r3, #26
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	f003 031f 	and.w	r3, r3, #31
 800bf42:	2101      	movs	r1, #1
 800bf44:	fa01 f303 	lsl.w	r3, r1, r3
 800bf48:	e017      	b.n	800bf7a <HAL_ADC_ConfigChannel+0x666>
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf50:	6a3b      	ldr	r3, [r7, #32]
 800bf52:	fa93 f3a3 	rbit	r3, r3
 800bf56:	61fb      	str	r3, [r7, #28]
  return result;
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d101      	bne.n	800bf66 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800bf62:	2320      	movs	r3, #32
 800bf64:	e003      	b.n	800bf6e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800bf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf68:	fab3 f383 	clz	r3, r3
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	3301      	adds	r3, #1
 800bf70:	f003 031f 	and.w	r3, r3, #31
 800bf74:	2101      	movs	r1, #1
 800bf76:	fa01 f303 	lsl.w	r3, r1, r3
 800bf7a:	ea42 0103 	orr.w	r1, r2, r3
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d10d      	bne.n	800bfa6 <HAL_ADC_ConfigChannel+0x692>
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	0e9b      	lsrs	r3, r3, #26
 800bf90:	3301      	adds	r3, #1
 800bf92:	f003 021f 	and.w	r2, r3, #31
 800bf96:	4613      	mov	r3, r2
 800bf98:	005b      	lsls	r3, r3, #1
 800bf9a:	4413      	add	r3, r2
 800bf9c:	3b1e      	subs	r3, #30
 800bf9e:	051b      	lsls	r3, r3, #20
 800bfa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bfa4:	e01e      	b.n	800bfe4 <HAL_ADC_ConfigChannel+0x6d0>
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	fa93 f3a3 	rbit	r3, r3
 800bfb2:	613b      	str	r3, [r7, #16]
  return result;
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d104      	bne.n	800bfc8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800bfbe:	2320      	movs	r3, #32
 800bfc0:	e006      	b.n	800bfd0 <HAL_ADC_ConfigChannel+0x6bc>
 800bfc2:	bf00      	nop
 800bfc4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	fab3 f383 	clz	r3, r3
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	f003 021f 	and.w	r2, r3, #31
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	005b      	lsls	r3, r3, #1
 800bfda:	4413      	add	r3, r2
 800bfdc:	3b1e      	subs	r3, #30
 800bfde:	051b      	lsls	r3, r3, #20
 800bfe0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bfe4:	430b      	orrs	r3, r1
 800bfe6:	683a      	ldr	r2, [r7, #0]
 800bfe8:	6892      	ldr	r2, [r2, #8]
 800bfea:	4619      	mov	r1, r3
 800bfec:	f7ff fa60 	bl	800b4b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	4b44      	ldr	r3, [pc, #272]	; (800c108 <HAL_ADC_ConfigChannel+0x7f4>)
 800bff6:	4013      	ands	r3, r2
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d07a      	beq.n	800c0f2 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800bffc:	4843      	ldr	r0, [pc, #268]	; (800c10c <HAL_ADC_ConfigChannel+0x7f8>)
 800bffe:	f7ff f9b5 	bl	800b36c <LL_ADC_GetCommonPathInternalCh>
 800c002:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a41      	ldr	r2, [pc, #260]	; (800c110 <HAL_ADC_ConfigChannel+0x7fc>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d12c      	bne.n	800c06a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d126      	bne.n	800c06a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a3c      	ldr	r2, [pc, #240]	; (800c114 <HAL_ADC_ConfigChannel+0x800>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d004      	beq.n	800c030 <HAL_ADC_ConfigChannel+0x71c>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a3b      	ldr	r2, [pc, #236]	; (800c118 <HAL_ADC_ConfigChannel+0x804>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d15d      	bne.n	800c0ec <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c030:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c034:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c038:	4619      	mov	r1, r3
 800c03a:	4834      	ldr	r0, [pc, #208]	; (800c10c <HAL_ADC_ConfigChannel+0x7f8>)
 800c03c:	f7ff f983 	bl	800b346 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c040:	4b36      	ldr	r3, [pc, #216]	; (800c11c <HAL_ADC_ConfigChannel+0x808>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	099b      	lsrs	r3, r3, #6
 800c046:	4a36      	ldr	r2, [pc, #216]	; (800c120 <HAL_ADC_ConfigChannel+0x80c>)
 800c048:	fba2 2303 	umull	r2, r3, r2, r3
 800c04c:	099b      	lsrs	r3, r3, #6
 800c04e:	1c5a      	adds	r2, r3, #1
 800c050:	4613      	mov	r3, r2
 800c052:	005b      	lsls	r3, r3, #1
 800c054:	4413      	add	r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c05a:	e002      	b.n	800c062 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	3b01      	subs	r3, #1
 800c060:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1f9      	bne.n	800c05c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c068:	e040      	b.n	800c0ec <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a2d      	ldr	r2, [pc, #180]	; (800c124 <HAL_ADC_ConfigChannel+0x810>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d118      	bne.n	800c0a6 <HAL_ADC_ConfigChannel+0x792>
 800c074:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d112      	bne.n	800c0a6 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a23      	ldr	r2, [pc, #140]	; (800c114 <HAL_ADC_ConfigChannel+0x800>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d004      	beq.n	800c094 <HAL_ADC_ConfigChannel+0x780>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a22      	ldr	r2, [pc, #136]	; (800c118 <HAL_ADC_ConfigChannel+0x804>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d12d      	bne.n	800c0f0 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c094:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c098:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c09c:	4619      	mov	r1, r3
 800c09e:	481b      	ldr	r0, [pc, #108]	; (800c10c <HAL_ADC_ConfigChannel+0x7f8>)
 800c0a0:	f7ff f951 	bl	800b346 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c0a4:	e024      	b.n	800c0f0 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a1f      	ldr	r2, [pc, #124]	; (800c128 <HAL_ADC_ConfigChannel+0x814>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d120      	bne.n	800c0f2 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c0b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c0b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d11a      	bne.n	800c0f2 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a14      	ldr	r2, [pc, #80]	; (800c114 <HAL_ADC_ConfigChannel+0x800>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d115      	bne.n	800c0f2 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c0c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c0ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	480e      	ldr	r0, [pc, #56]	; (800c10c <HAL_ADC_ConfigChannel+0x7f8>)
 800c0d2:	f7ff f938 	bl	800b346 <LL_ADC_SetCommonPathInternalCh>
 800c0d6:	e00c      	b.n	800c0f2 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0dc:	f043 0220 	orr.w	r2, r3, #32
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800c0ea:	e002      	b.n	800c0f2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c0ec:	bf00      	nop
 800c0ee:	e000      	b.n	800c0f2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c0f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800c0fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	37d8      	adds	r7, #216	; 0xd8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	80080000 	.word	0x80080000
 800c10c:	50040300 	.word	0x50040300
 800c110:	c7520000 	.word	0xc7520000
 800c114:	50040000 	.word	0x50040000
 800c118:	50040200 	.word	0x50040200
 800c11c:	20000198 	.word	0x20000198
 800c120:	053e2d63 	.word	0x053e2d63
 800c124:	cb840000 	.word	0xcb840000
 800c128:	80000001 	.word	0x80000001

0800c12c <LL_ADC_IsEnabled>:
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	f003 0301 	and.w	r3, r3, #1
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d101      	bne.n	800c144 <LL_ADC_IsEnabled+0x18>
 800c140:	2301      	movs	r3, #1
 800c142:	e000      	b.n	800c146 <LL_ADC_IsEnabled+0x1a>
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	370c      	adds	r7, #12
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr

0800c152 <LL_ADC_REG_IsConversionOngoing>:
{
 800c152:	b480      	push	{r7}
 800c154:	b083      	sub	sp, #12
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	f003 0304 	and.w	r3, r3, #4
 800c162:	2b04      	cmp	r3, #4
 800c164:	d101      	bne.n	800c16a <LL_ADC_REG_IsConversionOngoing+0x18>
 800c166:	2301      	movs	r3, #1
 800c168:	e000      	b.n	800c16c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c16a:	2300      	movs	r3, #0
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800c178:	b590      	push	{r4, r7, lr}
 800c17a:	b0a1      	sub	sp, #132	; 0x84
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d101      	bne.n	800c196 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c192:	2302      	movs	r3, #2
 800c194:	e093      	b.n	800c2be <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800c19e:	2300      	movs	r3, #0
 800c1a0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a47      	ldr	r2, [pc, #284]	; (800c2c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d102      	bne.n	800c1b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c1b0:	4b46      	ldr	r3, [pc, #280]	; (800c2cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c1b2:	60fb      	str	r3, [r7, #12]
 800c1b4:	e001      	b.n	800c1ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10b      	bne.n	800c1d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1c4:	f043 0220 	orr.w	r2, r3, #32
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e072      	b.n	800c2be <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7ff ffb9 	bl	800c152 <LL_ADC_REG_IsConversionOngoing>
 800c1e0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7ff ffb3 	bl	800c152 <LL_ADC_REG_IsConversionOngoing>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d154      	bne.n	800c29c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800c1f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d151      	bne.n	800c29c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c1f8:	4b35      	ldr	r3, [pc, #212]	; (800c2d0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800c1fa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d02c      	beq.n	800c25e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	6859      	ldr	r1, [r3, #4]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c216:	035b      	lsls	r3, r3, #13
 800c218:	430b      	orrs	r3, r1
 800c21a:	431a      	orrs	r2, r3
 800c21c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c21e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c220:	4829      	ldr	r0, [pc, #164]	; (800c2c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c222:	f7ff ff83 	bl	800c12c <LL_ADC_IsEnabled>
 800c226:	4604      	mov	r4, r0
 800c228:	4828      	ldr	r0, [pc, #160]	; (800c2cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c22a:	f7ff ff7f 	bl	800c12c <LL_ADC_IsEnabled>
 800c22e:	4603      	mov	r3, r0
 800c230:	431c      	orrs	r4, r3
 800c232:	4828      	ldr	r0, [pc, #160]	; (800c2d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c234:	f7ff ff7a 	bl	800c12c <LL_ADC_IsEnabled>
 800c238:	4603      	mov	r3, r0
 800c23a:	4323      	orrs	r3, r4
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d137      	bne.n	800c2b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800c248:	f023 030f 	bic.w	r3, r3, #15
 800c24c:	683a      	ldr	r2, [r7, #0]
 800c24e:	6811      	ldr	r1, [r2, #0]
 800c250:	683a      	ldr	r2, [r7, #0]
 800c252:	6892      	ldr	r2, [r2, #8]
 800c254:	430a      	orrs	r2, r1
 800c256:	431a      	orrs	r2, r3
 800c258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c25a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800c25c:	e028      	b.n	800c2b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c25e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c268:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c26a:	4817      	ldr	r0, [pc, #92]	; (800c2c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c26c:	f7ff ff5e 	bl	800c12c <LL_ADC_IsEnabled>
 800c270:	4604      	mov	r4, r0
 800c272:	4816      	ldr	r0, [pc, #88]	; (800c2cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c274:	f7ff ff5a 	bl	800c12c <LL_ADC_IsEnabled>
 800c278:	4603      	mov	r3, r0
 800c27a:	431c      	orrs	r4, r3
 800c27c:	4815      	ldr	r0, [pc, #84]	; (800c2d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c27e:	f7ff ff55 	bl	800c12c <LL_ADC_IsEnabled>
 800c282:	4603      	mov	r3, r0
 800c284:	4323      	orrs	r3, r4
 800c286:	2b00      	cmp	r3, #0
 800c288:	d112      	bne.n	800c2b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c28a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800c292:	f023 030f 	bic.w	r3, r3, #15
 800c296:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c298:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800c29a:	e009      	b.n	800c2b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2a0:	f043 0220 	orr.w	r2, r3, #32
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800c2ae:	e000      	b.n	800c2b2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800c2b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800c2ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3784      	adds	r7, #132	; 0x84
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd90      	pop	{r4, r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	50040000 	.word	0x50040000
 800c2cc:	50040100 	.word	0x50040100
 800c2d0:	50040300 	.word	0x50040300
 800c2d4:	50040200 	.word	0x50040200

0800c2d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f003 0307 	and.w	r3, r3, #7
 800c2e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c2e8:	4b0c      	ldr	r3, [pc, #48]	; (800c31c <__NVIC_SetPriorityGrouping+0x44>)
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c2f4:	4013      	ands	r3, r2
 800c2f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c30a:	4a04      	ldr	r2, [pc, #16]	; (800c31c <__NVIC_SetPriorityGrouping+0x44>)
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	60d3      	str	r3, [r2, #12]
}
 800c310:	bf00      	nop
 800c312:	3714      	adds	r7, #20
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr
 800c31c:	e000ed00 	.word	0xe000ed00

0800c320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c320:	b480      	push	{r7}
 800c322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c324:	4b04      	ldr	r3, [pc, #16]	; (800c338 <__NVIC_GetPriorityGrouping+0x18>)
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	0a1b      	lsrs	r3, r3, #8
 800c32a:	f003 0307 	and.w	r3, r3, #7
}
 800c32e:	4618      	mov	r0, r3
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr
 800c338:	e000ed00 	.word	0xe000ed00

0800c33c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	4603      	mov	r3, r0
 800c344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	db0b      	blt.n	800c366 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c34e:	79fb      	ldrb	r3, [r7, #7]
 800c350:	f003 021f 	and.w	r2, r3, #31
 800c354:	4907      	ldr	r1, [pc, #28]	; (800c374 <__NVIC_EnableIRQ+0x38>)
 800c356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c35a:	095b      	lsrs	r3, r3, #5
 800c35c:	2001      	movs	r0, #1
 800c35e:	fa00 f202 	lsl.w	r2, r0, r2
 800c362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c366:	bf00      	nop
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	e000e100 	.word	0xe000e100

0800c378 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	4603      	mov	r3, r0
 800c380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c386:	2b00      	cmp	r3, #0
 800c388:	db12      	blt.n	800c3b0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c38a:	79fb      	ldrb	r3, [r7, #7]
 800c38c:	f003 021f 	and.w	r2, r3, #31
 800c390:	490a      	ldr	r1, [pc, #40]	; (800c3bc <__NVIC_DisableIRQ+0x44>)
 800c392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c396:	095b      	lsrs	r3, r3, #5
 800c398:	2001      	movs	r0, #1
 800c39a:	fa00 f202 	lsl.w	r2, r0, r2
 800c39e:	3320      	adds	r3, #32
 800c3a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c3a4:	f3bf 8f4f 	dsb	sy
}
 800c3a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c3aa:	f3bf 8f6f 	isb	sy
}
 800c3ae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	e000e100 	.word	0xe000e100

0800c3c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	6039      	str	r1, [r7, #0]
 800c3ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c3cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	db0a      	blt.n	800c3ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	b2da      	uxtb	r2, r3
 800c3d8:	490c      	ldr	r1, [pc, #48]	; (800c40c <__NVIC_SetPriority+0x4c>)
 800c3da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3de:	0112      	lsls	r2, r2, #4
 800c3e0:	b2d2      	uxtb	r2, r2
 800c3e2:	440b      	add	r3, r1
 800c3e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c3e8:	e00a      	b.n	800c400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	b2da      	uxtb	r2, r3
 800c3ee:	4908      	ldr	r1, [pc, #32]	; (800c410 <__NVIC_SetPriority+0x50>)
 800c3f0:	79fb      	ldrb	r3, [r7, #7]
 800c3f2:	f003 030f 	and.w	r3, r3, #15
 800c3f6:	3b04      	subs	r3, #4
 800c3f8:	0112      	lsls	r2, r2, #4
 800c3fa:	b2d2      	uxtb	r2, r2
 800c3fc:	440b      	add	r3, r1
 800c3fe:	761a      	strb	r2, [r3, #24]
}
 800c400:	bf00      	nop
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr
 800c40c:	e000e100 	.word	0xe000e100
 800c410:	e000ed00 	.word	0xe000ed00

0800c414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c414:	b480      	push	{r7}
 800c416:	b089      	sub	sp, #36	; 0x24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f003 0307 	and.w	r3, r3, #7
 800c426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	f1c3 0307 	rsb	r3, r3, #7
 800c42e:	2b04      	cmp	r3, #4
 800c430:	bf28      	it	cs
 800c432:	2304      	movcs	r3, #4
 800c434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c436:	69fb      	ldr	r3, [r7, #28]
 800c438:	3304      	adds	r3, #4
 800c43a:	2b06      	cmp	r3, #6
 800c43c:	d902      	bls.n	800c444 <NVIC_EncodePriority+0x30>
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	3b03      	subs	r3, #3
 800c442:	e000      	b.n	800c446 <NVIC_EncodePriority+0x32>
 800c444:	2300      	movs	r3, #0
 800c446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	fa02 f303 	lsl.w	r3, r2, r3
 800c452:	43da      	mvns	r2, r3
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	401a      	ands	r2, r3
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c45c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	fa01 f303 	lsl.w	r3, r1, r3
 800c466:	43d9      	mvns	r1, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c46c:	4313      	orrs	r3, r2
         );
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3724      	adds	r7, #36	; 0x24
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
	...

0800c47c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	3b01      	subs	r3, #1
 800c488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c48c:	d301      	bcc.n	800c492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c48e:	2301      	movs	r3, #1
 800c490:	e00f      	b.n	800c4b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c492:	4a0a      	ldr	r2, [pc, #40]	; (800c4bc <SysTick_Config+0x40>)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	3b01      	subs	r3, #1
 800c498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c49a:	210f      	movs	r1, #15
 800c49c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4a0:	f7ff ff8e 	bl	800c3c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c4a4:	4b05      	ldr	r3, [pc, #20]	; (800c4bc <SysTick_Config+0x40>)
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c4aa:	4b04      	ldr	r3, [pc, #16]	; (800c4bc <SysTick_Config+0x40>)
 800c4ac:	2207      	movs	r2, #7
 800c4ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	e000e010 	.word	0xe000e010

0800c4c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f7ff ff05 	bl	800c2d8 <__NVIC_SetPriorityGrouping>
}
 800c4ce:	bf00      	nop
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b086      	sub	sp, #24
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	4603      	mov	r3, r0
 800c4de:	60b9      	str	r1, [r7, #8]
 800c4e0:	607a      	str	r2, [r7, #4]
 800c4e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c4e8:	f7ff ff1a 	bl	800c320 <__NVIC_GetPriorityGrouping>
 800c4ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	68b9      	ldr	r1, [r7, #8]
 800c4f2:	6978      	ldr	r0, [r7, #20]
 800c4f4:	f7ff ff8e 	bl	800c414 <NVIC_EncodePriority>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4fe:	4611      	mov	r1, r2
 800c500:	4618      	mov	r0, r3
 800c502:	f7ff ff5d 	bl	800c3c0 <__NVIC_SetPriority>
}
 800c506:	bf00      	nop
 800c508:	3718      	adds	r7, #24
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b082      	sub	sp, #8
 800c512:	af00      	add	r7, sp, #0
 800c514:	4603      	mov	r3, r0
 800c516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7ff ff0d 	bl	800c33c <__NVIC_EnableIRQ>
}
 800c522:	bf00      	nop
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b082      	sub	sp, #8
 800c52e:	af00      	add	r7, sp, #0
 800c530:	4603      	mov	r3, r0
 800c532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c538:	4618      	mov	r0, r3
 800c53a:	f7ff ff1d 	bl	800c378 <__NVIC_DisableIRQ>
}
 800c53e:	bf00      	nop
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b082      	sub	sp, #8
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7ff ff94 	bl	800c47c <SysTick_Config>
 800c554:	4603      	mov	r3, r0
}
 800c556:	4618      	mov	r0, r3
 800c558:	3708      	adds	r7, #8
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
	...

0800c560 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d101      	bne.n	800c572 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800c56e:	2301      	movs	r3, #1
 800c570:	e075      	b.n	800c65e <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d106      	bne.n	800c58c <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7f4 fa46 	bl	8000a18 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2202      	movs	r2, #2
 800c590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c5a2:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	699b      	ldr	r3, [r3, #24]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d002      	beq.n	800c5b2 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	6819      	ldr	r1, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	4b2a      	ldr	r3, [pc, #168]	; (800c668 <HAL_DCMI_Init+0x108>)
 800c5be:	400b      	ands	r3, r1
 800c5c0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	6819      	ldr	r1, [r3, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	685a      	ldr	r2, [r3, #4]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	695b      	ldr	r3, [r3, #20]
 800c5d0:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800c5d6:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	691b      	ldr	r3, [r3, #16]
 800c5dc:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800c5e2:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800c5ee:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f4:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800c5fa:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c600:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800c606:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	430a      	orrs	r2, r1
 800c60e:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	2b10      	cmp	r3, #16
 800c616:	d112      	bne.n	800c63e <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	7f1b      	ldrb	r3, [r3, #28]
 800c61c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	7f5b      	ldrb	r3, [r3, #29]
 800c622:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800c624:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	7f9b      	ldrb	r3, [r3, #30]
 800c62a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800c62c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	7fdb      	ldrb	r3, [r3, #31]
 800c634:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800c63a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800c63c:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	68da      	ldr	r2, [r3, #12]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f042 021f 	orr.w	r2, r2, #31
 800c64c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	ffe0f007 	.word	0xffe0f007

0800c66c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800c67a:	2301      	movs	r3, #1
 800c67c:	e0ac      	b.n	800c7d8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4618      	mov	r0, r3
 800c684:	f000 f8b2 	bl	800c7ec <DFSDM_GetChannelFromInstance>
 800c688:	4603      	mov	r3, r0
 800c68a:	4a55      	ldr	r2, [pc, #340]	; (800c7e0 <HAL_DFSDM_ChannelInit+0x174>)
 800c68c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d001      	beq.n	800c698 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	e09f      	b.n	800c7d8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f7f4 faa9 	bl	8000bf0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800c69e:	4b51      	ldr	r3, [pc, #324]	; (800c7e4 <HAL_DFSDM_ChannelInit+0x178>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	4a4f      	ldr	r2, [pc, #316]	; (800c7e4 <HAL_DFSDM_ChannelInit+0x178>)
 800c6a6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800c6a8:	4b4e      	ldr	r3, [pc, #312]	; (800c7e4 <HAL_DFSDM_ChannelInit+0x178>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d125      	bne.n	800c6fc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800c6b0:	4b4d      	ldr	r3, [pc, #308]	; (800c7e8 <HAL_DFSDM_ChannelInit+0x17c>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a4c      	ldr	r2, [pc, #304]	; (800c7e8 <HAL_DFSDM_ChannelInit+0x17c>)
 800c6b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c6ba:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800c6bc:	4b4a      	ldr	r3, [pc, #296]	; (800c7e8 <HAL_DFSDM_ChannelInit+0x17c>)
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	4948      	ldr	r1, [pc, #288]	; (800c7e8 <HAL_DFSDM_ChannelInit+0x17c>)
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800c6ca:	4b47      	ldr	r3, [pc, #284]	; (800c7e8 <HAL_DFSDM_ChannelInit+0x17c>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4a46      	ldr	r2, [pc, #280]	; (800c7e8 <HAL_DFSDM_ChannelInit+0x17c>)
 800c6d0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800c6d4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	791b      	ldrb	r3, [r3, #4]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d108      	bne.n	800c6f0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800c6de:	4b42      	ldr	r3, [pc, #264]	; (800c7e8 <HAL_DFSDM_ChannelInit+0x17c>)
 800c6e0:	681a      	ldr	r2, [r3, #0]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	041b      	lsls	r3, r3, #16
 800c6ea:	493f      	ldr	r1, [pc, #252]	; (800c7e8 <HAL_DFSDM_ChannelInit+0x17c>)
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800c6f0:	4b3d      	ldr	r3, [pc, #244]	; (800c7e8 <HAL_DFSDM_ChannelInit+0x17c>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a3c      	ldr	r2, [pc, #240]	; (800c7e8 <HAL_DFSDM_ChannelInit+0x17c>)
 800c6f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c6fa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800c70a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6819      	ldr	r1, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800c71a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800c720:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	430a      	orrs	r2, r1
 800c728:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f022 020f 	bic.w	r2, r2, #15
 800c738:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	6819      	ldr	r1, [r3, #0]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800c748:	431a      	orrs	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	430a      	orrs	r2, r1
 800c750:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	689a      	ldr	r2, [r3, #8]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800c760:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	6899      	ldr	r1, [r3, #8]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c770:	3b01      	subs	r3, #1
 800c772:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800c774:	431a      	orrs	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	430a      	orrs	r2, r1
 800c77c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	685a      	ldr	r2, [r3, #4]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f002 0207 	and.w	r2, r2, #7
 800c78c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	6859      	ldr	r1, [r3, #4]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c798:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c79e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800c7a0:	431a      	orrs	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	430a      	orrs	r2, r1
 800c7a8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c7b8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2201      	movs	r2, #1
 800c7be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f000 f810 	bl	800c7ec <DFSDM_GetChannelFromInstance>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	4904      	ldr	r1, [pc, #16]	; (800c7e0 <HAL_DFSDM_ChannelInit+0x174>)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800c7d6:	2300      	movs	r3, #0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	200011fc 	.word	0x200011fc
 800c7e4:	200011f8 	.word	0x200011f8
 800c7e8:	40016000 	.word	0x40016000

0800c7ec <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	4a1c      	ldr	r2, [pc, #112]	; (800c868 <DFSDM_GetChannelFromInstance+0x7c>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d102      	bne.n	800c802 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	60fb      	str	r3, [r7, #12]
 800c800:	e02b      	b.n	800c85a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4a19      	ldr	r2, [pc, #100]	; (800c86c <DFSDM_GetChannelFromInstance+0x80>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d102      	bne.n	800c810 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800c80a:	2301      	movs	r3, #1
 800c80c:	60fb      	str	r3, [r7, #12]
 800c80e:	e024      	b.n	800c85a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	4a17      	ldr	r2, [pc, #92]	; (800c870 <DFSDM_GetChannelFromInstance+0x84>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d102      	bne.n	800c81e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800c818:	2302      	movs	r3, #2
 800c81a:	60fb      	str	r3, [r7, #12]
 800c81c:	e01d      	b.n	800c85a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4a14      	ldr	r2, [pc, #80]	; (800c874 <DFSDM_GetChannelFromInstance+0x88>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d102      	bne.n	800c82c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800c826:	2304      	movs	r3, #4
 800c828:	60fb      	str	r3, [r7, #12]
 800c82a:	e016      	b.n	800c85a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a12      	ldr	r2, [pc, #72]	; (800c878 <DFSDM_GetChannelFromInstance+0x8c>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d102      	bne.n	800c83a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800c834:	2305      	movs	r3, #5
 800c836:	60fb      	str	r3, [r7, #12]
 800c838:	e00f      	b.n	800c85a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4a0f      	ldr	r2, [pc, #60]	; (800c87c <DFSDM_GetChannelFromInstance+0x90>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d102      	bne.n	800c848 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800c842:	2306      	movs	r3, #6
 800c844:	60fb      	str	r3, [r7, #12]
 800c846:	e008      	b.n	800c85a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4a0d      	ldr	r2, [pc, #52]	; (800c880 <DFSDM_GetChannelFromInstance+0x94>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d102      	bne.n	800c856 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800c850:	2307      	movs	r3, #7
 800c852:	60fb      	str	r3, [r7, #12]
 800c854:	e001      	b.n	800c85a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800c856:	2303      	movs	r3, #3
 800c858:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800c85a:	68fb      	ldr	r3, [r7, #12]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3714      	adds	r7, #20
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr
 800c868:	40016000 	.word	0x40016000
 800c86c:	40016020 	.word	0x40016020
 800c870:	40016040 	.word	0x40016040
 800c874:	40016080 	.word	0x40016080
 800c878:	400160a0 	.word	0x400160a0
 800c87c:	400160c0 	.word	0x400160c0
 800c880:	400160e0 	.word	0x400160e0

0800c884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c884:	b480      	push	{r7}
 800c886:	b087      	sub	sp, #28
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c88e:	2300      	movs	r3, #0
 800c890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c892:	e166      	b.n	800cb62 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	2101      	movs	r1, #1
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	fa01 f303 	lsl.w	r3, r1, r3
 800c8a0:	4013      	ands	r3, r2
 800c8a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	f000 8158 	beq.w	800cb5c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	f003 0303 	and.w	r3, r3, #3
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d005      	beq.n	800c8c4 <HAL_GPIO_Init+0x40>
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	f003 0303 	and.w	r3, r3, #3
 800c8c0:	2b02      	cmp	r3, #2
 800c8c2:	d130      	bne.n	800c926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	005b      	lsls	r3, r3, #1
 800c8ce:	2203      	movs	r2, #3
 800c8d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8d4:	43db      	mvns	r3, r3
 800c8d6:	693a      	ldr	r2, [r7, #16]
 800c8d8:	4013      	ands	r3, r2
 800c8da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	68da      	ldr	r2, [r3, #12]
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	005b      	lsls	r3, r3, #1
 800c8e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e8:	693a      	ldr	r2, [r7, #16]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	693a      	ldr	r2, [r7, #16]
 800c8f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c902:	43db      	mvns	r3, r3
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	4013      	ands	r3, r2
 800c908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	091b      	lsrs	r3, r3, #4
 800c910:	f003 0201 	and.w	r2, r3, #1
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	fa02 f303 	lsl.w	r3, r2, r3
 800c91a:	693a      	ldr	r2, [r7, #16]
 800c91c:	4313      	orrs	r3, r2
 800c91e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	693a      	ldr	r2, [r7, #16]
 800c924:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	f003 0303 	and.w	r3, r3, #3
 800c92e:	2b03      	cmp	r3, #3
 800c930:	d017      	beq.n	800c962 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	005b      	lsls	r3, r3, #1
 800c93c:	2203      	movs	r2, #3
 800c93e:	fa02 f303 	lsl.w	r3, r2, r3
 800c942:	43db      	mvns	r3, r3
 800c944:	693a      	ldr	r2, [r7, #16]
 800c946:	4013      	ands	r3, r2
 800c948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	689a      	ldr	r2, [r3, #8]
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	005b      	lsls	r3, r3, #1
 800c952:	fa02 f303 	lsl.w	r3, r2, r3
 800c956:	693a      	ldr	r2, [r7, #16]
 800c958:	4313      	orrs	r3, r2
 800c95a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	693a      	ldr	r2, [r7, #16]
 800c960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	f003 0303 	and.w	r3, r3, #3
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d123      	bne.n	800c9b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	08da      	lsrs	r2, r3, #3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	3208      	adds	r2, #8
 800c976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c97a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	f003 0307 	and.w	r3, r3, #7
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	220f      	movs	r2, #15
 800c986:	fa02 f303 	lsl.w	r3, r2, r3
 800c98a:	43db      	mvns	r3, r3
 800c98c:	693a      	ldr	r2, [r7, #16]
 800c98e:	4013      	ands	r3, r2
 800c990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	691a      	ldr	r2, [r3, #16]
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	f003 0307 	and.w	r3, r3, #7
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a2:	693a      	ldr	r2, [r7, #16]
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	08da      	lsrs	r2, r3, #3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	3208      	adds	r2, #8
 800c9b0:	6939      	ldr	r1, [r7, #16]
 800c9b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	005b      	lsls	r3, r3, #1
 800c9c0:	2203      	movs	r2, #3
 800c9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c9c6:	43db      	mvns	r3, r3
 800c9c8:	693a      	ldr	r2, [r7, #16]
 800c9ca:	4013      	ands	r3, r2
 800c9cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	f003 0203 	and.w	r2, r3, #3
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	005b      	lsls	r3, r3, #1
 800c9da:	fa02 f303 	lsl.w	r3, r2, r3
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	693a      	ldr	r2, [r7, #16]
 800c9e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	f000 80b2 	beq.w	800cb5c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c9f8:	4b61      	ldr	r3, [pc, #388]	; (800cb80 <HAL_GPIO_Init+0x2fc>)
 800c9fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9fc:	4a60      	ldr	r2, [pc, #384]	; (800cb80 <HAL_GPIO_Init+0x2fc>)
 800c9fe:	f043 0301 	orr.w	r3, r3, #1
 800ca02:	6613      	str	r3, [r2, #96]	; 0x60
 800ca04:	4b5e      	ldr	r3, [pc, #376]	; (800cb80 <HAL_GPIO_Init+0x2fc>)
 800ca06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca08:	f003 0301 	and.w	r3, r3, #1
 800ca0c:	60bb      	str	r3, [r7, #8]
 800ca0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ca10:	4a5c      	ldr	r2, [pc, #368]	; (800cb84 <HAL_GPIO_Init+0x300>)
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	089b      	lsrs	r3, r3, #2
 800ca16:	3302      	adds	r3, #2
 800ca18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	f003 0303 	and.w	r3, r3, #3
 800ca24:	009b      	lsls	r3, r3, #2
 800ca26:	220f      	movs	r2, #15
 800ca28:	fa02 f303 	lsl.w	r3, r2, r3
 800ca2c:	43db      	mvns	r3, r3
 800ca2e:	693a      	ldr	r2, [r7, #16]
 800ca30:	4013      	ands	r3, r2
 800ca32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ca3a:	d02b      	beq.n	800ca94 <HAL_GPIO_Init+0x210>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a52      	ldr	r2, [pc, #328]	; (800cb88 <HAL_GPIO_Init+0x304>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d025      	beq.n	800ca90 <HAL_GPIO_Init+0x20c>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4a51      	ldr	r2, [pc, #324]	; (800cb8c <HAL_GPIO_Init+0x308>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d01f      	beq.n	800ca8c <HAL_GPIO_Init+0x208>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	4a50      	ldr	r2, [pc, #320]	; (800cb90 <HAL_GPIO_Init+0x30c>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d019      	beq.n	800ca88 <HAL_GPIO_Init+0x204>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4a4f      	ldr	r2, [pc, #316]	; (800cb94 <HAL_GPIO_Init+0x310>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d013      	beq.n	800ca84 <HAL_GPIO_Init+0x200>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	4a4e      	ldr	r2, [pc, #312]	; (800cb98 <HAL_GPIO_Init+0x314>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d00d      	beq.n	800ca80 <HAL_GPIO_Init+0x1fc>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4a4d      	ldr	r2, [pc, #308]	; (800cb9c <HAL_GPIO_Init+0x318>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d007      	beq.n	800ca7c <HAL_GPIO_Init+0x1f8>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	4a4c      	ldr	r2, [pc, #304]	; (800cba0 <HAL_GPIO_Init+0x31c>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d101      	bne.n	800ca78 <HAL_GPIO_Init+0x1f4>
 800ca74:	2307      	movs	r3, #7
 800ca76:	e00e      	b.n	800ca96 <HAL_GPIO_Init+0x212>
 800ca78:	2308      	movs	r3, #8
 800ca7a:	e00c      	b.n	800ca96 <HAL_GPIO_Init+0x212>
 800ca7c:	2306      	movs	r3, #6
 800ca7e:	e00a      	b.n	800ca96 <HAL_GPIO_Init+0x212>
 800ca80:	2305      	movs	r3, #5
 800ca82:	e008      	b.n	800ca96 <HAL_GPIO_Init+0x212>
 800ca84:	2304      	movs	r3, #4
 800ca86:	e006      	b.n	800ca96 <HAL_GPIO_Init+0x212>
 800ca88:	2303      	movs	r3, #3
 800ca8a:	e004      	b.n	800ca96 <HAL_GPIO_Init+0x212>
 800ca8c:	2302      	movs	r3, #2
 800ca8e:	e002      	b.n	800ca96 <HAL_GPIO_Init+0x212>
 800ca90:	2301      	movs	r3, #1
 800ca92:	e000      	b.n	800ca96 <HAL_GPIO_Init+0x212>
 800ca94:	2300      	movs	r3, #0
 800ca96:	697a      	ldr	r2, [r7, #20]
 800ca98:	f002 0203 	and.w	r2, r2, #3
 800ca9c:	0092      	lsls	r2, r2, #2
 800ca9e:	4093      	lsls	r3, r2
 800caa0:	693a      	ldr	r2, [r7, #16]
 800caa2:	4313      	orrs	r3, r2
 800caa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800caa6:	4937      	ldr	r1, [pc, #220]	; (800cb84 <HAL_GPIO_Init+0x300>)
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	089b      	lsrs	r3, r3, #2
 800caac:	3302      	adds	r3, #2
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cab4:	4b3b      	ldr	r3, [pc, #236]	; (800cba4 <HAL_GPIO_Init+0x320>)
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	43db      	mvns	r3, r3
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	4013      	ands	r3, r2
 800cac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d003      	beq.n	800cad8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800cad0:	693a      	ldr	r2, [r7, #16]
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	4313      	orrs	r3, r2
 800cad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800cad8:	4a32      	ldr	r2, [pc, #200]	; (800cba4 <HAL_GPIO_Init+0x320>)
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800cade:	4b31      	ldr	r3, [pc, #196]	; (800cba4 <HAL_GPIO_Init+0x320>)
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	43db      	mvns	r3, r3
 800cae8:	693a      	ldr	r2, [r7, #16]
 800caea:	4013      	ands	r3, r2
 800caec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d003      	beq.n	800cb02 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800cafa:	693a      	ldr	r2, [r7, #16]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	4313      	orrs	r3, r2
 800cb00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800cb02:	4a28      	ldr	r2, [pc, #160]	; (800cba4 <HAL_GPIO_Init+0x320>)
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800cb08:	4b26      	ldr	r3, [pc, #152]	; (800cba4 <HAL_GPIO_Init+0x320>)
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	43db      	mvns	r3, r3
 800cb12:	693a      	ldr	r2, [r7, #16]
 800cb14:	4013      	ands	r3, r2
 800cb16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d003      	beq.n	800cb2c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800cb24:	693a      	ldr	r2, [r7, #16]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800cb2c:	4a1d      	ldr	r2, [pc, #116]	; (800cba4 <HAL_GPIO_Init+0x320>)
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800cb32:	4b1c      	ldr	r3, [pc, #112]	; (800cba4 <HAL_GPIO_Init+0x320>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	43db      	mvns	r3, r3
 800cb3c:	693a      	ldr	r2, [r7, #16]
 800cb3e:	4013      	ands	r3, r2
 800cb40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d003      	beq.n	800cb56 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800cb4e:	693a      	ldr	r2, [r7, #16]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800cb56:	4a13      	ldr	r2, [pc, #76]	; (800cba4 <HAL_GPIO_Init+0x320>)
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	fa22 f303 	lsr.w	r3, r2, r3
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f47f ae91 	bne.w	800c894 <HAL_GPIO_Init+0x10>
  }
}
 800cb72:	bf00      	nop
 800cb74:	bf00      	nop
 800cb76:	371c      	adds	r7, #28
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr
 800cb80:	40021000 	.word	0x40021000
 800cb84:	40010000 	.word	0x40010000
 800cb88:	48000400 	.word	0x48000400
 800cb8c:	48000800 	.word	0x48000800
 800cb90:	48000c00 	.word	0x48000c00
 800cb94:	48001000 	.word	0x48001000
 800cb98:	48001400 	.word	0x48001400
 800cb9c:	48001800 	.word	0x48001800
 800cba0:	48001c00 	.word	0x48001c00
 800cba4:	40010400 	.word	0x40010400

0800cba8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b087      	sub	sp, #28
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800cbb6:	e0c9      	b.n	800cd4c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800cbb8:	2201      	movs	r2, #1
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc0:	683a      	ldr	r2, [r7, #0]
 800cbc2:	4013      	ands	r3, r2
 800cbc4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	f000 80bc 	beq.w	800cd46 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800cbce:	4a66      	ldr	r2, [pc, #408]	; (800cd68 <HAL_GPIO_DeInit+0x1c0>)
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	089b      	lsrs	r3, r3, #2
 800cbd4:	3302      	adds	r3, #2
 800cbd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbda:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	f003 0303 	and.w	r3, r3, #3
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	220f      	movs	r2, #15
 800cbe6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	4013      	ands	r3, r2
 800cbee:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800cbf6:	d02b      	beq.n	800cc50 <HAL_GPIO_DeInit+0xa8>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a5c      	ldr	r2, [pc, #368]	; (800cd6c <HAL_GPIO_DeInit+0x1c4>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d025      	beq.n	800cc4c <HAL_GPIO_DeInit+0xa4>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4a5b      	ldr	r2, [pc, #364]	; (800cd70 <HAL_GPIO_DeInit+0x1c8>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d01f      	beq.n	800cc48 <HAL_GPIO_DeInit+0xa0>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	4a5a      	ldr	r2, [pc, #360]	; (800cd74 <HAL_GPIO_DeInit+0x1cc>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d019      	beq.n	800cc44 <HAL_GPIO_DeInit+0x9c>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	4a59      	ldr	r2, [pc, #356]	; (800cd78 <HAL_GPIO_DeInit+0x1d0>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d013      	beq.n	800cc40 <HAL_GPIO_DeInit+0x98>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4a58      	ldr	r2, [pc, #352]	; (800cd7c <HAL_GPIO_DeInit+0x1d4>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d00d      	beq.n	800cc3c <HAL_GPIO_DeInit+0x94>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4a57      	ldr	r2, [pc, #348]	; (800cd80 <HAL_GPIO_DeInit+0x1d8>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d007      	beq.n	800cc38 <HAL_GPIO_DeInit+0x90>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	4a56      	ldr	r2, [pc, #344]	; (800cd84 <HAL_GPIO_DeInit+0x1dc>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d101      	bne.n	800cc34 <HAL_GPIO_DeInit+0x8c>
 800cc30:	2307      	movs	r3, #7
 800cc32:	e00e      	b.n	800cc52 <HAL_GPIO_DeInit+0xaa>
 800cc34:	2308      	movs	r3, #8
 800cc36:	e00c      	b.n	800cc52 <HAL_GPIO_DeInit+0xaa>
 800cc38:	2306      	movs	r3, #6
 800cc3a:	e00a      	b.n	800cc52 <HAL_GPIO_DeInit+0xaa>
 800cc3c:	2305      	movs	r3, #5
 800cc3e:	e008      	b.n	800cc52 <HAL_GPIO_DeInit+0xaa>
 800cc40:	2304      	movs	r3, #4
 800cc42:	e006      	b.n	800cc52 <HAL_GPIO_DeInit+0xaa>
 800cc44:	2303      	movs	r3, #3
 800cc46:	e004      	b.n	800cc52 <HAL_GPIO_DeInit+0xaa>
 800cc48:	2302      	movs	r3, #2
 800cc4a:	e002      	b.n	800cc52 <HAL_GPIO_DeInit+0xaa>
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e000      	b.n	800cc52 <HAL_GPIO_DeInit+0xaa>
 800cc50:	2300      	movs	r3, #0
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	f002 0203 	and.w	r2, r2, #3
 800cc58:	0092      	lsls	r2, r2, #2
 800cc5a:	4093      	lsls	r3, r2
 800cc5c:	68fa      	ldr	r2, [r7, #12]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d132      	bne.n	800ccc8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800cc62:	4b49      	ldr	r3, [pc, #292]	; (800cd88 <HAL_GPIO_DeInit+0x1e0>)
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	43db      	mvns	r3, r3
 800cc6a:	4947      	ldr	r1, [pc, #284]	; (800cd88 <HAL_GPIO_DeInit+0x1e0>)
 800cc6c:	4013      	ands	r3, r2
 800cc6e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800cc70:	4b45      	ldr	r3, [pc, #276]	; (800cd88 <HAL_GPIO_DeInit+0x1e0>)
 800cc72:	685a      	ldr	r2, [r3, #4]
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	43db      	mvns	r3, r3
 800cc78:	4943      	ldr	r1, [pc, #268]	; (800cd88 <HAL_GPIO_DeInit+0x1e0>)
 800cc7a:	4013      	ands	r3, r2
 800cc7c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800cc7e:	4b42      	ldr	r3, [pc, #264]	; (800cd88 <HAL_GPIO_DeInit+0x1e0>)
 800cc80:	68da      	ldr	r2, [r3, #12]
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	43db      	mvns	r3, r3
 800cc86:	4940      	ldr	r1, [pc, #256]	; (800cd88 <HAL_GPIO_DeInit+0x1e0>)
 800cc88:	4013      	ands	r3, r2
 800cc8a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800cc8c:	4b3e      	ldr	r3, [pc, #248]	; (800cd88 <HAL_GPIO_DeInit+0x1e0>)
 800cc8e:	689a      	ldr	r2, [r3, #8]
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	43db      	mvns	r3, r3
 800cc94:	493c      	ldr	r1, [pc, #240]	; (800cd88 <HAL_GPIO_DeInit+0x1e0>)
 800cc96:	4013      	ands	r3, r2
 800cc98:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	f003 0303 	and.w	r3, r3, #3
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	220f      	movs	r2, #15
 800cca4:	fa02 f303 	lsl.w	r3, r2, r3
 800cca8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800ccaa:	4a2f      	ldr	r2, [pc, #188]	; (800cd68 <HAL_GPIO_DeInit+0x1c0>)
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	089b      	lsrs	r3, r3, #2
 800ccb0:	3302      	adds	r3, #2
 800ccb2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	43da      	mvns	r2, r3
 800ccba:	482b      	ldr	r0, [pc, #172]	; (800cd68 <HAL_GPIO_DeInit+0x1c0>)
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	089b      	lsrs	r3, r3, #2
 800ccc0:	400a      	ands	r2, r1
 800ccc2:	3302      	adds	r3, #2
 800ccc4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	005b      	lsls	r3, r3, #1
 800ccd0:	2103      	movs	r1, #3
 800ccd2:	fa01 f303 	lsl.w	r3, r1, r3
 800ccd6:	431a      	orrs	r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	08da      	lsrs	r2, r3, #3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	3208      	adds	r2, #8
 800cce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	f003 0307 	and.w	r3, r3, #7
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	220f      	movs	r2, #15
 800ccf2:	fa02 f303 	lsl.w	r3, r2, r3
 800ccf6:	43db      	mvns	r3, r3
 800ccf8:	697a      	ldr	r2, [r7, #20]
 800ccfa:	08d2      	lsrs	r2, r2, #3
 800ccfc:	4019      	ands	r1, r3
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	3208      	adds	r2, #8
 800cd02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	689a      	ldr	r2, [r3, #8]
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	005b      	lsls	r3, r3, #1
 800cd0e:	2103      	movs	r1, #3
 800cd10:	fa01 f303 	lsl.w	r3, r1, r3
 800cd14:	43db      	mvns	r3, r3
 800cd16:	401a      	ands	r2, r3
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685a      	ldr	r2, [r3, #4]
 800cd20:	2101      	movs	r1, #1
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	fa01 f303 	lsl.w	r3, r1, r3
 800cd28:	43db      	mvns	r3, r3
 800cd2a:	401a      	ands	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	68da      	ldr	r2, [r3, #12]
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	005b      	lsls	r3, r3, #1
 800cd38:	2103      	movs	r1, #3
 800cd3a:	fa01 f303 	lsl.w	r3, r1, r3
 800cd3e:	43db      	mvns	r3, r3
 800cd40:	401a      	ands	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800cd4c:	683a      	ldr	r2, [r7, #0]
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	fa22 f303 	lsr.w	r3, r2, r3
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	f47f af2f 	bne.w	800cbb8 <HAL_GPIO_DeInit+0x10>
  }
}
 800cd5a:	bf00      	nop
 800cd5c:	bf00      	nop
 800cd5e:	371c      	adds	r7, #28
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr
 800cd68:	40010000 	.word	0x40010000
 800cd6c:	48000400 	.word	0x48000400
 800cd70:	48000800 	.word	0x48000800
 800cd74:	48000c00 	.word	0x48000c00
 800cd78:	48001000 	.word	0x48001000
 800cd7c:	48001400 	.word	0x48001400
 800cd80:	48001800 	.word	0x48001800
 800cd84:	48001c00 	.word	0x48001c00
 800cd88:	40010400 	.word	0x40010400

0800cd8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b083      	sub	sp, #12
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	460b      	mov	r3, r1
 800cd96:	807b      	strh	r3, [r7, #2]
 800cd98:	4613      	mov	r3, r2
 800cd9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cd9c:	787b      	ldrb	r3, [r7, #1]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d003      	beq.n	800cdaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800cda2:	887a      	ldrh	r2, [r7, #2]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800cda8:	e002      	b.n	800cdb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800cdaa:	887a      	ldrh	r2, [r7, #2]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	629a      	str	r2, [r3, #40]	; 0x28
}
 800cdb0:	bf00      	nop
 800cdb2:	370c      	adds	r7, #12
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800cdc6:	4b08      	ldr	r3, [pc, #32]	; (800cde8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800cdc8:	695a      	ldr	r2, [r3, #20]
 800cdca:	88fb      	ldrh	r3, [r7, #6]
 800cdcc:	4013      	ands	r3, r2
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d006      	beq.n	800cde0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800cdd2:	4a05      	ldr	r2, [pc, #20]	; (800cde8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800cdd4:	88fb      	ldrh	r3, [r7, #6]
 800cdd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cdd8:	88fb      	ldrh	r3, [r7, #6]
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7f5 f8c4 	bl	8001f68 <HAL_GPIO_EXTI_Callback>
  }
}
 800cde0:	bf00      	nop
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	40010400 	.word	0x40010400

0800cdec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d101      	bne.n	800cdfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	e081      	b.n	800cf02 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d106      	bne.n	800ce18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f7f4 fada 	bl	80013cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2224      	movs	r2, #36	; 0x24
 800ce1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	681a      	ldr	r2, [r3, #0]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f022 0201 	bic.w	r2, r2, #1
 800ce2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	685a      	ldr	r2, [r3, #4]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ce3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	689a      	ldr	r2, [r3, #8]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ce4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d107      	bne.n	800ce66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	689a      	ldr	r2, [r3, #8]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ce62:	609a      	str	r2, [r3, #8]
 800ce64:	e006      	b.n	800ce74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	689a      	ldr	r2, [r3, #8]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ce72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	2b02      	cmp	r3, #2
 800ce7a:	d104      	bne.n	800ce86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	6812      	ldr	r2, [r2, #0]
 800ce90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ce94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	68da      	ldr	r2, [r3, #12]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cea8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	691a      	ldr	r2, [r3, #16]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	695b      	ldr	r3, [r3, #20]
 800ceb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	699b      	ldr	r3, [r3, #24]
 800ceba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	430a      	orrs	r2, r1
 800cec2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	69d9      	ldr	r1, [r3, #28]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6a1a      	ldr	r2, [r3, #32]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	430a      	orrs	r2, r1
 800ced2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f042 0201 	orr.w	r2, r2, #1
 800cee2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2220      	movs	r2, #32
 800ceee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2200      	movs	r2, #0
 800cef6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800cf00:	2300      	movs	r3, #0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3708      	adds	r7, #8
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b082      	sub	sp, #8
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d101      	bne.n	800cf1c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	e021      	b.n	800cf60 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2224      	movs	r2, #36	; 0x24
 800cf20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f022 0201 	bic.w	r2, r2, #1
 800cf32:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7f4 fb0f 	bl	8001558 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b088      	sub	sp, #32
 800cf6c:	af02      	add	r7, sp, #8
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	607a      	str	r2, [r7, #4]
 800cf72:	461a      	mov	r2, r3
 800cf74:	460b      	mov	r3, r1
 800cf76:	817b      	strh	r3, [r7, #10]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	2b20      	cmp	r3, #32
 800cf86:	f040 80da 	bne.w	800d13e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d101      	bne.n	800cf98 <HAL_I2C_Master_Transmit+0x30>
 800cf94:	2302      	movs	r3, #2
 800cf96:	e0d3      	b.n	800d140 <HAL_I2C_Master_Transmit+0x1d8>
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cfa0:	f7fe f96e 	bl	800b280 <HAL_GetTick>
 800cfa4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	9300      	str	r3, [sp, #0]
 800cfaa:	2319      	movs	r3, #25
 800cfac:	2201      	movs	r2, #1
 800cfae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cfb2:	68f8      	ldr	r0, [r7, #12]
 800cfb4:	f000 fdd2 	bl	800db5c <I2C_WaitOnFlagUntilTimeout>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d001      	beq.n	800cfc2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e0be      	b.n	800d140 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2221      	movs	r2, #33	; 0x21
 800cfc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2210      	movs	r2, #16
 800cfce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	893a      	ldrh	r2, [r7, #8]
 800cfe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	2bff      	cmp	r3, #255	; 0xff
 800cff2:	d90e      	bls.n	800d012 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	22ff      	movs	r2, #255	; 0xff
 800cff8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cffe:	b2da      	uxtb	r2, r3
 800d000:	8979      	ldrh	r1, [r7, #10]
 800d002:	4b51      	ldr	r3, [pc, #324]	; (800d148 <HAL_I2C_Master_Transmit+0x1e0>)
 800d004:	9300      	str	r3, [sp, #0]
 800d006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	f000 ffc8 	bl	800dfa0 <I2C_TransferConfig>
 800d010:	e06c      	b.n	800d0ec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d016:	b29a      	uxth	r2, r3
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d020:	b2da      	uxtb	r2, r3
 800d022:	8979      	ldrh	r1, [r7, #10]
 800d024:	4b48      	ldr	r3, [pc, #288]	; (800d148 <HAL_I2C_Master_Transmit+0x1e0>)
 800d026:	9300      	str	r3, [sp, #0]
 800d028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	f000 ffb7 	bl	800dfa0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800d032:	e05b      	b.n	800d0ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d034:	697a      	ldr	r2, [r7, #20]
 800d036:	6a39      	ldr	r1, [r7, #32]
 800d038:	68f8      	ldr	r0, [r7, #12]
 800d03a:	f000 fdcf 	bl	800dbdc <I2C_WaitOnTXISFlagUntilTimeout>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d001      	beq.n	800d048 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800d044:	2301      	movs	r3, #1
 800d046:	e07b      	b.n	800d140 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04c:	781a      	ldrb	r2, [r3, #0]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d058:	1c5a      	adds	r2, r3, #1
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d062:	b29b      	uxth	r3, r3
 800d064:	3b01      	subs	r3, #1
 800d066:	b29a      	uxth	r2, r3
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d070:	3b01      	subs	r3, #1
 800d072:	b29a      	uxth	r2, r3
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d034      	beq.n	800d0ec <HAL_I2C_Master_Transmit+0x184>
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d086:	2b00      	cmp	r3, #0
 800d088:	d130      	bne.n	800d0ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	6a3b      	ldr	r3, [r7, #32]
 800d090:	2200      	movs	r2, #0
 800d092:	2180      	movs	r1, #128	; 0x80
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f000 fd61 	bl	800db5c <I2C_WaitOnFlagUntilTimeout>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d001      	beq.n	800d0a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e04d      	b.n	800d140 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	2bff      	cmp	r3, #255	; 0xff
 800d0ac:	d90e      	bls.n	800d0cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	22ff      	movs	r2, #255	; 0xff
 800d0b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0b8:	b2da      	uxtb	r2, r3
 800d0ba:	8979      	ldrh	r1, [r7, #10]
 800d0bc:	2300      	movs	r3, #0
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f000 ff6b 	bl	800dfa0 <I2C_TransferConfig>
 800d0ca:	e00f      	b.n	800d0ec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0d0:	b29a      	uxth	r2, r3
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0da:	b2da      	uxtb	r2, r3
 800d0dc:	8979      	ldrh	r1, [r7, #10]
 800d0de:	2300      	movs	r3, #0
 800d0e0:	9300      	str	r3, [sp, #0]
 800d0e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f000 ff5a 	bl	800dfa0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d19e      	bne.n	800d034 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0f6:	697a      	ldr	r2, [r7, #20]
 800d0f8:	6a39      	ldr	r1, [r7, #32]
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f000 fdae 	bl	800dc5c <I2C_WaitOnSTOPFlagUntilTimeout>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800d106:	2301      	movs	r3, #1
 800d108:	e01a      	b.n	800d140 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2220      	movs	r2, #32
 800d110:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	6859      	ldr	r1, [r3, #4]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	4b0b      	ldr	r3, [pc, #44]	; (800d14c <HAL_I2C_Master_Transmit+0x1e4>)
 800d11e:	400b      	ands	r3, r1
 800d120:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2220      	movs	r2, #32
 800d126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2200      	movs	r2, #0
 800d12e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2200      	movs	r2, #0
 800d136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d13a:	2300      	movs	r3, #0
 800d13c:	e000      	b.n	800d140 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800d13e:	2302      	movs	r3, #2
  }
}
 800d140:	4618      	mov	r0, r3
 800d142:	3718      	adds	r7, #24
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	80002000 	.word	0x80002000
 800d14c:	fe00e800 	.word	0xfe00e800

0800d150 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b088      	sub	sp, #32
 800d154:	af02      	add	r7, sp, #8
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	607a      	str	r2, [r7, #4]
 800d15a:	461a      	mov	r2, r3
 800d15c:	460b      	mov	r3, r1
 800d15e:	817b      	strh	r3, [r7, #10]
 800d160:	4613      	mov	r3, r2
 800d162:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	2b20      	cmp	r3, #32
 800d16e:	f040 80db 	bne.w	800d328 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d101      	bne.n	800d180 <HAL_I2C_Master_Receive+0x30>
 800d17c:	2302      	movs	r3, #2
 800d17e:	e0d4      	b.n	800d32a <HAL_I2C_Master_Receive+0x1da>
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d188:	f7fe f87a 	bl	800b280 <HAL_GetTick>
 800d18c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	9300      	str	r3, [sp, #0]
 800d192:	2319      	movs	r3, #25
 800d194:	2201      	movs	r2, #1
 800d196:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f000 fcde 	bl	800db5c <I2C_WaitOnFlagUntilTimeout>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e0bf      	b.n	800d32a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2222      	movs	r2, #34	; 0x22
 800d1ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2210      	movs	r2, #16
 800d1b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	893a      	ldrh	r2, [r7, #8]
 800d1ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	2bff      	cmp	r3, #255	; 0xff
 800d1da:	d90e      	bls.n	800d1fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	22ff      	movs	r2, #255	; 0xff
 800d1e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	8979      	ldrh	r1, [r7, #10]
 800d1ea:	4b52      	ldr	r3, [pc, #328]	; (800d334 <HAL_I2C_Master_Receive+0x1e4>)
 800d1ec:	9300      	str	r3, [sp, #0]
 800d1ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f000 fed4 	bl	800dfa0 <I2C_TransferConfig>
 800d1f8:	e06d      	b.n	800d2d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	8979      	ldrh	r1, [r7, #10]
 800d20c:	4b49      	ldr	r3, [pc, #292]	; (800d334 <HAL_I2C_Master_Receive+0x1e4>)
 800d20e:	9300      	str	r3, [sp, #0]
 800d210:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f000 fec3 	bl	800dfa0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800d21a:	e05c      	b.n	800d2d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d21c:	697a      	ldr	r2, [r7, #20]
 800d21e:	6a39      	ldr	r1, [r7, #32]
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f000 fd57 	bl	800dcd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d001      	beq.n	800d230 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800d22c:	2301      	movs	r3, #1
 800d22e:	e07c      	b.n	800d32a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23a:	b2d2      	uxtb	r2, r2
 800d23c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d242:	1c5a      	adds	r2, r3, #1
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d24c:	3b01      	subs	r3, #1
 800d24e:	b29a      	uxth	r2, r3
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d258:	b29b      	uxth	r3, r3
 800d25a:	3b01      	subs	r3, #1
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d266:	b29b      	uxth	r3, r3
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d034      	beq.n	800d2d6 <HAL_I2C_Master_Receive+0x186>
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d270:	2b00      	cmp	r3, #0
 800d272:	d130      	bne.n	800d2d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	9300      	str	r3, [sp, #0]
 800d278:	6a3b      	ldr	r3, [r7, #32]
 800d27a:	2200      	movs	r2, #0
 800d27c:	2180      	movs	r1, #128	; 0x80
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f000 fc6c 	bl	800db5c <I2C_WaitOnFlagUntilTimeout>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d001      	beq.n	800d28e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	e04d      	b.n	800d32a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d292:	b29b      	uxth	r3, r3
 800d294:	2bff      	cmp	r3, #255	; 0xff
 800d296:	d90e      	bls.n	800d2b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	22ff      	movs	r2, #255	; 0xff
 800d29c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2a2:	b2da      	uxtb	r2, r3
 800d2a4:	8979      	ldrh	r1, [r7, #10]
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	9300      	str	r3, [sp, #0]
 800d2aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f000 fe76 	bl	800dfa0 <I2C_TransferConfig>
 800d2b4:	e00f      	b.n	800d2d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2ba:	b29a      	uxth	r2, r3
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2c4:	b2da      	uxtb	r2, r3
 800d2c6:	8979      	ldrh	r1, [r7, #10]
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d2d0:	68f8      	ldr	r0, [r7, #12]
 800d2d2:	f000 fe65 	bl	800dfa0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d19d      	bne.n	800d21c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2e0:	697a      	ldr	r2, [r7, #20]
 800d2e2:	6a39      	ldr	r1, [r7, #32]
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f000 fcb9 	bl	800dc5c <I2C_WaitOnSTOPFlagUntilTimeout>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d001      	beq.n	800d2f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e01a      	b.n	800d32a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2220      	movs	r2, #32
 800d2fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	6859      	ldr	r1, [r3, #4]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	4b0c      	ldr	r3, [pc, #48]	; (800d338 <HAL_I2C_Master_Receive+0x1e8>)
 800d308:	400b      	ands	r3, r1
 800d30a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2220      	movs	r2, #32
 800d310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2200      	movs	r2, #0
 800d318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2200      	movs	r2, #0
 800d320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d324:	2300      	movs	r3, #0
 800d326:	e000      	b.n	800d32a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800d328:	2302      	movs	r3, #2
  }
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3718      	adds	r7, #24
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	80002400 	.word	0x80002400
 800d338:	fe00e800 	.word	0xfe00e800

0800d33c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b088      	sub	sp, #32
 800d340:	af02      	add	r7, sp, #8
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	4608      	mov	r0, r1
 800d346:	4611      	mov	r1, r2
 800d348:	461a      	mov	r2, r3
 800d34a:	4603      	mov	r3, r0
 800d34c:	817b      	strh	r3, [r7, #10]
 800d34e:	460b      	mov	r3, r1
 800d350:	813b      	strh	r3, [r7, #8]
 800d352:	4613      	mov	r3, r2
 800d354:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	2b20      	cmp	r3, #32
 800d360:	f040 80f9 	bne.w	800d556 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d364:	6a3b      	ldr	r3, [r7, #32]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d002      	beq.n	800d370 <HAL_I2C_Mem_Write+0x34>
 800d36a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d105      	bne.n	800d37c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d376:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800d378:	2301      	movs	r3, #1
 800d37a:	e0ed      	b.n	800d558 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d382:	2b01      	cmp	r3, #1
 800d384:	d101      	bne.n	800d38a <HAL_I2C_Mem_Write+0x4e>
 800d386:	2302      	movs	r3, #2
 800d388:	e0e6      	b.n	800d558 <HAL_I2C_Mem_Write+0x21c>
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2201      	movs	r2, #1
 800d38e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d392:	f7fd ff75 	bl	800b280 <HAL_GetTick>
 800d396:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	9300      	str	r3, [sp, #0]
 800d39c:	2319      	movs	r3, #25
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	f000 fbd9 	bl	800db5c <I2C_WaitOnFlagUntilTimeout>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d001      	beq.n	800d3b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e0d1      	b.n	800d558 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2221      	movs	r2, #33	; 0x21
 800d3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2240      	movs	r2, #64	; 0x40
 800d3c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6a3a      	ldr	r2, [r7, #32]
 800d3ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d3d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d3dc:	88f8      	ldrh	r0, [r7, #6]
 800d3de:	893a      	ldrh	r2, [r7, #8]
 800d3e0:	8979      	ldrh	r1, [r7, #10]
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	9301      	str	r3, [sp, #4]
 800d3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e8:	9300      	str	r3, [sp, #0]
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	68f8      	ldr	r0, [r7, #12]
 800d3ee:	f000 fae9 	bl	800d9c4 <I2C_RequestMemoryWrite>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d005      	beq.n	800d404 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800d400:	2301      	movs	r3, #1
 800d402:	e0a9      	b.n	800d558 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d408:	b29b      	uxth	r3, r3
 800d40a:	2bff      	cmp	r3, #255	; 0xff
 800d40c:	d90e      	bls.n	800d42c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	22ff      	movs	r2, #255	; 0xff
 800d412:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d418:	b2da      	uxtb	r2, r3
 800d41a:	8979      	ldrh	r1, [r7, #10]
 800d41c:	2300      	movs	r3, #0
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f000 fdbb 	bl	800dfa0 <I2C_TransferConfig>
 800d42a:	e00f      	b.n	800d44c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d430:	b29a      	uxth	r2, r3
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d43a:	b2da      	uxtb	r2, r3
 800d43c:	8979      	ldrh	r1, [r7, #10]
 800d43e:	2300      	movs	r3, #0
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	f000 fdaa 	bl	800dfa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d44c:	697a      	ldr	r2, [r7, #20]
 800d44e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f000 fbc3 	bl	800dbdc <I2C_WaitOnTXISFlagUntilTimeout>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d001      	beq.n	800d460 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800d45c:	2301      	movs	r3, #1
 800d45e:	e07b      	b.n	800d558 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d464:	781a      	ldrb	r2, [r3, #0]
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d470:	1c5a      	adds	r2, r3, #1
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	3b01      	subs	r3, #1
 800d47e:	b29a      	uxth	r2, r3
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d488:	3b01      	subs	r3, #1
 800d48a:	b29a      	uxth	r2, r3
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d494:	b29b      	uxth	r3, r3
 800d496:	2b00      	cmp	r3, #0
 800d498:	d034      	beq.n	800d504 <HAL_I2C_Mem_Write+0x1c8>
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d130      	bne.n	800d504 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	9300      	str	r3, [sp, #0]
 800d4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	2180      	movs	r1, #128	; 0x80
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f000 fb55 	bl	800db5c <I2C_WaitOnFlagUntilTimeout>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d001      	beq.n	800d4bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e04d      	b.n	800d558 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	2bff      	cmp	r3, #255	; 0xff
 800d4c4:	d90e      	bls.n	800d4e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	22ff      	movs	r2, #255	; 0xff
 800d4ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4d0:	b2da      	uxtb	r2, r3
 800d4d2:	8979      	ldrh	r1, [r7, #10]
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	9300      	str	r3, [sp, #0]
 800d4d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f000 fd5f 	bl	800dfa0 <I2C_TransferConfig>
 800d4e2:	e00f      	b.n	800d504 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4f2:	b2da      	uxtb	r2, r3
 800d4f4:	8979      	ldrh	r1, [r7, #10]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	9300      	str	r3, [sp, #0]
 800d4fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d4fe:	68f8      	ldr	r0, [r7, #12]
 800d500:	f000 fd4e 	bl	800dfa0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d508:	b29b      	uxth	r3, r3
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d19e      	bne.n	800d44c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d50e:	697a      	ldr	r2, [r7, #20]
 800d510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f000 fba2 	bl	800dc5c <I2C_WaitOnSTOPFlagUntilTimeout>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d001      	beq.n	800d522 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800d51e:	2301      	movs	r3, #1
 800d520:	e01a      	b.n	800d558 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2220      	movs	r2, #32
 800d528:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	6859      	ldr	r1, [r3, #4]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	4b0a      	ldr	r3, [pc, #40]	; (800d560 <HAL_I2C_Mem_Write+0x224>)
 800d536:	400b      	ands	r3, r1
 800d538:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2220      	movs	r2, #32
 800d53e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2200      	movs	r2, #0
 800d546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2200      	movs	r2, #0
 800d54e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d552:	2300      	movs	r3, #0
 800d554:	e000      	b.n	800d558 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800d556:	2302      	movs	r3, #2
  }
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3718      	adds	r7, #24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	fe00e800 	.word	0xfe00e800

0800d564 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b088      	sub	sp, #32
 800d568:	af02      	add	r7, sp, #8
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	4608      	mov	r0, r1
 800d56e:	4611      	mov	r1, r2
 800d570:	461a      	mov	r2, r3
 800d572:	4603      	mov	r3, r0
 800d574:	817b      	strh	r3, [r7, #10]
 800d576:	460b      	mov	r3, r1
 800d578:	813b      	strh	r3, [r7, #8]
 800d57a:	4613      	mov	r3, r2
 800d57c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d584:	b2db      	uxtb	r3, r3
 800d586:	2b20      	cmp	r3, #32
 800d588:	f040 80fd 	bne.w	800d786 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800d58c:	6a3b      	ldr	r3, [r7, #32]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d002      	beq.n	800d598 <HAL_I2C_Mem_Read+0x34>
 800d592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d594:	2b00      	cmp	r3, #0
 800d596:	d105      	bne.n	800d5a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d59e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	e0f1      	b.n	800d788 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d101      	bne.n	800d5b2 <HAL_I2C_Mem_Read+0x4e>
 800d5ae:	2302      	movs	r3, #2
 800d5b0:	e0ea      	b.n	800d788 <HAL_I2C_Mem_Read+0x224>
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d5ba:	f7fd fe61 	bl	800b280 <HAL_GetTick>
 800d5be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	9300      	str	r3, [sp, #0]
 800d5c4:	2319      	movs	r3, #25
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d5cc:	68f8      	ldr	r0, [r7, #12]
 800d5ce:	f000 fac5 	bl	800db5c <I2C_WaitOnFlagUntilTimeout>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d001      	beq.n	800d5dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	e0d5      	b.n	800d788 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2222      	movs	r2, #34	; 0x22
 800d5e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2240      	movs	r2, #64	; 0x40
 800d5e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	6a3a      	ldr	r2, [r7, #32]
 800d5f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d5fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2200      	movs	r2, #0
 800d602:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d604:	88f8      	ldrh	r0, [r7, #6]
 800d606:	893a      	ldrh	r2, [r7, #8]
 800d608:	8979      	ldrh	r1, [r7, #10]
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	9301      	str	r3, [sp, #4]
 800d60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d610:	9300      	str	r3, [sp, #0]
 800d612:	4603      	mov	r3, r0
 800d614:	68f8      	ldr	r0, [r7, #12]
 800d616:	f000 fa29 	bl	800da6c <I2C_RequestMemoryRead>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d005      	beq.n	800d62c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2200      	movs	r2, #0
 800d624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800d628:	2301      	movs	r3, #1
 800d62a:	e0ad      	b.n	800d788 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d630:	b29b      	uxth	r3, r3
 800d632:	2bff      	cmp	r3, #255	; 0xff
 800d634:	d90e      	bls.n	800d654 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	22ff      	movs	r2, #255	; 0xff
 800d63a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d640:	b2da      	uxtb	r2, r3
 800d642:	8979      	ldrh	r1, [r7, #10]
 800d644:	4b52      	ldr	r3, [pc, #328]	; (800d790 <HAL_I2C_Mem_Read+0x22c>)
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f000 fca7 	bl	800dfa0 <I2C_TransferConfig>
 800d652:	e00f      	b.n	800d674 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d658:	b29a      	uxth	r2, r3
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d662:	b2da      	uxtb	r2, r3
 800d664:	8979      	ldrh	r1, [r7, #10]
 800d666:	4b4a      	ldr	r3, [pc, #296]	; (800d790 <HAL_I2C_Mem_Read+0x22c>)
 800d668:	9300      	str	r3, [sp, #0]
 800d66a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d66e:	68f8      	ldr	r0, [r7, #12]
 800d670:	f000 fc96 	bl	800dfa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67a:	2200      	movs	r2, #0
 800d67c:	2104      	movs	r1, #4
 800d67e:	68f8      	ldr	r0, [r7, #12]
 800d680:	f000 fa6c 	bl	800db5c <I2C_WaitOnFlagUntilTimeout>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d001      	beq.n	800d68e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800d68a:	2301      	movs	r3, #1
 800d68c:	e07c      	b.n	800d788 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d698:	b2d2      	uxtb	r2, r2
 800d69a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a0:	1c5a      	adds	r2, r3, #1
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6aa:	3b01      	subs	r3, #1
 800d6ac:	b29a      	uxth	r2, r3
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d034      	beq.n	800d734 <HAL_I2C_Mem_Read+0x1d0>
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d130      	bne.n	800d734 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	9300      	str	r3, [sp, #0]
 800d6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d8:	2200      	movs	r2, #0
 800d6da:	2180      	movs	r1, #128	; 0x80
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	f000 fa3d 	bl	800db5c <I2C_WaitOnFlagUntilTimeout>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d001      	beq.n	800d6ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	e04d      	b.n	800d788 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	2bff      	cmp	r3, #255	; 0xff
 800d6f4:	d90e      	bls.n	800d714 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	22ff      	movs	r2, #255	; 0xff
 800d6fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d700:	b2da      	uxtb	r2, r3
 800d702:	8979      	ldrh	r1, [r7, #10]
 800d704:	2300      	movs	r3, #0
 800d706:	9300      	str	r3, [sp, #0]
 800d708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f000 fc47 	bl	800dfa0 <I2C_TransferConfig>
 800d712:	e00f      	b.n	800d734 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d718:	b29a      	uxth	r2, r3
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d722:	b2da      	uxtb	r2, r3
 800d724:	8979      	ldrh	r1, [r7, #10]
 800d726:	2300      	movs	r3, #0
 800d728:	9300      	str	r3, [sp, #0]
 800d72a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f000 fc36 	bl	800dfa0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d738:	b29b      	uxth	r3, r3
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d19a      	bne.n	800d674 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d73e:	697a      	ldr	r2, [r7, #20]
 800d740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f000 fa8a 	bl	800dc5c <I2C_WaitOnSTOPFlagUntilTimeout>
 800d748:	4603      	mov	r3, r0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d001      	beq.n	800d752 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800d74e:	2301      	movs	r3, #1
 800d750:	e01a      	b.n	800d788 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	2220      	movs	r2, #32
 800d758:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	6859      	ldr	r1, [r3, #4]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	4b0b      	ldr	r3, [pc, #44]	; (800d794 <HAL_I2C_Mem_Read+0x230>)
 800d766:	400b      	ands	r3, r1
 800d768:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2220      	movs	r2, #32
 800d76e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2200      	movs	r2, #0
 800d776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2200      	movs	r2, #0
 800d77e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d782:	2300      	movs	r3, #0
 800d784:	e000      	b.n	800d788 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800d786:	2302      	movs	r3, #2
  }
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3718      	adds	r7, #24
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	80002400 	.word	0x80002400
 800d794:	fe00e800 	.word	0xfe00e800

0800d798 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b08a      	sub	sp, #40	; 0x28
 800d79c:	af02      	add	r7, sp, #8
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	607a      	str	r2, [r7, #4]
 800d7a2:	603b      	str	r3, [r7, #0]
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	2b20      	cmp	r3, #32
 800d7b6:	f040 80f1 	bne.w	800d99c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	699b      	ldr	r3, [r3, #24]
 800d7c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d7c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7c8:	d101      	bne.n	800d7ce <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800d7ca:	2302      	movs	r3, #2
 800d7cc:	e0e7      	b.n	800d99e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d101      	bne.n	800d7dc <HAL_I2C_IsDeviceReady+0x44>
 800d7d8:	2302      	movs	r3, #2
 800d7da:	e0e0      	b.n	800d99e <HAL_I2C_IsDeviceReady+0x206>
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	2224      	movs	r2, #36	; 0x24
 800d7e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	68db      	ldr	r3, [r3, #12]
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d107      	bne.n	800d80a <HAL_I2C_IsDeviceReady+0x72>
 800d7fa:	897b      	ldrh	r3, [r7, #10]
 800d7fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d800:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d808:	e004      	b.n	800d814 <HAL_I2C_IsDeviceReady+0x7c>
 800d80a:	897b      	ldrh	r3, [r7, #10]
 800d80c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d810:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800d814:	68fa      	ldr	r2, [r7, #12]
 800d816:	6812      	ldr	r2, [r2, #0]
 800d818:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800d81a:	f7fd fd31 	bl	800b280 <HAL_GetTick>
 800d81e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	699b      	ldr	r3, [r3, #24]
 800d826:	f003 0320 	and.w	r3, r3, #32
 800d82a:	2b20      	cmp	r3, #32
 800d82c:	bf0c      	ite	eq
 800d82e:	2301      	moveq	r3, #1
 800d830:	2300      	movne	r3, #0
 800d832:	b2db      	uxtb	r3, r3
 800d834:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	699b      	ldr	r3, [r3, #24]
 800d83c:	f003 0310 	and.w	r3, r3, #16
 800d840:	2b10      	cmp	r3, #16
 800d842:	bf0c      	ite	eq
 800d844:	2301      	moveq	r3, #1
 800d846:	2300      	movne	r3, #0
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800d84c:	e034      	b.n	800d8b8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d854:	d01a      	beq.n	800d88c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d856:	f7fd fd13 	bl	800b280 <HAL_GetTick>
 800d85a:	4602      	mov	r2, r0
 800d85c:	69bb      	ldr	r3, [r7, #24]
 800d85e:	1ad3      	subs	r3, r2, r3
 800d860:	683a      	ldr	r2, [r7, #0]
 800d862:	429a      	cmp	r2, r3
 800d864:	d302      	bcc.n	800d86c <HAL_I2C_IsDeviceReady+0xd4>
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d10f      	bne.n	800d88c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2220      	movs	r2, #32
 800d870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d878:	f043 0220 	orr.w	r2, r3, #32
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2200      	movs	r2, #0
 800d884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800d888:	2301      	movs	r3, #1
 800d88a:	e088      	b.n	800d99e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	699b      	ldr	r3, [r3, #24]
 800d892:	f003 0320 	and.w	r3, r3, #32
 800d896:	2b20      	cmp	r3, #32
 800d898:	bf0c      	ite	eq
 800d89a:	2301      	moveq	r3, #1
 800d89c:	2300      	movne	r3, #0
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	699b      	ldr	r3, [r3, #24]
 800d8a8:	f003 0310 	and.w	r3, r3, #16
 800d8ac:	2b10      	cmp	r3, #16
 800d8ae:	bf0c      	ite	eq
 800d8b0:	2301      	moveq	r3, #1
 800d8b2:	2300      	movne	r3, #0
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800d8b8:	7ffb      	ldrb	r3, [r7, #31]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d102      	bne.n	800d8c4 <HAL_I2C_IsDeviceReady+0x12c>
 800d8be:	7fbb      	ldrb	r3, [r7, #30]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d0c4      	beq.n	800d84e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	699b      	ldr	r3, [r3, #24]
 800d8ca:	f003 0310 	and.w	r3, r3, #16
 800d8ce:	2b10      	cmp	r3, #16
 800d8d0:	d01a      	beq.n	800d908 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	9300      	str	r3, [sp, #0]
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	2120      	movs	r1, #32
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	f000 f93d 	bl	800db5c <I2C_WaitOnFlagUntilTimeout>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d001      	beq.n	800d8ec <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	e058      	b.n	800d99e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2220      	movs	r2, #32
 800d8f2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	2220      	movs	r2, #32
 800d8f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2200      	movs	r2, #0
 800d900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800d904:	2300      	movs	r3, #0
 800d906:	e04a      	b.n	800d99e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	9300      	str	r3, [sp, #0]
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	2200      	movs	r2, #0
 800d910:	2120      	movs	r1, #32
 800d912:	68f8      	ldr	r0, [r7, #12]
 800d914:	f000 f922 	bl	800db5c <I2C_WaitOnFlagUntilTimeout>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d001      	beq.n	800d922 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	e03d      	b.n	800d99e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2210      	movs	r2, #16
 800d928:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	2220      	movs	r2, #32
 800d930:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	429a      	cmp	r2, r3
 800d938:	d118      	bne.n	800d96c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	685a      	ldr	r2, [r3, #4]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d948:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	9300      	str	r3, [sp, #0]
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	2200      	movs	r2, #0
 800d952:	2120      	movs	r1, #32
 800d954:	68f8      	ldr	r0, [r7, #12]
 800d956:	f000 f901 	bl	800db5c <I2C_WaitOnFlagUntilTimeout>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d001      	beq.n	800d964 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800d960:	2301      	movs	r3, #1
 800d962:	e01c      	b.n	800d99e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2220      	movs	r2, #32
 800d96a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	3301      	adds	r3, #1
 800d970:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	429a      	cmp	r2, r3
 800d978:	f63f af3b 	bhi.w	800d7f2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2220      	movs	r2, #32
 800d980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d988:	f043 0220 	orr.w	r2, r3, #32
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2200      	movs	r2, #0
 800d994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800d998:	2301      	movs	r3, #1
 800d99a:	e000      	b.n	800d99e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800d99c:	2302      	movs	r3, #2
  }
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3720      	adds	r7, #32
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}

0800d9a6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800d9a6:	b480      	push	{r7}
 800d9a8:	b083      	sub	sp, #12
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d9b4:	b2db      	uxtb	r3, r3
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
	...

0800d9c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af02      	add	r7, sp, #8
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	4608      	mov	r0, r1
 800d9ce:	4611      	mov	r1, r2
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	817b      	strh	r3, [r7, #10]
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	813b      	strh	r3, [r7, #8]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d9de:	88fb      	ldrh	r3, [r7, #6]
 800d9e0:	b2da      	uxtb	r2, r3
 800d9e2:	8979      	ldrh	r1, [r7, #10]
 800d9e4:	4b20      	ldr	r3, [pc, #128]	; (800da68 <I2C_RequestMemoryWrite+0xa4>)
 800d9e6:	9300      	str	r3, [sp, #0]
 800d9e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d9ec:	68f8      	ldr	r0, [r7, #12]
 800d9ee:	f000 fad7 	bl	800dfa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d9f2:	69fa      	ldr	r2, [r7, #28]
 800d9f4:	69b9      	ldr	r1, [r7, #24]
 800d9f6:	68f8      	ldr	r0, [r7, #12]
 800d9f8:	f000 f8f0 	bl	800dbdc <I2C_WaitOnTXISFlagUntilTimeout>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d001      	beq.n	800da06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800da02:	2301      	movs	r3, #1
 800da04:	e02c      	b.n	800da60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800da06:	88fb      	ldrh	r3, [r7, #6]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d105      	bne.n	800da18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800da0c:	893b      	ldrh	r3, [r7, #8]
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	629a      	str	r2, [r3, #40]	; 0x28
 800da16:	e015      	b.n	800da44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800da18:	893b      	ldrh	r3, [r7, #8]
 800da1a:	0a1b      	lsrs	r3, r3, #8
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800da26:	69fa      	ldr	r2, [r7, #28]
 800da28:	69b9      	ldr	r1, [r7, #24]
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f000 f8d6 	bl	800dbdc <I2C_WaitOnTXISFlagUntilTimeout>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d001      	beq.n	800da3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800da36:	2301      	movs	r3, #1
 800da38:	e012      	b.n	800da60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800da3a:	893b      	ldrh	r3, [r7, #8]
 800da3c:	b2da      	uxtb	r2, r3
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	2200      	movs	r2, #0
 800da4c:	2180      	movs	r1, #128	; 0x80
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	f000 f884 	bl	800db5c <I2C_WaitOnFlagUntilTimeout>
 800da54:	4603      	mov	r3, r0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d001      	beq.n	800da5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800da5a:	2301      	movs	r3, #1
 800da5c:	e000      	b.n	800da60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800da5e:	2300      	movs	r3, #0
}
 800da60:	4618      	mov	r0, r3
 800da62:	3710      	adds	r7, #16
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	80002000 	.word	0x80002000

0800da6c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b086      	sub	sp, #24
 800da70:	af02      	add	r7, sp, #8
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	4608      	mov	r0, r1
 800da76:	4611      	mov	r1, r2
 800da78:	461a      	mov	r2, r3
 800da7a:	4603      	mov	r3, r0
 800da7c:	817b      	strh	r3, [r7, #10]
 800da7e:	460b      	mov	r3, r1
 800da80:	813b      	strh	r3, [r7, #8]
 800da82:	4613      	mov	r3, r2
 800da84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800da86:	88fb      	ldrh	r3, [r7, #6]
 800da88:	b2da      	uxtb	r2, r3
 800da8a:	8979      	ldrh	r1, [r7, #10]
 800da8c:	4b20      	ldr	r3, [pc, #128]	; (800db10 <I2C_RequestMemoryRead+0xa4>)
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	2300      	movs	r3, #0
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	f000 fa84 	bl	800dfa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800da98:	69fa      	ldr	r2, [r7, #28]
 800da9a:	69b9      	ldr	r1, [r7, #24]
 800da9c:	68f8      	ldr	r0, [r7, #12]
 800da9e:	f000 f89d 	bl	800dbdc <I2C_WaitOnTXISFlagUntilTimeout>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800daa8:	2301      	movs	r3, #1
 800daaa:	e02c      	b.n	800db06 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800daac:	88fb      	ldrh	r3, [r7, #6]
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d105      	bne.n	800dabe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800dab2:	893b      	ldrh	r3, [r7, #8]
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	629a      	str	r2, [r3, #40]	; 0x28
 800dabc:	e015      	b.n	800daea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800dabe:	893b      	ldrh	r3, [r7, #8]
 800dac0:	0a1b      	lsrs	r3, r3, #8
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	b2da      	uxtb	r2, r3
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dacc:	69fa      	ldr	r2, [r7, #28]
 800dace:	69b9      	ldr	r1, [r7, #24]
 800dad0:	68f8      	ldr	r0, [r7, #12]
 800dad2:	f000 f883 	bl	800dbdc <I2C_WaitOnTXISFlagUntilTimeout>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800dadc:	2301      	movs	r3, #1
 800dade:	e012      	b.n	800db06 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800dae0:	893b      	ldrh	r3, [r7, #8]
 800dae2:	b2da      	uxtb	r2, r3
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	9300      	str	r3, [sp, #0]
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	2200      	movs	r2, #0
 800daf2:	2140      	movs	r1, #64	; 0x40
 800daf4:	68f8      	ldr	r0, [r7, #12]
 800daf6:	f000 f831 	bl	800db5c <I2C_WaitOnFlagUntilTimeout>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d001      	beq.n	800db04 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800db00:	2301      	movs	r3, #1
 800db02:	e000      	b.n	800db06 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800db04:	2300      	movs	r3, #0
}
 800db06:	4618      	mov	r0, r3
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	80002000 	.word	0x80002000

0800db14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800db14:	b480      	push	{r7}
 800db16:	b083      	sub	sp, #12
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	699b      	ldr	r3, [r3, #24]
 800db22:	f003 0302 	and.w	r3, r3, #2
 800db26:	2b02      	cmp	r3, #2
 800db28:	d103      	bne.n	800db32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2200      	movs	r2, #0
 800db30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	699b      	ldr	r3, [r3, #24]
 800db38:	f003 0301 	and.w	r3, r3, #1
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d007      	beq.n	800db50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	699a      	ldr	r2, [r3, #24]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f042 0201 	orr.w	r2, r2, #1
 800db4e:	619a      	str	r2, [r3, #24]
  }
}
 800db50:	bf00      	nop
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr

0800db5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	60b9      	str	r1, [r7, #8]
 800db66:	603b      	str	r3, [r7, #0]
 800db68:	4613      	mov	r3, r2
 800db6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800db6c:	e022      	b.n	800dbb4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db74:	d01e      	beq.n	800dbb4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db76:	f7fd fb83 	bl	800b280 <HAL_GetTick>
 800db7a:	4602      	mov	r2, r0
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	1ad3      	subs	r3, r2, r3
 800db80:	683a      	ldr	r2, [r7, #0]
 800db82:	429a      	cmp	r2, r3
 800db84:	d302      	bcc.n	800db8c <I2C_WaitOnFlagUntilTimeout+0x30>
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d113      	bne.n	800dbb4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db90:	f043 0220 	orr.w	r2, r3, #32
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2220      	movs	r2, #32
 800db9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2200      	movs	r2, #0
 800dba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e00f      	b.n	800dbd4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	699a      	ldr	r2, [r3, #24]
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	4013      	ands	r3, r2
 800dbbe:	68ba      	ldr	r2, [r7, #8]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	bf0c      	ite	eq
 800dbc4:	2301      	moveq	r3, #1
 800dbc6:	2300      	movne	r3, #0
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	461a      	mov	r2, r3
 800dbcc:	79fb      	ldrb	r3, [r7, #7]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d0cd      	beq.n	800db6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dbd2:	2300      	movs	r3, #0
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3710      	adds	r7, #16
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800dbe8:	e02c      	b.n	800dc44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	68b9      	ldr	r1, [r7, #8]
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f000 f8ea 	bl	800ddc8 <I2C_IsErrorOccurred>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d001      	beq.n	800dbfe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e02a      	b.n	800dc54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc04:	d01e      	beq.n	800dc44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc06:	f7fd fb3b 	bl	800b280 <HAL_GetTick>
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	1ad3      	subs	r3, r2, r3
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d302      	bcc.n	800dc1c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d113      	bne.n	800dc44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc20:	f043 0220 	orr.w	r2, r3, #32
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2220      	movs	r2, #32
 800dc2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2200      	movs	r2, #0
 800dc34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800dc40:	2301      	movs	r3, #1
 800dc42:	e007      	b.n	800dc54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	699b      	ldr	r3, [r3, #24]
 800dc4a:	f003 0302 	and.w	r3, r3, #2
 800dc4e:	2b02      	cmp	r3, #2
 800dc50:	d1cb      	bne.n	800dbea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dc52:	2300      	movs	r3, #0
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3710      	adds	r7, #16
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dc68:	e028      	b.n	800dcbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	68b9      	ldr	r1, [r7, #8]
 800dc6e:	68f8      	ldr	r0, [r7, #12]
 800dc70:	f000 f8aa 	bl	800ddc8 <I2C_IsErrorOccurred>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d001      	beq.n	800dc7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	e026      	b.n	800dccc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc7e:	f7fd faff 	bl	800b280 <HAL_GetTick>
 800dc82:	4602      	mov	r2, r0
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	1ad3      	subs	r3, r2, r3
 800dc88:	68ba      	ldr	r2, [r7, #8]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d302      	bcc.n	800dc94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d113      	bne.n	800dcbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc98:	f043 0220 	orr.w	r2, r3, #32
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2220      	movs	r2, #32
 800dca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e007      	b.n	800dccc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	699b      	ldr	r3, [r3, #24]
 800dcc2:	f003 0320 	and.w	r3, r3, #32
 800dcc6:	2b20      	cmp	r3, #32
 800dcc8:	d1cf      	bne.n	800dc6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800dcca:	2300      	movs	r3, #0
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3710      	adds	r7, #16
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dce0:	e064      	b.n	800ddac <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	68b9      	ldr	r1, [r7, #8]
 800dce6:	68f8      	ldr	r0, [r7, #12]
 800dce8:	f000 f86e 	bl	800ddc8 <I2C_IsErrorOccurred>
 800dcec:	4603      	mov	r3, r0
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d001      	beq.n	800dcf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	e062      	b.n	800ddbc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	699b      	ldr	r3, [r3, #24]
 800dcfc:	f003 0320 	and.w	r3, r3, #32
 800dd00:	2b20      	cmp	r3, #32
 800dd02:	d138      	bne.n	800dd76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	699b      	ldr	r3, [r3, #24]
 800dd0a:	f003 0304 	and.w	r3, r3, #4
 800dd0e:	2b04      	cmp	r3, #4
 800dd10:	d105      	bne.n	800dd1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d001      	beq.n	800dd1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	e04e      	b.n	800ddbc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	699b      	ldr	r3, [r3, #24]
 800dd24:	f003 0310 	and.w	r3, r3, #16
 800dd28:	2b10      	cmp	r3, #16
 800dd2a:	d107      	bne.n	800dd3c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	2210      	movs	r2, #16
 800dd32:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2204      	movs	r2, #4
 800dd38:	645a      	str	r2, [r3, #68]	; 0x44
 800dd3a:	e002      	b.n	800dd42 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	2220      	movs	r2, #32
 800dd48:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	6859      	ldr	r1, [r3, #4]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	4b1b      	ldr	r3, [pc, #108]	; (800ddc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800dd56:	400b      	ands	r3, r1
 800dd58:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2220      	movs	r2, #32
 800dd5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2200      	movs	r2, #0
 800dd66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800dd72:	2301      	movs	r3, #1
 800dd74:	e022      	b.n	800ddbc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd76:	f7fd fa83 	bl	800b280 <HAL_GetTick>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	1ad3      	subs	r3, r2, r3
 800dd80:	68ba      	ldr	r2, [r7, #8]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d302      	bcc.n	800dd8c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d10f      	bne.n	800ddac <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd90:	f043 0220 	orr.w	r2, r3, #32
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2220      	movs	r2, #32
 800dd9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2200      	movs	r2, #0
 800dda4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e007      	b.n	800ddbc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	699b      	ldr	r3, [r3, #24]
 800ddb2:	f003 0304 	and.w	r3, r3, #4
 800ddb6:	2b04      	cmp	r3, #4
 800ddb8:	d193      	bne.n	800dce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ddba:	2300      	movs	r3, #0
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3710      	adds	r7, #16
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	fe00e800 	.word	0xfe00e800

0800ddc8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b08a      	sub	sp, #40	; 0x28
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	699b      	ldr	r3, [r3, #24]
 800dde0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800dde2:	2300      	movs	r3, #0
 800dde4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	f003 0310 	and.w	r3, r3, #16
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d075      	beq.n	800dee0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2210      	movs	r2, #16
 800ddfa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ddfc:	e056      	b.n	800deac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de04:	d052      	beq.n	800deac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800de06:	f7fd fa3b 	bl	800b280 <HAL_GetTick>
 800de0a:	4602      	mov	r2, r0
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	1ad3      	subs	r3, r2, r3
 800de10:	68ba      	ldr	r2, [r7, #8]
 800de12:	429a      	cmp	r2, r3
 800de14:	d302      	bcc.n	800de1c <I2C_IsErrorOccurred+0x54>
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d147      	bne.n	800deac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	699b      	ldr	r3, [r3, #24]
 800de36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de3e:	d12e      	bne.n	800de9e <I2C_IsErrorOccurred+0xd6>
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de46:	d02a      	beq.n	800de9e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800de48:	7cfb      	ldrb	r3, [r7, #19]
 800de4a:	2b20      	cmp	r3, #32
 800de4c:	d027      	beq.n	800de9e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	685a      	ldr	r2, [r3, #4]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800de5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800de5e:	f7fd fa0f 	bl	800b280 <HAL_GetTick>
 800de62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800de64:	e01b      	b.n	800de9e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800de66:	f7fd fa0b 	bl	800b280 <HAL_GetTick>
 800de6a:	4602      	mov	r2, r0
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	1ad3      	subs	r3, r2, r3
 800de70:	2b19      	cmp	r3, #25
 800de72:	d914      	bls.n	800de9e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de78:	f043 0220 	orr.w	r2, r3, #32
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2220      	movs	r2, #32
 800de84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2200      	movs	r2, #0
 800de8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2200      	movs	r2, #0
 800de94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800de98:	2301      	movs	r3, #1
 800de9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	699b      	ldr	r3, [r3, #24]
 800dea4:	f003 0320 	and.w	r3, r3, #32
 800dea8:	2b20      	cmp	r3, #32
 800deaa:	d1dc      	bne.n	800de66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	699b      	ldr	r3, [r3, #24]
 800deb2:	f003 0320 	and.w	r3, r3, #32
 800deb6:	2b20      	cmp	r3, #32
 800deb8:	d003      	beq.n	800dec2 <I2C_IsErrorOccurred+0xfa>
 800deba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d09d      	beq.n	800ddfe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800dec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d103      	bne.n	800ded2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2220      	movs	r2, #32
 800ded0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ded2:	6a3b      	ldr	r3, [r7, #32]
 800ded4:	f043 0304 	orr.w	r3, r3, #4
 800ded8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800deda:	2301      	movs	r3, #1
 800dedc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	699b      	ldr	r3, [r3, #24]
 800dee6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00b      	beq.n	800df0a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800def2:	6a3b      	ldr	r3, [r7, #32]
 800def4:	f043 0301 	orr.w	r3, r3, #1
 800def8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800df04:	2301      	movs	r3, #1
 800df06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00b      	beq.n	800df2c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800df14:	6a3b      	ldr	r3, [r7, #32]
 800df16:	f043 0308 	orr.w	r3, r3, #8
 800df1a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800df24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800df26:	2301      	movs	r3, #1
 800df28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df32:	2b00      	cmp	r3, #0
 800df34:	d00b      	beq.n	800df4e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800df36:	6a3b      	ldr	r3, [r7, #32]
 800df38:	f043 0302 	orr.w	r3, r3, #2
 800df3c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800df48:	2301      	movs	r3, #1
 800df4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800df4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df52:	2b00      	cmp	r3, #0
 800df54:	d01c      	beq.n	800df90 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800df56:	68f8      	ldr	r0, [r7, #12]
 800df58:	f7ff fddc 	bl	800db14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	6859      	ldr	r1, [r3, #4]
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	4b0d      	ldr	r3, [pc, #52]	; (800df9c <I2C_IsErrorOccurred+0x1d4>)
 800df68:	400b      	ands	r3, r1
 800df6a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df70:	6a3b      	ldr	r3, [r7, #32]
 800df72:	431a      	orrs	r2, r3
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2220      	movs	r2, #32
 800df7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2200      	movs	r2, #0
 800df84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2200      	movs	r2, #0
 800df8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800df90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800df94:	4618      	mov	r0, r3
 800df96:	3728      	adds	r7, #40	; 0x28
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	fe00e800 	.word	0xfe00e800

0800dfa0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b087      	sub	sp, #28
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	607b      	str	r3, [r7, #4]
 800dfaa:	460b      	mov	r3, r1
 800dfac:	817b      	strh	r3, [r7, #10]
 800dfae:	4613      	mov	r3, r2
 800dfb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dfb2:	897b      	ldrh	r3, [r7, #10]
 800dfb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800dfb8:	7a7b      	ldrb	r3, [r7, #9]
 800dfba:	041b      	lsls	r3, r3, #16
 800dfbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dfc0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dfc6:	6a3b      	ldr	r3, [r7, #32]
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dfce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	685a      	ldr	r2, [r3, #4]
 800dfd6:	6a3b      	ldr	r3, [r7, #32]
 800dfd8:	0d5b      	lsrs	r3, r3, #21
 800dfda:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800dfde:	4b08      	ldr	r3, [pc, #32]	; (800e000 <I2C_TransferConfig+0x60>)
 800dfe0:	430b      	orrs	r3, r1
 800dfe2:	43db      	mvns	r3, r3
 800dfe4:	ea02 0103 	and.w	r1, r2, r3
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	697a      	ldr	r2, [r7, #20]
 800dfee:	430a      	orrs	r2, r1
 800dff0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800dff2:	bf00      	nop
 800dff4:	371c      	adds	r7, #28
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	03ff63ff 	.word	0x03ff63ff

0800e004 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e014:	b2db      	uxtb	r3, r3
 800e016:	2b20      	cmp	r3, #32
 800e018:	d138      	bne.n	800e08c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e020:	2b01      	cmp	r3, #1
 800e022:	d101      	bne.n	800e028 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e024:	2302      	movs	r3, #2
 800e026:	e032      	b.n	800e08e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2201      	movs	r2, #1
 800e02c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2224      	movs	r2, #36	; 0x24
 800e034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f022 0201 	bic.w	r2, r2, #1
 800e046:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e056:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	6819      	ldr	r1, [r3, #0]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	683a      	ldr	r2, [r7, #0]
 800e064:	430a      	orrs	r2, r1
 800e066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	681a      	ldr	r2, [r3, #0]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f042 0201 	orr.w	r2, r2, #1
 800e076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2220      	movs	r2, #32
 800e07c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2200      	movs	r2, #0
 800e084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e088:	2300      	movs	r3, #0
 800e08a:	e000      	b.n	800e08e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e08c:	2302      	movs	r3, #2
  }
}
 800e08e:	4618      	mov	r0, r3
 800e090:	370c      	adds	r7, #12
 800e092:	46bd      	mov	sp, r7
 800e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e098:	4770      	bx	lr

0800e09a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e09a:	b480      	push	{r7}
 800e09c:	b085      	sub	sp, #20
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
 800e0a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	2b20      	cmp	r3, #32
 800e0ae:	d139      	bne.n	800e124 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d101      	bne.n	800e0be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e0ba:	2302      	movs	r3, #2
 800e0bc:	e033      	b.n	800e126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2224      	movs	r2, #36	; 0x24
 800e0ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	681a      	ldr	r2, [r3, #0]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f022 0201 	bic.w	r2, r2, #1
 800e0dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e0ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	021b      	lsls	r3, r3, #8
 800e0f2:	68fa      	ldr	r2, [r7, #12]
 800e0f4:	4313      	orrs	r3, r2
 800e0f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f042 0201 	orr.w	r2, r2, #1
 800e10e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2220      	movs	r2, #32
 800e114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2200      	movs	r2, #0
 800e11c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e120:	2300      	movs	r3, #0
 800e122:	e000      	b.n	800e126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e124:	2302      	movs	r3, #2
  }
}
 800e126:	4618      	mov	r0, r3
 800e128:	3714      	adds	r7, #20
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr

0800e132 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800e132:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e134:	b08f      	sub	sp, #60	; 0x3c
 800e136:	af0a      	add	r7, sp, #40	; 0x28
 800e138:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d101      	bne.n	800e144 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800e140:	2301      	movs	r3, #1
 800e142:	e116      	b.n	800e372 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800e150:	b2db      	uxtb	r3, r3
 800e152:	2b00      	cmp	r3, #0
 800e154:	d106      	bne.n	800e164 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2200      	movs	r2, #0
 800e15a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f00a f9e0 	bl	8018524 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2203      	movs	r2, #3
 800e168:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e174:	2b00      	cmp	r3, #0
 800e176:	d102      	bne.n	800e17e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2200      	movs	r2, #0
 800e17c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	4618      	mov	r0, r3
 800e184:	f007 f8ef 	bl	8015366 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	603b      	str	r3, [r7, #0]
 800e18e:	687e      	ldr	r6, [r7, #4]
 800e190:	466d      	mov	r5, sp
 800e192:	f106 0410 	add.w	r4, r6, #16
 800e196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e19a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e19c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e19e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e1a2:	e885 0003 	stmia.w	r5, {r0, r1}
 800e1a6:	1d33      	adds	r3, r6, #4
 800e1a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e1aa:	6838      	ldr	r0, [r7, #0]
 800e1ac:	f007 f802 	bl	80151b4 <USB_CoreInit>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d005      	beq.n	800e1c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2202      	movs	r2, #2
 800e1ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e0d7      	b.n	800e372 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f007 f8dd 	bl	8015388 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	73fb      	strb	r3, [r7, #15]
 800e1d2:	e04a      	b.n	800e26a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800e1d4:	7bfa      	ldrb	r2, [r7, #15]
 800e1d6:	6879      	ldr	r1, [r7, #4]
 800e1d8:	4613      	mov	r3, r2
 800e1da:	00db      	lsls	r3, r3, #3
 800e1dc:	4413      	add	r3, r2
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	440b      	add	r3, r1
 800e1e2:	333d      	adds	r3, #61	; 0x3d
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800e1e8:	7bfa      	ldrb	r2, [r7, #15]
 800e1ea:	6879      	ldr	r1, [r7, #4]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	00db      	lsls	r3, r3, #3
 800e1f0:	4413      	add	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	440b      	add	r3, r1
 800e1f6:	333c      	adds	r3, #60	; 0x3c
 800e1f8:	7bfa      	ldrb	r2, [r7, #15]
 800e1fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800e1fc:	7bfa      	ldrb	r2, [r7, #15]
 800e1fe:	7bfb      	ldrb	r3, [r7, #15]
 800e200:	b298      	uxth	r0, r3
 800e202:	6879      	ldr	r1, [r7, #4]
 800e204:	4613      	mov	r3, r2
 800e206:	00db      	lsls	r3, r3, #3
 800e208:	4413      	add	r3, r2
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	440b      	add	r3, r1
 800e20e:	3344      	adds	r3, #68	; 0x44
 800e210:	4602      	mov	r2, r0
 800e212:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800e214:	7bfa      	ldrb	r2, [r7, #15]
 800e216:	6879      	ldr	r1, [r7, #4]
 800e218:	4613      	mov	r3, r2
 800e21a:	00db      	lsls	r3, r3, #3
 800e21c:	4413      	add	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	440b      	add	r3, r1
 800e222:	3340      	adds	r3, #64	; 0x40
 800e224:	2200      	movs	r2, #0
 800e226:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800e228:	7bfa      	ldrb	r2, [r7, #15]
 800e22a:	6879      	ldr	r1, [r7, #4]
 800e22c:	4613      	mov	r3, r2
 800e22e:	00db      	lsls	r3, r3, #3
 800e230:	4413      	add	r3, r2
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	440b      	add	r3, r1
 800e236:	3348      	adds	r3, #72	; 0x48
 800e238:	2200      	movs	r2, #0
 800e23a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800e23c:	7bfa      	ldrb	r2, [r7, #15]
 800e23e:	6879      	ldr	r1, [r7, #4]
 800e240:	4613      	mov	r3, r2
 800e242:	00db      	lsls	r3, r3, #3
 800e244:	4413      	add	r3, r2
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	440b      	add	r3, r1
 800e24a:	334c      	adds	r3, #76	; 0x4c
 800e24c:	2200      	movs	r2, #0
 800e24e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800e250:	7bfa      	ldrb	r2, [r7, #15]
 800e252:	6879      	ldr	r1, [r7, #4]
 800e254:	4613      	mov	r3, r2
 800e256:	00db      	lsls	r3, r3, #3
 800e258:	4413      	add	r3, r2
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	440b      	add	r3, r1
 800e25e:	3354      	adds	r3, #84	; 0x54
 800e260:	2200      	movs	r2, #0
 800e262:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e264:	7bfb      	ldrb	r3, [r7, #15]
 800e266:	3301      	adds	r3, #1
 800e268:	73fb      	strb	r3, [r7, #15]
 800e26a:	7bfa      	ldrb	r2, [r7, #15]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	429a      	cmp	r2, r3
 800e272:	d3af      	bcc.n	800e1d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e274:	2300      	movs	r3, #0
 800e276:	73fb      	strb	r3, [r7, #15]
 800e278:	e044      	b.n	800e304 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800e27a:	7bfa      	ldrb	r2, [r7, #15]
 800e27c:	6879      	ldr	r1, [r7, #4]
 800e27e:	4613      	mov	r3, r2
 800e280:	00db      	lsls	r3, r3, #3
 800e282:	4413      	add	r3, r2
 800e284:	009b      	lsls	r3, r3, #2
 800e286:	440b      	add	r3, r1
 800e288:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800e28c:	2200      	movs	r2, #0
 800e28e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800e290:	7bfa      	ldrb	r2, [r7, #15]
 800e292:	6879      	ldr	r1, [r7, #4]
 800e294:	4613      	mov	r3, r2
 800e296:	00db      	lsls	r3, r3, #3
 800e298:	4413      	add	r3, r2
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	440b      	add	r3, r1
 800e29e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800e2a2:	7bfa      	ldrb	r2, [r7, #15]
 800e2a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800e2a6:	7bfa      	ldrb	r2, [r7, #15]
 800e2a8:	6879      	ldr	r1, [r7, #4]
 800e2aa:	4613      	mov	r3, r2
 800e2ac:	00db      	lsls	r3, r3, #3
 800e2ae:	4413      	add	r3, r2
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	440b      	add	r3, r1
 800e2b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800e2bc:	7bfa      	ldrb	r2, [r7, #15]
 800e2be:	6879      	ldr	r1, [r7, #4]
 800e2c0:	4613      	mov	r3, r2
 800e2c2:	00db      	lsls	r3, r3, #3
 800e2c4:	4413      	add	r3, r2
 800e2c6:	009b      	lsls	r3, r3, #2
 800e2c8:	440b      	add	r3, r1
 800e2ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800e2d2:	7bfa      	ldrb	r2, [r7, #15]
 800e2d4:	6879      	ldr	r1, [r7, #4]
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	00db      	lsls	r3, r3, #3
 800e2da:	4413      	add	r3, r2
 800e2dc:	009b      	lsls	r3, r3, #2
 800e2de:	440b      	add	r3, r1
 800e2e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800e2e8:	7bfa      	ldrb	r2, [r7, #15]
 800e2ea:	6879      	ldr	r1, [r7, #4]
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	00db      	lsls	r3, r3, #3
 800e2f0:	4413      	add	r3, r2
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	440b      	add	r3, r1
 800e2f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e2fe:	7bfb      	ldrb	r3, [r7, #15]
 800e300:	3301      	adds	r3, #1
 800e302:	73fb      	strb	r3, [r7, #15]
 800e304:	7bfa      	ldrb	r2, [r7, #15]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d3b5      	bcc.n	800e27a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	603b      	str	r3, [r7, #0]
 800e314:	687e      	ldr	r6, [r7, #4]
 800e316:	466d      	mov	r5, sp
 800e318:	f106 0410 	add.w	r4, r6, #16
 800e31c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e31e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e324:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e328:	e885 0003 	stmia.w	r5, {r0, r1}
 800e32c:	1d33      	adds	r3, r6, #4
 800e32e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e330:	6838      	ldr	r0, [r7, #0]
 800e332:	f007 f875 	bl	8015420 <USB_DevInit>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d005      	beq.n	800e348 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2202      	movs	r2, #2
 800e340:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800e344:	2301      	movs	r3, #1
 800e346:	e014      	b.n	800e372 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2201      	movs	r2, #1
 800e354:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d102      	bne.n	800e366 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f001 f881 	bl	800f468 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f008 f8fd 	bl	801656a <USB_DevDisconnect>

  return HAL_OK;
 800e370:	2300      	movs	r3, #0
}
 800e372:	4618      	mov	r0, r3
 800e374:	3714      	adds	r7, #20
 800e376:	46bd      	mov	sp, r7
 800e378:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e37a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b084      	sub	sp, #16
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e38e:	2b01      	cmp	r3, #1
 800e390:	d101      	bne.n	800e396 <HAL_PCD_Start+0x1c>
 800e392:	2302      	movs	r3, #2
 800e394:	e01c      	b.n	800e3d0 <HAL_PCD_Start+0x56>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2201      	movs	r2, #1
 800e39a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d105      	bne.n	800e3b2 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f006 ffc4 	bl	8015344 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f008 f8b1 	bl	8016528 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800e3ce:	2300      	movs	r3, #0
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3710      	adds	r7, #16
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800e3d8:	b590      	push	{r4, r7, lr}
 800e3da:	b08d      	sub	sp, #52	; 0x34
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3e6:	6a3b      	ldr	r3, [r7, #32]
 800e3e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f008 f96f 	bl	80166d2 <USB_GetMode>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	f040 847e 	bne.w	800ecf8 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4618      	mov	r0, r3
 800e402:	f008 f8d3 	bl	80165ac <USB_ReadInterrupts>
 800e406:	4603      	mov	r3, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f000 8474 	beq.w	800ecf6 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800e40e:	69fb      	ldr	r3, [r7, #28]
 800e410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e414:	689b      	ldr	r3, [r3, #8]
 800e416:	0a1b      	lsrs	r3, r3, #8
 800e418:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4618      	mov	r0, r3
 800e428:	f008 f8c0 	bl	80165ac <USB_ReadInterrupts>
 800e42c:	4603      	mov	r3, r0
 800e42e:	f003 0302 	and.w	r3, r3, #2
 800e432:	2b02      	cmp	r3, #2
 800e434:	d107      	bne.n	800e446 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	695a      	ldr	r2, [r3, #20]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f002 0202 	and.w	r2, r2, #2
 800e444:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	4618      	mov	r0, r3
 800e44c:	f008 f8ae 	bl	80165ac <USB_ReadInterrupts>
 800e450:	4603      	mov	r3, r0
 800e452:	f003 0310 	and.w	r3, r3, #16
 800e456:	2b10      	cmp	r3, #16
 800e458:	d161      	bne.n	800e51e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	699a      	ldr	r2, [r3, #24]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f022 0210 	bic.w	r2, r2, #16
 800e468:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800e46a:	6a3b      	ldr	r3, [r7, #32]
 800e46c:	6a1b      	ldr	r3, [r3, #32]
 800e46e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800e470:	69bb      	ldr	r3, [r7, #24]
 800e472:	f003 020f 	and.w	r2, r3, #15
 800e476:	4613      	mov	r3, r2
 800e478:	00db      	lsls	r3, r3, #3
 800e47a:	4413      	add	r3, r2
 800e47c:	009b      	lsls	r3, r3, #2
 800e47e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	4413      	add	r3, r2
 800e486:	3304      	adds	r3, #4
 800e488:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	0c5b      	lsrs	r3, r3, #17
 800e48e:	f003 030f 	and.w	r3, r3, #15
 800e492:	2b02      	cmp	r3, #2
 800e494:	d124      	bne.n	800e4e0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800e496:	69ba      	ldr	r2, [r7, #24]
 800e498:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800e49c:	4013      	ands	r3, r2
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d035      	beq.n	800e50e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800e4a6:	69bb      	ldr	r3, [r7, #24]
 800e4a8:	091b      	lsrs	r3, r3, #4
 800e4aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e4ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	6a38      	ldr	r0, [r7, #32]
 800e4b6:	f007 fee5 	bl	8016284 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	691a      	ldr	r2, [r3, #16]
 800e4be:	69bb      	ldr	r3, [r7, #24]
 800e4c0:	091b      	lsrs	r3, r3, #4
 800e4c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4c6:	441a      	add	r2, r3
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	6a1a      	ldr	r2, [r3, #32]
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	091b      	lsrs	r3, r3, #4
 800e4d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4d8:	441a      	add	r2, r3
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	621a      	str	r2, [r3, #32]
 800e4de:	e016      	b.n	800e50e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800e4e0:	69bb      	ldr	r3, [r7, #24]
 800e4e2:	0c5b      	lsrs	r3, r3, #17
 800e4e4:	f003 030f 	and.w	r3, r3, #15
 800e4e8:	2b06      	cmp	r3, #6
 800e4ea:	d110      	bne.n	800e50e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e4f2:	2208      	movs	r2, #8
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	6a38      	ldr	r0, [r7, #32]
 800e4f8:	f007 fec4 	bl	8016284 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	6a1a      	ldr	r2, [r3, #32]
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	091b      	lsrs	r3, r3, #4
 800e504:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e508:	441a      	add	r2, r3
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	699a      	ldr	r2, [r3, #24]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f042 0210 	orr.w	r2, r2, #16
 800e51c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	4618      	mov	r0, r3
 800e524:	f008 f842 	bl	80165ac <USB_ReadInterrupts>
 800e528:	4603      	mov	r3, r0
 800e52a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e52e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e532:	f040 80a7 	bne.w	800e684 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800e536:	2300      	movs	r3, #0
 800e538:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	4618      	mov	r0, r3
 800e540:	f008 f847 	bl	80165d2 <USB_ReadDevAllOutEpInterrupt>
 800e544:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800e546:	e099      	b.n	800e67c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54a:	f003 0301 	and.w	r3, r3, #1
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f000 808e 	beq.w	800e670 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e55a:	b2d2      	uxtb	r2, r2
 800e55c:	4611      	mov	r1, r2
 800e55e:	4618      	mov	r0, r3
 800e560:	f008 f86b 	bl	801663a <USB_ReadDevOutEPInterrupt>
 800e564:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	f003 0301 	and.w	r3, r3, #1
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d00c      	beq.n	800e58a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800e570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e572:	015a      	lsls	r2, r3, #5
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	4413      	add	r3, r2
 800e578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e57c:	461a      	mov	r2, r3
 800e57e:	2301      	movs	r3, #1
 800e580:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800e582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f000 fe95 	bl	800f2b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	f003 0308 	and.w	r3, r3, #8
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00c      	beq.n	800e5ae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e596:	015a      	lsls	r2, r3, #5
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	4413      	add	r3, r2
 800e59c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	2308      	movs	r3, #8
 800e5a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800e5a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 fed1 	bl	800f350 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	f003 0310 	and.w	r3, r3, #16
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d008      	beq.n	800e5ca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800e5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ba:	015a      	lsls	r2, r3, #5
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	4413      	add	r3, r2
 800e5c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	2310      	movs	r3, #16
 800e5c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	f003 0302 	and.w	r3, r3, #2
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d030      	beq.n	800e636 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800e5d4:	6a3b      	ldr	r3, [r7, #32]
 800e5d6:	695b      	ldr	r3, [r3, #20]
 800e5d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5dc:	2b80      	cmp	r3, #128	; 0x80
 800e5de:	d109      	bne.n	800e5f4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	69fa      	ldr	r2, [r7, #28]
 800e5ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e5ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e5f2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800e5f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	00db      	lsls	r3, r3, #3
 800e5fa:	4413      	add	r3, r2
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	4413      	add	r3, r2
 800e606:	3304      	adds	r3, #4
 800e608:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	78db      	ldrb	r3, [r3, #3]
 800e60e:	2b01      	cmp	r3, #1
 800e610:	d108      	bne.n	800e624 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	2200      	movs	r2, #0
 800e616:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800e618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	4619      	mov	r1, r3
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f00a f8a8 	bl	8018774 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800e624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e626:	015a      	lsls	r2, r3, #5
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	4413      	add	r3, r2
 800e62c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e630:	461a      	mov	r2, r3
 800e632:	2302      	movs	r3, #2
 800e634:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	f003 0320 	and.w	r3, r3, #32
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d008      	beq.n	800e652 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e642:	015a      	lsls	r2, r3, #5
 800e644:	69fb      	ldr	r3, [r7, #28]
 800e646:	4413      	add	r3, r2
 800e648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e64c:	461a      	mov	r2, r3
 800e64e:	2320      	movs	r3, #32
 800e650:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d009      	beq.n	800e670 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800e65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65e:	015a      	lsls	r2, r3, #5
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	4413      	add	r3, r2
 800e664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e668:	461a      	mov	r2, r3
 800e66a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e66e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e672:	3301      	adds	r3, #1
 800e674:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e678:	085b      	lsrs	r3, r3, #1
 800e67a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67e:	2b00      	cmp	r3, #0
 800e680:	f47f af62 	bne.w	800e548 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4618      	mov	r0, r3
 800e68a:	f007 ff8f 	bl	80165ac <USB_ReadInterrupts>
 800e68e:	4603      	mov	r3, r0
 800e690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e694:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e698:	f040 80a4 	bne.w	800e7e4 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f007 ffb0 	bl	8016606 <USB_ReadDevAllInEpInterrupt>
 800e6a6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800e6ac:	e096      	b.n	800e7dc <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800e6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b0:	f003 0301 	and.w	r3, r3, #1
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f000 808b 	beq.w	800e7d0 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6c0:	b2d2      	uxtb	r2, r2
 800e6c2:	4611      	mov	r1, r2
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f007 ffd6 	bl	8016676 <USB_ReadDevInEPInterrupt>
 800e6ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	f003 0301 	and.w	r3, r3, #1
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d020      	beq.n	800e718 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d8:	f003 030f 	and.w	r3, r3, #15
 800e6dc:	2201      	movs	r2, #1
 800e6de:	fa02 f303 	lsl.w	r3, r2, r3
 800e6e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	43db      	mvns	r3, r3
 800e6f0:	69f9      	ldr	r1, [r7, #28]
 800e6f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6f6:	4013      	ands	r3, r2
 800e6f8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800e6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fc:	015a      	lsls	r2, r3, #5
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	4413      	add	r3, r2
 800e702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e706:	461a      	mov	r2, r3
 800e708:	2301      	movs	r3, #1
 800e70a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800e70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70e:	b2db      	uxtb	r3, r3
 800e710:	4619      	mov	r1, r3
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f009 ff99 	bl	801864a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	f003 0308 	and.w	r3, r3, #8
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d008      	beq.n	800e734 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800e722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e724:	015a      	lsls	r2, r3, #5
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	4413      	add	r3, r2
 800e72a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e72e:	461a      	mov	r2, r3
 800e730:	2308      	movs	r3, #8
 800e732:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	f003 0310 	and.w	r3, r3, #16
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d008      	beq.n	800e750 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800e73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e740:	015a      	lsls	r2, r3, #5
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	4413      	add	r3, r2
 800e746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e74a:	461a      	mov	r2, r3
 800e74c:	2310      	movs	r3, #16
 800e74e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e756:	2b00      	cmp	r3, #0
 800e758:	d008      	beq.n	800e76c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800e75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75c:	015a      	lsls	r2, r3, #5
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	4413      	add	r3, r2
 800e762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e766:	461a      	mov	r2, r3
 800e768:	2340      	movs	r3, #64	; 0x40
 800e76a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	f003 0302 	and.w	r3, r3, #2
 800e772:	2b00      	cmp	r3, #0
 800e774:	d023      	beq.n	800e7be <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800e776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e778:	6a38      	ldr	r0, [r7, #32]
 800e77a:	f006 ff9d 	bl	80156b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800e77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e780:	4613      	mov	r3, r2
 800e782:	00db      	lsls	r3, r3, #3
 800e784:	4413      	add	r3, r2
 800e786:	009b      	lsls	r3, r3, #2
 800e788:	3338      	adds	r3, #56	; 0x38
 800e78a:	687a      	ldr	r2, [r7, #4]
 800e78c:	4413      	add	r3, r2
 800e78e:	3304      	adds	r3, #4
 800e790:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	78db      	ldrb	r3, [r3, #3]
 800e796:	2b01      	cmp	r3, #1
 800e798:	d108      	bne.n	800e7ac <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	2200      	movs	r2, #0
 800e79e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f009 fff6 	bl	8018798 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800e7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ae:	015a      	lsls	r2, r3, #5
 800e7b0:	69fb      	ldr	r3, [r7, #28]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	2302      	movs	r3, #2
 800e7bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d003      	beq.n	800e7d0 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800e7c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f000 fcea 	bl	800f1a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d8:	085b      	lsrs	r3, r3, #1
 800e7da:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	f47f af65 	bne.w	800e6ae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f007 fedf 	bl	80165ac <USB_ReadInterrupts>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e7f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e7f8:	d122      	bne.n	800e840 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e7fa:	69fb      	ldr	r3, [r7, #28]
 800e7fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	69fa      	ldr	r2, [r7, #28]
 800e804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e808:	f023 0301 	bic.w	r3, r3, #1
 800e80c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e814:	2b01      	cmp	r3, #1
 800e816:	d108      	bne.n	800e82a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e820:	2100      	movs	r1, #0
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f00a fa2a 	bl	8018c7c <HAL_PCDEx_LPM_Callback>
 800e828:	e002      	b.n	800e830 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f009 ff7a 	bl	8018724 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	695a      	ldr	r2, [r3, #20]
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e83e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4618      	mov	r0, r3
 800e846:	f007 feb1 	bl	80165ac <USB_ReadInterrupts>
 800e84a:	4603      	mov	r3, r0
 800e84c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e854:	d112      	bne.n	800e87c <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	f003 0301 	and.w	r3, r3, #1
 800e862:	2b01      	cmp	r3, #1
 800e864:	d102      	bne.n	800e86c <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f009 ff36 	bl	80186d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	695a      	ldr	r2, [r3, #20]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800e87a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4618      	mov	r0, r3
 800e882:	f007 fe93 	bl	80165ac <USB_ReadInterrupts>
 800e886:	4603      	mov	r3, r0
 800e888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e88c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e890:	d121      	bne.n	800e8d6 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	695a      	ldr	r2, [r3, #20]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800e8a0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d111      	bne.n	800e8d0 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8ba:	089b      	lsrs	r3, r3, #2
 800e8bc:	f003 020f 	and.w	r2, r3, #15
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800e8c6:	2101      	movs	r1, #1
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f00a f9d7 	bl	8018c7c <HAL_PCDEx_LPM_Callback>
 800e8ce:	e002      	b.n	800e8d6 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f009 ff01 	bl	80186d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f007 fe66 	bl	80165ac <USB_ReadInterrupts>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e8e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8ea:	f040 80b5 	bne.w	800ea58 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	69fa      	ldr	r2, [r7, #28]
 800e8f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e8fc:	f023 0301 	bic.w	r3, r3, #1
 800e900:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	2110      	movs	r1, #16
 800e908:	4618      	mov	r0, r3
 800e90a:	f006 fed5 	bl	80156b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e90e:	2300      	movs	r3, #0
 800e910:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e912:	e046      	b.n	800e9a2 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e916:	015a      	lsls	r2, r3, #5
 800e918:	69fb      	ldr	r3, [r7, #28]
 800e91a:	4413      	add	r3, r2
 800e91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e920:	461a      	mov	r2, r3
 800e922:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e926:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92a:	015a      	lsls	r2, r3, #5
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	4413      	add	r3, r2
 800e930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e938:	0151      	lsls	r1, r2, #5
 800e93a:	69fa      	ldr	r2, [r7, #28]
 800e93c:	440a      	add	r2, r1
 800e93e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e942:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e946:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94a:	015a      	lsls	r2, r3, #5
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	4413      	add	r3, r2
 800e950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e954:	461a      	mov	r2, r3
 800e956:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e95a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95e:	015a      	lsls	r2, r3, #5
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	4413      	add	r3, r2
 800e964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e96c:	0151      	lsls	r1, r2, #5
 800e96e:	69fa      	ldr	r2, [r7, #28]
 800e970:	440a      	add	r2, r1
 800e972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e976:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e97a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97e:	015a      	lsls	r2, r3, #5
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	4413      	add	r3, r2
 800e984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e98c:	0151      	lsls	r1, r2, #5
 800e98e:	69fa      	ldr	r2, [r7, #28]
 800e990:	440a      	add	r2, r1
 800e992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e996:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e99a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99e:	3301      	adds	r3, #1
 800e9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d3b3      	bcc.n	800e914 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9b2:	69db      	ldr	r3, [r3, #28]
 800e9b4:	69fa      	ldr	r2, [r7, #28]
 800e9b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9ba:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800e9be:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d016      	beq.n	800e9f6 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9d2:	69fa      	ldr	r2, [r7, #28]
 800e9d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9d8:	f043 030b 	orr.w	r3, r3, #11
 800e9dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9e8:	69fa      	ldr	r2, [r7, #28]
 800e9ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9ee:	f043 030b 	orr.w	r3, r3, #11
 800e9f2:	6453      	str	r3, [r2, #68]	; 0x44
 800e9f4:	e015      	b.n	800ea22 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9fc:	695b      	ldr	r3, [r3, #20]
 800e9fe:	69fa      	ldr	r2, [r7, #28]
 800ea00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ea08:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800ea0c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800ea0e:	69fb      	ldr	r3, [r7, #28]
 800ea10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea14:	691b      	ldr	r3, [r3, #16]
 800ea16:	69fa      	ldr	r2, [r7, #28]
 800ea18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea1c:	f043 030b 	orr.w	r3, r3, #11
 800ea20:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ea22:	69fb      	ldr	r3, [r7, #28]
 800ea24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	69fa      	ldr	r2, [r7, #28]
 800ea2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea30:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ea34:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681a      	ldr	r2, [r3, #0]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ea40:	4619      	mov	r1, r3
 800ea42:	4610      	mov	r0, r2
 800ea44:	f007 fe76 	bl	8016734 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	695a      	ldr	r2, [r3, #20]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800ea56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f007 fda5 	bl	80165ac <USB_ReadInterrupts>
 800ea62:	4603      	mov	r3, r0
 800ea64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ea68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea6c:	d124      	bne.n	800eab8 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f007 fe3b 	bl	80166ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f006 fe98 	bl	80157b2 <USB_GetDevSpeed>
 800ea82:	4603      	mov	r3, r0
 800ea84:	461a      	mov	r2, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681c      	ldr	r4, [r3, #0]
 800ea8e:	f001 fc87 	bl	80103a0 <HAL_RCC_GetHCLKFreq>
 800ea92:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	f006 fbb5 	bl	801520c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f009 fdf9 	bl	801869a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	695a      	ldr	r2, [r3, #20]
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800eab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	4618      	mov	r0, r3
 800eabe:	f007 fd75 	bl	80165ac <USB_ReadInterrupts>
 800eac2:	4603      	mov	r3, r0
 800eac4:	f003 0308 	and.w	r3, r3, #8
 800eac8:	2b08      	cmp	r3, #8
 800eaca:	d10a      	bne.n	800eae2 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f009 fdd6 	bl	801867e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	695a      	ldr	r2, [r3, #20]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	f002 0208 	and.w	r2, r2, #8
 800eae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	4618      	mov	r0, r3
 800eae8:	f007 fd60 	bl	80165ac <USB_ReadInterrupts>
 800eaec:	4603      	mov	r3, r0
 800eaee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaf2:	2b80      	cmp	r3, #128	; 0x80
 800eaf4:	d122      	bne.n	800eb3c <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800eaf6:	6a3b      	ldr	r3, [r7, #32]
 800eaf8:	699b      	ldr	r3, [r3, #24]
 800eafa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800eafe:	6a3b      	ldr	r3, [r7, #32]
 800eb00:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800eb02:	2301      	movs	r3, #1
 800eb04:	627b      	str	r3, [r7, #36]	; 0x24
 800eb06:	e014      	b.n	800eb32 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800eb08:	6879      	ldr	r1, [r7, #4]
 800eb0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb0c:	4613      	mov	r3, r2
 800eb0e:	00db      	lsls	r3, r3, #3
 800eb10:	4413      	add	r3, r2
 800eb12:	009b      	lsls	r3, r3, #2
 800eb14:	440b      	add	r3, r1
 800eb16:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d105      	bne.n	800eb2c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800eb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	4619      	mov	r1, r3
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f000 fb0b 	bl	800f142 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800eb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2e:	3301      	adds	r3, #1
 800eb30:	627b      	str	r3, [r7, #36]	; 0x24
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d3e5      	bcc.n	800eb08 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4618      	mov	r0, r3
 800eb42:	f007 fd33 	bl	80165ac <USB_ReadInterrupts>
 800eb46:	4603      	mov	r3, r0
 800eb48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eb4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb50:	d13b      	bne.n	800ebca <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800eb52:	2301      	movs	r3, #1
 800eb54:	627b      	str	r3, [r7, #36]	; 0x24
 800eb56:	e02b      	b.n	800ebb0 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800eb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5a:	015a      	lsls	r2, r3, #5
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	4413      	add	r3, r2
 800eb60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800eb68:	6879      	ldr	r1, [r7, #4]
 800eb6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb6c:	4613      	mov	r3, r2
 800eb6e:	00db      	lsls	r3, r3, #3
 800eb70:	4413      	add	r3, r2
 800eb72:	009b      	lsls	r3, r3, #2
 800eb74:	440b      	add	r3, r1
 800eb76:	3340      	adds	r3, #64	; 0x40
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d115      	bne.n	800ebaa <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800eb7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	da12      	bge.n	800ebaa <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800eb84:	6879      	ldr	r1, [r7, #4]
 800eb86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb88:	4613      	mov	r3, r2
 800eb8a:	00db      	lsls	r3, r3, #3
 800eb8c:	4413      	add	r3, r2
 800eb8e:	009b      	lsls	r3, r3, #2
 800eb90:	440b      	add	r3, r1
 800eb92:	333f      	adds	r3, #63	; 0x3f
 800eb94:	2201      	movs	r2, #1
 800eb96:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800eb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	4619      	mov	r1, r3
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f000 facc 	bl	800f142 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ebaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebac:	3301      	adds	r3, #1
 800ebae:	627b      	str	r3, [r7, #36]	; 0x24
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d3ce      	bcc.n	800eb58 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	695a      	ldr	r2, [r3, #20]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ebc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f007 fcec 	bl	80165ac <USB_ReadInterrupts>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ebda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ebde:	d155      	bne.n	800ec8c <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	627b      	str	r3, [r7, #36]	; 0x24
 800ebe4:	e045      	b.n	800ec72 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ebe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe8:	015a      	lsls	r2, r3, #5
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	4413      	add	r3, r2
 800ebee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ebf6:	6879      	ldr	r1, [r7, #4]
 800ebf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	00db      	lsls	r3, r3, #3
 800ebfe:	4413      	add	r3, r2
 800ec00:	009b      	lsls	r3, r3, #2
 800ec02:	440b      	add	r3, r1
 800ec04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d12e      	bne.n	800ec6c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ec0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	da2b      	bge.n	800ec6c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800ec14:	69bb      	ldr	r3, [r7, #24]
 800ec16:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800ec20:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d121      	bne.n	800ec6c <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ec28:	6879      	ldr	r1, [r7, #4]
 800ec2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec2c:	4613      	mov	r3, r2
 800ec2e:	00db      	lsls	r3, r3, #3
 800ec30:	4413      	add	r3, r2
 800ec32:	009b      	lsls	r3, r3, #2
 800ec34:	440b      	add	r3, r1
 800ec36:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800ec3e:	6a3b      	ldr	r3, [r7, #32]
 800ec40:	699b      	ldr	r3, [r3, #24]
 800ec42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ec46:	6a3b      	ldr	r3, [r7, #32]
 800ec48:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800ec4a:	6a3b      	ldr	r3, [r7, #32]
 800ec4c:	695b      	ldr	r3, [r3, #20]
 800ec4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d10a      	bne.n	800ec6c <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ec56:	69fb      	ldr	r3, [r7, #28]
 800ec58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec5c:	685b      	ldr	r3, [r3, #4]
 800ec5e:	69fa      	ldr	r2, [r7, #28]
 800ec60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ec68:	6053      	str	r3, [r2, #4]
            break;
 800ec6a:	e007      	b.n	800ec7c <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ec6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6e:	3301      	adds	r3, #1
 800ec70:	627b      	str	r3, [r7, #36]	; 0x24
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d3b4      	bcc.n	800ebe6 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	695a      	ldr	r2, [r3, #20]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ec8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4618      	mov	r0, r3
 800ec92:	f007 fc8b 	bl	80165ac <USB_ReadInterrupts>
 800ec96:	4603      	mov	r3, r0
 800ec98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ec9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eca0:	d10a      	bne.n	800ecb8 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f009 fd8a 	bl	80187bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	695a      	ldr	r2, [r3, #20]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800ecb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f007 fc75 	bl	80165ac <USB_ReadInterrupts>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	f003 0304 	and.w	r3, r3, #4
 800ecc8:	2b04      	cmp	r3, #4
 800ecca:	d115      	bne.n	800ecf8 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ecd4:	69bb      	ldr	r3, [r7, #24]
 800ecd6:	f003 0304 	and.w	r3, r3, #4
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d002      	beq.n	800ece4 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f009 fd7a 	bl	80187d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	6859      	ldr	r1, [r3, #4]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	69ba      	ldr	r2, [r7, #24]
 800ecf0:	430a      	orrs	r2, r1
 800ecf2:	605a      	str	r2, [r3, #4]
 800ecf4:	e000      	b.n	800ecf8 <HAL_PCD_IRQHandler+0x920>
      return;
 800ecf6:	bf00      	nop
    }
  }
}
 800ecf8:	3734      	adds	r7, #52	; 0x34
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd90      	pop	{r4, r7, pc}

0800ecfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b082      	sub	sp, #8
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	460b      	mov	r3, r1
 800ed08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	d101      	bne.n	800ed18 <HAL_PCD_SetAddress+0x1a>
 800ed14:	2302      	movs	r3, #2
 800ed16:	e013      	b.n	800ed40 <HAL_PCD_SetAddress+0x42>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	78fa      	ldrb	r2, [r7, #3]
 800ed24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	78fa      	ldrb	r2, [r7, #3]
 800ed2e:	4611      	mov	r1, r2
 800ed30:	4618      	mov	r0, r3
 800ed32:	f007 fbd3 	bl	80164dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ed3e:	2300      	movs	r3, #0
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	4608      	mov	r0, r1
 800ed52:	4611      	mov	r1, r2
 800ed54:	461a      	mov	r2, r3
 800ed56:	4603      	mov	r3, r0
 800ed58:	70fb      	strb	r3, [r7, #3]
 800ed5a:	460b      	mov	r3, r1
 800ed5c:	803b      	strh	r3, [r7, #0]
 800ed5e:	4613      	mov	r3, r2
 800ed60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ed62:	2300      	movs	r3, #0
 800ed64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ed66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	da0f      	bge.n	800ed8e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ed6e:	78fb      	ldrb	r3, [r7, #3]
 800ed70:	f003 020f 	and.w	r2, r3, #15
 800ed74:	4613      	mov	r3, r2
 800ed76:	00db      	lsls	r3, r3, #3
 800ed78:	4413      	add	r3, r2
 800ed7a:	009b      	lsls	r3, r3, #2
 800ed7c:	3338      	adds	r3, #56	; 0x38
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	4413      	add	r3, r2
 800ed82:	3304      	adds	r3, #4
 800ed84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2201      	movs	r2, #1
 800ed8a:	705a      	strb	r2, [r3, #1]
 800ed8c:	e00f      	b.n	800edae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ed8e:	78fb      	ldrb	r3, [r7, #3]
 800ed90:	f003 020f 	and.w	r2, r3, #15
 800ed94:	4613      	mov	r3, r2
 800ed96:	00db      	lsls	r3, r3, #3
 800ed98:	4413      	add	r3, r2
 800ed9a:	009b      	lsls	r3, r3, #2
 800ed9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eda0:	687a      	ldr	r2, [r7, #4]
 800eda2:	4413      	add	r3, r2
 800eda4:	3304      	adds	r3, #4
 800eda6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2200      	movs	r2, #0
 800edac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800edae:	78fb      	ldrb	r3, [r7, #3]
 800edb0:	f003 030f 	and.w	r3, r3, #15
 800edb4:	b2da      	uxtb	r2, r3
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800edba:	883a      	ldrh	r2, [r7, #0]
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	78ba      	ldrb	r2, [r7, #2]
 800edc4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	785b      	ldrb	r3, [r3, #1]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d004      	beq.n	800edd8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	b29a      	uxth	r2, r3
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800edd8:	78bb      	ldrb	r3, [r7, #2]
 800edda:	2b02      	cmp	r3, #2
 800eddc:	d102      	bne.n	800ede4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2200      	movs	r2, #0
 800ede2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800edea:	2b01      	cmp	r3, #1
 800edec:	d101      	bne.n	800edf2 <HAL_PCD_EP_Open+0xaa>
 800edee:	2302      	movs	r3, #2
 800edf0:	e00e      	b.n	800ee10 <HAL_PCD_EP_Open+0xc8>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2201      	movs	r2, #1
 800edf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	68f9      	ldr	r1, [r7, #12]
 800ee00:	4618      	mov	r0, r3
 800ee02:	f006 fcf5 	bl	80157f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800ee0e:	7afb      	ldrb	r3, [r7, #11]
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3710      	adds	r7, #16
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	460b      	mov	r3, r1
 800ee22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ee24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	da0f      	bge.n	800ee4c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ee2c:	78fb      	ldrb	r3, [r7, #3]
 800ee2e:	f003 020f 	and.w	r2, r3, #15
 800ee32:	4613      	mov	r3, r2
 800ee34:	00db      	lsls	r3, r3, #3
 800ee36:	4413      	add	r3, r2
 800ee38:	009b      	lsls	r3, r3, #2
 800ee3a:	3338      	adds	r3, #56	; 0x38
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	4413      	add	r3, r2
 800ee40:	3304      	adds	r3, #4
 800ee42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2201      	movs	r2, #1
 800ee48:	705a      	strb	r2, [r3, #1]
 800ee4a:	e00f      	b.n	800ee6c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ee4c:	78fb      	ldrb	r3, [r7, #3]
 800ee4e:	f003 020f 	and.w	r2, r3, #15
 800ee52:	4613      	mov	r3, r2
 800ee54:	00db      	lsls	r3, r3, #3
 800ee56:	4413      	add	r3, r2
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ee5e:	687a      	ldr	r2, [r7, #4]
 800ee60:	4413      	add	r3, r2
 800ee62:	3304      	adds	r3, #4
 800ee64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ee6c:	78fb      	ldrb	r3, [r7, #3]
 800ee6e:	f003 030f 	and.w	r3, r3, #15
 800ee72:	b2da      	uxtb	r2, r3
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d101      	bne.n	800ee86 <HAL_PCD_EP_Close+0x6e>
 800ee82:	2302      	movs	r3, #2
 800ee84:	e00e      	b.n	800eea4 <HAL_PCD_EP_Close+0x8c>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	68f9      	ldr	r1, [r7, #12]
 800ee94:	4618      	mov	r0, r3
 800ee96:	f006 fd33 	bl	8015900 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800eea2:	2300      	movs	r3, #0
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3710      	adds	r7, #16
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b086      	sub	sp, #24
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	607a      	str	r2, [r7, #4]
 800eeb6:	603b      	str	r3, [r7, #0]
 800eeb8:	460b      	mov	r3, r1
 800eeba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eebc:	7afb      	ldrb	r3, [r7, #11]
 800eebe:	f003 020f 	and.w	r2, r3, #15
 800eec2:	4613      	mov	r3, r2
 800eec4:	00db      	lsls	r3, r3, #3
 800eec6:	4413      	add	r3, r2
 800eec8:	009b      	lsls	r3, r3, #2
 800eeca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eece:	68fa      	ldr	r2, [r7, #12]
 800eed0:	4413      	add	r3, r2
 800eed2:	3304      	adds	r3, #4
 800eed4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	683a      	ldr	r2, [r7, #0]
 800eee0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	2200      	movs	r2, #0
 800eee6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	2200      	movs	r2, #0
 800eeec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800eeee:	7afb      	ldrb	r3, [r7, #11]
 800eef0:	f003 030f 	and.w	r3, r3, #15
 800eef4:	b2da      	uxtb	r2, r3
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800eefa:	7afb      	ldrb	r3, [r7, #11]
 800eefc:	f003 030f 	and.w	r3, r3, #15
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d106      	bne.n	800ef12 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	6979      	ldr	r1, [r7, #20]
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f006 ffb4 	bl	8015e78 <USB_EP0StartXfer>
 800ef10:	e005      	b.n	800ef1e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	6979      	ldr	r1, [r7, #20]
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f006 fdcd 	bl	8015ab8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ef1e:	2300      	movs	r3, #0
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3718      	adds	r7, #24
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ef28:	b480      	push	{r7}
 800ef2a:	b083      	sub	sp, #12
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	460b      	mov	r3, r1
 800ef32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ef34:	78fb      	ldrb	r3, [r7, #3]
 800ef36:	f003 020f 	and.w	r2, r3, #15
 800ef3a:	6879      	ldr	r1, [r7, #4]
 800ef3c:	4613      	mov	r3, r2
 800ef3e:	00db      	lsls	r3, r3, #3
 800ef40:	4413      	add	r3, r2
 800ef42:	009b      	lsls	r3, r3, #2
 800ef44:	440b      	add	r3, r1
 800ef46:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800ef4a:	681b      	ldr	r3, [r3, #0]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	370c      	adds	r7, #12
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr

0800ef58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b086      	sub	sp, #24
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	607a      	str	r2, [r7, #4]
 800ef62:	603b      	str	r3, [r7, #0]
 800ef64:	460b      	mov	r3, r1
 800ef66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ef68:	7afb      	ldrb	r3, [r7, #11]
 800ef6a:	f003 020f 	and.w	r2, r3, #15
 800ef6e:	4613      	mov	r3, r2
 800ef70:	00db      	lsls	r3, r3, #3
 800ef72:	4413      	add	r3, r2
 800ef74:	009b      	lsls	r3, r3, #2
 800ef76:	3338      	adds	r3, #56	; 0x38
 800ef78:	68fa      	ldr	r2, [r7, #12]
 800ef7a:	4413      	add	r3, r2
 800ef7c:	3304      	adds	r3, #4
 800ef7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	683a      	ldr	r2, [r7, #0]
 800ef8a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	2201      	movs	r2, #1
 800ef96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ef98:	7afb      	ldrb	r3, [r7, #11]
 800ef9a:	f003 030f 	and.w	r3, r3, #15
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800efa4:	7afb      	ldrb	r3, [r7, #11]
 800efa6:	f003 030f 	and.w	r3, r3, #15
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d106      	bne.n	800efbc <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	6979      	ldr	r1, [r7, #20]
 800efb4:	4618      	mov	r0, r3
 800efb6:	f006 ff5f 	bl	8015e78 <USB_EP0StartXfer>
 800efba:	e005      	b.n	800efc8 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	6979      	ldr	r1, [r7, #20]
 800efc2:	4618      	mov	r0, r3
 800efc4:	f006 fd78 	bl	8015ab8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800efc8:	2300      	movs	r3, #0
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3718      	adds	r7, #24
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}

0800efd2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800efd2:	b580      	push	{r7, lr}
 800efd4:	b084      	sub	sp, #16
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
 800efda:	460b      	mov	r3, r1
 800efdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800efde:	78fb      	ldrb	r3, [r7, #3]
 800efe0:	f003 020f 	and.w	r2, r3, #15
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	429a      	cmp	r2, r3
 800efea:	d901      	bls.n	800eff0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800efec:	2301      	movs	r3, #1
 800efee:	e04e      	b.n	800f08e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800eff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	da0f      	bge.n	800f018 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800eff8:	78fb      	ldrb	r3, [r7, #3]
 800effa:	f003 020f 	and.w	r2, r3, #15
 800effe:	4613      	mov	r3, r2
 800f000:	00db      	lsls	r3, r3, #3
 800f002:	4413      	add	r3, r2
 800f004:	009b      	lsls	r3, r3, #2
 800f006:	3338      	adds	r3, #56	; 0x38
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	4413      	add	r3, r2
 800f00c:	3304      	adds	r3, #4
 800f00e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2201      	movs	r2, #1
 800f014:	705a      	strb	r2, [r3, #1]
 800f016:	e00d      	b.n	800f034 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f018:	78fa      	ldrb	r2, [r7, #3]
 800f01a:	4613      	mov	r3, r2
 800f01c:	00db      	lsls	r3, r3, #3
 800f01e:	4413      	add	r3, r2
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	4413      	add	r3, r2
 800f02a:	3304      	adds	r3, #4
 800f02c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2200      	movs	r2, #0
 800f032:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2201      	movs	r2, #1
 800f038:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f03a:	78fb      	ldrb	r3, [r7, #3]
 800f03c:	f003 030f 	and.w	r3, r3, #15
 800f040:	b2da      	uxtb	r2, r3
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d101      	bne.n	800f054 <HAL_PCD_EP_SetStall+0x82>
 800f050:	2302      	movs	r3, #2
 800f052:	e01c      	b.n	800f08e <HAL_PCD_EP_SetStall+0xbc>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2201      	movs	r2, #1
 800f058:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	68f9      	ldr	r1, [r7, #12]
 800f062:	4618      	mov	r0, r3
 800f064:	f007 f966 	bl	8016334 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f068:	78fb      	ldrb	r3, [r7, #3]
 800f06a:	f003 030f 	and.w	r3, r3, #15
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d108      	bne.n	800f084 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f07c:	4619      	mov	r1, r3
 800f07e:	4610      	mov	r0, r2
 800f080:	f007 fb58 	bl	8016734 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2200      	movs	r2, #0
 800f088:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f08c:	2300      	movs	r3, #0
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3710      	adds	r7, #16
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}

0800f096 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f096:	b580      	push	{r7, lr}
 800f098:	b084      	sub	sp, #16
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]
 800f09e:	460b      	mov	r3, r1
 800f0a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800f0a2:	78fb      	ldrb	r3, [r7, #3]
 800f0a4:	f003 020f 	and.w	r2, r3, #15
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d901      	bls.n	800f0b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e042      	b.n	800f13a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f0b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	da0f      	bge.n	800f0dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f0bc:	78fb      	ldrb	r3, [r7, #3]
 800f0be:	f003 020f 	and.w	r2, r3, #15
 800f0c2:	4613      	mov	r3, r2
 800f0c4:	00db      	lsls	r3, r3, #3
 800f0c6:	4413      	add	r3, r2
 800f0c8:	009b      	lsls	r3, r3, #2
 800f0ca:	3338      	adds	r3, #56	; 0x38
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	4413      	add	r3, r2
 800f0d0:	3304      	adds	r3, #4
 800f0d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	705a      	strb	r2, [r3, #1]
 800f0da:	e00f      	b.n	800f0fc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f0dc:	78fb      	ldrb	r3, [r7, #3]
 800f0de:	f003 020f 	and.w	r2, r3, #15
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	00db      	lsls	r3, r3, #3
 800f0e6:	4413      	add	r3, r2
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f0ee:	687a      	ldr	r2, [r7, #4]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	3304      	adds	r3, #4
 800f0f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2200      	movs	r2, #0
 800f100:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f102:	78fb      	ldrb	r3, [r7, #3]
 800f104:	f003 030f 	and.w	r3, r3, #15
 800f108:	b2da      	uxtb	r2, r3
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f114:	2b01      	cmp	r3, #1
 800f116:	d101      	bne.n	800f11c <HAL_PCD_EP_ClrStall+0x86>
 800f118:	2302      	movs	r3, #2
 800f11a:	e00e      	b.n	800f13a <HAL_PCD_EP_ClrStall+0xa4>
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2201      	movs	r2, #1
 800f120:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	68f9      	ldr	r1, [r7, #12]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f007 f970 	bl	8016410 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2200      	movs	r2, #0
 800f134:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f138:	2300      	movs	r3, #0
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3710      	adds	r7, #16
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}

0800f142 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f142:	b580      	push	{r7, lr}
 800f144:	b084      	sub	sp, #16
 800f146:	af00      	add	r7, sp, #0
 800f148:	6078      	str	r0, [r7, #4]
 800f14a:	460b      	mov	r3, r1
 800f14c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800f14e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f152:	2b00      	cmp	r3, #0
 800f154:	da0c      	bge.n	800f170 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f156:	78fb      	ldrb	r3, [r7, #3]
 800f158:	f003 020f 	and.w	r2, r3, #15
 800f15c:	4613      	mov	r3, r2
 800f15e:	00db      	lsls	r3, r3, #3
 800f160:	4413      	add	r3, r2
 800f162:	009b      	lsls	r3, r3, #2
 800f164:	3338      	adds	r3, #56	; 0x38
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	4413      	add	r3, r2
 800f16a:	3304      	adds	r3, #4
 800f16c:	60fb      	str	r3, [r7, #12]
 800f16e:	e00c      	b.n	800f18a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f170:	78fb      	ldrb	r3, [r7, #3]
 800f172:	f003 020f 	and.w	r2, r3, #15
 800f176:	4613      	mov	r3, r2
 800f178:	00db      	lsls	r3, r3, #3
 800f17a:	4413      	add	r3, r2
 800f17c:	009b      	lsls	r3, r3, #2
 800f17e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f182:	687a      	ldr	r2, [r7, #4]
 800f184:	4413      	add	r3, r2
 800f186:	3304      	adds	r3, #4
 800f188:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	68f9      	ldr	r1, [r7, #12]
 800f190:	4618      	mov	r0, r3
 800f192:	f006 ff93 	bl	80160bc <USB_EPStopXfer>
 800f196:	4603      	mov	r3, r0
 800f198:	72fb      	strb	r3, [r7, #11]

  return ret;
 800f19a:	7afb      	ldrb	r3, [r7, #11]
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3710      	adds	r7, #16
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b088      	sub	sp, #32
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800f1b8:	683a      	ldr	r2, [r7, #0]
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	00db      	lsls	r3, r3, #3
 800f1be:	4413      	add	r3, r2
 800f1c0:	009b      	lsls	r3, r3, #2
 800f1c2:	3338      	adds	r3, #56	; 0x38
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	4413      	add	r3, r2
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	6a1a      	ldr	r2, [r3, #32]
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	699b      	ldr	r3, [r3, #24]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d901      	bls.n	800f1dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800f1d8:	2301      	movs	r3, #1
 800f1da:	e067      	b.n	800f2ac <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	699a      	ldr	r2, [r3, #24]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	6a1b      	ldr	r3, [r3, #32]
 800f1e4:	1ad3      	subs	r3, r2, r3
 800f1e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	69fa      	ldr	r2, [r7, #28]
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d902      	bls.n	800f1f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	68db      	ldr	r3, [r3, #12]
 800f1f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	3303      	adds	r3, #3
 800f1fc:	089b      	lsrs	r3, r3, #2
 800f1fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f200:	e026      	b.n	800f250 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	699a      	ldr	r2, [r3, #24]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6a1b      	ldr	r3, [r3, #32]
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	68db      	ldr	r3, [r3, #12]
 800f212:	69fa      	ldr	r2, [r7, #28]
 800f214:	429a      	cmp	r2, r3
 800f216:	d902      	bls.n	800f21e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800f21e:	69fb      	ldr	r3, [r7, #28]
 800f220:	3303      	adds	r3, #3
 800f222:	089b      	lsrs	r3, r3, #2
 800f224:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	6919      	ldr	r1, [r3, #16]
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	b2da      	uxtb	r2, r3
 800f22e:	69fb      	ldr	r3, [r7, #28]
 800f230:	b29b      	uxth	r3, r3
 800f232:	6978      	ldr	r0, [r7, #20]
 800f234:	f006 ffec 	bl	8016210 <USB_WritePacket>

    ep->xfer_buff  += len;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	691a      	ldr	r2, [r3, #16]
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	441a      	add	r2, r3
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	6a1a      	ldr	r2, [r3, #32]
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	441a      	add	r2, r3
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	015a      	lsls	r2, r3, #5
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	4413      	add	r3, r2
 800f258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f25c:	699b      	ldr	r3, [r3, #24]
 800f25e:	b29b      	uxth	r3, r3
 800f260:	69ba      	ldr	r2, [r7, #24]
 800f262:	429a      	cmp	r2, r3
 800f264:	d809      	bhi.n	800f27a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6a1a      	ldr	r2, [r3, #32]
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f26e:	429a      	cmp	r2, r3
 800f270:	d203      	bcs.n	800f27a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	699b      	ldr	r3, [r3, #24]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1c3      	bne.n	800f202 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	699a      	ldr	r2, [r3, #24]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6a1b      	ldr	r3, [r3, #32]
 800f282:	429a      	cmp	r2, r3
 800f284:	d811      	bhi.n	800f2aa <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	f003 030f 	and.w	r3, r3, #15
 800f28c:	2201      	movs	r2, #1
 800f28e:	fa02 f303 	lsl.w	r3, r2, r3
 800f292:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f29a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	43db      	mvns	r3, r3
 800f2a0:	6939      	ldr	r1, [r7, #16]
 800f2a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f2a6:	4013      	ands	r3, r2
 800f2a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800f2aa:	2300      	movs	r3, #0
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3720      	adds	r7, #32
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b086      	sub	sp, #24
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	333c      	adds	r3, #60	; 0x3c
 800f2cc:	3304      	adds	r3, #4
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	015a      	lsls	r2, r3, #5
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	4413      	add	r3, r2
 800f2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2de:	689b      	ldr	r3, [r3, #8]
 800f2e0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	4a19      	ldr	r2, [pc, #100]	; (800f34c <PCD_EP_OutXfrComplete_int+0x98>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d124      	bne.n	800f334 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d00a      	beq.n	800f30a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	015a      	lsls	r2, r3, #5
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f300:	461a      	mov	r2, r3
 800f302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f306:	6093      	str	r3, [r2, #8]
 800f308:	e01a      	b.n	800f340 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	f003 0320 	and.w	r3, r3, #32
 800f310:	2b00      	cmp	r3, #0
 800f312:	d008      	beq.n	800f326 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	015a      	lsls	r2, r3, #5
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	4413      	add	r3, r2
 800f31c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f320:	461a      	mov	r2, r3
 800f322:	2320      	movs	r3, #32
 800f324:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	4619      	mov	r1, r3
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f009 f971 	bl	8018614 <HAL_PCD_DataOutStageCallback>
 800f332:	e005      	b.n	800f340 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	b2db      	uxtb	r3, r3
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f009 f96a 	bl	8018614 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800f340:	2300      	movs	r3, #0
}
 800f342:	4618      	mov	r0, r3
 800f344:	3718      	adds	r7, #24
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	4f54310a 	.word	0x4f54310a

0800f350 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b086      	sub	sp, #24
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	333c      	adds	r3, #60	; 0x3c
 800f368:	3304      	adds	r3, #4
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	015a      	lsls	r2, r3, #5
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	4413      	add	r3, r2
 800f376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	4a0c      	ldr	r2, [pc, #48]	; (800f3b4 <PCD_EP_OutSetupPacket_int+0x64>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d90e      	bls.n	800f3a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d009      	beq.n	800f3a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	015a      	lsls	r2, r3, #5
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	4413      	add	r3, r2
 800f398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f39c:	461a      	mov	r2, r3
 800f39e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f009 f923 	bl	80185f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800f3aa:	2300      	movs	r3, #0
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3718      	adds	r7, #24
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	4f54300a 	.word	0x4f54300a

0800f3b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b085      	sub	sp, #20
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	70fb      	strb	r3, [r7, #3]
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800f3d0:	78fb      	ldrb	r3, [r7, #3]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d107      	bne.n	800f3e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800f3d6:	883b      	ldrh	r3, [r7, #0]
 800f3d8:	0419      	lsls	r1, r3, #16
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	68ba      	ldr	r2, [r7, #8]
 800f3e0:	430a      	orrs	r2, r1
 800f3e2:	629a      	str	r2, [r3, #40]	; 0x28
 800f3e4:	e028      	b.n	800f438 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ec:	0c1b      	lsrs	r3, r3, #16
 800f3ee:	68ba      	ldr	r2, [r7, #8]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	73fb      	strb	r3, [r7, #15]
 800f3f8:	e00d      	b.n	800f416 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681a      	ldr	r2, [r3, #0]
 800f3fe:	7bfb      	ldrb	r3, [r7, #15]
 800f400:	3340      	adds	r3, #64	; 0x40
 800f402:	009b      	lsls	r3, r3, #2
 800f404:	4413      	add	r3, r2
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	0c1b      	lsrs	r3, r3, #16
 800f40a:	68ba      	ldr	r2, [r7, #8]
 800f40c:	4413      	add	r3, r2
 800f40e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f410:	7bfb      	ldrb	r3, [r7, #15]
 800f412:	3301      	adds	r3, #1
 800f414:	73fb      	strb	r3, [r7, #15]
 800f416:	7bfa      	ldrb	r2, [r7, #15]
 800f418:	78fb      	ldrb	r3, [r7, #3]
 800f41a:	3b01      	subs	r3, #1
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d3ec      	bcc.n	800f3fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800f420:	883b      	ldrh	r3, [r7, #0]
 800f422:	0418      	lsls	r0, r3, #16
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6819      	ldr	r1, [r3, #0]
 800f428:	78fb      	ldrb	r3, [r7, #3]
 800f42a:	3b01      	subs	r3, #1
 800f42c:	68ba      	ldr	r2, [r7, #8]
 800f42e:	4302      	orrs	r2, r0
 800f430:	3340      	adds	r3, #64	; 0x40
 800f432:	009b      	lsls	r3, r3, #2
 800f434:	440b      	add	r3, r1
 800f436:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f438:	2300      	movs	r3, #0
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3714      	adds	r7, #20
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr

0800f446 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800f446:	b480      	push	{r7}
 800f448:	b083      	sub	sp, #12
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
 800f44e:	460b      	mov	r3, r1
 800f450:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	887a      	ldrh	r2, [r7, #2]
 800f458:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800f45a:	2300      	movs	r3, #0
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	370c      	adds	r7, #12
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr

0800f468 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800f468:	b480      	push	{r7}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2201      	movs	r2, #1
 800f47a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2200      	movs	r2, #0
 800f482:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	699b      	ldr	r3, [r3, #24]
 800f48a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f49a:	f043 0303 	orr.w	r3, r3, #3
 800f49e:	68fa      	ldr	r2, [r7, #12]
 800f4a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800f4a2:	2300      	movs	r3, #0
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3714      	adds	r7, #20
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr

0800f4b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f4b4:	4b05      	ldr	r3, [pc, #20]	; (800f4cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	4a04      	ldr	r2, [pc, #16]	; (800f4cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800f4ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f4be:	6013      	str	r3, [r2, #0]
}
 800f4c0:	bf00      	nop
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr
 800f4ca:	bf00      	nop
 800f4cc:	40007000 	.word	0x40007000

0800f4d0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	460b      	mov	r3, r1
 800f4da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d10c      	bne.n	800f4fc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800f4e2:	4b13      	ldr	r3, [pc, #76]	; (800f530 <HAL_PWR_EnterSLEEPMode+0x60>)
 800f4e4:	695b      	ldr	r3, [r3, #20]
 800f4e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f4ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4ee:	d10e      	bne.n	800f50e <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800f4f0:	f000 f8b6 	bl	800f660 <HAL_PWREx_DisableLowPowerRunMode>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d009      	beq.n	800f50e <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800f4fa:	e016      	b.n	800f52a <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800f4fc:	4b0c      	ldr	r3, [pc, #48]	; (800f530 <HAL_PWR_EnterSLEEPMode+0x60>)
 800f4fe:	695b      	ldr	r3, [r3, #20]
 800f500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f508:	d001      	beq.n	800f50e <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800f50a:	f000 f899 	bl	800f640 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800f50e:	4b09      	ldr	r3, [pc, #36]	; (800f534 <HAL_PWR_EnterSLEEPMode+0x64>)
 800f510:	691b      	ldr	r3, [r3, #16]
 800f512:	4a08      	ldr	r2, [pc, #32]	; (800f534 <HAL_PWR_EnterSLEEPMode+0x64>)
 800f514:	f023 0304 	bic.w	r3, r3, #4
 800f518:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800f51a:	78fb      	ldrb	r3, [r7, #3]
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	d101      	bne.n	800f524 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800f520:	bf30      	wfi
 800f522:	e002      	b.n	800f52a <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800f524:	bf40      	sev
    __WFE();
 800f526:	bf20      	wfe
    __WFE();
 800f528:	bf20      	wfe
  }

}
 800f52a:	3708      	adds	r7, #8
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	40007000 	.word	0x40007000
 800f534:	e000ed00 	.word	0xe000ed00

0800f538 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800f538:	b480      	push	{r7}
 800f53a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800f53c:	4b04      	ldr	r3, [pc, #16]	; (800f550 <HAL_PWREx_GetVoltageRange+0x18>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800f544:	4618      	mov	r0, r3
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop
 800f550:	40007000 	.word	0x40007000

0800f554 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f562:	d130      	bne.n	800f5c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800f564:	4b23      	ldr	r3, [pc, #140]	; (800f5f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f56c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f570:	d038      	beq.n	800f5e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800f572:	4b20      	ldr	r3, [pc, #128]	; (800f5f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f57a:	4a1e      	ldr	r2, [pc, #120]	; (800f5f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f57c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f580:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800f582:	4b1d      	ldr	r3, [pc, #116]	; (800f5f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	2232      	movs	r2, #50	; 0x32
 800f588:	fb02 f303 	mul.w	r3, r2, r3
 800f58c:	4a1b      	ldr	r2, [pc, #108]	; (800f5fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800f58e:	fba2 2303 	umull	r2, r3, r2, r3
 800f592:	0c9b      	lsrs	r3, r3, #18
 800f594:	3301      	adds	r3, #1
 800f596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f598:	e002      	b.n	800f5a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	3b01      	subs	r3, #1
 800f59e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f5a0:	4b14      	ldr	r3, [pc, #80]	; (800f5f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5a2:	695b      	ldr	r3, [r3, #20]
 800f5a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5ac:	d102      	bne.n	800f5b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d1f2      	bne.n	800f59a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800f5b4:	4b0f      	ldr	r3, [pc, #60]	; (800f5f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5b6:	695b      	ldr	r3, [r3, #20]
 800f5b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5c0:	d110      	bne.n	800f5e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800f5c2:	2303      	movs	r3, #3
 800f5c4:	e00f      	b.n	800f5e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800f5c6:	4b0b      	ldr	r3, [pc, #44]	; (800f5f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f5ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5d2:	d007      	beq.n	800f5e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800f5d4:	4b07      	ldr	r3, [pc, #28]	; (800f5f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f5dc:	4a05      	ldr	r2, [pc, #20]	; (800f5f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f5e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800f5e4:	2300      	movs	r3, #0
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3714      	adds	r7, #20
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr
 800f5f2:	bf00      	nop
 800f5f4:	40007000 	.word	0x40007000
 800f5f8:	20000198 	.word	0x20000198
 800f5fc:	431bde83 	.word	0x431bde83

0800f600 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800f600:	b480      	push	{r7}
 800f602:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800f604:	4b05      	ldr	r3, [pc, #20]	; (800f61c <HAL_PWREx_EnableVddUSB+0x1c>)
 800f606:	685b      	ldr	r3, [r3, #4]
 800f608:	4a04      	ldr	r2, [pc, #16]	; (800f61c <HAL_PWREx_EnableVddUSB+0x1c>)
 800f60a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f60e:	6053      	str	r3, [r2, #4]
}
 800f610:	bf00      	nop
 800f612:	46bd      	mov	sp, r7
 800f614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f618:	4770      	bx	lr
 800f61a:	bf00      	nop
 800f61c:	40007000 	.word	0x40007000

0800f620 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800f620:	b480      	push	{r7}
 800f622:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800f624:	4b05      	ldr	r3, [pc, #20]	; (800f63c <HAL_PWREx_EnableVddIO2+0x1c>)
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	4a04      	ldr	r2, [pc, #16]	; (800f63c <HAL_PWREx_EnableVddIO2+0x1c>)
 800f62a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f62e:	6053      	str	r3, [r2, #4]
}
 800f630:	bf00      	nop
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr
 800f63a:	bf00      	nop
 800f63c:	40007000 	.word	0x40007000

0800f640 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800f640:	b480      	push	{r7}
 800f642:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800f644:	4b05      	ldr	r3, [pc, #20]	; (800f65c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4a04      	ldr	r2, [pc, #16]	; (800f65c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800f64a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f64e:	6013      	str	r3, [r2, #0]
}
 800f650:	bf00      	nop
 800f652:	46bd      	mov	sp, r7
 800f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f658:	4770      	bx	lr
 800f65a:	bf00      	nop
 800f65c:	40007000 	.word	0x40007000

0800f660 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800f666:	4b17      	ldr	r3, [pc, #92]	; (800f6c4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4a16      	ldr	r2, [pc, #88]	; (800f6c4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f66c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f670:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800f672:	4b15      	ldr	r3, [pc, #84]	; (800f6c8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	2232      	movs	r2, #50	; 0x32
 800f678:	fb02 f303 	mul.w	r3, r2, r3
 800f67c:	4a13      	ldr	r2, [pc, #76]	; (800f6cc <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800f67e:	fba2 2303 	umull	r2, r3, r2, r3
 800f682:	0c9b      	lsrs	r3, r3, #18
 800f684:	3301      	adds	r3, #1
 800f686:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800f688:	e002      	b.n	800f690 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	3b01      	subs	r3, #1
 800f68e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800f690:	4b0c      	ldr	r3, [pc, #48]	; (800f6c4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f692:	695b      	ldr	r3, [r3, #20]
 800f694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f69c:	d102      	bne.n	800f6a4 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d1f2      	bne.n	800f68a <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800f6a4:	4b07      	ldr	r3, [pc, #28]	; (800f6c4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f6a6:	695b      	ldr	r3, [r3, #20]
 800f6a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f6ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6b0:	d101      	bne.n	800f6b6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800f6b2:	2303      	movs	r3, #3
 800f6b4:	e000      	b.n	800f6b8 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800f6b6:	2300      	movs	r3, #0
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	370c      	adds	r7, #12
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr
 800f6c4:	40007000 	.word	0x40007000
 800f6c8:	20000198 	.word	0x20000198
 800f6cc:	431bde83 	.word	0x431bde83

0800f6d0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b086      	sub	sp, #24
 800f6d4:	af02      	add	r7, sp, #8
 800f6d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f6d8:	f7fb fdd2 	bl	800b280 <HAL_GetTick>
 800f6dc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d101      	bne.n	800f6e8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	e069      	b.n	800f7bc <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d10b      	bne.n	800f70c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f7f2 fc9f 	bl	8002040 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800f702:	f241 3188 	movw	r1, #5000	; 0x1388
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f000 f85e 	bl	800f7c8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	689b      	ldr	r3, [r3, #8]
 800f71a:	3b01      	subs	r3, #1
 800f71c:	021a      	lsls	r2, r3, #8
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	430a      	orrs	r2, r1
 800f724:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f72a:	9300      	str	r3, [sp, #0]
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2200      	movs	r2, #0
 800f730:	2120      	movs	r1, #32
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 f856 	bl	800f7e4 <QSPI_WaitFlagStateUntilTimeout>
 800f738:	4603      	mov	r3, r0
 800f73a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800f73c:	7afb      	ldrb	r3, [r7, #11]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d137      	bne.n	800f7b2 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f74c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800f750:	687a      	ldr	r2, [r7, #4]
 800f752:	6852      	ldr	r2, [r2, #4]
 800f754:	0611      	lsls	r1, r2, #24
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	68d2      	ldr	r2, [r2, #12]
 800f75a:	4311      	orrs	r1, r2
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	69d2      	ldr	r2, [r2, #28]
 800f760:	4311      	orrs	r1, r2
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	6a12      	ldr	r2, [r2, #32]
 800f766:	4311      	orrs	r1, r2
 800f768:	687a      	ldr	r2, [r7, #4]
 800f76a:	6812      	ldr	r2, [r2, #0]
 800f76c:	430b      	orrs	r3, r1
 800f76e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	685a      	ldr	r2, [r3, #4]
 800f776:	4b13      	ldr	r3, [pc, #76]	; (800f7c4 <HAL_QSPI_Init+0xf4>)
 800f778:	4013      	ands	r3, r2
 800f77a:	687a      	ldr	r2, [r7, #4]
 800f77c:	6912      	ldr	r2, [r2, #16]
 800f77e:	0411      	lsls	r1, r2, #16
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	6952      	ldr	r2, [r2, #20]
 800f784:	4311      	orrs	r1, r2
 800f786:	687a      	ldr	r2, [r7, #4]
 800f788:	6992      	ldr	r2, [r2, #24]
 800f78a:	4311      	orrs	r1, r2
 800f78c:	687a      	ldr	r2, [r7, #4]
 800f78e:	6812      	ldr	r2, [r2, #0]
 800f790:	430b      	orrs	r3, r1
 800f792:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f042 0201 	orr.w	r2, r2, #1
 800f7a2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800f7ba:	7afb      	ldrb	r3, [r7, #11]
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3710      	adds	r7, #16
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}
 800f7c4:	ffe0f8fe 	.word	0xffe0f8fe

0800f7c8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	683a      	ldr	r2, [r7, #0]
 800f7d6:	649a      	str	r2, [r3, #72]	; 0x48
}
 800f7d8:	bf00      	nop
 800f7da:	370c      	adds	r7, #12
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e2:	4770      	bx	lr

0800f7e4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b084      	sub	sp, #16
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60f8      	str	r0, [r7, #12]
 800f7ec:	60b9      	str	r1, [r7, #8]
 800f7ee:	603b      	str	r3, [r7, #0]
 800f7f0:	4613      	mov	r3, r2
 800f7f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f7f4:	e01a      	b.n	800f82c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f7f6:	69bb      	ldr	r3, [r7, #24]
 800f7f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f7fc:	d016      	beq.n	800f82c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f7fe:	f7fb fd3f 	bl	800b280 <HAL_GetTick>
 800f802:	4602      	mov	r2, r0
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	1ad3      	subs	r3, r2, r3
 800f808:	69ba      	ldr	r2, [r7, #24]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d302      	bcc.n	800f814 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800f80e:	69bb      	ldr	r3, [r7, #24]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d10b      	bne.n	800f82c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2204      	movs	r2, #4
 800f818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f820:	f043 0201 	orr.w	r2, r3, #1
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800f828:	2301      	movs	r3, #1
 800f82a:	e00e      	b.n	800f84a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	689a      	ldr	r2, [r3, #8]
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	4013      	ands	r3, r2
 800f836:	2b00      	cmp	r3, #0
 800f838:	bf14      	ite	ne
 800f83a:	2301      	movne	r3, #1
 800f83c:	2300      	moveq	r3, #0
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	461a      	mov	r2, r3
 800f842:	79fb      	ldrb	r3, [r7, #7]
 800f844:	429a      	cmp	r2, r3
 800f846:	d1d6      	bne.n	800f7f6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f848:	2300      	movs	r3, #0
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3710      	adds	r7, #16
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
	...

0800f854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b088      	sub	sp, #32
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d102      	bne.n	800f868 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f862:	2301      	movs	r3, #1
 800f864:	f000 bc08 	b.w	8010078 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f868:	4b96      	ldr	r3, [pc, #600]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	f003 030c 	and.w	r3, r3, #12
 800f870:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f872:	4b94      	ldr	r3, [pc, #592]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	f003 0303 	and.w	r3, r3, #3
 800f87a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f003 0310 	and.w	r3, r3, #16
 800f884:	2b00      	cmp	r3, #0
 800f886:	f000 80e4 	beq.w	800fa52 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f88a:	69bb      	ldr	r3, [r7, #24]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d007      	beq.n	800f8a0 <HAL_RCC_OscConfig+0x4c>
 800f890:	69bb      	ldr	r3, [r7, #24]
 800f892:	2b0c      	cmp	r3, #12
 800f894:	f040 808b 	bne.w	800f9ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	f040 8087 	bne.w	800f9ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f8a0:	4b88      	ldr	r3, [pc, #544]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f003 0302 	and.w	r3, r3, #2
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d005      	beq.n	800f8b8 <HAL_RCC_OscConfig+0x64>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	699b      	ldr	r3, [r3, #24]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d101      	bne.n	800f8b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e3df      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6a1a      	ldr	r2, [r3, #32]
 800f8bc:	4b81      	ldr	r3, [pc, #516]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	f003 0308 	and.w	r3, r3, #8
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d004      	beq.n	800f8d2 <HAL_RCC_OscConfig+0x7e>
 800f8c8:	4b7e      	ldr	r3, [pc, #504]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f8d0:	e005      	b.n	800f8de <HAL_RCC_OscConfig+0x8a>
 800f8d2:	4b7c      	ldr	r3, [pc, #496]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f8d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f8d8:	091b      	lsrs	r3, r3, #4
 800f8da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d223      	bcs.n	800f92a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6a1b      	ldr	r3, [r3, #32]
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f000 fd92 	bl	8010410 <RCC_SetFlashLatencyFromMSIRange>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d001      	beq.n	800f8f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	e3c0      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f8f6:	4b73      	ldr	r3, [pc, #460]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	4a72      	ldr	r2, [pc, #456]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f8fc:	f043 0308 	orr.w	r3, r3, #8
 800f900:	6013      	str	r3, [r2, #0]
 800f902:	4b70      	ldr	r3, [pc, #448]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6a1b      	ldr	r3, [r3, #32]
 800f90e:	496d      	ldr	r1, [pc, #436]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f910:	4313      	orrs	r3, r2
 800f912:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f914:	4b6b      	ldr	r3, [pc, #428]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f916:	685b      	ldr	r3, [r3, #4]
 800f918:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	69db      	ldr	r3, [r3, #28]
 800f920:	021b      	lsls	r3, r3, #8
 800f922:	4968      	ldr	r1, [pc, #416]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f924:	4313      	orrs	r3, r2
 800f926:	604b      	str	r3, [r1, #4]
 800f928:	e025      	b.n	800f976 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f92a:	4b66      	ldr	r3, [pc, #408]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	4a65      	ldr	r2, [pc, #404]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f930:	f043 0308 	orr.w	r3, r3, #8
 800f934:	6013      	str	r3, [r2, #0]
 800f936:	4b63      	ldr	r3, [pc, #396]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6a1b      	ldr	r3, [r3, #32]
 800f942:	4960      	ldr	r1, [pc, #384]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f944:	4313      	orrs	r3, r2
 800f946:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f948:	4b5e      	ldr	r3, [pc, #376]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	69db      	ldr	r3, [r3, #28]
 800f954:	021b      	lsls	r3, r3, #8
 800f956:	495b      	ldr	r1, [pc, #364]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f958:	4313      	orrs	r3, r2
 800f95a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f95c:	69bb      	ldr	r3, [r7, #24]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d109      	bne.n	800f976 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6a1b      	ldr	r3, [r3, #32]
 800f966:	4618      	mov	r0, r3
 800f968:	f000 fd52 	bl	8010410 <RCC_SetFlashLatencyFromMSIRange>
 800f96c:	4603      	mov	r3, r0
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d001      	beq.n	800f976 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800f972:	2301      	movs	r3, #1
 800f974:	e380      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f976:	f000 fc87 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 800f97a:	4602      	mov	r2, r0
 800f97c:	4b51      	ldr	r3, [pc, #324]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f97e:	689b      	ldr	r3, [r3, #8]
 800f980:	091b      	lsrs	r3, r3, #4
 800f982:	f003 030f 	and.w	r3, r3, #15
 800f986:	4950      	ldr	r1, [pc, #320]	; (800fac8 <HAL_RCC_OscConfig+0x274>)
 800f988:	5ccb      	ldrb	r3, [r1, r3]
 800f98a:	f003 031f 	and.w	r3, r3, #31
 800f98e:	fa22 f303 	lsr.w	r3, r2, r3
 800f992:	4a4e      	ldr	r2, [pc, #312]	; (800facc <HAL_RCC_OscConfig+0x278>)
 800f994:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800f996:	4b4e      	ldr	r3, [pc, #312]	; (800fad0 <HAL_RCC_OscConfig+0x27c>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7fb fc20 	bl	800b1e0 <HAL_InitTick>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800f9a4:	7bfb      	ldrb	r3, [r7, #15]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d052      	beq.n	800fa50 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800f9aa:	7bfb      	ldrb	r3, [r7, #15]
 800f9ac:	e364      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	699b      	ldr	r3, [r3, #24]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d032      	beq.n	800fa1c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f9b6:	4b43      	ldr	r3, [pc, #268]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	4a42      	ldr	r2, [pc, #264]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f9bc:	f043 0301 	orr.w	r3, r3, #1
 800f9c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f9c2:	f7fb fc5d 	bl	800b280 <HAL_GetTick>
 800f9c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f9c8:	e008      	b.n	800f9dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f9ca:	f7fb fc59 	bl	800b280 <HAL_GetTick>
 800f9ce:	4602      	mov	r2, r0
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	1ad3      	subs	r3, r2, r3
 800f9d4:	2b02      	cmp	r3, #2
 800f9d6:	d901      	bls.n	800f9dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800f9d8:	2303      	movs	r3, #3
 800f9da:	e34d      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f9dc:	4b39      	ldr	r3, [pc, #228]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	f003 0302 	and.w	r3, r3, #2
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d0f0      	beq.n	800f9ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f9e8:	4b36      	ldr	r3, [pc, #216]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4a35      	ldr	r2, [pc, #212]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f9ee:	f043 0308 	orr.w	r3, r3, #8
 800f9f2:	6013      	str	r3, [r2, #0]
 800f9f4:	4b33      	ldr	r3, [pc, #204]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6a1b      	ldr	r3, [r3, #32]
 800fa00:	4930      	ldr	r1, [pc, #192]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800fa02:	4313      	orrs	r3, r2
 800fa04:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fa06:	4b2f      	ldr	r3, [pc, #188]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800fa08:	685b      	ldr	r3, [r3, #4]
 800fa0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	69db      	ldr	r3, [r3, #28]
 800fa12:	021b      	lsls	r3, r3, #8
 800fa14:	492b      	ldr	r1, [pc, #172]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800fa16:	4313      	orrs	r3, r2
 800fa18:	604b      	str	r3, [r1, #4]
 800fa1a:	e01a      	b.n	800fa52 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fa1c:	4b29      	ldr	r3, [pc, #164]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a28      	ldr	r2, [pc, #160]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800fa22:	f023 0301 	bic.w	r3, r3, #1
 800fa26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fa28:	f7fb fc2a 	bl	800b280 <HAL_GetTick>
 800fa2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800fa2e:	e008      	b.n	800fa42 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fa30:	f7fb fc26 	bl	800b280 <HAL_GetTick>
 800fa34:	4602      	mov	r2, r0
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	1ad3      	subs	r3, r2, r3
 800fa3a:	2b02      	cmp	r3, #2
 800fa3c:	d901      	bls.n	800fa42 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800fa3e:	2303      	movs	r3, #3
 800fa40:	e31a      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800fa42:	4b20      	ldr	r3, [pc, #128]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	f003 0302 	and.w	r3, r3, #2
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d1f0      	bne.n	800fa30 <HAL_RCC_OscConfig+0x1dc>
 800fa4e:	e000      	b.n	800fa52 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800fa50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f003 0301 	and.w	r3, r3, #1
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d073      	beq.n	800fb46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800fa5e:	69bb      	ldr	r3, [r7, #24]
 800fa60:	2b08      	cmp	r3, #8
 800fa62:	d005      	beq.n	800fa70 <HAL_RCC_OscConfig+0x21c>
 800fa64:	69bb      	ldr	r3, [r7, #24]
 800fa66:	2b0c      	cmp	r3, #12
 800fa68:	d10e      	bne.n	800fa88 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	2b03      	cmp	r3, #3
 800fa6e:	d10b      	bne.n	800fa88 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fa70:	4b14      	ldr	r3, [pc, #80]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d063      	beq.n	800fb44 <HAL_RCC_OscConfig+0x2f0>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d15f      	bne.n	800fb44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800fa84:	2301      	movs	r3, #1
 800fa86:	e2f7      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa90:	d106      	bne.n	800faa0 <HAL_RCC_OscConfig+0x24c>
 800fa92:	4b0c      	ldr	r3, [pc, #48]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	4a0b      	ldr	r2, [pc, #44]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800fa98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fa9c:	6013      	str	r3, [r2, #0]
 800fa9e:	e025      	b.n	800faec <HAL_RCC_OscConfig+0x298>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800faa8:	d114      	bne.n	800fad4 <HAL_RCC_OscConfig+0x280>
 800faaa:	4b06      	ldr	r3, [pc, #24]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	4a05      	ldr	r2, [pc, #20]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800fab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fab4:	6013      	str	r3, [r2, #0]
 800fab6:	4b03      	ldr	r3, [pc, #12]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	4a02      	ldr	r2, [pc, #8]	; (800fac4 <HAL_RCC_OscConfig+0x270>)
 800fabc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fac0:	6013      	str	r3, [r2, #0]
 800fac2:	e013      	b.n	800faec <HAL_RCC_OscConfig+0x298>
 800fac4:	40021000 	.word	0x40021000
 800fac8:	08019f4c 	.word	0x08019f4c
 800facc:	20000198 	.word	0x20000198
 800fad0:	20000554 	.word	0x20000554
 800fad4:	4ba0      	ldr	r3, [pc, #640]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4a9f      	ldr	r2, [pc, #636]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fade:	6013      	str	r3, [r2, #0]
 800fae0:	4b9d      	ldr	r3, [pc, #628]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	4a9c      	ldr	r2, [pc, #624]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800faea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d013      	beq.n	800fb1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800faf4:	f7fb fbc4 	bl	800b280 <HAL_GetTick>
 800faf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fafa:	e008      	b.n	800fb0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fafc:	f7fb fbc0 	bl	800b280 <HAL_GetTick>
 800fb00:	4602      	mov	r2, r0
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	1ad3      	subs	r3, r2, r3
 800fb06:	2b64      	cmp	r3, #100	; 0x64
 800fb08:	d901      	bls.n	800fb0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800fb0a:	2303      	movs	r3, #3
 800fb0c:	e2b4      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fb0e:	4b92      	ldr	r3, [pc, #584]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d0f0      	beq.n	800fafc <HAL_RCC_OscConfig+0x2a8>
 800fb1a:	e014      	b.n	800fb46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb1c:	f7fb fbb0 	bl	800b280 <HAL_GetTick>
 800fb20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fb22:	e008      	b.n	800fb36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fb24:	f7fb fbac 	bl	800b280 <HAL_GetTick>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	1ad3      	subs	r3, r2, r3
 800fb2e:	2b64      	cmp	r3, #100	; 0x64
 800fb30:	d901      	bls.n	800fb36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800fb32:	2303      	movs	r3, #3
 800fb34:	e2a0      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fb36:	4b88      	ldr	r3, [pc, #544]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d1f0      	bne.n	800fb24 <HAL_RCC_OscConfig+0x2d0>
 800fb42:	e000      	b.n	800fb46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fb44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f003 0302 	and.w	r3, r3, #2
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d060      	beq.n	800fc14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800fb52:	69bb      	ldr	r3, [r7, #24]
 800fb54:	2b04      	cmp	r3, #4
 800fb56:	d005      	beq.n	800fb64 <HAL_RCC_OscConfig+0x310>
 800fb58:	69bb      	ldr	r3, [r7, #24]
 800fb5a:	2b0c      	cmp	r3, #12
 800fb5c:	d119      	bne.n	800fb92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	2b02      	cmp	r3, #2
 800fb62:	d116      	bne.n	800fb92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fb64:	4b7c      	ldr	r3, [pc, #496]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d005      	beq.n	800fb7c <HAL_RCC_OscConfig+0x328>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	68db      	ldr	r3, [r3, #12]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d101      	bne.n	800fb7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800fb78:	2301      	movs	r3, #1
 800fb7a:	e27d      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fb7c:	4b76      	ldr	r3, [pc, #472]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	691b      	ldr	r3, [r3, #16]
 800fb88:	061b      	lsls	r3, r3, #24
 800fb8a:	4973      	ldr	r1, [pc, #460]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fb90:	e040      	b.n	800fc14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	68db      	ldr	r3, [r3, #12]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d023      	beq.n	800fbe2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fb9a:	4b6f      	ldr	r3, [pc, #444]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	4a6e      	ldr	r2, [pc, #440]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fba6:	f7fb fb6b 	bl	800b280 <HAL_GetTick>
 800fbaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fbac:	e008      	b.n	800fbc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fbae:	f7fb fb67 	bl	800b280 <HAL_GetTick>
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	1ad3      	subs	r3, r2, r3
 800fbb8:	2b02      	cmp	r3, #2
 800fbba:	d901      	bls.n	800fbc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800fbbc:	2303      	movs	r3, #3
 800fbbe:	e25b      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fbc0:	4b65      	ldr	r3, [pc, #404]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d0f0      	beq.n	800fbae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fbcc:	4b62      	ldr	r3, [pc, #392]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	691b      	ldr	r3, [r3, #16]
 800fbd8:	061b      	lsls	r3, r3, #24
 800fbda:	495f      	ldr	r1, [pc, #380]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fbdc:	4313      	orrs	r3, r2
 800fbde:	604b      	str	r3, [r1, #4]
 800fbe0:	e018      	b.n	800fc14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fbe2:	4b5d      	ldr	r3, [pc, #372]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	4a5c      	ldr	r2, [pc, #368]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fbe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fbec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fbee:	f7fb fb47 	bl	800b280 <HAL_GetTick>
 800fbf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fbf4:	e008      	b.n	800fc08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fbf6:	f7fb fb43 	bl	800b280 <HAL_GetTick>
 800fbfa:	4602      	mov	r2, r0
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	1ad3      	subs	r3, r2, r3
 800fc00:	2b02      	cmp	r3, #2
 800fc02:	d901      	bls.n	800fc08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800fc04:	2303      	movs	r3, #3
 800fc06:	e237      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fc08:	4b53      	ldr	r3, [pc, #332]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d1f0      	bne.n	800fbf6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f003 0308 	and.w	r3, r3, #8
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d03c      	beq.n	800fc9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	695b      	ldr	r3, [r3, #20]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d01c      	beq.n	800fc62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fc28:	4b4b      	ldr	r3, [pc, #300]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fc2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fc2e:	4a4a      	ldr	r2, [pc, #296]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fc30:	f043 0301 	orr.w	r3, r3, #1
 800fc34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fc38:	f7fb fb22 	bl	800b280 <HAL_GetTick>
 800fc3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fc3e:	e008      	b.n	800fc52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fc40:	f7fb fb1e 	bl	800b280 <HAL_GetTick>
 800fc44:	4602      	mov	r2, r0
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	1ad3      	subs	r3, r2, r3
 800fc4a:	2b02      	cmp	r3, #2
 800fc4c:	d901      	bls.n	800fc52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800fc4e:	2303      	movs	r3, #3
 800fc50:	e212      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fc52:	4b41      	ldr	r3, [pc, #260]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fc54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fc58:	f003 0302 	and.w	r3, r3, #2
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d0ef      	beq.n	800fc40 <HAL_RCC_OscConfig+0x3ec>
 800fc60:	e01b      	b.n	800fc9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fc62:	4b3d      	ldr	r3, [pc, #244]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fc64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fc68:	4a3b      	ldr	r2, [pc, #236]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fc6a:	f023 0301 	bic.w	r3, r3, #1
 800fc6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fc72:	f7fb fb05 	bl	800b280 <HAL_GetTick>
 800fc76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fc78:	e008      	b.n	800fc8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fc7a:	f7fb fb01 	bl	800b280 <HAL_GetTick>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	1ad3      	subs	r3, r2, r3
 800fc84:	2b02      	cmp	r3, #2
 800fc86:	d901      	bls.n	800fc8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800fc88:	2303      	movs	r3, #3
 800fc8a:	e1f5      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fc8c:	4b32      	ldr	r3, [pc, #200]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fc8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fc92:	f003 0302 	and.w	r3, r3, #2
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d1ef      	bne.n	800fc7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	f003 0304 	and.w	r3, r3, #4
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	f000 80a6 	beq.w	800fdf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800fcac:	4b2a      	ldr	r3, [pc, #168]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fcae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d10d      	bne.n	800fcd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fcb8:	4b27      	ldr	r3, [pc, #156]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fcba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcbc:	4a26      	ldr	r2, [pc, #152]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fcbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fcc2:	6593      	str	r3, [r2, #88]	; 0x58
 800fcc4:	4b24      	ldr	r3, [pc, #144]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fcc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fccc:	60bb      	str	r3, [r7, #8]
 800fcce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fcd4:	4b21      	ldr	r3, [pc, #132]	; (800fd5c <HAL_RCC_OscConfig+0x508>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d118      	bne.n	800fd12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fce0:	4b1e      	ldr	r3, [pc, #120]	; (800fd5c <HAL_RCC_OscConfig+0x508>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	4a1d      	ldr	r2, [pc, #116]	; (800fd5c <HAL_RCC_OscConfig+0x508>)
 800fce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fcea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fcec:	f7fb fac8 	bl	800b280 <HAL_GetTick>
 800fcf0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fcf2:	e008      	b.n	800fd06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fcf4:	f7fb fac4 	bl	800b280 <HAL_GetTick>
 800fcf8:	4602      	mov	r2, r0
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	1ad3      	subs	r3, r2, r3
 800fcfe:	2b02      	cmp	r3, #2
 800fd00:	d901      	bls.n	800fd06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800fd02:	2303      	movs	r3, #3
 800fd04:	e1b8      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fd06:	4b15      	ldr	r3, [pc, #84]	; (800fd5c <HAL_RCC_OscConfig+0x508>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d0f0      	beq.n	800fcf4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	689b      	ldr	r3, [r3, #8]
 800fd16:	2b01      	cmp	r3, #1
 800fd18:	d108      	bne.n	800fd2c <HAL_RCC_OscConfig+0x4d8>
 800fd1a:	4b0f      	ldr	r3, [pc, #60]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fd1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd20:	4a0d      	ldr	r2, [pc, #52]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fd22:	f043 0301 	orr.w	r3, r3, #1
 800fd26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fd2a:	e029      	b.n	800fd80 <HAL_RCC_OscConfig+0x52c>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	689b      	ldr	r3, [r3, #8]
 800fd30:	2b05      	cmp	r3, #5
 800fd32:	d115      	bne.n	800fd60 <HAL_RCC_OscConfig+0x50c>
 800fd34:	4b08      	ldr	r3, [pc, #32]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fd36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd3a:	4a07      	ldr	r2, [pc, #28]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fd3c:	f043 0304 	orr.w	r3, r3, #4
 800fd40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fd44:	4b04      	ldr	r3, [pc, #16]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fd46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd4a:	4a03      	ldr	r2, [pc, #12]	; (800fd58 <HAL_RCC_OscConfig+0x504>)
 800fd4c:	f043 0301 	orr.w	r3, r3, #1
 800fd50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fd54:	e014      	b.n	800fd80 <HAL_RCC_OscConfig+0x52c>
 800fd56:	bf00      	nop
 800fd58:	40021000 	.word	0x40021000
 800fd5c:	40007000 	.word	0x40007000
 800fd60:	4b9d      	ldr	r3, [pc, #628]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800fd62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd66:	4a9c      	ldr	r2, [pc, #624]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800fd68:	f023 0301 	bic.w	r3, r3, #1
 800fd6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fd70:	4b99      	ldr	r3, [pc, #612]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800fd72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd76:	4a98      	ldr	r2, [pc, #608]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800fd78:	f023 0304 	bic.w	r3, r3, #4
 800fd7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	689b      	ldr	r3, [r3, #8]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d016      	beq.n	800fdb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fd88:	f7fb fa7a 	bl	800b280 <HAL_GetTick>
 800fd8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fd8e:	e00a      	b.n	800fda6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fd90:	f7fb fa76 	bl	800b280 <HAL_GetTick>
 800fd94:	4602      	mov	r2, r0
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	1ad3      	subs	r3, r2, r3
 800fd9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d901      	bls.n	800fda6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800fda2:	2303      	movs	r3, #3
 800fda4:	e168      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fda6:	4b8c      	ldr	r3, [pc, #560]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800fda8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdac:	f003 0302 	and.w	r3, r3, #2
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d0ed      	beq.n	800fd90 <HAL_RCC_OscConfig+0x53c>
 800fdb4:	e015      	b.n	800fde2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fdb6:	f7fb fa63 	bl	800b280 <HAL_GetTick>
 800fdba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fdbc:	e00a      	b.n	800fdd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fdbe:	f7fb fa5f 	bl	800b280 <HAL_GetTick>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	1ad3      	subs	r3, r2, r3
 800fdc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d901      	bls.n	800fdd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800fdd0:	2303      	movs	r3, #3
 800fdd2:	e151      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fdd4:	4b80      	ldr	r3, [pc, #512]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800fdd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdda:	f003 0302 	and.w	r3, r3, #2
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d1ed      	bne.n	800fdbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fde2:	7ffb      	ldrb	r3, [r7, #31]
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d105      	bne.n	800fdf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fde8:	4b7b      	ldr	r3, [pc, #492]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800fdea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdec:	4a7a      	ldr	r2, [pc, #488]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800fdee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fdf2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	f003 0320 	and.w	r3, r3, #32
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d03c      	beq.n	800fe7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d01c      	beq.n	800fe42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800fe08:	4b73      	ldr	r3, [pc, #460]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800fe0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fe0e:	4a72      	ldr	r2, [pc, #456]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800fe10:	f043 0301 	orr.w	r3, r3, #1
 800fe14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fe18:	f7fb fa32 	bl	800b280 <HAL_GetTick>
 800fe1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800fe1e:	e008      	b.n	800fe32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fe20:	f7fb fa2e 	bl	800b280 <HAL_GetTick>
 800fe24:	4602      	mov	r2, r0
 800fe26:	693b      	ldr	r3, [r7, #16]
 800fe28:	1ad3      	subs	r3, r2, r3
 800fe2a:	2b02      	cmp	r3, #2
 800fe2c:	d901      	bls.n	800fe32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800fe2e:	2303      	movs	r3, #3
 800fe30:	e122      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800fe32:	4b69      	ldr	r3, [pc, #420]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800fe34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fe38:	f003 0302 	and.w	r3, r3, #2
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d0ef      	beq.n	800fe20 <HAL_RCC_OscConfig+0x5cc>
 800fe40:	e01b      	b.n	800fe7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800fe42:	4b65      	ldr	r3, [pc, #404]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800fe44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fe48:	4a63      	ldr	r2, [pc, #396]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800fe4a:	f023 0301 	bic.w	r3, r3, #1
 800fe4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fe52:	f7fb fa15 	bl	800b280 <HAL_GetTick>
 800fe56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800fe58:	e008      	b.n	800fe6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fe5a:	f7fb fa11 	bl	800b280 <HAL_GetTick>
 800fe5e:	4602      	mov	r2, r0
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	1ad3      	subs	r3, r2, r3
 800fe64:	2b02      	cmp	r3, #2
 800fe66:	d901      	bls.n	800fe6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800fe68:	2303      	movs	r3, #3
 800fe6a:	e105      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800fe6c:	4b5a      	ldr	r3, [pc, #360]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800fe6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fe72:	f003 0302 	and.w	r3, r3, #2
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d1ef      	bne.n	800fe5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	f000 80f9 	beq.w	8010076 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe88:	2b02      	cmp	r3, #2
 800fe8a:	f040 80cf 	bne.w	801002c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800fe8e:	4b52      	ldr	r3, [pc, #328]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800fe90:	68db      	ldr	r3, [r3, #12]
 800fe92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	f003 0203 	and.w	r2, r3, #3
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d12c      	bne.n	800fefc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feac:	3b01      	subs	r3, #1
 800feae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d123      	bne.n	800fefc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800febe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d11b      	bne.n	800fefc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fece:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d113      	bne.n	800fefc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fede:	085b      	lsrs	r3, r3, #1
 800fee0:	3b01      	subs	r3, #1
 800fee2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d109      	bne.n	800fefc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fef2:	085b      	lsrs	r3, r3, #1
 800fef4:	3b01      	subs	r3, #1
 800fef6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d071      	beq.n	800ffe0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fefc:	69bb      	ldr	r3, [r7, #24]
 800fefe:	2b0c      	cmp	r3, #12
 800ff00:	d068      	beq.n	800ffd4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ff02:	4b35      	ldr	r3, [pc, #212]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d105      	bne.n	800ff1a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800ff0e:	4b32      	ldr	r3, [pc, #200]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d001      	beq.n	800ff1e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	e0ac      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ff1e:	4b2e      	ldr	r3, [pc, #184]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	4a2d      	ldr	r2, [pc, #180]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800ff24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ff28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ff2a:	f7fb f9a9 	bl	800b280 <HAL_GetTick>
 800ff2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ff30:	e008      	b.n	800ff44 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ff32:	f7fb f9a5 	bl	800b280 <HAL_GetTick>
 800ff36:	4602      	mov	r2, r0
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	1ad3      	subs	r3, r2, r3
 800ff3c:	2b02      	cmp	r3, #2
 800ff3e:	d901      	bls.n	800ff44 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800ff40:	2303      	movs	r3, #3
 800ff42:	e099      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ff44:	4b24      	ldr	r3, [pc, #144]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d1f0      	bne.n	800ff32 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ff50:	4b21      	ldr	r3, [pc, #132]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800ff52:	68da      	ldr	r2, [r3, #12]
 800ff54:	4b21      	ldr	r3, [pc, #132]	; (800ffdc <HAL_RCC_OscConfig+0x788>)
 800ff56:	4013      	ands	r3, r2
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ff60:	3a01      	subs	r2, #1
 800ff62:	0112      	lsls	r2, r2, #4
 800ff64:	4311      	orrs	r1, r2
 800ff66:	687a      	ldr	r2, [r7, #4]
 800ff68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ff6a:	0212      	lsls	r2, r2, #8
 800ff6c:	4311      	orrs	r1, r2
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ff72:	0852      	lsrs	r2, r2, #1
 800ff74:	3a01      	subs	r2, #1
 800ff76:	0552      	lsls	r2, r2, #21
 800ff78:	4311      	orrs	r1, r2
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ff7e:	0852      	lsrs	r2, r2, #1
 800ff80:	3a01      	subs	r2, #1
 800ff82:	0652      	lsls	r2, r2, #25
 800ff84:	4311      	orrs	r1, r2
 800ff86:	687a      	ldr	r2, [r7, #4]
 800ff88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ff8a:	06d2      	lsls	r2, r2, #27
 800ff8c:	430a      	orrs	r2, r1
 800ff8e:	4912      	ldr	r1, [pc, #72]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800ff90:	4313      	orrs	r3, r2
 800ff92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ff94:	4b10      	ldr	r3, [pc, #64]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	4a0f      	ldr	r2, [pc, #60]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800ff9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ff9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ffa0:	4b0d      	ldr	r3, [pc, #52]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	4a0c      	ldr	r2, [pc, #48]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800ffa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ffaa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ffac:	f7fb f968 	bl	800b280 <HAL_GetTick>
 800ffb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ffb2:	e008      	b.n	800ffc6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ffb4:	f7fb f964 	bl	800b280 <HAL_GetTick>
 800ffb8:	4602      	mov	r2, r0
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	1ad3      	subs	r3, r2, r3
 800ffbe:	2b02      	cmp	r3, #2
 800ffc0:	d901      	bls.n	800ffc6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800ffc2:	2303      	movs	r3, #3
 800ffc4:	e058      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ffc6:	4b04      	ldr	r3, [pc, #16]	; (800ffd8 <HAL_RCC_OscConfig+0x784>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d0f0      	beq.n	800ffb4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ffd2:	e050      	b.n	8010076 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	e04f      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
 800ffd8:	40021000 	.word	0x40021000
 800ffdc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ffe0:	4b27      	ldr	r3, [pc, #156]	; (8010080 <HAL_RCC_OscConfig+0x82c>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d144      	bne.n	8010076 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ffec:	4b24      	ldr	r3, [pc, #144]	; (8010080 <HAL_RCC_OscConfig+0x82c>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4a23      	ldr	r2, [pc, #140]	; (8010080 <HAL_RCC_OscConfig+0x82c>)
 800fff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fff6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fff8:	4b21      	ldr	r3, [pc, #132]	; (8010080 <HAL_RCC_OscConfig+0x82c>)
 800fffa:	68db      	ldr	r3, [r3, #12]
 800fffc:	4a20      	ldr	r2, [pc, #128]	; (8010080 <HAL_RCC_OscConfig+0x82c>)
 800fffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010002:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8010004:	f7fb f93c 	bl	800b280 <HAL_GetTick>
 8010008:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801000a:	e008      	b.n	801001e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801000c:	f7fb f938 	bl	800b280 <HAL_GetTick>
 8010010:	4602      	mov	r2, r0
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	1ad3      	subs	r3, r2, r3
 8010016:	2b02      	cmp	r3, #2
 8010018:	d901      	bls.n	801001e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 801001a:	2303      	movs	r3, #3
 801001c:	e02c      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801001e:	4b18      	ldr	r3, [pc, #96]	; (8010080 <HAL_RCC_OscConfig+0x82c>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010026:	2b00      	cmp	r3, #0
 8010028:	d0f0      	beq.n	801000c <HAL_RCC_OscConfig+0x7b8>
 801002a:	e024      	b.n	8010076 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 801002c:	69bb      	ldr	r3, [r7, #24]
 801002e:	2b0c      	cmp	r3, #12
 8010030:	d01f      	beq.n	8010072 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010032:	4b13      	ldr	r3, [pc, #76]	; (8010080 <HAL_RCC_OscConfig+0x82c>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	4a12      	ldr	r2, [pc, #72]	; (8010080 <HAL_RCC_OscConfig+0x82c>)
 8010038:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801003c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801003e:	f7fb f91f 	bl	800b280 <HAL_GetTick>
 8010042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010044:	e008      	b.n	8010058 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010046:	f7fb f91b 	bl	800b280 <HAL_GetTick>
 801004a:	4602      	mov	r2, r0
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	1ad3      	subs	r3, r2, r3
 8010050:	2b02      	cmp	r3, #2
 8010052:	d901      	bls.n	8010058 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8010054:	2303      	movs	r3, #3
 8010056:	e00f      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010058:	4b09      	ldr	r3, [pc, #36]	; (8010080 <HAL_RCC_OscConfig+0x82c>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010060:	2b00      	cmp	r3, #0
 8010062:	d1f0      	bne.n	8010046 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8010064:	4b06      	ldr	r3, [pc, #24]	; (8010080 <HAL_RCC_OscConfig+0x82c>)
 8010066:	68da      	ldr	r2, [r3, #12]
 8010068:	4905      	ldr	r1, [pc, #20]	; (8010080 <HAL_RCC_OscConfig+0x82c>)
 801006a:	4b06      	ldr	r3, [pc, #24]	; (8010084 <HAL_RCC_OscConfig+0x830>)
 801006c:	4013      	ands	r3, r2
 801006e:	60cb      	str	r3, [r1, #12]
 8010070:	e001      	b.n	8010076 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8010072:	2301      	movs	r3, #1
 8010074:	e000      	b.n	8010078 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8010076:	2300      	movs	r3, #0
}
 8010078:	4618      	mov	r0, r3
 801007a:	3720      	adds	r7, #32
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}
 8010080:	40021000 	.word	0x40021000
 8010084:	feeefffc 	.word	0xfeeefffc

08010088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d101      	bne.n	801009c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010098:	2301      	movs	r3, #1
 801009a:	e0e7      	b.n	801026c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801009c:	4b75      	ldr	r3, [pc, #468]	; (8010274 <HAL_RCC_ClockConfig+0x1ec>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	f003 0307 	and.w	r3, r3, #7
 80100a4:	683a      	ldr	r2, [r7, #0]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d910      	bls.n	80100cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80100aa:	4b72      	ldr	r3, [pc, #456]	; (8010274 <HAL_RCC_ClockConfig+0x1ec>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f023 0207 	bic.w	r2, r3, #7
 80100b2:	4970      	ldr	r1, [pc, #448]	; (8010274 <HAL_RCC_ClockConfig+0x1ec>)
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	4313      	orrs	r3, r2
 80100b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80100ba:	4b6e      	ldr	r3, [pc, #440]	; (8010274 <HAL_RCC_ClockConfig+0x1ec>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f003 0307 	and.w	r3, r3, #7
 80100c2:	683a      	ldr	r2, [r7, #0]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d001      	beq.n	80100cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80100c8:	2301      	movs	r3, #1
 80100ca:	e0cf      	b.n	801026c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f003 0302 	and.w	r3, r3, #2
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d010      	beq.n	80100fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	689a      	ldr	r2, [r3, #8]
 80100dc:	4b66      	ldr	r3, [pc, #408]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 80100de:	689b      	ldr	r3, [r3, #8]
 80100e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d908      	bls.n	80100fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80100e8:	4b63      	ldr	r3, [pc, #396]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 80100ea:	689b      	ldr	r3, [r3, #8]
 80100ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	689b      	ldr	r3, [r3, #8]
 80100f4:	4960      	ldr	r1, [pc, #384]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 80100f6:	4313      	orrs	r3, r2
 80100f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f003 0301 	and.w	r3, r3, #1
 8010102:	2b00      	cmp	r3, #0
 8010104:	d04c      	beq.n	80101a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	685b      	ldr	r3, [r3, #4]
 801010a:	2b03      	cmp	r3, #3
 801010c:	d107      	bne.n	801011e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801010e:	4b5a      	ldr	r3, [pc, #360]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010116:	2b00      	cmp	r3, #0
 8010118:	d121      	bne.n	801015e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 801011a:	2301      	movs	r3, #1
 801011c:	e0a6      	b.n	801026c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	2b02      	cmp	r3, #2
 8010124:	d107      	bne.n	8010136 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010126:	4b54      	ldr	r3, [pc, #336]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801012e:	2b00      	cmp	r3, #0
 8010130:	d115      	bne.n	801015e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8010132:	2301      	movs	r3, #1
 8010134:	e09a      	b.n	801026c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d107      	bne.n	801014e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801013e:	4b4e      	ldr	r3, [pc, #312]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	f003 0302 	and.w	r3, r3, #2
 8010146:	2b00      	cmp	r3, #0
 8010148:	d109      	bne.n	801015e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801014a:	2301      	movs	r3, #1
 801014c:	e08e      	b.n	801026c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801014e:	4b4a      	ldr	r3, [pc, #296]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010156:	2b00      	cmp	r3, #0
 8010158:	d101      	bne.n	801015e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801015a:	2301      	movs	r3, #1
 801015c:	e086      	b.n	801026c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801015e:	4b46      	ldr	r3, [pc, #280]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 8010160:	689b      	ldr	r3, [r3, #8]
 8010162:	f023 0203 	bic.w	r2, r3, #3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	4943      	ldr	r1, [pc, #268]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 801016c:	4313      	orrs	r3, r2
 801016e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010170:	f7fb f886 	bl	800b280 <HAL_GetTick>
 8010174:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010176:	e00a      	b.n	801018e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010178:	f7fb f882 	bl	800b280 <HAL_GetTick>
 801017c:	4602      	mov	r2, r0
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	1ad3      	subs	r3, r2, r3
 8010182:	f241 3288 	movw	r2, #5000	; 0x1388
 8010186:	4293      	cmp	r3, r2
 8010188:	d901      	bls.n	801018e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 801018a:	2303      	movs	r3, #3
 801018c:	e06e      	b.n	801026c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801018e:	4b3a      	ldr	r3, [pc, #232]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 8010190:	689b      	ldr	r3, [r3, #8]
 8010192:	f003 020c 	and.w	r2, r3, #12
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	685b      	ldr	r3, [r3, #4]
 801019a:	009b      	lsls	r3, r3, #2
 801019c:	429a      	cmp	r2, r3
 801019e:	d1eb      	bne.n	8010178 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	f003 0302 	and.w	r3, r3, #2
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d010      	beq.n	80101ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	689a      	ldr	r2, [r3, #8]
 80101b0:	4b31      	ldr	r3, [pc, #196]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 80101b2:	689b      	ldr	r3, [r3, #8]
 80101b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d208      	bcs.n	80101ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80101bc:	4b2e      	ldr	r3, [pc, #184]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 80101be:	689b      	ldr	r3, [r3, #8]
 80101c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	689b      	ldr	r3, [r3, #8]
 80101c8:	492b      	ldr	r1, [pc, #172]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 80101ca:	4313      	orrs	r3, r2
 80101cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80101ce:	4b29      	ldr	r3, [pc, #164]	; (8010274 <HAL_RCC_ClockConfig+0x1ec>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f003 0307 	and.w	r3, r3, #7
 80101d6:	683a      	ldr	r2, [r7, #0]
 80101d8:	429a      	cmp	r2, r3
 80101da:	d210      	bcs.n	80101fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80101dc:	4b25      	ldr	r3, [pc, #148]	; (8010274 <HAL_RCC_ClockConfig+0x1ec>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	f023 0207 	bic.w	r2, r3, #7
 80101e4:	4923      	ldr	r1, [pc, #140]	; (8010274 <HAL_RCC_ClockConfig+0x1ec>)
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	4313      	orrs	r3, r2
 80101ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80101ec:	4b21      	ldr	r3, [pc, #132]	; (8010274 <HAL_RCC_ClockConfig+0x1ec>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	f003 0307 	and.w	r3, r3, #7
 80101f4:	683a      	ldr	r2, [r7, #0]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d001      	beq.n	80101fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80101fa:	2301      	movs	r3, #1
 80101fc:	e036      	b.n	801026c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f003 0304 	and.w	r3, r3, #4
 8010206:	2b00      	cmp	r3, #0
 8010208:	d008      	beq.n	801021c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801020a:	4b1b      	ldr	r3, [pc, #108]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 801020c:	689b      	ldr	r3, [r3, #8]
 801020e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	68db      	ldr	r3, [r3, #12]
 8010216:	4918      	ldr	r1, [pc, #96]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 8010218:	4313      	orrs	r3, r2
 801021a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f003 0308 	and.w	r3, r3, #8
 8010224:	2b00      	cmp	r3, #0
 8010226:	d009      	beq.n	801023c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010228:	4b13      	ldr	r3, [pc, #76]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 801022a:	689b      	ldr	r3, [r3, #8]
 801022c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	691b      	ldr	r3, [r3, #16]
 8010234:	00db      	lsls	r3, r3, #3
 8010236:	4910      	ldr	r1, [pc, #64]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 8010238:	4313      	orrs	r3, r2
 801023a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801023c:	f000 f824 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 8010240:	4602      	mov	r2, r0
 8010242:	4b0d      	ldr	r3, [pc, #52]	; (8010278 <HAL_RCC_ClockConfig+0x1f0>)
 8010244:	689b      	ldr	r3, [r3, #8]
 8010246:	091b      	lsrs	r3, r3, #4
 8010248:	f003 030f 	and.w	r3, r3, #15
 801024c:	490b      	ldr	r1, [pc, #44]	; (801027c <HAL_RCC_ClockConfig+0x1f4>)
 801024e:	5ccb      	ldrb	r3, [r1, r3]
 8010250:	f003 031f 	and.w	r3, r3, #31
 8010254:	fa22 f303 	lsr.w	r3, r2, r3
 8010258:	4a09      	ldr	r2, [pc, #36]	; (8010280 <HAL_RCC_ClockConfig+0x1f8>)
 801025a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801025c:	4b09      	ldr	r3, [pc, #36]	; (8010284 <HAL_RCC_ClockConfig+0x1fc>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	4618      	mov	r0, r3
 8010262:	f7fa ffbd 	bl	800b1e0 <HAL_InitTick>
 8010266:	4603      	mov	r3, r0
 8010268:	72fb      	strb	r3, [r7, #11]

  return status;
 801026a:	7afb      	ldrb	r3, [r7, #11]
}
 801026c:	4618      	mov	r0, r3
 801026e:	3710      	adds	r7, #16
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}
 8010274:	40022000 	.word	0x40022000
 8010278:	40021000 	.word	0x40021000
 801027c:	08019f4c 	.word	0x08019f4c
 8010280:	20000198 	.word	0x20000198
 8010284:	20000554 	.word	0x20000554

08010288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010288:	b480      	push	{r7}
 801028a:	b089      	sub	sp, #36	; 0x24
 801028c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801028e:	2300      	movs	r3, #0
 8010290:	61fb      	str	r3, [r7, #28]
 8010292:	2300      	movs	r3, #0
 8010294:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010296:	4b3e      	ldr	r3, [pc, #248]	; (8010390 <HAL_RCC_GetSysClockFreq+0x108>)
 8010298:	689b      	ldr	r3, [r3, #8]
 801029a:	f003 030c 	and.w	r3, r3, #12
 801029e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80102a0:	4b3b      	ldr	r3, [pc, #236]	; (8010390 <HAL_RCC_GetSysClockFreq+0x108>)
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	f003 0303 	and.w	r3, r3, #3
 80102a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d005      	beq.n	80102bc <HAL_RCC_GetSysClockFreq+0x34>
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	2b0c      	cmp	r3, #12
 80102b4:	d121      	bne.n	80102fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d11e      	bne.n	80102fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80102bc:	4b34      	ldr	r3, [pc, #208]	; (8010390 <HAL_RCC_GetSysClockFreq+0x108>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	f003 0308 	and.w	r3, r3, #8
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d107      	bne.n	80102d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80102c8:	4b31      	ldr	r3, [pc, #196]	; (8010390 <HAL_RCC_GetSysClockFreq+0x108>)
 80102ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80102ce:	0a1b      	lsrs	r3, r3, #8
 80102d0:	f003 030f 	and.w	r3, r3, #15
 80102d4:	61fb      	str	r3, [r7, #28]
 80102d6:	e005      	b.n	80102e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80102d8:	4b2d      	ldr	r3, [pc, #180]	; (8010390 <HAL_RCC_GetSysClockFreq+0x108>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	091b      	lsrs	r3, r3, #4
 80102de:	f003 030f 	and.w	r3, r3, #15
 80102e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80102e4:	4a2b      	ldr	r2, [pc, #172]	; (8010394 <HAL_RCC_GetSysClockFreq+0x10c>)
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d10d      	bne.n	8010310 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80102f8:	e00a      	b.n	8010310 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	2b04      	cmp	r3, #4
 80102fe:	d102      	bne.n	8010306 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8010300:	4b25      	ldr	r3, [pc, #148]	; (8010398 <HAL_RCC_GetSysClockFreq+0x110>)
 8010302:	61bb      	str	r3, [r7, #24]
 8010304:	e004      	b.n	8010310 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	2b08      	cmp	r3, #8
 801030a:	d101      	bne.n	8010310 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801030c:	4b23      	ldr	r3, [pc, #140]	; (801039c <HAL_RCC_GetSysClockFreq+0x114>)
 801030e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	2b0c      	cmp	r3, #12
 8010314:	d134      	bne.n	8010380 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8010316:	4b1e      	ldr	r3, [pc, #120]	; (8010390 <HAL_RCC_GetSysClockFreq+0x108>)
 8010318:	68db      	ldr	r3, [r3, #12]
 801031a:	f003 0303 	and.w	r3, r3, #3
 801031e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	2b02      	cmp	r3, #2
 8010324:	d003      	beq.n	801032e <HAL_RCC_GetSysClockFreq+0xa6>
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	2b03      	cmp	r3, #3
 801032a:	d003      	beq.n	8010334 <HAL_RCC_GetSysClockFreq+0xac>
 801032c:	e005      	b.n	801033a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 801032e:	4b1a      	ldr	r3, [pc, #104]	; (8010398 <HAL_RCC_GetSysClockFreq+0x110>)
 8010330:	617b      	str	r3, [r7, #20]
      break;
 8010332:	e005      	b.n	8010340 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8010334:	4b19      	ldr	r3, [pc, #100]	; (801039c <HAL_RCC_GetSysClockFreq+0x114>)
 8010336:	617b      	str	r3, [r7, #20]
      break;
 8010338:	e002      	b.n	8010340 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801033a:	69fb      	ldr	r3, [r7, #28]
 801033c:	617b      	str	r3, [r7, #20]
      break;
 801033e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8010340:	4b13      	ldr	r3, [pc, #76]	; (8010390 <HAL_RCC_GetSysClockFreq+0x108>)
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	091b      	lsrs	r3, r3, #4
 8010346:	f003 0307 	and.w	r3, r3, #7
 801034a:	3301      	adds	r3, #1
 801034c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801034e:	4b10      	ldr	r3, [pc, #64]	; (8010390 <HAL_RCC_GetSysClockFreq+0x108>)
 8010350:	68db      	ldr	r3, [r3, #12]
 8010352:	0a1b      	lsrs	r3, r3, #8
 8010354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010358:	697a      	ldr	r2, [r7, #20]
 801035a:	fb03 f202 	mul.w	r2, r3, r2
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	fbb2 f3f3 	udiv	r3, r2, r3
 8010364:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8010366:	4b0a      	ldr	r3, [pc, #40]	; (8010390 <HAL_RCC_GetSysClockFreq+0x108>)
 8010368:	68db      	ldr	r3, [r3, #12]
 801036a:	0e5b      	lsrs	r3, r3, #25
 801036c:	f003 0303 	and.w	r3, r3, #3
 8010370:	3301      	adds	r3, #1
 8010372:	005b      	lsls	r3, r3, #1
 8010374:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8010376:	697a      	ldr	r2, [r7, #20]
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	fbb2 f3f3 	udiv	r3, r2, r3
 801037e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8010380:	69bb      	ldr	r3, [r7, #24]
}
 8010382:	4618      	mov	r0, r3
 8010384:	3724      	adds	r7, #36	; 0x24
 8010386:	46bd      	mov	sp, r7
 8010388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038c:	4770      	bx	lr
 801038e:	bf00      	nop
 8010390:	40021000 	.word	0x40021000
 8010394:	08019f64 	.word	0x08019f64
 8010398:	00f42400 	.word	0x00f42400
 801039c:	007a1200 	.word	0x007a1200

080103a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80103a0:	b480      	push	{r7}
 80103a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80103a4:	4b03      	ldr	r3, [pc, #12]	; (80103b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80103a6:	681b      	ldr	r3, [r3, #0]
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	46bd      	mov	sp, r7
 80103ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b0:	4770      	bx	lr
 80103b2:	bf00      	nop
 80103b4:	20000198 	.word	0x20000198

080103b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80103bc:	f7ff fff0 	bl	80103a0 <HAL_RCC_GetHCLKFreq>
 80103c0:	4602      	mov	r2, r0
 80103c2:	4b06      	ldr	r3, [pc, #24]	; (80103dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80103c4:	689b      	ldr	r3, [r3, #8]
 80103c6:	0a1b      	lsrs	r3, r3, #8
 80103c8:	f003 0307 	and.w	r3, r3, #7
 80103cc:	4904      	ldr	r1, [pc, #16]	; (80103e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80103ce:	5ccb      	ldrb	r3, [r1, r3]
 80103d0:	f003 031f 	and.w	r3, r3, #31
 80103d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80103d8:	4618      	mov	r0, r3
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	40021000 	.word	0x40021000
 80103e0:	08019f5c 	.word	0x08019f5c

080103e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80103e8:	f7ff ffda 	bl	80103a0 <HAL_RCC_GetHCLKFreq>
 80103ec:	4602      	mov	r2, r0
 80103ee:	4b06      	ldr	r3, [pc, #24]	; (8010408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80103f0:	689b      	ldr	r3, [r3, #8]
 80103f2:	0adb      	lsrs	r3, r3, #11
 80103f4:	f003 0307 	and.w	r3, r3, #7
 80103f8:	4904      	ldr	r1, [pc, #16]	; (801040c <HAL_RCC_GetPCLK2Freq+0x28>)
 80103fa:	5ccb      	ldrb	r3, [r1, r3]
 80103fc:	f003 031f 	and.w	r3, r3, #31
 8010400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010404:	4618      	mov	r0, r3
 8010406:	bd80      	pop	{r7, pc}
 8010408:	40021000 	.word	0x40021000
 801040c:	08019f5c 	.word	0x08019f5c

08010410 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b086      	sub	sp, #24
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8010418:	2300      	movs	r3, #0
 801041a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801041c:	4b2a      	ldr	r3, [pc, #168]	; (80104c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801041e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010424:	2b00      	cmp	r3, #0
 8010426:	d003      	beq.n	8010430 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8010428:	f7ff f886 	bl	800f538 <HAL_PWREx_GetVoltageRange>
 801042c:	6178      	str	r0, [r7, #20]
 801042e:	e014      	b.n	801045a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8010430:	4b25      	ldr	r3, [pc, #148]	; (80104c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010434:	4a24      	ldr	r2, [pc, #144]	; (80104c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801043a:	6593      	str	r3, [r2, #88]	; 0x58
 801043c:	4b22      	ldr	r3, [pc, #136]	; (80104c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801043e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010444:	60fb      	str	r3, [r7, #12]
 8010446:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8010448:	f7ff f876 	bl	800f538 <HAL_PWREx_GetVoltageRange>
 801044c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801044e:	4b1e      	ldr	r3, [pc, #120]	; (80104c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010452:	4a1d      	ldr	r2, [pc, #116]	; (80104c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010458:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010460:	d10b      	bne.n	801047a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2b80      	cmp	r3, #128	; 0x80
 8010466:	d919      	bls.n	801049c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2ba0      	cmp	r3, #160	; 0xa0
 801046c:	d902      	bls.n	8010474 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801046e:	2302      	movs	r3, #2
 8010470:	613b      	str	r3, [r7, #16]
 8010472:	e013      	b.n	801049c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010474:	2301      	movs	r3, #1
 8010476:	613b      	str	r3, [r7, #16]
 8010478:	e010      	b.n	801049c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2b80      	cmp	r3, #128	; 0x80
 801047e:	d902      	bls.n	8010486 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8010480:	2303      	movs	r3, #3
 8010482:	613b      	str	r3, [r7, #16]
 8010484:	e00a      	b.n	801049c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2b80      	cmp	r3, #128	; 0x80
 801048a:	d102      	bne.n	8010492 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801048c:	2302      	movs	r3, #2
 801048e:	613b      	str	r3, [r7, #16]
 8010490:	e004      	b.n	801049c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2b70      	cmp	r3, #112	; 0x70
 8010496:	d101      	bne.n	801049c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010498:	2301      	movs	r3, #1
 801049a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801049c:	4b0b      	ldr	r3, [pc, #44]	; (80104cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	f023 0207 	bic.w	r2, r3, #7
 80104a4:	4909      	ldr	r1, [pc, #36]	; (80104cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	4313      	orrs	r3, r2
 80104aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80104ac:	4b07      	ldr	r3, [pc, #28]	; (80104cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f003 0307 	and.w	r3, r3, #7
 80104b4:	693a      	ldr	r2, [r7, #16]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d001      	beq.n	80104be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80104ba:	2301      	movs	r3, #1
 80104bc:	e000      	b.n	80104c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80104be:	2300      	movs	r3, #0
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3718      	adds	r7, #24
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	40021000 	.word	0x40021000
 80104cc:	40022000 	.word	0x40022000

080104d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b086      	sub	sp, #24
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80104d8:	2300      	movs	r3, #0
 80104da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80104dc:	2300      	movs	r3, #0
 80104de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d041      	beq.n	8010570 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80104f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80104f4:	d02a      	beq.n	801054c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80104f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80104fa:	d824      	bhi.n	8010546 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80104fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010500:	d008      	beq.n	8010514 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8010502:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010506:	d81e      	bhi.n	8010546 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00a      	beq.n	8010522 <HAL_RCCEx_PeriphCLKConfig+0x52>
 801050c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010510:	d010      	beq.n	8010534 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010512:	e018      	b.n	8010546 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010514:	4b86      	ldr	r3, [pc, #536]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010516:	68db      	ldr	r3, [r3, #12]
 8010518:	4a85      	ldr	r2, [pc, #532]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801051a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801051e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010520:	e015      	b.n	801054e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	3304      	adds	r3, #4
 8010526:	2100      	movs	r1, #0
 8010528:	4618      	mov	r0, r3
 801052a:	f001 f895 	bl	8011658 <RCCEx_PLLSAI1_Config>
 801052e:	4603      	mov	r3, r0
 8010530:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010532:	e00c      	b.n	801054e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	3320      	adds	r3, #32
 8010538:	2100      	movs	r1, #0
 801053a:	4618      	mov	r0, r3
 801053c:	f001 f97e 	bl	801183c <RCCEx_PLLSAI2_Config>
 8010540:	4603      	mov	r3, r0
 8010542:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010544:	e003      	b.n	801054e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010546:	2301      	movs	r3, #1
 8010548:	74fb      	strb	r3, [r7, #19]
      break;
 801054a:	e000      	b.n	801054e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 801054c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801054e:	7cfb      	ldrb	r3, [r7, #19]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d10b      	bne.n	801056c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010554:	4b76      	ldr	r3, [pc, #472]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801055a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010562:	4973      	ldr	r1, [pc, #460]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010564:	4313      	orrs	r3, r2
 8010566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 801056a:	e001      	b.n	8010570 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801056c:	7cfb      	ldrb	r3, [r7, #19]
 801056e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010578:	2b00      	cmp	r3, #0
 801057a:	d041      	beq.n	8010600 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010580:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010584:	d02a      	beq.n	80105dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8010586:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801058a:	d824      	bhi.n	80105d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 801058c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010590:	d008      	beq.n	80105a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8010592:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010596:	d81e      	bhi.n	80105d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010598:	2b00      	cmp	r3, #0
 801059a:	d00a      	beq.n	80105b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 801059c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80105a0:	d010      	beq.n	80105c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80105a2:	e018      	b.n	80105d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80105a4:	4b62      	ldr	r3, [pc, #392]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80105a6:	68db      	ldr	r3, [r3, #12]
 80105a8:	4a61      	ldr	r2, [pc, #388]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80105aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80105ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80105b0:	e015      	b.n	80105de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	3304      	adds	r3, #4
 80105b6:	2100      	movs	r1, #0
 80105b8:	4618      	mov	r0, r3
 80105ba:	f001 f84d 	bl	8011658 <RCCEx_PLLSAI1_Config>
 80105be:	4603      	mov	r3, r0
 80105c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80105c2:	e00c      	b.n	80105de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	3320      	adds	r3, #32
 80105c8:	2100      	movs	r1, #0
 80105ca:	4618      	mov	r0, r3
 80105cc:	f001 f936 	bl	801183c <RCCEx_PLLSAI2_Config>
 80105d0:	4603      	mov	r3, r0
 80105d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80105d4:	e003      	b.n	80105de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80105d6:	2301      	movs	r3, #1
 80105d8:	74fb      	strb	r3, [r7, #19]
      break;
 80105da:	e000      	b.n	80105de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80105dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80105de:	7cfb      	ldrb	r3, [r7, #19]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d10b      	bne.n	80105fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80105e4:	4b52      	ldr	r3, [pc, #328]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80105e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105f2:	494f      	ldr	r1, [pc, #316]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80105f4:	4313      	orrs	r3, r2
 80105f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80105fa:	e001      	b.n	8010600 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80105fc:	7cfb      	ldrb	r3, [r7, #19]
 80105fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010608:	2b00      	cmp	r3, #0
 801060a:	f000 80a0 	beq.w	801074e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801060e:	2300      	movs	r3, #0
 8010610:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8010612:	4b47      	ldr	r3, [pc, #284]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801061a:	2b00      	cmp	r3, #0
 801061c:	d101      	bne.n	8010622 <HAL_RCCEx_PeriphCLKConfig+0x152>
 801061e:	2301      	movs	r3, #1
 8010620:	e000      	b.n	8010624 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8010622:	2300      	movs	r3, #0
 8010624:	2b00      	cmp	r3, #0
 8010626:	d00d      	beq.n	8010644 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010628:	4b41      	ldr	r3, [pc, #260]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801062a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801062c:	4a40      	ldr	r2, [pc, #256]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010632:	6593      	str	r3, [r2, #88]	; 0x58
 8010634:	4b3e      	ldr	r3, [pc, #248]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801063c:	60bb      	str	r3, [r7, #8]
 801063e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010640:	2301      	movs	r3, #1
 8010642:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010644:	4b3b      	ldr	r3, [pc, #236]	; (8010734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	4a3a      	ldr	r2, [pc, #232]	; (8010734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801064a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801064e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010650:	f7fa fe16 	bl	800b280 <HAL_GetTick>
 8010654:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010656:	e009      	b.n	801066c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010658:	f7fa fe12 	bl	800b280 <HAL_GetTick>
 801065c:	4602      	mov	r2, r0
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	1ad3      	subs	r3, r2, r3
 8010662:	2b02      	cmp	r3, #2
 8010664:	d902      	bls.n	801066c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8010666:	2303      	movs	r3, #3
 8010668:	74fb      	strb	r3, [r7, #19]
        break;
 801066a:	e005      	b.n	8010678 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801066c:	4b31      	ldr	r3, [pc, #196]	; (8010734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010674:	2b00      	cmp	r3, #0
 8010676:	d0ef      	beq.n	8010658 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8010678:	7cfb      	ldrb	r3, [r7, #19]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d15c      	bne.n	8010738 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801067e:	4b2c      	ldr	r3, [pc, #176]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010688:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d01f      	beq.n	80106d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010696:	697a      	ldr	r2, [r7, #20]
 8010698:	429a      	cmp	r2, r3
 801069a:	d019      	beq.n	80106d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801069c:	4b24      	ldr	r3, [pc, #144]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801069e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80106a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80106a8:	4b21      	ldr	r3, [pc, #132]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106ae:	4a20      	ldr	r2, [pc, #128]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80106b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80106b8:	4b1d      	ldr	r3, [pc, #116]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106be:	4a1c      	ldr	r2, [pc, #112]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80106c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80106c8:	4a19      	ldr	r2, [pc, #100]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	f003 0301 	and.w	r3, r3, #1
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d016      	beq.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80106da:	f7fa fdd1 	bl	800b280 <HAL_GetTick>
 80106de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80106e0:	e00b      	b.n	80106fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80106e2:	f7fa fdcd 	bl	800b280 <HAL_GetTick>
 80106e6:	4602      	mov	r2, r0
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	1ad3      	subs	r3, r2, r3
 80106ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80106f0:	4293      	cmp	r3, r2
 80106f2:	d902      	bls.n	80106fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80106f4:	2303      	movs	r3, #3
 80106f6:	74fb      	strb	r3, [r7, #19]
            break;
 80106f8:	e006      	b.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80106fa:	4b0d      	ldr	r3, [pc, #52]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010700:	f003 0302 	and.w	r3, r3, #2
 8010704:	2b00      	cmp	r3, #0
 8010706:	d0ec      	beq.n	80106e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8010708:	7cfb      	ldrb	r3, [r7, #19]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d10c      	bne.n	8010728 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801070e:	4b08      	ldr	r3, [pc, #32]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801071e:	4904      	ldr	r1, [pc, #16]	; (8010730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010720:	4313      	orrs	r3, r2
 8010722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8010726:	e009      	b.n	801073c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010728:	7cfb      	ldrb	r3, [r7, #19]
 801072a:	74bb      	strb	r3, [r7, #18]
 801072c:	e006      	b.n	801073c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 801072e:	bf00      	nop
 8010730:	40021000 	.word	0x40021000
 8010734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010738:	7cfb      	ldrb	r3, [r7, #19]
 801073a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801073c:	7c7b      	ldrb	r3, [r7, #17]
 801073e:	2b01      	cmp	r3, #1
 8010740:	d105      	bne.n	801074e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010742:	4ba6      	ldr	r3, [pc, #664]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010746:	4aa5      	ldr	r2, [pc, #660]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801074c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f003 0301 	and.w	r3, r3, #1
 8010756:	2b00      	cmp	r3, #0
 8010758:	d00a      	beq.n	8010770 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801075a:	4ba0      	ldr	r3, [pc, #640]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801075c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010760:	f023 0203 	bic.w	r2, r3, #3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010768:	499c      	ldr	r1, [pc, #624]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801076a:	4313      	orrs	r3, r2
 801076c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	f003 0302 	and.w	r3, r3, #2
 8010778:	2b00      	cmp	r3, #0
 801077a:	d00a      	beq.n	8010792 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801077c:	4b97      	ldr	r3, [pc, #604]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010782:	f023 020c 	bic.w	r2, r3, #12
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801078a:	4994      	ldr	r1, [pc, #592]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801078c:	4313      	orrs	r3, r2
 801078e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	f003 0304 	and.w	r3, r3, #4
 801079a:	2b00      	cmp	r3, #0
 801079c:	d00a      	beq.n	80107b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801079e:	4b8f      	ldr	r3, [pc, #572]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80107a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ac:	498b      	ldr	r1, [pc, #556]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80107ae:	4313      	orrs	r3, r2
 80107b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f003 0308 	and.w	r3, r3, #8
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d00a      	beq.n	80107d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80107c0:	4b86      	ldr	r3, [pc, #536]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80107c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107ce:	4983      	ldr	r1, [pc, #524]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80107d0:	4313      	orrs	r3, r2
 80107d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	f003 0310 	and.w	r3, r3, #16
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d00a      	beq.n	80107f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80107e2:	4b7e      	ldr	r3, [pc, #504]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80107e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80107f0:	497a      	ldr	r1, [pc, #488]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80107f2:	4313      	orrs	r3, r2
 80107f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	f003 0320 	and.w	r3, r3, #32
 8010800:	2b00      	cmp	r3, #0
 8010802:	d00a      	beq.n	801081a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010804:	4b75      	ldr	r3, [pc, #468]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801080a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010812:	4972      	ldr	r1, [pc, #456]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010814:	4313      	orrs	r3, r2
 8010816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010822:	2b00      	cmp	r3, #0
 8010824:	d00a      	beq.n	801083c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010826:	4b6d      	ldr	r3, [pc, #436]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801082c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010834:	4969      	ldr	r1, [pc, #420]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010836:	4313      	orrs	r3, r2
 8010838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010844:	2b00      	cmp	r3, #0
 8010846:	d00a      	beq.n	801085e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010848:	4b64      	ldr	r3, [pc, #400]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801084e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010856:	4961      	ldr	r1, [pc, #388]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010858:	4313      	orrs	r3, r2
 801085a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010866:	2b00      	cmp	r3, #0
 8010868:	d00a      	beq.n	8010880 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801086a:	4b5c      	ldr	r3, [pc, #368]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801086c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010870:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010878:	4958      	ldr	r1, [pc, #352]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801087a:	4313      	orrs	r3, r2
 801087c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010888:	2b00      	cmp	r3, #0
 801088a:	d00a      	beq.n	80108a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801088c:	4b53      	ldr	r3, [pc, #332]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010892:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801089a:	4950      	ldr	r1, [pc, #320]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801089c:	4313      	orrs	r3, r2
 801089e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d00a      	beq.n	80108c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80108ae:	4b4b      	ldr	r3, [pc, #300]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80108b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108bc:	4947      	ldr	r1, [pc, #284]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80108be:	4313      	orrs	r3, r2
 80108c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d00a      	beq.n	80108e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80108d0:	4b42      	ldr	r3, [pc, #264]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80108d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80108d6:	f023 0203 	bic.w	r2, r3, #3
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108de:	493f      	ldr	r1, [pc, #252]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80108e0:	4313      	orrs	r3, r2
 80108e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d028      	beq.n	8010944 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80108f2:	4b3a      	ldr	r3, [pc, #232]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80108f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010900:	4936      	ldr	r1, [pc, #216]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010902:	4313      	orrs	r3, r2
 8010904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801090c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010910:	d106      	bne.n	8010920 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010912:	4b32      	ldr	r3, [pc, #200]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010914:	68db      	ldr	r3, [r3, #12]
 8010916:	4a31      	ldr	r2, [pc, #196]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010918:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801091c:	60d3      	str	r3, [r2, #12]
 801091e:	e011      	b.n	8010944 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010924:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010928:	d10c      	bne.n	8010944 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	3304      	adds	r3, #4
 801092e:	2101      	movs	r1, #1
 8010930:	4618      	mov	r0, r3
 8010932:	f000 fe91 	bl	8011658 <RCCEx_PLLSAI1_Config>
 8010936:	4603      	mov	r3, r0
 8010938:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 801093a:	7cfb      	ldrb	r3, [r7, #19]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d001      	beq.n	8010944 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8010940:	7cfb      	ldrb	r3, [r7, #19]
 8010942:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801094c:	2b00      	cmp	r3, #0
 801094e:	d028      	beq.n	80109a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8010950:	4b22      	ldr	r3, [pc, #136]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010956:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801095e:	491f      	ldr	r1, [pc, #124]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010960:	4313      	orrs	r3, r2
 8010962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801096a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801096e:	d106      	bne.n	801097e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010970:	4b1a      	ldr	r3, [pc, #104]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	4a19      	ldr	r2, [pc, #100]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801097a:	60d3      	str	r3, [r2, #12]
 801097c:	e011      	b.n	80109a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010982:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010986:	d10c      	bne.n	80109a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	3304      	adds	r3, #4
 801098c:	2101      	movs	r1, #1
 801098e:	4618      	mov	r0, r3
 8010990:	f000 fe62 	bl	8011658 <RCCEx_PLLSAI1_Config>
 8010994:	4603      	mov	r3, r0
 8010996:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010998:	7cfb      	ldrb	r3, [r7, #19]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d001      	beq.n	80109a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 801099e:	7cfb      	ldrb	r3, [r7, #19]
 80109a0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d02a      	beq.n	8010a04 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80109ae:	4b0b      	ldr	r3, [pc, #44]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80109b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109bc:	4907      	ldr	r1, [pc, #28]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80109be:	4313      	orrs	r3, r2
 80109c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80109cc:	d108      	bne.n	80109e0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80109ce:	4b03      	ldr	r3, [pc, #12]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80109d0:	68db      	ldr	r3, [r3, #12]
 80109d2:	4a02      	ldr	r2, [pc, #8]	; (80109dc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80109d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80109d8:	60d3      	str	r3, [r2, #12]
 80109da:	e013      	b.n	8010a04 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80109dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80109e8:	d10c      	bne.n	8010a04 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	3304      	adds	r3, #4
 80109ee:	2101      	movs	r1, #1
 80109f0:	4618      	mov	r0, r3
 80109f2:	f000 fe31 	bl	8011658 <RCCEx_PLLSAI1_Config>
 80109f6:	4603      	mov	r3, r0
 80109f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80109fa:	7cfb      	ldrb	r3, [r7, #19]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d001      	beq.n	8010a04 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8010a00:	7cfb      	ldrb	r3, [r7, #19]
 8010a02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d02f      	beq.n	8010a70 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010a10:	4b2c      	ldr	r3, [pc, #176]	; (8010ac4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a1e:	4929      	ldr	r1, [pc, #164]	; (8010ac4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010a20:	4313      	orrs	r3, r2
 8010a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010a2e:	d10d      	bne.n	8010a4c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	3304      	adds	r3, #4
 8010a34:	2102      	movs	r1, #2
 8010a36:	4618      	mov	r0, r3
 8010a38:	f000 fe0e 	bl	8011658 <RCCEx_PLLSAI1_Config>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010a40:	7cfb      	ldrb	r3, [r7, #19]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d014      	beq.n	8010a70 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8010a46:	7cfb      	ldrb	r3, [r7, #19]
 8010a48:	74bb      	strb	r3, [r7, #18]
 8010a4a:	e011      	b.n	8010a70 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a54:	d10c      	bne.n	8010a70 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	3320      	adds	r3, #32
 8010a5a:	2102      	movs	r1, #2
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f000 feed 	bl	801183c <RCCEx_PLLSAI2_Config>
 8010a62:	4603      	mov	r3, r0
 8010a64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010a66:	7cfb      	ldrb	r3, [r7, #19]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d001      	beq.n	8010a70 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8010a6c:	7cfb      	ldrb	r3, [r7, #19]
 8010a6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d00b      	beq.n	8010a94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010a7c:	4b11      	ldr	r3, [pc, #68]	; (8010ac4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a82:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a8c:	490d      	ldr	r1, [pc, #52]	; (8010ac4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010a8e:	4313      	orrs	r3, r2
 8010a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d00b      	beq.n	8010ab8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010aa0:	4b08      	ldr	r3, [pc, #32]	; (8010ac4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010aa6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ab0:	4904      	ldr	r1, [pc, #16]	; (8010ac4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010ab2:	4313      	orrs	r3, r2
 8010ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8010ab8:	7cbb      	ldrb	r3, [r7, #18]
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3718      	adds	r7, #24
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	bf00      	nop
 8010ac4:	40021000 	.word	0x40021000

08010ac8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b088      	sub	sp, #32
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010ada:	d13e      	bne.n	8010b5a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8010adc:	4bb4      	ldr	r3, [pc, #720]	; (8010db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010ae6:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010aee:	d028      	beq.n	8010b42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010af6:	f200 858c 	bhi.w	8011612 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b00:	d005      	beq.n	8010b0e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b08:	d00e      	beq.n	8010b28 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8010b0a:	f000 bd82 	b.w	8011612 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010b0e:	4ba8      	ldr	r3, [pc, #672]	; (8010db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b14:	f003 0302 	and.w	r3, r3, #2
 8010b18:	2b02      	cmp	r3, #2
 8010b1a:	f040 857c 	bne.w	8011616 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 8010b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b22:	61fb      	str	r3, [r7, #28]
      break;
 8010b24:	f000 bd77 	b.w	8011616 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8010b28:	4ba1      	ldr	r3, [pc, #644]	; (8010db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010b2e:	f003 0302 	and.w	r3, r3, #2
 8010b32:	2b02      	cmp	r3, #2
 8010b34:	f040 8571 	bne.w	801161a <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 8010b38:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8010b3c:	61fb      	str	r3, [r7, #28]
      break;
 8010b3e:	f000 bd6c 	b.w	801161a <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010b42:	4b9b      	ldr	r3, [pc, #620]	; (8010db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010b4e:	f040 8566 	bne.w	801161e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 8010b52:	4b98      	ldr	r3, [pc, #608]	; (8010db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8010b54:	61fb      	str	r3, [r7, #28]
      break;
 8010b56:	f000 bd62 	b.w	801161e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010b5a:	4b95      	ldr	r3, [pc, #596]	; (8010db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010b5c:	68db      	ldr	r3, [r3, #12]
 8010b5e:	f003 0303 	and.w	r3, r3, #3
 8010b62:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	2b03      	cmp	r3, #3
 8010b68:	d036      	beq.n	8010bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	2b03      	cmp	r3, #3
 8010b6e:	d840      	bhi.n	8010bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	2b01      	cmp	r3, #1
 8010b74:	d003      	beq.n	8010b7e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	2b02      	cmp	r3, #2
 8010b7a:	d020      	beq.n	8010bbe <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8010b7c:	e039      	b.n	8010bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8010b7e:	4b8c      	ldr	r3, [pc, #560]	; (8010db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	f003 0302 	and.w	r3, r3, #2
 8010b86:	2b02      	cmp	r3, #2
 8010b88:	d116      	bne.n	8010bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8010b8a:	4b89      	ldr	r3, [pc, #548]	; (8010db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f003 0308 	and.w	r3, r3, #8
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d005      	beq.n	8010ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8010b96:	4b86      	ldr	r3, [pc, #536]	; (8010db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	091b      	lsrs	r3, r3, #4
 8010b9c:	f003 030f 	and.w	r3, r3, #15
 8010ba0:	e005      	b.n	8010bae <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8010ba2:	4b83      	ldr	r3, [pc, #524]	; (8010db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010ba8:	0a1b      	lsrs	r3, r3, #8
 8010baa:	f003 030f 	and.w	r3, r3, #15
 8010bae:	4a82      	ldr	r2, [pc, #520]	; (8010db8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8010bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8010bb6:	e01f      	b.n	8010bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	61bb      	str	r3, [r7, #24]
      break;
 8010bbc:	e01c      	b.n	8010bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010bbe:	4b7c      	ldr	r3, [pc, #496]	; (8010db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010bca:	d102      	bne.n	8010bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8010bcc:	4b7b      	ldr	r3, [pc, #492]	; (8010dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8010bce:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8010bd0:	e012      	b.n	8010bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	61bb      	str	r3, [r7, #24]
      break;
 8010bd6:	e00f      	b.n	8010bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010bd8:	4b75      	ldr	r3, [pc, #468]	; (8010db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010be4:	d102      	bne.n	8010bec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8010be6:	4b76      	ldr	r3, [pc, #472]	; (8010dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8010be8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8010bea:	e005      	b.n	8010bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8010bec:	2300      	movs	r3, #0
 8010bee:	61bb      	str	r3, [r7, #24]
      break;
 8010bf0:	e002      	b.n	8010bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	61bb      	str	r3, [r7, #24]
      break;
 8010bf6:	bf00      	nop
    }

    switch(PeriphClk)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010bfe:	f000 842a 	beq.w	8011456 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c08:	f200 850b 	bhi.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010c12:	f000 80df 	beq.w	8010dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010c1c:	f200 8501 	bhi.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010c26:	f000 80d5 	beq.w	8010dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010c30:	f200 84f7 	bhi.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c3a:	f000 8377 	beq.w	801132c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c44:	f200 84ed 	bhi.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c4e:	f000 84c3 	beq.w	80115d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c58:	f200 84e3 	bhi.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010c62:	f000 82e6 	beq.w	8011232 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010c6c:	f200 84d9 	bhi.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c76:	f000 80ad 	beq.w	8010dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c80:	f200 84cf 	bhi.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c8a:	f000 809b 	beq.w	8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c94:	f200 84c5 	bhi.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010c9e:	d07f      	beq.n	8010da0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010ca6:	f200 84bc 	bhi.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010cb0:	f000 8448 	beq.w	8011544 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010cba:	f200 84b2 	bhi.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010cc4:	f000 83f0 	beq.w	80114a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010cce:	f200 84a8 	bhi.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cd8:	f000 8391 	beq.w	80113fe <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ce2:	f200 849e 	bhi.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2b80      	cmp	r3, #128	; 0x80
 8010cea:	f000 835c 	beq.w	80113a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2b80      	cmp	r3, #128	; 0x80
 8010cf2:	f200 8496 	bhi.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2b20      	cmp	r3, #32
 8010cfa:	d84b      	bhi.n	8010d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	f000 848f 	beq.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	3b01      	subs	r3, #1
 8010d08:	2b1f      	cmp	r3, #31
 8010d0a:	f200 848a 	bhi.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010d0e:	a201      	add	r2, pc, #4	; (adr r2, 8010d14 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 8010d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d14:	08010f2b 	.word	0x08010f2b
 8010d18:	08010f9b 	.word	0x08010f9b
 8010d1c:	08011623 	.word	0x08011623
 8010d20:	0801102f 	.word	0x0801102f
 8010d24:	08011623 	.word	0x08011623
 8010d28:	08011623 	.word	0x08011623
 8010d2c:	08011623 	.word	0x08011623
 8010d30:	080110b7 	.word	0x080110b7
 8010d34:	08011623 	.word	0x08011623
 8010d38:	08011623 	.word	0x08011623
 8010d3c:	08011623 	.word	0x08011623
 8010d40:	08011623 	.word	0x08011623
 8010d44:	08011623 	.word	0x08011623
 8010d48:	08011623 	.word	0x08011623
 8010d4c:	08011623 	.word	0x08011623
 8010d50:	0801112f 	.word	0x0801112f
 8010d54:	08011623 	.word	0x08011623
 8010d58:	08011623 	.word	0x08011623
 8010d5c:	08011623 	.word	0x08011623
 8010d60:	08011623 	.word	0x08011623
 8010d64:	08011623 	.word	0x08011623
 8010d68:	08011623 	.word	0x08011623
 8010d6c:	08011623 	.word	0x08011623
 8010d70:	08011623 	.word	0x08011623
 8010d74:	08011623 	.word	0x08011623
 8010d78:	08011623 	.word	0x08011623
 8010d7c:	08011623 	.word	0x08011623
 8010d80:	08011623 	.word	0x08011623
 8010d84:	08011623 	.word	0x08011623
 8010d88:	08011623 	.word	0x08011623
 8010d8c:	08011623 	.word	0x08011623
 8010d90:	080111b1 	.word	0x080111b1
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b40      	cmp	r3, #64	; 0x40
 8010d98:	f000 82d9 	beq.w	801134e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8010d9c:	f000 bc41 	b.w	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8010da0:	69b9      	ldr	r1, [r7, #24]
 8010da2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010da6:	f000 fe25 	bl	80119f4 <RCCEx_GetSAIxPeriphCLKFreq>
 8010daa:	61f8      	str	r0, [r7, #28]
      break;
 8010dac:	f000 bc3a 	b.w	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8010db0:	40021000 	.word	0x40021000
 8010db4:	0003d090 	.word	0x0003d090
 8010db8:	08019f64 	.word	0x08019f64
 8010dbc:	00f42400 	.word	0x00f42400
 8010dc0:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8010dc4:	69b9      	ldr	r1, [r7, #24]
 8010dc6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8010dca:	f000 fe13 	bl	80119f4 <RCCEx_GetSAIxPeriphCLKFreq>
 8010dce:	61f8      	str	r0, [r7, #28]
      break;
 8010dd0:	f000 bc28 	b.w	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8010dd4:	4ba6      	ldr	r3, [pc, #664]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dda:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8010dde:	613b      	str	r3, [r7, #16]
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010de6:	d015      	beq.n	8010e14 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010dee:	f200 8092 	bhi.w	8010f16 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010df8:	d029      	beq.n	8010e4e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010e00:	f200 8089 	bhi.w	8010f16 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d07b      	beq.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010e10:	d04a      	beq.n	8010ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 8010e12:	e080      	b.n	8010f16 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8010e14:	4b96      	ldr	r3, [pc, #600]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	f003 0302 	and.w	r3, r3, #2
 8010e1c:	2b02      	cmp	r3, #2
 8010e1e:	d17c      	bne.n	8010f1a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8010e20:	4b93      	ldr	r3, [pc, #588]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	f003 0308 	and.w	r3, r3, #8
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d005      	beq.n	8010e38 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8010e2c:	4b90      	ldr	r3, [pc, #576]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	091b      	lsrs	r3, r3, #4
 8010e32:	f003 030f 	and.w	r3, r3, #15
 8010e36:	e005      	b.n	8010e44 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8010e38:	4b8d      	ldr	r3, [pc, #564]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010e3e:	0a1b      	lsrs	r3, r3, #8
 8010e40:	f003 030f 	and.w	r3, r3, #15
 8010e44:	4a8b      	ldr	r2, [pc, #556]	; (8011074 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8010e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e4a:	61fb      	str	r3, [r7, #28]
          break;
 8010e4c:	e065      	b.n	8010f1a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8010e4e:	4b88      	ldr	r3, [pc, #544]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010e5a:	d160      	bne.n	8010f1e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8010e5c:	4b84      	ldr	r3, [pc, #528]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e68:	d159      	bne.n	8010f1e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8010e6a:	4b81      	ldr	r3, [pc, #516]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e6c:	68db      	ldr	r3, [r3, #12]
 8010e6e:	0a1b      	lsrs	r3, r3, #8
 8010e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e74:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8010e76:	69bb      	ldr	r3, [r7, #24]
 8010e78:	68fa      	ldr	r2, [r7, #12]
 8010e7a:	fb03 f202 	mul.w	r2, r3, r2
 8010e7e:	4b7c      	ldr	r3, [pc, #496]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e80:	68db      	ldr	r3, [r3, #12]
 8010e82:	091b      	lsrs	r3, r3, #4
 8010e84:	f003 0307 	and.w	r3, r3, #7
 8010e88:	3301      	adds	r3, #1
 8010e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e8e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8010e90:	4b77      	ldr	r3, [pc, #476]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e92:	68db      	ldr	r3, [r3, #12]
 8010e94:	0d5b      	lsrs	r3, r3, #21
 8010e96:	f003 0303 	and.w	r3, r3, #3
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	005b      	lsls	r3, r3, #1
 8010e9e:	69ba      	ldr	r2, [r7, #24]
 8010ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ea4:	61fb      	str	r3, [r7, #28]
          break;
 8010ea6:	e03a      	b.n	8010f1e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8010ea8:	4b71      	ldr	r3, [pc, #452]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010eb4:	d135      	bne.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8010eb6:	4b6e      	ldr	r3, [pc, #440]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010eb8:	691b      	ldr	r3, [r3, #16]
 8010eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ec2:	d12e      	bne.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8010ec4:	4b6a      	ldr	r3, [pc, #424]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010ec6:	691b      	ldr	r3, [r3, #16]
 8010ec8:	0a1b      	lsrs	r3, r3, #8
 8010eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ece:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8010ed0:	69bb      	ldr	r3, [r7, #24]
 8010ed2:	68fa      	ldr	r2, [r7, #12]
 8010ed4:	fb03 f202 	mul.w	r2, r3, r2
 8010ed8:	4b65      	ldr	r3, [pc, #404]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010eda:	68db      	ldr	r3, [r3, #12]
 8010edc:	091b      	lsrs	r3, r3, #4
 8010ede:	f003 0307 	and.w	r3, r3, #7
 8010ee2:	3301      	adds	r3, #1
 8010ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ee8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8010eea:	4b61      	ldr	r3, [pc, #388]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010eec:	691b      	ldr	r3, [r3, #16]
 8010eee:	0d5b      	lsrs	r3, r3, #21
 8010ef0:	f003 0303 	and.w	r3, r3, #3
 8010ef4:	3301      	adds	r3, #1
 8010ef6:	005b      	lsls	r3, r3, #1
 8010ef8:	69ba      	ldr	r2, [r7, #24]
 8010efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8010efe:	61fb      	str	r3, [r7, #28]
          break;
 8010f00:	e00f      	b.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8010f02:	4b5b      	ldr	r3, [pc, #364]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010f04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010f08:	f003 0302 	and.w	r3, r3, #2
 8010f0c:	2b02      	cmp	r3, #2
 8010f0e:	d10a      	bne.n	8010f26 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8010f10:	4b59      	ldr	r3, [pc, #356]	; (8011078 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8010f12:	61fb      	str	r3, [r7, #28]
          break;
 8010f14:	e007      	b.n	8010f26 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 8010f16:	bf00      	nop
 8010f18:	e384      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010f1a:	bf00      	nop
 8010f1c:	e382      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010f1e:	bf00      	nop
 8010f20:	e380      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010f22:	bf00      	nop
 8010f24:	e37e      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010f26:	bf00      	nop
        break;
 8010f28:	e37c      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8010f2a:	4b51      	ldr	r3, [pc, #324]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f30:	f003 0303 	and.w	r3, r3, #3
 8010f34:	613b      	str	r3, [r7, #16]
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	2b03      	cmp	r3, #3
 8010f3a:	d828      	bhi.n	8010f8e <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8010f3c:	a201      	add	r2, pc, #4	; (adr r2, 8010f44 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8010f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f42:	bf00      	nop
 8010f44:	08010f55 	.word	0x08010f55
 8010f48:	08010f5d 	.word	0x08010f5d
 8010f4c:	08010f65 	.word	0x08010f65
 8010f50:	08010f79 	.word	0x08010f79
          frequency = HAL_RCC_GetPCLK2Freq();
 8010f54:	f7ff fa46 	bl	80103e4 <HAL_RCC_GetPCLK2Freq>
 8010f58:	61f8      	str	r0, [r7, #28]
          break;
 8010f5a:	e01d      	b.n	8010f98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8010f5c:	f7ff f994 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 8010f60:	61f8      	str	r0, [r7, #28]
          break;
 8010f62:	e019      	b.n	8010f98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010f64:	4b42      	ldr	r3, [pc, #264]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010f70:	d10f      	bne.n	8010f92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 8010f72:	4b42      	ldr	r3, [pc, #264]	; (801107c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8010f74:	61fb      	str	r3, [r7, #28]
          break;
 8010f76:	e00c      	b.n	8010f92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010f78:	4b3d      	ldr	r3, [pc, #244]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f7e:	f003 0302 	and.w	r3, r3, #2
 8010f82:	2b02      	cmp	r3, #2
 8010f84:	d107      	bne.n	8010f96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 8010f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f8a:	61fb      	str	r3, [r7, #28]
          break;
 8010f8c:	e003      	b.n	8010f96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8010f8e:	bf00      	nop
 8010f90:	e348      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010f92:	bf00      	nop
 8010f94:	e346      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010f96:	bf00      	nop
        break;
 8010f98:	e344      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8010f9a:	4b35      	ldr	r3, [pc, #212]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010fa0:	f003 030c 	and.w	r3, r3, #12
 8010fa4:	613b      	str	r3, [r7, #16]
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	2b0c      	cmp	r3, #12
 8010faa:	d83a      	bhi.n	8011022 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8010fac:	a201      	add	r2, pc, #4	; (adr r2, 8010fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8010fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fb2:	bf00      	nop
 8010fb4:	08010fe9 	.word	0x08010fe9
 8010fb8:	08011023 	.word	0x08011023
 8010fbc:	08011023 	.word	0x08011023
 8010fc0:	08011023 	.word	0x08011023
 8010fc4:	08010ff1 	.word	0x08010ff1
 8010fc8:	08011023 	.word	0x08011023
 8010fcc:	08011023 	.word	0x08011023
 8010fd0:	08011023 	.word	0x08011023
 8010fd4:	08010ff9 	.word	0x08010ff9
 8010fd8:	08011023 	.word	0x08011023
 8010fdc:	08011023 	.word	0x08011023
 8010fe0:	08011023 	.word	0x08011023
 8010fe4:	0801100d 	.word	0x0801100d
          frequency = HAL_RCC_GetPCLK1Freq();
 8010fe8:	f7ff f9e6 	bl	80103b8 <HAL_RCC_GetPCLK1Freq>
 8010fec:	61f8      	str	r0, [r7, #28]
          break;
 8010fee:	e01d      	b.n	801102c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8010ff0:	f7ff f94a 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 8010ff4:	61f8      	str	r0, [r7, #28]
          break;
 8010ff6:	e019      	b.n	801102c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010ff8:	4b1d      	ldr	r3, [pc, #116]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011004:	d10f      	bne.n	8011026 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 8011006:	4b1d      	ldr	r3, [pc, #116]	; (801107c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8011008:	61fb      	str	r3, [r7, #28]
          break;
 801100a:	e00c      	b.n	8011026 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801100c:	4b18      	ldr	r3, [pc, #96]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801100e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011012:	f003 0302 	and.w	r3, r3, #2
 8011016:	2b02      	cmp	r3, #2
 8011018:	d107      	bne.n	801102a <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 801101a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801101e:	61fb      	str	r3, [r7, #28]
          break;
 8011020:	e003      	b.n	801102a <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 8011022:	bf00      	nop
 8011024:	e2fe      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011026:	bf00      	nop
 8011028:	e2fc      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801102a:	bf00      	nop
        break;
 801102c:	e2fa      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 801102e:	4b10      	ldr	r3, [pc, #64]	; (8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011034:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011038:	613b      	str	r3, [r7, #16]
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	2b30      	cmp	r3, #48	; 0x30
 801103e:	d029      	beq.n	8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	2b30      	cmp	r3, #48	; 0x30
 8011044:	d831      	bhi.n	80110aa <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	2b20      	cmp	r3, #32
 801104a:	d019      	beq.n	8011080 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	2b20      	cmp	r3, #32
 8011050:	d82b      	bhi.n	80110aa <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d003      	beq.n	8011060 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	2b10      	cmp	r3, #16
 801105c:	d004      	beq.n	8011068 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 801105e:	e024      	b.n	80110aa <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011060:	f7ff f9aa 	bl	80103b8 <HAL_RCC_GetPCLK1Freq>
 8011064:	61f8      	str	r0, [r7, #28]
          break;
 8011066:	e025      	b.n	80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8011068:	f7ff f90e 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 801106c:	61f8      	str	r0, [r7, #28]
          break;
 801106e:	e021      	b.n	80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8011070:	40021000 	.word	0x40021000
 8011074:	08019f64 	.word	0x08019f64
 8011078:	02dc6c00 	.word	0x02dc6c00
 801107c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011080:	4b8f      	ldr	r3, [pc, #572]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801108c:	d10f      	bne.n	80110ae <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 801108e:	4b8d      	ldr	r3, [pc, #564]	; (80112c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8011090:	61fb      	str	r3, [r7, #28]
          break;
 8011092:	e00c      	b.n	80110ae <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011094:	4b8a      	ldr	r3, [pc, #552]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801109a:	f003 0302 	and.w	r3, r3, #2
 801109e:	2b02      	cmp	r3, #2
 80110a0:	d107      	bne.n	80110b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 80110a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80110a6:	61fb      	str	r3, [r7, #28]
          break;
 80110a8:	e003      	b.n	80110b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 80110aa:	bf00      	nop
 80110ac:	e2ba      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80110ae:	bf00      	nop
 80110b0:	e2b8      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80110b2:	bf00      	nop
        break;
 80110b4:	e2b6      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80110b6:	4b82      	ldr	r3, [pc, #520]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80110b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80110c0:	613b      	str	r3, [r7, #16]
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	2bc0      	cmp	r3, #192	; 0xc0
 80110c6:	d021      	beq.n	801110c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	2bc0      	cmp	r3, #192	; 0xc0
 80110cc:	d829      	bhi.n	8011122 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80110ce:	693b      	ldr	r3, [r7, #16]
 80110d0:	2b80      	cmp	r3, #128	; 0x80
 80110d2:	d011      	beq.n	80110f8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	2b80      	cmp	r3, #128	; 0x80
 80110d8:	d823      	bhi.n	8011122 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d003      	beq.n	80110e8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 80110e0:	693b      	ldr	r3, [r7, #16]
 80110e2:	2b40      	cmp	r3, #64	; 0x40
 80110e4:	d004      	beq.n	80110f0 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 80110e6:	e01c      	b.n	8011122 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80110e8:	f7ff f966 	bl	80103b8 <HAL_RCC_GetPCLK1Freq>
 80110ec:	61f8      	str	r0, [r7, #28]
          break;
 80110ee:	e01d      	b.n	801112c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 80110f0:	f7ff f8ca 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 80110f4:	61f8      	str	r0, [r7, #28]
          break;
 80110f6:	e019      	b.n	801112c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80110f8:	4b71      	ldr	r3, [pc, #452]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011104:	d10f      	bne.n	8011126 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 8011106:	4b6f      	ldr	r3, [pc, #444]	; (80112c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8011108:	61fb      	str	r3, [r7, #28]
          break;
 801110a:	e00c      	b.n	8011126 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801110c:	4b6c      	ldr	r3, [pc, #432]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801110e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011112:	f003 0302 	and.w	r3, r3, #2
 8011116:	2b02      	cmp	r3, #2
 8011118:	d107      	bne.n	801112a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 801111a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801111e:	61fb      	str	r3, [r7, #28]
          break;
 8011120:	e003      	b.n	801112a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 8011122:	bf00      	nop
 8011124:	e27e      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011126:	bf00      	nop
 8011128:	e27c      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801112a:	bf00      	nop
        break;
 801112c:	e27a      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 801112e:	4b64      	ldr	r3, [pc, #400]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011138:	613b      	str	r3, [r7, #16]
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011140:	d025      	beq.n	801118e <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011148:	d82c      	bhi.n	80111a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011150:	d013      	beq.n	801117a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011158:	d824      	bhi.n	80111a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d004      	beq.n	801116a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8011160:	693b      	ldr	r3, [r7, #16]
 8011162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011166:	d004      	beq.n	8011172 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 8011168:	e01c      	b.n	80111a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 801116a:	f7ff f925 	bl	80103b8 <HAL_RCC_GetPCLK1Freq>
 801116e:	61f8      	str	r0, [r7, #28]
          break;
 8011170:	e01d      	b.n	80111ae <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 8011172:	f7ff f889 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 8011176:	61f8      	str	r0, [r7, #28]
          break;
 8011178:	e019      	b.n	80111ae <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801117a:	4b51      	ldr	r3, [pc, #324]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011186:	d10f      	bne.n	80111a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 8011188:	4b4e      	ldr	r3, [pc, #312]	; (80112c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 801118a:	61fb      	str	r3, [r7, #28]
          break;
 801118c:	e00c      	b.n	80111a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801118e:	4b4c      	ldr	r3, [pc, #304]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011194:	f003 0302 	and.w	r3, r3, #2
 8011198:	2b02      	cmp	r3, #2
 801119a:	d107      	bne.n	80111ac <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 801119c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80111a0:	61fb      	str	r3, [r7, #28]
          break;
 80111a2:	e003      	b.n	80111ac <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 80111a4:	bf00      	nop
 80111a6:	e23d      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80111a8:	bf00      	nop
 80111aa:	e23b      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80111ac:	bf00      	nop
        break;
 80111ae:	e239      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80111b0:	4b43      	ldr	r3, [pc, #268]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80111b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80111b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80111ba:	613b      	str	r3, [r7, #16]
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80111c2:	d025      	beq.n	8011210 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80111ca:	d82c      	bhi.n	8011226 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80111d2:	d013      	beq.n	80111fc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80111da:	d824      	bhi.n	8011226 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d004      	beq.n	80111ec <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80111e8:	d004      	beq.n	80111f4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 80111ea:	e01c      	b.n	8011226 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80111ec:	f7ff f8e4 	bl	80103b8 <HAL_RCC_GetPCLK1Freq>
 80111f0:	61f8      	str	r0, [r7, #28]
          break;
 80111f2:	e01d      	b.n	8011230 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 80111f4:	f7ff f848 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 80111f8:	61f8      	str	r0, [r7, #28]
          break;
 80111fa:	e019      	b.n	8011230 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80111fc:	4b30      	ldr	r3, [pc, #192]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011208:	d10f      	bne.n	801122a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 801120a:	4b2e      	ldr	r3, [pc, #184]	; (80112c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 801120c:	61fb      	str	r3, [r7, #28]
          break;
 801120e:	e00c      	b.n	801122a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011210:	4b2b      	ldr	r3, [pc, #172]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011216:	f003 0302 	and.w	r3, r3, #2
 801121a:	2b02      	cmp	r3, #2
 801121c:	d107      	bne.n	801122e <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 801121e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011222:	61fb      	str	r3, [r7, #28]
          break;
 8011224:	e003      	b.n	801122e <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 8011226:	bf00      	nop
 8011228:	e1fc      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801122a:	bf00      	nop
 801122c:	e1fa      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801122e:	bf00      	nop
        break;
 8011230:	e1f8      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8011232:	4b23      	ldr	r3, [pc, #140]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011238:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801123c:	613b      	str	r3, [r7, #16]
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011244:	d00c      	beq.n	8011260 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801124c:	d868      	bhi.n	8011320 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011254:	d008      	beq.n	8011268 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8011256:	693b      	ldr	r3, [r7, #16]
 8011258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801125c:	d034      	beq.n	80112c8 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 801125e:	e05f      	b.n	8011320 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 8011260:	f7ff f812 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 8011264:	61f8      	str	r0, [r7, #28]
          break;
 8011266:	e060      	b.n	801132a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8011268:	4b15      	ldr	r3, [pc, #84]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011274:	d156      	bne.n	8011324 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8011276:	4b12      	ldr	r3, [pc, #72]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011278:	691b      	ldr	r3, [r3, #16]
 801127a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801127e:	2b00      	cmp	r3, #0
 8011280:	d050      	beq.n	8011324 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8011282:	4b0f      	ldr	r3, [pc, #60]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011284:	691b      	ldr	r3, [r3, #16]
 8011286:	0a1b      	lsrs	r3, r3, #8
 8011288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801128c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 801128e:	69bb      	ldr	r3, [r7, #24]
 8011290:	68fa      	ldr	r2, [r7, #12]
 8011292:	fb03 f202 	mul.w	r2, r3, r2
 8011296:	4b0a      	ldr	r3, [pc, #40]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011298:	68db      	ldr	r3, [r3, #12]
 801129a:	091b      	lsrs	r3, r3, #4
 801129c:	f003 0307 	and.w	r3, r3, #7
 80112a0:	3301      	adds	r3, #1
 80112a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80112a6:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80112a8:	4b05      	ldr	r3, [pc, #20]	; (80112c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80112aa:	691b      	ldr	r3, [r3, #16]
 80112ac:	0e5b      	lsrs	r3, r3, #25
 80112ae:	f003 0303 	and.w	r3, r3, #3
 80112b2:	3301      	adds	r3, #1
 80112b4:	005b      	lsls	r3, r3, #1
 80112b6:	69ba      	ldr	r2, [r7, #24]
 80112b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80112bc:	61fb      	str	r3, [r7, #28]
          break;
 80112be:	e031      	b.n	8011324 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 80112c0:	40021000 	.word	0x40021000
 80112c4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80112c8:	4b9c      	ldr	r3, [pc, #624]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80112d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80112d4:	d128      	bne.n	8011328 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 80112d6:	4b99      	ldr	r3, [pc, #612]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80112d8:	695b      	ldr	r3, [r3, #20]
 80112da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d022      	beq.n	8011328 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80112e2:	4b96      	ldr	r3, [pc, #600]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80112e4:	695b      	ldr	r3, [r3, #20]
 80112e6:	0a1b      	lsrs	r3, r3, #8
 80112e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112ec:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80112ee:	69bb      	ldr	r3, [r7, #24]
 80112f0:	68fa      	ldr	r2, [r7, #12]
 80112f2:	fb03 f202 	mul.w	r2, r3, r2
 80112f6:	4b91      	ldr	r3, [pc, #580]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	091b      	lsrs	r3, r3, #4
 80112fc:	f003 0307 	and.w	r3, r3, #7
 8011300:	3301      	adds	r3, #1
 8011302:	fbb2 f3f3 	udiv	r3, r2, r3
 8011306:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8011308:	4b8c      	ldr	r3, [pc, #560]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801130a:	695b      	ldr	r3, [r3, #20]
 801130c:	0e5b      	lsrs	r3, r3, #25
 801130e:	f003 0303 	and.w	r3, r3, #3
 8011312:	3301      	adds	r3, #1
 8011314:	005b      	lsls	r3, r3, #1
 8011316:	69ba      	ldr	r2, [r7, #24]
 8011318:	fbb2 f3f3 	udiv	r3, r2, r3
 801131c:	61fb      	str	r3, [r7, #28]
          break;
 801131e:	e003      	b.n	8011328 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8011320:	bf00      	nop
 8011322:	e17f      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011324:	bf00      	nop
 8011326:	e17d      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011328:	bf00      	nop
        break;
 801132a:	e17b      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 801132c:	4b83      	ldr	r3, [pc, #524]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801132e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011336:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d103      	bne.n	8011346 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 801133e:	f7ff f851 	bl	80103e4 <HAL_RCC_GetPCLK2Freq>
 8011342:	61f8      	str	r0, [r7, #28]
        break;
 8011344:	e16e      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 8011346:	f7fe ff9f 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 801134a:	61f8      	str	r0, [r7, #28]
        break;
 801134c:	e16a      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 801134e:	4b7b      	ldr	r3, [pc, #492]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011354:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8011358:	613b      	str	r3, [r7, #16]
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011360:	d013      	beq.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011368:	d819      	bhi.n	801139e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d004      	beq.n	801137a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011376:	d004      	beq.n	8011382 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8011378:	e011      	b.n	801139e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 801137a:	f7ff f81d 	bl	80103b8 <HAL_RCC_GetPCLK1Freq>
 801137e:	61f8      	str	r0, [r7, #28]
          break;
 8011380:	e010      	b.n	80113a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8011382:	f7fe ff81 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 8011386:	61f8      	str	r0, [r7, #28]
          break;
 8011388:	e00c      	b.n	80113a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801138a:	4b6c      	ldr	r3, [pc, #432]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011396:	d104      	bne.n	80113a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 8011398:	4b69      	ldr	r3, [pc, #420]	; (8011540 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 801139a:	61fb      	str	r3, [r7, #28]
          break;
 801139c:	e001      	b.n	80113a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 801139e:	bf00      	nop
 80113a0:	e140      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80113a2:	bf00      	nop
        break;
 80113a4:	e13e      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80113a6:	4b65      	ldr	r3, [pc, #404]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80113a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80113ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80113b0:	613b      	str	r3, [r7, #16]
 80113b2:	693b      	ldr	r3, [r7, #16]
 80113b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80113b8:	d013      	beq.n	80113e2 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80113c0:	d819      	bhi.n	80113f6 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d004      	beq.n	80113d2 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80113ce:	d004      	beq.n	80113da <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 80113d0:	e011      	b.n	80113f6 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80113d2:	f7fe fff1 	bl	80103b8 <HAL_RCC_GetPCLK1Freq>
 80113d6:	61f8      	str	r0, [r7, #28]
          break;
 80113d8:	e010      	b.n	80113fc <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 80113da:	f7fe ff55 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 80113de:	61f8      	str	r0, [r7, #28]
          break;
 80113e0:	e00c      	b.n	80113fc <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80113e2:	4b56      	ldr	r3, [pc, #344]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80113ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80113ee:	d104      	bne.n	80113fa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 80113f0:	4b53      	ldr	r3, [pc, #332]	; (8011540 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80113f2:	61fb      	str	r3, [r7, #28]
          break;
 80113f4:	e001      	b.n	80113fa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 80113f6:	bf00      	nop
 80113f8:	e114      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80113fa:	bf00      	nop
        break;
 80113fc:	e112      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80113fe:	4b4f      	ldr	r3, [pc, #316]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011408:	613b      	str	r3, [r7, #16]
 801140a:	693b      	ldr	r3, [r7, #16]
 801140c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011410:	d013      	beq.n	801143a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011418:	d819      	bhi.n	801144e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d004      	beq.n	801142a <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8011420:	693b      	ldr	r3, [r7, #16]
 8011422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011426:	d004      	beq.n	8011432 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 8011428:	e011      	b.n	801144e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 801142a:	f7fe ffc5 	bl	80103b8 <HAL_RCC_GetPCLK1Freq>
 801142e:	61f8      	str	r0, [r7, #28]
          break;
 8011430:	e010      	b.n	8011454 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 8011432:	f7fe ff29 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 8011436:	61f8      	str	r0, [r7, #28]
          break;
 8011438:	e00c      	b.n	8011454 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801143a:	4b40      	ldr	r3, [pc, #256]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011446:	d104      	bne.n	8011452 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 8011448:	4b3d      	ldr	r3, [pc, #244]	; (8011540 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 801144a:	61fb      	str	r3, [r7, #28]
          break;
 801144c:	e001      	b.n	8011452 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 801144e:	bf00      	nop
 8011450:	e0e8      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011452:	bf00      	nop
        break;
 8011454:	e0e6      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8011456:	4b39      	ldr	r3, [pc, #228]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011458:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801145c:	f003 0303 	and.w	r3, r3, #3
 8011460:	613b      	str	r3, [r7, #16]
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	2b02      	cmp	r3, #2
 8011466:	d011      	beq.n	801148c <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	2b02      	cmp	r3, #2
 801146c:	d818      	bhi.n	80114a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d003      	beq.n	801147c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	2b01      	cmp	r3, #1
 8011478:	d004      	beq.n	8011484 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 801147a:	e011      	b.n	80114a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 801147c:	f7fe ff9c 	bl	80103b8 <HAL_RCC_GetPCLK1Freq>
 8011480:	61f8      	str	r0, [r7, #28]
          break;
 8011482:	e010      	b.n	80114a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 8011484:	f7fe ff00 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 8011488:	61f8      	str	r0, [r7, #28]
          break;
 801148a:	e00c      	b.n	80114a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801148c:	4b2b      	ldr	r3, [pc, #172]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011498:	d104      	bne.n	80114a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 801149a:	4b29      	ldr	r3, [pc, #164]	; (8011540 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 801149c:	61fb      	str	r3, [r7, #28]
          break;
 801149e:	e001      	b.n	80114a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 80114a0:	bf00      	nop
 80114a2:	e0bf      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80114a4:	bf00      	nop
        break;
 80114a6:	e0bd      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80114a8:	4b24      	ldr	r3, [pc, #144]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80114aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80114ae:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80114b2:	613b      	str	r3, [r7, #16]
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80114ba:	d02c      	beq.n	8011516 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80114c2:	d833      	bhi.n	801152c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80114ca:	d01a      	beq.n	8011502 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80114d2:	d82b      	bhi.n	801152c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d004      	beq.n	80114e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80114e0:	d004      	beq.n	80114ec <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 80114e2:	e023      	b.n	801152c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80114e4:	f7fe ff68 	bl	80103b8 <HAL_RCC_GetPCLK1Freq>
 80114e8:	61f8      	str	r0, [r7, #28]
          break;
 80114ea:	e026      	b.n	801153a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80114ec:	4b13      	ldr	r3, [pc, #76]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80114ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80114f2:	f003 0302 	and.w	r3, r3, #2
 80114f6:	2b02      	cmp	r3, #2
 80114f8:	d11a      	bne.n	8011530 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 80114fa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80114fe:	61fb      	str	r3, [r7, #28]
          break;
 8011500:	e016      	b.n	8011530 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011502:	4b0e      	ldr	r3, [pc, #56]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801150a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801150e:	d111      	bne.n	8011534 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8011510:	4b0b      	ldr	r3, [pc, #44]	; (8011540 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8011512:	61fb      	str	r3, [r7, #28]
          break;
 8011514:	e00e      	b.n	8011534 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011516:	4b09      	ldr	r3, [pc, #36]	; (801153c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801151c:	f003 0302 	and.w	r3, r3, #2
 8011520:	2b02      	cmp	r3, #2
 8011522:	d109      	bne.n	8011538 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8011524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011528:	61fb      	str	r3, [r7, #28]
          break;
 801152a:	e005      	b.n	8011538 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 801152c:	bf00      	nop
 801152e:	e079      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011530:	bf00      	nop
 8011532:	e077      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011534:	bf00      	nop
 8011536:	e075      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011538:	bf00      	nop
        break;
 801153a:	e073      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 801153c:	40021000 	.word	0x40021000
 8011540:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8011544:	4b3a      	ldr	r3, [pc, #232]	; (8011630 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8011546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801154a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 801154e:	613b      	str	r3, [r7, #16]
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011556:	d02c      	beq.n	80115b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801155e:	d833      	bhi.n	80115c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011566:	d01a      	beq.n	801159e <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801156e:	d82b      	bhi.n	80115c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d004      	beq.n	8011580 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801157c:	d004      	beq.n	8011588 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 801157e:	e023      	b.n	80115c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011580:	f7fe ff1a 	bl	80103b8 <HAL_RCC_GetPCLK1Freq>
 8011584:	61f8      	str	r0, [r7, #28]
          break;
 8011586:	e026      	b.n	80115d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8011588:	4b29      	ldr	r3, [pc, #164]	; (8011630 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 801158a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801158e:	f003 0302 	and.w	r3, r3, #2
 8011592:	2b02      	cmp	r3, #2
 8011594:	d11a      	bne.n	80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 8011596:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 801159a:	61fb      	str	r3, [r7, #28]
          break;
 801159c:	e016      	b.n	80115cc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801159e:	4b24      	ldr	r3, [pc, #144]	; (8011630 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80115a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115aa:	d111      	bne.n	80115d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 80115ac:	4b21      	ldr	r3, [pc, #132]	; (8011634 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 80115ae:	61fb      	str	r3, [r7, #28]
          break;
 80115b0:	e00e      	b.n	80115d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80115b2:	4b1f      	ldr	r3, [pc, #124]	; (8011630 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80115b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80115b8:	f003 0302 	and.w	r3, r3, #2
 80115bc:	2b02      	cmp	r3, #2
 80115be:	d109      	bne.n	80115d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 80115c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80115c4:	61fb      	str	r3, [r7, #28]
          break;
 80115c6:	e005      	b.n	80115d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80115c8:	bf00      	nop
 80115ca:	e02b      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80115cc:	bf00      	nop
 80115ce:	e029      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80115d0:	bf00      	nop
 80115d2:	e027      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80115d4:	bf00      	nop
        break;
 80115d6:	e025      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80115d8:	4b15      	ldr	r3, [pc, #84]	; (8011630 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80115da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80115e2:	613b      	str	r3, [r7, #16]
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d004      	beq.n	80115f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 80115ea:	693b      	ldr	r3, [r7, #16]
 80115ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115f0:	d004      	beq.n	80115fc <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 80115f2:	e00d      	b.n	8011610 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 80115f4:	f7fe fee0 	bl	80103b8 <HAL_RCC_GetPCLK1Freq>
 80115f8:	61f8      	str	r0, [r7, #28]
          break;
 80115fa:	e009      	b.n	8011610 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80115fc:	4b0c      	ldr	r3, [pc, #48]	; (8011630 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011608:	d101      	bne.n	801160e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 801160a:	4b0a      	ldr	r3, [pc, #40]	; (8011634 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 801160c:	61fb      	str	r3, [r7, #28]
          break;
 801160e:	bf00      	nop
        break;
 8011610:	e008      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8011612:	bf00      	nop
 8011614:	e006      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8011616:	bf00      	nop
 8011618:	e004      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 801161a:	bf00      	nop
 801161c:	e002      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 801161e:	bf00      	nop
 8011620:	e000      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8011622:	bf00      	nop
    }
  }

  return(frequency);
 8011624:	69fb      	ldr	r3, [r7, #28]
}
 8011626:	4618      	mov	r0, r3
 8011628:	3720      	adds	r7, #32
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}
 801162e:	bf00      	nop
 8011630:	40021000 	.word	0x40021000
 8011634:	00f42400 	.word	0x00f42400

08011638 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8011638:	b480      	push	{r7}
 801163a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 801163c:	4b05      	ldr	r3, [pc, #20]	; (8011654 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	4a04      	ldr	r2, [pc, #16]	; (8011654 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8011642:	f043 0304 	orr.w	r3, r3, #4
 8011646:	6013      	str	r3, [r2, #0]
}
 8011648:	bf00      	nop
 801164a:	46bd      	mov	sp, r7
 801164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011650:	4770      	bx	lr
 8011652:	bf00      	nop
 8011654:	40021000 	.word	0x40021000

08011658 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011662:	2300      	movs	r3, #0
 8011664:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8011666:	4b74      	ldr	r3, [pc, #464]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011668:	68db      	ldr	r3, [r3, #12]
 801166a:	f003 0303 	and.w	r3, r3, #3
 801166e:	2b00      	cmp	r3, #0
 8011670:	d018      	beq.n	80116a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8011672:	4b71      	ldr	r3, [pc, #452]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	f003 0203 	and.w	r2, r3, #3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	429a      	cmp	r2, r3
 8011680:	d10d      	bne.n	801169e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
       ||
 8011686:	2b00      	cmp	r3, #0
 8011688:	d009      	beq.n	801169e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801168a:	4b6b      	ldr	r3, [pc, #428]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 801168c:	68db      	ldr	r3, [r3, #12]
 801168e:	091b      	lsrs	r3, r3, #4
 8011690:	f003 0307 	and.w	r3, r3, #7
 8011694:	1c5a      	adds	r2, r3, #1
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	685b      	ldr	r3, [r3, #4]
       ||
 801169a:	429a      	cmp	r2, r3
 801169c:	d047      	beq.n	801172e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801169e:	2301      	movs	r3, #1
 80116a0:	73fb      	strb	r3, [r7, #15]
 80116a2:	e044      	b.n	801172e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	2b03      	cmp	r3, #3
 80116aa:	d018      	beq.n	80116de <RCCEx_PLLSAI1_Config+0x86>
 80116ac:	2b03      	cmp	r3, #3
 80116ae:	d825      	bhi.n	80116fc <RCCEx_PLLSAI1_Config+0xa4>
 80116b0:	2b01      	cmp	r3, #1
 80116b2:	d002      	beq.n	80116ba <RCCEx_PLLSAI1_Config+0x62>
 80116b4:	2b02      	cmp	r3, #2
 80116b6:	d009      	beq.n	80116cc <RCCEx_PLLSAI1_Config+0x74>
 80116b8:	e020      	b.n	80116fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80116ba:	4b5f      	ldr	r3, [pc, #380]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	f003 0302 	and.w	r3, r3, #2
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d11d      	bne.n	8011702 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80116c6:	2301      	movs	r3, #1
 80116c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80116ca:	e01a      	b.n	8011702 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80116cc:	4b5a      	ldr	r3, [pc, #360]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d116      	bne.n	8011706 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80116d8:	2301      	movs	r3, #1
 80116da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80116dc:	e013      	b.n	8011706 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80116de:	4b56      	ldr	r3, [pc, #344]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d10f      	bne.n	801170a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80116ea:	4b53      	ldr	r3, [pc, #332]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d109      	bne.n	801170a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80116f6:	2301      	movs	r3, #1
 80116f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80116fa:	e006      	b.n	801170a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80116fc:	2301      	movs	r3, #1
 80116fe:	73fb      	strb	r3, [r7, #15]
      break;
 8011700:	e004      	b.n	801170c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8011702:	bf00      	nop
 8011704:	e002      	b.n	801170c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8011706:	bf00      	nop
 8011708:	e000      	b.n	801170c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801170a:	bf00      	nop
    }

    if(status == HAL_OK)
 801170c:	7bfb      	ldrb	r3, [r7, #15]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d10d      	bne.n	801172e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8011712:	4b49      	ldr	r3, [pc, #292]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011714:	68db      	ldr	r3, [r3, #12]
 8011716:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	6819      	ldr	r1, [r3, #0]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	3b01      	subs	r3, #1
 8011724:	011b      	lsls	r3, r3, #4
 8011726:	430b      	orrs	r3, r1
 8011728:	4943      	ldr	r1, [pc, #268]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 801172a:	4313      	orrs	r3, r2
 801172c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801172e:	7bfb      	ldrb	r3, [r7, #15]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d17c      	bne.n	801182e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8011734:	4b40      	ldr	r3, [pc, #256]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	4a3f      	ldr	r2, [pc, #252]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 801173a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801173e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011740:	f7f9 fd9e 	bl	800b280 <HAL_GetTick>
 8011744:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8011746:	e009      	b.n	801175c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8011748:	f7f9 fd9a 	bl	800b280 <HAL_GetTick>
 801174c:	4602      	mov	r2, r0
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	1ad3      	subs	r3, r2, r3
 8011752:	2b02      	cmp	r3, #2
 8011754:	d902      	bls.n	801175c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8011756:	2303      	movs	r3, #3
 8011758:	73fb      	strb	r3, [r7, #15]
        break;
 801175a:	e005      	b.n	8011768 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801175c:	4b36      	ldr	r3, [pc, #216]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011764:	2b00      	cmp	r3, #0
 8011766:	d1ef      	bne.n	8011748 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8011768:	7bfb      	ldrb	r3, [r7, #15]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d15f      	bne.n	801182e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d110      	bne.n	8011796 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8011774:	4b30      	ldr	r3, [pc, #192]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011776:	691b      	ldr	r3, [r3, #16]
 8011778:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 801177c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8011780:	687a      	ldr	r2, [r7, #4]
 8011782:	6892      	ldr	r2, [r2, #8]
 8011784:	0211      	lsls	r1, r2, #8
 8011786:	687a      	ldr	r2, [r7, #4]
 8011788:	68d2      	ldr	r2, [r2, #12]
 801178a:	06d2      	lsls	r2, r2, #27
 801178c:	430a      	orrs	r2, r1
 801178e:	492a      	ldr	r1, [pc, #168]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011790:	4313      	orrs	r3, r2
 8011792:	610b      	str	r3, [r1, #16]
 8011794:	e027      	b.n	80117e6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	2b01      	cmp	r3, #1
 801179a:	d112      	bne.n	80117c2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801179c:	4b26      	ldr	r3, [pc, #152]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 801179e:	691b      	ldr	r3, [r3, #16]
 80117a0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80117a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80117a8:	687a      	ldr	r2, [r7, #4]
 80117aa:	6892      	ldr	r2, [r2, #8]
 80117ac:	0211      	lsls	r1, r2, #8
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	6912      	ldr	r2, [r2, #16]
 80117b2:	0852      	lsrs	r2, r2, #1
 80117b4:	3a01      	subs	r2, #1
 80117b6:	0552      	lsls	r2, r2, #21
 80117b8:	430a      	orrs	r2, r1
 80117ba:	491f      	ldr	r1, [pc, #124]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80117bc:	4313      	orrs	r3, r2
 80117be:	610b      	str	r3, [r1, #16]
 80117c0:	e011      	b.n	80117e6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80117c2:	4b1d      	ldr	r3, [pc, #116]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80117c4:	691b      	ldr	r3, [r3, #16]
 80117c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80117ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80117ce:	687a      	ldr	r2, [r7, #4]
 80117d0:	6892      	ldr	r2, [r2, #8]
 80117d2:	0211      	lsls	r1, r2, #8
 80117d4:	687a      	ldr	r2, [r7, #4]
 80117d6:	6952      	ldr	r2, [r2, #20]
 80117d8:	0852      	lsrs	r2, r2, #1
 80117da:	3a01      	subs	r2, #1
 80117dc:	0652      	lsls	r2, r2, #25
 80117de:	430a      	orrs	r2, r1
 80117e0:	4915      	ldr	r1, [pc, #84]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80117e2:	4313      	orrs	r3, r2
 80117e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80117e6:	4b14      	ldr	r3, [pc, #80]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	4a13      	ldr	r2, [pc, #76]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80117ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80117f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80117f2:	f7f9 fd45 	bl	800b280 <HAL_GetTick>
 80117f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80117f8:	e009      	b.n	801180e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80117fa:	f7f9 fd41 	bl	800b280 <HAL_GetTick>
 80117fe:	4602      	mov	r2, r0
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	1ad3      	subs	r3, r2, r3
 8011804:	2b02      	cmp	r3, #2
 8011806:	d902      	bls.n	801180e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8011808:	2303      	movs	r3, #3
 801180a:	73fb      	strb	r3, [r7, #15]
          break;
 801180c:	e005      	b.n	801181a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801180e:	4b0a      	ldr	r3, [pc, #40]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011816:	2b00      	cmp	r3, #0
 8011818:	d0ef      	beq.n	80117fa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 801181a:	7bfb      	ldrb	r3, [r7, #15]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d106      	bne.n	801182e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8011820:	4b05      	ldr	r3, [pc, #20]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011822:	691a      	ldr	r2, [r3, #16]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	699b      	ldr	r3, [r3, #24]
 8011828:	4903      	ldr	r1, [pc, #12]	; (8011838 <RCCEx_PLLSAI1_Config+0x1e0>)
 801182a:	4313      	orrs	r3, r2
 801182c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 801182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011830:	4618      	mov	r0, r3
 8011832:	3710      	adds	r7, #16
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}
 8011838:	40021000 	.word	0x40021000

0801183c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b084      	sub	sp, #16
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
 8011844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011846:	2300      	movs	r3, #0
 8011848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801184a:	4b69      	ldr	r3, [pc, #420]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 801184c:	68db      	ldr	r3, [r3, #12]
 801184e:	f003 0303 	and.w	r3, r3, #3
 8011852:	2b00      	cmp	r3, #0
 8011854:	d018      	beq.n	8011888 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8011856:	4b66      	ldr	r3, [pc, #408]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011858:	68db      	ldr	r3, [r3, #12]
 801185a:	f003 0203 	and.w	r2, r3, #3
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	429a      	cmp	r2, r3
 8011864:	d10d      	bne.n	8011882 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
       ||
 801186a:	2b00      	cmp	r3, #0
 801186c:	d009      	beq.n	8011882 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 801186e:	4b60      	ldr	r3, [pc, #384]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011870:	68db      	ldr	r3, [r3, #12]
 8011872:	091b      	lsrs	r3, r3, #4
 8011874:	f003 0307 	and.w	r3, r3, #7
 8011878:	1c5a      	adds	r2, r3, #1
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	685b      	ldr	r3, [r3, #4]
       ||
 801187e:	429a      	cmp	r2, r3
 8011880:	d047      	beq.n	8011912 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8011882:	2301      	movs	r3, #1
 8011884:	73fb      	strb	r3, [r7, #15]
 8011886:	e044      	b.n	8011912 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	2b03      	cmp	r3, #3
 801188e:	d018      	beq.n	80118c2 <RCCEx_PLLSAI2_Config+0x86>
 8011890:	2b03      	cmp	r3, #3
 8011892:	d825      	bhi.n	80118e0 <RCCEx_PLLSAI2_Config+0xa4>
 8011894:	2b01      	cmp	r3, #1
 8011896:	d002      	beq.n	801189e <RCCEx_PLLSAI2_Config+0x62>
 8011898:	2b02      	cmp	r3, #2
 801189a:	d009      	beq.n	80118b0 <RCCEx_PLLSAI2_Config+0x74>
 801189c:	e020      	b.n	80118e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801189e:	4b54      	ldr	r3, [pc, #336]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	f003 0302 	and.w	r3, r3, #2
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d11d      	bne.n	80118e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80118aa:	2301      	movs	r3, #1
 80118ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80118ae:	e01a      	b.n	80118e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80118b0:	4b4f      	ldr	r3, [pc, #316]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d116      	bne.n	80118ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80118bc:	2301      	movs	r3, #1
 80118be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80118c0:	e013      	b.n	80118ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80118c2:	4b4b      	ldr	r3, [pc, #300]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d10f      	bne.n	80118ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80118ce:	4b48      	ldr	r3, [pc, #288]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d109      	bne.n	80118ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80118da:	2301      	movs	r3, #1
 80118dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80118de:	e006      	b.n	80118ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80118e0:	2301      	movs	r3, #1
 80118e2:	73fb      	strb	r3, [r7, #15]
      break;
 80118e4:	e004      	b.n	80118f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80118e6:	bf00      	nop
 80118e8:	e002      	b.n	80118f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80118ea:	bf00      	nop
 80118ec:	e000      	b.n	80118f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80118ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80118f0:	7bfb      	ldrb	r3, [r7, #15]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d10d      	bne.n	8011912 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80118f6:	4b3e      	ldr	r3, [pc, #248]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80118f8:	68db      	ldr	r3, [r3, #12]
 80118fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6819      	ldr	r1, [r3, #0]
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	685b      	ldr	r3, [r3, #4]
 8011906:	3b01      	subs	r3, #1
 8011908:	011b      	lsls	r3, r3, #4
 801190a:	430b      	orrs	r3, r1
 801190c:	4938      	ldr	r1, [pc, #224]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 801190e:	4313      	orrs	r3, r2
 8011910:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8011912:	7bfb      	ldrb	r3, [r7, #15]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d166      	bne.n	80119e6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8011918:	4b35      	ldr	r3, [pc, #212]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	4a34      	ldr	r2, [pc, #208]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 801191e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011924:	f7f9 fcac 	bl	800b280 <HAL_GetTick>
 8011928:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801192a:	e009      	b.n	8011940 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801192c:	f7f9 fca8 	bl	800b280 <HAL_GetTick>
 8011930:	4602      	mov	r2, r0
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	1ad3      	subs	r3, r2, r3
 8011936:	2b02      	cmp	r3, #2
 8011938:	d902      	bls.n	8011940 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801193a:	2303      	movs	r3, #3
 801193c:	73fb      	strb	r3, [r7, #15]
        break;
 801193e:	e005      	b.n	801194c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8011940:	4b2b      	ldr	r3, [pc, #172]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011948:	2b00      	cmp	r3, #0
 801194a:	d1ef      	bne.n	801192c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 801194c:	7bfb      	ldrb	r3, [r7, #15]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d149      	bne.n	80119e6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d110      	bne.n	801197a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8011958:	4b25      	ldr	r3, [pc, #148]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 801195a:	695b      	ldr	r3, [r3, #20]
 801195c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8011960:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	6892      	ldr	r2, [r2, #8]
 8011968:	0211      	lsls	r1, r2, #8
 801196a:	687a      	ldr	r2, [r7, #4]
 801196c:	68d2      	ldr	r2, [r2, #12]
 801196e:	06d2      	lsls	r2, r2, #27
 8011970:	430a      	orrs	r2, r1
 8011972:	491f      	ldr	r1, [pc, #124]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011974:	4313      	orrs	r3, r2
 8011976:	614b      	str	r3, [r1, #20]
 8011978:	e011      	b.n	801199e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801197a:	4b1d      	ldr	r3, [pc, #116]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 801197c:	695b      	ldr	r3, [r3, #20]
 801197e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8011982:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8011986:	687a      	ldr	r2, [r7, #4]
 8011988:	6892      	ldr	r2, [r2, #8]
 801198a:	0211      	lsls	r1, r2, #8
 801198c:	687a      	ldr	r2, [r7, #4]
 801198e:	6912      	ldr	r2, [r2, #16]
 8011990:	0852      	lsrs	r2, r2, #1
 8011992:	3a01      	subs	r2, #1
 8011994:	0652      	lsls	r2, r2, #25
 8011996:	430a      	orrs	r2, r1
 8011998:	4915      	ldr	r1, [pc, #84]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 801199a:	4313      	orrs	r3, r2
 801199c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 801199e:	4b14      	ldr	r3, [pc, #80]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	4a13      	ldr	r2, [pc, #76]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80119a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80119a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80119aa:	f7f9 fc69 	bl	800b280 <HAL_GetTick>
 80119ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80119b0:	e009      	b.n	80119c6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80119b2:	f7f9 fc65 	bl	800b280 <HAL_GetTick>
 80119b6:	4602      	mov	r2, r0
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	1ad3      	subs	r3, r2, r3
 80119bc:	2b02      	cmp	r3, #2
 80119be:	d902      	bls.n	80119c6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80119c0:	2303      	movs	r3, #3
 80119c2:	73fb      	strb	r3, [r7, #15]
          break;
 80119c4:	e005      	b.n	80119d2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80119c6:	4b0a      	ldr	r3, [pc, #40]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d0ef      	beq.n	80119b2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80119d2:	7bfb      	ldrb	r3, [r7, #15]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d106      	bne.n	80119e6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80119d8:	4b05      	ldr	r3, [pc, #20]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80119da:	695a      	ldr	r2, [r3, #20]
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	695b      	ldr	r3, [r3, #20]
 80119e0:	4903      	ldr	r1, [pc, #12]	; (80119f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80119e2:	4313      	orrs	r3, r2
 80119e4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80119e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3710      	adds	r7, #16
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}
 80119f0:	40021000 	.word	0x40021000

080119f4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80119f4:	b480      	push	{r7}
 80119f6:	b089      	sub	sp, #36	; 0x24
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80119fe:	2300      	movs	r3, #0
 8011a00:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8011a02:	2300      	movs	r3, #0
 8011a04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8011a06:	2300      	movs	r3, #0
 8011a08:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a10:	d10c      	bne.n	8011a2c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8011a12:	4b77      	ldr	r3, [pc, #476]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a18:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8011a1c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8011a1e:	69bb      	ldr	r3, [r7, #24]
 8011a20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8011a24:	d112      	bne.n	8011a4c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8011a26:	4b73      	ldr	r3, [pc, #460]	; (8011bf4 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8011a28:	61fb      	str	r3, [r7, #28]
 8011a2a:	e00f      	b.n	8011a4c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a32:	d10b      	bne.n	8011a4c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8011a34:	4b6e      	ldr	r3, [pc, #440]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a3a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8011a3e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8011a40:	69bb      	ldr	r3, [r7, #24]
 8011a42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011a46:	d101      	bne.n	8011a4c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8011a48:	4b6a      	ldr	r3, [pc, #424]	; (8011bf4 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8011a4a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8011a4c:	69fb      	ldr	r3, [r7, #28]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f040 80c6 	bne.w	8011be0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8011a58:	69bb      	ldr	r3, [r7, #24]
 8011a5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011a5e:	d003      	beq.n	8011a68 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8011a60:	69bb      	ldr	r3, [r7, #24]
 8011a62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011a66:	d13b      	bne.n	8011ae0 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8011a68:	4b61      	ldr	r3, [pc, #388]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011a70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011a74:	f040 80b3 	bne.w	8011bde <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8011a78:	4b5d      	ldr	r3, [pc, #372]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011a7a:	68db      	ldr	r3, [r3, #12]
 8011a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	f000 80ac 	beq.w	8011bde <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8011a86:	4b5a      	ldr	r3, [pc, #360]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011a88:	68db      	ldr	r3, [r3, #12]
 8011a8a:	091b      	lsrs	r3, r3, #4
 8011a8c:	f003 0307 	and.w	r3, r3, #7
 8011a90:	3301      	adds	r3, #1
 8011a92:	693a      	ldr	r2, [r7, #16]
 8011a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a98:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8011a9a:	4b55      	ldr	r3, [pc, #340]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011a9c:	68db      	ldr	r3, [r3, #12]
 8011a9e:	0a1b      	lsrs	r3, r3, #8
 8011aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011aa4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8011aa6:	4b52      	ldr	r3, [pc, #328]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011aa8:	68db      	ldr	r3, [r3, #12]
 8011aaa:	0edb      	lsrs	r3, r3, #27
 8011aac:	f003 031f 	and.w	r3, r3, #31
 8011ab0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d10a      	bne.n	8011ace <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8011ab8:	4b4d      	ldr	r3, [pc, #308]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011aba:	68db      	ldr	r3, [r3, #12]
 8011abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d002      	beq.n	8011aca <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8011ac4:	2311      	movs	r3, #17
 8011ac6:	617b      	str	r3, [r7, #20]
 8011ac8:	e001      	b.n	8011ace <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8011aca:	2307      	movs	r3, #7
 8011acc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	68fa      	ldr	r2, [r7, #12]
 8011ad2:	fb03 f202 	mul.w	r2, r3, r2
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8011adc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8011ade:	e07e      	b.n	8011bde <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8011ae0:	69bb      	ldr	r3, [r7, #24]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d139      	bne.n	8011b5a <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8011ae6:	4b42      	ldr	r3, [pc, #264]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011aee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011af2:	d175      	bne.n	8011be0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8011af4:	4b3e      	ldr	r3, [pc, #248]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011af6:	691b      	ldr	r3, [r3, #16]
 8011af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d06f      	beq.n	8011be0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8011b00:	4b3b      	ldr	r3, [pc, #236]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b02:	68db      	ldr	r3, [r3, #12]
 8011b04:	091b      	lsrs	r3, r3, #4
 8011b06:	f003 0307 	and.w	r3, r3, #7
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	693a      	ldr	r2, [r7, #16]
 8011b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b12:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8011b14:	4b36      	ldr	r3, [pc, #216]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b16:	691b      	ldr	r3, [r3, #16]
 8011b18:	0a1b      	lsrs	r3, r3, #8
 8011b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b1e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8011b20:	4b33      	ldr	r3, [pc, #204]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b22:	691b      	ldr	r3, [r3, #16]
 8011b24:	0edb      	lsrs	r3, r3, #27
 8011b26:	f003 031f 	and.w	r3, r3, #31
 8011b2a:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d10a      	bne.n	8011b48 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8011b32:	4b2f      	ldr	r3, [pc, #188]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b34:	691b      	ldr	r3, [r3, #16]
 8011b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d002      	beq.n	8011b44 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 8011b3e:	2311      	movs	r3, #17
 8011b40:	617b      	str	r3, [r7, #20]
 8011b42:	e001      	b.n	8011b48 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8011b44:	2307      	movs	r3, #7
 8011b46:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	68fa      	ldr	r2, [r7, #12]
 8011b4c:	fb03 f202 	mul.w	r2, r3, r2
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b56:	61fb      	str	r3, [r7, #28]
 8011b58:	e042      	b.n	8011be0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011b60:	d003      	beq.n	8011b6a <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 8011b62:	69bb      	ldr	r3, [r7, #24]
 8011b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011b68:	d13a      	bne.n	8011be0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8011b6a:	4b21      	ldr	r3, [pc, #132]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011b76:	d133      	bne.n	8011be0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8011b78:	4b1d      	ldr	r3, [pc, #116]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b7a:	695b      	ldr	r3, [r3, #20]
 8011b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d02d      	beq.n	8011be0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8011b84:	4b1a      	ldr	r3, [pc, #104]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b86:	68db      	ldr	r3, [r3, #12]
 8011b88:	091b      	lsrs	r3, r3, #4
 8011b8a:	f003 0307 	and.w	r3, r3, #7
 8011b8e:	3301      	adds	r3, #1
 8011b90:	693a      	ldr	r2, [r7, #16]
 8011b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b96:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8011b98:	4b15      	ldr	r3, [pc, #84]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b9a:	695b      	ldr	r3, [r3, #20]
 8011b9c:	0a1b      	lsrs	r3, r3, #8
 8011b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ba2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8011ba4:	4b12      	ldr	r3, [pc, #72]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011ba6:	695b      	ldr	r3, [r3, #20]
 8011ba8:	0edb      	lsrs	r3, r3, #27
 8011baa:	f003 031f 	and.w	r3, r3, #31
 8011bae:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d10a      	bne.n	8011bcc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8011bb6:	4b0e      	ldr	r3, [pc, #56]	; (8011bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011bb8:	695b      	ldr	r3, [r3, #20]
 8011bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d002      	beq.n	8011bc8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8011bc2:	2311      	movs	r3, #17
 8011bc4:	617b      	str	r3, [r7, #20]
 8011bc6:	e001      	b.n	8011bcc <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8011bc8:	2307      	movs	r3, #7
 8011bca:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8011bcc:	693b      	ldr	r3, [r7, #16]
 8011bce:	68fa      	ldr	r2, [r7, #12]
 8011bd0:	fb03 f202 	mul.w	r2, r3, r2
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011bda:	61fb      	str	r3, [r7, #28]
 8011bdc:	e000      	b.n	8011be0 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8011bde:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8011be0:	69fb      	ldr	r3, [r7, #28]
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3724      	adds	r7, #36	; 0x24
 8011be6:	46bd      	mov	sp, r7
 8011be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bec:	4770      	bx	lr
 8011bee:	bf00      	nop
 8011bf0:	40021000 	.word	0x40021000
 8011bf4:	001fff68 	.word	0x001fff68

08011bf8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b088      	sub	sp, #32
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d101      	bne.n	8011c0a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8011c06:	2301      	movs	r3, #1
 8011c08:	e155      	b.n	8011eb6 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8011c10:	b2db      	uxtb	r3, r3
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d106      	bne.n	8011c24 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2200      	movs	r2, #0
 8011c1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f7f0 fb18 	bl	8002254 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f000 f959 	bl	8011edc <SAI_Disable>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d001      	beq.n	8011c34 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8011c30:	2301      	movs	r3, #1
 8011c32:	e140      	b.n	8011eb6 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2202      	movs	r2, #2
 8011c38:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	68db      	ldr	r3, [r3, #12]
 8011c40:	2b02      	cmp	r3, #2
 8011c42:	d00c      	beq.n	8011c5e <HAL_SAI_Init+0x66>
 8011c44:	2b02      	cmp	r3, #2
 8011c46:	d80d      	bhi.n	8011c64 <HAL_SAI_Init+0x6c>
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d002      	beq.n	8011c52 <HAL_SAI_Init+0x5a>
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	d003      	beq.n	8011c58 <HAL_SAI_Init+0x60>
 8011c50:	e008      	b.n	8011c64 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8011c52:	2300      	movs	r3, #0
 8011c54:	61fb      	str	r3, [r7, #28]
      break;
 8011c56:	e008      	b.n	8011c6a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8011c58:	2310      	movs	r3, #16
 8011c5a:	61fb      	str	r3, [r7, #28]
      break;
 8011c5c:	e005      	b.n	8011c6a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8011c5e:	2320      	movs	r3, #32
 8011c60:	61fb      	str	r3, [r7, #28]
      break;
 8011c62:	e002      	b.n	8011c6a <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8011c64:	2300      	movs	r3, #0
 8011c66:	61fb      	str	r3, [r7, #28]
      break;
 8011c68:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	689b      	ldr	r3, [r3, #8]
 8011c6e:	2b03      	cmp	r3, #3
 8011c70:	d81d      	bhi.n	8011cae <HAL_SAI_Init+0xb6>
 8011c72:	a201      	add	r2, pc, #4	; (adr r2, 8011c78 <HAL_SAI_Init+0x80>)
 8011c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c78:	08011c89 	.word	0x08011c89
 8011c7c:	08011c8f 	.word	0x08011c8f
 8011c80:	08011c97 	.word	0x08011c97
 8011c84:	08011c9f 	.word	0x08011c9f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	617b      	str	r3, [r7, #20]
      break;
 8011c8c:	e012      	b.n	8011cb4 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8011c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c92:	617b      	str	r3, [r7, #20]
      break;
 8011c94:	e00e      	b.n	8011cb4 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8011c96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011c9a:	617b      	str	r3, [r7, #20]
      break;
 8011c9c:	e00a      	b.n	8011cb4 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8011c9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011ca2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8011ca4:	69fb      	ldr	r3, [r7, #28]
 8011ca6:	f043 0301 	orr.w	r3, r3, #1
 8011caa:	61fb      	str	r3, [r7, #28]
      break;
 8011cac:	e002      	b.n	8011cb4 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	617b      	str	r3, [r7, #20]
      break;
 8011cb2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	4a81      	ldr	r2, [pc, #516]	; (8011ec0 <HAL_SAI_Init+0x2c8>)
 8011cba:	4293      	cmp	r3, r2
 8011cbc:	d004      	beq.n	8011cc8 <HAL_SAI_Init+0xd0>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	4a80      	ldr	r2, [pc, #512]	; (8011ec4 <HAL_SAI_Init+0x2cc>)
 8011cc4:	4293      	cmp	r3, r2
 8011cc6:	d103      	bne.n	8011cd0 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8011cc8:	4a7f      	ldr	r2, [pc, #508]	; (8011ec8 <HAL_SAI_Init+0x2d0>)
 8011cca:	69fb      	ldr	r3, [r7, #28]
 8011ccc:	6013      	str	r3, [r2, #0]
 8011cce:	e002      	b.n	8011cd6 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8011cd0:	4a7e      	ldr	r2, [pc, #504]	; (8011ecc <HAL_SAI_Init+0x2d4>)
 8011cd2:	69fb      	ldr	r3, [r7, #28]
 8011cd4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	69db      	ldr	r3, [r3, #28]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d041      	beq.n	8011d62 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	4a77      	ldr	r2, [pc, #476]	; (8011ec0 <HAL_SAI_Init+0x2c8>)
 8011ce4:	4293      	cmp	r3, r2
 8011ce6:	d004      	beq.n	8011cf2 <HAL_SAI_Init+0xfa>
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	4a75      	ldr	r2, [pc, #468]	; (8011ec4 <HAL_SAI_Init+0x2cc>)
 8011cee:	4293      	cmp	r3, r2
 8011cf0:	d105      	bne.n	8011cfe <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8011cf2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011cf6:	f7fe fee7 	bl	8010ac8 <HAL_RCCEx_GetPeriphCLKFreq>
 8011cfa:	6138      	str	r0, [r7, #16]
 8011cfc:	e004      	b.n	8011d08 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8011cfe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011d02:	f7fe fee1 	bl	8010ac8 <HAL_RCCEx_GetPeriphCLKFreq>
 8011d06:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8011d08:	693a      	ldr	r2, [r7, #16]
 8011d0a:	4613      	mov	r3, r2
 8011d0c:	009b      	lsls	r3, r3, #2
 8011d0e:	4413      	add	r3, r2
 8011d10:	005b      	lsls	r3, r3, #1
 8011d12:	461a      	mov	r2, r3
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	69db      	ldr	r3, [r3, #28]
 8011d18:	025b      	lsls	r3, r3, #9
 8011d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d1e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	4a6b      	ldr	r2, [pc, #428]	; (8011ed0 <HAL_SAI_Init+0x2d8>)
 8011d24:	fba2 2303 	umull	r2, r3, r2, r3
 8011d28:	08da      	lsrs	r2, r3, #3
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8011d2e:	68f9      	ldr	r1, [r7, #12]
 8011d30:	4b67      	ldr	r3, [pc, #412]	; (8011ed0 <HAL_SAI_Init+0x2d8>)
 8011d32:	fba3 2301 	umull	r2, r3, r3, r1
 8011d36:	08da      	lsrs	r2, r3, #3
 8011d38:	4613      	mov	r3, r2
 8011d3a:	009b      	lsls	r3, r3, #2
 8011d3c:	4413      	add	r3, r2
 8011d3e:	005b      	lsls	r3, r3, #1
 8011d40:	1aca      	subs	r2, r1, r3
 8011d42:	2a08      	cmp	r2, #8
 8011d44:	d904      	bls.n	8011d50 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6a1b      	ldr	r3, [r3, #32]
 8011d4a:	1c5a      	adds	r2, r3, #1
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d54:	2b04      	cmp	r3, #4
 8011d56:	d104      	bne.n	8011d62 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	6a1b      	ldr	r3, [r3, #32]
 8011d5c:	085a      	lsrs	r2, r3, #1
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d003      	beq.n	8011d72 <HAL_SAI_Init+0x17a>
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	685b      	ldr	r3, [r3, #4]
 8011d6e:	2b02      	cmp	r3, #2
 8011d70:	d109      	bne.n	8011d86 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d76:	2b01      	cmp	r3, #1
 8011d78:	d101      	bne.n	8011d7e <HAL_SAI_Init+0x186>
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	e001      	b.n	8011d82 <HAL_SAI_Init+0x18a>
 8011d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011d82:	61bb      	str	r3, [r7, #24]
 8011d84:	e008      	b.n	8011d98 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d102      	bne.n	8011d94 <HAL_SAI_Init+0x19c>
 8011d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011d92:	e000      	b.n	8011d96 <HAL_SAI_Init+0x19e>
 8011d94:	2300      	movs	r3, #0
 8011d96:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	6819      	ldr	r1, [r3, #0]
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681a      	ldr	r2, [r3, #0]
 8011da2:	4b4c      	ldr	r3, [pc, #304]	; (8011ed4 <HAL_SAI_Init+0x2dc>)
 8011da4:	400b      	ands	r3, r1
 8011da6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	6819      	ldr	r1, [r3, #0]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	685a      	ldr	r2, [r3, #4]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011db6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8011dbc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dc2:	431a      	orrs	r2, r3
 8011dc4:	69bb      	ldr	r3, [r7, #24]
 8011dc6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8011dd0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	691b      	ldr	r3, [r3, #16]
 8011dd6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011ddc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6a1b      	ldr	r3, [r3, #32]
 8011de2:	051b      	lsls	r3, r3, #20
 8011de4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	430a      	orrs	r2, r1
 8011dec:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	685b      	ldr	r3, [r3, #4]
 8011df4:	687a      	ldr	r2, [r7, #4]
 8011df6:	6812      	ldr	r2, [r2, #0]
 8011df8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8011dfc:	f023 030f 	bic.w	r3, r3, #15
 8011e00:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	6859      	ldr	r1, [r3, #4]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	699a      	ldr	r2, [r3, #24]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e10:	431a      	orrs	r2, r3
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e16:	431a      	orrs	r2, r3
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	430a      	orrs	r2, r1
 8011e1e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	6899      	ldr	r1, [r3, #8]
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	4b2b      	ldr	r3, [pc, #172]	; (8011ed8 <HAL_SAI_Init+0x2e0>)
 8011e2c:	400b      	ands	r3, r1
 8011e2e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	6899      	ldr	r1, [r3, #8]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e3a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8011e40:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8011e46:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8011e4c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e52:	3b01      	subs	r3, #1
 8011e54:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8011e56:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	430a      	orrs	r2, r1
 8011e5e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	68d9      	ldr	r1, [r3, #12]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681a      	ldr	r2, [r3, #0]
 8011e6a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8011e6e:	400b      	ands	r3, r1
 8011e70:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	68d9      	ldr	r1, [r3, #12]
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e80:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011e86:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8011e88:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e8e:	3b01      	subs	r3, #1
 8011e90:	021b      	lsls	r3, r3, #8
 8011e92:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	430a      	orrs	r2, r1
 8011e9a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2201      	movs	r2, #1
 8011ea8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2200      	movs	r2, #0
 8011eb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8011eb4:	2300      	movs	r3, #0
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3720      	adds	r7, #32
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
 8011ebe:	bf00      	nop
 8011ec0:	40015404 	.word	0x40015404
 8011ec4:	40015424 	.word	0x40015424
 8011ec8:	40015400 	.word	0x40015400
 8011ecc:	40015800 	.word	0x40015800
 8011ed0:	cccccccd 	.word	0xcccccccd
 8011ed4:	ff05c010 	.word	0xff05c010
 8011ed8:	fff88000 	.word	0xfff88000

08011edc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8011edc:	b480      	push	{r7}
 8011ede:	b085      	sub	sp, #20
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8011ee4:	4b18      	ldr	r3, [pc, #96]	; (8011f48 <SAI_Disable+0x6c>)
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	4a18      	ldr	r2, [pc, #96]	; (8011f4c <SAI_Disable+0x70>)
 8011eea:	fba2 2303 	umull	r2, r3, r2, r3
 8011eee:	0b1b      	lsrs	r3, r3, #12
 8011ef0:	009b      	lsls	r3, r3, #2
 8011ef2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	681a      	ldr	r2, [r3, #0]
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011f06:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d10a      	bne.n	8011f24 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011f14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8011f1e:	2303      	movs	r3, #3
 8011f20:	72fb      	strb	r3, [r7, #11]
      break;
 8011f22:	e009      	b.n	8011f38 <SAI_Disable+0x5c>
    }
    count--;
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	3b01      	subs	r3, #1
 8011f28:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d1e7      	bne.n	8011f08 <SAI_Disable+0x2c>

  return status;
 8011f38:	7afb      	ldrb	r3, [r7, #11]
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3714      	adds	r7, #20
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f44:	4770      	bx	lr
 8011f46:	bf00      	nop
 8011f48:	20000198 	.word	0x20000198
 8011f4c:	95cbec1b 	.word	0x95cbec1b

08011f50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d101      	bne.n	8011f62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8011f5e:	2301      	movs	r3, #1
 8011f60:	e022      	b.n	8011fa8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011f68:	b2db      	uxtb	r3, r3
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d105      	bne.n	8011f7a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2200      	movs	r2, #0
 8011f72:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f7f0 fa17 	bl	80023a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2203      	movs	r2, #3
 8011f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f000 f814 	bl	8011fb0 <HAL_SD_InitCard>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d001      	beq.n	8011f92 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8011f8e:	2301      	movs	r3, #1
 8011f90:	e00a      	b.n	8011fa8 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2200      	movs	r2, #0
 8011f96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2201      	movs	r2, #1
 8011fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8011fa6:	2300      	movs	r3, #0
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3708      	adds	r7, #8
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}

08011fb0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8011fb0:	b5b0      	push	{r4, r5, r7, lr}
 8011fb2:	b08e      	sub	sp, #56	; 0x38
 8011fb4:	af04      	add	r7, sp, #16
 8011fb6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8011fb8:	2300      	movs	r3, #0
 8011fba:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8011fc8:	2300      	movs	r3, #0
 8011fca:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8011fcc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8011fd0:	f7fe fd7a 	bl	8010ac8 <HAL_RCCEx_GetPeriphCLKFreq>
 8011fd4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8011fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d109      	bne.n	8011ff0 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2201      	movs	r2, #1
 8011fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011fea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8011fec:	2301      	movs	r3, #1
 8011fee:	e07b      	b.n	80120e8 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8011ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff2:	09db      	lsrs	r3, r3, #7
 8011ff4:	4a3e      	ldr	r2, [pc, #248]	; (80120f0 <HAL_SD_InitCard+0x140>)
 8011ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8011ffa:	091b      	lsrs	r3, r3, #4
 8011ffc:	3b02      	subs	r3, #2
 8011ffe:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681d      	ldr	r5, [r3, #0]
 8012004:	466c      	mov	r4, sp
 8012006:	f107 0314 	add.w	r3, r7, #20
 801200a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801200e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012012:	f107 0308 	add.w	r3, r7, #8
 8012016:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012018:	4628      	mov	r0, r5
 801201a:	f002 fc31 	bl	8014880 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	685a      	ldr	r2, [r3, #4]
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801202c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	4618      	mov	r0, r3
 8012034:	f002 fc5e 	bl	80148f4 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	685a      	ldr	r2, [r3, #4]
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012046:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8012048:	69fb      	ldr	r3, [r7, #28]
 801204a:	3302      	adds	r3, #2
 801204c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012052:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8012054:	4a27      	ldr	r2, [pc, #156]	; (80120f4 <HAL_SD_InitCard+0x144>)
 8012056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012058:	fbb2 f3f3 	udiv	r3, r2, r3
 801205c:	3301      	adds	r3, #1
 801205e:	4618      	mov	r0, r3
 8012060:	f7f9 f91a 	bl	800b298 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f000 fb77 	bl	8012758 <SD_PowerON>
 801206a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801206c:	6a3b      	ldr	r3, [r7, #32]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d00b      	beq.n	801208a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2201      	movs	r2, #1
 8012076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801207e:	6a3b      	ldr	r3, [r7, #32]
 8012080:	431a      	orrs	r2, r3
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8012086:	2301      	movs	r3, #1
 8012088:	e02e      	b.n	80120e8 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f000 fa96 	bl	80125bc <SD_InitCard>
 8012090:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012092:	6a3b      	ldr	r3, [r7, #32]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d00b      	beq.n	80120b0 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2201      	movs	r2, #1
 801209c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80120a4:	6a3b      	ldr	r3, [r7, #32]
 80120a6:	431a      	orrs	r2, r3
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80120ac:	2301      	movs	r3, #1
 80120ae:	e01b      	b.n	80120e8 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80120b8:	4618      	mov	r0, r3
 80120ba:	f002 fcae 	bl	8014a1a <SDMMC_CmdBlockLength>
 80120be:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80120c0:	6a3b      	ldr	r3, [r7, #32]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d00f      	beq.n	80120e6 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	4a0b      	ldr	r2, [pc, #44]	; (80120f8 <HAL_SD_InitCard+0x148>)
 80120cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80120d2:	6a3b      	ldr	r3, [r7, #32]
 80120d4:	431a      	orrs	r2, r3
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2201      	movs	r2, #1
 80120de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80120e2:	2301      	movs	r3, #1
 80120e4:	e000      	b.n	80120e8 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 80120e6:	2300      	movs	r3, #0
}
 80120e8:	4618      	mov	r0, r3
 80120ea:	3728      	adds	r7, #40	; 0x28
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bdb0      	pop	{r4, r5, r7, pc}
 80120f0:	014f8b59 	.word	0x014f8b59
 80120f4:	00012110 	.word	0x00012110
 80120f8:	004005ff 	.word	0x004005ff

080120fc <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80120fc:	b480      	push	{r7}
 80120fe:	b083      	sub	sp, #12
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
 8012104:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801210a:	0f9b      	lsrs	r3, r3, #30
 801210c:	b2da      	uxtb	r2, r3
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012116:	0e9b      	lsrs	r3, r3, #26
 8012118:	b2db      	uxtb	r3, r3
 801211a:	f003 030f 	and.w	r3, r3, #15
 801211e:	b2da      	uxtb	r2, r3
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012128:	0e1b      	lsrs	r3, r3, #24
 801212a:	b2db      	uxtb	r3, r3
 801212c:	f003 0303 	and.w	r3, r3, #3
 8012130:	b2da      	uxtb	r2, r3
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801213a:	0c1b      	lsrs	r3, r3, #16
 801213c:	b2da      	uxtb	r2, r3
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012146:	0a1b      	lsrs	r3, r3, #8
 8012148:	b2da      	uxtb	r2, r3
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012152:	b2da      	uxtb	r2, r3
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801215c:	0d1b      	lsrs	r3, r3, #20
 801215e:	b29a      	uxth	r2, r3
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012168:	0c1b      	lsrs	r3, r3, #16
 801216a:	b2db      	uxtb	r3, r3
 801216c:	f003 030f 	and.w	r3, r3, #15
 8012170:	b2da      	uxtb	r2, r3
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801217a:	0bdb      	lsrs	r3, r3, #15
 801217c:	b2db      	uxtb	r3, r3
 801217e:	f003 0301 	and.w	r3, r3, #1
 8012182:	b2da      	uxtb	r2, r3
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801218c:	0b9b      	lsrs	r3, r3, #14
 801218e:	b2db      	uxtb	r3, r3
 8012190:	f003 0301 	and.w	r3, r3, #1
 8012194:	b2da      	uxtb	r2, r3
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801219e:	0b5b      	lsrs	r3, r3, #13
 80121a0:	b2db      	uxtb	r3, r3
 80121a2:	f003 0301 	and.w	r3, r3, #1
 80121a6:	b2da      	uxtb	r2, r3
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80121b0:	0b1b      	lsrs	r3, r3, #12
 80121b2:	b2db      	uxtb	r3, r3
 80121b4:	f003 0301 	and.w	r3, r3, #1
 80121b8:	b2da      	uxtb	r2, r3
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	2200      	movs	r2, #0
 80121c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d163      	bne.n	8012294 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80121d0:	009a      	lsls	r2, r3, #2
 80121d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80121d6:	4013      	ands	r3, r2
 80121d8:	687a      	ldr	r2, [r7, #4]
 80121da:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80121dc:	0f92      	lsrs	r2, r2, #30
 80121de:	431a      	orrs	r2, r3
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121e8:	0edb      	lsrs	r3, r3, #27
 80121ea:	b2db      	uxtb	r3, r3
 80121ec:	f003 0307 	and.w	r3, r3, #7
 80121f0:	b2da      	uxtb	r2, r3
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121fa:	0e1b      	lsrs	r3, r3, #24
 80121fc:	b2db      	uxtb	r3, r3
 80121fe:	f003 0307 	and.w	r3, r3, #7
 8012202:	b2da      	uxtb	r2, r3
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801220c:	0d5b      	lsrs	r3, r3, #21
 801220e:	b2db      	uxtb	r3, r3
 8012210:	f003 0307 	and.w	r3, r3, #7
 8012214:	b2da      	uxtb	r2, r3
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801221e:	0c9b      	lsrs	r3, r3, #18
 8012220:	b2db      	uxtb	r3, r3
 8012222:	f003 0307 	and.w	r3, r3, #7
 8012226:	b2da      	uxtb	r2, r3
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012230:	0bdb      	lsrs	r3, r3, #15
 8012232:	b2db      	uxtb	r3, r3
 8012234:	f003 0307 	and.w	r3, r3, #7
 8012238:	b2da      	uxtb	r2, r3
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	691b      	ldr	r3, [r3, #16]
 8012242:	1c5a      	adds	r2, r3, #1
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	7e1b      	ldrb	r3, [r3, #24]
 801224c:	b2db      	uxtb	r3, r3
 801224e:	f003 0307 	and.w	r3, r3, #7
 8012252:	3302      	adds	r3, #2
 8012254:	2201      	movs	r2, #1
 8012256:	fa02 f303 	lsl.w	r3, r2, r3
 801225a:	687a      	ldr	r2, [r7, #4]
 801225c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801225e:	fb03 f202 	mul.w	r2, r3, r2
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	7a1b      	ldrb	r3, [r3, #8]
 801226a:	b2db      	uxtb	r3, r3
 801226c:	f003 030f 	and.w	r3, r3, #15
 8012270:	2201      	movs	r2, #1
 8012272:	409a      	lsls	r2, r3
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801227c:	687a      	ldr	r2, [r7, #4]
 801227e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8012280:	0a52      	lsrs	r2, r2, #9
 8012282:	fb03 f202 	mul.w	r2, r3, r2
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012290:	661a      	str	r2, [r3, #96]	; 0x60
 8012292:	e031      	b.n	80122f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012298:	2b01      	cmp	r3, #1
 801229a:	d11d      	bne.n	80122d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80122a0:	041b      	lsls	r3, r3, #16
 80122a2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122aa:	0c1b      	lsrs	r3, r3, #16
 80122ac:	431a      	orrs	r2, r3
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	691b      	ldr	r3, [r3, #16]
 80122b6:	3301      	adds	r3, #1
 80122b8:	029a      	lsls	r2, r3, #10
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122cc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	661a      	str	r2, [r3, #96]	; 0x60
 80122d6:	e00f      	b.n	80122f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	4a58      	ldr	r2, [pc, #352]	; (8012440 <HAL_SD_GetCardCSD+0x344>)
 80122de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	2201      	movs	r2, #1
 80122f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80122f4:	2301      	movs	r3, #1
 80122f6:	e09d      	b.n	8012434 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122fc:	0b9b      	lsrs	r3, r3, #14
 80122fe:	b2db      	uxtb	r3, r3
 8012300:	f003 0301 	and.w	r3, r3, #1
 8012304:	b2da      	uxtb	r2, r3
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801230e:	09db      	lsrs	r3, r3, #7
 8012310:	b2db      	uxtb	r3, r3
 8012312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012316:	b2da      	uxtb	r2, r3
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012320:	b2db      	uxtb	r3, r3
 8012322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012326:	b2da      	uxtb	r2, r3
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012330:	0fdb      	lsrs	r3, r3, #31
 8012332:	b2da      	uxtb	r2, r3
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801233c:	0f5b      	lsrs	r3, r3, #29
 801233e:	b2db      	uxtb	r3, r3
 8012340:	f003 0303 	and.w	r3, r3, #3
 8012344:	b2da      	uxtb	r2, r3
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801234e:	0e9b      	lsrs	r3, r3, #26
 8012350:	b2db      	uxtb	r3, r3
 8012352:	f003 0307 	and.w	r3, r3, #7
 8012356:	b2da      	uxtb	r2, r3
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012360:	0d9b      	lsrs	r3, r3, #22
 8012362:	b2db      	uxtb	r3, r3
 8012364:	f003 030f 	and.w	r3, r3, #15
 8012368:	b2da      	uxtb	r2, r3
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012372:	0d5b      	lsrs	r3, r3, #21
 8012374:	b2db      	uxtb	r3, r3
 8012376:	f003 0301 	and.w	r3, r3, #1
 801237a:	b2da      	uxtb	r2, r3
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	2200      	movs	r2, #0
 8012386:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801238e:	0c1b      	lsrs	r3, r3, #16
 8012390:	b2db      	uxtb	r3, r3
 8012392:	f003 0301 	and.w	r3, r3, #1
 8012396:	b2da      	uxtb	r2, r3
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123a2:	0bdb      	lsrs	r3, r3, #15
 80123a4:	b2db      	uxtb	r3, r3
 80123a6:	f003 0301 	and.w	r3, r3, #1
 80123aa:	b2da      	uxtb	r2, r3
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123b6:	0b9b      	lsrs	r3, r3, #14
 80123b8:	b2db      	uxtb	r3, r3
 80123ba:	f003 0301 	and.w	r3, r3, #1
 80123be:	b2da      	uxtb	r2, r3
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123ca:	0b5b      	lsrs	r3, r3, #13
 80123cc:	b2db      	uxtb	r3, r3
 80123ce:	f003 0301 	and.w	r3, r3, #1
 80123d2:	b2da      	uxtb	r2, r3
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123de:	0b1b      	lsrs	r3, r3, #12
 80123e0:	b2db      	uxtb	r3, r3
 80123e2:	f003 0301 	and.w	r3, r3, #1
 80123e6:	b2da      	uxtb	r2, r3
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123f2:	0a9b      	lsrs	r3, r3, #10
 80123f4:	b2db      	uxtb	r3, r3
 80123f6:	f003 0303 	and.w	r3, r3, #3
 80123fa:	b2da      	uxtb	r2, r3
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012406:	0a1b      	lsrs	r3, r3, #8
 8012408:	b2db      	uxtb	r3, r3
 801240a:	f003 0303 	and.w	r3, r3, #3
 801240e:	b2da      	uxtb	r2, r3
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801241a:	085b      	lsrs	r3, r3, #1
 801241c:	b2db      	uxtb	r3, r3
 801241e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012422:	b2da      	uxtb	r2, r3
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	2201      	movs	r2, #1
 801242e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8012432:	2300      	movs	r3, #0
}
 8012434:	4618      	mov	r0, r3
 8012436:	370c      	adds	r7, #12
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr
 8012440:	004005ff 	.word	0x004005ff

08012444 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8012444:	b5b0      	push	{r4, r5, r7, lr}
 8012446:	b090      	sub	sp, #64	; 0x40
 8012448:	af04      	add	r7, sp, #16
 801244a:	6078      	str	r0, [r7, #4]
 801244c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 801244e:	2300      	movs	r3, #0
 8012450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2203      	movs	r2, #3
 8012458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012460:	2b03      	cmp	r3, #3
 8012462:	d02e      	beq.n	80124c2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801246a:	d106      	bne.n	801247a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012470:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	639a      	str	r2, [r3, #56]	; 0x38
 8012478:	e029      	b.n	80124ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012480:	d10a      	bne.n	8012498 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f000 f9f6 	bl	8012874 <SD_WideBus_Enable>
 8012488:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012490:	431a      	orrs	r2, r3
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	639a      	str	r2, [r3, #56]	; 0x38
 8012496:	e01a      	b.n	80124ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d10a      	bne.n	80124b4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f000 fa33 	bl	801290a <SD_WideBus_Disable>
 80124a4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ac:	431a      	orrs	r2, r3
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	639a      	str	r2, [r3, #56]	; 0x38
 80124b2:	e00c      	b.n	80124ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	639a      	str	r2, [r3, #56]	; 0x38
 80124c0:	e005      	b.n	80124ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d007      	beq.n	80124e6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	4a35      	ldr	r2, [pc, #212]	; (80125b0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80124dc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80124de:	2301      	movs	r3, #1
 80124e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80124e4:	e042      	b.n	801256c <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80124e6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80124ea:	f7fe faed 	bl	8010ac8 <HAL_RCCEx_GetPeriphCLKFreq>
 80124ee:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80124f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d031      	beq.n	801255a <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	685b      	ldr	r3, [r3, #4]
 80124fa:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	689b      	ldr	r3, [r3, #8]
 8012500:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	68db      	ldr	r3, [r3, #12]
 8012506:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	695b      	ldr	r3, [r3, #20]
 8012510:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	699b      	ldr	r3, [r3, #24]
 8012516:	3302      	adds	r3, #2
 8012518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801251a:	fbb2 f3f3 	udiv	r3, r2, r3
 801251e:	4a25      	ldr	r2, [pc, #148]	; (80125b4 <HAL_SD_ConfigWideBusOperation+0x170>)
 8012520:	4293      	cmp	r3, r2
 8012522:	d907      	bls.n	8012534 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8012524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012526:	4a24      	ldr	r2, [pc, #144]	; (80125b8 <HAL_SD_ConfigWideBusOperation+0x174>)
 8012528:	fba2 2303 	umull	r2, r3, r2, r3
 801252c:	0ddb      	lsrs	r3, r3, #23
 801252e:	3b02      	subs	r3, #2
 8012530:	623b      	str	r3, [r7, #32]
 8012532:	e002      	b.n	801253a <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	699b      	ldr	r3, [r3, #24]
 8012538:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681d      	ldr	r5, [r3, #0]
 801253e:	466c      	mov	r4, sp
 8012540:	f107 0318 	add.w	r3, r7, #24
 8012544:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012548:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801254c:	f107 030c 	add.w	r3, r7, #12
 8012550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012552:	4628      	mov	r0, r5
 8012554:	f002 f994 	bl	8014880 <SDMMC_Init>
 8012558:	e008      	b.n	801256c <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801255e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8012566:	2301      	movs	r3, #1
 8012568:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012574:	4618      	mov	r0, r3
 8012576:	f002 fa50 	bl	8014a1a <SDMMC_CmdBlockLength>
 801257a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801257e:	2b00      	cmp	r3, #0
 8012580:	d00c      	beq.n	801259c <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	4a0a      	ldr	r2, [pc, #40]	; (80125b0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8012588:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012590:	431a      	orrs	r2, r3
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8012596:	2301      	movs	r3, #1
 8012598:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2201      	movs	r2, #1
 80125a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80125a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	3730      	adds	r7, #48	; 0x30
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bdb0      	pop	{r4, r5, r7, pc}
 80125b0:	004005ff 	.word	0x004005ff
 80125b4:	017d7840 	.word	0x017d7840
 80125b8:	55e63b89 	.word	0x55e63b89

080125bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80125bc:	b5b0      	push	{r4, r5, r7, lr}
 80125be:	b094      	sub	sp, #80	; 0x50
 80125c0:	af04      	add	r7, sp, #16
 80125c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80125c4:	2301      	movs	r3, #1
 80125c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	4618      	mov	r0, r3
 80125ce:	f002 f9a0 	bl	8014912 <SDMMC_GetPowerState>
 80125d2:	4603      	mov	r3, r0
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d102      	bne.n	80125de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80125d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80125dc:	e0b8      	b.n	8012750 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125e2:	2b03      	cmp	r3, #3
 80125e4:	d02f      	beq.n	8012646 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	4618      	mov	r0, r3
 80125ec:	f002 fb1f 	bl	8014c2e <SDMMC_CmdSendCID>
 80125f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80125f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d001      	beq.n	80125fc <SD_InitCard+0x40>
    {
      return errorstate;
 80125f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125fa:	e0a9      	b.n	8012750 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	2100      	movs	r1, #0
 8012602:	4618      	mov	r0, r3
 8012604:	f002 f9ca 	bl	801499c <SDMMC_GetResponse>
 8012608:	4602      	mov	r2, r0
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	2104      	movs	r1, #4
 8012614:	4618      	mov	r0, r3
 8012616:	f002 f9c1 	bl	801499c <SDMMC_GetResponse>
 801261a:	4602      	mov	r2, r0
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	2108      	movs	r1, #8
 8012626:	4618      	mov	r0, r3
 8012628:	f002 f9b8 	bl	801499c <SDMMC_GetResponse>
 801262c:	4602      	mov	r2, r0
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	210c      	movs	r1, #12
 8012638:	4618      	mov	r0, r3
 801263a:	f002 f9af 	bl	801499c <SDMMC_GetResponse>
 801263e:	4602      	mov	r2, r0
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801264a:	2b03      	cmp	r3, #3
 801264c:	d00d      	beq.n	801266a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	f107 020e 	add.w	r2, r7, #14
 8012656:	4611      	mov	r1, r2
 8012658:	4618      	mov	r0, r3
 801265a:	f002 fb25 	bl	8014ca8 <SDMMC_CmdSetRelAdd>
 801265e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8012660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012662:	2b00      	cmp	r3, #0
 8012664:	d001      	beq.n	801266a <SD_InitCard+0xae>
    {
      return errorstate;
 8012666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012668:	e072      	b.n	8012750 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801266e:	2b03      	cmp	r3, #3
 8012670:	d036      	beq.n	80126e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8012672:	89fb      	ldrh	r3, [r7, #14]
 8012674:	461a      	mov	r2, r3
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681a      	ldr	r2, [r3, #0]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012682:	041b      	lsls	r3, r3, #16
 8012684:	4619      	mov	r1, r3
 8012686:	4610      	mov	r0, r2
 8012688:	f002 faef 	bl	8014c6a <SDMMC_CmdSendCSD>
 801268c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801268e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012690:	2b00      	cmp	r3, #0
 8012692:	d001      	beq.n	8012698 <SD_InitCard+0xdc>
    {
      return errorstate;
 8012694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012696:	e05b      	b.n	8012750 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	2100      	movs	r1, #0
 801269e:	4618      	mov	r0, r3
 80126a0:	f002 f97c 	bl	801499c <SDMMC_GetResponse>
 80126a4:	4602      	mov	r2, r0
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	2104      	movs	r1, #4
 80126b0:	4618      	mov	r0, r3
 80126b2:	f002 f973 	bl	801499c <SDMMC_GetResponse>
 80126b6:	4602      	mov	r2, r0
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	2108      	movs	r1, #8
 80126c2:	4618      	mov	r0, r3
 80126c4:	f002 f96a 	bl	801499c <SDMMC_GetResponse>
 80126c8:	4602      	mov	r2, r0
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	210c      	movs	r1, #12
 80126d4:	4618      	mov	r0, r3
 80126d6:	f002 f961 	bl	801499c <SDMMC_GetResponse>
 80126da:	4602      	mov	r2, r0
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	2104      	movs	r1, #4
 80126e6:	4618      	mov	r0, r3
 80126e8:	f002 f958 	bl	801499c <SDMMC_GetResponse>
 80126ec:	4603      	mov	r3, r0
 80126ee:	0d1a      	lsrs	r2, r3, #20
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80126f4:	f107 0310 	add.w	r3, r7, #16
 80126f8:	4619      	mov	r1, r3
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	f7ff fcfe 	bl	80120fc <HAL_SD_GetCardCSD>
 8012700:	4603      	mov	r3, r0
 8012702:	2b00      	cmp	r3, #0
 8012704:	d002      	beq.n	801270c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012706:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801270a:	e021      	b.n	8012750 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6819      	ldr	r1, [r3, #0]
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012714:	041b      	lsls	r3, r3, #16
 8012716:	2200      	movs	r2, #0
 8012718:	461c      	mov	r4, r3
 801271a:	4615      	mov	r5, r2
 801271c:	4622      	mov	r2, r4
 801271e:	462b      	mov	r3, r5
 8012720:	4608      	mov	r0, r1
 8012722:	f002 f99c 	bl	8014a5e <SDMMC_CmdSelDesel>
 8012726:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8012728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801272a:	2b00      	cmp	r3, #0
 801272c:	d001      	beq.n	8012732 <SD_InitCard+0x176>
  {
    return errorstate;
 801272e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012730:	e00e      	b.n	8012750 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681d      	ldr	r5, [r3, #0]
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	466c      	mov	r4, sp
 801273a:	f103 0210 	add.w	r2, r3, #16
 801273e:	ca07      	ldmia	r2, {r0, r1, r2}
 8012740:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012744:	3304      	adds	r3, #4
 8012746:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012748:	4628      	mov	r0, r5
 801274a:	f002 f899 	bl	8014880 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801274e:	2300      	movs	r3, #0
}
 8012750:	4618      	mov	r0, r3
 8012752:	3740      	adds	r7, #64	; 0x40
 8012754:	46bd      	mov	sp, r7
 8012756:	bdb0      	pop	{r4, r5, r7, pc}

08012758 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b086      	sub	sp, #24
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012760:	2300      	movs	r3, #0
 8012762:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8012764:	2300      	movs	r3, #0
 8012766:	617b      	str	r3, [r7, #20]
 8012768:	2300      	movs	r3, #0
 801276a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	4618      	mov	r0, r3
 8012772:	f002 f997 	bl	8014aa4 <SDMMC_CmdGoIdleState>
 8012776:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d001      	beq.n	8012782 <SD_PowerON+0x2a>
  {
    return errorstate;
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	e072      	b.n	8012868 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	4618      	mov	r0, r3
 8012788:	f002 f9aa 	bl	8014ae0 <SDMMC_CmdOperCond>
 801278c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d00d      	beq.n	80127b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2200      	movs	r2, #0
 8012798:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	4618      	mov	r0, r3
 80127a0:	f002 f980 	bl	8014aa4 <SDMMC_CmdGoIdleState>
 80127a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d004      	beq.n	80127b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	e05b      	b.n	8012868 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2201      	movs	r2, #1
 80127b4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80127ba:	2b01      	cmp	r3, #1
 80127bc:	d137      	bne.n	801282e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	2100      	movs	r1, #0
 80127c4:	4618      	mov	r0, r3
 80127c6:	f002 f9aa 	bl	8014b1e <SDMMC_CmdAppCommand>
 80127ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d02d      	beq.n	801282e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80127d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80127d6:	e047      	b.n	8012868 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	2100      	movs	r1, #0
 80127de:	4618      	mov	r0, r3
 80127e0:	f002 f99d 	bl	8014b1e <SDMMC_CmdAppCommand>
 80127e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d001      	beq.n	80127f0 <SD_PowerON+0x98>
    {
      return errorstate;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	e03b      	b.n	8012868 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	491e      	ldr	r1, [pc, #120]	; (8012870 <SD_PowerON+0x118>)
 80127f6:	4618      	mov	r0, r3
 80127f8:	f002 f9b3 	bl	8014b62 <SDMMC_CmdAppOperCommand>
 80127fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d002      	beq.n	801280a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012804:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012808:	e02e      	b.n	8012868 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	2100      	movs	r1, #0
 8012810:	4618      	mov	r0, r3
 8012812:	f002 f8c3 	bl	801499c <SDMMC_GetResponse>
 8012816:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	0fdb      	lsrs	r3, r3, #31
 801281c:	2b01      	cmp	r3, #1
 801281e:	d101      	bne.n	8012824 <SD_PowerON+0xcc>
 8012820:	2301      	movs	r3, #1
 8012822:	e000      	b.n	8012826 <SD_PowerON+0xce>
 8012824:	2300      	movs	r3, #0
 8012826:	613b      	str	r3, [r7, #16]

    count++;
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	3301      	adds	r3, #1
 801282c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012834:	4293      	cmp	r3, r2
 8012836:	d802      	bhi.n	801283e <SD_PowerON+0xe6>
 8012838:	693b      	ldr	r3, [r7, #16]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d0cc      	beq.n	80127d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012844:	4293      	cmp	r3, r2
 8012846:	d902      	bls.n	801284e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8012848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801284c:	e00c      	b.n	8012868 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012854:	2b00      	cmp	r3, #0
 8012856:	d003      	beq.n	8012860 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2201      	movs	r2, #1
 801285c:	645a      	str	r2, [r3, #68]	; 0x44
 801285e:	e002      	b.n	8012866 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2200      	movs	r2, #0
 8012864:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8012866:	2300      	movs	r3, #0
}
 8012868:	4618      	mov	r0, r3
 801286a:	3718      	adds	r7, #24
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}
 8012870:	c1100000 	.word	0xc1100000

08012874 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b086      	sub	sp, #24
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801287c:	2300      	movs	r3, #0
 801287e:	60fb      	str	r3, [r7, #12]
 8012880:	2300      	movs	r3, #0
 8012882:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	2100      	movs	r1, #0
 801288a:	4618      	mov	r0, r3
 801288c:	f002 f886 	bl	801499c <SDMMC_GetResponse>
 8012890:	4603      	mov	r3, r0
 8012892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801289a:	d102      	bne.n	80128a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801289c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80128a0:	e02f      	b.n	8012902 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80128a2:	f107 030c 	add.w	r3, r7, #12
 80128a6:	4619      	mov	r1, r3
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f000 f879 	bl	80129a0 <SD_FindSCR>
 80128ae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d001      	beq.n	80128ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80128b6:	697b      	ldr	r3, [r7, #20]
 80128b8:	e023      	b.n	8012902 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d01c      	beq.n	80128fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80128cc:	041b      	lsls	r3, r3, #16
 80128ce:	4619      	mov	r1, r3
 80128d0:	4610      	mov	r0, r2
 80128d2:	f002 f924 	bl	8014b1e <SDMMC_CmdAppCommand>
 80128d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d001      	beq.n	80128e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80128de:	697b      	ldr	r3, [r7, #20]
 80128e0:	e00f      	b.n	8012902 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	2102      	movs	r1, #2
 80128e8:	4618      	mov	r0, r3
 80128ea:	f002 f95d 	bl	8014ba8 <SDMMC_CmdBusWidth>
 80128ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d001      	beq.n	80128fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	e003      	b.n	8012902 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80128fa:	2300      	movs	r3, #0
 80128fc:	e001      	b.n	8012902 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80128fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8012902:	4618      	mov	r0, r3
 8012904:	3718      	adds	r7, #24
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}

0801290a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801290a:	b580      	push	{r7, lr}
 801290c:	b086      	sub	sp, #24
 801290e:	af00      	add	r7, sp, #0
 8012910:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8012912:	2300      	movs	r3, #0
 8012914:	60fb      	str	r3, [r7, #12]
 8012916:	2300      	movs	r3, #0
 8012918:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	2100      	movs	r1, #0
 8012920:	4618      	mov	r0, r3
 8012922:	f002 f83b 	bl	801499c <SDMMC_GetResponse>
 8012926:	4603      	mov	r3, r0
 8012928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801292c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012930:	d102      	bne.n	8012938 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8012932:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012936:	e02f      	b.n	8012998 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8012938:	f107 030c 	add.w	r3, r7, #12
 801293c:	4619      	mov	r1, r3
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f000 f82e 	bl	80129a0 <SD_FindSCR>
 8012944:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d001      	beq.n	8012950 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	e023      	b.n	8012998 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8012950:	693b      	ldr	r3, [r7, #16]
 8012952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012956:	2b00      	cmp	r3, #0
 8012958:	d01c      	beq.n	8012994 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681a      	ldr	r2, [r3, #0]
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012962:	041b      	lsls	r3, r3, #16
 8012964:	4619      	mov	r1, r3
 8012966:	4610      	mov	r0, r2
 8012968:	f002 f8d9 	bl	8014b1e <SDMMC_CmdAppCommand>
 801296c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d001      	beq.n	8012978 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	e00f      	b.n	8012998 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	2100      	movs	r1, #0
 801297e:	4618      	mov	r0, r3
 8012980:	f002 f912 	bl	8014ba8 <SDMMC_CmdBusWidth>
 8012984:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d001      	beq.n	8012990 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 801298c:	697b      	ldr	r3, [r7, #20]
 801298e:	e003      	b.n	8012998 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8012990:	2300      	movs	r3, #0
 8012992:	e001      	b.n	8012998 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8012994:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8012998:	4618      	mov	r0, r3
 801299a:	3718      	adds	r7, #24
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}

080129a0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80129a0:	b590      	push	{r4, r7, lr}
 80129a2:	b08f      	sub	sp, #60	; 0x3c
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
 80129a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80129aa:	f7f8 fc69 	bl	800b280 <HAL_GetTick>
 80129ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80129b0:	2300      	movs	r3, #0
 80129b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80129b4:	2300      	movs	r3, #0
 80129b6:	60bb      	str	r3, [r7, #8]
 80129b8:	2300      	movs	r3, #0
 80129ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	2108      	movs	r1, #8
 80129c6:	4618      	mov	r0, r3
 80129c8:	f002 f827 	bl	8014a1a <SDMMC_CmdBlockLength>
 80129cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80129ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d001      	beq.n	80129d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80129d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129d6:	e0a9      	b.n	8012b2c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681a      	ldr	r2, [r3, #0]
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80129e0:	041b      	lsls	r3, r3, #16
 80129e2:	4619      	mov	r1, r3
 80129e4:	4610      	mov	r0, r2
 80129e6:	f002 f89a 	bl	8014b1e <SDMMC_CmdAppCommand>
 80129ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80129ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d001      	beq.n	80129f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80129f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f4:	e09a      	b.n	8012b2c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80129f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80129fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80129fc:	2308      	movs	r3, #8
 80129fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8012a00:	2330      	movs	r3, #48	; 0x30
 8012a02:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8012a04:	2302      	movs	r3, #2
 8012a06:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8012a0c:	2301      	movs	r3, #1
 8012a0e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	f107 0210 	add.w	r2, r7, #16
 8012a18:	4611      	mov	r1, r2
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f001 ffd1 	bl	80149c2 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	4618      	mov	r0, r3
 8012a26:	f002 f8e1 	bl	8014bec <SDMMC_CmdSendSCR>
 8012a2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8012a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d022      	beq.n	8012a78 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8012a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a34:	e07a      	b.n	8012b2c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d00e      	beq.n	8012a62 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	6819      	ldr	r1, [r3, #0]
 8012a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a4a:	009b      	lsls	r3, r3, #2
 8012a4c:	f107 0208 	add.w	r2, r7, #8
 8012a50:	18d4      	adds	r4, r2, r3
 8012a52:	4608      	mov	r0, r1
 8012a54:	f001 ff41 	bl	80148da <SDMMC_ReadFIFO>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	6023      	str	r3, [r4, #0]
      index++;
 8012a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a5e:	3301      	adds	r3, #1
 8012a60:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8012a62:	f7f8 fc0d 	bl	800b280 <HAL_GetTick>
 8012a66:	4602      	mov	r2, r0
 8012a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a6a:	1ad3      	subs	r3, r2, r3
 8012a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a70:	d102      	bne.n	8012a78 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8012a72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a76:	e059      	b.n	8012b2c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012a7e:	f240 432a 	movw	r3, #1066	; 0x42a
 8012a82:	4013      	ands	r3, r2
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d0d6      	beq.n	8012a36 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a8e:	f003 0308 	and.w	r3, r3, #8
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d005      	beq.n	8012aa2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	2208      	movs	r2, #8
 8012a9c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8012a9e:	2308      	movs	r3, #8
 8012aa0:	e044      	b.n	8012b2c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012aa8:	f003 0302 	and.w	r3, r3, #2
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d005      	beq.n	8012abc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	2202      	movs	r2, #2
 8012ab6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8012ab8:	2302      	movs	r3, #2
 8012aba:	e037      	b.n	8012b2c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ac2:	f003 0320 	and.w	r3, r3, #32
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d005      	beq.n	8012ad6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	2220      	movs	r2, #32
 8012ad0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8012ad2:	2320      	movs	r3, #32
 8012ad4:	e02a      	b.n	8012b2c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	f240 523a 	movw	r2, #1338	; 0x53a
 8012ade:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	061a      	lsls	r2, r3, #24
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	021b      	lsls	r3, r3, #8
 8012ae8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012aec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	0a1b      	lsrs	r3, r3, #8
 8012af2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8012af6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	0e1b      	lsrs	r3, r3, #24
 8012afc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8012afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b00:	601a      	str	r2, [r3, #0]
    scr++;
 8012b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b04:	3304      	adds	r3, #4
 8012b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	061a      	lsls	r2, r3, #24
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	021b      	lsls	r3, r3, #8
 8012b10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012b14:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8012b16:	68bb      	ldr	r3, [r7, #8]
 8012b18:	0a1b      	lsrs	r3, r3, #8
 8012b1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8012b1e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8012b20:	68bb      	ldr	r3, [r7, #8]
 8012b22:	0e1b      	lsrs	r3, r3, #24
 8012b24:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8012b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b28:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8012b2a:	2300      	movs	r3, #0
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	373c      	adds	r7, #60	; 0x3c
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd90      	pop	{r4, r7, pc}

08012b34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b084      	sub	sp, #16
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d101      	bne.n	8012b46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012b42:	2301      	movs	r3, #1
 8012b44:	e095      	b.n	8012c72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d108      	bne.n	8012b60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012b56:	d009      	beq.n	8012b6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	61da      	str	r2, [r3, #28]
 8012b5e:	e005      	b.n	8012b6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2200      	movs	r2, #0
 8012b64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2200      	movs	r2, #0
 8012b70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012b78:	b2db      	uxtb	r3, r3
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d106      	bne.n	8012b8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2200      	movs	r2, #0
 8012b82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012b86:	6878      	ldr	r0, [r7, #4]
 8012b88:	f7ef fcec 	bl	8002564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	2202      	movs	r2, #2
 8012b90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	681a      	ldr	r2, [r3, #0]
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012ba2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	68db      	ldr	r3, [r3, #12]
 8012ba8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012bac:	d902      	bls.n	8012bb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	60fb      	str	r3, [r7, #12]
 8012bb2:	e002      	b.n	8012bba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8012bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012bb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	68db      	ldr	r3, [r3, #12]
 8012bbe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8012bc2:	d007      	beq.n	8012bd4 <HAL_SPI_Init+0xa0>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	68db      	ldr	r3, [r3, #12]
 8012bc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012bcc:	d002      	beq.n	8012bd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	685b      	ldr	r3, [r3, #4]
 8012bd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	689b      	ldr	r3, [r3, #8]
 8012be0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8012be4:	431a      	orrs	r2, r3
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	691b      	ldr	r3, [r3, #16]
 8012bea:	f003 0302 	and.w	r3, r3, #2
 8012bee:	431a      	orrs	r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	695b      	ldr	r3, [r3, #20]
 8012bf4:	f003 0301 	and.w	r3, r3, #1
 8012bf8:	431a      	orrs	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	699b      	ldr	r3, [r3, #24]
 8012bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012c02:	431a      	orrs	r2, r3
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	69db      	ldr	r3, [r3, #28]
 8012c08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012c0c:	431a      	orrs	r2, r3
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	6a1b      	ldr	r3, [r3, #32]
 8012c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c16:	ea42 0103 	orr.w	r1, r2, r3
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	430a      	orrs	r2, r1
 8012c28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	699b      	ldr	r3, [r3, #24]
 8012c2e:	0c1b      	lsrs	r3, r3, #16
 8012c30:	f003 0204 	and.w	r2, r3, #4
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c38:	f003 0310 	and.w	r3, r3, #16
 8012c3c:	431a      	orrs	r2, r3
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c42:	f003 0308 	and.w	r3, r3, #8
 8012c46:	431a      	orrs	r2, r3
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	68db      	ldr	r3, [r3, #12]
 8012c4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8012c50:	ea42 0103 	orr.w	r1, r2, r3
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	430a      	orrs	r2, r1
 8012c60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2200      	movs	r2, #0
 8012c66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2201      	movs	r2, #1
 8012c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8012c70:	2300      	movs	r3, #0
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3710      	adds	r7, #16
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}

08012c7a <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8012c7a:	b580      	push	{r7, lr}
 8012c7c:	b084      	sub	sp, #16
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	60f8      	str	r0, [r7, #12]
 8012c82:	60b9      	str	r1, [r7, #8]
 8012c84:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d101      	bne.n	8012c90 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	e038      	b.n	8012d02 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8012c96:	b2db      	uxtb	r3, r3
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d106      	bne.n	8012caa <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8012ca4:	68f8      	ldr	r0, [r7, #12]
 8012ca6:	f7ee f947 	bl	8000f38 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	681a      	ldr	r2, [r3, #0]
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	3308      	adds	r3, #8
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	4610      	mov	r0, r2
 8012cb6:	f001 fccb 	bl	8014650 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	6818      	ldr	r0, [r3, #0]
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	689b      	ldr	r3, [r3, #8]
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	68b9      	ldr	r1, [r7, #8]
 8012cc6:	f001 fd53 	bl	8014770 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	6858      	ldr	r0, [r3, #4]
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	689a      	ldr	r2, [r3, #8]
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cd6:	6879      	ldr	r1, [r7, #4]
 8012cd8:	f001 fd9a 	bl	8014810 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	68fa      	ldr	r2, [r7, #12]
 8012ce2:	6892      	ldr	r2, [r2, #8]
 8012ce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	68fa      	ldr	r2, [r7, #12]
 8012cee:	6892      	ldr	r2, [r2, #8]
 8012cf0:	f041 0101 	orr.w	r1, r1, #1
 8012cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	2201      	movs	r2, #1
 8012cfc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8012d00:	2300      	movs	r3, #0
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	3710      	adds	r7, #16
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}

08012d0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012d0a:	b580      	push	{r7, lr}
 8012d0c:	b082      	sub	sp, #8
 8012d0e:	af00      	add	r7, sp, #0
 8012d10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d101      	bne.n	8012d1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012d18:	2301      	movs	r3, #1
 8012d1a:	e049      	b.n	8012db0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012d22:	b2db      	uxtb	r3, r3
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d106      	bne.n	8012d36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f7ef fe23 	bl	800297c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2202      	movs	r2, #2
 8012d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681a      	ldr	r2, [r3, #0]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	3304      	adds	r3, #4
 8012d46:	4619      	mov	r1, r3
 8012d48:	4610      	mov	r0, r2
 8012d4a:	f000 fbad 	bl	80134a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	2201      	movs	r2, #1
 8012d52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2201      	movs	r2, #1
 8012d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	2201      	movs	r2, #1
 8012d62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	2201      	movs	r2, #1
 8012d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2201      	movs	r2, #1
 8012d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2201      	movs	r2, #1
 8012d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2201      	movs	r2, #1
 8012d82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	2201      	movs	r2, #1
 8012d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	2201      	movs	r2, #1
 8012d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2201      	movs	r2, #1
 8012d9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2201      	movs	r2, #1
 8012da2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2201      	movs	r2, #1
 8012daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012dae:	2300      	movs	r3, #0
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3708      	adds	r7, #8
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}

08012db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012db8:	b480      	push	{r7}
 8012dba:	b085      	sub	sp, #20
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012dc6:	b2db      	uxtb	r3, r3
 8012dc8:	2b01      	cmp	r3, #1
 8012dca:	d001      	beq.n	8012dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012dcc:	2301      	movs	r3, #1
 8012dce:	e04f      	b.n	8012e70 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	2202      	movs	r2, #2
 8012dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	68da      	ldr	r2, [r3, #12]
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	f042 0201 	orr.w	r2, r2, #1
 8012de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	4a23      	ldr	r2, [pc, #140]	; (8012e7c <HAL_TIM_Base_Start_IT+0xc4>)
 8012dee:	4293      	cmp	r3, r2
 8012df0:	d01d      	beq.n	8012e2e <HAL_TIM_Base_Start_IT+0x76>
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012dfa:	d018      	beq.n	8012e2e <HAL_TIM_Base_Start_IT+0x76>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	4a1f      	ldr	r2, [pc, #124]	; (8012e80 <HAL_TIM_Base_Start_IT+0xc8>)
 8012e02:	4293      	cmp	r3, r2
 8012e04:	d013      	beq.n	8012e2e <HAL_TIM_Base_Start_IT+0x76>
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	4a1e      	ldr	r2, [pc, #120]	; (8012e84 <HAL_TIM_Base_Start_IT+0xcc>)
 8012e0c:	4293      	cmp	r3, r2
 8012e0e:	d00e      	beq.n	8012e2e <HAL_TIM_Base_Start_IT+0x76>
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4a1c      	ldr	r2, [pc, #112]	; (8012e88 <HAL_TIM_Base_Start_IT+0xd0>)
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d009      	beq.n	8012e2e <HAL_TIM_Base_Start_IT+0x76>
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	4a1b      	ldr	r2, [pc, #108]	; (8012e8c <HAL_TIM_Base_Start_IT+0xd4>)
 8012e20:	4293      	cmp	r3, r2
 8012e22:	d004      	beq.n	8012e2e <HAL_TIM_Base_Start_IT+0x76>
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	4a19      	ldr	r2, [pc, #100]	; (8012e90 <HAL_TIM_Base_Start_IT+0xd8>)
 8012e2a:	4293      	cmp	r3, r2
 8012e2c:	d115      	bne.n	8012e5a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	689a      	ldr	r2, [r3, #8]
 8012e34:	4b17      	ldr	r3, [pc, #92]	; (8012e94 <HAL_TIM_Base_Start_IT+0xdc>)
 8012e36:	4013      	ands	r3, r2
 8012e38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	2b06      	cmp	r3, #6
 8012e3e:	d015      	beq.n	8012e6c <HAL_TIM_Base_Start_IT+0xb4>
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e46:	d011      	beq.n	8012e6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	681a      	ldr	r2, [r3, #0]
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	f042 0201 	orr.w	r2, r2, #1
 8012e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e58:	e008      	b.n	8012e6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	681a      	ldr	r2, [r3, #0]
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	f042 0201 	orr.w	r2, r2, #1
 8012e68:	601a      	str	r2, [r3, #0]
 8012e6a:	e000      	b.n	8012e6e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012e6e:	2300      	movs	r3, #0
}
 8012e70:	4618      	mov	r0, r3
 8012e72:	3714      	adds	r7, #20
 8012e74:	46bd      	mov	sp, r7
 8012e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7a:	4770      	bx	lr
 8012e7c:	40012c00 	.word	0x40012c00
 8012e80:	40000400 	.word	0x40000400
 8012e84:	40000800 	.word	0x40000800
 8012e88:	40000c00 	.word	0x40000c00
 8012e8c:	40013400 	.word	0x40013400
 8012e90:	40014000 	.word	0x40014000
 8012e94:	00010007 	.word	0x00010007

08012e98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b082      	sub	sp, #8
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d101      	bne.n	8012eaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	e049      	b.n	8012f3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012eb0:	b2db      	uxtb	r3, r3
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d106      	bne.n	8012ec4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f7f7 fe3a 	bl	800ab38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2202      	movs	r2, #2
 8012ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681a      	ldr	r2, [r3, #0]
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	3304      	adds	r3, #4
 8012ed4:	4619      	mov	r1, r3
 8012ed6:	4610      	mov	r0, r2
 8012ed8:	f000 fae6 	bl	80134a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	2201      	movs	r2, #1
 8012ee0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	2201      	movs	r2, #1
 8012ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	2201      	movs	r2, #1
 8012ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2201      	movs	r2, #1
 8012ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2201      	movs	r2, #1
 8012f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2201      	movs	r2, #1
 8012f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2201      	movs	r2, #1
 8012f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	2201      	movs	r2, #1
 8012f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	2201      	movs	r2, #1
 8012f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2201      	movs	r2, #1
 8012f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2201      	movs	r2, #1
 8012f30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2201      	movs	r2, #1
 8012f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012f3c:	2300      	movs	r3, #0
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3708      	adds	r7, #8
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
	...

08012f48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b084      	sub	sp, #16
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d109      	bne.n	8012f6c <HAL_TIM_PWM_Start+0x24>
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012f5e:	b2db      	uxtb	r3, r3
 8012f60:	2b01      	cmp	r3, #1
 8012f62:	bf14      	ite	ne
 8012f64:	2301      	movne	r3, #1
 8012f66:	2300      	moveq	r3, #0
 8012f68:	b2db      	uxtb	r3, r3
 8012f6a:	e03c      	b.n	8012fe6 <HAL_TIM_PWM_Start+0x9e>
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	2b04      	cmp	r3, #4
 8012f70:	d109      	bne.n	8012f86 <HAL_TIM_PWM_Start+0x3e>
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012f78:	b2db      	uxtb	r3, r3
 8012f7a:	2b01      	cmp	r3, #1
 8012f7c:	bf14      	ite	ne
 8012f7e:	2301      	movne	r3, #1
 8012f80:	2300      	moveq	r3, #0
 8012f82:	b2db      	uxtb	r3, r3
 8012f84:	e02f      	b.n	8012fe6 <HAL_TIM_PWM_Start+0x9e>
 8012f86:	683b      	ldr	r3, [r7, #0]
 8012f88:	2b08      	cmp	r3, #8
 8012f8a:	d109      	bne.n	8012fa0 <HAL_TIM_PWM_Start+0x58>
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012f92:	b2db      	uxtb	r3, r3
 8012f94:	2b01      	cmp	r3, #1
 8012f96:	bf14      	ite	ne
 8012f98:	2301      	movne	r3, #1
 8012f9a:	2300      	moveq	r3, #0
 8012f9c:	b2db      	uxtb	r3, r3
 8012f9e:	e022      	b.n	8012fe6 <HAL_TIM_PWM_Start+0x9e>
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	2b0c      	cmp	r3, #12
 8012fa4:	d109      	bne.n	8012fba <HAL_TIM_PWM_Start+0x72>
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012fac:	b2db      	uxtb	r3, r3
 8012fae:	2b01      	cmp	r3, #1
 8012fb0:	bf14      	ite	ne
 8012fb2:	2301      	movne	r3, #1
 8012fb4:	2300      	moveq	r3, #0
 8012fb6:	b2db      	uxtb	r3, r3
 8012fb8:	e015      	b.n	8012fe6 <HAL_TIM_PWM_Start+0x9e>
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	2b10      	cmp	r3, #16
 8012fbe:	d109      	bne.n	8012fd4 <HAL_TIM_PWM_Start+0x8c>
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012fc6:	b2db      	uxtb	r3, r3
 8012fc8:	2b01      	cmp	r3, #1
 8012fca:	bf14      	ite	ne
 8012fcc:	2301      	movne	r3, #1
 8012fce:	2300      	moveq	r3, #0
 8012fd0:	b2db      	uxtb	r3, r3
 8012fd2:	e008      	b.n	8012fe6 <HAL_TIM_PWM_Start+0x9e>
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012fda:	b2db      	uxtb	r3, r3
 8012fdc:	2b01      	cmp	r3, #1
 8012fde:	bf14      	ite	ne
 8012fe0:	2301      	movne	r3, #1
 8012fe2:	2300      	moveq	r3, #0
 8012fe4:	b2db      	uxtb	r3, r3
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d001      	beq.n	8012fee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8012fea:	2301      	movs	r3, #1
 8012fec:	e09c      	b.n	8013128 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d104      	bne.n	8012ffe <HAL_TIM_PWM_Start+0xb6>
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2202      	movs	r2, #2
 8012ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012ffc:	e023      	b.n	8013046 <HAL_TIM_PWM_Start+0xfe>
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	2b04      	cmp	r3, #4
 8013002:	d104      	bne.n	801300e <HAL_TIM_PWM_Start+0xc6>
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2202      	movs	r2, #2
 8013008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801300c:	e01b      	b.n	8013046 <HAL_TIM_PWM_Start+0xfe>
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	2b08      	cmp	r3, #8
 8013012:	d104      	bne.n	801301e <HAL_TIM_PWM_Start+0xd6>
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2202      	movs	r2, #2
 8013018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801301c:	e013      	b.n	8013046 <HAL_TIM_PWM_Start+0xfe>
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	2b0c      	cmp	r3, #12
 8013022:	d104      	bne.n	801302e <HAL_TIM_PWM_Start+0xe6>
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	2202      	movs	r2, #2
 8013028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801302c:	e00b      	b.n	8013046 <HAL_TIM_PWM_Start+0xfe>
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	2b10      	cmp	r3, #16
 8013032:	d104      	bne.n	801303e <HAL_TIM_PWM_Start+0xf6>
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	2202      	movs	r2, #2
 8013038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801303c:	e003      	b.n	8013046 <HAL_TIM_PWM_Start+0xfe>
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2202      	movs	r2, #2
 8013042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	2201      	movs	r2, #1
 801304c:	6839      	ldr	r1, [r7, #0]
 801304e:	4618      	mov	r0, r3
 8013050:	f000 fd9a 	bl	8013b88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	4a35      	ldr	r2, [pc, #212]	; (8013130 <HAL_TIM_PWM_Start+0x1e8>)
 801305a:	4293      	cmp	r3, r2
 801305c:	d013      	beq.n	8013086 <HAL_TIM_PWM_Start+0x13e>
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	4a34      	ldr	r2, [pc, #208]	; (8013134 <HAL_TIM_PWM_Start+0x1ec>)
 8013064:	4293      	cmp	r3, r2
 8013066:	d00e      	beq.n	8013086 <HAL_TIM_PWM_Start+0x13e>
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	4a32      	ldr	r2, [pc, #200]	; (8013138 <HAL_TIM_PWM_Start+0x1f0>)
 801306e:	4293      	cmp	r3, r2
 8013070:	d009      	beq.n	8013086 <HAL_TIM_PWM_Start+0x13e>
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	4a31      	ldr	r2, [pc, #196]	; (801313c <HAL_TIM_PWM_Start+0x1f4>)
 8013078:	4293      	cmp	r3, r2
 801307a:	d004      	beq.n	8013086 <HAL_TIM_PWM_Start+0x13e>
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	4a2f      	ldr	r2, [pc, #188]	; (8013140 <HAL_TIM_PWM_Start+0x1f8>)
 8013082:	4293      	cmp	r3, r2
 8013084:	d101      	bne.n	801308a <HAL_TIM_PWM_Start+0x142>
 8013086:	2301      	movs	r3, #1
 8013088:	e000      	b.n	801308c <HAL_TIM_PWM_Start+0x144>
 801308a:	2300      	movs	r3, #0
 801308c:	2b00      	cmp	r3, #0
 801308e:	d007      	beq.n	80130a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801309e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	4a22      	ldr	r2, [pc, #136]	; (8013130 <HAL_TIM_PWM_Start+0x1e8>)
 80130a6:	4293      	cmp	r3, r2
 80130a8:	d01d      	beq.n	80130e6 <HAL_TIM_PWM_Start+0x19e>
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80130b2:	d018      	beq.n	80130e6 <HAL_TIM_PWM_Start+0x19e>
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	4a22      	ldr	r2, [pc, #136]	; (8013144 <HAL_TIM_PWM_Start+0x1fc>)
 80130ba:	4293      	cmp	r3, r2
 80130bc:	d013      	beq.n	80130e6 <HAL_TIM_PWM_Start+0x19e>
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	4a21      	ldr	r2, [pc, #132]	; (8013148 <HAL_TIM_PWM_Start+0x200>)
 80130c4:	4293      	cmp	r3, r2
 80130c6:	d00e      	beq.n	80130e6 <HAL_TIM_PWM_Start+0x19e>
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	4a1f      	ldr	r2, [pc, #124]	; (801314c <HAL_TIM_PWM_Start+0x204>)
 80130ce:	4293      	cmp	r3, r2
 80130d0:	d009      	beq.n	80130e6 <HAL_TIM_PWM_Start+0x19e>
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	4a17      	ldr	r2, [pc, #92]	; (8013134 <HAL_TIM_PWM_Start+0x1ec>)
 80130d8:	4293      	cmp	r3, r2
 80130da:	d004      	beq.n	80130e6 <HAL_TIM_PWM_Start+0x19e>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	4a15      	ldr	r2, [pc, #84]	; (8013138 <HAL_TIM_PWM_Start+0x1f0>)
 80130e2:	4293      	cmp	r3, r2
 80130e4:	d115      	bne.n	8013112 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	689a      	ldr	r2, [r3, #8]
 80130ec:	4b18      	ldr	r3, [pc, #96]	; (8013150 <HAL_TIM_PWM_Start+0x208>)
 80130ee:	4013      	ands	r3, r2
 80130f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	2b06      	cmp	r3, #6
 80130f6:	d015      	beq.n	8013124 <HAL_TIM_PWM_Start+0x1dc>
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80130fe:	d011      	beq.n	8013124 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	681a      	ldr	r2, [r3, #0]
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	f042 0201 	orr.w	r2, r2, #1
 801310e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013110:	e008      	b.n	8013124 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	681a      	ldr	r2, [r3, #0]
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	f042 0201 	orr.w	r2, r2, #1
 8013120:	601a      	str	r2, [r3, #0]
 8013122:	e000      	b.n	8013126 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013124:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013126:	2300      	movs	r3, #0
}
 8013128:	4618      	mov	r0, r3
 801312a:	3710      	adds	r7, #16
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}
 8013130:	40012c00 	.word	0x40012c00
 8013134:	40013400 	.word	0x40013400
 8013138:	40014000 	.word	0x40014000
 801313c:	40014400 	.word	0x40014400
 8013140:	40014800 	.word	0x40014800
 8013144:	40000400 	.word	0x40000400
 8013148:	40000800 	.word	0x40000800
 801314c:	40000c00 	.word	0x40000c00
 8013150:	00010007 	.word	0x00010007

08013154 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b082      	sub	sp, #8
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
 801315c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	2200      	movs	r2, #0
 8013164:	6839      	ldr	r1, [r7, #0]
 8013166:	4618      	mov	r0, r3
 8013168:	f000 fd0e 	bl	8013b88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	4a3e      	ldr	r2, [pc, #248]	; (801326c <HAL_TIM_PWM_Stop+0x118>)
 8013172:	4293      	cmp	r3, r2
 8013174:	d013      	beq.n	801319e <HAL_TIM_PWM_Stop+0x4a>
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	4a3d      	ldr	r2, [pc, #244]	; (8013270 <HAL_TIM_PWM_Stop+0x11c>)
 801317c:	4293      	cmp	r3, r2
 801317e:	d00e      	beq.n	801319e <HAL_TIM_PWM_Stop+0x4a>
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	4a3b      	ldr	r2, [pc, #236]	; (8013274 <HAL_TIM_PWM_Stop+0x120>)
 8013186:	4293      	cmp	r3, r2
 8013188:	d009      	beq.n	801319e <HAL_TIM_PWM_Stop+0x4a>
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	4a3a      	ldr	r2, [pc, #232]	; (8013278 <HAL_TIM_PWM_Stop+0x124>)
 8013190:	4293      	cmp	r3, r2
 8013192:	d004      	beq.n	801319e <HAL_TIM_PWM_Stop+0x4a>
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	4a38      	ldr	r2, [pc, #224]	; (801327c <HAL_TIM_PWM_Stop+0x128>)
 801319a:	4293      	cmp	r3, r2
 801319c:	d101      	bne.n	80131a2 <HAL_TIM_PWM_Stop+0x4e>
 801319e:	2301      	movs	r3, #1
 80131a0:	e000      	b.n	80131a4 <HAL_TIM_PWM_Stop+0x50>
 80131a2:	2300      	movs	r3, #0
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d017      	beq.n	80131d8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	6a1a      	ldr	r2, [r3, #32]
 80131ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80131b2:	4013      	ands	r3, r2
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d10f      	bne.n	80131d8 <HAL_TIM_PWM_Stop+0x84>
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	6a1a      	ldr	r2, [r3, #32]
 80131be:	f240 4344 	movw	r3, #1092	; 0x444
 80131c2:	4013      	ands	r3, r2
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d107      	bne.n	80131d8 <HAL_TIM_PWM_Stop+0x84>
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80131d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	6a1a      	ldr	r2, [r3, #32]
 80131de:	f241 1311 	movw	r3, #4369	; 0x1111
 80131e2:	4013      	ands	r3, r2
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d10f      	bne.n	8013208 <HAL_TIM_PWM_Stop+0xb4>
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	6a1a      	ldr	r2, [r3, #32]
 80131ee:	f240 4344 	movw	r3, #1092	; 0x444
 80131f2:	4013      	ands	r3, r2
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d107      	bne.n	8013208 <HAL_TIM_PWM_Stop+0xb4>
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	681a      	ldr	r2, [r3, #0]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	f022 0201 	bic.w	r2, r2, #1
 8013206:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013208:	683b      	ldr	r3, [r7, #0]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d104      	bne.n	8013218 <HAL_TIM_PWM_Stop+0xc4>
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2201      	movs	r2, #1
 8013212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013216:	e023      	b.n	8013260 <HAL_TIM_PWM_Stop+0x10c>
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	2b04      	cmp	r3, #4
 801321c:	d104      	bne.n	8013228 <HAL_TIM_PWM_Stop+0xd4>
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2201      	movs	r2, #1
 8013222:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013226:	e01b      	b.n	8013260 <HAL_TIM_PWM_Stop+0x10c>
 8013228:	683b      	ldr	r3, [r7, #0]
 801322a:	2b08      	cmp	r3, #8
 801322c:	d104      	bne.n	8013238 <HAL_TIM_PWM_Stop+0xe4>
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	2201      	movs	r2, #1
 8013232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013236:	e013      	b.n	8013260 <HAL_TIM_PWM_Stop+0x10c>
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	2b0c      	cmp	r3, #12
 801323c:	d104      	bne.n	8013248 <HAL_TIM_PWM_Stop+0xf4>
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	2201      	movs	r2, #1
 8013242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013246:	e00b      	b.n	8013260 <HAL_TIM_PWM_Stop+0x10c>
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	2b10      	cmp	r3, #16
 801324c:	d104      	bne.n	8013258 <HAL_TIM_PWM_Stop+0x104>
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2201      	movs	r2, #1
 8013252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013256:	e003      	b.n	8013260 <HAL_TIM_PWM_Stop+0x10c>
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2201      	movs	r2, #1
 801325c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8013260:	2300      	movs	r3, #0
}
 8013262:	4618      	mov	r0, r3
 8013264:	3708      	adds	r7, #8
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}
 801326a:	bf00      	nop
 801326c:	40012c00 	.word	0x40012c00
 8013270:	40013400 	.word	0x40013400
 8013274:	40014000 	.word	0x40014000
 8013278:	40014400 	.word	0x40014400
 801327c:	40014800 	.word	0x40014800

08013280 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b086      	sub	sp, #24
 8013284:	af00      	add	r7, sp, #0
 8013286:	60f8      	str	r0, [r7, #12]
 8013288:	60b9      	str	r1, [r7, #8]
 801328a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801328c:	2300      	movs	r3, #0
 801328e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013296:	2b01      	cmp	r3, #1
 8013298:	d101      	bne.n	801329e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801329a:	2302      	movs	r3, #2
 801329c:	e0ff      	b.n	801349e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	2201      	movs	r2, #1
 80132a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	2b14      	cmp	r3, #20
 80132aa:	f200 80f0 	bhi.w	801348e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80132ae:	a201      	add	r2, pc, #4	; (adr r2, 80132b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80132b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132b4:	08013309 	.word	0x08013309
 80132b8:	0801348f 	.word	0x0801348f
 80132bc:	0801348f 	.word	0x0801348f
 80132c0:	0801348f 	.word	0x0801348f
 80132c4:	08013349 	.word	0x08013349
 80132c8:	0801348f 	.word	0x0801348f
 80132cc:	0801348f 	.word	0x0801348f
 80132d0:	0801348f 	.word	0x0801348f
 80132d4:	0801338b 	.word	0x0801338b
 80132d8:	0801348f 	.word	0x0801348f
 80132dc:	0801348f 	.word	0x0801348f
 80132e0:	0801348f 	.word	0x0801348f
 80132e4:	080133cb 	.word	0x080133cb
 80132e8:	0801348f 	.word	0x0801348f
 80132ec:	0801348f 	.word	0x0801348f
 80132f0:	0801348f 	.word	0x0801348f
 80132f4:	0801340d 	.word	0x0801340d
 80132f8:	0801348f 	.word	0x0801348f
 80132fc:	0801348f 	.word	0x0801348f
 8013300:	0801348f 	.word	0x0801348f
 8013304:	0801344d 	.word	0x0801344d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	68b9      	ldr	r1, [r7, #8]
 801330e:	4618      	mov	r0, r3
 8013310:	f000 f964 	bl	80135dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	699a      	ldr	r2, [r3, #24]
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	f042 0208 	orr.w	r2, r2, #8
 8013322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	699a      	ldr	r2, [r3, #24]
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	f022 0204 	bic.w	r2, r2, #4
 8013332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	6999      	ldr	r1, [r3, #24]
 801333a:	68bb      	ldr	r3, [r7, #8]
 801333c:	691a      	ldr	r2, [r3, #16]
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	430a      	orrs	r2, r1
 8013344:	619a      	str	r2, [r3, #24]
      break;
 8013346:	e0a5      	b.n	8013494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	68b9      	ldr	r1, [r7, #8]
 801334e:	4618      	mov	r0, r3
 8013350:	f000 f9d4 	bl	80136fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	699a      	ldr	r2, [r3, #24]
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	699a      	ldr	r2, [r3, #24]
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	6999      	ldr	r1, [r3, #24]
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	691b      	ldr	r3, [r3, #16]
 801337e:	021a      	lsls	r2, r3, #8
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	430a      	orrs	r2, r1
 8013386:	619a      	str	r2, [r3, #24]
      break;
 8013388:	e084      	b.n	8013494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	68b9      	ldr	r1, [r7, #8]
 8013390:	4618      	mov	r0, r3
 8013392:	f000 fa3d 	bl	8013810 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	69da      	ldr	r2, [r3, #28]
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	f042 0208 	orr.w	r2, r2, #8
 80133a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	69da      	ldr	r2, [r3, #28]
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	f022 0204 	bic.w	r2, r2, #4
 80133b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	69d9      	ldr	r1, [r3, #28]
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	691a      	ldr	r2, [r3, #16]
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	430a      	orrs	r2, r1
 80133c6:	61da      	str	r2, [r3, #28]
      break;
 80133c8:	e064      	b.n	8013494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	68b9      	ldr	r1, [r7, #8]
 80133d0:	4618      	mov	r0, r3
 80133d2:	f000 faa5 	bl	8013920 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	69da      	ldr	r2, [r3, #28]
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80133e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	69da      	ldr	r2, [r3, #28]
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80133f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	69d9      	ldr	r1, [r3, #28]
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	691b      	ldr	r3, [r3, #16]
 8013400:	021a      	lsls	r2, r3, #8
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	430a      	orrs	r2, r1
 8013408:	61da      	str	r2, [r3, #28]
      break;
 801340a:	e043      	b.n	8013494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	68b9      	ldr	r1, [r7, #8]
 8013412:	4618      	mov	r0, r3
 8013414:	f000 faee 	bl	80139f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	f042 0208 	orr.w	r2, r2, #8
 8013426:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	f022 0204 	bic.w	r2, r2, #4
 8013436:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	691a      	ldr	r2, [r3, #16]
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	430a      	orrs	r2, r1
 8013448:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801344a:	e023      	b.n	8013494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	68b9      	ldr	r1, [r7, #8]
 8013452:	4618      	mov	r0, r3
 8013454:	f000 fb32 	bl	8013abc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013466:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013476:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	691b      	ldr	r3, [r3, #16]
 8013482:	021a      	lsls	r2, r3, #8
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	430a      	orrs	r2, r1
 801348a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801348c:	e002      	b.n	8013494 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801348e:	2301      	movs	r3, #1
 8013490:	75fb      	strb	r3, [r7, #23]
      break;
 8013492:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	2200      	movs	r2, #0
 8013498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801349c:	7dfb      	ldrb	r3, [r7, #23]
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3718      	adds	r7, #24
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}
 80134a6:	bf00      	nop

080134a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80134a8:	b480      	push	{r7}
 80134aa:	b085      	sub	sp, #20
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
 80134b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	4a40      	ldr	r2, [pc, #256]	; (80135bc <TIM_Base_SetConfig+0x114>)
 80134bc:	4293      	cmp	r3, r2
 80134be:	d013      	beq.n	80134e8 <TIM_Base_SetConfig+0x40>
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80134c6:	d00f      	beq.n	80134e8 <TIM_Base_SetConfig+0x40>
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	4a3d      	ldr	r2, [pc, #244]	; (80135c0 <TIM_Base_SetConfig+0x118>)
 80134cc:	4293      	cmp	r3, r2
 80134ce:	d00b      	beq.n	80134e8 <TIM_Base_SetConfig+0x40>
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	4a3c      	ldr	r2, [pc, #240]	; (80135c4 <TIM_Base_SetConfig+0x11c>)
 80134d4:	4293      	cmp	r3, r2
 80134d6:	d007      	beq.n	80134e8 <TIM_Base_SetConfig+0x40>
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	4a3b      	ldr	r2, [pc, #236]	; (80135c8 <TIM_Base_SetConfig+0x120>)
 80134dc:	4293      	cmp	r3, r2
 80134de:	d003      	beq.n	80134e8 <TIM_Base_SetConfig+0x40>
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	4a3a      	ldr	r2, [pc, #232]	; (80135cc <TIM_Base_SetConfig+0x124>)
 80134e4:	4293      	cmp	r3, r2
 80134e6:	d108      	bne.n	80134fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80134ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80134f0:	683b      	ldr	r3, [r7, #0]
 80134f2:	685b      	ldr	r3, [r3, #4]
 80134f4:	68fa      	ldr	r2, [r7, #12]
 80134f6:	4313      	orrs	r3, r2
 80134f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	4a2f      	ldr	r2, [pc, #188]	; (80135bc <TIM_Base_SetConfig+0x114>)
 80134fe:	4293      	cmp	r3, r2
 8013500:	d01f      	beq.n	8013542 <TIM_Base_SetConfig+0x9a>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013508:	d01b      	beq.n	8013542 <TIM_Base_SetConfig+0x9a>
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	4a2c      	ldr	r2, [pc, #176]	; (80135c0 <TIM_Base_SetConfig+0x118>)
 801350e:	4293      	cmp	r3, r2
 8013510:	d017      	beq.n	8013542 <TIM_Base_SetConfig+0x9a>
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	4a2b      	ldr	r2, [pc, #172]	; (80135c4 <TIM_Base_SetConfig+0x11c>)
 8013516:	4293      	cmp	r3, r2
 8013518:	d013      	beq.n	8013542 <TIM_Base_SetConfig+0x9a>
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	4a2a      	ldr	r2, [pc, #168]	; (80135c8 <TIM_Base_SetConfig+0x120>)
 801351e:	4293      	cmp	r3, r2
 8013520:	d00f      	beq.n	8013542 <TIM_Base_SetConfig+0x9a>
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	4a29      	ldr	r2, [pc, #164]	; (80135cc <TIM_Base_SetConfig+0x124>)
 8013526:	4293      	cmp	r3, r2
 8013528:	d00b      	beq.n	8013542 <TIM_Base_SetConfig+0x9a>
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	4a28      	ldr	r2, [pc, #160]	; (80135d0 <TIM_Base_SetConfig+0x128>)
 801352e:	4293      	cmp	r3, r2
 8013530:	d007      	beq.n	8013542 <TIM_Base_SetConfig+0x9a>
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	4a27      	ldr	r2, [pc, #156]	; (80135d4 <TIM_Base_SetConfig+0x12c>)
 8013536:	4293      	cmp	r3, r2
 8013538:	d003      	beq.n	8013542 <TIM_Base_SetConfig+0x9a>
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	4a26      	ldr	r2, [pc, #152]	; (80135d8 <TIM_Base_SetConfig+0x130>)
 801353e:	4293      	cmp	r3, r2
 8013540:	d108      	bne.n	8013554 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801354a:	683b      	ldr	r3, [r7, #0]
 801354c:	68db      	ldr	r3, [r3, #12]
 801354e:	68fa      	ldr	r2, [r7, #12]
 8013550:	4313      	orrs	r3, r2
 8013552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	695b      	ldr	r3, [r3, #20]
 801355e:	4313      	orrs	r3, r2
 8013560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	68fa      	ldr	r2, [r7, #12]
 8013566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	689a      	ldr	r2, [r3, #8]
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	681a      	ldr	r2, [r3, #0]
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	4a10      	ldr	r2, [pc, #64]	; (80135bc <TIM_Base_SetConfig+0x114>)
 801357c:	4293      	cmp	r3, r2
 801357e:	d00f      	beq.n	80135a0 <TIM_Base_SetConfig+0xf8>
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	4a12      	ldr	r2, [pc, #72]	; (80135cc <TIM_Base_SetConfig+0x124>)
 8013584:	4293      	cmp	r3, r2
 8013586:	d00b      	beq.n	80135a0 <TIM_Base_SetConfig+0xf8>
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	4a11      	ldr	r2, [pc, #68]	; (80135d0 <TIM_Base_SetConfig+0x128>)
 801358c:	4293      	cmp	r3, r2
 801358e:	d007      	beq.n	80135a0 <TIM_Base_SetConfig+0xf8>
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	4a10      	ldr	r2, [pc, #64]	; (80135d4 <TIM_Base_SetConfig+0x12c>)
 8013594:	4293      	cmp	r3, r2
 8013596:	d003      	beq.n	80135a0 <TIM_Base_SetConfig+0xf8>
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	4a0f      	ldr	r2, [pc, #60]	; (80135d8 <TIM_Base_SetConfig+0x130>)
 801359c:	4293      	cmp	r3, r2
 801359e:	d103      	bne.n	80135a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	691a      	ldr	r2, [r3, #16]
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	2201      	movs	r2, #1
 80135ac:	615a      	str	r2, [r3, #20]
}
 80135ae:	bf00      	nop
 80135b0:	3714      	adds	r7, #20
 80135b2:	46bd      	mov	sp, r7
 80135b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b8:	4770      	bx	lr
 80135ba:	bf00      	nop
 80135bc:	40012c00 	.word	0x40012c00
 80135c0:	40000400 	.word	0x40000400
 80135c4:	40000800 	.word	0x40000800
 80135c8:	40000c00 	.word	0x40000c00
 80135cc:	40013400 	.word	0x40013400
 80135d0:	40014000 	.word	0x40014000
 80135d4:	40014400 	.word	0x40014400
 80135d8:	40014800 	.word	0x40014800

080135dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80135dc:	b480      	push	{r7}
 80135de:	b087      	sub	sp, #28
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	6a1b      	ldr	r3, [r3, #32]
 80135ea:	f023 0201 	bic.w	r2, r3, #1
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	6a1b      	ldr	r3, [r3, #32]
 80135f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	685b      	ldr	r3, [r3, #4]
 80135fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	699b      	ldr	r3, [r3, #24]
 8013602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801360a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801360e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	f023 0303 	bic.w	r3, r3, #3
 8013616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013618:	683b      	ldr	r3, [r7, #0]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	68fa      	ldr	r2, [r7, #12]
 801361e:	4313      	orrs	r3, r2
 8013620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013622:	697b      	ldr	r3, [r7, #20]
 8013624:	f023 0302 	bic.w	r3, r3, #2
 8013628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	689b      	ldr	r3, [r3, #8]
 801362e:	697a      	ldr	r2, [r7, #20]
 8013630:	4313      	orrs	r3, r2
 8013632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	4a2c      	ldr	r2, [pc, #176]	; (80136e8 <TIM_OC1_SetConfig+0x10c>)
 8013638:	4293      	cmp	r3, r2
 801363a:	d00f      	beq.n	801365c <TIM_OC1_SetConfig+0x80>
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	4a2b      	ldr	r2, [pc, #172]	; (80136ec <TIM_OC1_SetConfig+0x110>)
 8013640:	4293      	cmp	r3, r2
 8013642:	d00b      	beq.n	801365c <TIM_OC1_SetConfig+0x80>
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	4a2a      	ldr	r2, [pc, #168]	; (80136f0 <TIM_OC1_SetConfig+0x114>)
 8013648:	4293      	cmp	r3, r2
 801364a:	d007      	beq.n	801365c <TIM_OC1_SetConfig+0x80>
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	4a29      	ldr	r2, [pc, #164]	; (80136f4 <TIM_OC1_SetConfig+0x118>)
 8013650:	4293      	cmp	r3, r2
 8013652:	d003      	beq.n	801365c <TIM_OC1_SetConfig+0x80>
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	4a28      	ldr	r2, [pc, #160]	; (80136f8 <TIM_OC1_SetConfig+0x11c>)
 8013658:	4293      	cmp	r3, r2
 801365a:	d10c      	bne.n	8013676 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801365c:	697b      	ldr	r3, [r7, #20]
 801365e:	f023 0308 	bic.w	r3, r3, #8
 8013662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	68db      	ldr	r3, [r3, #12]
 8013668:	697a      	ldr	r2, [r7, #20]
 801366a:	4313      	orrs	r3, r2
 801366c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	f023 0304 	bic.w	r3, r3, #4
 8013674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	4a1b      	ldr	r2, [pc, #108]	; (80136e8 <TIM_OC1_SetConfig+0x10c>)
 801367a:	4293      	cmp	r3, r2
 801367c:	d00f      	beq.n	801369e <TIM_OC1_SetConfig+0xc2>
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	4a1a      	ldr	r2, [pc, #104]	; (80136ec <TIM_OC1_SetConfig+0x110>)
 8013682:	4293      	cmp	r3, r2
 8013684:	d00b      	beq.n	801369e <TIM_OC1_SetConfig+0xc2>
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	4a19      	ldr	r2, [pc, #100]	; (80136f0 <TIM_OC1_SetConfig+0x114>)
 801368a:	4293      	cmp	r3, r2
 801368c:	d007      	beq.n	801369e <TIM_OC1_SetConfig+0xc2>
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	4a18      	ldr	r2, [pc, #96]	; (80136f4 <TIM_OC1_SetConfig+0x118>)
 8013692:	4293      	cmp	r3, r2
 8013694:	d003      	beq.n	801369e <TIM_OC1_SetConfig+0xc2>
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	4a17      	ldr	r2, [pc, #92]	; (80136f8 <TIM_OC1_SetConfig+0x11c>)
 801369a:	4293      	cmp	r3, r2
 801369c:	d111      	bne.n	80136c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801369e:	693b      	ldr	r3, [r7, #16]
 80136a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80136a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80136ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	695b      	ldr	r3, [r3, #20]
 80136b2:	693a      	ldr	r2, [r7, #16]
 80136b4:	4313      	orrs	r3, r2
 80136b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	699b      	ldr	r3, [r3, #24]
 80136bc:	693a      	ldr	r2, [r7, #16]
 80136be:	4313      	orrs	r3, r2
 80136c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	693a      	ldr	r2, [r7, #16]
 80136c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	68fa      	ldr	r2, [r7, #12]
 80136cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	685a      	ldr	r2, [r3, #4]
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	697a      	ldr	r2, [r7, #20]
 80136da:	621a      	str	r2, [r3, #32]
}
 80136dc:	bf00      	nop
 80136de:	371c      	adds	r7, #28
 80136e0:	46bd      	mov	sp, r7
 80136e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e6:	4770      	bx	lr
 80136e8:	40012c00 	.word	0x40012c00
 80136ec:	40013400 	.word	0x40013400
 80136f0:	40014000 	.word	0x40014000
 80136f4:	40014400 	.word	0x40014400
 80136f8:	40014800 	.word	0x40014800

080136fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80136fc:	b480      	push	{r7}
 80136fe:	b087      	sub	sp, #28
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
 8013704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	6a1b      	ldr	r3, [r3, #32]
 801370a:	f023 0210 	bic.w	r2, r3, #16
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	6a1b      	ldr	r3, [r3, #32]
 8013716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	685b      	ldr	r3, [r3, #4]
 801371c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	699b      	ldr	r3, [r3, #24]
 8013722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801372a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801372e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013738:	683b      	ldr	r3, [r7, #0]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	021b      	lsls	r3, r3, #8
 801373e:	68fa      	ldr	r2, [r7, #12]
 8013740:	4313      	orrs	r3, r2
 8013742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013744:	697b      	ldr	r3, [r7, #20]
 8013746:	f023 0320 	bic.w	r3, r3, #32
 801374a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	689b      	ldr	r3, [r3, #8]
 8013750:	011b      	lsls	r3, r3, #4
 8013752:	697a      	ldr	r2, [r7, #20]
 8013754:	4313      	orrs	r3, r2
 8013756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	4a28      	ldr	r2, [pc, #160]	; (80137fc <TIM_OC2_SetConfig+0x100>)
 801375c:	4293      	cmp	r3, r2
 801375e:	d003      	beq.n	8013768 <TIM_OC2_SetConfig+0x6c>
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	4a27      	ldr	r2, [pc, #156]	; (8013800 <TIM_OC2_SetConfig+0x104>)
 8013764:	4293      	cmp	r3, r2
 8013766:	d10d      	bne.n	8013784 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013768:	697b      	ldr	r3, [r7, #20]
 801376a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801376e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	68db      	ldr	r3, [r3, #12]
 8013774:	011b      	lsls	r3, r3, #4
 8013776:	697a      	ldr	r2, [r7, #20]
 8013778:	4313      	orrs	r3, r2
 801377a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013782:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	4a1d      	ldr	r2, [pc, #116]	; (80137fc <TIM_OC2_SetConfig+0x100>)
 8013788:	4293      	cmp	r3, r2
 801378a:	d00f      	beq.n	80137ac <TIM_OC2_SetConfig+0xb0>
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	4a1c      	ldr	r2, [pc, #112]	; (8013800 <TIM_OC2_SetConfig+0x104>)
 8013790:	4293      	cmp	r3, r2
 8013792:	d00b      	beq.n	80137ac <TIM_OC2_SetConfig+0xb0>
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	4a1b      	ldr	r2, [pc, #108]	; (8013804 <TIM_OC2_SetConfig+0x108>)
 8013798:	4293      	cmp	r3, r2
 801379a:	d007      	beq.n	80137ac <TIM_OC2_SetConfig+0xb0>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	4a1a      	ldr	r2, [pc, #104]	; (8013808 <TIM_OC2_SetConfig+0x10c>)
 80137a0:	4293      	cmp	r3, r2
 80137a2:	d003      	beq.n	80137ac <TIM_OC2_SetConfig+0xb0>
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	4a19      	ldr	r2, [pc, #100]	; (801380c <TIM_OC2_SetConfig+0x110>)
 80137a8:	4293      	cmp	r3, r2
 80137aa:	d113      	bne.n	80137d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80137b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80137b4:	693b      	ldr	r3, [r7, #16]
 80137b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80137ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	695b      	ldr	r3, [r3, #20]
 80137c0:	009b      	lsls	r3, r3, #2
 80137c2:	693a      	ldr	r2, [r7, #16]
 80137c4:	4313      	orrs	r3, r2
 80137c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	699b      	ldr	r3, [r3, #24]
 80137cc:	009b      	lsls	r3, r3, #2
 80137ce:	693a      	ldr	r2, [r7, #16]
 80137d0:	4313      	orrs	r3, r2
 80137d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	693a      	ldr	r2, [r7, #16]
 80137d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	68fa      	ldr	r2, [r7, #12]
 80137de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	685a      	ldr	r2, [r3, #4]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	697a      	ldr	r2, [r7, #20]
 80137ec:	621a      	str	r2, [r3, #32]
}
 80137ee:	bf00      	nop
 80137f0:	371c      	adds	r7, #28
 80137f2:	46bd      	mov	sp, r7
 80137f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f8:	4770      	bx	lr
 80137fa:	bf00      	nop
 80137fc:	40012c00 	.word	0x40012c00
 8013800:	40013400 	.word	0x40013400
 8013804:	40014000 	.word	0x40014000
 8013808:	40014400 	.word	0x40014400
 801380c:	40014800 	.word	0x40014800

08013810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013810:	b480      	push	{r7}
 8013812:	b087      	sub	sp, #28
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6a1b      	ldr	r3, [r3, #32]
 801381e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	6a1b      	ldr	r3, [r3, #32]
 801382a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	685b      	ldr	r3, [r3, #4]
 8013830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	69db      	ldr	r3, [r3, #28]
 8013836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801383e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	f023 0303 	bic.w	r3, r3, #3
 801384a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	68fa      	ldr	r2, [r7, #12]
 8013852:	4313      	orrs	r3, r2
 8013854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801385c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801385e:	683b      	ldr	r3, [r7, #0]
 8013860:	689b      	ldr	r3, [r3, #8]
 8013862:	021b      	lsls	r3, r3, #8
 8013864:	697a      	ldr	r2, [r7, #20]
 8013866:	4313      	orrs	r3, r2
 8013868:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	4a27      	ldr	r2, [pc, #156]	; (801390c <TIM_OC3_SetConfig+0xfc>)
 801386e:	4293      	cmp	r3, r2
 8013870:	d003      	beq.n	801387a <TIM_OC3_SetConfig+0x6a>
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	4a26      	ldr	r2, [pc, #152]	; (8013910 <TIM_OC3_SetConfig+0x100>)
 8013876:	4293      	cmp	r3, r2
 8013878:	d10d      	bne.n	8013896 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013880:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	68db      	ldr	r3, [r3, #12]
 8013886:	021b      	lsls	r3, r3, #8
 8013888:	697a      	ldr	r2, [r7, #20]
 801388a:	4313      	orrs	r3, r2
 801388c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	4a1c      	ldr	r2, [pc, #112]	; (801390c <TIM_OC3_SetConfig+0xfc>)
 801389a:	4293      	cmp	r3, r2
 801389c:	d00f      	beq.n	80138be <TIM_OC3_SetConfig+0xae>
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	4a1b      	ldr	r2, [pc, #108]	; (8013910 <TIM_OC3_SetConfig+0x100>)
 80138a2:	4293      	cmp	r3, r2
 80138a4:	d00b      	beq.n	80138be <TIM_OC3_SetConfig+0xae>
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	4a1a      	ldr	r2, [pc, #104]	; (8013914 <TIM_OC3_SetConfig+0x104>)
 80138aa:	4293      	cmp	r3, r2
 80138ac:	d007      	beq.n	80138be <TIM_OC3_SetConfig+0xae>
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	4a19      	ldr	r2, [pc, #100]	; (8013918 <TIM_OC3_SetConfig+0x108>)
 80138b2:	4293      	cmp	r3, r2
 80138b4:	d003      	beq.n	80138be <TIM_OC3_SetConfig+0xae>
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	4a18      	ldr	r2, [pc, #96]	; (801391c <TIM_OC3_SetConfig+0x10c>)
 80138ba:	4293      	cmp	r3, r2
 80138bc:	d113      	bne.n	80138e6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80138be:	693b      	ldr	r3, [r7, #16]
 80138c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80138c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80138cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80138ce:	683b      	ldr	r3, [r7, #0]
 80138d0:	695b      	ldr	r3, [r3, #20]
 80138d2:	011b      	lsls	r3, r3, #4
 80138d4:	693a      	ldr	r2, [r7, #16]
 80138d6:	4313      	orrs	r3, r2
 80138d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	699b      	ldr	r3, [r3, #24]
 80138de:	011b      	lsls	r3, r3, #4
 80138e0:	693a      	ldr	r2, [r7, #16]
 80138e2:	4313      	orrs	r3, r2
 80138e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	693a      	ldr	r2, [r7, #16]
 80138ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	68fa      	ldr	r2, [r7, #12]
 80138f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80138f2:	683b      	ldr	r3, [r7, #0]
 80138f4:	685a      	ldr	r2, [r3, #4]
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	697a      	ldr	r2, [r7, #20]
 80138fe:	621a      	str	r2, [r3, #32]
}
 8013900:	bf00      	nop
 8013902:	371c      	adds	r7, #28
 8013904:	46bd      	mov	sp, r7
 8013906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390a:	4770      	bx	lr
 801390c:	40012c00 	.word	0x40012c00
 8013910:	40013400 	.word	0x40013400
 8013914:	40014000 	.word	0x40014000
 8013918:	40014400 	.word	0x40014400
 801391c:	40014800 	.word	0x40014800

08013920 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013920:	b480      	push	{r7}
 8013922:	b087      	sub	sp, #28
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
 8013928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	6a1b      	ldr	r3, [r3, #32]
 801392e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6a1b      	ldr	r3, [r3, #32]
 801393a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	685b      	ldr	r3, [r3, #4]
 8013940:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	69db      	ldr	r3, [r3, #28]
 8013946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801394e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801395a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	021b      	lsls	r3, r3, #8
 8013962:	68fa      	ldr	r2, [r7, #12]
 8013964:	4313      	orrs	r3, r2
 8013966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801396e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	689b      	ldr	r3, [r3, #8]
 8013974:	031b      	lsls	r3, r3, #12
 8013976:	693a      	ldr	r2, [r7, #16]
 8013978:	4313      	orrs	r3, r2
 801397a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	4a18      	ldr	r2, [pc, #96]	; (80139e0 <TIM_OC4_SetConfig+0xc0>)
 8013980:	4293      	cmp	r3, r2
 8013982:	d00f      	beq.n	80139a4 <TIM_OC4_SetConfig+0x84>
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	4a17      	ldr	r2, [pc, #92]	; (80139e4 <TIM_OC4_SetConfig+0xc4>)
 8013988:	4293      	cmp	r3, r2
 801398a:	d00b      	beq.n	80139a4 <TIM_OC4_SetConfig+0x84>
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	4a16      	ldr	r2, [pc, #88]	; (80139e8 <TIM_OC4_SetConfig+0xc8>)
 8013990:	4293      	cmp	r3, r2
 8013992:	d007      	beq.n	80139a4 <TIM_OC4_SetConfig+0x84>
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	4a15      	ldr	r2, [pc, #84]	; (80139ec <TIM_OC4_SetConfig+0xcc>)
 8013998:	4293      	cmp	r3, r2
 801399a:	d003      	beq.n	80139a4 <TIM_OC4_SetConfig+0x84>
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	4a14      	ldr	r2, [pc, #80]	; (80139f0 <TIM_OC4_SetConfig+0xd0>)
 80139a0:	4293      	cmp	r3, r2
 80139a2:	d109      	bne.n	80139b8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80139a4:	697b      	ldr	r3, [r7, #20]
 80139a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80139aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80139ac:	683b      	ldr	r3, [r7, #0]
 80139ae:	695b      	ldr	r3, [r3, #20]
 80139b0:	019b      	lsls	r3, r3, #6
 80139b2:	697a      	ldr	r2, [r7, #20]
 80139b4:	4313      	orrs	r3, r2
 80139b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	697a      	ldr	r2, [r7, #20]
 80139bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	68fa      	ldr	r2, [r7, #12]
 80139c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	685a      	ldr	r2, [r3, #4]
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	693a      	ldr	r2, [r7, #16]
 80139d0:	621a      	str	r2, [r3, #32]
}
 80139d2:	bf00      	nop
 80139d4:	371c      	adds	r7, #28
 80139d6:	46bd      	mov	sp, r7
 80139d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139dc:	4770      	bx	lr
 80139de:	bf00      	nop
 80139e0:	40012c00 	.word	0x40012c00
 80139e4:	40013400 	.word	0x40013400
 80139e8:	40014000 	.word	0x40014000
 80139ec:	40014400 	.word	0x40014400
 80139f0:	40014800 	.word	0x40014800

080139f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80139f4:	b480      	push	{r7}
 80139f6:	b087      	sub	sp, #28
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	6a1b      	ldr	r3, [r3, #32]
 8013a02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	6a1b      	ldr	r3, [r3, #32]
 8013a0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	685b      	ldr	r3, [r3, #4]
 8013a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	68fa      	ldr	r2, [r7, #12]
 8013a2e:	4313      	orrs	r3, r2
 8013a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013a38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	689b      	ldr	r3, [r3, #8]
 8013a3e:	041b      	lsls	r3, r3, #16
 8013a40:	693a      	ldr	r2, [r7, #16]
 8013a42:	4313      	orrs	r3, r2
 8013a44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	4a17      	ldr	r2, [pc, #92]	; (8013aa8 <TIM_OC5_SetConfig+0xb4>)
 8013a4a:	4293      	cmp	r3, r2
 8013a4c:	d00f      	beq.n	8013a6e <TIM_OC5_SetConfig+0x7a>
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	4a16      	ldr	r2, [pc, #88]	; (8013aac <TIM_OC5_SetConfig+0xb8>)
 8013a52:	4293      	cmp	r3, r2
 8013a54:	d00b      	beq.n	8013a6e <TIM_OC5_SetConfig+0x7a>
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	4a15      	ldr	r2, [pc, #84]	; (8013ab0 <TIM_OC5_SetConfig+0xbc>)
 8013a5a:	4293      	cmp	r3, r2
 8013a5c:	d007      	beq.n	8013a6e <TIM_OC5_SetConfig+0x7a>
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	4a14      	ldr	r2, [pc, #80]	; (8013ab4 <TIM_OC5_SetConfig+0xc0>)
 8013a62:	4293      	cmp	r3, r2
 8013a64:	d003      	beq.n	8013a6e <TIM_OC5_SetConfig+0x7a>
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	4a13      	ldr	r2, [pc, #76]	; (8013ab8 <TIM_OC5_SetConfig+0xc4>)
 8013a6a:	4293      	cmp	r3, r2
 8013a6c:	d109      	bne.n	8013a82 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013a6e:	697b      	ldr	r3, [r7, #20]
 8013a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013a74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	695b      	ldr	r3, [r3, #20]
 8013a7a:	021b      	lsls	r3, r3, #8
 8013a7c:	697a      	ldr	r2, [r7, #20]
 8013a7e:	4313      	orrs	r3, r2
 8013a80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	697a      	ldr	r2, [r7, #20]
 8013a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	68fa      	ldr	r2, [r7, #12]
 8013a8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	685a      	ldr	r2, [r3, #4]
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	693a      	ldr	r2, [r7, #16]
 8013a9a:	621a      	str	r2, [r3, #32]
}
 8013a9c:	bf00      	nop
 8013a9e:	371c      	adds	r7, #28
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa6:	4770      	bx	lr
 8013aa8:	40012c00 	.word	0x40012c00
 8013aac:	40013400 	.word	0x40013400
 8013ab0:	40014000 	.word	0x40014000
 8013ab4:	40014400 	.word	0x40014400
 8013ab8:	40014800 	.word	0x40014800

08013abc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013abc:	b480      	push	{r7}
 8013abe:	b087      	sub	sp, #28
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
 8013ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	6a1b      	ldr	r3, [r3, #32]
 8013aca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	6a1b      	ldr	r3, [r3, #32]
 8013ad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	685b      	ldr	r3, [r3, #4]
 8013adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	021b      	lsls	r3, r3, #8
 8013af6:	68fa      	ldr	r2, [r7, #12]
 8013af8:	4313      	orrs	r3, r2
 8013afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013afc:	693b      	ldr	r3, [r7, #16]
 8013afe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	689b      	ldr	r3, [r3, #8]
 8013b08:	051b      	lsls	r3, r3, #20
 8013b0a:	693a      	ldr	r2, [r7, #16]
 8013b0c:	4313      	orrs	r3, r2
 8013b0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	4a18      	ldr	r2, [pc, #96]	; (8013b74 <TIM_OC6_SetConfig+0xb8>)
 8013b14:	4293      	cmp	r3, r2
 8013b16:	d00f      	beq.n	8013b38 <TIM_OC6_SetConfig+0x7c>
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	4a17      	ldr	r2, [pc, #92]	; (8013b78 <TIM_OC6_SetConfig+0xbc>)
 8013b1c:	4293      	cmp	r3, r2
 8013b1e:	d00b      	beq.n	8013b38 <TIM_OC6_SetConfig+0x7c>
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	4a16      	ldr	r2, [pc, #88]	; (8013b7c <TIM_OC6_SetConfig+0xc0>)
 8013b24:	4293      	cmp	r3, r2
 8013b26:	d007      	beq.n	8013b38 <TIM_OC6_SetConfig+0x7c>
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	4a15      	ldr	r2, [pc, #84]	; (8013b80 <TIM_OC6_SetConfig+0xc4>)
 8013b2c:	4293      	cmp	r3, r2
 8013b2e:	d003      	beq.n	8013b38 <TIM_OC6_SetConfig+0x7c>
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	4a14      	ldr	r2, [pc, #80]	; (8013b84 <TIM_OC6_SetConfig+0xc8>)
 8013b34:	4293      	cmp	r3, r2
 8013b36:	d109      	bne.n	8013b4c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013b38:	697b      	ldr	r3, [r7, #20]
 8013b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	695b      	ldr	r3, [r3, #20]
 8013b44:	029b      	lsls	r3, r3, #10
 8013b46:	697a      	ldr	r2, [r7, #20]
 8013b48:	4313      	orrs	r3, r2
 8013b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	697a      	ldr	r2, [r7, #20]
 8013b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	68fa      	ldr	r2, [r7, #12]
 8013b56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	685a      	ldr	r2, [r3, #4]
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	693a      	ldr	r2, [r7, #16]
 8013b64:	621a      	str	r2, [r3, #32]
}
 8013b66:	bf00      	nop
 8013b68:	371c      	adds	r7, #28
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b70:	4770      	bx	lr
 8013b72:	bf00      	nop
 8013b74:	40012c00 	.word	0x40012c00
 8013b78:	40013400 	.word	0x40013400
 8013b7c:	40014000 	.word	0x40014000
 8013b80:	40014400 	.word	0x40014400
 8013b84:	40014800 	.word	0x40014800

08013b88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013b88:	b480      	push	{r7}
 8013b8a:	b087      	sub	sp, #28
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	60f8      	str	r0, [r7, #12]
 8013b90:	60b9      	str	r1, [r7, #8]
 8013b92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013b94:	68bb      	ldr	r3, [r7, #8]
 8013b96:	f003 031f 	and.w	r3, r3, #31
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8013ba0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	6a1a      	ldr	r2, [r3, #32]
 8013ba6:	697b      	ldr	r3, [r7, #20]
 8013ba8:	43db      	mvns	r3, r3
 8013baa:	401a      	ands	r2, r3
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	6a1a      	ldr	r2, [r3, #32]
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	f003 031f 	and.w	r3, r3, #31
 8013bba:	6879      	ldr	r1, [r7, #4]
 8013bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8013bc0:	431a      	orrs	r2, r3
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	621a      	str	r2, [r3, #32]
}
 8013bc6:	bf00      	nop
 8013bc8:	371c      	adds	r7, #28
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd0:	4770      	bx	lr
	...

08013bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013bd4:	b480      	push	{r7}
 8013bd6:	b085      	sub	sp, #20
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
 8013bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013be4:	2b01      	cmp	r3, #1
 8013be6:	d101      	bne.n	8013bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013be8:	2302      	movs	r3, #2
 8013bea:	e068      	b.n	8013cbe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2201      	movs	r2, #1
 8013bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2202      	movs	r2, #2
 8013bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	685b      	ldr	r3, [r3, #4]
 8013c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	689b      	ldr	r3, [r3, #8]
 8013c0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	4a2e      	ldr	r2, [pc, #184]	; (8013ccc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8013c12:	4293      	cmp	r3, r2
 8013c14:	d004      	beq.n	8013c20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	4a2d      	ldr	r2, [pc, #180]	; (8013cd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8013c1c:	4293      	cmp	r3, r2
 8013c1e:	d108      	bne.n	8013c32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013c26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	685b      	ldr	r3, [r3, #4]
 8013c2c:	68fa      	ldr	r2, [r7, #12]
 8013c2e:	4313      	orrs	r3, r2
 8013c30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013c38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	68fa      	ldr	r2, [r7, #12]
 8013c40:	4313      	orrs	r3, r2
 8013c42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	68fa      	ldr	r2, [r7, #12]
 8013c4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	4a1e      	ldr	r2, [pc, #120]	; (8013ccc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8013c52:	4293      	cmp	r3, r2
 8013c54:	d01d      	beq.n	8013c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013c5e:	d018      	beq.n	8013c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	4a1b      	ldr	r2, [pc, #108]	; (8013cd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013c66:	4293      	cmp	r3, r2
 8013c68:	d013      	beq.n	8013c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	4a1a      	ldr	r2, [pc, #104]	; (8013cd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013c70:	4293      	cmp	r3, r2
 8013c72:	d00e      	beq.n	8013c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	4a18      	ldr	r2, [pc, #96]	; (8013cdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013c7a:	4293      	cmp	r3, r2
 8013c7c:	d009      	beq.n	8013c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	4a13      	ldr	r2, [pc, #76]	; (8013cd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8013c84:	4293      	cmp	r3, r2
 8013c86:	d004      	beq.n	8013c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	4a14      	ldr	r2, [pc, #80]	; (8013ce0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013c8e:	4293      	cmp	r3, r2
 8013c90:	d10c      	bne.n	8013cac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013c98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	689b      	ldr	r3, [r3, #8]
 8013c9e:	68ba      	ldr	r2, [r7, #8]
 8013ca0:	4313      	orrs	r3, r2
 8013ca2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	68ba      	ldr	r2, [r7, #8]
 8013caa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2201      	movs	r2, #1
 8013cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013cbc:	2300      	movs	r3, #0
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3714      	adds	r7, #20
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc8:	4770      	bx	lr
 8013cca:	bf00      	nop
 8013ccc:	40012c00 	.word	0x40012c00
 8013cd0:	40013400 	.word	0x40013400
 8013cd4:	40000400 	.word	0x40000400
 8013cd8:	40000800 	.word	0x40000800
 8013cdc:	40000c00 	.word	0x40000c00
 8013ce0:	40014000 	.word	0x40014000

08013ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b082      	sub	sp, #8
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d101      	bne.n	8013cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013cf2:	2301      	movs	r3, #1
 8013cf4:	e040      	b.n	8013d78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d106      	bne.n	8013d0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2200      	movs	r2, #0
 8013d02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013d06:	6878      	ldr	r0, [r7, #4]
 8013d08:	f7ee fee6 	bl	8002ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	2224      	movs	r2, #36	; 0x24
 8013d10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	681a      	ldr	r2, [r3, #0]
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	f022 0201 	bic.w	r2, r2, #1
 8013d20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f000 f82c 	bl	8013d80 <UART_SetConfig>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	2b01      	cmp	r3, #1
 8013d2c:	d101      	bne.n	8013d32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8013d2e:	2301      	movs	r3, #1
 8013d30:	e022      	b.n	8013d78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d002      	beq.n	8013d40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8013d3a:	6878      	ldr	r0, [r7, #4]
 8013d3c:	f000 fad8 	bl	80142f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	685a      	ldr	r2, [r3, #4]
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013d4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	689a      	ldr	r2, [r3, #8]
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013d5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	681a      	ldr	r2, [r3, #0]
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	f042 0201 	orr.w	r2, r2, #1
 8013d6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013d70:	6878      	ldr	r0, [r7, #4]
 8013d72:	f000 fb5f 	bl	8014434 <UART_CheckIdleState>
 8013d76:	4603      	mov	r3, r0
}
 8013d78:	4618      	mov	r0, r3
 8013d7a:	3708      	adds	r7, #8
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}

08013d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013d84:	b08a      	sub	sp, #40	; 0x28
 8013d86:	af00      	add	r7, sp, #0
 8013d88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	689a      	ldr	r2, [r3, #8]
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	691b      	ldr	r3, [r3, #16]
 8013d98:	431a      	orrs	r2, r3
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	695b      	ldr	r3, [r3, #20]
 8013d9e:	431a      	orrs	r2, r3
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	69db      	ldr	r3, [r3, #28]
 8013da4:	4313      	orrs	r3, r2
 8013da6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	681a      	ldr	r2, [r3, #0]
 8013dae:	4ba4      	ldr	r3, [pc, #656]	; (8014040 <UART_SetConfig+0x2c0>)
 8013db0:	4013      	ands	r3, r2
 8013db2:	68fa      	ldr	r2, [r7, #12]
 8013db4:	6812      	ldr	r2, [r2, #0]
 8013db6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013db8:	430b      	orrs	r3, r1
 8013dba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	685b      	ldr	r3, [r3, #4]
 8013dc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	68da      	ldr	r2, [r3, #12]
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	430a      	orrs	r2, r1
 8013dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	699b      	ldr	r3, [r3, #24]
 8013dd6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	4a99      	ldr	r2, [pc, #612]	; (8014044 <UART_SetConfig+0x2c4>)
 8013dde:	4293      	cmp	r3, r2
 8013de0:	d004      	beq.n	8013dec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	6a1b      	ldr	r3, [r3, #32]
 8013de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013de8:	4313      	orrs	r3, r2
 8013dea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	689b      	ldr	r3, [r3, #8]
 8013df2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013dfc:	430a      	orrs	r2, r1
 8013dfe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	4a90      	ldr	r2, [pc, #576]	; (8014048 <UART_SetConfig+0x2c8>)
 8013e06:	4293      	cmp	r3, r2
 8013e08:	d126      	bne.n	8013e58 <UART_SetConfig+0xd8>
 8013e0a:	4b90      	ldr	r3, [pc, #576]	; (801404c <UART_SetConfig+0x2cc>)
 8013e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013e10:	f003 0303 	and.w	r3, r3, #3
 8013e14:	2b03      	cmp	r3, #3
 8013e16:	d81b      	bhi.n	8013e50 <UART_SetConfig+0xd0>
 8013e18:	a201      	add	r2, pc, #4	; (adr r2, 8013e20 <UART_SetConfig+0xa0>)
 8013e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e1e:	bf00      	nop
 8013e20:	08013e31 	.word	0x08013e31
 8013e24:	08013e41 	.word	0x08013e41
 8013e28:	08013e39 	.word	0x08013e39
 8013e2c:	08013e49 	.word	0x08013e49
 8013e30:	2301      	movs	r3, #1
 8013e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013e36:	e116      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013e38:	2302      	movs	r3, #2
 8013e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013e3e:	e112      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013e40:	2304      	movs	r3, #4
 8013e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013e46:	e10e      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013e48:	2308      	movs	r3, #8
 8013e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013e4e:	e10a      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013e50:	2310      	movs	r3, #16
 8013e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013e56:	e106      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	4a7c      	ldr	r2, [pc, #496]	; (8014050 <UART_SetConfig+0x2d0>)
 8013e5e:	4293      	cmp	r3, r2
 8013e60:	d138      	bne.n	8013ed4 <UART_SetConfig+0x154>
 8013e62:	4b7a      	ldr	r3, [pc, #488]	; (801404c <UART_SetConfig+0x2cc>)
 8013e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013e68:	f003 030c 	and.w	r3, r3, #12
 8013e6c:	2b0c      	cmp	r3, #12
 8013e6e:	d82d      	bhi.n	8013ecc <UART_SetConfig+0x14c>
 8013e70:	a201      	add	r2, pc, #4	; (adr r2, 8013e78 <UART_SetConfig+0xf8>)
 8013e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e76:	bf00      	nop
 8013e78:	08013ead 	.word	0x08013ead
 8013e7c:	08013ecd 	.word	0x08013ecd
 8013e80:	08013ecd 	.word	0x08013ecd
 8013e84:	08013ecd 	.word	0x08013ecd
 8013e88:	08013ebd 	.word	0x08013ebd
 8013e8c:	08013ecd 	.word	0x08013ecd
 8013e90:	08013ecd 	.word	0x08013ecd
 8013e94:	08013ecd 	.word	0x08013ecd
 8013e98:	08013eb5 	.word	0x08013eb5
 8013e9c:	08013ecd 	.word	0x08013ecd
 8013ea0:	08013ecd 	.word	0x08013ecd
 8013ea4:	08013ecd 	.word	0x08013ecd
 8013ea8:	08013ec5 	.word	0x08013ec5
 8013eac:	2300      	movs	r3, #0
 8013eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013eb2:	e0d8      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013eb4:	2302      	movs	r3, #2
 8013eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013eba:	e0d4      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013ebc:	2304      	movs	r3, #4
 8013ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013ec2:	e0d0      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013ec4:	2308      	movs	r3, #8
 8013ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013eca:	e0cc      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013ecc:	2310      	movs	r3, #16
 8013ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013ed2:	e0c8      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	4a5e      	ldr	r2, [pc, #376]	; (8014054 <UART_SetConfig+0x2d4>)
 8013eda:	4293      	cmp	r3, r2
 8013edc:	d125      	bne.n	8013f2a <UART_SetConfig+0x1aa>
 8013ede:	4b5b      	ldr	r3, [pc, #364]	; (801404c <UART_SetConfig+0x2cc>)
 8013ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013ee4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013ee8:	2b30      	cmp	r3, #48	; 0x30
 8013eea:	d016      	beq.n	8013f1a <UART_SetConfig+0x19a>
 8013eec:	2b30      	cmp	r3, #48	; 0x30
 8013eee:	d818      	bhi.n	8013f22 <UART_SetConfig+0x1a2>
 8013ef0:	2b20      	cmp	r3, #32
 8013ef2:	d00a      	beq.n	8013f0a <UART_SetConfig+0x18a>
 8013ef4:	2b20      	cmp	r3, #32
 8013ef6:	d814      	bhi.n	8013f22 <UART_SetConfig+0x1a2>
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d002      	beq.n	8013f02 <UART_SetConfig+0x182>
 8013efc:	2b10      	cmp	r3, #16
 8013efe:	d008      	beq.n	8013f12 <UART_SetConfig+0x192>
 8013f00:	e00f      	b.n	8013f22 <UART_SetConfig+0x1a2>
 8013f02:	2300      	movs	r3, #0
 8013f04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013f08:	e0ad      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013f0a:	2302      	movs	r3, #2
 8013f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013f10:	e0a9      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013f12:	2304      	movs	r3, #4
 8013f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013f18:	e0a5      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013f1a:	2308      	movs	r3, #8
 8013f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013f20:	e0a1      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013f22:	2310      	movs	r3, #16
 8013f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013f28:	e09d      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	4a4a      	ldr	r2, [pc, #296]	; (8014058 <UART_SetConfig+0x2d8>)
 8013f30:	4293      	cmp	r3, r2
 8013f32:	d125      	bne.n	8013f80 <UART_SetConfig+0x200>
 8013f34:	4b45      	ldr	r3, [pc, #276]	; (801404c <UART_SetConfig+0x2cc>)
 8013f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013f3e:	2bc0      	cmp	r3, #192	; 0xc0
 8013f40:	d016      	beq.n	8013f70 <UART_SetConfig+0x1f0>
 8013f42:	2bc0      	cmp	r3, #192	; 0xc0
 8013f44:	d818      	bhi.n	8013f78 <UART_SetConfig+0x1f8>
 8013f46:	2b80      	cmp	r3, #128	; 0x80
 8013f48:	d00a      	beq.n	8013f60 <UART_SetConfig+0x1e0>
 8013f4a:	2b80      	cmp	r3, #128	; 0x80
 8013f4c:	d814      	bhi.n	8013f78 <UART_SetConfig+0x1f8>
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d002      	beq.n	8013f58 <UART_SetConfig+0x1d8>
 8013f52:	2b40      	cmp	r3, #64	; 0x40
 8013f54:	d008      	beq.n	8013f68 <UART_SetConfig+0x1e8>
 8013f56:	e00f      	b.n	8013f78 <UART_SetConfig+0x1f8>
 8013f58:	2300      	movs	r3, #0
 8013f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013f5e:	e082      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013f60:	2302      	movs	r3, #2
 8013f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013f66:	e07e      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013f68:	2304      	movs	r3, #4
 8013f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013f6e:	e07a      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013f70:	2308      	movs	r3, #8
 8013f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013f76:	e076      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013f78:	2310      	movs	r3, #16
 8013f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013f7e:	e072      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	4a35      	ldr	r2, [pc, #212]	; (801405c <UART_SetConfig+0x2dc>)
 8013f86:	4293      	cmp	r3, r2
 8013f88:	d12a      	bne.n	8013fe0 <UART_SetConfig+0x260>
 8013f8a:	4b30      	ldr	r3, [pc, #192]	; (801404c <UART_SetConfig+0x2cc>)
 8013f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013f98:	d01a      	beq.n	8013fd0 <UART_SetConfig+0x250>
 8013f9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013f9e:	d81b      	bhi.n	8013fd8 <UART_SetConfig+0x258>
 8013fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013fa4:	d00c      	beq.n	8013fc0 <UART_SetConfig+0x240>
 8013fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013faa:	d815      	bhi.n	8013fd8 <UART_SetConfig+0x258>
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d003      	beq.n	8013fb8 <UART_SetConfig+0x238>
 8013fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013fb4:	d008      	beq.n	8013fc8 <UART_SetConfig+0x248>
 8013fb6:	e00f      	b.n	8013fd8 <UART_SetConfig+0x258>
 8013fb8:	2300      	movs	r3, #0
 8013fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013fbe:	e052      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013fc0:	2302      	movs	r3, #2
 8013fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013fc6:	e04e      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013fc8:	2304      	movs	r3, #4
 8013fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013fce:	e04a      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013fd0:	2308      	movs	r3, #8
 8013fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013fd6:	e046      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013fd8:	2310      	movs	r3, #16
 8013fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013fde:	e042      	b.n	8014066 <UART_SetConfig+0x2e6>
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	4a17      	ldr	r2, [pc, #92]	; (8014044 <UART_SetConfig+0x2c4>)
 8013fe6:	4293      	cmp	r3, r2
 8013fe8:	d13a      	bne.n	8014060 <UART_SetConfig+0x2e0>
 8013fea:	4b18      	ldr	r3, [pc, #96]	; (801404c <UART_SetConfig+0x2cc>)
 8013fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013ff0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8013ff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013ff8:	d01a      	beq.n	8014030 <UART_SetConfig+0x2b0>
 8013ffa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013ffe:	d81b      	bhi.n	8014038 <UART_SetConfig+0x2b8>
 8014000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014004:	d00c      	beq.n	8014020 <UART_SetConfig+0x2a0>
 8014006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801400a:	d815      	bhi.n	8014038 <UART_SetConfig+0x2b8>
 801400c:	2b00      	cmp	r3, #0
 801400e:	d003      	beq.n	8014018 <UART_SetConfig+0x298>
 8014010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014014:	d008      	beq.n	8014028 <UART_SetConfig+0x2a8>
 8014016:	e00f      	b.n	8014038 <UART_SetConfig+0x2b8>
 8014018:	2300      	movs	r3, #0
 801401a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801401e:	e022      	b.n	8014066 <UART_SetConfig+0x2e6>
 8014020:	2302      	movs	r3, #2
 8014022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014026:	e01e      	b.n	8014066 <UART_SetConfig+0x2e6>
 8014028:	2304      	movs	r3, #4
 801402a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801402e:	e01a      	b.n	8014066 <UART_SetConfig+0x2e6>
 8014030:	2308      	movs	r3, #8
 8014032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014036:	e016      	b.n	8014066 <UART_SetConfig+0x2e6>
 8014038:	2310      	movs	r3, #16
 801403a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801403e:	e012      	b.n	8014066 <UART_SetConfig+0x2e6>
 8014040:	efff69f3 	.word	0xefff69f3
 8014044:	40008000 	.word	0x40008000
 8014048:	40013800 	.word	0x40013800
 801404c:	40021000 	.word	0x40021000
 8014050:	40004400 	.word	0x40004400
 8014054:	40004800 	.word	0x40004800
 8014058:	40004c00 	.word	0x40004c00
 801405c:	40005000 	.word	0x40005000
 8014060:	2310      	movs	r3, #16
 8014062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	4a9f      	ldr	r2, [pc, #636]	; (80142e8 <UART_SetConfig+0x568>)
 801406c:	4293      	cmp	r3, r2
 801406e:	d17a      	bne.n	8014166 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014070:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014074:	2b08      	cmp	r3, #8
 8014076:	d824      	bhi.n	80140c2 <UART_SetConfig+0x342>
 8014078:	a201      	add	r2, pc, #4	; (adr r2, 8014080 <UART_SetConfig+0x300>)
 801407a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801407e:	bf00      	nop
 8014080:	080140a5 	.word	0x080140a5
 8014084:	080140c3 	.word	0x080140c3
 8014088:	080140ad 	.word	0x080140ad
 801408c:	080140c3 	.word	0x080140c3
 8014090:	080140b3 	.word	0x080140b3
 8014094:	080140c3 	.word	0x080140c3
 8014098:	080140c3 	.word	0x080140c3
 801409c:	080140c3 	.word	0x080140c3
 80140a0:	080140bb 	.word	0x080140bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80140a4:	f7fc f988 	bl	80103b8 <HAL_RCC_GetPCLK1Freq>
 80140a8:	61f8      	str	r0, [r7, #28]
        break;
 80140aa:	e010      	b.n	80140ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80140ac:	4b8f      	ldr	r3, [pc, #572]	; (80142ec <UART_SetConfig+0x56c>)
 80140ae:	61fb      	str	r3, [r7, #28]
        break;
 80140b0:	e00d      	b.n	80140ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80140b2:	f7fc f8e9 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 80140b6:	61f8      	str	r0, [r7, #28]
        break;
 80140b8:	e009      	b.n	80140ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80140ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80140be:	61fb      	str	r3, [r7, #28]
        break;
 80140c0:	e005      	b.n	80140ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80140c2:	2300      	movs	r3, #0
 80140c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80140c6:	2301      	movs	r3, #1
 80140c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80140cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80140ce:	69fb      	ldr	r3, [r7, #28]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	f000 80fb 	beq.w	80142cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	685a      	ldr	r2, [r3, #4]
 80140da:	4613      	mov	r3, r2
 80140dc:	005b      	lsls	r3, r3, #1
 80140de:	4413      	add	r3, r2
 80140e0:	69fa      	ldr	r2, [r7, #28]
 80140e2:	429a      	cmp	r2, r3
 80140e4:	d305      	bcc.n	80140f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	685b      	ldr	r3, [r3, #4]
 80140ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80140ec:	69fa      	ldr	r2, [r7, #28]
 80140ee:	429a      	cmp	r2, r3
 80140f0:	d903      	bls.n	80140fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80140f2:	2301      	movs	r3, #1
 80140f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80140f8:	e0e8      	b.n	80142cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	2200      	movs	r2, #0
 80140fe:	461c      	mov	r4, r3
 8014100:	4615      	mov	r5, r2
 8014102:	f04f 0200 	mov.w	r2, #0
 8014106:	f04f 0300 	mov.w	r3, #0
 801410a:	022b      	lsls	r3, r5, #8
 801410c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8014110:	0222      	lsls	r2, r4, #8
 8014112:	68f9      	ldr	r1, [r7, #12]
 8014114:	6849      	ldr	r1, [r1, #4]
 8014116:	0849      	lsrs	r1, r1, #1
 8014118:	2000      	movs	r0, #0
 801411a:	4688      	mov	r8, r1
 801411c:	4681      	mov	r9, r0
 801411e:	eb12 0a08 	adds.w	sl, r2, r8
 8014122:	eb43 0b09 	adc.w	fp, r3, r9
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	685b      	ldr	r3, [r3, #4]
 801412a:	2200      	movs	r2, #0
 801412c:	603b      	str	r3, [r7, #0]
 801412e:	607a      	str	r2, [r7, #4]
 8014130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014134:	4650      	mov	r0, sl
 8014136:	4659      	mov	r1, fp
 8014138:	f7ec f8aa 	bl	8000290 <__aeabi_uldivmod>
 801413c:	4602      	mov	r2, r0
 801413e:	460b      	mov	r3, r1
 8014140:	4613      	mov	r3, r2
 8014142:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014144:	69bb      	ldr	r3, [r7, #24]
 8014146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801414a:	d308      	bcc.n	801415e <UART_SetConfig+0x3de>
 801414c:	69bb      	ldr	r3, [r7, #24]
 801414e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014152:	d204      	bcs.n	801415e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	69ba      	ldr	r2, [r7, #24]
 801415a:	60da      	str	r2, [r3, #12]
 801415c:	e0b6      	b.n	80142cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 801415e:	2301      	movs	r3, #1
 8014160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014164:	e0b2      	b.n	80142cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	69db      	ldr	r3, [r3, #28]
 801416a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801416e:	d15e      	bne.n	801422e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8014170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014174:	2b08      	cmp	r3, #8
 8014176:	d828      	bhi.n	80141ca <UART_SetConfig+0x44a>
 8014178:	a201      	add	r2, pc, #4	; (adr r2, 8014180 <UART_SetConfig+0x400>)
 801417a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801417e:	bf00      	nop
 8014180:	080141a5 	.word	0x080141a5
 8014184:	080141ad 	.word	0x080141ad
 8014188:	080141b5 	.word	0x080141b5
 801418c:	080141cb 	.word	0x080141cb
 8014190:	080141bb 	.word	0x080141bb
 8014194:	080141cb 	.word	0x080141cb
 8014198:	080141cb 	.word	0x080141cb
 801419c:	080141cb 	.word	0x080141cb
 80141a0:	080141c3 	.word	0x080141c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80141a4:	f7fc f908 	bl	80103b8 <HAL_RCC_GetPCLK1Freq>
 80141a8:	61f8      	str	r0, [r7, #28]
        break;
 80141aa:	e014      	b.n	80141d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80141ac:	f7fc f91a 	bl	80103e4 <HAL_RCC_GetPCLK2Freq>
 80141b0:	61f8      	str	r0, [r7, #28]
        break;
 80141b2:	e010      	b.n	80141d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80141b4:	4b4d      	ldr	r3, [pc, #308]	; (80142ec <UART_SetConfig+0x56c>)
 80141b6:	61fb      	str	r3, [r7, #28]
        break;
 80141b8:	e00d      	b.n	80141d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80141ba:	f7fc f865 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 80141be:	61f8      	str	r0, [r7, #28]
        break;
 80141c0:	e009      	b.n	80141d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80141c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80141c6:	61fb      	str	r3, [r7, #28]
        break;
 80141c8:	e005      	b.n	80141d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80141ca:	2300      	movs	r3, #0
 80141cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80141ce:	2301      	movs	r3, #1
 80141d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80141d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80141d6:	69fb      	ldr	r3, [r7, #28]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d077      	beq.n	80142cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80141dc:	69fb      	ldr	r3, [r7, #28]
 80141de:	005a      	lsls	r2, r3, #1
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	685b      	ldr	r3, [r3, #4]
 80141e4:	085b      	lsrs	r3, r3, #1
 80141e6:	441a      	add	r2, r3
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	685b      	ldr	r3, [r3, #4]
 80141ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80141f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80141f2:	69bb      	ldr	r3, [r7, #24]
 80141f4:	2b0f      	cmp	r3, #15
 80141f6:	d916      	bls.n	8014226 <UART_SetConfig+0x4a6>
 80141f8:	69bb      	ldr	r3, [r7, #24]
 80141fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80141fe:	d212      	bcs.n	8014226 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014200:	69bb      	ldr	r3, [r7, #24]
 8014202:	b29b      	uxth	r3, r3
 8014204:	f023 030f 	bic.w	r3, r3, #15
 8014208:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801420a:	69bb      	ldr	r3, [r7, #24]
 801420c:	085b      	lsrs	r3, r3, #1
 801420e:	b29b      	uxth	r3, r3
 8014210:	f003 0307 	and.w	r3, r3, #7
 8014214:	b29a      	uxth	r2, r3
 8014216:	8afb      	ldrh	r3, [r7, #22]
 8014218:	4313      	orrs	r3, r2
 801421a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	8afa      	ldrh	r2, [r7, #22]
 8014222:	60da      	str	r2, [r3, #12]
 8014224:	e052      	b.n	80142cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8014226:	2301      	movs	r3, #1
 8014228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801422c:	e04e      	b.n	80142cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801422e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014232:	2b08      	cmp	r3, #8
 8014234:	d827      	bhi.n	8014286 <UART_SetConfig+0x506>
 8014236:	a201      	add	r2, pc, #4	; (adr r2, 801423c <UART_SetConfig+0x4bc>)
 8014238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801423c:	08014261 	.word	0x08014261
 8014240:	08014269 	.word	0x08014269
 8014244:	08014271 	.word	0x08014271
 8014248:	08014287 	.word	0x08014287
 801424c:	08014277 	.word	0x08014277
 8014250:	08014287 	.word	0x08014287
 8014254:	08014287 	.word	0x08014287
 8014258:	08014287 	.word	0x08014287
 801425c:	0801427f 	.word	0x0801427f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014260:	f7fc f8aa 	bl	80103b8 <HAL_RCC_GetPCLK1Freq>
 8014264:	61f8      	str	r0, [r7, #28]
        break;
 8014266:	e014      	b.n	8014292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014268:	f7fc f8bc 	bl	80103e4 <HAL_RCC_GetPCLK2Freq>
 801426c:	61f8      	str	r0, [r7, #28]
        break;
 801426e:	e010      	b.n	8014292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014270:	4b1e      	ldr	r3, [pc, #120]	; (80142ec <UART_SetConfig+0x56c>)
 8014272:	61fb      	str	r3, [r7, #28]
        break;
 8014274:	e00d      	b.n	8014292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014276:	f7fc f807 	bl	8010288 <HAL_RCC_GetSysClockFreq>
 801427a:	61f8      	str	r0, [r7, #28]
        break;
 801427c:	e009      	b.n	8014292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801427e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014282:	61fb      	str	r3, [r7, #28]
        break;
 8014284:	e005      	b.n	8014292 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8014286:	2300      	movs	r3, #0
 8014288:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801428a:	2301      	movs	r3, #1
 801428c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8014290:	bf00      	nop
    }

    if (pclk != 0U)
 8014292:	69fb      	ldr	r3, [r7, #28]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d019      	beq.n	80142cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	685b      	ldr	r3, [r3, #4]
 801429c:	085a      	lsrs	r2, r3, #1
 801429e:	69fb      	ldr	r3, [r7, #28]
 80142a0:	441a      	add	r2, r3
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	685b      	ldr	r3, [r3, #4]
 80142a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80142aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80142ac:	69bb      	ldr	r3, [r7, #24]
 80142ae:	2b0f      	cmp	r3, #15
 80142b0:	d909      	bls.n	80142c6 <UART_SetConfig+0x546>
 80142b2:	69bb      	ldr	r3, [r7, #24]
 80142b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80142b8:	d205      	bcs.n	80142c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80142ba:	69bb      	ldr	r3, [r7, #24]
 80142bc:	b29a      	uxth	r2, r3
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	60da      	str	r2, [r3, #12]
 80142c4:	e002      	b.n	80142cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80142c6:	2301      	movs	r3, #1
 80142c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2200      	movs	r2, #0
 80142d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	2200      	movs	r2, #0
 80142d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80142d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80142dc:	4618      	mov	r0, r3
 80142de:	3728      	adds	r7, #40	; 0x28
 80142e0:	46bd      	mov	sp, r7
 80142e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80142e6:	bf00      	nop
 80142e8:	40008000 	.word	0x40008000
 80142ec:	00f42400 	.word	0x00f42400

080142f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80142f0:	b480      	push	{r7}
 80142f2:	b083      	sub	sp, #12
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142fc:	f003 0301 	and.w	r3, r3, #1
 8014300:	2b00      	cmp	r3, #0
 8014302:	d00a      	beq.n	801431a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	685b      	ldr	r3, [r3, #4]
 801430a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	430a      	orrs	r2, r1
 8014318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801431e:	f003 0302 	and.w	r3, r3, #2
 8014322:	2b00      	cmp	r3, #0
 8014324:	d00a      	beq.n	801433c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	685b      	ldr	r3, [r3, #4]
 801432c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	430a      	orrs	r2, r1
 801433a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014340:	f003 0304 	and.w	r3, r3, #4
 8014344:	2b00      	cmp	r3, #0
 8014346:	d00a      	beq.n	801435e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	685b      	ldr	r3, [r3, #4]
 801434e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	430a      	orrs	r2, r1
 801435c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014362:	f003 0308 	and.w	r3, r3, #8
 8014366:	2b00      	cmp	r3, #0
 8014368:	d00a      	beq.n	8014380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	685b      	ldr	r3, [r3, #4]
 8014370:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	430a      	orrs	r2, r1
 801437e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014384:	f003 0310 	and.w	r3, r3, #16
 8014388:	2b00      	cmp	r3, #0
 801438a:	d00a      	beq.n	80143a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	689b      	ldr	r3, [r3, #8]
 8014392:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	430a      	orrs	r2, r1
 80143a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143a6:	f003 0320 	and.w	r3, r3, #32
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d00a      	beq.n	80143c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	689b      	ldr	r3, [r3, #8]
 80143b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	430a      	orrs	r2, r1
 80143c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d01a      	beq.n	8014406 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	685b      	ldr	r3, [r3, #4]
 80143d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	430a      	orrs	r2, r1
 80143e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80143ee:	d10a      	bne.n	8014406 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	685b      	ldr	r3, [r3, #4]
 80143f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	430a      	orrs	r2, r1
 8014404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801440e:	2b00      	cmp	r3, #0
 8014410:	d00a      	beq.n	8014428 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	685b      	ldr	r3, [r3, #4]
 8014418:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	430a      	orrs	r2, r1
 8014426:	605a      	str	r2, [r3, #4]
  }
}
 8014428:	bf00      	nop
 801442a:	370c      	adds	r7, #12
 801442c:	46bd      	mov	sp, r7
 801442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014432:	4770      	bx	lr

08014434 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b086      	sub	sp, #24
 8014438:	af02      	add	r7, sp, #8
 801443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	2200      	movs	r2, #0
 8014440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014444:	f7f6 ff1c 	bl	800b280 <HAL_GetTick>
 8014448:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	f003 0308 	and.w	r3, r3, #8
 8014454:	2b08      	cmp	r3, #8
 8014456:	d10e      	bne.n	8014476 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014458:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801445c:	9300      	str	r3, [sp, #0]
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	2200      	movs	r2, #0
 8014462:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f000 f82d 	bl	80144c6 <UART_WaitOnFlagUntilTimeout>
 801446c:	4603      	mov	r3, r0
 801446e:	2b00      	cmp	r3, #0
 8014470:	d001      	beq.n	8014476 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014472:	2303      	movs	r3, #3
 8014474:	e023      	b.n	80144be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	f003 0304 	and.w	r3, r3, #4
 8014480:	2b04      	cmp	r3, #4
 8014482:	d10e      	bne.n	80144a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014488:	9300      	str	r3, [sp, #0]
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	2200      	movs	r2, #0
 801448e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f000 f817 	bl	80144c6 <UART_WaitOnFlagUntilTimeout>
 8014498:	4603      	mov	r3, r0
 801449a:	2b00      	cmp	r3, #0
 801449c:	d001      	beq.n	80144a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801449e:	2303      	movs	r3, #3
 80144a0:	e00d      	b.n	80144be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2220      	movs	r2, #32
 80144a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	2220      	movs	r2, #32
 80144ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	2200      	movs	r2, #0
 80144b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	2200      	movs	r2, #0
 80144b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80144bc:	2300      	movs	r3, #0
}
 80144be:	4618      	mov	r0, r3
 80144c0:	3710      	adds	r7, #16
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bd80      	pop	{r7, pc}

080144c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80144c6:	b580      	push	{r7, lr}
 80144c8:	b09c      	sub	sp, #112	; 0x70
 80144ca:	af00      	add	r7, sp, #0
 80144cc:	60f8      	str	r0, [r7, #12]
 80144ce:	60b9      	str	r1, [r7, #8]
 80144d0:	603b      	str	r3, [r7, #0]
 80144d2:	4613      	mov	r3, r2
 80144d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80144d6:	e0a5      	b.n	8014624 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80144d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80144da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80144de:	f000 80a1 	beq.w	8014624 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80144e2:	f7f6 fecd 	bl	800b280 <HAL_GetTick>
 80144e6:	4602      	mov	r2, r0
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	1ad3      	subs	r3, r2, r3
 80144ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d302      	bcc.n	80144f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80144f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d13e      	bne.n	8014576 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014500:	e853 3f00 	ldrex	r3, [r3]
 8014504:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014508:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801450c:	667b      	str	r3, [r7, #100]	; 0x64
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	461a      	mov	r2, r3
 8014514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014516:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014518:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801451a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801451c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801451e:	e841 2300 	strex	r3, r2, [r1]
 8014522:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014526:	2b00      	cmp	r3, #0
 8014528:	d1e6      	bne.n	80144f8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	3308      	adds	r3, #8
 8014530:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014534:	e853 3f00 	ldrex	r3, [r3]
 8014538:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801453c:	f023 0301 	bic.w	r3, r3, #1
 8014540:	663b      	str	r3, [r7, #96]	; 0x60
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	3308      	adds	r3, #8
 8014548:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801454a:	64ba      	str	r2, [r7, #72]	; 0x48
 801454c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801454e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014550:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014552:	e841 2300 	strex	r3, r2, [r1]
 8014556:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801455a:	2b00      	cmp	r3, #0
 801455c:	d1e5      	bne.n	801452a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	2220      	movs	r2, #32
 8014562:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	2220      	movs	r2, #32
 8014568:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	2200      	movs	r2, #0
 801456e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8014572:	2303      	movs	r3, #3
 8014574:	e067      	b.n	8014646 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	f003 0304 	and.w	r3, r3, #4
 8014580:	2b00      	cmp	r3, #0
 8014582:	d04f      	beq.n	8014624 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	69db      	ldr	r3, [r3, #28]
 801458a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801458e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014592:	d147      	bne.n	8014624 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801459c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145a6:	e853 3f00 	ldrex	r3, [r3]
 80145aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80145ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80145b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	461a      	mov	r2, r3
 80145ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80145bc:	637b      	str	r3, [r7, #52]	; 0x34
 80145be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80145c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80145c4:	e841 2300 	strex	r3, r2, [r1]
 80145c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80145ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d1e6      	bne.n	801459e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	3308      	adds	r3, #8
 80145d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145d8:	697b      	ldr	r3, [r7, #20]
 80145da:	e853 3f00 	ldrex	r3, [r3]
 80145de:	613b      	str	r3, [r7, #16]
   return(result);
 80145e0:	693b      	ldr	r3, [r7, #16]
 80145e2:	f023 0301 	bic.w	r3, r3, #1
 80145e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	3308      	adds	r3, #8
 80145ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80145f0:	623a      	str	r2, [r7, #32]
 80145f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145f4:	69f9      	ldr	r1, [r7, #28]
 80145f6:	6a3a      	ldr	r2, [r7, #32]
 80145f8:	e841 2300 	strex	r3, r2, [r1]
 80145fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80145fe:	69bb      	ldr	r3, [r7, #24]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d1e5      	bne.n	80145d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	2220      	movs	r2, #32
 8014608:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	2220      	movs	r2, #32
 801460e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	2220      	movs	r2, #32
 8014614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	2200      	movs	r2, #0
 801461c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8014620:	2303      	movs	r3, #3
 8014622:	e010      	b.n	8014646 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	69da      	ldr	r2, [r3, #28]
 801462a:	68bb      	ldr	r3, [r7, #8]
 801462c:	4013      	ands	r3, r2
 801462e:	68ba      	ldr	r2, [r7, #8]
 8014630:	429a      	cmp	r2, r3
 8014632:	bf0c      	ite	eq
 8014634:	2301      	moveq	r3, #1
 8014636:	2300      	movne	r3, #0
 8014638:	b2db      	uxtb	r3, r3
 801463a:	461a      	mov	r2, r3
 801463c:	79fb      	ldrb	r3, [r7, #7]
 801463e:	429a      	cmp	r2, r3
 8014640:	f43f af4a 	beq.w	80144d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014644:	2300      	movs	r3, #0
}
 8014646:	4618      	mov	r0, r3
 8014648:	3770      	adds	r7, #112	; 0x70
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
	...

08014650 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8014650:	b480      	push	{r7}
 8014652:	b087      	sub	sp, #28
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 801465a:	683b      	ldr	r3, [r7, #0]
 801465c:	681a      	ldr	r2, [r3, #0]
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014664:	683a      	ldr	r2, [r7, #0]
 8014666:	6812      	ldr	r2, [r2, #0]
 8014668:	f023 0101 	bic.w	r1, r3, #1
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	689b      	ldr	r3, [r3, #8]
 8014676:	2b08      	cmp	r3, #8
 8014678:	d102      	bne.n	8014680 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 801467a:	2340      	movs	r3, #64	; 0x40
 801467c:	617b      	str	r3, [r7, #20]
 801467e:	e001      	b.n	8014684 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8014680:	2300      	movs	r3, #0
 8014682:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8014684:	683b      	ldr	r3, [r7, #0]
 8014686:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8014690:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8014696:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 801469c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80146a2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80146a8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80146ae:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80146b0:	683b      	ldr	r3, [r7, #0]
 80146b2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80146b4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80146ba:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80146c0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80146c6:	4313      	orrs	r3, r2
 80146c8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146ce:	693a      	ldr	r2, [r7, #16]
 80146d0:	4313      	orrs	r3, r2
 80146d2:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80146d4:	683b      	ldr	r3, [r7, #0]
 80146d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146d8:	693a      	ldr	r2, [r7, #16]
 80146da:	4313      	orrs	r3, r2
 80146dc:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146e2:	693a      	ldr	r2, [r7, #16]
 80146e4:	4313      	orrs	r3, r2
 80146e6:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80146e8:	4b20      	ldr	r3, [pc, #128]	; (801476c <FMC_NORSRAM_Init+0x11c>)
 80146ea:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80146f2:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80146fa:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8014702:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8014704:	683b      	ldr	r3, [r7, #0]
 8014706:	681a      	ldr	r2, [r3, #0]
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	43db      	mvns	r3, r3
 8014712:	ea02 0103 	and.w	r1, r2, r3
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	681a      	ldr	r2, [r3, #0]
 801471a:	693b      	ldr	r3, [r7, #16]
 801471c:	4319      	orrs	r1, r3
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8014724:	683b      	ldr	r3, [r7, #0]
 8014726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801472c:	d10c      	bne.n	8014748 <FMC_NORSRAM_Init+0xf8>
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d008      	beq.n	8014748 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801473e:	683b      	ldr	r3, [r7, #0]
 8014740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014742:	431a      	orrs	r2, r3
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d006      	beq.n	801475e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	681a      	ldr	r2, [r3, #0]
 8014754:	683b      	ldr	r3, [r7, #0]
 8014756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014758:	431a      	orrs	r2, r3
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 801475e:	2300      	movs	r3, #0
}
 8014760:	4618      	mov	r0, r3
 8014762:	371c      	adds	r7, #28
 8014764:	46bd      	mov	sp, r7
 8014766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476a:	4770      	bx	lr
 801476c:	0008fb7f 	.word	0x0008fb7f

08014770 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8014770:	b480      	push	{r7}
 8014772:	b087      	sub	sp, #28
 8014774:	af00      	add	r7, sp, #0
 8014776:	60f8      	str	r0, [r7, #12]
 8014778:	60b9      	str	r1, [r7, #8]
 801477a:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	1c5a      	adds	r2, r3, #1
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014786:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 801478a:	68bb      	ldr	r3, [r7, #8]
 801478c:	681a      	ldr	r2, [r3, #0]
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	685b      	ldr	r3, [r3, #4]
 8014792:	011b      	lsls	r3, r3, #4
 8014794:	431a      	orrs	r2, r3
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	689b      	ldr	r3, [r3, #8]
 801479a:	021b      	lsls	r3, r3, #8
 801479c:	431a      	orrs	r2, r3
 801479e:	68bb      	ldr	r3, [r7, #8]
 80147a0:	691b      	ldr	r3, [r3, #16]
 80147a2:	041b      	lsls	r3, r3, #16
 80147a4:	431a      	orrs	r2, r3
 80147a6:	68bb      	ldr	r3, [r7, #8]
 80147a8:	695b      	ldr	r3, [r3, #20]
 80147aa:	3b01      	subs	r3, #1
 80147ac:	051b      	lsls	r3, r3, #20
 80147ae:	431a      	orrs	r2, r3
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	699b      	ldr	r3, [r3, #24]
 80147b4:	3b02      	subs	r3, #2
 80147b6:	061b      	lsls	r3, r3, #24
 80147b8:	431a      	orrs	r2, r3
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	69db      	ldr	r3, [r3, #28]
 80147be:	4313      	orrs	r3, r2
 80147c0:	687a      	ldr	r2, [r7, #4]
 80147c2:	3201      	adds	r2, #1
 80147c4:	4319      	orrs	r1, r3
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80147d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80147d8:	d113      	bne.n	8014802 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	685b      	ldr	r3, [r3, #4]
 80147de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80147e2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80147e4:	68bb      	ldr	r3, [r7, #8]
 80147e6:	695b      	ldr	r3, [r3, #20]
 80147e8:	3b01      	subs	r3, #1
 80147ea:	051b      	lsls	r3, r3, #20
 80147ec:	697a      	ldr	r2, [r7, #20]
 80147ee:	4313      	orrs	r3, r2
 80147f0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	685b      	ldr	r3, [r3, #4]
 80147f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80147fa:	697b      	ldr	r3, [r7, #20]
 80147fc:	431a      	orrs	r2, r3
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8014802:	2300      	movs	r3, #0
}
 8014804:	4618      	mov	r0, r3
 8014806:	371c      	adds	r7, #28
 8014808:	46bd      	mov	sp, r7
 801480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480e:	4770      	bx	lr

08014810 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8014810:	b480      	push	{r7}
 8014812:	b085      	sub	sp, #20
 8014814:	af00      	add	r7, sp, #0
 8014816:	60f8      	str	r0, [r7, #12]
 8014818:	60b9      	str	r1, [r7, #8]
 801481a:	607a      	str	r2, [r7, #4]
 801481c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014824:	d11d      	bne.n	8014862 <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	687a      	ldr	r2, [r7, #4]
 801482a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801482e:	4b13      	ldr	r3, [pc, #76]	; (801487c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8014830:	4013      	ands	r3, r2
 8014832:	68ba      	ldr	r2, [r7, #8]
 8014834:	6811      	ldr	r1, [r2, #0]
 8014836:	68ba      	ldr	r2, [r7, #8]
 8014838:	6852      	ldr	r2, [r2, #4]
 801483a:	0112      	lsls	r2, r2, #4
 801483c:	4311      	orrs	r1, r2
 801483e:	68ba      	ldr	r2, [r7, #8]
 8014840:	6892      	ldr	r2, [r2, #8]
 8014842:	0212      	lsls	r2, r2, #8
 8014844:	4311      	orrs	r1, r2
 8014846:	68ba      	ldr	r2, [r7, #8]
 8014848:	69d2      	ldr	r2, [r2, #28]
 801484a:	4311      	orrs	r1, r2
 801484c:	68ba      	ldr	r2, [r7, #8]
 801484e:	6912      	ldr	r2, [r2, #16]
 8014850:	0412      	lsls	r2, r2, #16
 8014852:	430a      	orrs	r2, r1
 8014854:	ea43 0102 	orr.w	r1, r3, r2
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	687a      	ldr	r2, [r7, #4]
 801485c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8014860:	e005      	b.n	801486e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	687a      	ldr	r2, [r7, #4]
 8014866:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801486a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 801486e:	2300      	movs	r3, #0
}
 8014870:	4618      	mov	r0, r3
 8014872:	3714      	adds	r7, #20
 8014874:	46bd      	mov	sp, r7
 8014876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487a:	4770      	bx	lr
 801487c:	cff00000 	.word	0xcff00000

08014880 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8014880:	b084      	sub	sp, #16
 8014882:	b480      	push	{r7}
 8014884:	b085      	sub	sp, #20
 8014886:	af00      	add	r7, sp, #0
 8014888:	6078      	str	r0, [r7, #4]
 801488a:	f107 001c 	add.w	r0, r7, #28
 801488e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8014892:	2300      	movs	r3, #0
 8014894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8014896:	6a3b      	ldr	r3, [r7, #32]
 8014898:	68fa      	ldr	r2, [r7, #12]
 801489a:	4313      	orrs	r3, r2
 801489c:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 801489e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80148a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 80148a2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80148a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80148a6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80148a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80148aa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80148ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80148ae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80148b0:	68fa      	ldr	r2, [r7, #12]
 80148b2:	4313      	orrs	r3, r2
 80148b4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	685b      	ldr	r3, [r3, #4]
 80148ba:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80148be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80148c2:	68fa      	ldr	r2, [r7, #12]
 80148c4:	431a      	orrs	r2, r3
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80148ca:	2300      	movs	r3, #0
}
 80148cc:	4618      	mov	r0, r3
 80148ce:	3714      	adds	r7, #20
 80148d0:	46bd      	mov	sp, r7
 80148d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d6:	b004      	add	sp, #16
 80148d8:	4770      	bx	lr

080148da <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80148da:	b480      	push	{r7}
 80148dc:	b083      	sub	sp, #12
 80148de:	af00      	add	r7, sp, #0
 80148e0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80148e8:	4618      	mov	r0, r3
 80148ea:	370c      	adds	r7, #12
 80148ec:	46bd      	mov	sp, r7
 80148ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f2:	4770      	bx	lr

080148f4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b082      	sub	sp, #8
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	2203      	movs	r2, #3
 8014900:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8014902:	2002      	movs	r0, #2
 8014904:	f7f6 fcc8 	bl	800b298 <HAL_Delay>

  return HAL_OK;
 8014908:	2300      	movs	r3, #0
}
 801490a:	4618      	mov	r0, r3
 801490c:	3708      	adds	r7, #8
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}

08014912 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8014912:	b480      	push	{r7}
 8014914:	b083      	sub	sp, #12
 8014916:	af00      	add	r7, sp, #0
 8014918:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	f003 0303 	and.w	r3, r3, #3
}
 8014922:	4618      	mov	r0, r3
 8014924:	370c      	adds	r7, #12
 8014926:	46bd      	mov	sp, r7
 8014928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492c:	4770      	bx	lr

0801492e <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801492e:	b480      	push	{r7}
 8014930:	b085      	sub	sp, #20
 8014932:	af00      	add	r7, sp, #0
 8014934:	6078      	str	r0, [r7, #4]
 8014936:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8014938:	2300      	movs	r3, #0
 801493a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	681a      	ldr	r2, [r3, #0]
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8014944:	683b      	ldr	r3, [r7, #0]
 8014946:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801494c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8014952:	431a      	orrs	r2, r3
                       Command->CPSM);
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8014958:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801495a:	68fa      	ldr	r2, [r7, #12]
 801495c:	4313      	orrs	r3, r2
 801495e:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	68db      	ldr	r3, [r3, #12]
 8014964:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014968:	f023 030f 	bic.w	r3, r3, #15
 801496c:	68fa      	ldr	r2, [r7, #12]
 801496e:	431a      	orrs	r2, r3
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014974:	2300      	movs	r3, #0
}
 8014976:	4618      	mov	r0, r3
 8014978:	3714      	adds	r7, #20
 801497a:	46bd      	mov	sp, r7
 801497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014980:	4770      	bx	lr

08014982 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8014982:	b480      	push	{r7}
 8014984:	b083      	sub	sp, #12
 8014986:	af00      	add	r7, sp, #0
 8014988:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	691b      	ldr	r3, [r3, #16]
 801498e:	b2db      	uxtb	r3, r3
}
 8014990:	4618      	mov	r0, r3
 8014992:	370c      	adds	r7, #12
 8014994:	46bd      	mov	sp, r7
 8014996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499a:	4770      	bx	lr

0801499c <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801499c:	b480      	push	{r7}
 801499e:	b085      	sub	sp, #20
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
 80149a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	3314      	adds	r3, #20
 80149aa:	461a      	mov	r2, r3
 80149ac:	683b      	ldr	r3, [r7, #0]
 80149ae:	4413      	add	r3, r2
 80149b0:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	681b      	ldr	r3, [r3, #0]
}
 80149b6:	4618      	mov	r0, r3
 80149b8:	3714      	adds	r7, #20
 80149ba:	46bd      	mov	sp, r7
 80149bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c0:	4770      	bx	lr

080149c2 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80149c2:	b480      	push	{r7}
 80149c4:	b085      	sub	sp, #20
 80149c6:	af00      	add	r7, sp, #0
 80149c8:	6078      	str	r0, [r7, #4]
 80149ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80149cc:	2300      	movs	r3, #0
 80149ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	681a      	ldr	r2, [r3, #0]
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	685a      	ldr	r2, [r3, #4]
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80149e0:	683b      	ldr	r3, [r7, #0]
 80149e2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80149e8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80149ee:	431a      	orrs	r2, r3
                       Data->DPSM);
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80149f4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80149f6:	68fa      	ldr	r2, [r7, #12]
 80149f8:	4313      	orrs	r3, r2
 80149fa:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a00:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	431a      	orrs	r2, r3
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8014a0c:	2300      	movs	r3, #0

}
 8014a0e:	4618      	mov	r0, r3
 8014a10:	3714      	adds	r7, #20
 8014a12:	46bd      	mov	sp, r7
 8014a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a18:	4770      	bx	lr

08014a1a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8014a1a:	b580      	push	{r7, lr}
 8014a1c:	b088      	sub	sp, #32
 8014a1e:	af00      	add	r7, sp, #0
 8014a20:	6078      	str	r0, [r7, #4]
 8014a22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8014a28:	2310      	movs	r3, #16
 8014a2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014a2c:	2340      	movs	r3, #64	; 0x40
 8014a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014a30:	2300      	movs	r3, #0
 8014a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014a3a:	f107 0308 	add.w	r3, r7, #8
 8014a3e:	4619      	mov	r1, r3
 8014a40:	6878      	ldr	r0, [r7, #4]
 8014a42:	f7ff ff74 	bl	801492e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8014a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8014a4a:	2110      	movs	r1, #16
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f000 f94d 	bl	8014cec <SDMMC_GetCmdResp1>
 8014a52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014a54:	69fb      	ldr	r3, [r7, #28]
}
 8014a56:	4618      	mov	r0, r3
 8014a58:	3720      	adds	r7, #32
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}

08014a5e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8014a5e:	b580      	push	{r7, lr}
 8014a60:	b08a      	sub	sp, #40	; 0x28
 8014a62:	af00      	add	r7, sp, #0
 8014a64:	60f8      	str	r0, [r7, #12]
 8014a66:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8014a6e:	2307      	movs	r3, #7
 8014a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014a72:	2340      	movs	r3, #64	; 0x40
 8014a74:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014a76:	2300      	movs	r3, #0
 8014a78:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a7e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014a80:	f107 0310 	add.w	r3, r7, #16
 8014a84:	4619      	mov	r1, r3
 8014a86:	68f8      	ldr	r0, [r7, #12]
 8014a88:	f7ff ff51 	bl	801492e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8014a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014a90:	2107      	movs	r1, #7
 8014a92:	68f8      	ldr	r0, [r7, #12]
 8014a94:	f000 f92a 	bl	8014cec <SDMMC_GetCmdResp1>
 8014a98:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8014a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	3728      	adds	r7, #40	; 0x28
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bd80      	pop	{r7, pc}

08014aa4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b088      	sub	sp, #32
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8014aac:	2300      	movs	r3, #0
 8014aae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014ab8:	2300      	movs	r3, #0
 8014aba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014ac0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014ac2:	f107 0308 	add.w	r3, r7, #8
 8014ac6:	4619      	mov	r1, r3
 8014ac8:	6878      	ldr	r0, [r7, #4]
 8014aca:	f7ff ff30 	bl	801492e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	f000 fb44 	bl	801515c <SDMMC_GetCmdError>
 8014ad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014ad6:	69fb      	ldr	r3, [r7, #28]
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	3720      	adds	r7, #32
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}

08014ae0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b088      	sub	sp, #32
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8014ae8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8014aec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8014aee:	2308      	movs	r3, #8
 8014af0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014af2:	2340      	movs	r3, #64	; 0x40
 8014af4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014af6:	2300      	movs	r3, #0
 8014af8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014afe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014b00:	f107 0308 	add.w	r3, r7, #8
 8014b04:	4619      	mov	r1, r3
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f7ff ff11 	bl	801492e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8014b0c:	6878      	ldr	r0, [r7, #4]
 8014b0e:	f000 fad7 	bl	80150c0 <SDMMC_GetCmdResp7>
 8014b12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014b14:	69fb      	ldr	r3, [r7, #28]
}
 8014b16:	4618      	mov	r0, r3
 8014b18:	3720      	adds	r7, #32
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	bd80      	pop	{r7, pc}

08014b1e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014b1e:	b580      	push	{r7, lr}
 8014b20:	b088      	sub	sp, #32
 8014b22:	af00      	add	r7, sp, #0
 8014b24:	6078      	str	r0, [r7, #4]
 8014b26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8014b28:	683b      	ldr	r3, [r7, #0]
 8014b2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8014b2c:	2337      	movs	r3, #55	; 0x37
 8014b2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014b30:	2340      	movs	r3, #64	; 0x40
 8014b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014b34:	2300      	movs	r3, #0
 8014b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014b3e:	f107 0308 	add.w	r3, r7, #8
 8014b42:	4619      	mov	r1, r3
 8014b44:	6878      	ldr	r0, [r7, #4]
 8014b46:	f7ff fef2 	bl	801492e <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8014b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8014b4e:	2137      	movs	r1, #55	; 0x37
 8014b50:	6878      	ldr	r0, [r7, #4]
 8014b52:	f000 f8cb 	bl	8014cec <SDMMC_GetCmdResp1>
 8014b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014b58:	69fb      	ldr	r3, [r7, #28]
}
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	3720      	adds	r7, #32
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}

08014b62 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014b62:	b580      	push	{r7, lr}
 8014b64:	b088      	sub	sp, #32
 8014b66:	af00      	add	r7, sp, #0
 8014b68:	6078      	str	r0, [r7, #4]
 8014b6a:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014b76:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8014b78:	2329      	movs	r3, #41	; 0x29
 8014b7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014b7c:	2340      	movs	r3, #64	; 0x40
 8014b7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014b80:	2300      	movs	r3, #0
 8014b82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014b8a:	f107 0308 	add.w	r3, r7, #8
 8014b8e:	4619      	mov	r1, r3
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f7ff fecc 	bl	801492e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f000 f9de 	bl	8014f58 <SDMMC_GetCmdResp3>
 8014b9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014b9e:	69fb      	ldr	r3, [r7, #28]
}
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	3720      	adds	r7, #32
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bd80      	pop	{r7, pc}

08014ba8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b088      	sub	sp, #32
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
 8014bb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8014bb6:	2306      	movs	r3, #6
 8014bb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014bba:	2340      	movs	r3, #64	; 0x40
 8014bbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014bc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014bc8:	f107 0308 	add.w	r3, r7, #8
 8014bcc:	4619      	mov	r1, r3
 8014bce:	6878      	ldr	r0, [r7, #4]
 8014bd0:	f7ff fead 	bl	801492e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8014bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8014bd8:	2106      	movs	r1, #6
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	f000 f886 	bl	8014cec <SDMMC_GetCmdResp1>
 8014be0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014be2:	69fb      	ldr	r3, [r7, #28]
}
 8014be4:	4618      	mov	r0, r3
 8014be6:	3720      	adds	r7, #32
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}

08014bec <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b088      	sub	sp, #32
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8014bf8:	2333      	movs	r3, #51	; 0x33
 8014bfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014bfc:	2340      	movs	r3, #64	; 0x40
 8014bfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014c00:	2300      	movs	r3, #0
 8014c02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014c0a:	f107 0308 	add.w	r3, r7, #8
 8014c0e:	4619      	mov	r1, r3
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f7ff fe8c 	bl	801492e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8014c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8014c1a:	2133      	movs	r1, #51	; 0x33
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f000 f865 	bl	8014cec <SDMMC_GetCmdResp1>
 8014c22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014c24:	69fb      	ldr	r3, [r7, #28]
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	3720      	adds	r7, #32
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}

08014c2e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8014c2e:	b580      	push	{r7, lr}
 8014c30:	b088      	sub	sp, #32
 8014c32:	af00      	add	r7, sp, #0
 8014c34:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8014c36:	2300      	movs	r3, #0
 8014c38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8014c3a:	2302      	movs	r3, #2
 8014c3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8014c3e:	23c0      	movs	r3, #192	; 0xc0
 8014c40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014c42:	2300      	movs	r3, #0
 8014c44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014c4c:	f107 0308 	add.w	r3, r7, #8
 8014c50:	4619      	mov	r1, r3
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	f7ff fe6b 	bl	801492e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f000 f935 	bl	8014ec8 <SDMMC_GetCmdResp2>
 8014c5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014c60:	69fb      	ldr	r3, [r7, #28]
}
 8014c62:	4618      	mov	r0, r3
 8014c64:	3720      	adds	r7, #32
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}

08014c6a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014c6a:	b580      	push	{r7, lr}
 8014c6c:	b088      	sub	sp, #32
 8014c6e:	af00      	add	r7, sp, #0
 8014c70:	6078      	str	r0, [r7, #4]
 8014c72:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8014c78:	2309      	movs	r3, #9
 8014c7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8014c7c:	23c0      	movs	r3, #192	; 0xc0
 8014c7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014c80:	2300      	movs	r3, #0
 8014c82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014c8a:	f107 0308 	add.w	r3, r7, #8
 8014c8e:	4619      	mov	r1, r3
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f7ff fe4c 	bl	801492e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f000 f916 	bl	8014ec8 <SDMMC_GetCmdResp2>
 8014c9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014c9e:	69fb      	ldr	r3, [r7, #28]
}
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	3720      	adds	r7, #32
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	bd80      	pop	{r7, pc}

08014ca8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b088      	sub	sp, #32
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
 8014cb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8014cb6:	2303      	movs	r3, #3
 8014cb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014cba:	2340      	movs	r3, #64	; 0x40
 8014cbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014cc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014cc8:	f107 0308 	add.w	r3, r7, #8
 8014ccc:	4619      	mov	r1, r3
 8014cce:	6878      	ldr	r0, [r7, #4]
 8014cd0:	f7ff fe2d 	bl	801492e <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8014cd4:	683a      	ldr	r2, [r7, #0]
 8014cd6:	2103      	movs	r1, #3
 8014cd8:	6878      	ldr	r0, [r7, #4]
 8014cda:	f000 f97b 	bl	8014fd4 <SDMMC_GetCmdResp6>
 8014cde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014ce0:	69fb      	ldr	r3, [r7, #28]
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3720      	adds	r7, #32
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}
	...

08014cec <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b088      	sub	sp, #32
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	60f8      	str	r0, [r7, #12]
 8014cf4:	460b      	mov	r3, r1
 8014cf6:	607a      	str	r2, [r7, #4]
 8014cf8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014cfa:	4b70      	ldr	r3, [pc, #448]	; (8014ebc <SDMMC_GetCmdResp1+0x1d0>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	4a70      	ldr	r2, [pc, #448]	; (8014ec0 <SDMMC_GetCmdResp1+0x1d4>)
 8014d00:	fba2 2303 	umull	r2, r3, r2, r3
 8014d04:	0a5a      	lsrs	r2, r3, #9
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	fb02 f303 	mul.w	r3, r2, r3
 8014d0c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8014d0e:	69fb      	ldr	r3, [r7, #28]
 8014d10:	1e5a      	subs	r2, r3, #1
 8014d12:	61fa      	str	r2, [r7, #28]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d102      	bne.n	8014d1e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014d18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014d1c:	e0c9      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d22:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014d24:	69bb      	ldr	r3, [r7, #24]
 8014d26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d0ef      	beq.n	8014d0e <SDMMC_GetCmdResp1+0x22>
 8014d2e:	69bb      	ldr	r3, [r7, #24]
 8014d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d1ea      	bne.n	8014d0e <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d3c:	f003 0304 	and.w	r3, r3, #4
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d004      	beq.n	8014d4e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	2204      	movs	r2, #4
 8014d48:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014d4a:	2304      	movs	r3, #4
 8014d4c:	e0b1      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d52:	f003 0301 	and.w	r3, r3, #1
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d004      	beq.n	8014d64 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	2201      	movs	r2, #1
 8014d5e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014d60:	2301      	movs	r3, #1
 8014d62:	e0a6      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	22c5      	movs	r2, #197	; 0xc5
 8014d68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014d6a:	68f8      	ldr	r0, [r7, #12]
 8014d6c:	f7ff fe09 	bl	8014982 <SDMMC_GetCommandResponse>
 8014d70:	4603      	mov	r3, r0
 8014d72:	461a      	mov	r2, r3
 8014d74:	7afb      	ldrb	r3, [r7, #11]
 8014d76:	4293      	cmp	r3, r2
 8014d78:	d001      	beq.n	8014d7e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014d7a:	2301      	movs	r3, #1
 8014d7c:	e099      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014d7e:	2100      	movs	r1, #0
 8014d80:	68f8      	ldr	r0, [r7, #12]
 8014d82:	f7ff fe0b 	bl	801499c <SDMMC_GetResponse>
 8014d86:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014d88:	697a      	ldr	r2, [r7, #20]
 8014d8a:	4b4e      	ldr	r3, [pc, #312]	; (8014ec4 <SDMMC_GetCmdResp1+0x1d8>)
 8014d8c:	4013      	ands	r3, r2
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d101      	bne.n	8014d96 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8014d92:	2300      	movs	r3, #0
 8014d94:	e08d      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014d96:	697b      	ldr	r3, [r7, #20]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	da02      	bge.n	8014da2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014d9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014da0:	e087      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8014da2:	697b      	ldr	r3, [r7, #20]
 8014da4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d001      	beq.n	8014db0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014dac:	2340      	movs	r3, #64	; 0x40
 8014dae:	e080      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014db0:	697b      	ldr	r3, [r7, #20]
 8014db2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d001      	beq.n	8014dbe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8014dba:	2380      	movs	r3, #128	; 0x80
 8014dbc:	e079      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014dbe:	697b      	ldr	r3, [r7, #20]
 8014dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d002      	beq.n	8014dce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014dcc:	e071      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d002      	beq.n	8014dde <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014ddc:	e069      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014dde:	697b      	ldr	r3, [r7, #20]
 8014de0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d002      	beq.n	8014dee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014dec:	e061      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d002      	beq.n	8014dfe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014df8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014dfc:	e059      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014dfe:	697b      	ldr	r3, [r7, #20]
 8014e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d002      	beq.n	8014e0e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014e0c:	e051      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014e0e:	697b      	ldr	r3, [r7, #20]
 8014e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d002      	beq.n	8014e1e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014e1c:	e049      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d002      	beq.n	8014e2e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014e28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014e2c:	e041      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d002      	beq.n	8014e3e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8014e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014e3c:	e039      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014e3e:	697b      	ldr	r3, [r7, #20]
 8014e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d002      	beq.n	8014e4e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014e4c:	e031      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d002      	beq.n	8014e5e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014e58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014e5c:	e029      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014e5e:	697b      	ldr	r3, [r7, #20]
 8014e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d002      	beq.n	8014e6e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014e68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014e6c:	e021      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014e6e:	697b      	ldr	r3, [r7, #20]
 8014e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d002      	beq.n	8014e7e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014e78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014e7c:	e019      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d002      	beq.n	8014e8e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014e88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014e8c:	e011      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d002      	beq.n	8014e9e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8014e98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014e9c:	e009      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8014e9e:	697b      	ldr	r3, [r7, #20]
 8014ea0:	f003 0308 	and.w	r3, r3, #8
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d002      	beq.n	8014eae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8014ea8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014eac:	e001      	b.n	8014eb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	3720      	adds	r7, #32
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	20000198 	.word	0x20000198
 8014ec0:	10624dd3 	.word	0x10624dd3
 8014ec4:	fdffe008 	.word	0xfdffe008

08014ec8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8014ec8:	b480      	push	{r7}
 8014eca:	b085      	sub	sp, #20
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014ed0:	4b1f      	ldr	r3, [pc, #124]	; (8014f50 <SDMMC_GetCmdResp2+0x88>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	4a1f      	ldr	r2, [pc, #124]	; (8014f54 <SDMMC_GetCmdResp2+0x8c>)
 8014ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8014eda:	0a5b      	lsrs	r3, r3, #9
 8014edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8014ee0:	fb02 f303 	mul.w	r3, r2, r3
 8014ee4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	1e5a      	subs	r2, r3, #1
 8014eea:	60fa      	str	r2, [r7, #12]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d102      	bne.n	8014ef6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014ef0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014ef4:	e026      	b.n	8014f44 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014efa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d0ef      	beq.n	8014ee6 <SDMMC_GetCmdResp2+0x1e>
 8014f06:	68bb      	ldr	r3, [r7, #8]
 8014f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d1ea      	bne.n	8014ee6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f14:	f003 0304 	and.w	r3, r3, #4
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d004      	beq.n	8014f26 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	2204      	movs	r2, #4
 8014f20:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014f22:	2304      	movs	r3, #4
 8014f24:	e00e      	b.n	8014f44 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f2a:	f003 0301 	and.w	r3, r3, #1
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d004      	beq.n	8014f3c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	2201      	movs	r2, #1
 8014f36:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014f38:	2301      	movs	r3, #1
 8014f3a:	e003      	b.n	8014f44 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	22c5      	movs	r2, #197	; 0xc5
 8014f40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014f42:	2300      	movs	r3, #0
}
 8014f44:	4618      	mov	r0, r3
 8014f46:	3714      	adds	r7, #20
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4e:	4770      	bx	lr
 8014f50:	20000198 	.word	0x20000198
 8014f54:	10624dd3 	.word	0x10624dd3

08014f58 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8014f58:	b480      	push	{r7}
 8014f5a:	b085      	sub	sp, #20
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014f60:	4b1a      	ldr	r3, [pc, #104]	; (8014fcc <SDMMC_GetCmdResp3+0x74>)
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	4a1a      	ldr	r2, [pc, #104]	; (8014fd0 <SDMMC_GetCmdResp3+0x78>)
 8014f66:	fba2 2303 	umull	r2, r3, r2, r3
 8014f6a:	0a5b      	lsrs	r3, r3, #9
 8014f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014f70:	fb02 f303 	mul.w	r3, r2, r3
 8014f74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	1e5a      	subs	r2, r3, #1
 8014f7a:	60fa      	str	r2, [r7, #12]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d102      	bne.n	8014f86 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014f80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014f84:	e01b      	b.n	8014fbe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014f8c:	68bb      	ldr	r3, [r7, #8]
 8014f8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d0ef      	beq.n	8014f76 <SDMMC_GetCmdResp3+0x1e>
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d1ea      	bne.n	8014f76 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014fa4:	f003 0304 	and.w	r3, r3, #4
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d004      	beq.n	8014fb6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	2204      	movs	r2, #4
 8014fb0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014fb2:	2304      	movs	r3, #4
 8014fb4:	e003      	b.n	8014fbe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	22c5      	movs	r2, #197	; 0xc5
 8014fba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014fbc:	2300      	movs	r3, #0
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	3714      	adds	r7, #20
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc8:	4770      	bx	lr
 8014fca:	bf00      	nop
 8014fcc:	20000198 	.word	0x20000198
 8014fd0:	10624dd3 	.word	0x10624dd3

08014fd4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b088      	sub	sp, #32
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	60f8      	str	r0, [r7, #12]
 8014fdc:	460b      	mov	r3, r1
 8014fde:	607a      	str	r2, [r7, #4]
 8014fe0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014fe2:	4b35      	ldr	r3, [pc, #212]	; (80150b8 <SDMMC_GetCmdResp6+0xe4>)
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	4a35      	ldr	r2, [pc, #212]	; (80150bc <SDMMC_GetCmdResp6+0xe8>)
 8014fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8014fec:	0a5b      	lsrs	r3, r3, #9
 8014fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8014ff2:	fb02 f303 	mul.w	r3, r2, r3
 8014ff6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8014ff8:	69fb      	ldr	r3, [r7, #28]
 8014ffa:	1e5a      	subs	r2, r3, #1
 8014ffc:	61fa      	str	r2, [r7, #28]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d102      	bne.n	8015008 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015002:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015006:	e052      	b.n	80150ae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801500c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801500e:	69bb      	ldr	r3, [r7, #24]
 8015010:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8015014:	2b00      	cmp	r3, #0
 8015016:	d0ef      	beq.n	8014ff8 <SDMMC_GetCmdResp6+0x24>
 8015018:	69bb      	ldr	r3, [r7, #24]
 801501a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801501e:	2b00      	cmp	r3, #0
 8015020:	d1ea      	bne.n	8014ff8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015026:	f003 0304 	and.w	r3, r3, #4
 801502a:	2b00      	cmp	r3, #0
 801502c:	d004      	beq.n	8015038 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	2204      	movs	r2, #4
 8015032:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8015034:	2304      	movs	r3, #4
 8015036:	e03a      	b.n	80150ae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801503c:	f003 0301 	and.w	r3, r3, #1
 8015040:	2b00      	cmp	r3, #0
 8015042:	d004      	beq.n	801504e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	2201      	movs	r2, #1
 8015048:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801504a:	2301      	movs	r3, #1
 801504c:	e02f      	b.n	80150ae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801504e:	68f8      	ldr	r0, [r7, #12]
 8015050:	f7ff fc97 	bl	8014982 <SDMMC_GetCommandResponse>
 8015054:	4603      	mov	r3, r0
 8015056:	461a      	mov	r2, r3
 8015058:	7afb      	ldrb	r3, [r7, #11]
 801505a:	4293      	cmp	r3, r2
 801505c:	d001      	beq.n	8015062 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801505e:	2301      	movs	r3, #1
 8015060:	e025      	b.n	80150ae <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	22c5      	movs	r2, #197	; 0xc5
 8015066:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8015068:	2100      	movs	r1, #0
 801506a:	68f8      	ldr	r0, [r7, #12]
 801506c:	f7ff fc96 	bl	801499c <SDMMC_GetResponse>
 8015070:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8015072:	697b      	ldr	r3, [r7, #20]
 8015074:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8015078:	2b00      	cmp	r3, #0
 801507a:	d106      	bne.n	801508a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801507c:	697b      	ldr	r3, [r7, #20]
 801507e:	0c1b      	lsrs	r3, r3, #16
 8015080:	b29a      	uxth	r2, r3
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8015086:	2300      	movs	r3, #0
 8015088:	e011      	b.n	80150ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801508a:	697b      	ldr	r3, [r7, #20]
 801508c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015090:	2b00      	cmp	r3, #0
 8015092:	d002      	beq.n	801509a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8015094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015098:	e009      	b.n	80150ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801509a:	697b      	ldr	r3, [r7, #20]
 801509c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d002      	beq.n	80150aa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80150a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80150a8:	e001      	b.n	80150ae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80150aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80150ae:	4618      	mov	r0, r3
 80150b0:	3720      	adds	r7, #32
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}
 80150b6:	bf00      	nop
 80150b8:	20000198 	.word	0x20000198
 80150bc:	10624dd3 	.word	0x10624dd3

080150c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80150c0:	b480      	push	{r7}
 80150c2:	b085      	sub	sp, #20
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80150c8:	4b22      	ldr	r3, [pc, #136]	; (8015154 <SDMMC_GetCmdResp7+0x94>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	4a22      	ldr	r2, [pc, #136]	; (8015158 <SDMMC_GetCmdResp7+0x98>)
 80150ce:	fba2 2303 	umull	r2, r3, r2, r3
 80150d2:	0a5b      	lsrs	r3, r3, #9
 80150d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80150d8:	fb02 f303 	mul.w	r3, r2, r3
 80150dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	1e5a      	subs	r2, r3, #1
 80150e2:	60fa      	str	r2, [r7, #12]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d102      	bne.n	80150ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80150e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80150ec:	e02c      	b.n	8015148 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80150f4:	68bb      	ldr	r3, [r7, #8]
 80150f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d0ef      	beq.n	80150de <SDMMC_GetCmdResp7+0x1e>
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8015104:	2b00      	cmp	r3, #0
 8015106:	d1ea      	bne.n	80150de <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801510c:	f003 0304 	and.w	r3, r3, #4
 8015110:	2b00      	cmp	r3, #0
 8015112:	d004      	beq.n	801511e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2204      	movs	r2, #4
 8015118:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801511a:	2304      	movs	r3, #4
 801511c:	e014      	b.n	8015148 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015122:	f003 0301 	and.w	r3, r3, #1
 8015126:	2b00      	cmp	r3, #0
 8015128:	d004      	beq.n	8015134 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	2201      	movs	r2, #1
 801512e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015130:	2301      	movs	r3, #1
 8015132:	e009      	b.n	8015148 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801513c:	2b00      	cmp	r3, #0
 801513e:	d002      	beq.n	8015146 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2240      	movs	r2, #64	; 0x40
 8015144:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8015146:	2300      	movs	r3, #0

}
 8015148:	4618      	mov	r0, r3
 801514a:	3714      	adds	r7, #20
 801514c:	46bd      	mov	sp, r7
 801514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015152:	4770      	bx	lr
 8015154:	20000198 	.word	0x20000198
 8015158:	10624dd3 	.word	0x10624dd3

0801515c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801515c:	b480      	push	{r7}
 801515e:	b085      	sub	sp, #20
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8015164:	4b11      	ldr	r3, [pc, #68]	; (80151ac <SDMMC_GetCmdError+0x50>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	4a11      	ldr	r2, [pc, #68]	; (80151b0 <SDMMC_GetCmdError+0x54>)
 801516a:	fba2 2303 	umull	r2, r3, r2, r3
 801516e:	0a5b      	lsrs	r3, r3, #9
 8015170:	f241 3288 	movw	r2, #5000	; 0x1388
 8015174:	fb02 f303 	mul.w	r3, r2, r3
 8015178:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	1e5a      	subs	r2, r3, #1
 801517e:	60fa      	str	r2, [r7, #12]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d102      	bne.n	801518a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015184:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015188:	e009      	b.n	801519e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801518e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015192:	2b00      	cmp	r3, #0
 8015194:	d0f1      	beq.n	801517a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	22c5      	movs	r2, #197	; 0xc5
 801519a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 801519c:	2300      	movs	r3, #0
}
 801519e:	4618      	mov	r0, r3
 80151a0:	3714      	adds	r7, #20
 80151a2:	46bd      	mov	sp, r7
 80151a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a8:	4770      	bx	lr
 80151aa:	bf00      	nop
 80151ac:	20000198 	.word	0x20000198
 80151b0:	10624dd3 	.word	0x10624dd3

080151b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80151b4:	b084      	sub	sp, #16
 80151b6:	b580      	push	{r7, lr}
 80151b8:	b084      	sub	sp, #16
 80151ba:	af00      	add	r7, sp, #0
 80151bc:	6078      	str	r0, [r7, #4]
 80151be:	f107 001c 	add.w	r0, r7, #28
 80151c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	68db      	ldr	r3, [r3, #12]
 80151ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80151d2:	6878      	ldr	r0, [r7, #4]
 80151d4:	f001 faf6 	bl	80167c4 <USB_CoreReset>
 80151d8:	4603      	mov	r3, r0
 80151da:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80151dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d106      	bne.n	80151f0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	639a      	str	r2, [r3, #56]	; 0x38
 80151ee:	e005      	b.n	80151fc <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80151fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80151fe:	4618      	mov	r0, r3
 8015200:	3710      	adds	r7, #16
 8015202:	46bd      	mov	sp, r7
 8015204:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015208:	b004      	add	sp, #16
 801520a:	4770      	bx	lr

0801520c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801520c:	b480      	push	{r7}
 801520e:	b087      	sub	sp, #28
 8015210:	af00      	add	r7, sp, #0
 8015212:	60f8      	str	r0, [r7, #12]
 8015214:	60b9      	str	r1, [r7, #8]
 8015216:	4613      	mov	r3, r2
 8015218:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801521a:	79fb      	ldrb	r3, [r7, #7]
 801521c:	2b02      	cmp	r3, #2
 801521e:	d165      	bne.n	80152ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8015220:	68bb      	ldr	r3, [r7, #8]
 8015222:	4a3e      	ldr	r2, [pc, #248]	; (801531c <USB_SetTurnaroundTime+0x110>)
 8015224:	4293      	cmp	r3, r2
 8015226:	d906      	bls.n	8015236 <USB_SetTurnaroundTime+0x2a>
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	4a3d      	ldr	r2, [pc, #244]	; (8015320 <USB_SetTurnaroundTime+0x114>)
 801522c:	4293      	cmp	r3, r2
 801522e:	d202      	bcs.n	8015236 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8015230:	230f      	movs	r3, #15
 8015232:	617b      	str	r3, [r7, #20]
 8015234:	e05c      	b.n	80152f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8015236:	68bb      	ldr	r3, [r7, #8]
 8015238:	4a39      	ldr	r2, [pc, #228]	; (8015320 <USB_SetTurnaroundTime+0x114>)
 801523a:	4293      	cmp	r3, r2
 801523c:	d306      	bcc.n	801524c <USB_SetTurnaroundTime+0x40>
 801523e:	68bb      	ldr	r3, [r7, #8]
 8015240:	4a38      	ldr	r2, [pc, #224]	; (8015324 <USB_SetTurnaroundTime+0x118>)
 8015242:	4293      	cmp	r3, r2
 8015244:	d202      	bcs.n	801524c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8015246:	230e      	movs	r3, #14
 8015248:	617b      	str	r3, [r7, #20]
 801524a:	e051      	b.n	80152f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801524c:	68bb      	ldr	r3, [r7, #8]
 801524e:	4a35      	ldr	r2, [pc, #212]	; (8015324 <USB_SetTurnaroundTime+0x118>)
 8015250:	4293      	cmp	r3, r2
 8015252:	d306      	bcc.n	8015262 <USB_SetTurnaroundTime+0x56>
 8015254:	68bb      	ldr	r3, [r7, #8]
 8015256:	4a34      	ldr	r2, [pc, #208]	; (8015328 <USB_SetTurnaroundTime+0x11c>)
 8015258:	4293      	cmp	r3, r2
 801525a:	d202      	bcs.n	8015262 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801525c:	230d      	movs	r3, #13
 801525e:	617b      	str	r3, [r7, #20]
 8015260:	e046      	b.n	80152f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8015262:	68bb      	ldr	r3, [r7, #8]
 8015264:	4a30      	ldr	r2, [pc, #192]	; (8015328 <USB_SetTurnaroundTime+0x11c>)
 8015266:	4293      	cmp	r3, r2
 8015268:	d306      	bcc.n	8015278 <USB_SetTurnaroundTime+0x6c>
 801526a:	68bb      	ldr	r3, [r7, #8]
 801526c:	4a2f      	ldr	r2, [pc, #188]	; (801532c <USB_SetTurnaroundTime+0x120>)
 801526e:	4293      	cmp	r3, r2
 8015270:	d802      	bhi.n	8015278 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8015272:	230c      	movs	r3, #12
 8015274:	617b      	str	r3, [r7, #20]
 8015276:	e03b      	b.n	80152f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8015278:	68bb      	ldr	r3, [r7, #8]
 801527a:	4a2c      	ldr	r2, [pc, #176]	; (801532c <USB_SetTurnaroundTime+0x120>)
 801527c:	4293      	cmp	r3, r2
 801527e:	d906      	bls.n	801528e <USB_SetTurnaroundTime+0x82>
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	4a2b      	ldr	r2, [pc, #172]	; (8015330 <USB_SetTurnaroundTime+0x124>)
 8015284:	4293      	cmp	r3, r2
 8015286:	d802      	bhi.n	801528e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8015288:	230b      	movs	r3, #11
 801528a:	617b      	str	r3, [r7, #20]
 801528c:	e030      	b.n	80152f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801528e:	68bb      	ldr	r3, [r7, #8]
 8015290:	4a27      	ldr	r2, [pc, #156]	; (8015330 <USB_SetTurnaroundTime+0x124>)
 8015292:	4293      	cmp	r3, r2
 8015294:	d906      	bls.n	80152a4 <USB_SetTurnaroundTime+0x98>
 8015296:	68bb      	ldr	r3, [r7, #8]
 8015298:	4a26      	ldr	r2, [pc, #152]	; (8015334 <USB_SetTurnaroundTime+0x128>)
 801529a:	4293      	cmp	r3, r2
 801529c:	d802      	bhi.n	80152a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801529e:	230a      	movs	r3, #10
 80152a0:	617b      	str	r3, [r7, #20]
 80152a2:	e025      	b.n	80152f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	4a23      	ldr	r2, [pc, #140]	; (8015334 <USB_SetTurnaroundTime+0x128>)
 80152a8:	4293      	cmp	r3, r2
 80152aa:	d906      	bls.n	80152ba <USB_SetTurnaroundTime+0xae>
 80152ac:	68bb      	ldr	r3, [r7, #8]
 80152ae:	4a22      	ldr	r2, [pc, #136]	; (8015338 <USB_SetTurnaroundTime+0x12c>)
 80152b0:	4293      	cmp	r3, r2
 80152b2:	d202      	bcs.n	80152ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80152b4:	2309      	movs	r3, #9
 80152b6:	617b      	str	r3, [r7, #20]
 80152b8:	e01a      	b.n	80152f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80152ba:	68bb      	ldr	r3, [r7, #8]
 80152bc:	4a1e      	ldr	r2, [pc, #120]	; (8015338 <USB_SetTurnaroundTime+0x12c>)
 80152be:	4293      	cmp	r3, r2
 80152c0:	d306      	bcc.n	80152d0 <USB_SetTurnaroundTime+0xc4>
 80152c2:	68bb      	ldr	r3, [r7, #8]
 80152c4:	4a1d      	ldr	r2, [pc, #116]	; (801533c <USB_SetTurnaroundTime+0x130>)
 80152c6:	4293      	cmp	r3, r2
 80152c8:	d802      	bhi.n	80152d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80152ca:	2308      	movs	r3, #8
 80152cc:	617b      	str	r3, [r7, #20]
 80152ce:	e00f      	b.n	80152f0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80152d0:	68bb      	ldr	r3, [r7, #8]
 80152d2:	4a1a      	ldr	r2, [pc, #104]	; (801533c <USB_SetTurnaroundTime+0x130>)
 80152d4:	4293      	cmp	r3, r2
 80152d6:	d906      	bls.n	80152e6 <USB_SetTurnaroundTime+0xda>
 80152d8:	68bb      	ldr	r3, [r7, #8]
 80152da:	4a19      	ldr	r2, [pc, #100]	; (8015340 <USB_SetTurnaroundTime+0x134>)
 80152dc:	4293      	cmp	r3, r2
 80152de:	d202      	bcs.n	80152e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80152e0:	2307      	movs	r3, #7
 80152e2:	617b      	str	r3, [r7, #20]
 80152e4:	e004      	b.n	80152f0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80152e6:	2306      	movs	r3, #6
 80152e8:	617b      	str	r3, [r7, #20]
 80152ea:	e001      	b.n	80152f0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80152ec:	2309      	movs	r3, #9
 80152ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	68db      	ldr	r3, [r3, #12]
 80152f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	68da      	ldr	r2, [r3, #12]
 8015300:	697b      	ldr	r3, [r7, #20]
 8015302:	029b      	lsls	r3, r3, #10
 8015304:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8015308:	431a      	orrs	r2, r3
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801530e:	2300      	movs	r3, #0
}
 8015310:	4618      	mov	r0, r3
 8015312:	371c      	adds	r7, #28
 8015314:	46bd      	mov	sp, r7
 8015316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531a:	4770      	bx	lr
 801531c:	00d8acbf 	.word	0x00d8acbf
 8015320:	00e4e1c0 	.word	0x00e4e1c0
 8015324:	00f42400 	.word	0x00f42400
 8015328:	01067380 	.word	0x01067380
 801532c:	011a499f 	.word	0x011a499f
 8015330:	01312cff 	.word	0x01312cff
 8015334:	014ca43f 	.word	0x014ca43f
 8015338:	016e3600 	.word	0x016e3600
 801533c:	01a6ab1f 	.word	0x01a6ab1f
 8015340:	01e84800 	.word	0x01e84800

08015344 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015344:	b480      	push	{r7}
 8015346:	b083      	sub	sp, #12
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	689b      	ldr	r3, [r3, #8]
 8015350:	f043 0201 	orr.w	r2, r3, #1
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015358:	2300      	movs	r3, #0
}
 801535a:	4618      	mov	r0, r3
 801535c:	370c      	adds	r7, #12
 801535e:	46bd      	mov	sp, r7
 8015360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015364:	4770      	bx	lr

08015366 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015366:	b480      	push	{r7}
 8015368:	b083      	sub	sp, #12
 801536a:	af00      	add	r7, sp, #0
 801536c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	689b      	ldr	r3, [r3, #8]
 8015372:	f023 0201 	bic.w	r2, r3, #1
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801537a:	2300      	movs	r3, #0
}
 801537c:	4618      	mov	r0, r3
 801537e:	370c      	adds	r7, #12
 8015380:	46bd      	mov	sp, r7
 8015382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015386:	4770      	bx	lr

08015388 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b084      	sub	sp, #16
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
 8015390:	460b      	mov	r3, r1
 8015392:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8015394:	2300      	movs	r3, #0
 8015396:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	68db      	ldr	r3, [r3, #12]
 801539c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80153a4:	78fb      	ldrb	r3, [r7, #3]
 80153a6:	2b01      	cmp	r3, #1
 80153a8:	d115      	bne.n	80153d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	68db      	ldr	r3, [r3, #12]
 80153ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80153b6:	2001      	movs	r0, #1
 80153b8:	f7f5 ff6e 	bl	800b298 <HAL_Delay>
      ms++;
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	3301      	adds	r3, #1
 80153c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80153c2:	6878      	ldr	r0, [r7, #4]
 80153c4:	f001 f985 	bl	80166d2 <USB_GetMode>
 80153c8:	4603      	mov	r3, r0
 80153ca:	2b01      	cmp	r3, #1
 80153cc:	d01e      	beq.n	801540c <USB_SetCurrentMode+0x84>
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	2b31      	cmp	r3, #49	; 0x31
 80153d2:	d9f0      	bls.n	80153b6 <USB_SetCurrentMode+0x2e>
 80153d4:	e01a      	b.n	801540c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80153d6:	78fb      	ldrb	r3, [r7, #3]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d115      	bne.n	8015408 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	68db      	ldr	r3, [r3, #12]
 80153e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80153e8:	2001      	movs	r0, #1
 80153ea:	f7f5 ff55 	bl	800b298 <HAL_Delay>
      ms++;
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	3301      	adds	r3, #1
 80153f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f001 f96c 	bl	80166d2 <USB_GetMode>
 80153fa:	4603      	mov	r3, r0
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d005      	beq.n	801540c <USB_SetCurrentMode+0x84>
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	2b31      	cmp	r3, #49	; 0x31
 8015404:	d9f0      	bls.n	80153e8 <USB_SetCurrentMode+0x60>
 8015406:	e001      	b.n	801540c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8015408:	2301      	movs	r3, #1
 801540a:	e005      	b.n	8015418 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	2b32      	cmp	r3, #50	; 0x32
 8015410:	d101      	bne.n	8015416 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8015412:	2301      	movs	r3, #1
 8015414:	e000      	b.n	8015418 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8015416:	2300      	movs	r3, #0
}
 8015418:	4618      	mov	r0, r3
 801541a:	3710      	adds	r7, #16
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}

08015420 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015420:	b084      	sub	sp, #16
 8015422:	b580      	push	{r7, lr}
 8015424:	b086      	sub	sp, #24
 8015426:	af00      	add	r7, sp, #0
 8015428:	6078      	str	r0, [r7, #4]
 801542a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801542e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8015432:	2300      	movs	r3, #0
 8015434:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801543a:	2300      	movs	r3, #0
 801543c:	613b      	str	r3, [r7, #16]
 801543e:	e009      	b.n	8015454 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8015440:	687a      	ldr	r2, [r7, #4]
 8015442:	693b      	ldr	r3, [r7, #16]
 8015444:	3340      	adds	r3, #64	; 0x40
 8015446:	009b      	lsls	r3, r3, #2
 8015448:	4413      	add	r3, r2
 801544a:	2200      	movs	r2, #0
 801544c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801544e:	693b      	ldr	r3, [r7, #16]
 8015450:	3301      	adds	r3, #1
 8015452:	613b      	str	r3, [r7, #16]
 8015454:	693b      	ldr	r3, [r7, #16]
 8015456:	2b0e      	cmp	r3, #14
 8015458:	d9f2      	bls.n	8015440 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801545a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801545c:	2b00      	cmp	r3, #0
 801545e:	d11c      	bne.n	801549a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015466:	685b      	ldr	r3, [r3, #4]
 8015468:	68fa      	ldr	r2, [r7, #12]
 801546a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801546e:	f043 0302 	orr.w	r3, r3, #2
 8015472:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015478:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	601a      	str	r2, [r3, #0]
 8015498:	e005      	b.n	80154a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801549e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80154ac:	461a      	mov	r2, r3
 80154ae:	2300      	movs	r3, #0
 80154b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80154b8:	4619      	mov	r1, r3
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80154c0:	461a      	mov	r2, r3
 80154c2:	680b      	ldr	r3, [r1, #0]
 80154c4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80154c6:	2103      	movs	r1, #3
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f000 f959 	bl	8015780 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80154ce:	2110      	movs	r1, #16
 80154d0:	6878      	ldr	r0, [r7, #4]
 80154d2:	f000 f8f1 	bl	80156b8 <USB_FlushTxFifo>
 80154d6:	4603      	mov	r3, r0
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d001      	beq.n	80154e0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80154dc:	2301      	movs	r3, #1
 80154de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80154e0:	6878      	ldr	r0, [r7, #4]
 80154e2:	f000 f91d 	bl	8015720 <USB_FlushRxFifo>
 80154e6:	4603      	mov	r3, r0
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d001      	beq.n	80154f0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80154ec:	2301      	movs	r3, #1
 80154ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80154f6:	461a      	mov	r2, r3
 80154f8:	2300      	movs	r3, #0
 80154fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015502:	461a      	mov	r2, r3
 8015504:	2300      	movs	r3, #0
 8015506:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801550e:	461a      	mov	r2, r3
 8015510:	2300      	movs	r3, #0
 8015512:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015514:	2300      	movs	r3, #0
 8015516:	613b      	str	r3, [r7, #16]
 8015518:	e043      	b.n	80155a2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801551a:	693b      	ldr	r3, [r7, #16]
 801551c:	015a      	lsls	r2, r3, #5
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	4413      	add	r3, r2
 8015522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801552c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015530:	d118      	bne.n	8015564 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8015532:	693b      	ldr	r3, [r7, #16]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d10a      	bne.n	801554e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8015538:	693b      	ldr	r3, [r7, #16]
 801553a:	015a      	lsls	r2, r3, #5
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	4413      	add	r3, r2
 8015540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015544:	461a      	mov	r2, r3
 8015546:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801554a:	6013      	str	r3, [r2, #0]
 801554c:	e013      	b.n	8015576 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801554e:	693b      	ldr	r3, [r7, #16]
 8015550:	015a      	lsls	r2, r3, #5
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	4413      	add	r3, r2
 8015556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801555a:	461a      	mov	r2, r3
 801555c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8015560:	6013      	str	r3, [r2, #0]
 8015562:	e008      	b.n	8015576 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	015a      	lsls	r2, r3, #5
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	4413      	add	r3, r2
 801556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015570:	461a      	mov	r2, r3
 8015572:	2300      	movs	r3, #0
 8015574:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8015576:	693b      	ldr	r3, [r7, #16]
 8015578:	015a      	lsls	r2, r3, #5
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	4413      	add	r3, r2
 801557e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015582:	461a      	mov	r2, r3
 8015584:	2300      	movs	r3, #0
 8015586:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8015588:	693b      	ldr	r3, [r7, #16]
 801558a:	015a      	lsls	r2, r3, #5
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	4413      	add	r3, r2
 8015590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015594:	461a      	mov	r2, r3
 8015596:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801559a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	3301      	adds	r3, #1
 80155a0:	613b      	str	r3, [r7, #16]
 80155a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155a4:	693a      	ldr	r2, [r7, #16]
 80155a6:	429a      	cmp	r2, r3
 80155a8:	d3b7      	bcc.n	801551a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80155aa:	2300      	movs	r3, #0
 80155ac:	613b      	str	r3, [r7, #16]
 80155ae:	e043      	b.n	8015638 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80155b0:	693b      	ldr	r3, [r7, #16]
 80155b2:	015a      	lsls	r2, r3, #5
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	4413      	add	r3, r2
 80155b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80155c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80155c6:	d118      	bne.n	80155fa <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80155c8:	693b      	ldr	r3, [r7, #16]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d10a      	bne.n	80155e4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80155ce:	693b      	ldr	r3, [r7, #16]
 80155d0:	015a      	lsls	r2, r3, #5
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	4413      	add	r3, r2
 80155d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155da:	461a      	mov	r2, r3
 80155dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80155e0:	6013      	str	r3, [r2, #0]
 80155e2:	e013      	b.n	801560c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80155e4:	693b      	ldr	r3, [r7, #16]
 80155e6:	015a      	lsls	r2, r3, #5
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	4413      	add	r3, r2
 80155ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155f0:	461a      	mov	r2, r3
 80155f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80155f6:	6013      	str	r3, [r2, #0]
 80155f8:	e008      	b.n	801560c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80155fa:	693b      	ldr	r3, [r7, #16]
 80155fc:	015a      	lsls	r2, r3, #5
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	4413      	add	r3, r2
 8015602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015606:	461a      	mov	r2, r3
 8015608:	2300      	movs	r3, #0
 801560a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801560c:	693b      	ldr	r3, [r7, #16]
 801560e:	015a      	lsls	r2, r3, #5
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	4413      	add	r3, r2
 8015614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015618:	461a      	mov	r2, r3
 801561a:	2300      	movs	r3, #0
 801561c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801561e:	693b      	ldr	r3, [r7, #16]
 8015620:	015a      	lsls	r2, r3, #5
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	4413      	add	r3, r2
 8015626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801562a:	461a      	mov	r2, r3
 801562c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8015630:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015632:	693b      	ldr	r3, [r7, #16]
 8015634:	3301      	adds	r3, #1
 8015636:	613b      	str	r3, [r7, #16]
 8015638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801563a:	693a      	ldr	r2, [r7, #16]
 801563c:	429a      	cmp	r2, r3
 801563e:	d3b7      	bcc.n	80155b0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015646:	691b      	ldr	r3, [r3, #16]
 8015648:	68fa      	ldr	r2, [r7, #12]
 801564a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801564e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015652:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	2200      	movs	r2, #0
 8015658:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8015660:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	699b      	ldr	r3, [r3, #24]
 8015666:	f043 0210 	orr.w	r2, r3, #16
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	699a      	ldr	r2, [r3, #24]
 8015672:	4b10      	ldr	r3, [pc, #64]	; (80156b4 <USB_DevInit+0x294>)
 8015674:	4313      	orrs	r3, r2
 8015676:	687a      	ldr	r2, [r7, #4]
 8015678:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801567a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801567c:	2b00      	cmp	r3, #0
 801567e:	d005      	beq.n	801568c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	699b      	ldr	r3, [r3, #24]
 8015684:	f043 0208 	orr.w	r2, r3, #8
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801568c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801568e:	2b01      	cmp	r3, #1
 8015690:	d107      	bne.n	80156a2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	699b      	ldr	r3, [r3, #24]
 8015696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801569a:	f043 0304 	orr.w	r3, r3, #4
 801569e:	687a      	ldr	r2, [r7, #4]
 80156a0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80156a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80156a4:	4618      	mov	r0, r3
 80156a6:	3718      	adds	r7, #24
 80156a8:	46bd      	mov	sp, r7
 80156aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80156ae:	b004      	add	sp, #16
 80156b0:	4770      	bx	lr
 80156b2:	bf00      	nop
 80156b4:	803c3800 	.word	0x803c3800

080156b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80156b8:	b480      	push	{r7}
 80156ba:	b085      	sub	sp, #20
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
 80156c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80156c2:	2300      	movs	r3, #0
 80156c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	3301      	adds	r3, #1
 80156ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	4a13      	ldr	r2, [pc, #76]	; (801571c <USB_FlushTxFifo+0x64>)
 80156d0:	4293      	cmp	r3, r2
 80156d2:	d901      	bls.n	80156d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80156d4:	2303      	movs	r3, #3
 80156d6:	e01b      	b.n	8015710 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	691b      	ldr	r3, [r3, #16]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	daf2      	bge.n	80156c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80156e0:	2300      	movs	r3, #0
 80156e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	019b      	lsls	r3, r3, #6
 80156e8:	f043 0220 	orr.w	r2, r3, #32
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	3301      	adds	r3, #1
 80156f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	4a08      	ldr	r2, [pc, #32]	; (801571c <USB_FlushTxFifo+0x64>)
 80156fa:	4293      	cmp	r3, r2
 80156fc:	d901      	bls.n	8015702 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80156fe:	2303      	movs	r3, #3
 8015700:	e006      	b.n	8015710 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	691b      	ldr	r3, [r3, #16]
 8015706:	f003 0320 	and.w	r3, r3, #32
 801570a:	2b20      	cmp	r3, #32
 801570c:	d0f0      	beq.n	80156f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801570e:	2300      	movs	r3, #0
}
 8015710:	4618      	mov	r0, r3
 8015712:	3714      	adds	r7, #20
 8015714:	46bd      	mov	sp, r7
 8015716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571a:	4770      	bx	lr
 801571c:	00030d40 	.word	0x00030d40

08015720 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8015720:	b480      	push	{r7}
 8015722:	b085      	sub	sp, #20
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015728:	2300      	movs	r3, #0
 801572a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	3301      	adds	r3, #1
 8015730:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	4a11      	ldr	r2, [pc, #68]	; (801577c <USB_FlushRxFifo+0x5c>)
 8015736:	4293      	cmp	r3, r2
 8015738:	d901      	bls.n	801573e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801573a:	2303      	movs	r3, #3
 801573c:	e018      	b.n	8015770 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	691b      	ldr	r3, [r3, #16]
 8015742:	2b00      	cmp	r3, #0
 8015744:	daf2      	bge.n	801572c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8015746:	2300      	movs	r3, #0
 8015748:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	2210      	movs	r2, #16
 801574e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	3301      	adds	r3, #1
 8015754:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	4a08      	ldr	r2, [pc, #32]	; (801577c <USB_FlushRxFifo+0x5c>)
 801575a:	4293      	cmp	r3, r2
 801575c:	d901      	bls.n	8015762 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801575e:	2303      	movs	r3, #3
 8015760:	e006      	b.n	8015770 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	691b      	ldr	r3, [r3, #16]
 8015766:	f003 0310 	and.w	r3, r3, #16
 801576a:	2b10      	cmp	r3, #16
 801576c:	d0f0      	beq.n	8015750 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801576e:	2300      	movs	r3, #0
}
 8015770:	4618      	mov	r0, r3
 8015772:	3714      	adds	r7, #20
 8015774:	46bd      	mov	sp, r7
 8015776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577a:	4770      	bx	lr
 801577c:	00030d40 	.word	0x00030d40

08015780 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8015780:	b480      	push	{r7}
 8015782:	b085      	sub	sp, #20
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
 8015788:	460b      	mov	r3, r1
 801578a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015796:	681a      	ldr	r2, [r3, #0]
 8015798:	78fb      	ldrb	r3, [r7, #3]
 801579a:	68f9      	ldr	r1, [r7, #12]
 801579c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80157a0:	4313      	orrs	r3, r2
 80157a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80157a4:	2300      	movs	r3, #0
}
 80157a6:	4618      	mov	r0, r3
 80157a8:	3714      	adds	r7, #20
 80157aa:	46bd      	mov	sp, r7
 80157ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b0:	4770      	bx	lr

080157b2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80157b2:	b480      	push	{r7}
 80157b4:	b087      	sub	sp, #28
 80157b6:	af00      	add	r7, sp, #0
 80157b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80157be:	693b      	ldr	r3, [r7, #16]
 80157c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80157c4:	689b      	ldr	r3, [r3, #8]
 80157c6:	f003 0306 	and.w	r3, r3, #6
 80157ca:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	2b02      	cmp	r3, #2
 80157d0:	d002      	beq.n	80157d8 <USB_GetDevSpeed+0x26>
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	2b06      	cmp	r3, #6
 80157d6:	d102      	bne.n	80157de <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80157d8:	2302      	movs	r3, #2
 80157da:	75fb      	strb	r3, [r7, #23]
 80157dc:	e001      	b.n	80157e2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80157de:	230f      	movs	r3, #15
 80157e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80157e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	371c      	adds	r7, #28
 80157e8:	46bd      	mov	sp, r7
 80157ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ee:	4770      	bx	lr

080157f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80157f0:	b480      	push	{r7}
 80157f2:	b085      	sub	sp, #20
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
 80157f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80157fe:	683b      	ldr	r3, [r7, #0]
 8015800:	781b      	ldrb	r3, [r3, #0]
 8015802:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	785b      	ldrb	r3, [r3, #1]
 8015808:	2b01      	cmp	r3, #1
 801580a:	d13a      	bne.n	8015882 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015812:	69da      	ldr	r2, [r3, #28]
 8015814:	683b      	ldr	r3, [r7, #0]
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	f003 030f 	and.w	r3, r3, #15
 801581c:	2101      	movs	r1, #1
 801581e:	fa01 f303 	lsl.w	r3, r1, r3
 8015822:	b29b      	uxth	r3, r3
 8015824:	68f9      	ldr	r1, [r7, #12]
 8015826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801582a:	4313      	orrs	r3, r2
 801582c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801582e:	68bb      	ldr	r3, [r7, #8]
 8015830:	015a      	lsls	r2, r3, #5
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	4413      	add	r3, r2
 8015836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015840:	2b00      	cmp	r3, #0
 8015842:	d155      	bne.n	80158f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015844:	68bb      	ldr	r3, [r7, #8]
 8015846:	015a      	lsls	r2, r3, #5
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	4413      	add	r3, r2
 801584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015850:	681a      	ldr	r2, [r3, #0]
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	68db      	ldr	r3, [r3, #12]
 8015856:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	791b      	ldrb	r3, [r3, #4]
 801585e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015860:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8015862:	68bb      	ldr	r3, [r7, #8]
 8015864:	059b      	lsls	r3, r3, #22
 8015866:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015868:	4313      	orrs	r3, r2
 801586a:	68ba      	ldr	r2, [r7, #8]
 801586c:	0151      	lsls	r1, r2, #5
 801586e:	68fa      	ldr	r2, [r7, #12]
 8015870:	440a      	add	r2, r1
 8015872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801587a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801587e:	6013      	str	r3, [r2, #0]
 8015880:	e036      	b.n	80158f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015888:	69da      	ldr	r2, [r3, #28]
 801588a:	683b      	ldr	r3, [r7, #0]
 801588c:	781b      	ldrb	r3, [r3, #0]
 801588e:	f003 030f 	and.w	r3, r3, #15
 8015892:	2101      	movs	r1, #1
 8015894:	fa01 f303 	lsl.w	r3, r1, r3
 8015898:	041b      	lsls	r3, r3, #16
 801589a:	68f9      	ldr	r1, [r7, #12]
 801589c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80158a0:	4313      	orrs	r3, r2
 80158a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80158a4:	68bb      	ldr	r3, [r7, #8]
 80158a6:	015a      	lsls	r2, r3, #5
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	4413      	add	r3, r2
 80158ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d11a      	bne.n	80158f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	015a      	lsls	r2, r3, #5
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	4413      	add	r3, r2
 80158c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80158c6:	681a      	ldr	r2, [r3, #0]
 80158c8:	683b      	ldr	r3, [r7, #0]
 80158ca:	68db      	ldr	r3, [r3, #12]
 80158cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	791b      	ldrb	r3, [r3, #4]
 80158d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80158d6:	430b      	orrs	r3, r1
 80158d8:	4313      	orrs	r3, r2
 80158da:	68ba      	ldr	r2, [r7, #8]
 80158dc:	0151      	lsls	r1, r2, #5
 80158de:	68fa      	ldr	r2, [r7, #12]
 80158e0:	440a      	add	r2, r1
 80158e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80158e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80158ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80158ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80158f0:	2300      	movs	r3, #0
}
 80158f2:	4618      	mov	r0, r3
 80158f4:	3714      	adds	r7, #20
 80158f6:	46bd      	mov	sp, r7
 80158f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fc:	4770      	bx	lr
	...

08015900 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015900:	b480      	push	{r7}
 8015902:	b085      	sub	sp, #20
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
 8015908:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	781b      	ldrb	r3, [r3, #0]
 8015912:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	785b      	ldrb	r3, [r3, #1]
 8015918:	2b01      	cmp	r3, #1
 801591a:	d161      	bne.n	80159e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801591c:	68bb      	ldr	r3, [r7, #8]
 801591e:	015a      	lsls	r2, r3, #5
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	4413      	add	r3, r2
 8015924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801592e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015932:	d11f      	bne.n	8015974 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8015934:	68bb      	ldr	r3, [r7, #8]
 8015936:	015a      	lsls	r2, r3, #5
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	4413      	add	r3, r2
 801593c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	68ba      	ldr	r2, [r7, #8]
 8015944:	0151      	lsls	r1, r2, #5
 8015946:	68fa      	ldr	r2, [r7, #12]
 8015948:	440a      	add	r2, r1
 801594a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801594e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015952:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8015954:	68bb      	ldr	r3, [r7, #8]
 8015956:	015a      	lsls	r2, r3, #5
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	4413      	add	r3, r2
 801595c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	68ba      	ldr	r2, [r7, #8]
 8015964:	0151      	lsls	r1, r2, #5
 8015966:	68fa      	ldr	r2, [r7, #12]
 8015968:	440a      	add	r2, r1
 801596a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801596e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015972:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801597a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801597c:	683b      	ldr	r3, [r7, #0]
 801597e:	781b      	ldrb	r3, [r3, #0]
 8015980:	f003 030f 	and.w	r3, r3, #15
 8015984:	2101      	movs	r1, #1
 8015986:	fa01 f303 	lsl.w	r3, r1, r3
 801598a:	b29b      	uxth	r3, r3
 801598c:	43db      	mvns	r3, r3
 801598e:	68f9      	ldr	r1, [r7, #12]
 8015990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015994:	4013      	ands	r3, r2
 8015996:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801599e:	69da      	ldr	r2, [r3, #28]
 80159a0:	683b      	ldr	r3, [r7, #0]
 80159a2:	781b      	ldrb	r3, [r3, #0]
 80159a4:	f003 030f 	and.w	r3, r3, #15
 80159a8:	2101      	movs	r1, #1
 80159aa:	fa01 f303 	lsl.w	r3, r1, r3
 80159ae:	b29b      	uxth	r3, r3
 80159b0:	43db      	mvns	r3, r3
 80159b2:	68f9      	ldr	r1, [r7, #12]
 80159b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80159b8:	4013      	ands	r3, r2
 80159ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80159bc:	68bb      	ldr	r3, [r7, #8]
 80159be:	015a      	lsls	r2, r3, #5
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	4413      	add	r3, r2
 80159c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80159c8:	681a      	ldr	r2, [r3, #0]
 80159ca:	68bb      	ldr	r3, [r7, #8]
 80159cc:	0159      	lsls	r1, r3, #5
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	440b      	add	r3, r1
 80159d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80159d6:	4619      	mov	r1, r3
 80159d8:	4b35      	ldr	r3, [pc, #212]	; (8015ab0 <USB_DeactivateEndpoint+0x1b0>)
 80159da:	4013      	ands	r3, r2
 80159dc:	600b      	str	r3, [r1, #0]
 80159de:	e060      	b.n	8015aa2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80159e0:	68bb      	ldr	r3, [r7, #8]
 80159e2:	015a      	lsls	r2, r3, #5
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	4413      	add	r3, r2
 80159e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80159f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80159f6:	d11f      	bne.n	8015a38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80159f8:	68bb      	ldr	r3, [r7, #8]
 80159fa:	015a      	lsls	r2, r3, #5
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	4413      	add	r3, r2
 8015a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	68ba      	ldr	r2, [r7, #8]
 8015a08:	0151      	lsls	r1, r2, #5
 8015a0a:	68fa      	ldr	r2, [r7, #12]
 8015a0c:	440a      	add	r2, r1
 8015a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015a12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015a16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8015a18:	68bb      	ldr	r3, [r7, #8]
 8015a1a:	015a      	lsls	r2, r3, #5
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	4413      	add	r3, r2
 8015a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	68ba      	ldr	r2, [r7, #8]
 8015a28:	0151      	lsls	r1, r2, #5
 8015a2a:	68fa      	ldr	r2, [r7, #12]
 8015a2c:	440a      	add	r2, r1
 8015a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015a32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015a36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015a40:	683b      	ldr	r3, [r7, #0]
 8015a42:	781b      	ldrb	r3, [r3, #0]
 8015a44:	f003 030f 	and.w	r3, r3, #15
 8015a48:	2101      	movs	r1, #1
 8015a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8015a4e:	041b      	lsls	r3, r3, #16
 8015a50:	43db      	mvns	r3, r3
 8015a52:	68f9      	ldr	r1, [r7, #12]
 8015a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015a58:	4013      	ands	r3, r2
 8015a5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015a62:	69da      	ldr	r2, [r3, #28]
 8015a64:	683b      	ldr	r3, [r7, #0]
 8015a66:	781b      	ldrb	r3, [r3, #0]
 8015a68:	f003 030f 	and.w	r3, r3, #15
 8015a6c:	2101      	movs	r1, #1
 8015a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8015a72:	041b      	lsls	r3, r3, #16
 8015a74:	43db      	mvns	r3, r3
 8015a76:	68f9      	ldr	r1, [r7, #12]
 8015a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015a7c:	4013      	ands	r3, r2
 8015a7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8015a80:	68bb      	ldr	r3, [r7, #8]
 8015a82:	015a      	lsls	r2, r3, #5
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	4413      	add	r3, r2
 8015a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a8c:	681a      	ldr	r2, [r3, #0]
 8015a8e:	68bb      	ldr	r3, [r7, #8]
 8015a90:	0159      	lsls	r1, r3, #5
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	440b      	add	r3, r1
 8015a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	4b05      	ldr	r3, [pc, #20]	; (8015ab4 <USB_DeactivateEndpoint+0x1b4>)
 8015a9e:	4013      	ands	r3, r2
 8015aa0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8015aa2:	2300      	movs	r3, #0
}
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	3714      	adds	r7, #20
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aae:	4770      	bx	lr
 8015ab0:	ec337800 	.word	0xec337800
 8015ab4:	eff37800 	.word	0xeff37800

08015ab8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	b086      	sub	sp, #24
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	6078      	str	r0, [r7, #4]
 8015ac0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8015ac6:	683b      	ldr	r3, [r7, #0]
 8015ac8:	781b      	ldrb	r3, [r3, #0]
 8015aca:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015acc:	683b      	ldr	r3, [r7, #0]
 8015ace:	785b      	ldrb	r3, [r3, #1]
 8015ad0:	2b01      	cmp	r3, #1
 8015ad2:	f040 810a 	bne.w	8015cea <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8015ad6:	683b      	ldr	r3, [r7, #0]
 8015ad8:	699b      	ldr	r3, [r3, #24]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d132      	bne.n	8015b44 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015ade:	693b      	ldr	r3, [r7, #16]
 8015ae0:	015a      	lsls	r2, r3, #5
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	4413      	add	r3, r2
 8015ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015aea:	691b      	ldr	r3, [r3, #16]
 8015aec:	693a      	ldr	r2, [r7, #16]
 8015aee:	0151      	lsls	r1, r2, #5
 8015af0:	697a      	ldr	r2, [r7, #20]
 8015af2:	440a      	add	r2, r1
 8015af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015af8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015afc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015b00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015b02:	693b      	ldr	r3, [r7, #16]
 8015b04:	015a      	lsls	r2, r3, #5
 8015b06:	697b      	ldr	r3, [r7, #20]
 8015b08:	4413      	add	r3, r2
 8015b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b0e:	691b      	ldr	r3, [r3, #16]
 8015b10:	693a      	ldr	r2, [r7, #16]
 8015b12:	0151      	lsls	r1, r2, #5
 8015b14:	697a      	ldr	r2, [r7, #20]
 8015b16:	440a      	add	r2, r1
 8015b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015b1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015b20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015b22:	693b      	ldr	r3, [r7, #16]
 8015b24:	015a      	lsls	r2, r3, #5
 8015b26:	697b      	ldr	r3, [r7, #20]
 8015b28:	4413      	add	r3, r2
 8015b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b2e:	691b      	ldr	r3, [r3, #16]
 8015b30:	693a      	ldr	r2, [r7, #16]
 8015b32:	0151      	lsls	r1, r2, #5
 8015b34:	697a      	ldr	r2, [r7, #20]
 8015b36:	440a      	add	r2, r1
 8015b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015b3c:	0cdb      	lsrs	r3, r3, #19
 8015b3e:	04db      	lsls	r3, r3, #19
 8015b40:	6113      	str	r3, [r2, #16]
 8015b42:	e074      	b.n	8015c2e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015b44:	693b      	ldr	r3, [r7, #16]
 8015b46:	015a      	lsls	r2, r3, #5
 8015b48:	697b      	ldr	r3, [r7, #20]
 8015b4a:	4413      	add	r3, r2
 8015b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b50:	691b      	ldr	r3, [r3, #16]
 8015b52:	693a      	ldr	r2, [r7, #16]
 8015b54:	0151      	lsls	r1, r2, #5
 8015b56:	697a      	ldr	r2, [r7, #20]
 8015b58:	440a      	add	r2, r1
 8015b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015b5e:	0cdb      	lsrs	r3, r3, #19
 8015b60:	04db      	lsls	r3, r3, #19
 8015b62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015b64:	693b      	ldr	r3, [r7, #16]
 8015b66:	015a      	lsls	r2, r3, #5
 8015b68:	697b      	ldr	r3, [r7, #20]
 8015b6a:	4413      	add	r3, r2
 8015b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b70:	691b      	ldr	r3, [r3, #16]
 8015b72:	693a      	ldr	r2, [r7, #16]
 8015b74:	0151      	lsls	r1, r2, #5
 8015b76:	697a      	ldr	r2, [r7, #20]
 8015b78:	440a      	add	r2, r1
 8015b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015b7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015b82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015b86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015b88:	693b      	ldr	r3, [r7, #16]
 8015b8a:	015a      	lsls	r2, r3, #5
 8015b8c:	697b      	ldr	r3, [r7, #20]
 8015b8e:	4413      	add	r3, r2
 8015b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b94:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8015b96:	683b      	ldr	r3, [r7, #0]
 8015b98:	6999      	ldr	r1, [r3, #24]
 8015b9a:	683b      	ldr	r3, [r7, #0]
 8015b9c:	68db      	ldr	r3, [r3, #12]
 8015b9e:	440b      	add	r3, r1
 8015ba0:	1e59      	subs	r1, r3, #1
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	68db      	ldr	r3, [r3, #12]
 8015ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8015baa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015bac:	4b9e      	ldr	r3, [pc, #632]	; (8015e28 <USB_EPStartXfer+0x370>)
 8015bae:	400b      	ands	r3, r1
 8015bb0:	6939      	ldr	r1, [r7, #16]
 8015bb2:	0148      	lsls	r0, r1, #5
 8015bb4:	6979      	ldr	r1, [r7, #20]
 8015bb6:	4401      	add	r1, r0
 8015bb8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8015bbc:	4313      	orrs	r3, r2
 8015bbe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015bc0:	693b      	ldr	r3, [r7, #16]
 8015bc2:	015a      	lsls	r2, r3, #5
 8015bc4:	697b      	ldr	r3, [r7, #20]
 8015bc6:	4413      	add	r3, r2
 8015bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015bcc:	691a      	ldr	r2, [r3, #16]
 8015bce:	683b      	ldr	r3, [r7, #0]
 8015bd0:	699b      	ldr	r3, [r3, #24]
 8015bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015bd6:	6939      	ldr	r1, [r7, #16]
 8015bd8:	0148      	lsls	r0, r1, #5
 8015bda:	6979      	ldr	r1, [r7, #20]
 8015bdc:	4401      	add	r1, r0
 8015bde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8015be2:	4313      	orrs	r3, r2
 8015be4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8015be6:	683b      	ldr	r3, [r7, #0]
 8015be8:	791b      	ldrb	r3, [r3, #4]
 8015bea:	2b01      	cmp	r3, #1
 8015bec:	d11f      	bne.n	8015c2e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8015bee:	693b      	ldr	r3, [r7, #16]
 8015bf0:	015a      	lsls	r2, r3, #5
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	4413      	add	r3, r2
 8015bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015bfa:	691b      	ldr	r3, [r3, #16]
 8015bfc:	693a      	ldr	r2, [r7, #16]
 8015bfe:	0151      	lsls	r1, r2, #5
 8015c00:	697a      	ldr	r2, [r7, #20]
 8015c02:	440a      	add	r2, r1
 8015c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8015c0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8015c0e:	693b      	ldr	r3, [r7, #16]
 8015c10:	015a      	lsls	r2, r3, #5
 8015c12:	697b      	ldr	r3, [r7, #20]
 8015c14:	4413      	add	r3, r2
 8015c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c1a:	691b      	ldr	r3, [r3, #16]
 8015c1c:	693a      	ldr	r2, [r7, #16]
 8015c1e:	0151      	lsls	r1, r2, #5
 8015c20:	697a      	ldr	r2, [r7, #20]
 8015c22:	440a      	add	r2, r1
 8015c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015c2c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015c2e:	693b      	ldr	r3, [r7, #16]
 8015c30:	015a      	lsls	r2, r3, #5
 8015c32:	697b      	ldr	r3, [r7, #20]
 8015c34:	4413      	add	r3, r2
 8015c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	693a      	ldr	r2, [r7, #16]
 8015c3e:	0151      	lsls	r1, r2, #5
 8015c40:	697a      	ldr	r2, [r7, #20]
 8015c42:	440a      	add	r2, r1
 8015c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015c4c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8015c4e:	683b      	ldr	r3, [r7, #0]
 8015c50:	791b      	ldrb	r3, [r3, #4]
 8015c52:	2b01      	cmp	r3, #1
 8015c54:	d015      	beq.n	8015c82 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8015c56:	683b      	ldr	r3, [r7, #0]
 8015c58:	699b      	ldr	r3, [r3, #24]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	f000 8106 	beq.w	8015e6c <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015c60:	697b      	ldr	r3, [r7, #20]
 8015c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015c68:	683b      	ldr	r3, [r7, #0]
 8015c6a:	781b      	ldrb	r3, [r3, #0]
 8015c6c:	f003 030f 	and.w	r3, r3, #15
 8015c70:	2101      	movs	r1, #1
 8015c72:	fa01 f303 	lsl.w	r3, r1, r3
 8015c76:	6979      	ldr	r1, [r7, #20]
 8015c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015c7c:	4313      	orrs	r3, r2
 8015c7e:	634b      	str	r3, [r1, #52]	; 0x34
 8015c80:	e0f4      	b.n	8015e6c <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015c82:	697b      	ldr	r3, [r7, #20]
 8015c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015c88:	689b      	ldr	r3, [r3, #8]
 8015c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d110      	bne.n	8015cb4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015c92:	693b      	ldr	r3, [r7, #16]
 8015c94:	015a      	lsls	r2, r3, #5
 8015c96:	697b      	ldr	r3, [r7, #20]
 8015c98:	4413      	add	r3, r2
 8015c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	693a      	ldr	r2, [r7, #16]
 8015ca2:	0151      	lsls	r1, r2, #5
 8015ca4:	697a      	ldr	r2, [r7, #20]
 8015ca6:	440a      	add	r2, r1
 8015ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015cac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015cb0:	6013      	str	r3, [r2, #0]
 8015cb2:	e00f      	b.n	8015cd4 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8015cb4:	693b      	ldr	r3, [r7, #16]
 8015cb6:	015a      	lsls	r2, r3, #5
 8015cb8:	697b      	ldr	r3, [r7, #20]
 8015cba:	4413      	add	r3, r2
 8015cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	693a      	ldr	r2, [r7, #16]
 8015cc4:	0151      	lsls	r1, r2, #5
 8015cc6:	697a      	ldr	r2, [r7, #20]
 8015cc8:	440a      	add	r2, r1
 8015cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015cd2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8015cd4:	683b      	ldr	r3, [r7, #0]
 8015cd6:	6919      	ldr	r1, [r3, #16]
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	781a      	ldrb	r2, [r3, #0]
 8015cdc:	683b      	ldr	r3, [r7, #0]
 8015cde:	699b      	ldr	r3, [r3, #24]
 8015ce0:	b29b      	uxth	r3, r3
 8015ce2:	6878      	ldr	r0, [r7, #4]
 8015ce4:	f000 fa94 	bl	8016210 <USB_WritePacket>
 8015ce8:	e0c0      	b.n	8015e6c <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	015a      	lsls	r2, r3, #5
 8015cee:	697b      	ldr	r3, [r7, #20]
 8015cf0:	4413      	add	r3, r2
 8015cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015cf6:	691b      	ldr	r3, [r3, #16]
 8015cf8:	693a      	ldr	r2, [r7, #16]
 8015cfa:	0151      	lsls	r1, r2, #5
 8015cfc:	697a      	ldr	r2, [r7, #20]
 8015cfe:	440a      	add	r2, r1
 8015d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015d04:	0cdb      	lsrs	r3, r3, #19
 8015d06:	04db      	lsls	r3, r3, #19
 8015d08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8015d0a:	693b      	ldr	r3, [r7, #16]
 8015d0c:	015a      	lsls	r2, r3, #5
 8015d0e:	697b      	ldr	r3, [r7, #20]
 8015d10:	4413      	add	r3, r2
 8015d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015d16:	691b      	ldr	r3, [r3, #16]
 8015d18:	693a      	ldr	r2, [r7, #16]
 8015d1a:	0151      	lsls	r1, r2, #5
 8015d1c:	697a      	ldr	r2, [r7, #20]
 8015d1e:	440a      	add	r2, r1
 8015d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015d24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015d28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015d2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8015d2e:	683b      	ldr	r3, [r7, #0]
 8015d30:	699b      	ldr	r3, [r3, #24]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d123      	bne.n	8015d7e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8015d36:	693b      	ldr	r3, [r7, #16]
 8015d38:	015a      	lsls	r2, r3, #5
 8015d3a:	697b      	ldr	r3, [r7, #20]
 8015d3c:	4413      	add	r3, r2
 8015d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015d42:	691a      	ldr	r2, [r3, #16]
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	68db      	ldr	r3, [r3, #12]
 8015d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015d4c:	6939      	ldr	r1, [r7, #16]
 8015d4e:	0148      	lsls	r0, r1, #5
 8015d50:	6979      	ldr	r1, [r7, #20]
 8015d52:	4401      	add	r1, r0
 8015d54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015d58:	4313      	orrs	r3, r2
 8015d5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015d5c:	693b      	ldr	r3, [r7, #16]
 8015d5e:	015a      	lsls	r2, r3, #5
 8015d60:	697b      	ldr	r3, [r7, #20]
 8015d62:	4413      	add	r3, r2
 8015d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015d68:	691b      	ldr	r3, [r3, #16]
 8015d6a:	693a      	ldr	r2, [r7, #16]
 8015d6c:	0151      	lsls	r1, r2, #5
 8015d6e:	697a      	ldr	r2, [r7, #20]
 8015d70:	440a      	add	r2, r1
 8015d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015d76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015d7a:	6113      	str	r3, [r2, #16]
 8015d7c:	e037      	b.n	8015dee <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8015d7e:	683b      	ldr	r3, [r7, #0]
 8015d80:	699a      	ldr	r2, [r3, #24]
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	68db      	ldr	r3, [r3, #12]
 8015d86:	4413      	add	r3, r2
 8015d88:	1e5a      	subs	r2, r3, #1
 8015d8a:	683b      	ldr	r3, [r7, #0]
 8015d8c:	68db      	ldr	r3, [r3, #12]
 8015d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d92:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8015d94:	683b      	ldr	r3, [r7, #0]
 8015d96:	68db      	ldr	r3, [r3, #12]
 8015d98:	89fa      	ldrh	r2, [r7, #14]
 8015d9a:	fb03 f202 	mul.w	r2, r3, r2
 8015d9e:	683b      	ldr	r3, [r7, #0]
 8015da0:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8015da2:	693b      	ldr	r3, [r7, #16]
 8015da4:	015a      	lsls	r2, r3, #5
 8015da6:	697b      	ldr	r3, [r7, #20]
 8015da8:	4413      	add	r3, r2
 8015daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015dae:	691a      	ldr	r2, [r3, #16]
 8015db0:	89fb      	ldrh	r3, [r7, #14]
 8015db2:	04d9      	lsls	r1, r3, #19
 8015db4:	4b1c      	ldr	r3, [pc, #112]	; (8015e28 <USB_EPStartXfer+0x370>)
 8015db6:	400b      	ands	r3, r1
 8015db8:	6939      	ldr	r1, [r7, #16]
 8015dba:	0148      	lsls	r0, r1, #5
 8015dbc:	6979      	ldr	r1, [r7, #20]
 8015dbe:	4401      	add	r1, r0
 8015dc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015dc4:	4313      	orrs	r3, r2
 8015dc6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8015dc8:	693b      	ldr	r3, [r7, #16]
 8015dca:	015a      	lsls	r2, r3, #5
 8015dcc:	697b      	ldr	r3, [r7, #20]
 8015dce:	4413      	add	r3, r2
 8015dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015dd4:	691a      	ldr	r2, [r3, #16]
 8015dd6:	683b      	ldr	r3, [r7, #0]
 8015dd8:	69db      	ldr	r3, [r3, #28]
 8015dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015dde:	6939      	ldr	r1, [r7, #16]
 8015de0:	0148      	lsls	r0, r1, #5
 8015de2:	6979      	ldr	r1, [r7, #20]
 8015de4:	4401      	add	r1, r0
 8015de6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015dea:	4313      	orrs	r3, r2
 8015dec:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8015dee:	683b      	ldr	r3, [r7, #0]
 8015df0:	791b      	ldrb	r3, [r3, #4]
 8015df2:	2b01      	cmp	r3, #1
 8015df4:	d12a      	bne.n	8015e4c <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015df6:	697b      	ldr	r3, [r7, #20]
 8015df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015dfc:	689b      	ldr	r3, [r3, #8]
 8015dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d112      	bne.n	8015e2c <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8015e06:	693b      	ldr	r3, [r7, #16]
 8015e08:	015a      	lsls	r2, r3, #5
 8015e0a:	697b      	ldr	r3, [r7, #20]
 8015e0c:	4413      	add	r3, r2
 8015e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	693a      	ldr	r2, [r7, #16]
 8015e16:	0151      	lsls	r1, r2, #5
 8015e18:	697a      	ldr	r2, [r7, #20]
 8015e1a:	440a      	add	r2, r1
 8015e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015e20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015e24:	6013      	str	r3, [r2, #0]
 8015e26:	e011      	b.n	8015e4c <USB_EPStartXfer+0x394>
 8015e28:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8015e2c:	693b      	ldr	r3, [r7, #16]
 8015e2e:	015a      	lsls	r2, r3, #5
 8015e30:	697b      	ldr	r3, [r7, #20]
 8015e32:	4413      	add	r3, r2
 8015e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	693a      	ldr	r2, [r7, #16]
 8015e3c:	0151      	lsls	r1, r2, #5
 8015e3e:	697a      	ldr	r2, [r7, #20]
 8015e40:	440a      	add	r2, r1
 8015e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015e4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015e4c:	693b      	ldr	r3, [r7, #16]
 8015e4e:	015a      	lsls	r2, r3, #5
 8015e50:	697b      	ldr	r3, [r7, #20]
 8015e52:	4413      	add	r3, r2
 8015e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	693a      	ldr	r2, [r7, #16]
 8015e5c:	0151      	lsls	r1, r2, #5
 8015e5e:	697a      	ldr	r2, [r7, #20]
 8015e60:	440a      	add	r2, r1
 8015e62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015e66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015e6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015e6c:	2300      	movs	r3, #0
}
 8015e6e:	4618      	mov	r0, r3
 8015e70:	3718      	adds	r7, #24
 8015e72:	46bd      	mov	sp, r7
 8015e74:	bd80      	pop	{r7, pc}
 8015e76:	bf00      	nop

08015e78 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015e78:	b480      	push	{r7}
 8015e7a:	b085      	sub	sp, #20
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
 8015e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015e86:	683b      	ldr	r3, [r7, #0]
 8015e88:	781b      	ldrb	r3, [r3, #0]
 8015e8a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015e8c:	683b      	ldr	r3, [r7, #0]
 8015e8e:	785b      	ldrb	r3, [r3, #1]
 8015e90:	2b01      	cmp	r3, #1
 8015e92:	f040 80ab 	bne.w	8015fec <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8015e96:	683b      	ldr	r3, [r7, #0]
 8015e98:	699b      	ldr	r3, [r3, #24]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d132      	bne.n	8015f04 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015e9e:	68bb      	ldr	r3, [r7, #8]
 8015ea0:	015a      	lsls	r2, r3, #5
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	4413      	add	r3, r2
 8015ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015eaa:	691b      	ldr	r3, [r3, #16]
 8015eac:	68ba      	ldr	r2, [r7, #8]
 8015eae:	0151      	lsls	r1, r2, #5
 8015eb0:	68fa      	ldr	r2, [r7, #12]
 8015eb2:	440a      	add	r2, r1
 8015eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015eb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015ebc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015ec0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015ec2:	68bb      	ldr	r3, [r7, #8]
 8015ec4:	015a      	lsls	r2, r3, #5
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	4413      	add	r3, r2
 8015eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015ece:	691b      	ldr	r3, [r3, #16]
 8015ed0:	68ba      	ldr	r2, [r7, #8]
 8015ed2:	0151      	lsls	r1, r2, #5
 8015ed4:	68fa      	ldr	r2, [r7, #12]
 8015ed6:	440a      	add	r2, r1
 8015ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015edc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015ee0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	015a      	lsls	r2, r3, #5
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	4413      	add	r3, r2
 8015eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015eee:	691b      	ldr	r3, [r3, #16]
 8015ef0:	68ba      	ldr	r2, [r7, #8]
 8015ef2:	0151      	lsls	r1, r2, #5
 8015ef4:	68fa      	ldr	r2, [r7, #12]
 8015ef6:	440a      	add	r2, r1
 8015ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015efc:	0cdb      	lsrs	r3, r3, #19
 8015efe:	04db      	lsls	r3, r3, #19
 8015f00:	6113      	str	r3, [r2, #16]
 8015f02:	e04e      	b.n	8015fa2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015f04:	68bb      	ldr	r3, [r7, #8]
 8015f06:	015a      	lsls	r2, r3, #5
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	4413      	add	r3, r2
 8015f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015f10:	691b      	ldr	r3, [r3, #16]
 8015f12:	68ba      	ldr	r2, [r7, #8]
 8015f14:	0151      	lsls	r1, r2, #5
 8015f16:	68fa      	ldr	r2, [r7, #12]
 8015f18:	440a      	add	r2, r1
 8015f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015f1e:	0cdb      	lsrs	r3, r3, #19
 8015f20:	04db      	lsls	r3, r3, #19
 8015f22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	015a      	lsls	r2, r3, #5
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	4413      	add	r3, r2
 8015f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015f30:	691b      	ldr	r3, [r3, #16]
 8015f32:	68ba      	ldr	r2, [r7, #8]
 8015f34:	0151      	lsls	r1, r2, #5
 8015f36:	68fa      	ldr	r2, [r7, #12]
 8015f38:	440a      	add	r2, r1
 8015f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015f3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015f42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015f46:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8015f48:	683b      	ldr	r3, [r7, #0]
 8015f4a:	699a      	ldr	r2, [r3, #24]
 8015f4c:	683b      	ldr	r3, [r7, #0]
 8015f4e:	68db      	ldr	r3, [r3, #12]
 8015f50:	429a      	cmp	r2, r3
 8015f52:	d903      	bls.n	8015f5c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8015f54:	683b      	ldr	r3, [r7, #0]
 8015f56:	68da      	ldr	r2, [r3, #12]
 8015f58:	683b      	ldr	r3, [r7, #0]
 8015f5a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015f5c:	68bb      	ldr	r3, [r7, #8]
 8015f5e:	015a      	lsls	r2, r3, #5
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	4413      	add	r3, r2
 8015f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015f68:	691b      	ldr	r3, [r3, #16]
 8015f6a:	68ba      	ldr	r2, [r7, #8]
 8015f6c:	0151      	lsls	r1, r2, #5
 8015f6e:	68fa      	ldr	r2, [r7, #12]
 8015f70:	440a      	add	r2, r1
 8015f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015f76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015f7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015f7c:	68bb      	ldr	r3, [r7, #8]
 8015f7e:	015a      	lsls	r2, r3, #5
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	4413      	add	r3, r2
 8015f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015f88:	691a      	ldr	r2, [r3, #16]
 8015f8a:	683b      	ldr	r3, [r7, #0]
 8015f8c:	699b      	ldr	r3, [r3, #24]
 8015f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015f92:	68b9      	ldr	r1, [r7, #8]
 8015f94:	0148      	lsls	r0, r1, #5
 8015f96:	68f9      	ldr	r1, [r7, #12]
 8015f98:	4401      	add	r1, r0
 8015f9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8015f9e:	4313      	orrs	r3, r2
 8015fa0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015fa2:	68bb      	ldr	r3, [r7, #8]
 8015fa4:	015a      	lsls	r2, r3, #5
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	4413      	add	r3, r2
 8015faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	68ba      	ldr	r2, [r7, #8]
 8015fb2:	0151      	lsls	r1, r2, #5
 8015fb4:	68fa      	ldr	r2, [r7, #12]
 8015fb6:	440a      	add	r2, r1
 8015fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015fbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015fc0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8015fc2:	683b      	ldr	r3, [r7, #0]
 8015fc4:	699b      	ldr	r3, [r3, #24]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d071      	beq.n	80160ae <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	781b      	ldrb	r3, [r3, #0]
 8015fd6:	f003 030f 	and.w	r3, r3, #15
 8015fda:	2101      	movs	r1, #1
 8015fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8015fe0:	68f9      	ldr	r1, [r7, #12]
 8015fe2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015fe6:	4313      	orrs	r3, r2
 8015fe8:	634b      	str	r3, [r1, #52]	; 0x34
 8015fea:	e060      	b.n	80160ae <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015fec:	68bb      	ldr	r3, [r7, #8]
 8015fee:	015a      	lsls	r2, r3, #5
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	4413      	add	r3, r2
 8015ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015ff8:	691b      	ldr	r3, [r3, #16]
 8015ffa:	68ba      	ldr	r2, [r7, #8]
 8015ffc:	0151      	lsls	r1, r2, #5
 8015ffe:	68fa      	ldr	r2, [r7, #12]
 8016000:	440a      	add	r2, r1
 8016002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016006:	0cdb      	lsrs	r3, r3, #19
 8016008:	04db      	lsls	r3, r3, #19
 801600a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801600c:	68bb      	ldr	r3, [r7, #8]
 801600e:	015a      	lsls	r2, r3, #5
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	4413      	add	r3, r2
 8016014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016018:	691b      	ldr	r3, [r3, #16]
 801601a:	68ba      	ldr	r2, [r7, #8]
 801601c:	0151      	lsls	r1, r2, #5
 801601e:	68fa      	ldr	r2, [r7, #12]
 8016020:	440a      	add	r2, r1
 8016022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016026:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801602a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801602e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8016030:	683b      	ldr	r3, [r7, #0]
 8016032:	699b      	ldr	r3, [r3, #24]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d003      	beq.n	8016040 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8016038:	683b      	ldr	r3, [r7, #0]
 801603a:	68da      	ldr	r2, [r3, #12]
 801603c:	683b      	ldr	r3, [r7, #0]
 801603e:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8016040:	683b      	ldr	r3, [r7, #0]
 8016042:	68da      	ldr	r2, [r3, #12]
 8016044:	683b      	ldr	r3, [r7, #0]
 8016046:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016048:	68bb      	ldr	r3, [r7, #8]
 801604a:	015a      	lsls	r2, r3, #5
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	4413      	add	r3, r2
 8016050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016054:	691b      	ldr	r3, [r3, #16]
 8016056:	68ba      	ldr	r2, [r7, #8]
 8016058:	0151      	lsls	r1, r2, #5
 801605a:	68fa      	ldr	r2, [r7, #12]
 801605c:	440a      	add	r2, r1
 801605e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016062:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016066:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	015a      	lsls	r2, r3, #5
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	4413      	add	r3, r2
 8016070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016074:	691a      	ldr	r2, [r3, #16]
 8016076:	683b      	ldr	r3, [r7, #0]
 8016078:	69db      	ldr	r3, [r3, #28]
 801607a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801607e:	68b9      	ldr	r1, [r7, #8]
 8016080:	0148      	lsls	r0, r1, #5
 8016082:	68f9      	ldr	r1, [r7, #12]
 8016084:	4401      	add	r1, r0
 8016086:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801608a:	4313      	orrs	r3, r2
 801608c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801608e:	68bb      	ldr	r3, [r7, #8]
 8016090:	015a      	lsls	r2, r3, #5
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	4413      	add	r3, r2
 8016096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	68ba      	ldr	r2, [r7, #8]
 801609e:	0151      	lsls	r1, r2, #5
 80160a0:	68fa      	ldr	r2, [r7, #12]
 80160a2:	440a      	add	r2, r1
 80160a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80160a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80160ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80160ae:	2300      	movs	r3, #0
}
 80160b0:	4618      	mov	r0, r3
 80160b2:	3714      	adds	r7, #20
 80160b4:	46bd      	mov	sp, r7
 80160b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ba:	4770      	bx	lr

080160bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80160bc:	b480      	push	{r7}
 80160be:	b087      	sub	sp, #28
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
 80160c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80160c6:	2300      	movs	r3, #0
 80160c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80160ca:	2300      	movs	r3, #0
 80160cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	785b      	ldrb	r3, [r3, #1]
 80160d6:	2b01      	cmp	r3, #1
 80160d8:	d14a      	bne.n	8016170 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80160da:	683b      	ldr	r3, [r7, #0]
 80160dc:	781b      	ldrb	r3, [r3, #0]
 80160de:	015a      	lsls	r2, r3, #5
 80160e0:	693b      	ldr	r3, [r7, #16]
 80160e2:	4413      	add	r3, r2
 80160e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80160ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80160f2:	f040 8086 	bne.w	8016202 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	781b      	ldrb	r3, [r3, #0]
 80160fa:	015a      	lsls	r2, r3, #5
 80160fc:	693b      	ldr	r3, [r7, #16]
 80160fe:	4413      	add	r3, r2
 8016100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	683a      	ldr	r2, [r7, #0]
 8016108:	7812      	ldrb	r2, [r2, #0]
 801610a:	0151      	lsls	r1, r2, #5
 801610c:	693a      	ldr	r2, [r7, #16]
 801610e:	440a      	add	r2, r1
 8016110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016114:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016118:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801611a:	683b      	ldr	r3, [r7, #0]
 801611c:	781b      	ldrb	r3, [r3, #0]
 801611e:	015a      	lsls	r2, r3, #5
 8016120:	693b      	ldr	r3, [r7, #16]
 8016122:	4413      	add	r3, r2
 8016124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	683a      	ldr	r2, [r7, #0]
 801612c:	7812      	ldrb	r2, [r2, #0]
 801612e:	0151      	lsls	r1, r2, #5
 8016130:	693a      	ldr	r2, [r7, #16]
 8016132:	440a      	add	r2, r1
 8016134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801613c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	3301      	adds	r3, #1
 8016142:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	f242 7210 	movw	r2, #10000	; 0x2710
 801614a:	4293      	cmp	r3, r2
 801614c:	d902      	bls.n	8016154 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801614e:	2301      	movs	r3, #1
 8016150:	75fb      	strb	r3, [r7, #23]
          break;
 8016152:	e056      	b.n	8016202 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8016154:	683b      	ldr	r3, [r7, #0]
 8016156:	781b      	ldrb	r3, [r3, #0]
 8016158:	015a      	lsls	r2, r3, #5
 801615a:	693b      	ldr	r3, [r7, #16]
 801615c:	4413      	add	r3, r2
 801615e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801616c:	d0e7      	beq.n	801613e <USB_EPStopXfer+0x82>
 801616e:	e048      	b.n	8016202 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016170:	683b      	ldr	r3, [r7, #0]
 8016172:	781b      	ldrb	r3, [r3, #0]
 8016174:	015a      	lsls	r2, r3, #5
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	4413      	add	r3, r2
 801617a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016188:	d13b      	bne.n	8016202 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	781b      	ldrb	r3, [r3, #0]
 801618e:	015a      	lsls	r2, r3, #5
 8016190:	693b      	ldr	r3, [r7, #16]
 8016192:	4413      	add	r3, r2
 8016194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	683a      	ldr	r2, [r7, #0]
 801619c:	7812      	ldrb	r2, [r2, #0]
 801619e:	0151      	lsls	r1, r2, #5
 80161a0:	693a      	ldr	r2, [r7, #16]
 80161a2:	440a      	add	r2, r1
 80161a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80161a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80161ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	781b      	ldrb	r3, [r3, #0]
 80161b2:	015a      	lsls	r2, r3, #5
 80161b4:	693b      	ldr	r3, [r7, #16]
 80161b6:	4413      	add	r3, r2
 80161b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	683a      	ldr	r2, [r7, #0]
 80161c0:	7812      	ldrb	r2, [r2, #0]
 80161c2:	0151      	lsls	r1, r2, #5
 80161c4:	693a      	ldr	r2, [r7, #16]
 80161c6:	440a      	add	r2, r1
 80161c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80161cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80161d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	3301      	adds	r3, #1
 80161d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	f242 7210 	movw	r2, #10000	; 0x2710
 80161de:	4293      	cmp	r3, r2
 80161e0:	d902      	bls.n	80161e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80161e2:	2301      	movs	r3, #1
 80161e4:	75fb      	strb	r3, [r7, #23]
          break;
 80161e6:	e00c      	b.n	8016202 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80161e8:	683b      	ldr	r3, [r7, #0]
 80161ea:	781b      	ldrb	r3, [r3, #0]
 80161ec:	015a      	lsls	r2, r3, #5
 80161ee:	693b      	ldr	r3, [r7, #16]
 80161f0:	4413      	add	r3, r2
 80161f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80161fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016200:	d0e7      	beq.n	80161d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8016202:	7dfb      	ldrb	r3, [r7, #23]
}
 8016204:	4618      	mov	r0, r3
 8016206:	371c      	adds	r7, #28
 8016208:	46bd      	mov	sp, r7
 801620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620e:	4770      	bx	lr

08016210 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8016210:	b480      	push	{r7}
 8016212:	b089      	sub	sp, #36	; 0x24
 8016214:	af00      	add	r7, sp, #0
 8016216:	60f8      	str	r0, [r7, #12]
 8016218:	60b9      	str	r1, [r7, #8]
 801621a:	4611      	mov	r1, r2
 801621c:	461a      	mov	r2, r3
 801621e:	460b      	mov	r3, r1
 8016220:	71fb      	strb	r3, [r7, #7]
 8016222:	4613      	mov	r3, r2
 8016224:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 801622e:	88bb      	ldrh	r3, [r7, #4]
 8016230:	3303      	adds	r3, #3
 8016232:	089b      	lsrs	r3, r3, #2
 8016234:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8016236:	2300      	movs	r3, #0
 8016238:	61bb      	str	r3, [r7, #24]
 801623a:	e018      	b.n	801626e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801623c:	79fb      	ldrb	r3, [r7, #7]
 801623e:	031a      	lsls	r2, r3, #12
 8016240:	697b      	ldr	r3, [r7, #20]
 8016242:	4413      	add	r3, r2
 8016244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016248:	461a      	mov	r2, r3
 801624a:	69fb      	ldr	r3, [r7, #28]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8016250:	69fb      	ldr	r3, [r7, #28]
 8016252:	3301      	adds	r3, #1
 8016254:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8016256:	69fb      	ldr	r3, [r7, #28]
 8016258:	3301      	adds	r3, #1
 801625a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 801625c:	69fb      	ldr	r3, [r7, #28]
 801625e:	3301      	adds	r3, #1
 8016260:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8016262:	69fb      	ldr	r3, [r7, #28]
 8016264:	3301      	adds	r3, #1
 8016266:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8016268:	69bb      	ldr	r3, [r7, #24]
 801626a:	3301      	adds	r3, #1
 801626c:	61bb      	str	r3, [r7, #24]
 801626e:	69ba      	ldr	r2, [r7, #24]
 8016270:	693b      	ldr	r3, [r7, #16]
 8016272:	429a      	cmp	r2, r3
 8016274:	d3e2      	bcc.n	801623c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8016276:	2300      	movs	r3, #0
}
 8016278:	4618      	mov	r0, r3
 801627a:	3724      	adds	r7, #36	; 0x24
 801627c:	46bd      	mov	sp, r7
 801627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016282:	4770      	bx	lr

08016284 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8016284:	b480      	push	{r7}
 8016286:	b08b      	sub	sp, #44	; 0x2c
 8016288:	af00      	add	r7, sp, #0
 801628a:	60f8      	str	r0, [r7, #12]
 801628c:	60b9      	str	r1, [r7, #8]
 801628e:	4613      	mov	r3, r2
 8016290:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8016296:	68bb      	ldr	r3, [r7, #8]
 8016298:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801629a:	88fb      	ldrh	r3, [r7, #6]
 801629c:	089b      	lsrs	r3, r3, #2
 801629e:	b29b      	uxth	r3, r3
 80162a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80162a2:	88fb      	ldrh	r3, [r7, #6]
 80162a4:	f003 0303 	and.w	r3, r3, #3
 80162a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80162aa:	2300      	movs	r3, #0
 80162ac:	623b      	str	r3, [r7, #32]
 80162ae:	e014      	b.n	80162da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80162b0:	69bb      	ldr	r3, [r7, #24]
 80162b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80162b6:	681a      	ldr	r2, [r3, #0]
 80162b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80162bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162be:	3301      	adds	r3, #1
 80162c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80162c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c4:	3301      	adds	r3, #1
 80162c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80162c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ca:	3301      	adds	r3, #1
 80162cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80162ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d0:	3301      	adds	r3, #1
 80162d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80162d4:	6a3b      	ldr	r3, [r7, #32]
 80162d6:	3301      	adds	r3, #1
 80162d8:	623b      	str	r3, [r7, #32]
 80162da:	6a3a      	ldr	r2, [r7, #32]
 80162dc:	697b      	ldr	r3, [r7, #20]
 80162de:	429a      	cmp	r2, r3
 80162e0:	d3e6      	bcc.n	80162b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80162e2:	8bfb      	ldrh	r3, [r7, #30]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d01e      	beq.n	8016326 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80162e8:	2300      	movs	r3, #0
 80162ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80162ec:	69bb      	ldr	r3, [r7, #24]
 80162ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80162f2:	461a      	mov	r2, r3
 80162f4:	f107 0310 	add.w	r3, r7, #16
 80162f8:	6812      	ldr	r2, [r2, #0]
 80162fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80162fc:	693a      	ldr	r2, [r7, #16]
 80162fe:	6a3b      	ldr	r3, [r7, #32]
 8016300:	b2db      	uxtb	r3, r3
 8016302:	00db      	lsls	r3, r3, #3
 8016304:	fa22 f303 	lsr.w	r3, r2, r3
 8016308:	b2da      	uxtb	r2, r3
 801630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801630c:	701a      	strb	r2, [r3, #0]
      i++;
 801630e:	6a3b      	ldr	r3, [r7, #32]
 8016310:	3301      	adds	r3, #1
 8016312:	623b      	str	r3, [r7, #32]
      pDest++;
 8016314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016316:	3301      	adds	r3, #1
 8016318:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801631a:	8bfb      	ldrh	r3, [r7, #30]
 801631c:	3b01      	subs	r3, #1
 801631e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8016320:	8bfb      	ldrh	r3, [r7, #30]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d1ea      	bne.n	80162fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8016326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016328:	4618      	mov	r0, r3
 801632a:	372c      	adds	r7, #44	; 0x2c
 801632c:	46bd      	mov	sp, r7
 801632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016332:	4770      	bx	lr

08016334 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016334:	b480      	push	{r7}
 8016336:	b085      	sub	sp, #20
 8016338:	af00      	add	r7, sp, #0
 801633a:	6078      	str	r0, [r7, #4]
 801633c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016342:	683b      	ldr	r3, [r7, #0]
 8016344:	781b      	ldrb	r3, [r3, #0]
 8016346:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016348:	683b      	ldr	r3, [r7, #0]
 801634a:	785b      	ldrb	r3, [r3, #1]
 801634c:	2b01      	cmp	r3, #1
 801634e:	d12c      	bne.n	80163aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016350:	68bb      	ldr	r3, [r7, #8]
 8016352:	015a      	lsls	r2, r3, #5
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	4413      	add	r3, r2
 8016358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	2b00      	cmp	r3, #0
 8016360:	db12      	blt.n	8016388 <USB_EPSetStall+0x54>
 8016362:	68bb      	ldr	r3, [r7, #8]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d00f      	beq.n	8016388 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8016368:	68bb      	ldr	r3, [r7, #8]
 801636a:	015a      	lsls	r2, r3, #5
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	4413      	add	r3, r2
 8016370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	68ba      	ldr	r2, [r7, #8]
 8016378:	0151      	lsls	r1, r2, #5
 801637a:	68fa      	ldr	r2, [r7, #12]
 801637c:	440a      	add	r2, r1
 801637e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016382:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8016386:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8016388:	68bb      	ldr	r3, [r7, #8]
 801638a:	015a      	lsls	r2, r3, #5
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	4413      	add	r3, r2
 8016390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	68ba      	ldr	r2, [r7, #8]
 8016398:	0151      	lsls	r1, r2, #5
 801639a:	68fa      	ldr	r2, [r7, #12]
 801639c:	440a      	add	r2, r1
 801639e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80163a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80163a6:	6013      	str	r3, [r2, #0]
 80163a8:	e02b      	b.n	8016402 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80163aa:	68bb      	ldr	r3, [r7, #8]
 80163ac:	015a      	lsls	r2, r3, #5
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	4413      	add	r3, r2
 80163b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	db12      	blt.n	80163e2 <USB_EPSetStall+0xae>
 80163bc:	68bb      	ldr	r3, [r7, #8]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d00f      	beq.n	80163e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80163c2:	68bb      	ldr	r3, [r7, #8]
 80163c4:	015a      	lsls	r2, r3, #5
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	4413      	add	r3, r2
 80163ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	68ba      	ldr	r2, [r7, #8]
 80163d2:	0151      	lsls	r1, r2, #5
 80163d4:	68fa      	ldr	r2, [r7, #12]
 80163d6:	440a      	add	r2, r1
 80163d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80163dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80163e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80163e2:	68bb      	ldr	r3, [r7, #8]
 80163e4:	015a      	lsls	r2, r3, #5
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	4413      	add	r3, r2
 80163ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	68ba      	ldr	r2, [r7, #8]
 80163f2:	0151      	lsls	r1, r2, #5
 80163f4:	68fa      	ldr	r2, [r7, #12]
 80163f6:	440a      	add	r2, r1
 80163f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80163fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016400:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016402:	2300      	movs	r3, #0
}
 8016404:	4618      	mov	r0, r3
 8016406:	3714      	adds	r7, #20
 8016408:	46bd      	mov	sp, r7
 801640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640e:	4770      	bx	lr

08016410 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016410:	b480      	push	{r7}
 8016412:	b085      	sub	sp, #20
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
 8016418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801641e:	683b      	ldr	r3, [r7, #0]
 8016420:	781b      	ldrb	r3, [r3, #0]
 8016422:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016424:	683b      	ldr	r3, [r7, #0]
 8016426:	785b      	ldrb	r3, [r3, #1]
 8016428:	2b01      	cmp	r3, #1
 801642a:	d128      	bne.n	801647e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801642c:	68bb      	ldr	r3, [r7, #8]
 801642e:	015a      	lsls	r2, r3, #5
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	4413      	add	r3, r2
 8016434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	68ba      	ldr	r2, [r7, #8]
 801643c:	0151      	lsls	r1, r2, #5
 801643e:	68fa      	ldr	r2, [r7, #12]
 8016440:	440a      	add	r2, r1
 8016442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016446:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801644a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801644c:	683b      	ldr	r3, [r7, #0]
 801644e:	791b      	ldrb	r3, [r3, #4]
 8016450:	2b03      	cmp	r3, #3
 8016452:	d003      	beq.n	801645c <USB_EPClearStall+0x4c>
 8016454:	683b      	ldr	r3, [r7, #0]
 8016456:	791b      	ldrb	r3, [r3, #4]
 8016458:	2b02      	cmp	r3, #2
 801645a:	d138      	bne.n	80164ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801645c:	68bb      	ldr	r3, [r7, #8]
 801645e:	015a      	lsls	r2, r3, #5
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	4413      	add	r3, r2
 8016464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	68ba      	ldr	r2, [r7, #8]
 801646c:	0151      	lsls	r1, r2, #5
 801646e:	68fa      	ldr	r2, [r7, #12]
 8016470:	440a      	add	r2, r1
 8016472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801647a:	6013      	str	r3, [r2, #0]
 801647c:	e027      	b.n	80164ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801647e:	68bb      	ldr	r3, [r7, #8]
 8016480:	015a      	lsls	r2, r3, #5
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	4413      	add	r3, r2
 8016486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	68ba      	ldr	r2, [r7, #8]
 801648e:	0151      	lsls	r1, r2, #5
 8016490:	68fa      	ldr	r2, [r7, #12]
 8016492:	440a      	add	r2, r1
 8016494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016498:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801649c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801649e:	683b      	ldr	r3, [r7, #0]
 80164a0:	791b      	ldrb	r3, [r3, #4]
 80164a2:	2b03      	cmp	r3, #3
 80164a4:	d003      	beq.n	80164ae <USB_EPClearStall+0x9e>
 80164a6:	683b      	ldr	r3, [r7, #0]
 80164a8:	791b      	ldrb	r3, [r3, #4]
 80164aa:	2b02      	cmp	r3, #2
 80164ac:	d10f      	bne.n	80164ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80164ae:	68bb      	ldr	r3, [r7, #8]
 80164b0:	015a      	lsls	r2, r3, #5
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	4413      	add	r3, r2
 80164b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	68ba      	ldr	r2, [r7, #8]
 80164be:	0151      	lsls	r1, r2, #5
 80164c0:	68fa      	ldr	r2, [r7, #12]
 80164c2:	440a      	add	r2, r1
 80164c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80164c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80164cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80164ce:	2300      	movs	r3, #0
}
 80164d0:	4618      	mov	r0, r3
 80164d2:	3714      	adds	r7, #20
 80164d4:	46bd      	mov	sp, r7
 80164d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164da:	4770      	bx	lr

080164dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80164dc:	b480      	push	{r7}
 80164de:	b085      	sub	sp, #20
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	6078      	str	r0, [r7, #4]
 80164e4:	460b      	mov	r3, r1
 80164e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	68fa      	ldr	r2, [r7, #12]
 80164f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80164fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80164fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016506:	681a      	ldr	r2, [r3, #0]
 8016508:	78fb      	ldrb	r3, [r7, #3]
 801650a:	011b      	lsls	r3, r3, #4
 801650c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8016510:	68f9      	ldr	r1, [r7, #12]
 8016512:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016516:	4313      	orrs	r3, r2
 8016518:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801651a:	2300      	movs	r3, #0
}
 801651c:	4618      	mov	r0, r3
 801651e:	3714      	adds	r7, #20
 8016520:	46bd      	mov	sp, r7
 8016522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016526:	4770      	bx	lr

08016528 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016528:	b480      	push	{r7}
 801652a:	b085      	sub	sp, #20
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	68fa      	ldr	r2, [r7, #12]
 801653e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016542:	f023 0303 	bic.w	r3, r3, #3
 8016546:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801654e:	685b      	ldr	r3, [r3, #4]
 8016550:	68fa      	ldr	r2, [r7, #12]
 8016552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016556:	f023 0302 	bic.w	r3, r3, #2
 801655a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801655c:	2300      	movs	r3, #0
}
 801655e:	4618      	mov	r0, r3
 8016560:	3714      	adds	r7, #20
 8016562:	46bd      	mov	sp, r7
 8016564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016568:	4770      	bx	lr

0801656a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801656a:	b480      	push	{r7}
 801656c:	b085      	sub	sp, #20
 801656e:	af00      	add	r7, sp, #0
 8016570:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	68fa      	ldr	r2, [r7, #12]
 8016580:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016584:	f023 0303 	bic.w	r3, r3, #3
 8016588:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016590:	685b      	ldr	r3, [r3, #4]
 8016592:	68fa      	ldr	r2, [r7, #12]
 8016594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016598:	f043 0302 	orr.w	r3, r3, #2
 801659c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801659e:	2300      	movs	r3, #0
}
 80165a0:	4618      	mov	r0, r3
 80165a2:	3714      	adds	r7, #20
 80165a4:	46bd      	mov	sp, r7
 80165a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165aa:	4770      	bx	lr

080165ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80165ac:	b480      	push	{r7}
 80165ae:	b085      	sub	sp, #20
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	695b      	ldr	r3, [r3, #20]
 80165b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	699b      	ldr	r3, [r3, #24]
 80165be:	68fa      	ldr	r2, [r7, #12]
 80165c0:	4013      	ands	r3, r2
 80165c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80165c4:	68fb      	ldr	r3, [r7, #12]
}
 80165c6:	4618      	mov	r0, r3
 80165c8:	3714      	adds	r7, #20
 80165ca:	46bd      	mov	sp, r7
 80165cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d0:	4770      	bx	lr

080165d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80165d2:	b480      	push	{r7}
 80165d4:	b085      	sub	sp, #20
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80165e4:	699b      	ldr	r3, [r3, #24]
 80165e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80165ee:	69db      	ldr	r3, [r3, #28]
 80165f0:	68ba      	ldr	r2, [r7, #8]
 80165f2:	4013      	ands	r3, r2
 80165f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80165f6:	68bb      	ldr	r3, [r7, #8]
 80165f8:	0c1b      	lsrs	r3, r3, #16
}
 80165fa:	4618      	mov	r0, r3
 80165fc:	3714      	adds	r7, #20
 80165fe:	46bd      	mov	sp, r7
 8016600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016604:	4770      	bx	lr

08016606 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8016606:	b480      	push	{r7}
 8016608:	b085      	sub	sp, #20
 801660a:	af00      	add	r7, sp, #0
 801660c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016618:	699b      	ldr	r3, [r3, #24]
 801661a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016622:	69db      	ldr	r3, [r3, #28]
 8016624:	68ba      	ldr	r2, [r7, #8]
 8016626:	4013      	ands	r3, r2
 8016628:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801662a:	68bb      	ldr	r3, [r7, #8]
 801662c:	b29b      	uxth	r3, r3
}
 801662e:	4618      	mov	r0, r3
 8016630:	3714      	adds	r7, #20
 8016632:	46bd      	mov	sp, r7
 8016634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016638:	4770      	bx	lr

0801663a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801663a:	b480      	push	{r7}
 801663c:	b085      	sub	sp, #20
 801663e:	af00      	add	r7, sp, #0
 8016640:	6078      	str	r0, [r7, #4]
 8016642:	460b      	mov	r3, r1
 8016644:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801664a:	78fb      	ldrb	r3, [r7, #3]
 801664c:	015a      	lsls	r2, r3, #5
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	4413      	add	r3, r2
 8016652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016656:	689b      	ldr	r3, [r3, #8]
 8016658:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016660:	695b      	ldr	r3, [r3, #20]
 8016662:	68ba      	ldr	r2, [r7, #8]
 8016664:	4013      	ands	r3, r2
 8016666:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016668:	68bb      	ldr	r3, [r7, #8]
}
 801666a:	4618      	mov	r0, r3
 801666c:	3714      	adds	r7, #20
 801666e:	46bd      	mov	sp, r7
 8016670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016674:	4770      	bx	lr

08016676 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016676:	b480      	push	{r7}
 8016678:	b087      	sub	sp, #28
 801667a:	af00      	add	r7, sp, #0
 801667c:	6078      	str	r0, [r7, #4]
 801667e:	460b      	mov	r3, r1
 8016680:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8016686:	697b      	ldr	r3, [r7, #20]
 8016688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801668c:	691b      	ldr	r3, [r3, #16]
 801668e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8016690:	697b      	ldr	r3, [r7, #20]
 8016692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016698:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801669a:	78fb      	ldrb	r3, [r7, #3]
 801669c:	f003 030f 	and.w	r3, r3, #15
 80166a0:	68fa      	ldr	r2, [r7, #12]
 80166a2:	fa22 f303 	lsr.w	r3, r2, r3
 80166a6:	01db      	lsls	r3, r3, #7
 80166a8:	b2db      	uxtb	r3, r3
 80166aa:	693a      	ldr	r2, [r7, #16]
 80166ac:	4313      	orrs	r3, r2
 80166ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80166b0:	78fb      	ldrb	r3, [r7, #3]
 80166b2:	015a      	lsls	r2, r3, #5
 80166b4:	697b      	ldr	r3, [r7, #20]
 80166b6:	4413      	add	r3, r2
 80166b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80166bc:	689b      	ldr	r3, [r3, #8]
 80166be:	693a      	ldr	r2, [r7, #16]
 80166c0:	4013      	ands	r3, r2
 80166c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80166c4:	68bb      	ldr	r3, [r7, #8]
}
 80166c6:	4618      	mov	r0, r3
 80166c8:	371c      	adds	r7, #28
 80166ca:	46bd      	mov	sp, r7
 80166cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d0:	4770      	bx	lr

080166d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80166d2:	b480      	push	{r7}
 80166d4:	b083      	sub	sp, #12
 80166d6:	af00      	add	r7, sp, #0
 80166d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	695b      	ldr	r3, [r3, #20]
 80166de:	f003 0301 	and.w	r3, r3, #1
}
 80166e2:	4618      	mov	r0, r3
 80166e4:	370c      	adds	r7, #12
 80166e6:	46bd      	mov	sp, r7
 80166e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ec:	4770      	bx	lr

080166ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80166ee:	b480      	push	{r7}
 80166f0:	b085      	sub	sp, #20
 80166f2:	af00      	add	r7, sp, #0
 80166f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	68fa      	ldr	r2, [r7, #12]
 8016704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016708:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801670c:	f023 0307 	bic.w	r3, r3, #7
 8016710:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016718:	685b      	ldr	r3, [r3, #4]
 801671a:	68fa      	ldr	r2, [r7, #12]
 801671c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016724:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016726:	2300      	movs	r3, #0
}
 8016728:	4618      	mov	r0, r3
 801672a:	3714      	adds	r7, #20
 801672c:	46bd      	mov	sp, r7
 801672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016732:	4770      	bx	lr

08016734 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8016734:	b480      	push	{r7}
 8016736:	b085      	sub	sp, #20
 8016738:	af00      	add	r7, sp, #0
 801673a:	6078      	str	r0, [r7, #4]
 801673c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	333c      	adds	r3, #60	; 0x3c
 8016746:	3304      	adds	r3, #4
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801674c:	68bb      	ldr	r3, [r7, #8]
 801674e:	4a1c      	ldr	r2, [pc, #112]	; (80167c0 <USB_EP0_OutStart+0x8c>)
 8016750:	4293      	cmp	r3, r2
 8016752:	d90a      	bls.n	801676a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016764:	d101      	bne.n	801676a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8016766:	2300      	movs	r3, #0
 8016768:	e024      	b.n	80167b4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016770:	461a      	mov	r2, r3
 8016772:	2300      	movs	r3, #0
 8016774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801677c:	691b      	ldr	r3, [r3, #16]
 801677e:	68fa      	ldr	r2, [r7, #12]
 8016780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016788:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016790:	691b      	ldr	r3, [r3, #16]
 8016792:	68fa      	ldr	r2, [r7, #12]
 8016794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016798:	f043 0318 	orr.w	r3, r3, #24
 801679c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80167a4:	691b      	ldr	r3, [r3, #16]
 80167a6:	68fa      	ldr	r2, [r7, #12]
 80167a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80167ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80167b0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80167b2:	2300      	movs	r3, #0
}
 80167b4:	4618      	mov	r0, r3
 80167b6:	3714      	adds	r7, #20
 80167b8:	46bd      	mov	sp, r7
 80167ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167be:	4770      	bx	lr
 80167c0:	4f54300a 	.word	0x4f54300a

080167c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80167c4:	b480      	push	{r7}
 80167c6:	b085      	sub	sp, #20
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80167cc:	2300      	movs	r3, #0
 80167ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	3301      	adds	r3, #1
 80167d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	4a13      	ldr	r2, [pc, #76]	; (8016828 <USB_CoreReset+0x64>)
 80167da:	4293      	cmp	r3, r2
 80167dc:	d901      	bls.n	80167e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80167de:	2303      	movs	r3, #3
 80167e0:	e01b      	b.n	801681a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	691b      	ldr	r3, [r3, #16]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	daf2      	bge.n	80167d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80167ea:	2300      	movs	r3, #0
 80167ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	691b      	ldr	r3, [r3, #16]
 80167f2:	f043 0201 	orr.w	r2, r3, #1
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	3301      	adds	r3, #1
 80167fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	4a09      	ldr	r2, [pc, #36]	; (8016828 <USB_CoreReset+0x64>)
 8016804:	4293      	cmp	r3, r2
 8016806:	d901      	bls.n	801680c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8016808:	2303      	movs	r3, #3
 801680a:	e006      	b.n	801681a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	691b      	ldr	r3, [r3, #16]
 8016810:	f003 0301 	and.w	r3, r3, #1
 8016814:	2b01      	cmp	r3, #1
 8016816:	d0f0      	beq.n	80167fa <USB_CoreReset+0x36>

  return HAL_OK;
 8016818:	2300      	movs	r3, #0
}
 801681a:	4618      	mov	r0, r3
 801681c:	3714      	adds	r7, #20
 801681e:	46bd      	mov	sp, r7
 8016820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016824:	4770      	bx	lr
 8016826:	bf00      	nop
 8016828:	00030d40 	.word	0x00030d40

0801682c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b084      	sub	sp, #16
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
 8016834:	460b      	mov	r3, r1
 8016836:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8016838:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801683c:	f002 fa6c 	bl	8018d18 <USBD_static_malloc>
 8016840:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d105      	bne.n	8016854 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	2200      	movs	r2, #0
 801684c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8016850:	2302      	movs	r3, #2
 8016852:	e066      	b.n	8016922 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	68fa      	ldr	r2, [r7, #12]
 8016858:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	7c1b      	ldrb	r3, [r3, #16]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d119      	bne.n	8016898 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016868:	2202      	movs	r2, #2
 801686a:	2181      	movs	r1, #129	; 0x81
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	f002 f83f 	bl	80188f0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	2201      	movs	r2, #1
 8016876:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8016878:	f44f 7300 	mov.w	r3, #512	; 0x200
 801687c:	2202      	movs	r2, #2
 801687e:	2101      	movs	r1, #1
 8016880:	6878      	ldr	r0, [r7, #4]
 8016882:	f002 f835 	bl	80188f0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	2201      	movs	r2, #1
 801688a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	2210      	movs	r2, #16
 8016892:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8016896:	e016      	b.n	80168c6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016898:	2340      	movs	r3, #64	; 0x40
 801689a:	2202      	movs	r2, #2
 801689c:	2181      	movs	r1, #129	; 0x81
 801689e:	6878      	ldr	r0, [r7, #4]
 80168a0:	f002 f826 	bl	80188f0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2201      	movs	r2, #1
 80168a8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80168aa:	2340      	movs	r3, #64	; 0x40
 80168ac:	2202      	movs	r2, #2
 80168ae:	2101      	movs	r1, #1
 80168b0:	6878      	ldr	r0, [r7, #4]
 80168b2:	f002 f81d 	bl	80188f0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	2201      	movs	r2, #1
 80168ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	2210      	movs	r2, #16
 80168c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80168c6:	2308      	movs	r3, #8
 80168c8:	2203      	movs	r2, #3
 80168ca:	2182      	movs	r1, #130	; 0x82
 80168cc:	6878      	ldr	r0, [r7, #4]
 80168ce:	f002 f80f 	bl	80188f0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	2201      	movs	r2, #1
 80168d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	2200      	movs	r2, #0
 80168e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	2200      	movs	r2, #0
 80168f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	7c1b      	ldrb	r3, [r3, #16]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d109      	bne.n	8016910 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016902:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016906:	2101      	movs	r1, #1
 8016908:	6878      	ldr	r0, [r7, #4]
 801690a:	f002 f96b 	bl	8018be4 <USBD_LL_PrepareReceive>
 801690e:	e007      	b.n	8016920 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016916:	2340      	movs	r3, #64	; 0x40
 8016918:	2101      	movs	r1, #1
 801691a:	6878      	ldr	r0, [r7, #4]
 801691c:	f002 f962 	bl	8018be4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016920:	2300      	movs	r3, #0
}
 8016922:	4618      	mov	r0, r3
 8016924:	3710      	adds	r7, #16
 8016926:	46bd      	mov	sp, r7
 8016928:	bd80      	pop	{r7, pc}

0801692a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801692a:	b580      	push	{r7, lr}
 801692c:	b082      	sub	sp, #8
 801692e:	af00      	add	r7, sp, #0
 8016930:	6078      	str	r0, [r7, #4]
 8016932:	460b      	mov	r3, r1
 8016934:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8016936:	2181      	movs	r1, #129	; 0x81
 8016938:	6878      	ldr	r0, [r7, #4]
 801693a:	f002 f817 	bl	801896c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	2200      	movs	r2, #0
 8016942:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8016944:	2101      	movs	r1, #1
 8016946:	6878      	ldr	r0, [r7, #4]
 8016948:	f002 f810 	bl	801896c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	2200      	movs	r2, #0
 8016950:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8016954:	2182      	movs	r1, #130	; 0x82
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	f002 f808 	bl	801896c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	2200      	movs	r2, #0
 8016960:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	2200      	movs	r2, #0
 8016968:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016972:	2b00      	cmp	r3, #0
 8016974:	d00e      	beq.n	8016994 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801697c:	685b      	ldr	r3, [r3, #4]
 801697e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016986:	4618      	mov	r0, r3
 8016988:	f002 f9d4 	bl	8018d34 <USBD_static_free>
    pdev->pClassData = NULL;
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	2200      	movs	r2, #0
 8016990:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8016994:	2300      	movs	r3, #0
}
 8016996:	4618      	mov	r0, r3
 8016998:	3708      	adds	r7, #8
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}
	...

080169a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b086      	sub	sp, #24
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
 80169a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80169b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80169b2:	2300      	movs	r3, #0
 80169b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80169b6:	2300      	movs	r3, #0
 80169b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80169ba:	2300      	movs	r3, #0
 80169bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80169be:	693b      	ldr	r3, [r7, #16]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d101      	bne.n	80169c8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80169c4:	2303      	movs	r3, #3
 80169c6:	e0af      	b.n	8016b28 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80169c8:	683b      	ldr	r3, [r7, #0]
 80169ca:	781b      	ldrb	r3, [r3, #0]
 80169cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d03f      	beq.n	8016a54 <USBD_CDC_Setup+0xb4>
 80169d4:	2b20      	cmp	r3, #32
 80169d6:	f040 809f 	bne.w	8016b18 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80169da:	683b      	ldr	r3, [r7, #0]
 80169dc:	88db      	ldrh	r3, [r3, #6]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d02e      	beq.n	8016a40 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80169e2:	683b      	ldr	r3, [r7, #0]
 80169e4:	781b      	ldrb	r3, [r3, #0]
 80169e6:	b25b      	sxtb	r3, r3
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	da16      	bge.n	8016a1a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80169f2:	689b      	ldr	r3, [r3, #8]
 80169f4:	683a      	ldr	r2, [r7, #0]
 80169f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80169f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80169fa:	683a      	ldr	r2, [r7, #0]
 80169fc:	88d2      	ldrh	r2, [r2, #6]
 80169fe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8016a00:	683b      	ldr	r3, [r7, #0]
 8016a02:	88db      	ldrh	r3, [r3, #6]
 8016a04:	2b07      	cmp	r3, #7
 8016a06:	bf28      	it	cs
 8016a08:	2307      	movcs	r3, #7
 8016a0a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8016a0c:	693b      	ldr	r3, [r7, #16]
 8016a0e:	89fa      	ldrh	r2, [r7, #14]
 8016a10:	4619      	mov	r1, r3
 8016a12:	6878      	ldr	r0, [r7, #4]
 8016a14:	f001 fb13 	bl	801803e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8016a18:	e085      	b.n	8016b26 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8016a1a:	683b      	ldr	r3, [r7, #0]
 8016a1c:	785a      	ldrb	r2, [r3, #1]
 8016a1e:	693b      	ldr	r3, [r7, #16]
 8016a20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8016a24:	683b      	ldr	r3, [r7, #0]
 8016a26:	88db      	ldrh	r3, [r3, #6]
 8016a28:	b2da      	uxtb	r2, r3
 8016a2a:	693b      	ldr	r3, [r7, #16]
 8016a2c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8016a30:	6939      	ldr	r1, [r7, #16]
 8016a32:	683b      	ldr	r3, [r7, #0]
 8016a34:	88db      	ldrh	r3, [r3, #6]
 8016a36:	461a      	mov	r2, r3
 8016a38:	6878      	ldr	r0, [r7, #4]
 8016a3a:	f001 fb2c 	bl	8018096 <USBD_CtlPrepareRx>
      break;
 8016a3e:	e072      	b.n	8016b26 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016a46:	689b      	ldr	r3, [r3, #8]
 8016a48:	683a      	ldr	r2, [r7, #0]
 8016a4a:	7850      	ldrb	r0, [r2, #1]
 8016a4c:	2200      	movs	r2, #0
 8016a4e:	6839      	ldr	r1, [r7, #0]
 8016a50:	4798      	blx	r3
      break;
 8016a52:	e068      	b.n	8016b26 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016a54:	683b      	ldr	r3, [r7, #0]
 8016a56:	785b      	ldrb	r3, [r3, #1]
 8016a58:	2b0b      	cmp	r3, #11
 8016a5a:	d852      	bhi.n	8016b02 <USBD_CDC_Setup+0x162>
 8016a5c:	a201      	add	r2, pc, #4	; (adr r2, 8016a64 <USBD_CDC_Setup+0xc4>)
 8016a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a62:	bf00      	nop
 8016a64:	08016a95 	.word	0x08016a95
 8016a68:	08016b11 	.word	0x08016b11
 8016a6c:	08016b03 	.word	0x08016b03
 8016a70:	08016b03 	.word	0x08016b03
 8016a74:	08016b03 	.word	0x08016b03
 8016a78:	08016b03 	.word	0x08016b03
 8016a7c:	08016b03 	.word	0x08016b03
 8016a80:	08016b03 	.word	0x08016b03
 8016a84:	08016b03 	.word	0x08016b03
 8016a88:	08016b03 	.word	0x08016b03
 8016a8c:	08016abf 	.word	0x08016abf
 8016a90:	08016ae9 	.word	0x08016ae9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a9a:	b2db      	uxtb	r3, r3
 8016a9c:	2b03      	cmp	r3, #3
 8016a9e:	d107      	bne.n	8016ab0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8016aa0:	f107 030a 	add.w	r3, r7, #10
 8016aa4:	2202      	movs	r2, #2
 8016aa6:	4619      	mov	r1, r3
 8016aa8:	6878      	ldr	r0, [r7, #4]
 8016aaa:	f001 fac8 	bl	801803e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016aae:	e032      	b.n	8016b16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016ab0:	6839      	ldr	r1, [r7, #0]
 8016ab2:	6878      	ldr	r0, [r7, #4]
 8016ab4:	f001 fa52 	bl	8017f5c <USBD_CtlError>
            ret = USBD_FAIL;
 8016ab8:	2303      	movs	r3, #3
 8016aba:	75fb      	strb	r3, [r7, #23]
          break;
 8016abc:	e02b      	b.n	8016b16 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ac4:	b2db      	uxtb	r3, r3
 8016ac6:	2b03      	cmp	r3, #3
 8016ac8:	d107      	bne.n	8016ada <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8016aca:	f107 030d 	add.w	r3, r7, #13
 8016ace:	2201      	movs	r2, #1
 8016ad0:	4619      	mov	r1, r3
 8016ad2:	6878      	ldr	r0, [r7, #4]
 8016ad4:	f001 fab3 	bl	801803e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016ad8:	e01d      	b.n	8016b16 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016ada:	6839      	ldr	r1, [r7, #0]
 8016adc:	6878      	ldr	r0, [r7, #4]
 8016ade:	f001 fa3d 	bl	8017f5c <USBD_CtlError>
            ret = USBD_FAIL;
 8016ae2:	2303      	movs	r3, #3
 8016ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8016ae6:	e016      	b.n	8016b16 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016aee:	b2db      	uxtb	r3, r3
 8016af0:	2b03      	cmp	r3, #3
 8016af2:	d00f      	beq.n	8016b14 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8016af4:	6839      	ldr	r1, [r7, #0]
 8016af6:	6878      	ldr	r0, [r7, #4]
 8016af8:	f001 fa30 	bl	8017f5c <USBD_CtlError>
            ret = USBD_FAIL;
 8016afc:	2303      	movs	r3, #3
 8016afe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016b00:	e008      	b.n	8016b14 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8016b02:	6839      	ldr	r1, [r7, #0]
 8016b04:	6878      	ldr	r0, [r7, #4]
 8016b06:	f001 fa29 	bl	8017f5c <USBD_CtlError>
          ret = USBD_FAIL;
 8016b0a:	2303      	movs	r3, #3
 8016b0c:	75fb      	strb	r3, [r7, #23]
          break;
 8016b0e:	e002      	b.n	8016b16 <USBD_CDC_Setup+0x176>
          break;
 8016b10:	bf00      	nop
 8016b12:	e008      	b.n	8016b26 <USBD_CDC_Setup+0x186>
          break;
 8016b14:	bf00      	nop
      }
      break;
 8016b16:	e006      	b.n	8016b26 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8016b18:	6839      	ldr	r1, [r7, #0]
 8016b1a:	6878      	ldr	r0, [r7, #4]
 8016b1c:	f001 fa1e 	bl	8017f5c <USBD_CtlError>
      ret = USBD_FAIL;
 8016b20:	2303      	movs	r3, #3
 8016b22:	75fb      	strb	r3, [r7, #23]
      break;
 8016b24:	bf00      	nop
  }

  return (uint8_t)ret;
 8016b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b28:	4618      	mov	r0, r3
 8016b2a:	3718      	adds	r7, #24
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	bd80      	pop	{r7, pc}

08016b30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b084      	sub	sp, #16
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	6078      	str	r0, [r7, #4]
 8016b38:	460b      	mov	r3, r1
 8016b3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d101      	bne.n	8016b52 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016b4e:	2303      	movs	r3, #3
 8016b50:	e04f      	b.n	8016bf2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016b58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8016b5a:	78fa      	ldrb	r2, [r7, #3]
 8016b5c:	6879      	ldr	r1, [r7, #4]
 8016b5e:	4613      	mov	r3, r2
 8016b60:	009b      	lsls	r3, r3, #2
 8016b62:	4413      	add	r3, r2
 8016b64:	009b      	lsls	r3, r3, #2
 8016b66:	440b      	add	r3, r1
 8016b68:	3318      	adds	r3, #24
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d029      	beq.n	8016bc4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8016b70:	78fa      	ldrb	r2, [r7, #3]
 8016b72:	6879      	ldr	r1, [r7, #4]
 8016b74:	4613      	mov	r3, r2
 8016b76:	009b      	lsls	r3, r3, #2
 8016b78:	4413      	add	r3, r2
 8016b7a:	009b      	lsls	r3, r3, #2
 8016b7c:	440b      	add	r3, r1
 8016b7e:	3318      	adds	r3, #24
 8016b80:	681a      	ldr	r2, [r3, #0]
 8016b82:	78f9      	ldrb	r1, [r7, #3]
 8016b84:	68f8      	ldr	r0, [r7, #12]
 8016b86:	460b      	mov	r3, r1
 8016b88:	00db      	lsls	r3, r3, #3
 8016b8a:	440b      	add	r3, r1
 8016b8c:	009b      	lsls	r3, r3, #2
 8016b8e:	4403      	add	r3, r0
 8016b90:	3348      	adds	r3, #72	; 0x48
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	fbb2 f1f3 	udiv	r1, r2, r3
 8016b98:	fb01 f303 	mul.w	r3, r1, r3
 8016b9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d110      	bne.n	8016bc4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8016ba2:	78fa      	ldrb	r2, [r7, #3]
 8016ba4:	6879      	ldr	r1, [r7, #4]
 8016ba6:	4613      	mov	r3, r2
 8016ba8:	009b      	lsls	r3, r3, #2
 8016baa:	4413      	add	r3, r2
 8016bac:	009b      	lsls	r3, r3, #2
 8016bae:	440b      	add	r3, r1
 8016bb0:	3318      	adds	r3, #24
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8016bb6:	78f9      	ldrb	r1, [r7, #3]
 8016bb8:	2300      	movs	r3, #0
 8016bba:	2200      	movs	r2, #0
 8016bbc:	6878      	ldr	r0, [r7, #4]
 8016bbe:	f001 ffd9 	bl	8018b74 <USBD_LL_Transmit>
 8016bc2:	e015      	b.n	8016bf0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8016bc4:	68bb      	ldr	r3, [r7, #8]
 8016bc6:	2200      	movs	r2, #0
 8016bc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016bd2:	691b      	ldr	r3, [r3, #16]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d00b      	beq.n	8016bf0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016bde:	691b      	ldr	r3, [r3, #16]
 8016be0:	68ba      	ldr	r2, [r7, #8]
 8016be2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8016be6:	68ba      	ldr	r2, [r7, #8]
 8016be8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8016bec:	78fa      	ldrb	r2, [r7, #3]
 8016bee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016bf0:	2300      	movs	r3, #0
}
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	3710      	adds	r7, #16
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bd80      	pop	{r7, pc}

08016bfa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016bfa:	b580      	push	{r7, lr}
 8016bfc:	b084      	sub	sp, #16
 8016bfe:	af00      	add	r7, sp, #0
 8016c00:	6078      	str	r0, [r7, #4]
 8016c02:	460b      	mov	r3, r1
 8016c04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016c0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d101      	bne.n	8016c1c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016c18:	2303      	movs	r3, #3
 8016c1a:	e015      	b.n	8016c48 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016c1c:	78fb      	ldrb	r3, [r7, #3]
 8016c1e:	4619      	mov	r1, r3
 8016c20:	6878      	ldr	r0, [r7, #4]
 8016c22:	f002 f817 	bl	8018c54 <USBD_LL_GetRxDataSize>
 8016c26:	4602      	mov	r2, r0
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016c34:	68db      	ldr	r3, [r3, #12]
 8016c36:	68fa      	ldr	r2, [r7, #12]
 8016c38:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8016c3c:	68fa      	ldr	r2, [r7, #12]
 8016c3e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8016c42:	4611      	mov	r1, r2
 8016c44:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8016c46:	2300      	movs	r3, #0
}
 8016c48:	4618      	mov	r0, r3
 8016c4a:	3710      	adds	r7, #16
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}

08016c50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b084      	sub	sp, #16
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016c5e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d101      	bne.n	8016c6a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8016c66:	2303      	movs	r3, #3
 8016c68:	e01b      	b.n	8016ca2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d015      	beq.n	8016ca0 <USBD_CDC_EP0_RxReady+0x50>
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8016c7a:	2bff      	cmp	r3, #255	; 0xff
 8016c7c:	d010      	beq.n	8016ca0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016c84:	689b      	ldr	r3, [r3, #8]
 8016c86:	68fa      	ldr	r2, [r7, #12]
 8016c88:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8016c8c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8016c8e:	68fa      	ldr	r2, [r7, #12]
 8016c90:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016c94:	b292      	uxth	r2, r2
 8016c96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	22ff      	movs	r2, #255	; 0xff
 8016c9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8016ca0:	2300      	movs	r3, #0
}
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	3710      	adds	r7, #16
 8016ca6:	46bd      	mov	sp, r7
 8016ca8:	bd80      	pop	{r7, pc}
	...

08016cac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016cac:	b480      	push	{r7}
 8016cae:	b083      	sub	sp, #12
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	2243      	movs	r2, #67	; 0x43
 8016cb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8016cba:	4b03      	ldr	r3, [pc, #12]	; (8016cc8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	370c      	adds	r7, #12
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc6:	4770      	bx	lr
 8016cc8:	200005e4 	.word	0x200005e4

08016ccc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016ccc:	b480      	push	{r7}
 8016cce:	b083      	sub	sp, #12
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	2243      	movs	r2, #67	; 0x43
 8016cd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8016cda:	4b03      	ldr	r3, [pc, #12]	; (8016ce8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8016cdc:	4618      	mov	r0, r3
 8016cde:	370c      	adds	r7, #12
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce6:	4770      	bx	lr
 8016ce8:	200005a0 	.word	0x200005a0

08016cec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016cec:	b480      	push	{r7}
 8016cee:	b083      	sub	sp, #12
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	2243      	movs	r2, #67	; 0x43
 8016cf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8016cfa:	4b03      	ldr	r3, [pc, #12]	; (8016d08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	370c      	adds	r7, #12
 8016d00:	46bd      	mov	sp, r7
 8016d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d06:	4770      	bx	lr
 8016d08:	20000628 	.word	0x20000628

08016d0c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016d0c:	b480      	push	{r7}
 8016d0e:	b083      	sub	sp, #12
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	220a      	movs	r2, #10
 8016d18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016d1a:	4b03      	ldr	r3, [pc, #12]	; (8016d28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	370c      	adds	r7, #12
 8016d20:	46bd      	mov	sp, r7
 8016d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d26:	4770      	bx	lr
 8016d28:	2000055c 	.word	0x2000055c

08016d2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016d2c:	b480      	push	{r7}
 8016d2e:	b083      	sub	sp, #12
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
 8016d34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8016d36:	683b      	ldr	r3, [r7, #0]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d101      	bne.n	8016d40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016d3c:	2303      	movs	r3, #3
 8016d3e:	e004      	b.n	8016d4a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	683a      	ldr	r2, [r7, #0]
 8016d44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8016d48:	2300      	movs	r3, #0
}
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	370c      	adds	r7, #12
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d54:	4770      	bx	lr

08016d56 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8016d56:	b480      	push	{r7}
 8016d58:	b087      	sub	sp, #28
 8016d5a:	af00      	add	r7, sp, #0
 8016d5c:	60f8      	str	r0, [r7, #12]
 8016d5e:	60b9      	str	r1, [r7, #8]
 8016d60:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016d68:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8016d6a:	697b      	ldr	r3, [r7, #20]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d101      	bne.n	8016d74 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016d70:	2303      	movs	r3, #3
 8016d72:	e008      	b.n	8016d86 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8016d74:	697b      	ldr	r3, [r7, #20]
 8016d76:	68ba      	ldr	r2, [r7, #8]
 8016d78:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8016d7c:	697b      	ldr	r3, [r7, #20]
 8016d7e:	687a      	ldr	r2, [r7, #4]
 8016d80:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8016d84:	2300      	movs	r3, #0
}
 8016d86:	4618      	mov	r0, r3
 8016d88:	371c      	adds	r7, #28
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d90:	4770      	bx	lr

08016d92 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8016d92:	b480      	push	{r7}
 8016d94:	b085      	sub	sp, #20
 8016d96:	af00      	add	r7, sp, #0
 8016d98:	6078      	str	r0, [r7, #4]
 8016d9a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016da2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d101      	bne.n	8016dae <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8016daa:	2303      	movs	r3, #3
 8016dac:	e004      	b.n	8016db8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	683a      	ldr	r2, [r7, #0]
 8016db2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8016db6:	2300      	movs	r3, #0
}
 8016db8:	4618      	mov	r0, r3
 8016dba:	3714      	adds	r7, #20
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc2:	4770      	bx	lr

08016dc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b084      	sub	sp, #16
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016dd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d101      	bne.n	8016de2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016dde:	2303      	movs	r3, #3
 8016de0:	e016      	b.n	8016e10 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	7c1b      	ldrb	r3, [r3, #16]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d109      	bne.n	8016dfe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016df4:	2101      	movs	r1, #1
 8016df6:	6878      	ldr	r0, [r7, #4]
 8016df8:	f001 fef4 	bl	8018be4 <USBD_LL_PrepareReceive>
 8016dfc:	e007      	b.n	8016e0e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016e04:	2340      	movs	r3, #64	; 0x40
 8016e06:	2101      	movs	r1, #1
 8016e08:	6878      	ldr	r0, [r7, #4]
 8016e0a:	f001 feeb 	bl	8018be4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016e0e:	2300      	movs	r3, #0
}
 8016e10:	4618      	mov	r0, r3
 8016e12:	3710      	adds	r7, #16
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}

08016e18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b086      	sub	sp, #24
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	60f8      	str	r0, [r7, #12]
 8016e20:	60b9      	str	r1, [r7, #8]
 8016e22:	4613      	mov	r3, r2
 8016e24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d101      	bne.n	8016e30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8016e2c:	2303      	movs	r3, #3
 8016e2e:	e01f      	b.n	8016e70 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	2200      	movs	r2, #0
 8016e34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	2200      	movs	r2, #0
 8016e44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016e48:	68bb      	ldr	r3, [r7, #8]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d003      	beq.n	8016e56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	68ba      	ldr	r2, [r7, #8]
 8016e52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	2201      	movs	r2, #1
 8016e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	79fa      	ldrb	r2, [r7, #7]
 8016e62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016e64:	68f8      	ldr	r0, [r7, #12]
 8016e66:	f001 fcc5 	bl	80187f4 <USBD_LL_Init>
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8016e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e70:	4618      	mov	r0, r3
 8016e72:	3718      	adds	r7, #24
 8016e74:	46bd      	mov	sp, r7
 8016e76:	bd80      	pop	{r7, pc}

08016e78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b084      	sub	sp, #16
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
 8016e80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016e82:	2300      	movs	r3, #0
 8016e84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016e86:	683b      	ldr	r3, [r7, #0]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d101      	bne.n	8016e90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8016e8c:	2303      	movs	r3, #3
 8016e8e:	e016      	b.n	8016ebe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	683a      	ldr	r2, [r7, #0]
 8016e94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d00b      	beq.n	8016ebc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016eac:	f107 020e 	add.w	r2, r7, #14
 8016eb0:	4610      	mov	r0, r2
 8016eb2:	4798      	blx	r3
 8016eb4:	4602      	mov	r2, r0
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8016ebc:	2300      	movs	r3, #0
}
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	3710      	adds	r7, #16
 8016ec2:	46bd      	mov	sp, r7
 8016ec4:	bd80      	pop	{r7, pc}

08016ec6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016ec6:	b580      	push	{r7, lr}
 8016ec8:	b082      	sub	sp, #8
 8016eca:	af00      	add	r7, sp, #0
 8016ecc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016ece:	6878      	ldr	r0, [r7, #4]
 8016ed0:	f001 fcdc 	bl	801888c <USBD_LL_Start>
 8016ed4:	4603      	mov	r3, r0
}
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	3708      	adds	r7, #8
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd80      	pop	{r7, pc}

08016ede <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8016ede:	b480      	push	{r7}
 8016ee0:	b083      	sub	sp, #12
 8016ee2:	af00      	add	r7, sp, #0
 8016ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016ee6:	2300      	movs	r3, #0
}
 8016ee8:	4618      	mov	r0, r3
 8016eea:	370c      	adds	r7, #12
 8016eec:	46bd      	mov	sp, r7
 8016eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef2:	4770      	bx	lr

08016ef4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016ef4:	b580      	push	{r7, lr}
 8016ef6:	b084      	sub	sp, #16
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	6078      	str	r0, [r7, #4]
 8016efc:	460b      	mov	r3, r1
 8016efe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8016f00:	2303      	movs	r3, #3
 8016f02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d009      	beq.n	8016f22 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	78fa      	ldrb	r2, [r7, #3]
 8016f18:	4611      	mov	r1, r2
 8016f1a:	6878      	ldr	r0, [r7, #4]
 8016f1c:	4798      	blx	r3
 8016f1e:	4603      	mov	r3, r0
 8016f20:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8016f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f24:	4618      	mov	r0, r3
 8016f26:	3710      	adds	r7, #16
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}

08016f2c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b082      	sub	sp, #8
 8016f30:	af00      	add	r7, sp, #0
 8016f32:	6078      	str	r0, [r7, #4]
 8016f34:	460b      	mov	r3, r1
 8016f36:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d007      	beq.n	8016f52 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f48:	685b      	ldr	r3, [r3, #4]
 8016f4a:	78fa      	ldrb	r2, [r7, #3]
 8016f4c:	4611      	mov	r1, r2
 8016f4e:	6878      	ldr	r0, [r7, #4]
 8016f50:	4798      	blx	r3
  }

  return USBD_OK;
 8016f52:	2300      	movs	r3, #0
}
 8016f54:	4618      	mov	r0, r3
 8016f56:	3708      	adds	r7, #8
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	bd80      	pop	{r7, pc}

08016f5c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b084      	sub	sp, #16
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]
 8016f64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016f6c:	6839      	ldr	r1, [r7, #0]
 8016f6e:	4618      	mov	r0, r3
 8016f70:	f000 ffba 	bl	8017ee8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	2201      	movs	r2, #1
 8016f78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8016f82:	461a      	mov	r2, r3
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016f90:	f003 031f 	and.w	r3, r3, #31
 8016f94:	2b02      	cmp	r3, #2
 8016f96:	d01a      	beq.n	8016fce <USBD_LL_SetupStage+0x72>
 8016f98:	2b02      	cmp	r3, #2
 8016f9a:	d822      	bhi.n	8016fe2 <USBD_LL_SetupStage+0x86>
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d002      	beq.n	8016fa6 <USBD_LL_SetupStage+0x4a>
 8016fa0:	2b01      	cmp	r3, #1
 8016fa2:	d00a      	beq.n	8016fba <USBD_LL_SetupStage+0x5e>
 8016fa4:	e01d      	b.n	8016fe2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016fac:	4619      	mov	r1, r3
 8016fae:	6878      	ldr	r0, [r7, #4]
 8016fb0:	f000 fa62 	bl	8017478 <USBD_StdDevReq>
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8016fb8:	e020      	b.n	8016ffc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016fc0:	4619      	mov	r1, r3
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	f000 fac6 	bl	8017554 <USBD_StdItfReq>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	73fb      	strb	r3, [r7, #15]
      break;
 8016fcc:	e016      	b.n	8016ffc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016fd4:	4619      	mov	r1, r3
 8016fd6:	6878      	ldr	r0, [r7, #4]
 8016fd8:	f000 fb05 	bl	80175e6 <USBD_StdEPReq>
 8016fdc:	4603      	mov	r3, r0
 8016fde:	73fb      	strb	r3, [r7, #15]
      break;
 8016fe0:	e00c      	b.n	8016ffc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016fe8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016fec:	b2db      	uxtb	r3, r3
 8016fee:	4619      	mov	r1, r3
 8016ff0:	6878      	ldr	r0, [r7, #4]
 8016ff2:	f001 fcf1 	bl	80189d8 <USBD_LL_StallEP>
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8016ffa:	bf00      	nop
  }

  return ret;
 8016ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ffe:	4618      	mov	r0, r3
 8017000:	3710      	adds	r7, #16
 8017002:	46bd      	mov	sp, r7
 8017004:	bd80      	pop	{r7, pc}

08017006 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017006:	b580      	push	{r7, lr}
 8017008:	b086      	sub	sp, #24
 801700a:	af00      	add	r7, sp, #0
 801700c:	60f8      	str	r0, [r7, #12]
 801700e:	460b      	mov	r3, r1
 8017010:	607a      	str	r2, [r7, #4]
 8017012:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8017014:	7afb      	ldrb	r3, [r7, #11]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d138      	bne.n	801708c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8017020:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017028:	2b03      	cmp	r3, #3
 801702a:	d14a      	bne.n	80170c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801702c:	693b      	ldr	r3, [r7, #16]
 801702e:	689a      	ldr	r2, [r3, #8]
 8017030:	693b      	ldr	r3, [r7, #16]
 8017032:	68db      	ldr	r3, [r3, #12]
 8017034:	429a      	cmp	r2, r3
 8017036:	d913      	bls.n	8017060 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017038:	693b      	ldr	r3, [r7, #16]
 801703a:	689a      	ldr	r2, [r3, #8]
 801703c:	693b      	ldr	r3, [r7, #16]
 801703e:	68db      	ldr	r3, [r3, #12]
 8017040:	1ad2      	subs	r2, r2, r3
 8017042:	693b      	ldr	r3, [r7, #16]
 8017044:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017046:	693b      	ldr	r3, [r7, #16]
 8017048:	68da      	ldr	r2, [r3, #12]
 801704a:	693b      	ldr	r3, [r7, #16]
 801704c:	689b      	ldr	r3, [r3, #8]
 801704e:	4293      	cmp	r3, r2
 8017050:	bf28      	it	cs
 8017052:	4613      	movcs	r3, r2
 8017054:	461a      	mov	r2, r3
 8017056:	6879      	ldr	r1, [r7, #4]
 8017058:	68f8      	ldr	r0, [r7, #12]
 801705a:	f001 f839 	bl	80180d0 <USBD_CtlContinueRx>
 801705e:	e030      	b.n	80170c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017066:	b2db      	uxtb	r3, r3
 8017068:	2b03      	cmp	r3, #3
 801706a:	d10b      	bne.n	8017084 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017072:	691b      	ldr	r3, [r3, #16]
 8017074:	2b00      	cmp	r3, #0
 8017076:	d005      	beq.n	8017084 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801707e:	691b      	ldr	r3, [r3, #16]
 8017080:	68f8      	ldr	r0, [r7, #12]
 8017082:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8017084:	68f8      	ldr	r0, [r7, #12]
 8017086:	f001 f834 	bl	80180f2 <USBD_CtlSendStatus>
 801708a:	e01a      	b.n	80170c2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017092:	b2db      	uxtb	r3, r3
 8017094:	2b03      	cmp	r3, #3
 8017096:	d114      	bne.n	80170c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801709e:	699b      	ldr	r3, [r3, #24]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d00e      	beq.n	80170c2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170aa:	699b      	ldr	r3, [r3, #24]
 80170ac:	7afa      	ldrb	r2, [r7, #11]
 80170ae:	4611      	mov	r1, r2
 80170b0:	68f8      	ldr	r0, [r7, #12]
 80170b2:	4798      	blx	r3
 80170b4:	4603      	mov	r3, r0
 80170b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80170b8:	7dfb      	ldrb	r3, [r7, #23]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d001      	beq.n	80170c2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80170be:	7dfb      	ldrb	r3, [r7, #23]
 80170c0:	e000      	b.n	80170c4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80170c2:	2300      	movs	r3, #0
}
 80170c4:	4618      	mov	r0, r3
 80170c6:	3718      	adds	r7, #24
 80170c8:	46bd      	mov	sp, r7
 80170ca:	bd80      	pop	{r7, pc}

080170cc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b086      	sub	sp, #24
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	60f8      	str	r0, [r7, #12]
 80170d4:	460b      	mov	r3, r1
 80170d6:	607a      	str	r2, [r7, #4]
 80170d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80170da:	7afb      	ldrb	r3, [r7, #11]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d16b      	bne.n	80171b8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	3314      	adds	r3, #20
 80170e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80170ec:	2b02      	cmp	r3, #2
 80170ee:	d156      	bne.n	801719e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80170f0:	693b      	ldr	r3, [r7, #16]
 80170f2:	689a      	ldr	r2, [r3, #8]
 80170f4:	693b      	ldr	r3, [r7, #16]
 80170f6:	68db      	ldr	r3, [r3, #12]
 80170f8:	429a      	cmp	r2, r3
 80170fa:	d914      	bls.n	8017126 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80170fc:	693b      	ldr	r3, [r7, #16]
 80170fe:	689a      	ldr	r2, [r3, #8]
 8017100:	693b      	ldr	r3, [r7, #16]
 8017102:	68db      	ldr	r3, [r3, #12]
 8017104:	1ad2      	subs	r2, r2, r3
 8017106:	693b      	ldr	r3, [r7, #16]
 8017108:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801710a:	693b      	ldr	r3, [r7, #16]
 801710c:	689b      	ldr	r3, [r3, #8]
 801710e:	461a      	mov	r2, r3
 8017110:	6879      	ldr	r1, [r7, #4]
 8017112:	68f8      	ldr	r0, [r7, #12]
 8017114:	f000 ffae 	bl	8018074 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017118:	2300      	movs	r3, #0
 801711a:	2200      	movs	r2, #0
 801711c:	2100      	movs	r1, #0
 801711e:	68f8      	ldr	r0, [r7, #12]
 8017120:	f001 fd60 	bl	8018be4 <USBD_LL_PrepareReceive>
 8017124:	e03b      	b.n	801719e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017126:	693b      	ldr	r3, [r7, #16]
 8017128:	68da      	ldr	r2, [r3, #12]
 801712a:	693b      	ldr	r3, [r7, #16]
 801712c:	689b      	ldr	r3, [r3, #8]
 801712e:	429a      	cmp	r2, r3
 8017130:	d11c      	bne.n	801716c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017132:	693b      	ldr	r3, [r7, #16]
 8017134:	685a      	ldr	r2, [r3, #4]
 8017136:	693b      	ldr	r3, [r7, #16]
 8017138:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801713a:	429a      	cmp	r2, r3
 801713c:	d316      	bcc.n	801716c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801713e:	693b      	ldr	r3, [r7, #16]
 8017140:	685a      	ldr	r2, [r3, #4]
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017148:	429a      	cmp	r2, r3
 801714a:	d20f      	bcs.n	801716c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801714c:	2200      	movs	r2, #0
 801714e:	2100      	movs	r1, #0
 8017150:	68f8      	ldr	r0, [r7, #12]
 8017152:	f000 ff8f 	bl	8018074 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	2200      	movs	r2, #0
 801715a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801715e:	2300      	movs	r3, #0
 8017160:	2200      	movs	r2, #0
 8017162:	2100      	movs	r1, #0
 8017164:	68f8      	ldr	r0, [r7, #12]
 8017166:	f001 fd3d 	bl	8018be4 <USBD_LL_PrepareReceive>
 801716a:	e018      	b.n	801719e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017172:	b2db      	uxtb	r3, r3
 8017174:	2b03      	cmp	r3, #3
 8017176:	d10b      	bne.n	8017190 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801717e:	68db      	ldr	r3, [r3, #12]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d005      	beq.n	8017190 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801718a:	68db      	ldr	r3, [r3, #12]
 801718c:	68f8      	ldr	r0, [r7, #12]
 801718e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017190:	2180      	movs	r1, #128	; 0x80
 8017192:	68f8      	ldr	r0, [r7, #12]
 8017194:	f001 fc20 	bl	80189d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8017198:	68f8      	ldr	r0, [r7, #12]
 801719a:	f000 ffbd 	bl	8018118 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80171a4:	2b01      	cmp	r3, #1
 80171a6:	d122      	bne.n	80171ee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80171a8:	68f8      	ldr	r0, [r7, #12]
 80171aa:	f7ff fe98 	bl	8016ede <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	2200      	movs	r2, #0
 80171b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80171b6:	e01a      	b.n	80171ee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80171be:	b2db      	uxtb	r3, r3
 80171c0:	2b03      	cmp	r3, #3
 80171c2:	d114      	bne.n	80171ee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80171ca:	695b      	ldr	r3, [r3, #20]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d00e      	beq.n	80171ee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80171d6:	695b      	ldr	r3, [r3, #20]
 80171d8:	7afa      	ldrb	r2, [r7, #11]
 80171da:	4611      	mov	r1, r2
 80171dc:	68f8      	ldr	r0, [r7, #12]
 80171de:	4798      	blx	r3
 80171e0:	4603      	mov	r3, r0
 80171e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80171e4:	7dfb      	ldrb	r3, [r7, #23]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d001      	beq.n	80171ee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80171ea:	7dfb      	ldrb	r3, [r7, #23]
 80171ec:	e000      	b.n	80171f0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80171ee:	2300      	movs	r3, #0
}
 80171f0:	4618      	mov	r0, r3
 80171f2:	3718      	adds	r7, #24
 80171f4:	46bd      	mov	sp, r7
 80171f6:	bd80      	pop	{r7, pc}

080171f8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80171f8:	b580      	push	{r7, lr}
 80171fa:	b082      	sub	sp, #8
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	2201      	movs	r2, #1
 8017204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	2200      	movs	r2, #0
 801720c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	2200      	movs	r2, #0
 8017214:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	2200      	movs	r2, #0
 801721a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017224:	2b00      	cmp	r3, #0
 8017226:	d101      	bne.n	801722c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8017228:	2303      	movs	r3, #3
 801722a:	e02f      	b.n	801728c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017232:	2b00      	cmp	r3, #0
 8017234:	d00f      	beq.n	8017256 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801723c:	685b      	ldr	r3, [r3, #4]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d009      	beq.n	8017256 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017248:	685b      	ldr	r3, [r3, #4]
 801724a:	687a      	ldr	r2, [r7, #4]
 801724c:	6852      	ldr	r2, [r2, #4]
 801724e:	b2d2      	uxtb	r2, r2
 8017250:	4611      	mov	r1, r2
 8017252:	6878      	ldr	r0, [r7, #4]
 8017254:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017256:	2340      	movs	r3, #64	; 0x40
 8017258:	2200      	movs	r2, #0
 801725a:	2100      	movs	r1, #0
 801725c:	6878      	ldr	r0, [r7, #4]
 801725e:	f001 fb47 	bl	80188f0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	2201      	movs	r2, #1
 8017266:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	2240      	movs	r2, #64	; 0x40
 801726e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017272:	2340      	movs	r3, #64	; 0x40
 8017274:	2200      	movs	r2, #0
 8017276:	2180      	movs	r1, #128	; 0x80
 8017278:	6878      	ldr	r0, [r7, #4]
 801727a:	f001 fb39 	bl	80188f0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	2201      	movs	r2, #1
 8017282:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	2240      	movs	r2, #64	; 0x40
 8017288:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801728a:	2300      	movs	r3, #0
}
 801728c:	4618      	mov	r0, r3
 801728e:	3708      	adds	r7, #8
 8017290:	46bd      	mov	sp, r7
 8017292:	bd80      	pop	{r7, pc}

08017294 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8017294:	b480      	push	{r7}
 8017296:	b083      	sub	sp, #12
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
 801729c:	460b      	mov	r3, r1
 801729e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	78fa      	ldrb	r2, [r7, #3]
 80172a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80172a6:	2300      	movs	r3, #0
}
 80172a8:	4618      	mov	r0, r3
 80172aa:	370c      	adds	r7, #12
 80172ac:	46bd      	mov	sp, r7
 80172ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b2:	4770      	bx	lr

080172b4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80172b4:	b480      	push	{r7}
 80172b6:	b083      	sub	sp, #12
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80172c2:	b2da      	uxtb	r2, r3
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	2204      	movs	r2, #4
 80172ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80172d2:	2300      	movs	r3, #0
}
 80172d4:	4618      	mov	r0, r3
 80172d6:	370c      	adds	r7, #12
 80172d8:	46bd      	mov	sp, r7
 80172da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172de:	4770      	bx	lr

080172e0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80172e0:	b480      	push	{r7}
 80172e2:	b083      	sub	sp, #12
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80172ee:	b2db      	uxtb	r3, r3
 80172f0:	2b04      	cmp	r3, #4
 80172f2:	d106      	bne.n	8017302 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80172fa:	b2da      	uxtb	r2, r3
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8017302:	2300      	movs	r3, #0
}
 8017304:	4618      	mov	r0, r3
 8017306:	370c      	adds	r7, #12
 8017308:	46bd      	mov	sp, r7
 801730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801730e:	4770      	bx	lr

08017310 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b082      	sub	sp, #8
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801731e:	2b00      	cmp	r3, #0
 8017320:	d101      	bne.n	8017326 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8017322:	2303      	movs	r3, #3
 8017324:	e012      	b.n	801734c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801732c:	b2db      	uxtb	r3, r3
 801732e:	2b03      	cmp	r3, #3
 8017330:	d10b      	bne.n	801734a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017338:	69db      	ldr	r3, [r3, #28]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d005      	beq.n	801734a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017344:	69db      	ldr	r3, [r3, #28]
 8017346:	6878      	ldr	r0, [r7, #4]
 8017348:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801734a:	2300      	movs	r3, #0
}
 801734c:	4618      	mov	r0, r3
 801734e:	3708      	adds	r7, #8
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}

08017354 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b082      	sub	sp, #8
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
 801735c:	460b      	mov	r3, r1
 801735e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017366:	2b00      	cmp	r3, #0
 8017368:	d101      	bne.n	801736e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801736a:	2303      	movs	r3, #3
 801736c:	e014      	b.n	8017398 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017374:	b2db      	uxtb	r3, r3
 8017376:	2b03      	cmp	r3, #3
 8017378:	d10d      	bne.n	8017396 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017380:	6a1b      	ldr	r3, [r3, #32]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d007      	beq.n	8017396 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801738c:	6a1b      	ldr	r3, [r3, #32]
 801738e:	78fa      	ldrb	r2, [r7, #3]
 8017390:	4611      	mov	r1, r2
 8017392:	6878      	ldr	r0, [r7, #4]
 8017394:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017396:	2300      	movs	r3, #0
}
 8017398:	4618      	mov	r0, r3
 801739a:	3708      	adds	r7, #8
 801739c:	46bd      	mov	sp, r7
 801739e:	bd80      	pop	{r7, pc}

080173a0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b082      	sub	sp, #8
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
 80173a8:	460b      	mov	r3, r1
 80173aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d101      	bne.n	80173ba <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80173b6:	2303      	movs	r3, #3
 80173b8:	e014      	b.n	80173e4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80173c0:	b2db      	uxtb	r3, r3
 80173c2:	2b03      	cmp	r3, #3
 80173c4:	d10d      	bne.n	80173e2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80173cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d007      	beq.n	80173e2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80173d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173da:	78fa      	ldrb	r2, [r7, #3]
 80173dc:	4611      	mov	r1, r2
 80173de:	6878      	ldr	r0, [r7, #4]
 80173e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80173e2:	2300      	movs	r3, #0
}
 80173e4:	4618      	mov	r0, r3
 80173e6:	3708      	adds	r7, #8
 80173e8:	46bd      	mov	sp, r7
 80173ea:	bd80      	pop	{r7, pc}

080173ec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80173ec:	b480      	push	{r7}
 80173ee:	b083      	sub	sp, #12
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80173f4:	2300      	movs	r3, #0
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	370c      	adds	r7, #12
 80173fa:	46bd      	mov	sp, r7
 80173fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017400:	4770      	bx	lr

08017402 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8017402:	b580      	push	{r7, lr}
 8017404:	b082      	sub	sp, #8
 8017406:	af00      	add	r7, sp, #0
 8017408:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	2201      	movs	r2, #1
 801740e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017418:	2b00      	cmp	r3, #0
 801741a:	d009      	beq.n	8017430 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017422:	685b      	ldr	r3, [r3, #4]
 8017424:	687a      	ldr	r2, [r7, #4]
 8017426:	6852      	ldr	r2, [r2, #4]
 8017428:	b2d2      	uxtb	r2, r2
 801742a:	4611      	mov	r1, r2
 801742c:	6878      	ldr	r0, [r7, #4]
 801742e:	4798      	blx	r3
  }

  return USBD_OK;
 8017430:	2300      	movs	r3, #0
}
 8017432:	4618      	mov	r0, r3
 8017434:	3708      	adds	r7, #8
 8017436:	46bd      	mov	sp, r7
 8017438:	bd80      	pop	{r7, pc}

0801743a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801743a:	b480      	push	{r7}
 801743c:	b087      	sub	sp, #28
 801743e:	af00      	add	r7, sp, #0
 8017440:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8017446:	697b      	ldr	r3, [r7, #20]
 8017448:	781b      	ldrb	r3, [r3, #0]
 801744a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801744c:	697b      	ldr	r3, [r7, #20]
 801744e:	3301      	adds	r3, #1
 8017450:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8017452:	697b      	ldr	r3, [r7, #20]
 8017454:	781b      	ldrb	r3, [r3, #0]
 8017456:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8017458:	8a3b      	ldrh	r3, [r7, #16]
 801745a:	021b      	lsls	r3, r3, #8
 801745c:	b21a      	sxth	r2, r3
 801745e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017462:	4313      	orrs	r3, r2
 8017464:	b21b      	sxth	r3, r3
 8017466:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8017468:	89fb      	ldrh	r3, [r7, #14]
}
 801746a:	4618      	mov	r0, r3
 801746c:	371c      	adds	r7, #28
 801746e:	46bd      	mov	sp, r7
 8017470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017474:	4770      	bx	lr
	...

08017478 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017478:	b580      	push	{r7, lr}
 801747a:	b084      	sub	sp, #16
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
 8017480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017482:	2300      	movs	r3, #0
 8017484:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017486:	683b      	ldr	r3, [r7, #0]
 8017488:	781b      	ldrb	r3, [r3, #0]
 801748a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801748e:	2b40      	cmp	r3, #64	; 0x40
 8017490:	d005      	beq.n	801749e <USBD_StdDevReq+0x26>
 8017492:	2b40      	cmp	r3, #64	; 0x40
 8017494:	d853      	bhi.n	801753e <USBD_StdDevReq+0xc6>
 8017496:	2b00      	cmp	r3, #0
 8017498:	d00b      	beq.n	80174b2 <USBD_StdDevReq+0x3a>
 801749a:	2b20      	cmp	r3, #32
 801749c:	d14f      	bne.n	801753e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80174a4:	689b      	ldr	r3, [r3, #8]
 80174a6:	6839      	ldr	r1, [r7, #0]
 80174a8:	6878      	ldr	r0, [r7, #4]
 80174aa:	4798      	blx	r3
 80174ac:	4603      	mov	r3, r0
 80174ae:	73fb      	strb	r3, [r7, #15]
      break;
 80174b0:	e04a      	b.n	8017548 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80174b2:	683b      	ldr	r3, [r7, #0]
 80174b4:	785b      	ldrb	r3, [r3, #1]
 80174b6:	2b09      	cmp	r3, #9
 80174b8:	d83b      	bhi.n	8017532 <USBD_StdDevReq+0xba>
 80174ba:	a201      	add	r2, pc, #4	; (adr r2, 80174c0 <USBD_StdDevReq+0x48>)
 80174bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174c0:	08017515 	.word	0x08017515
 80174c4:	08017529 	.word	0x08017529
 80174c8:	08017533 	.word	0x08017533
 80174cc:	0801751f 	.word	0x0801751f
 80174d0:	08017533 	.word	0x08017533
 80174d4:	080174f3 	.word	0x080174f3
 80174d8:	080174e9 	.word	0x080174e9
 80174dc:	08017533 	.word	0x08017533
 80174e0:	0801750b 	.word	0x0801750b
 80174e4:	080174fd 	.word	0x080174fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80174e8:	6839      	ldr	r1, [r7, #0]
 80174ea:	6878      	ldr	r0, [r7, #4]
 80174ec:	f000 f9de 	bl	80178ac <USBD_GetDescriptor>
          break;
 80174f0:	e024      	b.n	801753c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80174f2:	6839      	ldr	r1, [r7, #0]
 80174f4:	6878      	ldr	r0, [r7, #4]
 80174f6:	f000 fb6d 	bl	8017bd4 <USBD_SetAddress>
          break;
 80174fa:	e01f      	b.n	801753c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80174fc:	6839      	ldr	r1, [r7, #0]
 80174fe:	6878      	ldr	r0, [r7, #4]
 8017500:	f000 fbac 	bl	8017c5c <USBD_SetConfig>
 8017504:	4603      	mov	r3, r0
 8017506:	73fb      	strb	r3, [r7, #15]
          break;
 8017508:	e018      	b.n	801753c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801750a:	6839      	ldr	r1, [r7, #0]
 801750c:	6878      	ldr	r0, [r7, #4]
 801750e:	f000 fc4b 	bl	8017da8 <USBD_GetConfig>
          break;
 8017512:	e013      	b.n	801753c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017514:	6839      	ldr	r1, [r7, #0]
 8017516:	6878      	ldr	r0, [r7, #4]
 8017518:	f000 fc7c 	bl	8017e14 <USBD_GetStatus>
          break;
 801751c:	e00e      	b.n	801753c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801751e:	6839      	ldr	r1, [r7, #0]
 8017520:	6878      	ldr	r0, [r7, #4]
 8017522:	f000 fcab 	bl	8017e7c <USBD_SetFeature>
          break;
 8017526:	e009      	b.n	801753c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8017528:	6839      	ldr	r1, [r7, #0]
 801752a:	6878      	ldr	r0, [r7, #4]
 801752c:	f000 fcba 	bl	8017ea4 <USBD_ClrFeature>
          break;
 8017530:	e004      	b.n	801753c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8017532:	6839      	ldr	r1, [r7, #0]
 8017534:	6878      	ldr	r0, [r7, #4]
 8017536:	f000 fd11 	bl	8017f5c <USBD_CtlError>
          break;
 801753a:	bf00      	nop
      }
      break;
 801753c:	e004      	b.n	8017548 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801753e:	6839      	ldr	r1, [r7, #0]
 8017540:	6878      	ldr	r0, [r7, #4]
 8017542:	f000 fd0b 	bl	8017f5c <USBD_CtlError>
      break;
 8017546:	bf00      	nop
  }

  return ret;
 8017548:	7bfb      	ldrb	r3, [r7, #15]
}
 801754a:	4618      	mov	r0, r3
 801754c:	3710      	adds	r7, #16
 801754e:	46bd      	mov	sp, r7
 8017550:	bd80      	pop	{r7, pc}
 8017552:	bf00      	nop

08017554 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b084      	sub	sp, #16
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
 801755c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801755e:	2300      	movs	r3, #0
 8017560:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017562:	683b      	ldr	r3, [r7, #0]
 8017564:	781b      	ldrb	r3, [r3, #0]
 8017566:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801756a:	2b40      	cmp	r3, #64	; 0x40
 801756c:	d005      	beq.n	801757a <USBD_StdItfReq+0x26>
 801756e:	2b40      	cmp	r3, #64	; 0x40
 8017570:	d82f      	bhi.n	80175d2 <USBD_StdItfReq+0x7e>
 8017572:	2b00      	cmp	r3, #0
 8017574:	d001      	beq.n	801757a <USBD_StdItfReq+0x26>
 8017576:	2b20      	cmp	r3, #32
 8017578:	d12b      	bne.n	80175d2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017580:	b2db      	uxtb	r3, r3
 8017582:	3b01      	subs	r3, #1
 8017584:	2b02      	cmp	r3, #2
 8017586:	d81d      	bhi.n	80175c4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8017588:	683b      	ldr	r3, [r7, #0]
 801758a:	889b      	ldrh	r3, [r3, #4]
 801758c:	b2db      	uxtb	r3, r3
 801758e:	2b01      	cmp	r3, #1
 8017590:	d813      	bhi.n	80175ba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017598:	689b      	ldr	r3, [r3, #8]
 801759a:	6839      	ldr	r1, [r7, #0]
 801759c:	6878      	ldr	r0, [r7, #4]
 801759e:	4798      	blx	r3
 80175a0:	4603      	mov	r3, r0
 80175a2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80175a4:	683b      	ldr	r3, [r7, #0]
 80175a6:	88db      	ldrh	r3, [r3, #6]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d110      	bne.n	80175ce <USBD_StdItfReq+0x7a>
 80175ac:	7bfb      	ldrb	r3, [r7, #15]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d10d      	bne.n	80175ce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80175b2:	6878      	ldr	r0, [r7, #4]
 80175b4:	f000 fd9d 	bl	80180f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80175b8:	e009      	b.n	80175ce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80175ba:	6839      	ldr	r1, [r7, #0]
 80175bc:	6878      	ldr	r0, [r7, #4]
 80175be:	f000 fccd 	bl	8017f5c <USBD_CtlError>
          break;
 80175c2:	e004      	b.n	80175ce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80175c4:	6839      	ldr	r1, [r7, #0]
 80175c6:	6878      	ldr	r0, [r7, #4]
 80175c8:	f000 fcc8 	bl	8017f5c <USBD_CtlError>
          break;
 80175cc:	e000      	b.n	80175d0 <USBD_StdItfReq+0x7c>
          break;
 80175ce:	bf00      	nop
      }
      break;
 80175d0:	e004      	b.n	80175dc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80175d2:	6839      	ldr	r1, [r7, #0]
 80175d4:	6878      	ldr	r0, [r7, #4]
 80175d6:	f000 fcc1 	bl	8017f5c <USBD_CtlError>
      break;
 80175da:	bf00      	nop
  }

  return ret;
 80175dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80175de:	4618      	mov	r0, r3
 80175e0:	3710      	adds	r7, #16
 80175e2:	46bd      	mov	sp, r7
 80175e4:	bd80      	pop	{r7, pc}

080175e6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80175e6:	b580      	push	{r7, lr}
 80175e8:	b084      	sub	sp, #16
 80175ea:	af00      	add	r7, sp, #0
 80175ec:	6078      	str	r0, [r7, #4]
 80175ee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80175f0:	2300      	movs	r3, #0
 80175f2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80175f4:	683b      	ldr	r3, [r7, #0]
 80175f6:	889b      	ldrh	r3, [r3, #4]
 80175f8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80175fa:	683b      	ldr	r3, [r7, #0]
 80175fc:	781b      	ldrb	r3, [r3, #0]
 80175fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017602:	2b40      	cmp	r3, #64	; 0x40
 8017604:	d007      	beq.n	8017616 <USBD_StdEPReq+0x30>
 8017606:	2b40      	cmp	r3, #64	; 0x40
 8017608:	f200 8145 	bhi.w	8017896 <USBD_StdEPReq+0x2b0>
 801760c:	2b00      	cmp	r3, #0
 801760e:	d00c      	beq.n	801762a <USBD_StdEPReq+0x44>
 8017610:	2b20      	cmp	r3, #32
 8017612:	f040 8140 	bne.w	8017896 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801761c:	689b      	ldr	r3, [r3, #8]
 801761e:	6839      	ldr	r1, [r7, #0]
 8017620:	6878      	ldr	r0, [r7, #4]
 8017622:	4798      	blx	r3
 8017624:	4603      	mov	r3, r0
 8017626:	73fb      	strb	r3, [r7, #15]
      break;
 8017628:	e13a      	b.n	80178a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801762a:	683b      	ldr	r3, [r7, #0]
 801762c:	785b      	ldrb	r3, [r3, #1]
 801762e:	2b03      	cmp	r3, #3
 8017630:	d007      	beq.n	8017642 <USBD_StdEPReq+0x5c>
 8017632:	2b03      	cmp	r3, #3
 8017634:	f300 8129 	bgt.w	801788a <USBD_StdEPReq+0x2a4>
 8017638:	2b00      	cmp	r3, #0
 801763a:	d07f      	beq.n	801773c <USBD_StdEPReq+0x156>
 801763c:	2b01      	cmp	r3, #1
 801763e:	d03c      	beq.n	80176ba <USBD_StdEPReq+0xd4>
 8017640:	e123      	b.n	801788a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017648:	b2db      	uxtb	r3, r3
 801764a:	2b02      	cmp	r3, #2
 801764c:	d002      	beq.n	8017654 <USBD_StdEPReq+0x6e>
 801764e:	2b03      	cmp	r3, #3
 8017650:	d016      	beq.n	8017680 <USBD_StdEPReq+0x9a>
 8017652:	e02c      	b.n	80176ae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017654:	7bbb      	ldrb	r3, [r7, #14]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d00d      	beq.n	8017676 <USBD_StdEPReq+0x90>
 801765a:	7bbb      	ldrb	r3, [r7, #14]
 801765c:	2b80      	cmp	r3, #128	; 0x80
 801765e:	d00a      	beq.n	8017676 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017660:	7bbb      	ldrb	r3, [r7, #14]
 8017662:	4619      	mov	r1, r3
 8017664:	6878      	ldr	r0, [r7, #4]
 8017666:	f001 f9b7 	bl	80189d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801766a:	2180      	movs	r1, #128	; 0x80
 801766c:	6878      	ldr	r0, [r7, #4]
 801766e:	f001 f9b3 	bl	80189d8 <USBD_LL_StallEP>
 8017672:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017674:	e020      	b.n	80176b8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8017676:	6839      	ldr	r1, [r7, #0]
 8017678:	6878      	ldr	r0, [r7, #4]
 801767a:	f000 fc6f 	bl	8017f5c <USBD_CtlError>
              break;
 801767e:	e01b      	b.n	80176b8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017680:	683b      	ldr	r3, [r7, #0]
 8017682:	885b      	ldrh	r3, [r3, #2]
 8017684:	2b00      	cmp	r3, #0
 8017686:	d10e      	bne.n	80176a6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017688:	7bbb      	ldrb	r3, [r7, #14]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d00b      	beq.n	80176a6 <USBD_StdEPReq+0xc0>
 801768e:	7bbb      	ldrb	r3, [r7, #14]
 8017690:	2b80      	cmp	r3, #128	; 0x80
 8017692:	d008      	beq.n	80176a6 <USBD_StdEPReq+0xc0>
 8017694:	683b      	ldr	r3, [r7, #0]
 8017696:	88db      	ldrh	r3, [r3, #6]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d104      	bne.n	80176a6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801769c:	7bbb      	ldrb	r3, [r7, #14]
 801769e:	4619      	mov	r1, r3
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f001 f999 	bl	80189d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80176a6:	6878      	ldr	r0, [r7, #4]
 80176a8:	f000 fd23 	bl	80180f2 <USBD_CtlSendStatus>

              break;
 80176ac:	e004      	b.n	80176b8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80176ae:	6839      	ldr	r1, [r7, #0]
 80176b0:	6878      	ldr	r0, [r7, #4]
 80176b2:	f000 fc53 	bl	8017f5c <USBD_CtlError>
              break;
 80176b6:	bf00      	nop
          }
          break;
 80176b8:	e0ec      	b.n	8017894 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80176c0:	b2db      	uxtb	r3, r3
 80176c2:	2b02      	cmp	r3, #2
 80176c4:	d002      	beq.n	80176cc <USBD_StdEPReq+0xe6>
 80176c6:	2b03      	cmp	r3, #3
 80176c8:	d016      	beq.n	80176f8 <USBD_StdEPReq+0x112>
 80176ca:	e030      	b.n	801772e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80176cc:	7bbb      	ldrb	r3, [r7, #14]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d00d      	beq.n	80176ee <USBD_StdEPReq+0x108>
 80176d2:	7bbb      	ldrb	r3, [r7, #14]
 80176d4:	2b80      	cmp	r3, #128	; 0x80
 80176d6:	d00a      	beq.n	80176ee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80176d8:	7bbb      	ldrb	r3, [r7, #14]
 80176da:	4619      	mov	r1, r3
 80176dc:	6878      	ldr	r0, [r7, #4]
 80176de:	f001 f97b 	bl	80189d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80176e2:	2180      	movs	r1, #128	; 0x80
 80176e4:	6878      	ldr	r0, [r7, #4]
 80176e6:	f001 f977 	bl	80189d8 <USBD_LL_StallEP>
 80176ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80176ec:	e025      	b.n	801773a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80176ee:	6839      	ldr	r1, [r7, #0]
 80176f0:	6878      	ldr	r0, [r7, #4]
 80176f2:	f000 fc33 	bl	8017f5c <USBD_CtlError>
              break;
 80176f6:	e020      	b.n	801773a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80176f8:	683b      	ldr	r3, [r7, #0]
 80176fa:	885b      	ldrh	r3, [r3, #2]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d11b      	bne.n	8017738 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017700:	7bbb      	ldrb	r3, [r7, #14]
 8017702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017706:	2b00      	cmp	r3, #0
 8017708:	d004      	beq.n	8017714 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801770a:	7bbb      	ldrb	r3, [r7, #14]
 801770c:	4619      	mov	r1, r3
 801770e:	6878      	ldr	r0, [r7, #4]
 8017710:	f001 f998 	bl	8018a44 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017714:	6878      	ldr	r0, [r7, #4]
 8017716:	f000 fcec 	bl	80180f2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017720:	689b      	ldr	r3, [r3, #8]
 8017722:	6839      	ldr	r1, [r7, #0]
 8017724:	6878      	ldr	r0, [r7, #4]
 8017726:	4798      	blx	r3
 8017728:	4603      	mov	r3, r0
 801772a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801772c:	e004      	b.n	8017738 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801772e:	6839      	ldr	r1, [r7, #0]
 8017730:	6878      	ldr	r0, [r7, #4]
 8017732:	f000 fc13 	bl	8017f5c <USBD_CtlError>
              break;
 8017736:	e000      	b.n	801773a <USBD_StdEPReq+0x154>
              break;
 8017738:	bf00      	nop
          }
          break;
 801773a:	e0ab      	b.n	8017894 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017742:	b2db      	uxtb	r3, r3
 8017744:	2b02      	cmp	r3, #2
 8017746:	d002      	beq.n	801774e <USBD_StdEPReq+0x168>
 8017748:	2b03      	cmp	r3, #3
 801774a:	d032      	beq.n	80177b2 <USBD_StdEPReq+0x1cc>
 801774c:	e097      	b.n	801787e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801774e:	7bbb      	ldrb	r3, [r7, #14]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d007      	beq.n	8017764 <USBD_StdEPReq+0x17e>
 8017754:	7bbb      	ldrb	r3, [r7, #14]
 8017756:	2b80      	cmp	r3, #128	; 0x80
 8017758:	d004      	beq.n	8017764 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801775a:	6839      	ldr	r1, [r7, #0]
 801775c:	6878      	ldr	r0, [r7, #4]
 801775e:	f000 fbfd 	bl	8017f5c <USBD_CtlError>
                break;
 8017762:	e091      	b.n	8017888 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017768:	2b00      	cmp	r3, #0
 801776a:	da0b      	bge.n	8017784 <USBD_StdEPReq+0x19e>
 801776c:	7bbb      	ldrb	r3, [r7, #14]
 801776e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017772:	4613      	mov	r3, r2
 8017774:	009b      	lsls	r3, r3, #2
 8017776:	4413      	add	r3, r2
 8017778:	009b      	lsls	r3, r3, #2
 801777a:	3310      	adds	r3, #16
 801777c:	687a      	ldr	r2, [r7, #4]
 801777e:	4413      	add	r3, r2
 8017780:	3304      	adds	r3, #4
 8017782:	e00b      	b.n	801779c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017784:	7bbb      	ldrb	r3, [r7, #14]
 8017786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801778a:	4613      	mov	r3, r2
 801778c:	009b      	lsls	r3, r3, #2
 801778e:	4413      	add	r3, r2
 8017790:	009b      	lsls	r3, r3, #2
 8017792:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017796:	687a      	ldr	r2, [r7, #4]
 8017798:	4413      	add	r3, r2
 801779a:	3304      	adds	r3, #4
 801779c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801779e:	68bb      	ldr	r3, [r7, #8]
 80177a0:	2200      	movs	r2, #0
 80177a2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80177a4:	68bb      	ldr	r3, [r7, #8]
 80177a6:	2202      	movs	r2, #2
 80177a8:	4619      	mov	r1, r3
 80177aa:	6878      	ldr	r0, [r7, #4]
 80177ac:	f000 fc47 	bl	801803e <USBD_CtlSendData>
              break;
 80177b0:	e06a      	b.n	8017888 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80177b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	da11      	bge.n	80177de <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80177ba:	7bbb      	ldrb	r3, [r7, #14]
 80177bc:	f003 020f 	and.w	r2, r3, #15
 80177c0:	6879      	ldr	r1, [r7, #4]
 80177c2:	4613      	mov	r3, r2
 80177c4:	009b      	lsls	r3, r3, #2
 80177c6:	4413      	add	r3, r2
 80177c8:	009b      	lsls	r3, r3, #2
 80177ca:	440b      	add	r3, r1
 80177cc:	3324      	adds	r3, #36	; 0x24
 80177ce:	881b      	ldrh	r3, [r3, #0]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d117      	bne.n	8017804 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80177d4:	6839      	ldr	r1, [r7, #0]
 80177d6:	6878      	ldr	r0, [r7, #4]
 80177d8:	f000 fbc0 	bl	8017f5c <USBD_CtlError>
                  break;
 80177dc:	e054      	b.n	8017888 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80177de:	7bbb      	ldrb	r3, [r7, #14]
 80177e0:	f003 020f 	and.w	r2, r3, #15
 80177e4:	6879      	ldr	r1, [r7, #4]
 80177e6:	4613      	mov	r3, r2
 80177e8:	009b      	lsls	r3, r3, #2
 80177ea:	4413      	add	r3, r2
 80177ec:	009b      	lsls	r3, r3, #2
 80177ee:	440b      	add	r3, r1
 80177f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80177f4:	881b      	ldrh	r3, [r3, #0]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d104      	bne.n	8017804 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80177fa:	6839      	ldr	r1, [r7, #0]
 80177fc:	6878      	ldr	r0, [r7, #4]
 80177fe:	f000 fbad 	bl	8017f5c <USBD_CtlError>
                  break;
 8017802:	e041      	b.n	8017888 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017804:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017808:	2b00      	cmp	r3, #0
 801780a:	da0b      	bge.n	8017824 <USBD_StdEPReq+0x23e>
 801780c:	7bbb      	ldrb	r3, [r7, #14]
 801780e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017812:	4613      	mov	r3, r2
 8017814:	009b      	lsls	r3, r3, #2
 8017816:	4413      	add	r3, r2
 8017818:	009b      	lsls	r3, r3, #2
 801781a:	3310      	adds	r3, #16
 801781c:	687a      	ldr	r2, [r7, #4]
 801781e:	4413      	add	r3, r2
 8017820:	3304      	adds	r3, #4
 8017822:	e00b      	b.n	801783c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017824:	7bbb      	ldrb	r3, [r7, #14]
 8017826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801782a:	4613      	mov	r3, r2
 801782c:	009b      	lsls	r3, r3, #2
 801782e:	4413      	add	r3, r2
 8017830:	009b      	lsls	r3, r3, #2
 8017832:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017836:	687a      	ldr	r2, [r7, #4]
 8017838:	4413      	add	r3, r2
 801783a:	3304      	adds	r3, #4
 801783c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801783e:	7bbb      	ldrb	r3, [r7, #14]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d002      	beq.n	801784a <USBD_StdEPReq+0x264>
 8017844:	7bbb      	ldrb	r3, [r7, #14]
 8017846:	2b80      	cmp	r3, #128	; 0x80
 8017848:	d103      	bne.n	8017852 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801784a:	68bb      	ldr	r3, [r7, #8]
 801784c:	2200      	movs	r2, #0
 801784e:	601a      	str	r2, [r3, #0]
 8017850:	e00e      	b.n	8017870 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017852:	7bbb      	ldrb	r3, [r7, #14]
 8017854:	4619      	mov	r1, r3
 8017856:	6878      	ldr	r0, [r7, #4]
 8017858:	f001 f92a 	bl	8018ab0 <USBD_LL_IsStallEP>
 801785c:	4603      	mov	r3, r0
 801785e:	2b00      	cmp	r3, #0
 8017860:	d003      	beq.n	801786a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8017862:	68bb      	ldr	r3, [r7, #8]
 8017864:	2201      	movs	r2, #1
 8017866:	601a      	str	r2, [r3, #0]
 8017868:	e002      	b.n	8017870 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801786a:	68bb      	ldr	r3, [r7, #8]
 801786c:	2200      	movs	r2, #0
 801786e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017870:	68bb      	ldr	r3, [r7, #8]
 8017872:	2202      	movs	r2, #2
 8017874:	4619      	mov	r1, r3
 8017876:	6878      	ldr	r0, [r7, #4]
 8017878:	f000 fbe1 	bl	801803e <USBD_CtlSendData>
              break;
 801787c:	e004      	b.n	8017888 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801787e:	6839      	ldr	r1, [r7, #0]
 8017880:	6878      	ldr	r0, [r7, #4]
 8017882:	f000 fb6b 	bl	8017f5c <USBD_CtlError>
              break;
 8017886:	bf00      	nop
          }
          break;
 8017888:	e004      	b.n	8017894 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801788a:	6839      	ldr	r1, [r7, #0]
 801788c:	6878      	ldr	r0, [r7, #4]
 801788e:	f000 fb65 	bl	8017f5c <USBD_CtlError>
          break;
 8017892:	bf00      	nop
      }
      break;
 8017894:	e004      	b.n	80178a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8017896:	6839      	ldr	r1, [r7, #0]
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f000 fb5f 	bl	8017f5c <USBD_CtlError>
      break;
 801789e:	bf00      	nop
  }

  return ret;
 80178a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80178a2:	4618      	mov	r0, r3
 80178a4:	3710      	adds	r7, #16
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}
	...

080178ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b084      	sub	sp, #16
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
 80178b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80178b6:	2300      	movs	r3, #0
 80178b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80178ba:	2300      	movs	r3, #0
 80178bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80178be:	2300      	movs	r3, #0
 80178c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80178c2:	683b      	ldr	r3, [r7, #0]
 80178c4:	885b      	ldrh	r3, [r3, #2]
 80178c6:	0a1b      	lsrs	r3, r3, #8
 80178c8:	b29b      	uxth	r3, r3
 80178ca:	3b01      	subs	r3, #1
 80178cc:	2b0e      	cmp	r3, #14
 80178ce:	f200 8152 	bhi.w	8017b76 <USBD_GetDescriptor+0x2ca>
 80178d2:	a201      	add	r2, pc, #4	; (adr r2, 80178d8 <USBD_GetDescriptor+0x2c>)
 80178d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178d8:	08017949 	.word	0x08017949
 80178dc:	08017961 	.word	0x08017961
 80178e0:	080179a1 	.word	0x080179a1
 80178e4:	08017b77 	.word	0x08017b77
 80178e8:	08017b77 	.word	0x08017b77
 80178ec:	08017b17 	.word	0x08017b17
 80178f0:	08017b43 	.word	0x08017b43
 80178f4:	08017b77 	.word	0x08017b77
 80178f8:	08017b77 	.word	0x08017b77
 80178fc:	08017b77 	.word	0x08017b77
 8017900:	08017b77 	.word	0x08017b77
 8017904:	08017b77 	.word	0x08017b77
 8017908:	08017b77 	.word	0x08017b77
 801790c:	08017b77 	.word	0x08017b77
 8017910:	08017915 	.word	0x08017915
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801791a:	69db      	ldr	r3, [r3, #28]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d00b      	beq.n	8017938 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017926:	69db      	ldr	r3, [r3, #28]
 8017928:	687a      	ldr	r2, [r7, #4]
 801792a:	7c12      	ldrb	r2, [r2, #16]
 801792c:	f107 0108 	add.w	r1, r7, #8
 8017930:	4610      	mov	r0, r2
 8017932:	4798      	blx	r3
 8017934:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017936:	e126      	b.n	8017b86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017938:	6839      	ldr	r1, [r7, #0]
 801793a:	6878      	ldr	r0, [r7, #4]
 801793c:	f000 fb0e 	bl	8017f5c <USBD_CtlError>
        err++;
 8017940:	7afb      	ldrb	r3, [r7, #11]
 8017942:	3301      	adds	r3, #1
 8017944:	72fb      	strb	r3, [r7, #11]
      break;
 8017946:	e11e      	b.n	8017b86 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	687a      	ldr	r2, [r7, #4]
 8017952:	7c12      	ldrb	r2, [r2, #16]
 8017954:	f107 0108 	add.w	r1, r7, #8
 8017958:	4610      	mov	r0, r2
 801795a:	4798      	blx	r3
 801795c:	60f8      	str	r0, [r7, #12]
      break;
 801795e:	e112      	b.n	8017b86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	7c1b      	ldrb	r3, [r3, #16]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d10d      	bne.n	8017984 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801796e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017970:	f107 0208 	add.w	r2, r7, #8
 8017974:	4610      	mov	r0, r2
 8017976:	4798      	blx	r3
 8017978:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	3301      	adds	r3, #1
 801797e:	2202      	movs	r2, #2
 8017980:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017982:	e100      	b.n	8017b86 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801798a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801798c:	f107 0208 	add.w	r2, r7, #8
 8017990:	4610      	mov	r0, r2
 8017992:	4798      	blx	r3
 8017994:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	3301      	adds	r3, #1
 801799a:	2202      	movs	r2, #2
 801799c:	701a      	strb	r2, [r3, #0]
      break;
 801799e:	e0f2      	b.n	8017b86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80179a0:	683b      	ldr	r3, [r7, #0]
 80179a2:	885b      	ldrh	r3, [r3, #2]
 80179a4:	b2db      	uxtb	r3, r3
 80179a6:	2b05      	cmp	r3, #5
 80179a8:	f200 80ac 	bhi.w	8017b04 <USBD_GetDescriptor+0x258>
 80179ac:	a201      	add	r2, pc, #4	; (adr r2, 80179b4 <USBD_GetDescriptor+0x108>)
 80179ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179b2:	bf00      	nop
 80179b4:	080179cd 	.word	0x080179cd
 80179b8:	08017a01 	.word	0x08017a01
 80179bc:	08017a35 	.word	0x08017a35
 80179c0:	08017a69 	.word	0x08017a69
 80179c4:	08017a9d 	.word	0x08017a9d
 80179c8:	08017ad1 	.word	0x08017ad1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80179d2:	685b      	ldr	r3, [r3, #4]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d00b      	beq.n	80179f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80179de:	685b      	ldr	r3, [r3, #4]
 80179e0:	687a      	ldr	r2, [r7, #4]
 80179e2:	7c12      	ldrb	r2, [r2, #16]
 80179e4:	f107 0108 	add.w	r1, r7, #8
 80179e8:	4610      	mov	r0, r2
 80179ea:	4798      	blx	r3
 80179ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80179ee:	e091      	b.n	8017b14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80179f0:	6839      	ldr	r1, [r7, #0]
 80179f2:	6878      	ldr	r0, [r7, #4]
 80179f4:	f000 fab2 	bl	8017f5c <USBD_CtlError>
            err++;
 80179f8:	7afb      	ldrb	r3, [r7, #11]
 80179fa:	3301      	adds	r3, #1
 80179fc:	72fb      	strb	r3, [r7, #11]
          break;
 80179fe:	e089      	b.n	8017b14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a06:	689b      	ldr	r3, [r3, #8]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d00b      	beq.n	8017a24 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a12:	689b      	ldr	r3, [r3, #8]
 8017a14:	687a      	ldr	r2, [r7, #4]
 8017a16:	7c12      	ldrb	r2, [r2, #16]
 8017a18:	f107 0108 	add.w	r1, r7, #8
 8017a1c:	4610      	mov	r0, r2
 8017a1e:	4798      	blx	r3
 8017a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017a22:	e077      	b.n	8017b14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017a24:	6839      	ldr	r1, [r7, #0]
 8017a26:	6878      	ldr	r0, [r7, #4]
 8017a28:	f000 fa98 	bl	8017f5c <USBD_CtlError>
            err++;
 8017a2c:	7afb      	ldrb	r3, [r7, #11]
 8017a2e:	3301      	adds	r3, #1
 8017a30:	72fb      	strb	r3, [r7, #11]
          break;
 8017a32:	e06f      	b.n	8017b14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a3a:	68db      	ldr	r3, [r3, #12]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d00b      	beq.n	8017a58 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a46:	68db      	ldr	r3, [r3, #12]
 8017a48:	687a      	ldr	r2, [r7, #4]
 8017a4a:	7c12      	ldrb	r2, [r2, #16]
 8017a4c:	f107 0108 	add.w	r1, r7, #8
 8017a50:	4610      	mov	r0, r2
 8017a52:	4798      	blx	r3
 8017a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017a56:	e05d      	b.n	8017b14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017a58:	6839      	ldr	r1, [r7, #0]
 8017a5a:	6878      	ldr	r0, [r7, #4]
 8017a5c:	f000 fa7e 	bl	8017f5c <USBD_CtlError>
            err++;
 8017a60:	7afb      	ldrb	r3, [r7, #11]
 8017a62:	3301      	adds	r3, #1
 8017a64:	72fb      	strb	r3, [r7, #11]
          break;
 8017a66:	e055      	b.n	8017b14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a6e:	691b      	ldr	r3, [r3, #16]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d00b      	beq.n	8017a8c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a7a:	691b      	ldr	r3, [r3, #16]
 8017a7c:	687a      	ldr	r2, [r7, #4]
 8017a7e:	7c12      	ldrb	r2, [r2, #16]
 8017a80:	f107 0108 	add.w	r1, r7, #8
 8017a84:	4610      	mov	r0, r2
 8017a86:	4798      	blx	r3
 8017a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017a8a:	e043      	b.n	8017b14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017a8c:	6839      	ldr	r1, [r7, #0]
 8017a8e:	6878      	ldr	r0, [r7, #4]
 8017a90:	f000 fa64 	bl	8017f5c <USBD_CtlError>
            err++;
 8017a94:	7afb      	ldrb	r3, [r7, #11]
 8017a96:	3301      	adds	r3, #1
 8017a98:	72fb      	strb	r3, [r7, #11]
          break;
 8017a9a:	e03b      	b.n	8017b14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017aa2:	695b      	ldr	r3, [r3, #20]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d00b      	beq.n	8017ac0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017aae:	695b      	ldr	r3, [r3, #20]
 8017ab0:	687a      	ldr	r2, [r7, #4]
 8017ab2:	7c12      	ldrb	r2, [r2, #16]
 8017ab4:	f107 0108 	add.w	r1, r7, #8
 8017ab8:	4610      	mov	r0, r2
 8017aba:	4798      	blx	r3
 8017abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017abe:	e029      	b.n	8017b14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017ac0:	6839      	ldr	r1, [r7, #0]
 8017ac2:	6878      	ldr	r0, [r7, #4]
 8017ac4:	f000 fa4a 	bl	8017f5c <USBD_CtlError>
            err++;
 8017ac8:	7afb      	ldrb	r3, [r7, #11]
 8017aca:	3301      	adds	r3, #1
 8017acc:	72fb      	strb	r3, [r7, #11]
          break;
 8017ace:	e021      	b.n	8017b14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017ad6:	699b      	ldr	r3, [r3, #24]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d00b      	beq.n	8017af4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017ae2:	699b      	ldr	r3, [r3, #24]
 8017ae4:	687a      	ldr	r2, [r7, #4]
 8017ae6:	7c12      	ldrb	r2, [r2, #16]
 8017ae8:	f107 0108 	add.w	r1, r7, #8
 8017aec:	4610      	mov	r0, r2
 8017aee:	4798      	blx	r3
 8017af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017af2:	e00f      	b.n	8017b14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017af4:	6839      	ldr	r1, [r7, #0]
 8017af6:	6878      	ldr	r0, [r7, #4]
 8017af8:	f000 fa30 	bl	8017f5c <USBD_CtlError>
            err++;
 8017afc:	7afb      	ldrb	r3, [r7, #11]
 8017afe:	3301      	adds	r3, #1
 8017b00:	72fb      	strb	r3, [r7, #11]
          break;
 8017b02:	e007      	b.n	8017b14 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017b04:	6839      	ldr	r1, [r7, #0]
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f000 fa28 	bl	8017f5c <USBD_CtlError>
          err++;
 8017b0c:	7afb      	ldrb	r3, [r7, #11]
 8017b0e:	3301      	adds	r3, #1
 8017b10:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8017b12:	bf00      	nop
      }
      break;
 8017b14:	e037      	b.n	8017b86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	7c1b      	ldrb	r3, [r3, #16]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d109      	bne.n	8017b32 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b26:	f107 0208 	add.w	r2, r7, #8
 8017b2a:	4610      	mov	r0, r2
 8017b2c:	4798      	blx	r3
 8017b2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017b30:	e029      	b.n	8017b86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017b32:	6839      	ldr	r1, [r7, #0]
 8017b34:	6878      	ldr	r0, [r7, #4]
 8017b36:	f000 fa11 	bl	8017f5c <USBD_CtlError>
        err++;
 8017b3a:	7afb      	ldrb	r3, [r7, #11]
 8017b3c:	3301      	adds	r3, #1
 8017b3e:	72fb      	strb	r3, [r7, #11]
      break;
 8017b40:	e021      	b.n	8017b86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	7c1b      	ldrb	r3, [r3, #16]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d10d      	bne.n	8017b66 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b52:	f107 0208 	add.w	r2, r7, #8
 8017b56:	4610      	mov	r0, r2
 8017b58:	4798      	blx	r3
 8017b5a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	3301      	adds	r3, #1
 8017b60:	2207      	movs	r2, #7
 8017b62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017b64:	e00f      	b.n	8017b86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017b66:	6839      	ldr	r1, [r7, #0]
 8017b68:	6878      	ldr	r0, [r7, #4]
 8017b6a:	f000 f9f7 	bl	8017f5c <USBD_CtlError>
        err++;
 8017b6e:	7afb      	ldrb	r3, [r7, #11]
 8017b70:	3301      	adds	r3, #1
 8017b72:	72fb      	strb	r3, [r7, #11]
      break;
 8017b74:	e007      	b.n	8017b86 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8017b76:	6839      	ldr	r1, [r7, #0]
 8017b78:	6878      	ldr	r0, [r7, #4]
 8017b7a:	f000 f9ef 	bl	8017f5c <USBD_CtlError>
      err++;
 8017b7e:	7afb      	ldrb	r3, [r7, #11]
 8017b80:	3301      	adds	r3, #1
 8017b82:	72fb      	strb	r3, [r7, #11]
      break;
 8017b84:	bf00      	nop
  }

  if (err != 0U)
 8017b86:	7afb      	ldrb	r3, [r7, #11]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d11e      	bne.n	8017bca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8017b8c:	683b      	ldr	r3, [r7, #0]
 8017b8e:	88db      	ldrh	r3, [r3, #6]
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d016      	beq.n	8017bc2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8017b94:	893b      	ldrh	r3, [r7, #8]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d00e      	beq.n	8017bb8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8017b9a:	683b      	ldr	r3, [r7, #0]
 8017b9c:	88da      	ldrh	r2, [r3, #6]
 8017b9e:	893b      	ldrh	r3, [r7, #8]
 8017ba0:	4293      	cmp	r3, r2
 8017ba2:	bf28      	it	cs
 8017ba4:	4613      	movcs	r3, r2
 8017ba6:	b29b      	uxth	r3, r3
 8017ba8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017baa:	893b      	ldrh	r3, [r7, #8]
 8017bac:	461a      	mov	r2, r3
 8017bae:	68f9      	ldr	r1, [r7, #12]
 8017bb0:	6878      	ldr	r0, [r7, #4]
 8017bb2:	f000 fa44 	bl	801803e <USBD_CtlSendData>
 8017bb6:	e009      	b.n	8017bcc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017bb8:	6839      	ldr	r1, [r7, #0]
 8017bba:	6878      	ldr	r0, [r7, #4]
 8017bbc:	f000 f9ce 	bl	8017f5c <USBD_CtlError>
 8017bc0:	e004      	b.n	8017bcc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017bc2:	6878      	ldr	r0, [r7, #4]
 8017bc4:	f000 fa95 	bl	80180f2 <USBD_CtlSendStatus>
 8017bc8:	e000      	b.n	8017bcc <USBD_GetDescriptor+0x320>
    return;
 8017bca:	bf00      	nop
  }
}
 8017bcc:	3710      	adds	r7, #16
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	bd80      	pop	{r7, pc}
 8017bd2:	bf00      	nop

08017bd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b084      	sub	sp, #16
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	6078      	str	r0, [r7, #4]
 8017bdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017bde:	683b      	ldr	r3, [r7, #0]
 8017be0:	889b      	ldrh	r3, [r3, #4]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d131      	bne.n	8017c4a <USBD_SetAddress+0x76>
 8017be6:	683b      	ldr	r3, [r7, #0]
 8017be8:	88db      	ldrh	r3, [r3, #6]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d12d      	bne.n	8017c4a <USBD_SetAddress+0x76>
 8017bee:	683b      	ldr	r3, [r7, #0]
 8017bf0:	885b      	ldrh	r3, [r3, #2]
 8017bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8017bf4:	d829      	bhi.n	8017c4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017bf6:	683b      	ldr	r3, [r7, #0]
 8017bf8:	885b      	ldrh	r3, [r3, #2]
 8017bfa:	b2db      	uxtb	r3, r3
 8017bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017c00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017c08:	b2db      	uxtb	r3, r3
 8017c0a:	2b03      	cmp	r3, #3
 8017c0c:	d104      	bne.n	8017c18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017c0e:	6839      	ldr	r1, [r7, #0]
 8017c10:	6878      	ldr	r0, [r7, #4]
 8017c12:	f000 f9a3 	bl	8017f5c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017c16:	e01d      	b.n	8017c54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	7bfa      	ldrb	r2, [r7, #15]
 8017c1c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017c20:	7bfb      	ldrb	r3, [r7, #15]
 8017c22:	4619      	mov	r1, r3
 8017c24:	6878      	ldr	r0, [r7, #4]
 8017c26:	f000 ff6f 	bl	8018b08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8017c2a:	6878      	ldr	r0, [r7, #4]
 8017c2c:	f000 fa61 	bl	80180f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017c30:	7bfb      	ldrb	r3, [r7, #15]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d004      	beq.n	8017c40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	2202      	movs	r2, #2
 8017c3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017c3e:	e009      	b.n	8017c54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	2201      	movs	r2, #1
 8017c44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017c48:	e004      	b.n	8017c54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017c4a:	6839      	ldr	r1, [r7, #0]
 8017c4c:	6878      	ldr	r0, [r7, #4]
 8017c4e:	f000 f985 	bl	8017f5c <USBD_CtlError>
  }
}
 8017c52:	bf00      	nop
 8017c54:	bf00      	nop
 8017c56:	3710      	adds	r7, #16
 8017c58:	46bd      	mov	sp, r7
 8017c5a:	bd80      	pop	{r7, pc}

08017c5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b084      	sub	sp, #16
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
 8017c64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017c66:	2300      	movs	r3, #0
 8017c68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017c6a:	683b      	ldr	r3, [r7, #0]
 8017c6c:	885b      	ldrh	r3, [r3, #2]
 8017c6e:	b2da      	uxtb	r2, r3
 8017c70:	4b4c      	ldr	r3, [pc, #304]	; (8017da4 <USBD_SetConfig+0x148>)
 8017c72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017c74:	4b4b      	ldr	r3, [pc, #300]	; (8017da4 <USBD_SetConfig+0x148>)
 8017c76:	781b      	ldrb	r3, [r3, #0]
 8017c78:	2b01      	cmp	r3, #1
 8017c7a:	d905      	bls.n	8017c88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017c7c:	6839      	ldr	r1, [r7, #0]
 8017c7e:	6878      	ldr	r0, [r7, #4]
 8017c80:	f000 f96c 	bl	8017f5c <USBD_CtlError>
    return USBD_FAIL;
 8017c84:	2303      	movs	r3, #3
 8017c86:	e088      	b.n	8017d9a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017c8e:	b2db      	uxtb	r3, r3
 8017c90:	2b02      	cmp	r3, #2
 8017c92:	d002      	beq.n	8017c9a <USBD_SetConfig+0x3e>
 8017c94:	2b03      	cmp	r3, #3
 8017c96:	d025      	beq.n	8017ce4 <USBD_SetConfig+0x88>
 8017c98:	e071      	b.n	8017d7e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017c9a:	4b42      	ldr	r3, [pc, #264]	; (8017da4 <USBD_SetConfig+0x148>)
 8017c9c:	781b      	ldrb	r3, [r3, #0]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d01c      	beq.n	8017cdc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8017ca2:	4b40      	ldr	r3, [pc, #256]	; (8017da4 <USBD_SetConfig+0x148>)
 8017ca4:	781b      	ldrb	r3, [r3, #0]
 8017ca6:	461a      	mov	r2, r3
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017cac:	4b3d      	ldr	r3, [pc, #244]	; (8017da4 <USBD_SetConfig+0x148>)
 8017cae:	781b      	ldrb	r3, [r3, #0]
 8017cb0:	4619      	mov	r1, r3
 8017cb2:	6878      	ldr	r0, [r7, #4]
 8017cb4:	f7ff f91e 	bl	8016ef4 <USBD_SetClassConfig>
 8017cb8:	4603      	mov	r3, r0
 8017cba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017cbc:	7bfb      	ldrb	r3, [r7, #15]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d004      	beq.n	8017ccc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8017cc2:	6839      	ldr	r1, [r7, #0]
 8017cc4:	6878      	ldr	r0, [r7, #4]
 8017cc6:	f000 f949 	bl	8017f5c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017cca:	e065      	b.n	8017d98 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8017ccc:	6878      	ldr	r0, [r7, #4]
 8017cce:	f000 fa10 	bl	80180f2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	2203      	movs	r2, #3
 8017cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017cda:	e05d      	b.n	8017d98 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8017cdc:	6878      	ldr	r0, [r7, #4]
 8017cde:	f000 fa08 	bl	80180f2 <USBD_CtlSendStatus>
      break;
 8017ce2:	e059      	b.n	8017d98 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017ce4:	4b2f      	ldr	r3, [pc, #188]	; (8017da4 <USBD_SetConfig+0x148>)
 8017ce6:	781b      	ldrb	r3, [r3, #0]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d112      	bne.n	8017d12 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	2202      	movs	r2, #2
 8017cf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8017cf4:	4b2b      	ldr	r3, [pc, #172]	; (8017da4 <USBD_SetConfig+0x148>)
 8017cf6:	781b      	ldrb	r3, [r3, #0]
 8017cf8:	461a      	mov	r2, r3
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017cfe:	4b29      	ldr	r3, [pc, #164]	; (8017da4 <USBD_SetConfig+0x148>)
 8017d00:	781b      	ldrb	r3, [r3, #0]
 8017d02:	4619      	mov	r1, r3
 8017d04:	6878      	ldr	r0, [r7, #4]
 8017d06:	f7ff f911 	bl	8016f2c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017d0a:	6878      	ldr	r0, [r7, #4]
 8017d0c:	f000 f9f1 	bl	80180f2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017d10:	e042      	b.n	8017d98 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8017d12:	4b24      	ldr	r3, [pc, #144]	; (8017da4 <USBD_SetConfig+0x148>)
 8017d14:	781b      	ldrb	r3, [r3, #0]
 8017d16:	461a      	mov	r2, r3
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	685b      	ldr	r3, [r3, #4]
 8017d1c:	429a      	cmp	r2, r3
 8017d1e:	d02a      	beq.n	8017d76 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	685b      	ldr	r3, [r3, #4]
 8017d24:	b2db      	uxtb	r3, r3
 8017d26:	4619      	mov	r1, r3
 8017d28:	6878      	ldr	r0, [r7, #4]
 8017d2a:	f7ff f8ff 	bl	8016f2c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017d2e:	4b1d      	ldr	r3, [pc, #116]	; (8017da4 <USBD_SetConfig+0x148>)
 8017d30:	781b      	ldrb	r3, [r3, #0]
 8017d32:	461a      	mov	r2, r3
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017d38:	4b1a      	ldr	r3, [pc, #104]	; (8017da4 <USBD_SetConfig+0x148>)
 8017d3a:	781b      	ldrb	r3, [r3, #0]
 8017d3c:	4619      	mov	r1, r3
 8017d3e:	6878      	ldr	r0, [r7, #4]
 8017d40:	f7ff f8d8 	bl	8016ef4 <USBD_SetClassConfig>
 8017d44:	4603      	mov	r3, r0
 8017d46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017d48:	7bfb      	ldrb	r3, [r7, #15]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d00f      	beq.n	8017d6e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8017d4e:	6839      	ldr	r1, [r7, #0]
 8017d50:	6878      	ldr	r0, [r7, #4]
 8017d52:	f000 f903 	bl	8017f5c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	685b      	ldr	r3, [r3, #4]
 8017d5a:	b2db      	uxtb	r3, r3
 8017d5c:	4619      	mov	r1, r3
 8017d5e:	6878      	ldr	r0, [r7, #4]
 8017d60:	f7ff f8e4 	bl	8016f2c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	2202      	movs	r2, #2
 8017d68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017d6c:	e014      	b.n	8017d98 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8017d6e:	6878      	ldr	r0, [r7, #4]
 8017d70:	f000 f9bf 	bl	80180f2 <USBD_CtlSendStatus>
      break;
 8017d74:	e010      	b.n	8017d98 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8017d76:	6878      	ldr	r0, [r7, #4]
 8017d78:	f000 f9bb 	bl	80180f2 <USBD_CtlSendStatus>
      break;
 8017d7c:	e00c      	b.n	8017d98 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8017d7e:	6839      	ldr	r1, [r7, #0]
 8017d80:	6878      	ldr	r0, [r7, #4]
 8017d82:	f000 f8eb 	bl	8017f5c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017d86:	4b07      	ldr	r3, [pc, #28]	; (8017da4 <USBD_SetConfig+0x148>)
 8017d88:	781b      	ldrb	r3, [r3, #0]
 8017d8a:	4619      	mov	r1, r3
 8017d8c:	6878      	ldr	r0, [r7, #4]
 8017d8e:	f7ff f8cd 	bl	8016f2c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017d92:	2303      	movs	r3, #3
 8017d94:	73fb      	strb	r3, [r7, #15]
      break;
 8017d96:	bf00      	nop
  }

  return ret;
 8017d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	3710      	adds	r7, #16
 8017d9e:	46bd      	mov	sp, r7
 8017da0:	bd80      	pop	{r7, pc}
 8017da2:	bf00      	nop
 8017da4:	2000121c 	.word	0x2000121c

08017da8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017da8:	b580      	push	{r7, lr}
 8017daa:	b082      	sub	sp, #8
 8017dac:	af00      	add	r7, sp, #0
 8017dae:	6078      	str	r0, [r7, #4]
 8017db0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017db2:	683b      	ldr	r3, [r7, #0]
 8017db4:	88db      	ldrh	r3, [r3, #6]
 8017db6:	2b01      	cmp	r3, #1
 8017db8:	d004      	beq.n	8017dc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017dba:	6839      	ldr	r1, [r7, #0]
 8017dbc:	6878      	ldr	r0, [r7, #4]
 8017dbe:	f000 f8cd 	bl	8017f5c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017dc2:	e023      	b.n	8017e0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017dca:	b2db      	uxtb	r3, r3
 8017dcc:	2b02      	cmp	r3, #2
 8017dce:	dc02      	bgt.n	8017dd6 <USBD_GetConfig+0x2e>
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	dc03      	bgt.n	8017ddc <USBD_GetConfig+0x34>
 8017dd4:	e015      	b.n	8017e02 <USBD_GetConfig+0x5a>
 8017dd6:	2b03      	cmp	r3, #3
 8017dd8:	d00b      	beq.n	8017df2 <USBD_GetConfig+0x4a>
 8017dda:	e012      	b.n	8017e02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	2200      	movs	r2, #0
 8017de0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	3308      	adds	r3, #8
 8017de6:	2201      	movs	r2, #1
 8017de8:	4619      	mov	r1, r3
 8017dea:	6878      	ldr	r0, [r7, #4]
 8017dec:	f000 f927 	bl	801803e <USBD_CtlSendData>
        break;
 8017df0:	e00c      	b.n	8017e0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	3304      	adds	r3, #4
 8017df6:	2201      	movs	r2, #1
 8017df8:	4619      	mov	r1, r3
 8017dfa:	6878      	ldr	r0, [r7, #4]
 8017dfc:	f000 f91f 	bl	801803e <USBD_CtlSendData>
        break;
 8017e00:	e004      	b.n	8017e0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017e02:	6839      	ldr	r1, [r7, #0]
 8017e04:	6878      	ldr	r0, [r7, #4]
 8017e06:	f000 f8a9 	bl	8017f5c <USBD_CtlError>
        break;
 8017e0a:	bf00      	nop
}
 8017e0c:	bf00      	nop
 8017e0e:	3708      	adds	r7, #8
 8017e10:	46bd      	mov	sp, r7
 8017e12:	bd80      	pop	{r7, pc}

08017e14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b082      	sub	sp, #8
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	6078      	str	r0, [r7, #4]
 8017e1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017e24:	b2db      	uxtb	r3, r3
 8017e26:	3b01      	subs	r3, #1
 8017e28:	2b02      	cmp	r3, #2
 8017e2a:	d81e      	bhi.n	8017e6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017e2c:	683b      	ldr	r3, [r7, #0]
 8017e2e:	88db      	ldrh	r3, [r3, #6]
 8017e30:	2b02      	cmp	r3, #2
 8017e32:	d004      	beq.n	8017e3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017e34:	6839      	ldr	r1, [r7, #0]
 8017e36:	6878      	ldr	r0, [r7, #4]
 8017e38:	f000 f890 	bl	8017f5c <USBD_CtlError>
        break;
 8017e3c:	e01a      	b.n	8017e74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	2201      	movs	r2, #1
 8017e42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d005      	beq.n	8017e5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	68db      	ldr	r3, [r3, #12]
 8017e52:	f043 0202 	orr.w	r2, r3, #2
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	330c      	adds	r3, #12
 8017e5e:	2202      	movs	r2, #2
 8017e60:	4619      	mov	r1, r3
 8017e62:	6878      	ldr	r0, [r7, #4]
 8017e64:	f000 f8eb 	bl	801803e <USBD_CtlSendData>
      break;
 8017e68:	e004      	b.n	8017e74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017e6a:	6839      	ldr	r1, [r7, #0]
 8017e6c:	6878      	ldr	r0, [r7, #4]
 8017e6e:	f000 f875 	bl	8017f5c <USBD_CtlError>
      break;
 8017e72:	bf00      	nop
  }
}
 8017e74:	bf00      	nop
 8017e76:	3708      	adds	r7, #8
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	bd80      	pop	{r7, pc}

08017e7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	b082      	sub	sp, #8
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	6078      	str	r0, [r7, #4]
 8017e84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017e86:	683b      	ldr	r3, [r7, #0]
 8017e88:	885b      	ldrh	r3, [r3, #2]
 8017e8a:	2b01      	cmp	r3, #1
 8017e8c:	d106      	bne.n	8017e9c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	2201      	movs	r2, #1
 8017e92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017e96:	6878      	ldr	r0, [r7, #4]
 8017e98:	f000 f92b 	bl	80180f2 <USBD_CtlSendStatus>
  }
}
 8017e9c:	bf00      	nop
 8017e9e:	3708      	adds	r7, #8
 8017ea0:	46bd      	mov	sp, r7
 8017ea2:	bd80      	pop	{r7, pc}

08017ea4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017ea4:	b580      	push	{r7, lr}
 8017ea6:	b082      	sub	sp, #8
 8017ea8:	af00      	add	r7, sp, #0
 8017eaa:	6078      	str	r0, [r7, #4]
 8017eac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017eb4:	b2db      	uxtb	r3, r3
 8017eb6:	3b01      	subs	r3, #1
 8017eb8:	2b02      	cmp	r3, #2
 8017eba:	d80b      	bhi.n	8017ed4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017ebc:	683b      	ldr	r3, [r7, #0]
 8017ebe:	885b      	ldrh	r3, [r3, #2]
 8017ec0:	2b01      	cmp	r3, #1
 8017ec2:	d10c      	bne.n	8017ede <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017ecc:	6878      	ldr	r0, [r7, #4]
 8017ece:	f000 f910 	bl	80180f2 <USBD_CtlSendStatus>
      }
      break;
 8017ed2:	e004      	b.n	8017ede <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017ed4:	6839      	ldr	r1, [r7, #0]
 8017ed6:	6878      	ldr	r0, [r7, #4]
 8017ed8:	f000 f840 	bl	8017f5c <USBD_CtlError>
      break;
 8017edc:	e000      	b.n	8017ee0 <USBD_ClrFeature+0x3c>
      break;
 8017ede:	bf00      	nop
  }
}
 8017ee0:	bf00      	nop
 8017ee2:	3708      	adds	r7, #8
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	bd80      	pop	{r7, pc}

08017ee8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b084      	sub	sp, #16
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
 8017ef0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017ef2:	683b      	ldr	r3, [r7, #0]
 8017ef4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	781a      	ldrb	r2, [r3, #0]
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	3301      	adds	r3, #1
 8017f02:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	781a      	ldrb	r2, [r3, #0]
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	3301      	adds	r3, #1
 8017f10:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017f12:	68f8      	ldr	r0, [r7, #12]
 8017f14:	f7ff fa91 	bl	801743a <SWAPBYTE>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	461a      	mov	r2, r3
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	3301      	adds	r3, #1
 8017f24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	3301      	adds	r3, #1
 8017f2a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017f2c:	68f8      	ldr	r0, [r7, #12]
 8017f2e:	f7ff fa84 	bl	801743a <SWAPBYTE>
 8017f32:	4603      	mov	r3, r0
 8017f34:	461a      	mov	r2, r3
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	3301      	adds	r3, #1
 8017f3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	3301      	adds	r3, #1
 8017f44:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017f46:	68f8      	ldr	r0, [r7, #12]
 8017f48:	f7ff fa77 	bl	801743a <SWAPBYTE>
 8017f4c:	4603      	mov	r3, r0
 8017f4e:	461a      	mov	r2, r3
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	80da      	strh	r2, [r3, #6]
}
 8017f54:	bf00      	nop
 8017f56:	3710      	adds	r7, #16
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	bd80      	pop	{r7, pc}

08017f5c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b082      	sub	sp, #8
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]
 8017f64:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017f66:	2180      	movs	r1, #128	; 0x80
 8017f68:	6878      	ldr	r0, [r7, #4]
 8017f6a:	f000 fd35 	bl	80189d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017f6e:	2100      	movs	r1, #0
 8017f70:	6878      	ldr	r0, [r7, #4]
 8017f72:	f000 fd31 	bl	80189d8 <USBD_LL_StallEP>
}
 8017f76:	bf00      	nop
 8017f78:	3708      	adds	r7, #8
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	bd80      	pop	{r7, pc}

08017f7e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017f7e:	b580      	push	{r7, lr}
 8017f80:	b086      	sub	sp, #24
 8017f82:	af00      	add	r7, sp, #0
 8017f84:	60f8      	str	r0, [r7, #12]
 8017f86:	60b9      	str	r1, [r7, #8]
 8017f88:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d036      	beq.n	8018002 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017f98:	6938      	ldr	r0, [r7, #16]
 8017f9a:	f000 f836 	bl	801800a <USBD_GetLen>
 8017f9e:	4603      	mov	r3, r0
 8017fa0:	3301      	adds	r3, #1
 8017fa2:	b29b      	uxth	r3, r3
 8017fa4:	005b      	lsls	r3, r3, #1
 8017fa6:	b29a      	uxth	r2, r3
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017fac:	7dfb      	ldrb	r3, [r7, #23]
 8017fae:	68ba      	ldr	r2, [r7, #8]
 8017fb0:	4413      	add	r3, r2
 8017fb2:	687a      	ldr	r2, [r7, #4]
 8017fb4:	7812      	ldrb	r2, [r2, #0]
 8017fb6:	701a      	strb	r2, [r3, #0]
  idx++;
 8017fb8:	7dfb      	ldrb	r3, [r7, #23]
 8017fba:	3301      	adds	r3, #1
 8017fbc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017fbe:	7dfb      	ldrb	r3, [r7, #23]
 8017fc0:	68ba      	ldr	r2, [r7, #8]
 8017fc2:	4413      	add	r3, r2
 8017fc4:	2203      	movs	r2, #3
 8017fc6:	701a      	strb	r2, [r3, #0]
  idx++;
 8017fc8:	7dfb      	ldrb	r3, [r7, #23]
 8017fca:	3301      	adds	r3, #1
 8017fcc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017fce:	e013      	b.n	8017ff8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017fd0:	7dfb      	ldrb	r3, [r7, #23]
 8017fd2:	68ba      	ldr	r2, [r7, #8]
 8017fd4:	4413      	add	r3, r2
 8017fd6:	693a      	ldr	r2, [r7, #16]
 8017fd8:	7812      	ldrb	r2, [r2, #0]
 8017fda:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017fdc:	693b      	ldr	r3, [r7, #16]
 8017fde:	3301      	adds	r3, #1
 8017fe0:	613b      	str	r3, [r7, #16]
    idx++;
 8017fe2:	7dfb      	ldrb	r3, [r7, #23]
 8017fe4:	3301      	adds	r3, #1
 8017fe6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017fe8:	7dfb      	ldrb	r3, [r7, #23]
 8017fea:	68ba      	ldr	r2, [r7, #8]
 8017fec:	4413      	add	r3, r2
 8017fee:	2200      	movs	r2, #0
 8017ff0:	701a      	strb	r2, [r3, #0]
    idx++;
 8017ff2:	7dfb      	ldrb	r3, [r7, #23]
 8017ff4:	3301      	adds	r3, #1
 8017ff6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017ff8:	693b      	ldr	r3, [r7, #16]
 8017ffa:	781b      	ldrb	r3, [r3, #0]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d1e7      	bne.n	8017fd0 <USBD_GetString+0x52>
 8018000:	e000      	b.n	8018004 <USBD_GetString+0x86>
    return;
 8018002:	bf00      	nop
  }
}
 8018004:	3718      	adds	r7, #24
 8018006:	46bd      	mov	sp, r7
 8018008:	bd80      	pop	{r7, pc}

0801800a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801800a:	b480      	push	{r7}
 801800c:	b085      	sub	sp, #20
 801800e:	af00      	add	r7, sp, #0
 8018010:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8018012:	2300      	movs	r3, #0
 8018014:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801801a:	e005      	b.n	8018028 <USBD_GetLen+0x1e>
  {
    len++;
 801801c:	7bfb      	ldrb	r3, [r7, #15]
 801801e:	3301      	adds	r3, #1
 8018020:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8018022:	68bb      	ldr	r3, [r7, #8]
 8018024:	3301      	adds	r3, #1
 8018026:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8018028:	68bb      	ldr	r3, [r7, #8]
 801802a:	781b      	ldrb	r3, [r3, #0]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d1f5      	bne.n	801801c <USBD_GetLen+0x12>
  }

  return len;
 8018030:	7bfb      	ldrb	r3, [r7, #15]
}
 8018032:	4618      	mov	r0, r3
 8018034:	3714      	adds	r7, #20
 8018036:	46bd      	mov	sp, r7
 8018038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803c:	4770      	bx	lr

0801803e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801803e:	b580      	push	{r7, lr}
 8018040:	b084      	sub	sp, #16
 8018042:	af00      	add	r7, sp, #0
 8018044:	60f8      	str	r0, [r7, #12]
 8018046:	60b9      	str	r1, [r7, #8]
 8018048:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	2202      	movs	r2, #2
 801804e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8018052:	68fb      	ldr	r3, [r7, #12]
 8018054:	687a      	ldr	r2, [r7, #4]
 8018056:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	687a      	ldr	r2, [r7, #4]
 801805c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	68ba      	ldr	r2, [r7, #8]
 8018062:	2100      	movs	r1, #0
 8018064:	68f8      	ldr	r0, [r7, #12]
 8018066:	f000 fd85 	bl	8018b74 <USBD_LL_Transmit>

  return USBD_OK;
 801806a:	2300      	movs	r3, #0
}
 801806c:	4618      	mov	r0, r3
 801806e:	3710      	adds	r7, #16
 8018070:	46bd      	mov	sp, r7
 8018072:	bd80      	pop	{r7, pc}

08018074 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8018074:	b580      	push	{r7, lr}
 8018076:	b084      	sub	sp, #16
 8018078:	af00      	add	r7, sp, #0
 801807a:	60f8      	str	r0, [r7, #12]
 801807c:	60b9      	str	r1, [r7, #8]
 801807e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	68ba      	ldr	r2, [r7, #8]
 8018084:	2100      	movs	r1, #0
 8018086:	68f8      	ldr	r0, [r7, #12]
 8018088:	f000 fd74 	bl	8018b74 <USBD_LL_Transmit>

  return USBD_OK;
 801808c:	2300      	movs	r3, #0
}
 801808e:	4618      	mov	r0, r3
 8018090:	3710      	adds	r7, #16
 8018092:	46bd      	mov	sp, r7
 8018094:	bd80      	pop	{r7, pc}

08018096 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8018096:	b580      	push	{r7, lr}
 8018098:	b084      	sub	sp, #16
 801809a:	af00      	add	r7, sp, #0
 801809c:	60f8      	str	r0, [r7, #12]
 801809e:	60b9      	str	r1, [r7, #8]
 80180a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	2203      	movs	r2, #3
 80180a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	687a      	ldr	r2, [r7, #4]
 80180ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	687a      	ldr	r2, [r7, #4]
 80180b6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	68ba      	ldr	r2, [r7, #8]
 80180be:	2100      	movs	r1, #0
 80180c0:	68f8      	ldr	r0, [r7, #12]
 80180c2:	f000 fd8f 	bl	8018be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80180c6:	2300      	movs	r3, #0
}
 80180c8:	4618      	mov	r0, r3
 80180ca:	3710      	adds	r7, #16
 80180cc:	46bd      	mov	sp, r7
 80180ce:	bd80      	pop	{r7, pc}

080180d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80180d0:	b580      	push	{r7, lr}
 80180d2:	b084      	sub	sp, #16
 80180d4:	af00      	add	r7, sp, #0
 80180d6:	60f8      	str	r0, [r7, #12]
 80180d8:	60b9      	str	r1, [r7, #8]
 80180da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	68ba      	ldr	r2, [r7, #8]
 80180e0:	2100      	movs	r1, #0
 80180e2:	68f8      	ldr	r0, [r7, #12]
 80180e4:	f000 fd7e 	bl	8018be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80180e8:	2300      	movs	r3, #0
}
 80180ea:	4618      	mov	r0, r3
 80180ec:	3710      	adds	r7, #16
 80180ee:	46bd      	mov	sp, r7
 80180f0:	bd80      	pop	{r7, pc}

080180f2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80180f2:	b580      	push	{r7, lr}
 80180f4:	b082      	sub	sp, #8
 80180f6:	af00      	add	r7, sp, #0
 80180f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	2204      	movs	r2, #4
 80180fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8018102:	2300      	movs	r3, #0
 8018104:	2200      	movs	r2, #0
 8018106:	2100      	movs	r1, #0
 8018108:	6878      	ldr	r0, [r7, #4]
 801810a:	f000 fd33 	bl	8018b74 <USBD_LL_Transmit>

  return USBD_OK;
 801810e:	2300      	movs	r3, #0
}
 8018110:	4618      	mov	r0, r3
 8018112:	3708      	adds	r7, #8
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}

08018118 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8018118:	b580      	push	{r7, lr}
 801811a:	b082      	sub	sp, #8
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	2205      	movs	r2, #5
 8018124:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018128:	2300      	movs	r3, #0
 801812a:	2200      	movs	r2, #0
 801812c:	2100      	movs	r1, #0
 801812e:	6878      	ldr	r0, [r7, #4]
 8018130:	f000 fd58 	bl	8018be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018134:	2300      	movs	r3, #0
}
 8018136:	4618      	mov	r0, r3
 8018138:	3708      	adds	r7, #8
 801813a:	46bd      	mov	sp, r7
 801813c:	bd80      	pop	{r7, pc}
	...

08018140 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018140:	b580      	push	{r7, lr}
 8018142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018144:	2200      	movs	r2, #0
 8018146:	4912      	ldr	r1, [pc, #72]	; (8018190 <MX_USB_DEVICE_Init+0x50>)
 8018148:	4812      	ldr	r0, [pc, #72]	; (8018194 <MX_USB_DEVICE_Init+0x54>)
 801814a:	f7fe fe65 	bl	8016e18 <USBD_Init>
 801814e:	4603      	mov	r3, r0
 8018150:	2b00      	cmp	r3, #0
 8018152:	d001      	beq.n	8018158 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018154:	f7e9 ff42 	bl	8001fdc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018158:	490f      	ldr	r1, [pc, #60]	; (8018198 <MX_USB_DEVICE_Init+0x58>)
 801815a:	480e      	ldr	r0, [pc, #56]	; (8018194 <MX_USB_DEVICE_Init+0x54>)
 801815c:	f7fe fe8c 	bl	8016e78 <USBD_RegisterClass>
 8018160:	4603      	mov	r3, r0
 8018162:	2b00      	cmp	r3, #0
 8018164:	d001      	beq.n	801816a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018166:	f7e9 ff39 	bl	8001fdc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801816a:	490c      	ldr	r1, [pc, #48]	; (801819c <MX_USB_DEVICE_Init+0x5c>)
 801816c:	4809      	ldr	r0, [pc, #36]	; (8018194 <MX_USB_DEVICE_Init+0x54>)
 801816e:	f7fe fddd 	bl	8016d2c <USBD_CDC_RegisterInterface>
 8018172:	4603      	mov	r3, r0
 8018174:	2b00      	cmp	r3, #0
 8018176:	d001      	beq.n	801817c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018178:	f7e9 ff30 	bl	8001fdc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801817c:	4805      	ldr	r0, [pc, #20]	; (8018194 <MX_USB_DEVICE_Init+0x54>)
 801817e:	f7fe fea2 	bl	8016ec6 <USBD_Start>
 8018182:	4603      	mov	r3, r0
 8018184:	2b00      	cmp	r3, #0
 8018186:	d001      	beq.n	801818c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018188:	f7e9 ff28 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801818c:	bf00      	nop
 801818e:	bd80      	pop	{r7, pc}
 8018190:	20000680 	.word	0x20000680
 8018194:	20001220 	.word	0x20001220
 8018198:	20000568 	.word	0x20000568
 801819c:	2000066c 	.word	0x2000066c

080181a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80181a0:	b580      	push	{r7, lr}
 80181a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80181a4:	2200      	movs	r2, #0
 80181a6:	4905      	ldr	r1, [pc, #20]	; (80181bc <CDC_Init_FS+0x1c>)
 80181a8:	4805      	ldr	r0, [pc, #20]	; (80181c0 <CDC_Init_FS+0x20>)
 80181aa:	f7fe fdd4 	bl	8016d56 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80181ae:	4905      	ldr	r1, [pc, #20]	; (80181c4 <CDC_Init_FS+0x24>)
 80181b0:	4803      	ldr	r0, [pc, #12]	; (80181c0 <CDC_Init_FS+0x20>)
 80181b2:	f7fe fdee 	bl	8016d92 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80181b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80181b8:	4618      	mov	r0, r3
 80181ba:	bd80      	pop	{r7, pc}
 80181bc:	20001cf0 	.word	0x20001cf0
 80181c0:	20001220 	.word	0x20001220
 80181c4:	200014f0 	.word	0x200014f0

080181c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80181c8:	b480      	push	{r7}
 80181ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80181cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80181ce:	4618      	mov	r0, r3
 80181d0:	46bd      	mov	sp, r7
 80181d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d6:	4770      	bx	lr

080181d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80181d8:	b480      	push	{r7}
 80181da:	b083      	sub	sp, #12
 80181dc:	af00      	add	r7, sp, #0
 80181de:	4603      	mov	r3, r0
 80181e0:	6039      	str	r1, [r7, #0]
 80181e2:	71fb      	strb	r3, [r7, #7]
 80181e4:	4613      	mov	r3, r2
 80181e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80181e8:	79fb      	ldrb	r3, [r7, #7]
 80181ea:	2b23      	cmp	r3, #35	; 0x23
 80181ec:	d84a      	bhi.n	8018284 <CDC_Control_FS+0xac>
 80181ee:	a201      	add	r2, pc, #4	; (adr r2, 80181f4 <CDC_Control_FS+0x1c>)
 80181f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181f4:	08018285 	.word	0x08018285
 80181f8:	08018285 	.word	0x08018285
 80181fc:	08018285 	.word	0x08018285
 8018200:	08018285 	.word	0x08018285
 8018204:	08018285 	.word	0x08018285
 8018208:	08018285 	.word	0x08018285
 801820c:	08018285 	.word	0x08018285
 8018210:	08018285 	.word	0x08018285
 8018214:	08018285 	.word	0x08018285
 8018218:	08018285 	.word	0x08018285
 801821c:	08018285 	.word	0x08018285
 8018220:	08018285 	.word	0x08018285
 8018224:	08018285 	.word	0x08018285
 8018228:	08018285 	.word	0x08018285
 801822c:	08018285 	.word	0x08018285
 8018230:	08018285 	.word	0x08018285
 8018234:	08018285 	.word	0x08018285
 8018238:	08018285 	.word	0x08018285
 801823c:	08018285 	.word	0x08018285
 8018240:	08018285 	.word	0x08018285
 8018244:	08018285 	.word	0x08018285
 8018248:	08018285 	.word	0x08018285
 801824c:	08018285 	.word	0x08018285
 8018250:	08018285 	.word	0x08018285
 8018254:	08018285 	.word	0x08018285
 8018258:	08018285 	.word	0x08018285
 801825c:	08018285 	.word	0x08018285
 8018260:	08018285 	.word	0x08018285
 8018264:	08018285 	.word	0x08018285
 8018268:	08018285 	.word	0x08018285
 801826c:	08018285 	.word	0x08018285
 8018270:	08018285 	.word	0x08018285
 8018274:	08018285 	.word	0x08018285
 8018278:	08018285 	.word	0x08018285
 801827c:	08018285 	.word	0x08018285
 8018280:	08018285 	.word	0x08018285
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018284:	bf00      	nop
  }

  return (USBD_OK);
 8018286:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018288:	4618      	mov	r0, r3
 801828a:	370c      	adds	r7, #12
 801828c:	46bd      	mov	sp, r7
 801828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018292:	4770      	bx	lr

08018294 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018294:	b580      	push	{r7, lr}
 8018296:	b082      	sub	sp, #8
 8018298:	af00      	add	r7, sp, #0
 801829a:	6078      	str	r0, [r7, #4]
 801829c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801829e:	6879      	ldr	r1, [r7, #4]
 80182a0:	4805      	ldr	r0, [pc, #20]	; (80182b8 <CDC_Receive_FS+0x24>)
 80182a2:	f7fe fd76 	bl	8016d92 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80182a6:	4804      	ldr	r0, [pc, #16]	; (80182b8 <CDC_Receive_FS+0x24>)
 80182a8:	f7fe fd8c 	bl	8016dc4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80182ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80182ae:	4618      	mov	r0, r3
 80182b0:	3708      	adds	r7, #8
 80182b2:	46bd      	mov	sp, r7
 80182b4:	bd80      	pop	{r7, pc}
 80182b6:	bf00      	nop
 80182b8:	20001220 	.word	0x20001220

080182bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80182bc:	b480      	push	{r7}
 80182be:	b087      	sub	sp, #28
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	60f8      	str	r0, [r7, #12]
 80182c4:	60b9      	str	r1, [r7, #8]
 80182c6:	4613      	mov	r3, r2
 80182c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80182ca:	2300      	movs	r3, #0
 80182cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80182ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80182d2:	4618      	mov	r0, r3
 80182d4:	371c      	adds	r7, #28
 80182d6:	46bd      	mov	sp, r7
 80182d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182dc:	4770      	bx	lr
	...

080182e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80182e0:	b480      	push	{r7}
 80182e2:	b083      	sub	sp, #12
 80182e4:	af00      	add	r7, sp, #0
 80182e6:	4603      	mov	r3, r0
 80182e8:	6039      	str	r1, [r7, #0]
 80182ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80182ec:	683b      	ldr	r3, [r7, #0]
 80182ee:	2212      	movs	r2, #18
 80182f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80182f2:	4b03      	ldr	r3, [pc, #12]	; (8018300 <USBD_FS_DeviceDescriptor+0x20>)
}
 80182f4:	4618      	mov	r0, r3
 80182f6:	370c      	adds	r7, #12
 80182f8:	46bd      	mov	sp, r7
 80182fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182fe:	4770      	bx	lr
 8018300:	200006a0 	.word	0x200006a0

08018304 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018304:	b480      	push	{r7}
 8018306:	b083      	sub	sp, #12
 8018308:	af00      	add	r7, sp, #0
 801830a:	4603      	mov	r3, r0
 801830c:	6039      	str	r1, [r7, #0]
 801830e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018310:	683b      	ldr	r3, [r7, #0]
 8018312:	2204      	movs	r2, #4
 8018314:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018316:	4b03      	ldr	r3, [pc, #12]	; (8018324 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018318:	4618      	mov	r0, r3
 801831a:	370c      	adds	r7, #12
 801831c:	46bd      	mov	sp, r7
 801831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018322:	4770      	bx	lr
 8018324:	200006c0 	.word	0x200006c0

08018328 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018328:	b580      	push	{r7, lr}
 801832a:	b082      	sub	sp, #8
 801832c:	af00      	add	r7, sp, #0
 801832e:	4603      	mov	r3, r0
 8018330:	6039      	str	r1, [r7, #0]
 8018332:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018334:	79fb      	ldrb	r3, [r7, #7]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d105      	bne.n	8018346 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801833a:	683a      	ldr	r2, [r7, #0]
 801833c:	4907      	ldr	r1, [pc, #28]	; (801835c <USBD_FS_ProductStrDescriptor+0x34>)
 801833e:	4808      	ldr	r0, [pc, #32]	; (8018360 <USBD_FS_ProductStrDescriptor+0x38>)
 8018340:	f7ff fe1d 	bl	8017f7e <USBD_GetString>
 8018344:	e004      	b.n	8018350 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018346:	683a      	ldr	r2, [r7, #0]
 8018348:	4904      	ldr	r1, [pc, #16]	; (801835c <USBD_FS_ProductStrDescriptor+0x34>)
 801834a:	4805      	ldr	r0, [pc, #20]	; (8018360 <USBD_FS_ProductStrDescriptor+0x38>)
 801834c:	f7ff fe17 	bl	8017f7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018350:	4b02      	ldr	r3, [pc, #8]	; (801835c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018352:	4618      	mov	r0, r3
 8018354:	3708      	adds	r7, #8
 8018356:	46bd      	mov	sp, r7
 8018358:	bd80      	pop	{r7, pc}
 801835a:	bf00      	nop
 801835c:	200024f0 	.word	0x200024f0
 8018360:	08019f04 	.word	0x08019f04

08018364 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b082      	sub	sp, #8
 8018368:	af00      	add	r7, sp, #0
 801836a:	4603      	mov	r3, r0
 801836c:	6039      	str	r1, [r7, #0]
 801836e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018370:	683a      	ldr	r2, [r7, #0]
 8018372:	4904      	ldr	r1, [pc, #16]	; (8018384 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018374:	4804      	ldr	r0, [pc, #16]	; (8018388 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018376:	f7ff fe02 	bl	8017f7e <USBD_GetString>
  return USBD_StrDesc;
 801837a:	4b02      	ldr	r3, [pc, #8]	; (8018384 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801837c:	4618      	mov	r0, r3
 801837e:	3708      	adds	r7, #8
 8018380:	46bd      	mov	sp, r7
 8018382:	bd80      	pop	{r7, pc}
 8018384:	200024f0 	.word	0x200024f0
 8018388:	08019f1c 	.word	0x08019f1c

0801838c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b082      	sub	sp, #8
 8018390:	af00      	add	r7, sp, #0
 8018392:	4603      	mov	r3, r0
 8018394:	6039      	str	r1, [r7, #0]
 8018396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018398:	683b      	ldr	r3, [r7, #0]
 801839a:	221a      	movs	r2, #26
 801839c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801839e:	f000 f855 	bl	801844c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80183a2:	4b02      	ldr	r3, [pc, #8]	; (80183ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80183a4:	4618      	mov	r0, r3
 80183a6:	3708      	adds	r7, #8
 80183a8:	46bd      	mov	sp, r7
 80183aa:	bd80      	pop	{r7, pc}
 80183ac:	200006c4 	.word	0x200006c4

080183b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80183b0:	b580      	push	{r7, lr}
 80183b2:	b082      	sub	sp, #8
 80183b4:	af00      	add	r7, sp, #0
 80183b6:	4603      	mov	r3, r0
 80183b8:	6039      	str	r1, [r7, #0]
 80183ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80183bc:	79fb      	ldrb	r3, [r7, #7]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d105      	bne.n	80183ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80183c2:	683a      	ldr	r2, [r7, #0]
 80183c4:	4907      	ldr	r1, [pc, #28]	; (80183e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80183c6:	4808      	ldr	r0, [pc, #32]	; (80183e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80183c8:	f7ff fdd9 	bl	8017f7e <USBD_GetString>
 80183cc:	e004      	b.n	80183d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80183ce:	683a      	ldr	r2, [r7, #0]
 80183d0:	4904      	ldr	r1, [pc, #16]	; (80183e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80183d2:	4805      	ldr	r0, [pc, #20]	; (80183e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80183d4:	f7ff fdd3 	bl	8017f7e <USBD_GetString>
  }
  return USBD_StrDesc;
 80183d8:	4b02      	ldr	r3, [pc, #8]	; (80183e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80183da:	4618      	mov	r0, r3
 80183dc:	3708      	adds	r7, #8
 80183de:	46bd      	mov	sp, r7
 80183e0:	bd80      	pop	{r7, pc}
 80183e2:	bf00      	nop
 80183e4:	200024f0 	.word	0x200024f0
 80183e8:	08019f30 	.word	0x08019f30

080183ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80183ec:	b580      	push	{r7, lr}
 80183ee:	b082      	sub	sp, #8
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	4603      	mov	r3, r0
 80183f4:	6039      	str	r1, [r7, #0]
 80183f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80183f8:	79fb      	ldrb	r3, [r7, #7]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d105      	bne.n	801840a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80183fe:	683a      	ldr	r2, [r7, #0]
 8018400:	4907      	ldr	r1, [pc, #28]	; (8018420 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018402:	4808      	ldr	r0, [pc, #32]	; (8018424 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018404:	f7ff fdbb 	bl	8017f7e <USBD_GetString>
 8018408:	e004      	b.n	8018414 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801840a:	683a      	ldr	r2, [r7, #0]
 801840c:	4904      	ldr	r1, [pc, #16]	; (8018420 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801840e:	4805      	ldr	r0, [pc, #20]	; (8018424 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018410:	f7ff fdb5 	bl	8017f7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018414:	4b02      	ldr	r3, [pc, #8]	; (8018420 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018416:	4618      	mov	r0, r3
 8018418:	3708      	adds	r7, #8
 801841a:	46bd      	mov	sp, r7
 801841c:	bd80      	pop	{r7, pc}
 801841e:	bf00      	nop
 8018420:	200024f0 	.word	0x200024f0
 8018424:	08019f3c 	.word	0x08019f3c

08018428 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018428:	b480      	push	{r7}
 801842a:	b083      	sub	sp, #12
 801842c:	af00      	add	r7, sp, #0
 801842e:	4603      	mov	r3, r0
 8018430:	6039      	str	r1, [r7, #0]
 8018432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8018434:	683b      	ldr	r3, [r7, #0]
 8018436:	220c      	movs	r2, #12
 8018438:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801843a:	4b03      	ldr	r3, [pc, #12]	; (8018448 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801843c:	4618      	mov	r0, r3
 801843e:	370c      	adds	r7, #12
 8018440:	46bd      	mov	sp, r7
 8018442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018446:	4770      	bx	lr
 8018448:	200006b4 	.word	0x200006b4

0801844c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801844c:	b580      	push	{r7, lr}
 801844e:	b084      	sub	sp, #16
 8018450:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018452:	4b0f      	ldr	r3, [pc, #60]	; (8018490 <Get_SerialNum+0x44>)
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018458:	4b0e      	ldr	r3, [pc, #56]	; (8018494 <Get_SerialNum+0x48>)
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801845e:	4b0e      	ldr	r3, [pc, #56]	; (8018498 <Get_SerialNum+0x4c>)
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018464:	68fa      	ldr	r2, [r7, #12]
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	4413      	add	r3, r2
 801846a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d009      	beq.n	8018486 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018472:	2208      	movs	r2, #8
 8018474:	4909      	ldr	r1, [pc, #36]	; (801849c <Get_SerialNum+0x50>)
 8018476:	68f8      	ldr	r0, [r7, #12]
 8018478:	f000 f814 	bl	80184a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801847c:	2204      	movs	r2, #4
 801847e:	4908      	ldr	r1, [pc, #32]	; (80184a0 <Get_SerialNum+0x54>)
 8018480:	68b8      	ldr	r0, [r7, #8]
 8018482:	f000 f80f 	bl	80184a4 <IntToUnicode>
  }
}
 8018486:	bf00      	nop
 8018488:	3710      	adds	r7, #16
 801848a:	46bd      	mov	sp, r7
 801848c:	bd80      	pop	{r7, pc}
 801848e:	bf00      	nop
 8018490:	1fff7590 	.word	0x1fff7590
 8018494:	1fff7594 	.word	0x1fff7594
 8018498:	1fff7598 	.word	0x1fff7598
 801849c:	200006c6 	.word	0x200006c6
 80184a0:	200006d6 	.word	0x200006d6

080184a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80184a4:	b480      	push	{r7}
 80184a6:	b087      	sub	sp, #28
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	60f8      	str	r0, [r7, #12]
 80184ac:	60b9      	str	r1, [r7, #8]
 80184ae:	4613      	mov	r3, r2
 80184b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80184b2:	2300      	movs	r3, #0
 80184b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80184b6:	2300      	movs	r3, #0
 80184b8:	75fb      	strb	r3, [r7, #23]
 80184ba:	e027      	b.n	801850c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	0f1b      	lsrs	r3, r3, #28
 80184c0:	2b09      	cmp	r3, #9
 80184c2:	d80b      	bhi.n	80184dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	0f1b      	lsrs	r3, r3, #28
 80184c8:	b2da      	uxtb	r2, r3
 80184ca:	7dfb      	ldrb	r3, [r7, #23]
 80184cc:	005b      	lsls	r3, r3, #1
 80184ce:	4619      	mov	r1, r3
 80184d0:	68bb      	ldr	r3, [r7, #8]
 80184d2:	440b      	add	r3, r1
 80184d4:	3230      	adds	r2, #48	; 0x30
 80184d6:	b2d2      	uxtb	r2, r2
 80184d8:	701a      	strb	r2, [r3, #0]
 80184da:	e00a      	b.n	80184f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	0f1b      	lsrs	r3, r3, #28
 80184e0:	b2da      	uxtb	r2, r3
 80184e2:	7dfb      	ldrb	r3, [r7, #23]
 80184e4:	005b      	lsls	r3, r3, #1
 80184e6:	4619      	mov	r1, r3
 80184e8:	68bb      	ldr	r3, [r7, #8]
 80184ea:	440b      	add	r3, r1
 80184ec:	3237      	adds	r2, #55	; 0x37
 80184ee:	b2d2      	uxtb	r2, r2
 80184f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	011b      	lsls	r3, r3, #4
 80184f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80184f8:	7dfb      	ldrb	r3, [r7, #23]
 80184fa:	005b      	lsls	r3, r3, #1
 80184fc:	3301      	adds	r3, #1
 80184fe:	68ba      	ldr	r2, [r7, #8]
 8018500:	4413      	add	r3, r2
 8018502:	2200      	movs	r2, #0
 8018504:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018506:	7dfb      	ldrb	r3, [r7, #23]
 8018508:	3301      	adds	r3, #1
 801850a:	75fb      	strb	r3, [r7, #23]
 801850c:	7dfa      	ldrb	r2, [r7, #23]
 801850e:	79fb      	ldrb	r3, [r7, #7]
 8018510:	429a      	cmp	r2, r3
 8018512:	d3d3      	bcc.n	80184bc <IntToUnicode+0x18>
  }
}
 8018514:	bf00      	nop
 8018516:	bf00      	nop
 8018518:	371c      	adds	r7, #28
 801851a:	46bd      	mov	sp, r7
 801851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018520:	4770      	bx	lr
	...

08018524 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b08a      	sub	sp, #40	; 0x28
 8018528:	af00      	add	r7, sp, #0
 801852a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801852c:	f107 0314 	add.w	r3, r7, #20
 8018530:	2200      	movs	r2, #0
 8018532:	601a      	str	r2, [r3, #0]
 8018534:	605a      	str	r2, [r3, #4]
 8018536:	609a      	str	r2, [r3, #8]
 8018538:	60da      	str	r2, [r3, #12]
 801853a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018544:	d14e      	bne.n	80185e4 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018546:	4b29      	ldr	r3, [pc, #164]	; (80185ec <HAL_PCD_MspInit+0xc8>)
 8018548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801854a:	4a28      	ldr	r2, [pc, #160]	; (80185ec <HAL_PCD_MspInit+0xc8>)
 801854c:	f043 0301 	orr.w	r3, r3, #1
 8018550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018552:	4b26      	ldr	r3, [pc, #152]	; (80185ec <HAL_PCD_MspInit+0xc8>)
 8018554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018556:	f003 0301 	and.w	r3, r3, #1
 801855a:	613b      	str	r3, [r7, #16]
 801855c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 801855e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8018562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018564:	2302      	movs	r3, #2
 8018566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018568:	2300      	movs	r3, #0
 801856a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801856c:	2303      	movs	r3, #3
 801856e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018570:	230a      	movs	r3, #10
 8018572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018574:	f107 0314 	add.w	r3, r7, #20
 8018578:	4619      	mov	r1, r3
 801857a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801857e:	f7f4 f981 	bl	800c884 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018582:	4b1a      	ldr	r3, [pc, #104]	; (80185ec <HAL_PCD_MspInit+0xc8>)
 8018584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018586:	4a19      	ldr	r2, [pc, #100]	; (80185ec <HAL_PCD_MspInit+0xc8>)
 8018588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801858c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801858e:	4b17      	ldr	r3, [pc, #92]	; (80185ec <HAL_PCD_MspInit+0xc8>)
 8018590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018596:	60fb      	str	r3, [r7, #12]
 8018598:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801859a:	4b14      	ldr	r3, [pc, #80]	; (80185ec <HAL_PCD_MspInit+0xc8>)
 801859c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801859e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d114      	bne.n	80185d0 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80185a6:	4b11      	ldr	r3, [pc, #68]	; (80185ec <HAL_PCD_MspInit+0xc8>)
 80185a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80185aa:	4a10      	ldr	r2, [pc, #64]	; (80185ec <HAL_PCD_MspInit+0xc8>)
 80185ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80185b0:	6593      	str	r3, [r2, #88]	; 0x58
 80185b2:	4b0e      	ldr	r3, [pc, #56]	; (80185ec <HAL_PCD_MspInit+0xc8>)
 80185b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80185b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80185ba:	60bb      	str	r3, [r7, #8]
 80185bc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80185be:	f7f7 f81f 	bl	800f600 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80185c2:	4b0a      	ldr	r3, [pc, #40]	; (80185ec <HAL_PCD_MspInit+0xc8>)
 80185c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80185c6:	4a09      	ldr	r2, [pc, #36]	; (80185ec <HAL_PCD_MspInit+0xc8>)
 80185c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80185cc:	6593      	str	r3, [r2, #88]	; 0x58
 80185ce:	e001      	b.n	80185d4 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80185d0:	f7f7 f816 	bl	800f600 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80185d4:	2200      	movs	r2, #0
 80185d6:	2100      	movs	r1, #0
 80185d8:	2043      	movs	r0, #67	; 0x43
 80185da:	f7f3 ff7c 	bl	800c4d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80185de:	2043      	movs	r0, #67	; 0x43
 80185e0:	f7f3 ff95 	bl	800c50e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80185e4:	bf00      	nop
 80185e6:	3728      	adds	r7, #40	; 0x28
 80185e8:	46bd      	mov	sp, r7
 80185ea:	bd80      	pop	{r7, pc}
 80185ec:	40021000 	.word	0x40021000

080185f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80185f0:	b580      	push	{r7, lr}
 80185f2:	b082      	sub	sp, #8
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018604:	4619      	mov	r1, r3
 8018606:	4610      	mov	r0, r2
 8018608:	f7fe fca8 	bl	8016f5c <USBD_LL_SetupStage>
}
 801860c:	bf00      	nop
 801860e:	3708      	adds	r7, #8
 8018610:	46bd      	mov	sp, r7
 8018612:	bd80      	pop	{r7, pc}

08018614 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018614:	b580      	push	{r7, lr}
 8018616:	b082      	sub	sp, #8
 8018618:	af00      	add	r7, sp, #0
 801861a:	6078      	str	r0, [r7, #4]
 801861c:	460b      	mov	r3, r1
 801861e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018626:	78fa      	ldrb	r2, [r7, #3]
 8018628:	6879      	ldr	r1, [r7, #4]
 801862a:	4613      	mov	r3, r2
 801862c:	00db      	lsls	r3, r3, #3
 801862e:	4413      	add	r3, r2
 8018630:	009b      	lsls	r3, r3, #2
 8018632:	440b      	add	r3, r1
 8018634:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8018638:	681a      	ldr	r2, [r3, #0]
 801863a:	78fb      	ldrb	r3, [r7, #3]
 801863c:	4619      	mov	r1, r3
 801863e:	f7fe fce2 	bl	8017006 <USBD_LL_DataOutStage>
}
 8018642:	bf00      	nop
 8018644:	3708      	adds	r7, #8
 8018646:	46bd      	mov	sp, r7
 8018648:	bd80      	pop	{r7, pc}

0801864a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801864a:	b580      	push	{r7, lr}
 801864c:	b082      	sub	sp, #8
 801864e:	af00      	add	r7, sp, #0
 8018650:	6078      	str	r0, [r7, #4]
 8018652:	460b      	mov	r3, r1
 8018654:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801865c:	78fa      	ldrb	r2, [r7, #3]
 801865e:	6879      	ldr	r1, [r7, #4]
 8018660:	4613      	mov	r3, r2
 8018662:	00db      	lsls	r3, r3, #3
 8018664:	4413      	add	r3, r2
 8018666:	009b      	lsls	r3, r3, #2
 8018668:	440b      	add	r3, r1
 801866a:	334c      	adds	r3, #76	; 0x4c
 801866c:	681a      	ldr	r2, [r3, #0]
 801866e:	78fb      	ldrb	r3, [r7, #3]
 8018670:	4619      	mov	r1, r3
 8018672:	f7fe fd2b 	bl	80170cc <USBD_LL_DataInStage>
}
 8018676:	bf00      	nop
 8018678:	3708      	adds	r7, #8
 801867a:	46bd      	mov	sp, r7
 801867c:	bd80      	pop	{r7, pc}

0801867e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801867e:	b580      	push	{r7, lr}
 8018680:	b082      	sub	sp, #8
 8018682:	af00      	add	r7, sp, #0
 8018684:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801868c:	4618      	mov	r0, r3
 801868e:	f7fe fe3f 	bl	8017310 <USBD_LL_SOF>
}
 8018692:	bf00      	nop
 8018694:	3708      	adds	r7, #8
 8018696:	46bd      	mov	sp, r7
 8018698:	bd80      	pop	{r7, pc}

0801869a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801869a:	b580      	push	{r7, lr}
 801869c:	b084      	sub	sp, #16
 801869e:	af00      	add	r7, sp, #0
 80186a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80186a2:	2301      	movs	r3, #1
 80186a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	68db      	ldr	r3, [r3, #12]
 80186aa:	2b02      	cmp	r3, #2
 80186ac:	d001      	beq.n	80186b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80186ae:	f7e9 fc95 	bl	8001fdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80186b8:	7bfa      	ldrb	r2, [r7, #15]
 80186ba:	4611      	mov	r1, r2
 80186bc:	4618      	mov	r0, r3
 80186be:	f7fe fde9 	bl	8017294 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80186c8:	4618      	mov	r0, r3
 80186ca:	f7fe fd95 	bl	80171f8 <USBD_LL_Reset>
}
 80186ce:	bf00      	nop
 80186d0:	3710      	adds	r7, #16
 80186d2:	46bd      	mov	sp, r7
 80186d4:	bd80      	pop	{r7, pc}
	...

080186d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b082      	sub	sp, #8
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	687a      	ldr	r2, [r7, #4]
 80186ec:	6812      	ldr	r2, [r2, #0]
 80186ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80186f2:	f043 0301 	orr.w	r3, r3, #1
 80186f6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80186fe:	4618      	mov	r0, r3
 8018700:	f7fe fdd8 	bl	80172b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	6a1b      	ldr	r3, [r3, #32]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d005      	beq.n	8018718 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801870c:	4b04      	ldr	r3, [pc, #16]	; (8018720 <HAL_PCD_SuspendCallback+0x48>)
 801870e:	691b      	ldr	r3, [r3, #16]
 8018710:	4a03      	ldr	r2, [pc, #12]	; (8018720 <HAL_PCD_SuspendCallback+0x48>)
 8018712:	f043 0306 	orr.w	r3, r3, #6
 8018716:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018718:	bf00      	nop
 801871a:	3708      	adds	r7, #8
 801871c:	46bd      	mov	sp, r7
 801871e:	bd80      	pop	{r7, pc}
 8018720:	e000ed00 	.word	0xe000ed00

08018724 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b082      	sub	sp, #8
 8018728:	af00      	add	r7, sp, #0
 801872a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	687a      	ldr	r2, [r7, #4]
 8018738:	6812      	ldr	r2, [r2, #0]
 801873a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801873e:	f023 0301 	bic.w	r3, r3, #1
 8018742:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	6a1b      	ldr	r3, [r3, #32]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d007      	beq.n	801875c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801874c:	4b08      	ldr	r3, [pc, #32]	; (8018770 <HAL_PCD_ResumeCallback+0x4c>)
 801874e:	691b      	ldr	r3, [r3, #16]
 8018750:	4a07      	ldr	r2, [pc, #28]	; (8018770 <HAL_PCD_ResumeCallback+0x4c>)
 8018752:	f023 0306 	bic.w	r3, r3, #6
 8018756:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8018758:	f000 faf6 	bl	8018d48 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018762:	4618      	mov	r0, r3
 8018764:	f7fe fdbc 	bl	80172e0 <USBD_LL_Resume>
}
 8018768:	bf00      	nop
 801876a:	3708      	adds	r7, #8
 801876c:	46bd      	mov	sp, r7
 801876e:	bd80      	pop	{r7, pc}
 8018770:	e000ed00 	.word	0xe000ed00

08018774 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018774:	b580      	push	{r7, lr}
 8018776:	b082      	sub	sp, #8
 8018778:	af00      	add	r7, sp, #0
 801877a:	6078      	str	r0, [r7, #4]
 801877c:	460b      	mov	r3, r1
 801877e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018786:	78fa      	ldrb	r2, [r7, #3]
 8018788:	4611      	mov	r1, r2
 801878a:	4618      	mov	r0, r3
 801878c:	f7fe fe08 	bl	80173a0 <USBD_LL_IsoOUTIncomplete>
}
 8018790:	bf00      	nop
 8018792:	3708      	adds	r7, #8
 8018794:	46bd      	mov	sp, r7
 8018796:	bd80      	pop	{r7, pc}

08018798 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018798:	b580      	push	{r7, lr}
 801879a:	b082      	sub	sp, #8
 801879c:	af00      	add	r7, sp, #0
 801879e:	6078      	str	r0, [r7, #4]
 80187a0:	460b      	mov	r3, r1
 80187a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80187aa:	78fa      	ldrb	r2, [r7, #3]
 80187ac:	4611      	mov	r1, r2
 80187ae:	4618      	mov	r0, r3
 80187b0:	f7fe fdd0 	bl	8017354 <USBD_LL_IsoINIncomplete>
}
 80187b4:	bf00      	nop
 80187b6:	3708      	adds	r7, #8
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd80      	pop	{r7, pc}

080187bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187bc:	b580      	push	{r7, lr}
 80187be:	b082      	sub	sp, #8
 80187c0:	af00      	add	r7, sp, #0
 80187c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80187ca:	4618      	mov	r0, r3
 80187cc:	f7fe fe0e 	bl	80173ec <USBD_LL_DevConnected>
}
 80187d0:	bf00      	nop
 80187d2:	3708      	adds	r7, #8
 80187d4:	46bd      	mov	sp, r7
 80187d6:	bd80      	pop	{r7, pc}

080187d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187d8:	b580      	push	{r7, lr}
 80187da:	b082      	sub	sp, #8
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80187e6:	4618      	mov	r0, r3
 80187e8:	f7fe fe0b 	bl	8017402 <USBD_LL_DevDisconnected>
}
 80187ec:	bf00      	nop
 80187ee:	3708      	adds	r7, #8
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}

080187f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b082      	sub	sp, #8
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	781b      	ldrb	r3, [r3, #0]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d13c      	bne.n	801887e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018804:	4a20      	ldr	r2, [pc, #128]	; (8018888 <USBD_LL_Init+0x94>)
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	4a1e      	ldr	r2, [pc, #120]	; (8018888 <USBD_LL_Init+0x94>)
 8018810:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018814:	4b1c      	ldr	r3, [pc, #112]	; (8018888 <USBD_LL_Init+0x94>)
 8018816:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801881a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801881c:	4b1a      	ldr	r3, [pc, #104]	; (8018888 <USBD_LL_Init+0x94>)
 801881e:	2206      	movs	r2, #6
 8018820:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018822:	4b19      	ldr	r3, [pc, #100]	; (8018888 <USBD_LL_Init+0x94>)
 8018824:	2202      	movs	r2, #2
 8018826:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018828:	4b17      	ldr	r3, [pc, #92]	; (8018888 <USBD_LL_Init+0x94>)
 801882a:	2202      	movs	r2, #2
 801882c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801882e:	4b16      	ldr	r3, [pc, #88]	; (8018888 <USBD_LL_Init+0x94>)
 8018830:	2200      	movs	r2, #0
 8018832:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018834:	4b14      	ldr	r3, [pc, #80]	; (8018888 <USBD_LL_Init+0x94>)
 8018836:	2200      	movs	r2, #0
 8018838:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801883a:	4b13      	ldr	r3, [pc, #76]	; (8018888 <USBD_LL_Init+0x94>)
 801883c:	2200      	movs	r2, #0
 801883e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8018840:	4b11      	ldr	r3, [pc, #68]	; (8018888 <USBD_LL_Init+0x94>)
 8018842:	2200      	movs	r2, #0
 8018844:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018846:	4b10      	ldr	r3, [pc, #64]	; (8018888 <USBD_LL_Init+0x94>)
 8018848:	2200      	movs	r2, #0
 801884a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801884c:	4b0e      	ldr	r3, [pc, #56]	; (8018888 <USBD_LL_Init+0x94>)
 801884e:	2200      	movs	r2, #0
 8018850:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018852:	480d      	ldr	r0, [pc, #52]	; (8018888 <USBD_LL_Init+0x94>)
 8018854:	f7f5 fc6d 	bl	800e132 <HAL_PCD_Init>
 8018858:	4603      	mov	r3, r0
 801885a:	2b00      	cmp	r3, #0
 801885c:	d001      	beq.n	8018862 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801885e:	f7e9 fbbd 	bl	8001fdc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018862:	2180      	movs	r1, #128	; 0x80
 8018864:	4808      	ldr	r0, [pc, #32]	; (8018888 <USBD_LL_Init+0x94>)
 8018866:	f7f6 fdee 	bl	800f446 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801886a:	2240      	movs	r2, #64	; 0x40
 801886c:	2100      	movs	r1, #0
 801886e:	4806      	ldr	r0, [pc, #24]	; (8018888 <USBD_LL_Init+0x94>)
 8018870:	f7f6 fda2 	bl	800f3b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018874:	2280      	movs	r2, #128	; 0x80
 8018876:	2101      	movs	r1, #1
 8018878:	4803      	ldr	r0, [pc, #12]	; (8018888 <USBD_LL_Init+0x94>)
 801887a:	f7f6 fd9d 	bl	800f3b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801887e:	2300      	movs	r3, #0
}
 8018880:	4618      	mov	r0, r3
 8018882:	3708      	adds	r7, #8
 8018884:	46bd      	mov	sp, r7
 8018886:	bd80      	pop	{r7, pc}
 8018888:	200026f0 	.word	0x200026f0

0801888c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b084      	sub	sp, #16
 8018890:	af00      	add	r7, sp, #0
 8018892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018894:	2300      	movs	r3, #0
 8018896:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018898:	2300      	movs	r3, #0
 801889a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80188a2:	4618      	mov	r0, r3
 80188a4:	f7f5 fd69 	bl	800e37a <HAL_PCD_Start>
 80188a8:	4603      	mov	r3, r0
 80188aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80188ac:	7bbb      	ldrb	r3, [r7, #14]
 80188ae:	2b03      	cmp	r3, #3
 80188b0:	d816      	bhi.n	80188e0 <USBD_LL_Start+0x54>
 80188b2:	a201      	add	r2, pc, #4	; (adr r2, 80188b8 <USBD_LL_Start+0x2c>)
 80188b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188b8:	080188c9 	.word	0x080188c9
 80188bc:	080188cf 	.word	0x080188cf
 80188c0:	080188d5 	.word	0x080188d5
 80188c4:	080188db 	.word	0x080188db
    case HAL_OK :
      usb_status = USBD_OK;
 80188c8:	2300      	movs	r3, #0
 80188ca:	73fb      	strb	r3, [r7, #15]
    break;
 80188cc:	e00b      	b.n	80188e6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80188ce:	2303      	movs	r3, #3
 80188d0:	73fb      	strb	r3, [r7, #15]
    break;
 80188d2:	e008      	b.n	80188e6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80188d4:	2301      	movs	r3, #1
 80188d6:	73fb      	strb	r3, [r7, #15]
    break;
 80188d8:	e005      	b.n	80188e6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80188da:	2303      	movs	r3, #3
 80188dc:	73fb      	strb	r3, [r7, #15]
    break;
 80188de:	e002      	b.n	80188e6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80188e0:	2303      	movs	r3, #3
 80188e2:	73fb      	strb	r3, [r7, #15]
    break;
 80188e4:	bf00      	nop
  }
  return usb_status;
 80188e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80188e8:	4618      	mov	r0, r3
 80188ea:	3710      	adds	r7, #16
 80188ec:	46bd      	mov	sp, r7
 80188ee:	bd80      	pop	{r7, pc}

080188f0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b084      	sub	sp, #16
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	6078      	str	r0, [r7, #4]
 80188f8:	4608      	mov	r0, r1
 80188fa:	4611      	mov	r1, r2
 80188fc:	461a      	mov	r2, r3
 80188fe:	4603      	mov	r3, r0
 8018900:	70fb      	strb	r3, [r7, #3]
 8018902:	460b      	mov	r3, r1
 8018904:	70bb      	strb	r3, [r7, #2]
 8018906:	4613      	mov	r3, r2
 8018908:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801890a:	2300      	movs	r3, #0
 801890c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801890e:	2300      	movs	r3, #0
 8018910:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018918:	78bb      	ldrb	r3, [r7, #2]
 801891a:	883a      	ldrh	r2, [r7, #0]
 801891c:	78f9      	ldrb	r1, [r7, #3]
 801891e:	f7f6 fa13 	bl	800ed48 <HAL_PCD_EP_Open>
 8018922:	4603      	mov	r3, r0
 8018924:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018926:	7bbb      	ldrb	r3, [r7, #14]
 8018928:	2b03      	cmp	r3, #3
 801892a:	d817      	bhi.n	801895c <USBD_LL_OpenEP+0x6c>
 801892c:	a201      	add	r2, pc, #4	; (adr r2, 8018934 <USBD_LL_OpenEP+0x44>)
 801892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018932:	bf00      	nop
 8018934:	08018945 	.word	0x08018945
 8018938:	0801894b 	.word	0x0801894b
 801893c:	08018951 	.word	0x08018951
 8018940:	08018957 	.word	0x08018957
    case HAL_OK :
      usb_status = USBD_OK;
 8018944:	2300      	movs	r3, #0
 8018946:	73fb      	strb	r3, [r7, #15]
    break;
 8018948:	e00b      	b.n	8018962 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801894a:	2303      	movs	r3, #3
 801894c:	73fb      	strb	r3, [r7, #15]
    break;
 801894e:	e008      	b.n	8018962 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018950:	2301      	movs	r3, #1
 8018952:	73fb      	strb	r3, [r7, #15]
    break;
 8018954:	e005      	b.n	8018962 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018956:	2303      	movs	r3, #3
 8018958:	73fb      	strb	r3, [r7, #15]
    break;
 801895a:	e002      	b.n	8018962 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 801895c:	2303      	movs	r3, #3
 801895e:	73fb      	strb	r3, [r7, #15]
    break;
 8018960:	bf00      	nop
  }
  return usb_status;
 8018962:	7bfb      	ldrb	r3, [r7, #15]
}
 8018964:	4618      	mov	r0, r3
 8018966:	3710      	adds	r7, #16
 8018968:	46bd      	mov	sp, r7
 801896a:	bd80      	pop	{r7, pc}

0801896c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b084      	sub	sp, #16
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
 8018974:	460b      	mov	r3, r1
 8018976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018978:	2300      	movs	r3, #0
 801897a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801897c:	2300      	movs	r3, #0
 801897e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018986:	78fa      	ldrb	r2, [r7, #3]
 8018988:	4611      	mov	r1, r2
 801898a:	4618      	mov	r0, r3
 801898c:	f7f6 fa44 	bl	800ee18 <HAL_PCD_EP_Close>
 8018990:	4603      	mov	r3, r0
 8018992:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018994:	7bbb      	ldrb	r3, [r7, #14]
 8018996:	2b03      	cmp	r3, #3
 8018998:	d816      	bhi.n	80189c8 <USBD_LL_CloseEP+0x5c>
 801899a:	a201      	add	r2, pc, #4	; (adr r2, 80189a0 <USBD_LL_CloseEP+0x34>)
 801899c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189a0:	080189b1 	.word	0x080189b1
 80189a4:	080189b7 	.word	0x080189b7
 80189a8:	080189bd 	.word	0x080189bd
 80189ac:	080189c3 	.word	0x080189c3
    case HAL_OK :
      usb_status = USBD_OK;
 80189b0:	2300      	movs	r3, #0
 80189b2:	73fb      	strb	r3, [r7, #15]
    break;
 80189b4:	e00b      	b.n	80189ce <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80189b6:	2303      	movs	r3, #3
 80189b8:	73fb      	strb	r3, [r7, #15]
    break;
 80189ba:	e008      	b.n	80189ce <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80189bc:	2301      	movs	r3, #1
 80189be:	73fb      	strb	r3, [r7, #15]
    break;
 80189c0:	e005      	b.n	80189ce <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80189c2:	2303      	movs	r3, #3
 80189c4:	73fb      	strb	r3, [r7, #15]
    break;
 80189c6:	e002      	b.n	80189ce <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80189c8:	2303      	movs	r3, #3
 80189ca:	73fb      	strb	r3, [r7, #15]
    break;
 80189cc:	bf00      	nop
  }
  return usb_status;
 80189ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80189d0:	4618      	mov	r0, r3
 80189d2:	3710      	adds	r7, #16
 80189d4:	46bd      	mov	sp, r7
 80189d6:	bd80      	pop	{r7, pc}

080189d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80189d8:	b580      	push	{r7, lr}
 80189da:	b084      	sub	sp, #16
 80189dc:	af00      	add	r7, sp, #0
 80189de:	6078      	str	r0, [r7, #4]
 80189e0:	460b      	mov	r3, r1
 80189e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80189e4:	2300      	movs	r3, #0
 80189e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80189e8:	2300      	movs	r3, #0
 80189ea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80189f2:	78fa      	ldrb	r2, [r7, #3]
 80189f4:	4611      	mov	r1, r2
 80189f6:	4618      	mov	r0, r3
 80189f8:	f7f6 faeb 	bl	800efd2 <HAL_PCD_EP_SetStall>
 80189fc:	4603      	mov	r3, r0
 80189fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018a00:	7bbb      	ldrb	r3, [r7, #14]
 8018a02:	2b03      	cmp	r3, #3
 8018a04:	d816      	bhi.n	8018a34 <USBD_LL_StallEP+0x5c>
 8018a06:	a201      	add	r2, pc, #4	; (adr r2, 8018a0c <USBD_LL_StallEP+0x34>)
 8018a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a0c:	08018a1d 	.word	0x08018a1d
 8018a10:	08018a23 	.word	0x08018a23
 8018a14:	08018a29 	.word	0x08018a29
 8018a18:	08018a2f 	.word	0x08018a2f
    case HAL_OK :
      usb_status = USBD_OK;
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8018a20:	e00b      	b.n	8018a3a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018a22:	2303      	movs	r3, #3
 8018a24:	73fb      	strb	r3, [r7, #15]
    break;
 8018a26:	e008      	b.n	8018a3a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018a28:	2301      	movs	r3, #1
 8018a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8018a2c:	e005      	b.n	8018a3a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018a2e:	2303      	movs	r3, #3
 8018a30:	73fb      	strb	r3, [r7, #15]
    break;
 8018a32:	e002      	b.n	8018a3a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8018a34:	2303      	movs	r3, #3
 8018a36:	73fb      	strb	r3, [r7, #15]
    break;
 8018a38:	bf00      	nop
  }
  return usb_status;
 8018a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a3c:	4618      	mov	r0, r3
 8018a3e:	3710      	adds	r7, #16
 8018a40:	46bd      	mov	sp, r7
 8018a42:	bd80      	pop	{r7, pc}

08018a44 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018a44:	b580      	push	{r7, lr}
 8018a46:	b084      	sub	sp, #16
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	6078      	str	r0, [r7, #4]
 8018a4c:	460b      	mov	r3, r1
 8018a4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a50:	2300      	movs	r3, #0
 8018a52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a54:	2300      	movs	r3, #0
 8018a56:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018a5e:	78fa      	ldrb	r2, [r7, #3]
 8018a60:	4611      	mov	r1, r2
 8018a62:	4618      	mov	r0, r3
 8018a64:	f7f6 fb17 	bl	800f096 <HAL_PCD_EP_ClrStall>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018a6c:	7bbb      	ldrb	r3, [r7, #14]
 8018a6e:	2b03      	cmp	r3, #3
 8018a70:	d816      	bhi.n	8018aa0 <USBD_LL_ClearStallEP+0x5c>
 8018a72:	a201      	add	r2, pc, #4	; (adr r2, 8018a78 <USBD_LL_ClearStallEP+0x34>)
 8018a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a78:	08018a89 	.word	0x08018a89
 8018a7c:	08018a8f 	.word	0x08018a8f
 8018a80:	08018a95 	.word	0x08018a95
 8018a84:	08018a9b 	.word	0x08018a9b
    case HAL_OK :
      usb_status = USBD_OK;
 8018a88:	2300      	movs	r3, #0
 8018a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8018a8c:	e00b      	b.n	8018aa6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018a8e:	2303      	movs	r3, #3
 8018a90:	73fb      	strb	r3, [r7, #15]
    break;
 8018a92:	e008      	b.n	8018aa6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018a94:	2301      	movs	r3, #1
 8018a96:	73fb      	strb	r3, [r7, #15]
    break;
 8018a98:	e005      	b.n	8018aa6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018a9a:	2303      	movs	r3, #3
 8018a9c:	73fb      	strb	r3, [r7, #15]
    break;
 8018a9e:	e002      	b.n	8018aa6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8018aa0:	2303      	movs	r3, #3
 8018aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8018aa4:	bf00      	nop
  }
  return usb_status;
 8018aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	3710      	adds	r7, #16
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd80      	pop	{r7, pc}

08018ab0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018ab0:	b480      	push	{r7}
 8018ab2:	b085      	sub	sp, #20
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
 8018ab8:	460b      	mov	r3, r1
 8018aba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018ac2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018ac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	da0b      	bge.n	8018ae4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018acc:	78fb      	ldrb	r3, [r7, #3]
 8018ace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018ad2:	68f9      	ldr	r1, [r7, #12]
 8018ad4:	4613      	mov	r3, r2
 8018ad6:	00db      	lsls	r3, r3, #3
 8018ad8:	4413      	add	r3, r2
 8018ada:	009b      	lsls	r3, r3, #2
 8018adc:	440b      	add	r3, r1
 8018ade:	333e      	adds	r3, #62	; 0x3e
 8018ae0:	781b      	ldrb	r3, [r3, #0]
 8018ae2:	e00b      	b.n	8018afc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018ae4:	78fb      	ldrb	r3, [r7, #3]
 8018ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018aea:	68f9      	ldr	r1, [r7, #12]
 8018aec:	4613      	mov	r3, r2
 8018aee:	00db      	lsls	r3, r3, #3
 8018af0:	4413      	add	r3, r2
 8018af2:	009b      	lsls	r3, r3, #2
 8018af4:	440b      	add	r3, r1
 8018af6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8018afa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018afc:	4618      	mov	r0, r3
 8018afe:	3714      	adds	r7, #20
 8018b00:	46bd      	mov	sp, r7
 8018b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b06:	4770      	bx	lr

08018b08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018b08:	b580      	push	{r7, lr}
 8018b0a:	b084      	sub	sp, #16
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
 8018b10:	460b      	mov	r3, r1
 8018b12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b14:	2300      	movs	r3, #0
 8018b16:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b18:	2300      	movs	r3, #0
 8018b1a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018b22:	78fa      	ldrb	r2, [r7, #3]
 8018b24:	4611      	mov	r1, r2
 8018b26:	4618      	mov	r0, r3
 8018b28:	f7f6 f8e9 	bl	800ecfe <HAL_PCD_SetAddress>
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018b30:	7bbb      	ldrb	r3, [r7, #14]
 8018b32:	2b03      	cmp	r3, #3
 8018b34:	d816      	bhi.n	8018b64 <USBD_LL_SetUSBAddress+0x5c>
 8018b36:	a201      	add	r2, pc, #4	; (adr r2, 8018b3c <USBD_LL_SetUSBAddress+0x34>)
 8018b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b3c:	08018b4d 	.word	0x08018b4d
 8018b40:	08018b53 	.word	0x08018b53
 8018b44:	08018b59 	.word	0x08018b59
 8018b48:	08018b5f 	.word	0x08018b5f
    case HAL_OK :
      usb_status = USBD_OK;
 8018b4c:	2300      	movs	r3, #0
 8018b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8018b50:	e00b      	b.n	8018b6a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018b52:	2303      	movs	r3, #3
 8018b54:	73fb      	strb	r3, [r7, #15]
    break;
 8018b56:	e008      	b.n	8018b6a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018b58:	2301      	movs	r3, #1
 8018b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8018b5c:	e005      	b.n	8018b6a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018b5e:	2303      	movs	r3, #3
 8018b60:	73fb      	strb	r3, [r7, #15]
    break;
 8018b62:	e002      	b.n	8018b6a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8018b64:	2303      	movs	r3, #3
 8018b66:	73fb      	strb	r3, [r7, #15]
    break;
 8018b68:	bf00      	nop
  }
  return usb_status;
 8018b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	3710      	adds	r7, #16
 8018b70:	46bd      	mov	sp, r7
 8018b72:	bd80      	pop	{r7, pc}

08018b74 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018b74:	b580      	push	{r7, lr}
 8018b76:	b086      	sub	sp, #24
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	60f8      	str	r0, [r7, #12]
 8018b7c:	607a      	str	r2, [r7, #4]
 8018b7e:	603b      	str	r3, [r7, #0]
 8018b80:	460b      	mov	r3, r1
 8018b82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b84:	2300      	movs	r3, #0
 8018b86:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b88:	2300      	movs	r3, #0
 8018b8a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018b92:	7af9      	ldrb	r1, [r7, #11]
 8018b94:	683b      	ldr	r3, [r7, #0]
 8018b96:	687a      	ldr	r2, [r7, #4]
 8018b98:	f7f6 f9de 	bl	800ef58 <HAL_PCD_EP_Transmit>
 8018b9c:	4603      	mov	r3, r0
 8018b9e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8018ba0:	7dbb      	ldrb	r3, [r7, #22]
 8018ba2:	2b03      	cmp	r3, #3
 8018ba4:	d816      	bhi.n	8018bd4 <USBD_LL_Transmit+0x60>
 8018ba6:	a201      	add	r2, pc, #4	; (adr r2, 8018bac <USBD_LL_Transmit+0x38>)
 8018ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bac:	08018bbd 	.word	0x08018bbd
 8018bb0:	08018bc3 	.word	0x08018bc3
 8018bb4:	08018bc9 	.word	0x08018bc9
 8018bb8:	08018bcf 	.word	0x08018bcf
    case HAL_OK :
      usb_status = USBD_OK;
 8018bbc:	2300      	movs	r3, #0
 8018bbe:	75fb      	strb	r3, [r7, #23]
    break;
 8018bc0:	e00b      	b.n	8018bda <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018bc2:	2303      	movs	r3, #3
 8018bc4:	75fb      	strb	r3, [r7, #23]
    break;
 8018bc6:	e008      	b.n	8018bda <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018bc8:	2301      	movs	r3, #1
 8018bca:	75fb      	strb	r3, [r7, #23]
    break;
 8018bcc:	e005      	b.n	8018bda <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018bce:	2303      	movs	r3, #3
 8018bd0:	75fb      	strb	r3, [r7, #23]
    break;
 8018bd2:	e002      	b.n	8018bda <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8018bd4:	2303      	movs	r3, #3
 8018bd6:	75fb      	strb	r3, [r7, #23]
    break;
 8018bd8:	bf00      	nop
  }
  return usb_status;
 8018bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8018bdc:	4618      	mov	r0, r3
 8018bde:	3718      	adds	r7, #24
 8018be0:	46bd      	mov	sp, r7
 8018be2:	bd80      	pop	{r7, pc}

08018be4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b086      	sub	sp, #24
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	60f8      	str	r0, [r7, #12]
 8018bec:	607a      	str	r2, [r7, #4]
 8018bee:	603b      	str	r3, [r7, #0]
 8018bf0:	460b      	mov	r3, r1
 8018bf2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018bf4:	2300      	movs	r3, #0
 8018bf6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018c02:	7af9      	ldrb	r1, [r7, #11]
 8018c04:	683b      	ldr	r3, [r7, #0]
 8018c06:	687a      	ldr	r2, [r7, #4]
 8018c08:	f7f6 f950 	bl	800eeac <HAL_PCD_EP_Receive>
 8018c0c:	4603      	mov	r3, r0
 8018c0e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8018c10:	7dbb      	ldrb	r3, [r7, #22]
 8018c12:	2b03      	cmp	r3, #3
 8018c14:	d816      	bhi.n	8018c44 <USBD_LL_PrepareReceive+0x60>
 8018c16:	a201      	add	r2, pc, #4	; (adr r2, 8018c1c <USBD_LL_PrepareReceive+0x38>)
 8018c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c1c:	08018c2d 	.word	0x08018c2d
 8018c20:	08018c33 	.word	0x08018c33
 8018c24:	08018c39 	.word	0x08018c39
 8018c28:	08018c3f 	.word	0x08018c3f
    case HAL_OK :
      usb_status = USBD_OK;
 8018c2c:	2300      	movs	r3, #0
 8018c2e:	75fb      	strb	r3, [r7, #23]
    break;
 8018c30:	e00b      	b.n	8018c4a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018c32:	2303      	movs	r3, #3
 8018c34:	75fb      	strb	r3, [r7, #23]
    break;
 8018c36:	e008      	b.n	8018c4a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018c38:	2301      	movs	r3, #1
 8018c3a:	75fb      	strb	r3, [r7, #23]
    break;
 8018c3c:	e005      	b.n	8018c4a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018c3e:	2303      	movs	r3, #3
 8018c40:	75fb      	strb	r3, [r7, #23]
    break;
 8018c42:	e002      	b.n	8018c4a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8018c44:	2303      	movs	r3, #3
 8018c46:	75fb      	strb	r3, [r7, #23]
    break;
 8018c48:	bf00      	nop
  }
  return usb_status;
 8018c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	3718      	adds	r7, #24
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}

08018c54 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018c54:	b580      	push	{r7, lr}
 8018c56:	b082      	sub	sp, #8
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	6078      	str	r0, [r7, #4]
 8018c5c:	460b      	mov	r3, r1
 8018c5e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018c66:	78fa      	ldrb	r2, [r7, #3]
 8018c68:	4611      	mov	r1, r2
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	f7f6 f95c 	bl	800ef28 <HAL_PCD_EP_GetRxCount>
 8018c70:	4603      	mov	r3, r0
}
 8018c72:	4618      	mov	r0, r3
 8018c74:	3708      	adds	r7, #8
 8018c76:	46bd      	mov	sp, r7
 8018c78:	bd80      	pop	{r7, pc}
	...

08018c7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b082      	sub	sp, #8
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
 8018c84:	460b      	mov	r3, r1
 8018c86:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8018c88:	78fb      	ldrb	r3, [r7, #3]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d002      	beq.n	8018c94 <HAL_PCDEx_LPM_Callback+0x18>
 8018c8e:	2b01      	cmp	r3, #1
 8018c90:	d01f      	beq.n	8018cd2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8018c92:	e03b      	b.n	8018d0c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	6a1b      	ldr	r3, [r3, #32]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d007      	beq.n	8018cac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8018c9c:	f000 f854 	bl	8018d48 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018ca0:	4b1c      	ldr	r3, [pc, #112]	; (8018d14 <HAL_PCDEx_LPM_Callback+0x98>)
 8018ca2:	691b      	ldr	r3, [r3, #16]
 8018ca4:	4a1b      	ldr	r2, [pc, #108]	; (8018d14 <HAL_PCDEx_LPM_Callback+0x98>)
 8018ca6:	f023 0306 	bic.w	r3, r3, #6
 8018caa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	687a      	ldr	r2, [r7, #4]
 8018cb8:	6812      	ldr	r2, [r2, #0]
 8018cba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018cbe:	f023 0301 	bic.w	r3, r3, #1
 8018cc2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018cca:	4618      	mov	r0, r3
 8018ccc:	f7fe fb08 	bl	80172e0 <USBD_LL_Resume>
    break;
 8018cd0:	e01c      	b.n	8018d0c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	687a      	ldr	r2, [r7, #4]
 8018cde:	6812      	ldr	r2, [r2, #0]
 8018ce0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018ce4:	f043 0301 	orr.w	r3, r3, #1
 8018ce8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	f7fe fadf 	bl	80172b4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	6a1b      	ldr	r3, [r3, #32]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d005      	beq.n	8018d0a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018cfe:	4b05      	ldr	r3, [pc, #20]	; (8018d14 <HAL_PCDEx_LPM_Callback+0x98>)
 8018d00:	691b      	ldr	r3, [r3, #16]
 8018d02:	4a04      	ldr	r2, [pc, #16]	; (8018d14 <HAL_PCDEx_LPM_Callback+0x98>)
 8018d04:	f043 0306 	orr.w	r3, r3, #6
 8018d08:	6113      	str	r3, [r2, #16]
    break;
 8018d0a:	bf00      	nop
}
 8018d0c:	bf00      	nop
 8018d0e:	3708      	adds	r7, #8
 8018d10:	46bd      	mov	sp, r7
 8018d12:	bd80      	pop	{r7, pc}
 8018d14:	e000ed00 	.word	0xe000ed00

08018d18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018d18:	b480      	push	{r7}
 8018d1a:	b083      	sub	sp, #12
 8018d1c:	af00      	add	r7, sp, #0
 8018d1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018d20:	4b03      	ldr	r3, [pc, #12]	; (8018d30 <USBD_static_malloc+0x18>)
}
 8018d22:	4618      	mov	r0, r3
 8018d24:	370c      	adds	r7, #12
 8018d26:	46bd      	mov	sp, r7
 8018d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2c:	4770      	bx	lr
 8018d2e:	bf00      	nop
 8018d30:	20002bfc 	.word	0x20002bfc

08018d34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018d34:	b480      	push	{r7}
 8018d36:	b083      	sub	sp, #12
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	6078      	str	r0, [r7, #4]

}
 8018d3c:	bf00      	nop
 8018d3e:	370c      	adds	r7, #12
 8018d40:	46bd      	mov	sp, r7
 8018d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d46:	4770      	bx	lr

08018d48 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8018d48:	b580      	push	{r7, lr}
 8018d4a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8018d4c:	f7e8 feaa 	bl	8001aa4 <SystemClock_Config>
}
 8018d50:	bf00      	nop
 8018d52:	bd80      	pop	{r7, pc}

08018d54 <__errno>:
 8018d54:	4b01      	ldr	r3, [pc, #4]	; (8018d5c <__errno+0x8>)
 8018d56:	6818      	ldr	r0, [r3, #0]
 8018d58:	4770      	bx	lr
 8018d5a:	bf00      	nop
 8018d5c:	200006e0 	.word	0x200006e0

08018d60 <__libc_init_array>:
 8018d60:	b570      	push	{r4, r5, r6, lr}
 8018d62:	4d0d      	ldr	r5, [pc, #52]	; (8018d98 <__libc_init_array+0x38>)
 8018d64:	4c0d      	ldr	r4, [pc, #52]	; (8018d9c <__libc_init_array+0x3c>)
 8018d66:	1b64      	subs	r4, r4, r5
 8018d68:	10a4      	asrs	r4, r4, #2
 8018d6a:	2600      	movs	r6, #0
 8018d6c:	42a6      	cmp	r6, r4
 8018d6e:	d109      	bne.n	8018d84 <__libc_init_array+0x24>
 8018d70:	4d0b      	ldr	r5, [pc, #44]	; (8018da0 <__libc_init_array+0x40>)
 8018d72:	4c0c      	ldr	r4, [pc, #48]	; (8018da4 <__libc_init_array+0x44>)
 8018d74:	f001 f83a 	bl	8019dec <_init>
 8018d78:	1b64      	subs	r4, r4, r5
 8018d7a:	10a4      	asrs	r4, r4, #2
 8018d7c:	2600      	movs	r6, #0
 8018d7e:	42a6      	cmp	r6, r4
 8018d80:	d105      	bne.n	8018d8e <__libc_init_array+0x2e>
 8018d82:	bd70      	pop	{r4, r5, r6, pc}
 8018d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8018d88:	4798      	blx	r3
 8018d8a:	3601      	adds	r6, #1
 8018d8c:	e7ee      	b.n	8018d6c <__libc_init_array+0xc>
 8018d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018d92:	4798      	blx	r3
 8018d94:	3601      	adds	r6, #1
 8018d96:	e7f2      	b.n	8018d7e <__libc_init_array+0x1e>
 8018d98:	0801bf64 	.word	0x0801bf64
 8018d9c:	0801bf64 	.word	0x0801bf64
 8018da0:	0801bf64 	.word	0x0801bf64
 8018da4:	0801bf68 	.word	0x0801bf68

08018da8 <memcpy>:
 8018da8:	440a      	add	r2, r1
 8018daa:	4291      	cmp	r1, r2
 8018dac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018db0:	d100      	bne.n	8018db4 <memcpy+0xc>
 8018db2:	4770      	bx	lr
 8018db4:	b510      	push	{r4, lr}
 8018db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018dbe:	4291      	cmp	r1, r2
 8018dc0:	d1f9      	bne.n	8018db6 <memcpy+0xe>
 8018dc2:	bd10      	pop	{r4, pc}

08018dc4 <memset>:
 8018dc4:	4402      	add	r2, r0
 8018dc6:	4603      	mov	r3, r0
 8018dc8:	4293      	cmp	r3, r2
 8018dca:	d100      	bne.n	8018dce <memset+0xa>
 8018dcc:	4770      	bx	lr
 8018dce:	f803 1b01 	strb.w	r1, [r3], #1
 8018dd2:	e7f9      	b.n	8018dc8 <memset+0x4>

08018dd4 <_free_r>:
 8018dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018dd6:	2900      	cmp	r1, #0
 8018dd8:	d044      	beq.n	8018e64 <_free_r+0x90>
 8018dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018dde:	9001      	str	r0, [sp, #4]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	f1a1 0404 	sub.w	r4, r1, #4
 8018de6:	bfb8      	it	lt
 8018de8:	18e4      	addlt	r4, r4, r3
 8018dea:	f000 fc59 	bl	80196a0 <__malloc_lock>
 8018dee:	4a1e      	ldr	r2, [pc, #120]	; (8018e68 <_free_r+0x94>)
 8018df0:	9801      	ldr	r0, [sp, #4]
 8018df2:	6813      	ldr	r3, [r2, #0]
 8018df4:	b933      	cbnz	r3, 8018e04 <_free_r+0x30>
 8018df6:	6063      	str	r3, [r4, #4]
 8018df8:	6014      	str	r4, [r2, #0]
 8018dfa:	b003      	add	sp, #12
 8018dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018e00:	f000 bc54 	b.w	80196ac <__malloc_unlock>
 8018e04:	42a3      	cmp	r3, r4
 8018e06:	d908      	bls.n	8018e1a <_free_r+0x46>
 8018e08:	6825      	ldr	r5, [r4, #0]
 8018e0a:	1961      	adds	r1, r4, r5
 8018e0c:	428b      	cmp	r3, r1
 8018e0e:	bf01      	itttt	eq
 8018e10:	6819      	ldreq	r1, [r3, #0]
 8018e12:	685b      	ldreq	r3, [r3, #4]
 8018e14:	1949      	addeq	r1, r1, r5
 8018e16:	6021      	streq	r1, [r4, #0]
 8018e18:	e7ed      	b.n	8018df6 <_free_r+0x22>
 8018e1a:	461a      	mov	r2, r3
 8018e1c:	685b      	ldr	r3, [r3, #4]
 8018e1e:	b10b      	cbz	r3, 8018e24 <_free_r+0x50>
 8018e20:	42a3      	cmp	r3, r4
 8018e22:	d9fa      	bls.n	8018e1a <_free_r+0x46>
 8018e24:	6811      	ldr	r1, [r2, #0]
 8018e26:	1855      	adds	r5, r2, r1
 8018e28:	42a5      	cmp	r5, r4
 8018e2a:	d10b      	bne.n	8018e44 <_free_r+0x70>
 8018e2c:	6824      	ldr	r4, [r4, #0]
 8018e2e:	4421      	add	r1, r4
 8018e30:	1854      	adds	r4, r2, r1
 8018e32:	42a3      	cmp	r3, r4
 8018e34:	6011      	str	r1, [r2, #0]
 8018e36:	d1e0      	bne.n	8018dfa <_free_r+0x26>
 8018e38:	681c      	ldr	r4, [r3, #0]
 8018e3a:	685b      	ldr	r3, [r3, #4]
 8018e3c:	6053      	str	r3, [r2, #4]
 8018e3e:	4421      	add	r1, r4
 8018e40:	6011      	str	r1, [r2, #0]
 8018e42:	e7da      	b.n	8018dfa <_free_r+0x26>
 8018e44:	d902      	bls.n	8018e4c <_free_r+0x78>
 8018e46:	230c      	movs	r3, #12
 8018e48:	6003      	str	r3, [r0, #0]
 8018e4a:	e7d6      	b.n	8018dfa <_free_r+0x26>
 8018e4c:	6825      	ldr	r5, [r4, #0]
 8018e4e:	1961      	adds	r1, r4, r5
 8018e50:	428b      	cmp	r3, r1
 8018e52:	bf04      	itt	eq
 8018e54:	6819      	ldreq	r1, [r3, #0]
 8018e56:	685b      	ldreq	r3, [r3, #4]
 8018e58:	6063      	str	r3, [r4, #4]
 8018e5a:	bf04      	itt	eq
 8018e5c:	1949      	addeq	r1, r1, r5
 8018e5e:	6021      	streq	r1, [r4, #0]
 8018e60:	6054      	str	r4, [r2, #4]
 8018e62:	e7ca      	b.n	8018dfa <_free_r+0x26>
 8018e64:	b003      	add	sp, #12
 8018e66:	bd30      	pop	{r4, r5, pc}
 8018e68:	20002e1c 	.word	0x20002e1c

08018e6c <sbrk_aligned>:
 8018e6c:	b570      	push	{r4, r5, r6, lr}
 8018e6e:	4e0e      	ldr	r6, [pc, #56]	; (8018ea8 <sbrk_aligned+0x3c>)
 8018e70:	460c      	mov	r4, r1
 8018e72:	6831      	ldr	r1, [r6, #0]
 8018e74:	4605      	mov	r5, r0
 8018e76:	b911      	cbnz	r1, 8018e7e <sbrk_aligned+0x12>
 8018e78:	f000 f91a 	bl	80190b0 <_sbrk_r>
 8018e7c:	6030      	str	r0, [r6, #0]
 8018e7e:	4621      	mov	r1, r4
 8018e80:	4628      	mov	r0, r5
 8018e82:	f000 f915 	bl	80190b0 <_sbrk_r>
 8018e86:	1c43      	adds	r3, r0, #1
 8018e88:	d00a      	beq.n	8018ea0 <sbrk_aligned+0x34>
 8018e8a:	1cc4      	adds	r4, r0, #3
 8018e8c:	f024 0403 	bic.w	r4, r4, #3
 8018e90:	42a0      	cmp	r0, r4
 8018e92:	d007      	beq.n	8018ea4 <sbrk_aligned+0x38>
 8018e94:	1a21      	subs	r1, r4, r0
 8018e96:	4628      	mov	r0, r5
 8018e98:	f000 f90a 	bl	80190b0 <_sbrk_r>
 8018e9c:	3001      	adds	r0, #1
 8018e9e:	d101      	bne.n	8018ea4 <sbrk_aligned+0x38>
 8018ea0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018ea4:	4620      	mov	r0, r4
 8018ea6:	bd70      	pop	{r4, r5, r6, pc}
 8018ea8:	20002e20 	.word	0x20002e20

08018eac <_malloc_r>:
 8018eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018eb0:	1ccd      	adds	r5, r1, #3
 8018eb2:	f025 0503 	bic.w	r5, r5, #3
 8018eb6:	3508      	adds	r5, #8
 8018eb8:	2d0c      	cmp	r5, #12
 8018eba:	bf38      	it	cc
 8018ebc:	250c      	movcc	r5, #12
 8018ebe:	2d00      	cmp	r5, #0
 8018ec0:	4607      	mov	r7, r0
 8018ec2:	db01      	blt.n	8018ec8 <_malloc_r+0x1c>
 8018ec4:	42a9      	cmp	r1, r5
 8018ec6:	d905      	bls.n	8018ed4 <_malloc_r+0x28>
 8018ec8:	230c      	movs	r3, #12
 8018eca:	603b      	str	r3, [r7, #0]
 8018ecc:	2600      	movs	r6, #0
 8018ece:	4630      	mov	r0, r6
 8018ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ed4:	4e2e      	ldr	r6, [pc, #184]	; (8018f90 <_malloc_r+0xe4>)
 8018ed6:	f000 fbe3 	bl	80196a0 <__malloc_lock>
 8018eda:	6833      	ldr	r3, [r6, #0]
 8018edc:	461c      	mov	r4, r3
 8018ede:	bb34      	cbnz	r4, 8018f2e <_malloc_r+0x82>
 8018ee0:	4629      	mov	r1, r5
 8018ee2:	4638      	mov	r0, r7
 8018ee4:	f7ff ffc2 	bl	8018e6c <sbrk_aligned>
 8018ee8:	1c43      	adds	r3, r0, #1
 8018eea:	4604      	mov	r4, r0
 8018eec:	d14d      	bne.n	8018f8a <_malloc_r+0xde>
 8018eee:	6834      	ldr	r4, [r6, #0]
 8018ef0:	4626      	mov	r6, r4
 8018ef2:	2e00      	cmp	r6, #0
 8018ef4:	d140      	bne.n	8018f78 <_malloc_r+0xcc>
 8018ef6:	6823      	ldr	r3, [r4, #0]
 8018ef8:	4631      	mov	r1, r6
 8018efa:	4638      	mov	r0, r7
 8018efc:	eb04 0803 	add.w	r8, r4, r3
 8018f00:	f000 f8d6 	bl	80190b0 <_sbrk_r>
 8018f04:	4580      	cmp	r8, r0
 8018f06:	d13a      	bne.n	8018f7e <_malloc_r+0xd2>
 8018f08:	6821      	ldr	r1, [r4, #0]
 8018f0a:	3503      	adds	r5, #3
 8018f0c:	1a6d      	subs	r5, r5, r1
 8018f0e:	f025 0503 	bic.w	r5, r5, #3
 8018f12:	3508      	adds	r5, #8
 8018f14:	2d0c      	cmp	r5, #12
 8018f16:	bf38      	it	cc
 8018f18:	250c      	movcc	r5, #12
 8018f1a:	4629      	mov	r1, r5
 8018f1c:	4638      	mov	r0, r7
 8018f1e:	f7ff ffa5 	bl	8018e6c <sbrk_aligned>
 8018f22:	3001      	adds	r0, #1
 8018f24:	d02b      	beq.n	8018f7e <_malloc_r+0xd2>
 8018f26:	6823      	ldr	r3, [r4, #0]
 8018f28:	442b      	add	r3, r5
 8018f2a:	6023      	str	r3, [r4, #0]
 8018f2c:	e00e      	b.n	8018f4c <_malloc_r+0xa0>
 8018f2e:	6822      	ldr	r2, [r4, #0]
 8018f30:	1b52      	subs	r2, r2, r5
 8018f32:	d41e      	bmi.n	8018f72 <_malloc_r+0xc6>
 8018f34:	2a0b      	cmp	r2, #11
 8018f36:	d916      	bls.n	8018f66 <_malloc_r+0xba>
 8018f38:	1961      	adds	r1, r4, r5
 8018f3a:	42a3      	cmp	r3, r4
 8018f3c:	6025      	str	r5, [r4, #0]
 8018f3e:	bf18      	it	ne
 8018f40:	6059      	strne	r1, [r3, #4]
 8018f42:	6863      	ldr	r3, [r4, #4]
 8018f44:	bf08      	it	eq
 8018f46:	6031      	streq	r1, [r6, #0]
 8018f48:	5162      	str	r2, [r4, r5]
 8018f4a:	604b      	str	r3, [r1, #4]
 8018f4c:	4638      	mov	r0, r7
 8018f4e:	f104 060b 	add.w	r6, r4, #11
 8018f52:	f000 fbab 	bl	80196ac <__malloc_unlock>
 8018f56:	f026 0607 	bic.w	r6, r6, #7
 8018f5a:	1d23      	adds	r3, r4, #4
 8018f5c:	1af2      	subs	r2, r6, r3
 8018f5e:	d0b6      	beq.n	8018ece <_malloc_r+0x22>
 8018f60:	1b9b      	subs	r3, r3, r6
 8018f62:	50a3      	str	r3, [r4, r2]
 8018f64:	e7b3      	b.n	8018ece <_malloc_r+0x22>
 8018f66:	6862      	ldr	r2, [r4, #4]
 8018f68:	42a3      	cmp	r3, r4
 8018f6a:	bf0c      	ite	eq
 8018f6c:	6032      	streq	r2, [r6, #0]
 8018f6e:	605a      	strne	r2, [r3, #4]
 8018f70:	e7ec      	b.n	8018f4c <_malloc_r+0xa0>
 8018f72:	4623      	mov	r3, r4
 8018f74:	6864      	ldr	r4, [r4, #4]
 8018f76:	e7b2      	b.n	8018ede <_malloc_r+0x32>
 8018f78:	4634      	mov	r4, r6
 8018f7a:	6876      	ldr	r6, [r6, #4]
 8018f7c:	e7b9      	b.n	8018ef2 <_malloc_r+0x46>
 8018f7e:	230c      	movs	r3, #12
 8018f80:	603b      	str	r3, [r7, #0]
 8018f82:	4638      	mov	r0, r7
 8018f84:	f000 fb92 	bl	80196ac <__malloc_unlock>
 8018f88:	e7a1      	b.n	8018ece <_malloc_r+0x22>
 8018f8a:	6025      	str	r5, [r4, #0]
 8018f8c:	e7de      	b.n	8018f4c <_malloc_r+0xa0>
 8018f8e:	bf00      	nop
 8018f90:	20002e1c 	.word	0x20002e1c

08018f94 <iprintf>:
 8018f94:	b40f      	push	{r0, r1, r2, r3}
 8018f96:	4b0a      	ldr	r3, [pc, #40]	; (8018fc0 <iprintf+0x2c>)
 8018f98:	b513      	push	{r0, r1, r4, lr}
 8018f9a:	681c      	ldr	r4, [r3, #0]
 8018f9c:	b124      	cbz	r4, 8018fa8 <iprintf+0x14>
 8018f9e:	69a3      	ldr	r3, [r4, #24]
 8018fa0:	b913      	cbnz	r3, 8018fa8 <iprintf+0x14>
 8018fa2:	4620      	mov	r0, r4
 8018fa4:	f000 fa76 	bl	8019494 <__sinit>
 8018fa8:	ab05      	add	r3, sp, #20
 8018faa:	9a04      	ldr	r2, [sp, #16]
 8018fac:	68a1      	ldr	r1, [r4, #8]
 8018fae:	9301      	str	r3, [sp, #4]
 8018fb0:	4620      	mov	r0, r4
 8018fb2:	f000 fbab 	bl	801970c <_vfiprintf_r>
 8018fb6:	b002      	add	sp, #8
 8018fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018fbc:	b004      	add	sp, #16
 8018fbe:	4770      	bx	lr
 8018fc0:	200006e0 	.word	0x200006e0

08018fc4 <_puts_r>:
 8018fc4:	b570      	push	{r4, r5, r6, lr}
 8018fc6:	460e      	mov	r6, r1
 8018fc8:	4605      	mov	r5, r0
 8018fca:	b118      	cbz	r0, 8018fd4 <_puts_r+0x10>
 8018fcc:	6983      	ldr	r3, [r0, #24]
 8018fce:	b90b      	cbnz	r3, 8018fd4 <_puts_r+0x10>
 8018fd0:	f000 fa60 	bl	8019494 <__sinit>
 8018fd4:	69ab      	ldr	r3, [r5, #24]
 8018fd6:	68ac      	ldr	r4, [r5, #8]
 8018fd8:	b913      	cbnz	r3, 8018fe0 <_puts_r+0x1c>
 8018fda:	4628      	mov	r0, r5
 8018fdc:	f000 fa5a 	bl	8019494 <__sinit>
 8018fe0:	4b2c      	ldr	r3, [pc, #176]	; (8019094 <_puts_r+0xd0>)
 8018fe2:	429c      	cmp	r4, r3
 8018fe4:	d120      	bne.n	8019028 <_puts_r+0x64>
 8018fe6:	686c      	ldr	r4, [r5, #4]
 8018fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018fea:	07db      	lsls	r3, r3, #31
 8018fec:	d405      	bmi.n	8018ffa <_puts_r+0x36>
 8018fee:	89a3      	ldrh	r3, [r4, #12]
 8018ff0:	0598      	lsls	r0, r3, #22
 8018ff2:	d402      	bmi.n	8018ffa <_puts_r+0x36>
 8018ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018ff6:	f000 faeb 	bl	80195d0 <__retarget_lock_acquire_recursive>
 8018ffa:	89a3      	ldrh	r3, [r4, #12]
 8018ffc:	0719      	lsls	r1, r3, #28
 8018ffe:	d51d      	bpl.n	801903c <_puts_r+0x78>
 8019000:	6923      	ldr	r3, [r4, #16]
 8019002:	b1db      	cbz	r3, 801903c <_puts_r+0x78>
 8019004:	3e01      	subs	r6, #1
 8019006:	68a3      	ldr	r3, [r4, #8]
 8019008:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801900c:	3b01      	subs	r3, #1
 801900e:	60a3      	str	r3, [r4, #8]
 8019010:	bb39      	cbnz	r1, 8019062 <_puts_r+0x9e>
 8019012:	2b00      	cmp	r3, #0
 8019014:	da38      	bge.n	8019088 <_puts_r+0xc4>
 8019016:	4622      	mov	r2, r4
 8019018:	210a      	movs	r1, #10
 801901a:	4628      	mov	r0, r5
 801901c:	f000 f860 	bl	80190e0 <__swbuf_r>
 8019020:	3001      	adds	r0, #1
 8019022:	d011      	beq.n	8019048 <_puts_r+0x84>
 8019024:	250a      	movs	r5, #10
 8019026:	e011      	b.n	801904c <_puts_r+0x88>
 8019028:	4b1b      	ldr	r3, [pc, #108]	; (8019098 <_puts_r+0xd4>)
 801902a:	429c      	cmp	r4, r3
 801902c:	d101      	bne.n	8019032 <_puts_r+0x6e>
 801902e:	68ac      	ldr	r4, [r5, #8]
 8019030:	e7da      	b.n	8018fe8 <_puts_r+0x24>
 8019032:	4b1a      	ldr	r3, [pc, #104]	; (801909c <_puts_r+0xd8>)
 8019034:	429c      	cmp	r4, r3
 8019036:	bf08      	it	eq
 8019038:	68ec      	ldreq	r4, [r5, #12]
 801903a:	e7d5      	b.n	8018fe8 <_puts_r+0x24>
 801903c:	4621      	mov	r1, r4
 801903e:	4628      	mov	r0, r5
 8019040:	f000 f8a0 	bl	8019184 <__swsetup_r>
 8019044:	2800      	cmp	r0, #0
 8019046:	d0dd      	beq.n	8019004 <_puts_r+0x40>
 8019048:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801904c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801904e:	07da      	lsls	r2, r3, #31
 8019050:	d405      	bmi.n	801905e <_puts_r+0x9a>
 8019052:	89a3      	ldrh	r3, [r4, #12]
 8019054:	059b      	lsls	r3, r3, #22
 8019056:	d402      	bmi.n	801905e <_puts_r+0x9a>
 8019058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801905a:	f000 faba 	bl	80195d2 <__retarget_lock_release_recursive>
 801905e:	4628      	mov	r0, r5
 8019060:	bd70      	pop	{r4, r5, r6, pc}
 8019062:	2b00      	cmp	r3, #0
 8019064:	da04      	bge.n	8019070 <_puts_r+0xac>
 8019066:	69a2      	ldr	r2, [r4, #24]
 8019068:	429a      	cmp	r2, r3
 801906a:	dc06      	bgt.n	801907a <_puts_r+0xb6>
 801906c:	290a      	cmp	r1, #10
 801906e:	d004      	beq.n	801907a <_puts_r+0xb6>
 8019070:	6823      	ldr	r3, [r4, #0]
 8019072:	1c5a      	adds	r2, r3, #1
 8019074:	6022      	str	r2, [r4, #0]
 8019076:	7019      	strb	r1, [r3, #0]
 8019078:	e7c5      	b.n	8019006 <_puts_r+0x42>
 801907a:	4622      	mov	r2, r4
 801907c:	4628      	mov	r0, r5
 801907e:	f000 f82f 	bl	80190e0 <__swbuf_r>
 8019082:	3001      	adds	r0, #1
 8019084:	d1bf      	bne.n	8019006 <_puts_r+0x42>
 8019086:	e7df      	b.n	8019048 <_puts_r+0x84>
 8019088:	6823      	ldr	r3, [r4, #0]
 801908a:	250a      	movs	r5, #10
 801908c:	1c5a      	adds	r2, r3, #1
 801908e:	6022      	str	r2, [r4, #0]
 8019090:	701d      	strb	r5, [r3, #0]
 8019092:	e7db      	b.n	801904c <_puts_r+0x88>
 8019094:	0801bee8 	.word	0x0801bee8
 8019098:	0801bf08 	.word	0x0801bf08
 801909c:	0801bec8 	.word	0x0801bec8

080190a0 <puts>:
 80190a0:	4b02      	ldr	r3, [pc, #8]	; (80190ac <puts+0xc>)
 80190a2:	4601      	mov	r1, r0
 80190a4:	6818      	ldr	r0, [r3, #0]
 80190a6:	f7ff bf8d 	b.w	8018fc4 <_puts_r>
 80190aa:	bf00      	nop
 80190ac:	200006e0 	.word	0x200006e0

080190b0 <_sbrk_r>:
 80190b0:	b538      	push	{r3, r4, r5, lr}
 80190b2:	4d06      	ldr	r5, [pc, #24]	; (80190cc <_sbrk_r+0x1c>)
 80190b4:	2300      	movs	r3, #0
 80190b6:	4604      	mov	r4, r0
 80190b8:	4608      	mov	r0, r1
 80190ba:	602b      	str	r3, [r5, #0]
 80190bc:	f7e9 fbe0 	bl	8002880 <_sbrk>
 80190c0:	1c43      	adds	r3, r0, #1
 80190c2:	d102      	bne.n	80190ca <_sbrk_r+0x1a>
 80190c4:	682b      	ldr	r3, [r5, #0]
 80190c6:	b103      	cbz	r3, 80190ca <_sbrk_r+0x1a>
 80190c8:	6023      	str	r3, [r4, #0]
 80190ca:	bd38      	pop	{r3, r4, r5, pc}
 80190cc:	20002e28 	.word	0x20002e28

080190d0 <strcpy>:
 80190d0:	4603      	mov	r3, r0
 80190d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80190d6:	f803 2b01 	strb.w	r2, [r3], #1
 80190da:	2a00      	cmp	r2, #0
 80190dc:	d1f9      	bne.n	80190d2 <strcpy+0x2>
 80190de:	4770      	bx	lr

080190e0 <__swbuf_r>:
 80190e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190e2:	460e      	mov	r6, r1
 80190e4:	4614      	mov	r4, r2
 80190e6:	4605      	mov	r5, r0
 80190e8:	b118      	cbz	r0, 80190f2 <__swbuf_r+0x12>
 80190ea:	6983      	ldr	r3, [r0, #24]
 80190ec:	b90b      	cbnz	r3, 80190f2 <__swbuf_r+0x12>
 80190ee:	f000 f9d1 	bl	8019494 <__sinit>
 80190f2:	4b21      	ldr	r3, [pc, #132]	; (8019178 <__swbuf_r+0x98>)
 80190f4:	429c      	cmp	r4, r3
 80190f6:	d12b      	bne.n	8019150 <__swbuf_r+0x70>
 80190f8:	686c      	ldr	r4, [r5, #4]
 80190fa:	69a3      	ldr	r3, [r4, #24]
 80190fc:	60a3      	str	r3, [r4, #8]
 80190fe:	89a3      	ldrh	r3, [r4, #12]
 8019100:	071a      	lsls	r2, r3, #28
 8019102:	d52f      	bpl.n	8019164 <__swbuf_r+0x84>
 8019104:	6923      	ldr	r3, [r4, #16]
 8019106:	b36b      	cbz	r3, 8019164 <__swbuf_r+0x84>
 8019108:	6923      	ldr	r3, [r4, #16]
 801910a:	6820      	ldr	r0, [r4, #0]
 801910c:	1ac0      	subs	r0, r0, r3
 801910e:	6963      	ldr	r3, [r4, #20]
 8019110:	b2f6      	uxtb	r6, r6
 8019112:	4283      	cmp	r3, r0
 8019114:	4637      	mov	r7, r6
 8019116:	dc04      	bgt.n	8019122 <__swbuf_r+0x42>
 8019118:	4621      	mov	r1, r4
 801911a:	4628      	mov	r0, r5
 801911c:	f000 f926 	bl	801936c <_fflush_r>
 8019120:	bb30      	cbnz	r0, 8019170 <__swbuf_r+0x90>
 8019122:	68a3      	ldr	r3, [r4, #8]
 8019124:	3b01      	subs	r3, #1
 8019126:	60a3      	str	r3, [r4, #8]
 8019128:	6823      	ldr	r3, [r4, #0]
 801912a:	1c5a      	adds	r2, r3, #1
 801912c:	6022      	str	r2, [r4, #0]
 801912e:	701e      	strb	r6, [r3, #0]
 8019130:	6963      	ldr	r3, [r4, #20]
 8019132:	3001      	adds	r0, #1
 8019134:	4283      	cmp	r3, r0
 8019136:	d004      	beq.n	8019142 <__swbuf_r+0x62>
 8019138:	89a3      	ldrh	r3, [r4, #12]
 801913a:	07db      	lsls	r3, r3, #31
 801913c:	d506      	bpl.n	801914c <__swbuf_r+0x6c>
 801913e:	2e0a      	cmp	r6, #10
 8019140:	d104      	bne.n	801914c <__swbuf_r+0x6c>
 8019142:	4621      	mov	r1, r4
 8019144:	4628      	mov	r0, r5
 8019146:	f000 f911 	bl	801936c <_fflush_r>
 801914a:	b988      	cbnz	r0, 8019170 <__swbuf_r+0x90>
 801914c:	4638      	mov	r0, r7
 801914e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019150:	4b0a      	ldr	r3, [pc, #40]	; (801917c <__swbuf_r+0x9c>)
 8019152:	429c      	cmp	r4, r3
 8019154:	d101      	bne.n	801915a <__swbuf_r+0x7a>
 8019156:	68ac      	ldr	r4, [r5, #8]
 8019158:	e7cf      	b.n	80190fa <__swbuf_r+0x1a>
 801915a:	4b09      	ldr	r3, [pc, #36]	; (8019180 <__swbuf_r+0xa0>)
 801915c:	429c      	cmp	r4, r3
 801915e:	bf08      	it	eq
 8019160:	68ec      	ldreq	r4, [r5, #12]
 8019162:	e7ca      	b.n	80190fa <__swbuf_r+0x1a>
 8019164:	4621      	mov	r1, r4
 8019166:	4628      	mov	r0, r5
 8019168:	f000 f80c 	bl	8019184 <__swsetup_r>
 801916c:	2800      	cmp	r0, #0
 801916e:	d0cb      	beq.n	8019108 <__swbuf_r+0x28>
 8019170:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019174:	e7ea      	b.n	801914c <__swbuf_r+0x6c>
 8019176:	bf00      	nop
 8019178:	0801bee8 	.word	0x0801bee8
 801917c:	0801bf08 	.word	0x0801bf08
 8019180:	0801bec8 	.word	0x0801bec8

08019184 <__swsetup_r>:
 8019184:	4b32      	ldr	r3, [pc, #200]	; (8019250 <__swsetup_r+0xcc>)
 8019186:	b570      	push	{r4, r5, r6, lr}
 8019188:	681d      	ldr	r5, [r3, #0]
 801918a:	4606      	mov	r6, r0
 801918c:	460c      	mov	r4, r1
 801918e:	b125      	cbz	r5, 801919a <__swsetup_r+0x16>
 8019190:	69ab      	ldr	r3, [r5, #24]
 8019192:	b913      	cbnz	r3, 801919a <__swsetup_r+0x16>
 8019194:	4628      	mov	r0, r5
 8019196:	f000 f97d 	bl	8019494 <__sinit>
 801919a:	4b2e      	ldr	r3, [pc, #184]	; (8019254 <__swsetup_r+0xd0>)
 801919c:	429c      	cmp	r4, r3
 801919e:	d10f      	bne.n	80191c0 <__swsetup_r+0x3c>
 80191a0:	686c      	ldr	r4, [r5, #4]
 80191a2:	89a3      	ldrh	r3, [r4, #12]
 80191a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80191a8:	0719      	lsls	r1, r3, #28
 80191aa:	d42c      	bmi.n	8019206 <__swsetup_r+0x82>
 80191ac:	06dd      	lsls	r5, r3, #27
 80191ae:	d411      	bmi.n	80191d4 <__swsetup_r+0x50>
 80191b0:	2309      	movs	r3, #9
 80191b2:	6033      	str	r3, [r6, #0]
 80191b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80191b8:	81a3      	strh	r3, [r4, #12]
 80191ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80191be:	e03e      	b.n	801923e <__swsetup_r+0xba>
 80191c0:	4b25      	ldr	r3, [pc, #148]	; (8019258 <__swsetup_r+0xd4>)
 80191c2:	429c      	cmp	r4, r3
 80191c4:	d101      	bne.n	80191ca <__swsetup_r+0x46>
 80191c6:	68ac      	ldr	r4, [r5, #8]
 80191c8:	e7eb      	b.n	80191a2 <__swsetup_r+0x1e>
 80191ca:	4b24      	ldr	r3, [pc, #144]	; (801925c <__swsetup_r+0xd8>)
 80191cc:	429c      	cmp	r4, r3
 80191ce:	bf08      	it	eq
 80191d0:	68ec      	ldreq	r4, [r5, #12]
 80191d2:	e7e6      	b.n	80191a2 <__swsetup_r+0x1e>
 80191d4:	0758      	lsls	r0, r3, #29
 80191d6:	d512      	bpl.n	80191fe <__swsetup_r+0x7a>
 80191d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80191da:	b141      	cbz	r1, 80191ee <__swsetup_r+0x6a>
 80191dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80191e0:	4299      	cmp	r1, r3
 80191e2:	d002      	beq.n	80191ea <__swsetup_r+0x66>
 80191e4:	4630      	mov	r0, r6
 80191e6:	f7ff fdf5 	bl	8018dd4 <_free_r>
 80191ea:	2300      	movs	r3, #0
 80191ec:	6363      	str	r3, [r4, #52]	; 0x34
 80191ee:	89a3      	ldrh	r3, [r4, #12]
 80191f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80191f4:	81a3      	strh	r3, [r4, #12]
 80191f6:	2300      	movs	r3, #0
 80191f8:	6063      	str	r3, [r4, #4]
 80191fa:	6923      	ldr	r3, [r4, #16]
 80191fc:	6023      	str	r3, [r4, #0]
 80191fe:	89a3      	ldrh	r3, [r4, #12]
 8019200:	f043 0308 	orr.w	r3, r3, #8
 8019204:	81a3      	strh	r3, [r4, #12]
 8019206:	6923      	ldr	r3, [r4, #16]
 8019208:	b94b      	cbnz	r3, 801921e <__swsetup_r+0x9a>
 801920a:	89a3      	ldrh	r3, [r4, #12]
 801920c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019214:	d003      	beq.n	801921e <__swsetup_r+0x9a>
 8019216:	4621      	mov	r1, r4
 8019218:	4630      	mov	r0, r6
 801921a:	f000 fa01 	bl	8019620 <__smakebuf_r>
 801921e:	89a0      	ldrh	r0, [r4, #12]
 8019220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019224:	f010 0301 	ands.w	r3, r0, #1
 8019228:	d00a      	beq.n	8019240 <__swsetup_r+0xbc>
 801922a:	2300      	movs	r3, #0
 801922c:	60a3      	str	r3, [r4, #8]
 801922e:	6963      	ldr	r3, [r4, #20]
 8019230:	425b      	negs	r3, r3
 8019232:	61a3      	str	r3, [r4, #24]
 8019234:	6923      	ldr	r3, [r4, #16]
 8019236:	b943      	cbnz	r3, 801924a <__swsetup_r+0xc6>
 8019238:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801923c:	d1ba      	bne.n	80191b4 <__swsetup_r+0x30>
 801923e:	bd70      	pop	{r4, r5, r6, pc}
 8019240:	0781      	lsls	r1, r0, #30
 8019242:	bf58      	it	pl
 8019244:	6963      	ldrpl	r3, [r4, #20]
 8019246:	60a3      	str	r3, [r4, #8]
 8019248:	e7f4      	b.n	8019234 <__swsetup_r+0xb0>
 801924a:	2000      	movs	r0, #0
 801924c:	e7f7      	b.n	801923e <__swsetup_r+0xba>
 801924e:	bf00      	nop
 8019250:	200006e0 	.word	0x200006e0
 8019254:	0801bee8 	.word	0x0801bee8
 8019258:	0801bf08 	.word	0x0801bf08
 801925c:	0801bec8 	.word	0x0801bec8

08019260 <__sflush_r>:
 8019260:	898a      	ldrh	r2, [r1, #12]
 8019262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019266:	4605      	mov	r5, r0
 8019268:	0710      	lsls	r0, r2, #28
 801926a:	460c      	mov	r4, r1
 801926c:	d458      	bmi.n	8019320 <__sflush_r+0xc0>
 801926e:	684b      	ldr	r3, [r1, #4]
 8019270:	2b00      	cmp	r3, #0
 8019272:	dc05      	bgt.n	8019280 <__sflush_r+0x20>
 8019274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019276:	2b00      	cmp	r3, #0
 8019278:	dc02      	bgt.n	8019280 <__sflush_r+0x20>
 801927a:	2000      	movs	r0, #0
 801927c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019282:	2e00      	cmp	r6, #0
 8019284:	d0f9      	beq.n	801927a <__sflush_r+0x1a>
 8019286:	2300      	movs	r3, #0
 8019288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801928c:	682f      	ldr	r7, [r5, #0]
 801928e:	602b      	str	r3, [r5, #0]
 8019290:	d032      	beq.n	80192f8 <__sflush_r+0x98>
 8019292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019294:	89a3      	ldrh	r3, [r4, #12]
 8019296:	075a      	lsls	r2, r3, #29
 8019298:	d505      	bpl.n	80192a6 <__sflush_r+0x46>
 801929a:	6863      	ldr	r3, [r4, #4]
 801929c:	1ac0      	subs	r0, r0, r3
 801929e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80192a0:	b10b      	cbz	r3, 80192a6 <__sflush_r+0x46>
 80192a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80192a4:	1ac0      	subs	r0, r0, r3
 80192a6:	2300      	movs	r3, #0
 80192a8:	4602      	mov	r2, r0
 80192aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80192ac:	6a21      	ldr	r1, [r4, #32]
 80192ae:	4628      	mov	r0, r5
 80192b0:	47b0      	blx	r6
 80192b2:	1c43      	adds	r3, r0, #1
 80192b4:	89a3      	ldrh	r3, [r4, #12]
 80192b6:	d106      	bne.n	80192c6 <__sflush_r+0x66>
 80192b8:	6829      	ldr	r1, [r5, #0]
 80192ba:	291d      	cmp	r1, #29
 80192bc:	d82c      	bhi.n	8019318 <__sflush_r+0xb8>
 80192be:	4a2a      	ldr	r2, [pc, #168]	; (8019368 <__sflush_r+0x108>)
 80192c0:	40ca      	lsrs	r2, r1
 80192c2:	07d6      	lsls	r6, r2, #31
 80192c4:	d528      	bpl.n	8019318 <__sflush_r+0xb8>
 80192c6:	2200      	movs	r2, #0
 80192c8:	6062      	str	r2, [r4, #4]
 80192ca:	04d9      	lsls	r1, r3, #19
 80192cc:	6922      	ldr	r2, [r4, #16]
 80192ce:	6022      	str	r2, [r4, #0]
 80192d0:	d504      	bpl.n	80192dc <__sflush_r+0x7c>
 80192d2:	1c42      	adds	r2, r0, #1
 80192d4:	d101      	bne.n	80192da <__sflush_r+0x7a>
 80192d6:	682b      	ldr	r3, [r5, #0]
 80192d8:	b903      	cbnz	r3, 80192dc <__sflush_r+0x7c>
 80192da:	6560      	str	r0, [r4, #84]	; 0x54
 80192dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80192de:	602f      	str	r7, [r5, #0]
 80192e0:	2900      	cmp	r1, #0
 80192e2:	d0ca      	beq.n	801927a <__sflush_r+0x1a>
 80192e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80192e8:	4299      	cmp	r1, r3
 80192ea:	d002      	beq.n	80192f2 <__sflush_r+0x92>
 80192ec:	4628      	mov	r0, r5
 80192ee:	f7ff fd71 	bl	8018dd4 <_free_r>
 80192f2:	2000      	movs	r0, #0
 80192f4:	6360      	str	r0, [r4, #52]	; 0x34
 80192f6:	e7c1      	b.n	801927c <__sflush_r+0x1c>
 80192f8:	6a21      	ldr	r1, [r4, #32]
 80192fa:	2301      	movs	r3, #1
 80192fc:	4628      	mov	r0, r5
 80192fe:	47b0      	blx	r6
 8019300:	1c41      	adds	r1, r0, #1
 8019302:	d1c7      	bne.n	8019294 <__sflush_r+0x34>
 8019304:	682b      	ldr	r3, [r5, #0]
 8019306:	2b00      	cmp	r3, #0
 8019308:	d0c4      	beq.n	8019294 <__sflush_r+0x34>
 801930a:	2b1d      	cmp	r3, #29
 801930c:	d001      	beq.n	8019312 <__sflush_r+0xb2>
 801930e:	2b16      	cmp	r3, #22
 8019310:	d101      	bne.n	8019316 <__sflush_r+0xb6>
 8019312:	602f      	str	r7, [r5, #0]
 8019314:	e7b1      	b.n	801927a <__sflush_r+0x1a>
 8019316:	89a3      	ldrh	r3, [r4, #12]
 8019318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801931c:	81a3      	strh	r3, [r4, #12]
 801931e:	e7ad      	b.n	801927c <__sflush_r+0x1c>
 8019320:	690f      	ldr	r7, [r1, #16]
 8019322:	2f00      	cmp	r7, #0
 8019324:	d0a9      	beq.n	801927a <__sflush_r+0x1a>
 8019326:	0793      	lsls	r3, r2, #30
 8019328:	680e      	ldr	r6, [r1, #0]
 801932a:	bf08      	it	eq
 801932c:	694b      	ldreq	r3, [r1, #20]
 801932e:	600f      	str	r7, [r1, #0]
 8019330:	bf18      	it	ne
 8019332:	2300      	movne	r3, #0
 8019334:	eba6 0807 	sub.w	r8, r6, r7
 8019338:	608b      	str	r3, [r1, #8]
 801933a:	f1b8 0f00 	cmp.w	r8, #0
 801933e:	dd9c      	ble.n	801927a <__sflush_r+0x1a>
 8019340:	6a21      	ldr	r1, [r4, #32]
 8019342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019344:	4643      	mov	r3, r8
 8019346:	463a      	mov	r2, r7
 8019348:	4628      	mov	r0, r5
 801934a:	47b0      	blx	r6
 801934c:	2800      	cmp	r0, #0
 801934e:	dc06      	bgt.n	801935e <__sflush_r+0xfe>
 8019350:	89a3      	ldrh	r3, [r4, #12]
 8019352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019356:	81a3      	strh	r3, [r4, #12]
 8019358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801935c:	e78e      	b.n	801927c <__sflush_r+0x1c>
 801935e:	4407      	add	r7, r0
 8019360:	eba8 0800 	sub.w	r8, r8, r0
 8019364:	e7e9      	b.n	801933a <__sflush_r+0xda>
 8019366:	bf00      	nop
 8019368:	20400001 	.word	0x20400001

0801936c <_fflush_r>:
 801936c:	b538      	push	{r3, r4, r5, lr}
 801936e:	690b      	ldr	r3, [r1, #16]
 8019370:	4605      	mov	r5, r0
 8019372:	460c      	mov	r4, r1
 8019374:	b913      	cbnz	r3, 801937c <_fflush_r+0x10>
 8019376:	2500      	movs	r5, #0
 8019378:	4628      	mov	r0, r5
 801937a:	bd38      	pop	{r3, r4, r5, pc}
 801937c:	b118      	cbz	r0, 8019386 <_fflush_r+0x1a>
 801937e:	6983      	ldr	r3, [r0, #24]
 8019380:	b90b      	cbnz	r3, 8019386 <_fflush_r+0x1a>
 8019382:	f000 f887 	bl	8019494 <__sinit>
 8019386:	4b14      	ldr	r3, [pc, #80]	; (80193d8 <_fflush_r+0x6c>)
 8019388:	429c      	cmp	r4, r3
 801938a:	d11b      	bne.n	80193c4 <_fflush_r+0x58>
 801938c:	686c      	ldr	r4, [r5, #4]
 801938e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019392:	2b00      	cmp	r3, #0
 8019394:	d0ef      	beq.n	8019376 <_fflush_r+0xa>
 8019396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019398:	07d0      	lsls	r0, r2, #31
 801939a:	d404      	bmi.n	80193a6 <_fflush_r+0x3a>
 801939c:	0599      	lsls	r1, r3, #22
 801939e:	d402      	bmi.n	80193a6 <_fflush_r+0x3a>
 80193a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80193a2:	f000 f915 	bl	80195d0 <__retarget_lock_acquire_recursive>
 80193a6:	4628      	mov	r0, r5
 80193a8:	4621      	mov	r1, r4
 80193aa:	f7ff ff59 	bl	8019260 <__sflush_r>
 80193ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80193b0:	07da      	lsls	r2, r3, #31
 80193b2:	4605      	mov	r5, r0
 80193b4:	d4e0      	bmi.n	8019378 <_fflush_r+0xc>
 80193b6:	89a3      	ldrh	r3, [r4, #12]
 80193b8:	059b      	lsls	r3, r3, #22
 80193ba:	d4dd      	bmi.n	8019378 <_fflush_r+0xc>
 80193bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80193be:	f000 f908 	bl	80195d2 <__retarget_lock_release_recursive>
 80193c2:	e7d9      	b.n	8019378 <_fflush_r+0xc>
 80193c4:	4b05      	ldr	r3, [pc, #20]	; (80193dc <_fflush_r+0x70>)
 80193c6:	429c      	cmp	r4, r3
 80193c8:	d101      	bne.n	80193ce <_fflush_r+0x62>
 80193ca:	68ac      	ldr	r4, [r5, #8]
 80193cc:	e7df      	b.n	801938e <_fflush_r+0x22>
 80193ce:	4b04      	ldr	r3, [pc, #16]	; (80193e0 <_fflush_r+0x74>)
 80193d0:	429c      	cmp	r4, r3
 80193d2:	bf08      	it	eq
 80193d4:	68ec      	ldreq	r4, [r5, #12]
 80193d6:	e7da      	b.n	801938e <_fflush_r+0x22>
 80193d8:	0801bee8 	.word	0x0801bee8
 80193dc:	0801bf08 	.word	0x0801bf08
 80193e0:	0801bec8 	.word	0x0801bec8

080193e4 <std>:
 80193e4:	2300      	movs	r3, #0
 80193e6:	b510      	push	{r4, lr}
 80193e8:	4604      	mov	r4, r0
 80193ea:	e9c0 3300 	strd	r3, r3, [r0]
 80193ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80193f2:	6083      	str	r3, [r0, #8]
 80193f4:	8181      	strh	r1, [r0, #12]
 80193f6:	6643      	str	r3, [r0, #100]	; 0x64
 80193f8:	81c2      	strh	r2, [r0, #14]
 80193fa:	6183      	str	r3, [r0, #24]
 80193fc:	4619      	mov	r1, r3
 80193fe:	2208      	movs	r2, #8
 8019400:	305c      	adds	r0, #92	; 0x5c
 8019402:	f7ff fcdf 	bl	8018dc4 <memset>
 8019406:	4b05      	ldr	r3, [pc, #20]	; (801941c <std+0x38>)
 8019408:	6263      	str	r3, [r4, #36]	; 0x24
 801940a:	4b05      	ldr	r3, [pc, #20]	; (8019420 <std+0x3c>)
 801940c:	62a3      	str	r3, [r4, #40]	; 0x28
 801940e:	4b05      	ldr	r3, [pc, #20]	; (8019424 <std+0x40>)
 8019410:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019412:	4b05      	ldr	r3, [pc, #20]	; (8019428 <std+0x44>)
 8019414:	6224      	str	r4, [r4, #32]
 8019416:	6323      	str	r3, [r4, #48]	; 0x30
 8019418:	bd10      	pop	{r4, pc}
 801941a:	bf00      	nop
 801941c:	08019c95 	.word	0x08019c95
 8019420:	08019cb7 	.word	0x08019cb7
 8019424:	08019cef 	.word	0x08019cef
 8019428:	08019d13 	.word	0x08019d13

0801942c <_cleanup_r>:
 801942c:	4901      	ldr	r1, [pc, #4]	; (8019434 <_cleanup_r+0x8>)
 801942e:	f000 b8af 	b.w	8019590 <_fwalk_reent>
 8019432:	bf00      	nop
 8019434:	0801936d 	.word	0x0801936d

08019438 <__sfmoreglue>:
 8019438:	b570      	push	{r4, r5, r6, lr}
 801943a:	2268      	movs	r2, #104	; 0x68
 801943c:	1e4d      	subs	r5, r1, #1
 801943e:	4355      	muls	r5, r2
 8019440:	460e      	mov	r6, r1
 8019442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019446:	f7ff fd31 	bl	8018eac <_malloc_r>
 801944a:	4604      	mov	r4, r0
 801944c:	b140      	cbz	r0, 8019460 <__sfmoreglue+0x28>
 801944e:	2100      	movs	r1, #0
 8019450:	e9c0 1600 	strd	r1, r6, [r0]
 8019454:	300c      	adds	r0, #12
 8019456:	60a0      	str	r0, [r4, #8]
 8019458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801945c:	f7ff fcb2 	bl	8018dc4 <memset>
 8019460:	4620      	mov	r0, r4
 8019462:	bd70      	pop	{r4, r5, r6, pc}

08019464 <__sfp_lock_acquire>:
 8019464:	4801      	ldr	r0, [pc, #4]	; (801946c <__sfp_lock_acquire+0x8>)
 8019466:	f000 b8b3 	b.w	80195d0 <__retarget_lock_acquire_recursive>
 801946a:	bf00      	nop
 801946c:	20002e25 	.word	0x20002e25

08019470 <__sfp_lock_release>:
 8019470:	4801      	ldr	r0, [pc, #4]	; (8019478 <__sfp_lock_release+0x8>)
 8019472:	f000 b8ae 	b.w	80195d2 <__retarget_lock_release_recursive>
 8019476:	bf00      	nop
 8019478:	20002e25 	.word	0x20002e25

0801947c <__sinit_lock_acquire>:
 801947c:	4801      	ldr	r0, [pc, #4]	; (8019484 <__sinit_lock_acquire+0x8>)
 801947e:	f000 b8a7 	b.w	80195d0 <__retarget_lock_acquire_recursive>
 8019482:	bf00      	nop
 8019484:	20002e26 	.word	0x20002e26

08019488 <__sinit_lock_release>:
 8019488:	4801      	ldr	r0, [pc, #4]	; (8019490 <__sinit_lock_release+0x8>)
 801948a:	f000 b8a2 	b.w	80195d2 <__retarget_lock_release_recursive>
 801948e:	bf00      	nop
 8019490:	20002e26 	.word	0x20002e26

08019494 <__sinit>:
 8019494:	b510      	push	{r4, lr}
 8019496:	4604      	mov	r4, r0
 8019498:	f7ff fff0 	bl	801947c <__sinit_lock_acquire>
 801949c:	69a3      	ldr	r3, [r4, #24]
 801949e:	b11b      	cbz	r3, 80194a8 <__sinit+0x14>
 80194a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194a4:	f7ff bff0 	b.w	8019488 <__sinit_lock_release>
 80194a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80194ac:	6523      	str	r3, [r4, #80]	; 0x50
 80194ae:	4b13      	ldr	r3, [pc, #76]	; (80194fc <__sinit+0x68>)
 80194b0:	4a13      	ldr	r2, [pc, #76]	; (8019500 <__sinit+0x6c>)
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80194b6:	42a3      	cmp	r3, r4
 80194b8:	bf04      	itt	eq
 80194ba:	2301      	moveq	r3, #1
 80194bc:	61a3      	streq	r3, [r4, #24]
 80194be:	4620      	mov	r0, r4
 80194c0:	f000 f820 	bl	8019504 <__sfp>
 80194c4:	6060      	str	r0, [r4, #4]
 80194c6:	4620      	mov	r0, r4
 80194c8:	f000 f81c 	bl	8019504 <__sfp>
 80194cc:	60a0      	str	r0, [r4, #8]
 80194ce:	4620      	mov	r0, r4
 80194d0:	f000 f818 	bl	8019504 <__sfp>
 80194d4:	2200      	movs	r2, #0
 80194d6:	60e0      	str	r0, [r4, #12]
 80194d8:	2104      	movs	r1, #4
 80194da:	6860      	ldr	r0, [r4, #4]
 80194dc:	f7ff ff82 	bl	80193e4 <std>
 80194e0:	68a0      	ldr	r0, [r4, #8]
 80194e2:	2201      	movs	r2, #1
 80194e4:	2109      	movs	r1, #9
 80194e6:	f7ff ff7d 	bl	80193e4 <std>
 80194ea:	68e0      	ldr	r0, [r4, #12]
 80194ec:	2202      	movs	r2, #2
 80194ee:	2112      	movs	r1, #18
 80194f0:	f7ff ff78 	bl	80193e4 <std>
 80194f4:	2301      	movs	r3, #1
 80194f6:	61a3      	str	r3, [r4, #24]
 80194f8:	e7d2      	b.n	80194a0 <__sinit+0xc>
 80194fa:	bf00      	nop
 80194fc:	0801bec4 	.word	0x0801bec4
 8019500:	0801942d 	.word	0x0801942d

08019504 <__sfp>:
 8019504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019506:	4607      	mov	r7, r0
 8019508:	f7ff ffac 	bl	8019464 <__sfp_lock_acquire>
 801950c:	4b1e      	ldr	r3, [pc, #120]	; (8019588 <__sfp+0x84>)
 801950e:	681e      	ldr	r6, [r3, #0]
 8019510:	69b3      	ldr	r3, [r6, #24]
 8019512:	b913      	cbnz	r3, 801951a <__sfp+0x16>
 8019514:	4630      	mov	r0, r6
 8019516:	f7ff ffbd 	bl	8019494 <__sinit>
 801951a:	3648      	adds	r6, #72	; 0x48
 801951c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019520:	3b01      	subs	r3, #1
 8019522:	d503      	bpl.n	801952c <__sfp+0x28>
 8019524:	6833      	ldr	r3, [r6, #0]
 8019526:	b30b      	cbz	r3, 801956c <__sfp+0x68>
 8019528:	6836      	ldr	r6, [r6, #0]
 801952a:	e7f7      	b.n	801951c <__sfp+0x18>
 801952c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019530:	b9d5      	cbnz	r5, 8019568 <__sfp+0x64>
 8019532:	4b16      	ldr	r3, [pc, #88]	; (801958c <__sfp+0x88>)
 8019534:	60e3      	str	r3, [r4, #12]
 8019536:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801953a:	6665      	str	r5, [r4, #100]	; 0x64
 801953c:	f000 f847 	bl	80195ce <__retarget_lock_init_recursive>
 8019540:	f7ff ff96 	bl	8019470 <__sfp_lock_release>
 8019544:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019548:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801954c:	6025      	str	r5, [r4, #0]
 801954e:	61a5      	str	r5, [r4, #24]
 8019550:	2208      	movs	r2, #8
 8019552:	4629      	mov	r1, r5
 8019554:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019558:	f7ff fc34 	bl	8018dc4 <memset>
 801955c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019560:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019564:	4620      	mov	r0, r4
 8019566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019568:	3468      	adds	r4, #104	; 0x68
 801956a:	e7d9      	b.n	8019520 <__sfp+0x1c>
 801956c:	2104      	movs	r1, #4
 801956e:	4638      	mov	r0, r7
 8019570:	f7ff ff62 	bl	8019438 <__sfmoreglue>
 8019574:	4604      	mov	r4, r0
 8019576:	6030      	str	r0, [r6, #0]
 8019578:	2800      	cmp	r0, #0
 801957a:	d1d5      	bne.n	8019528 <__sfp+0x24>
 801957c:	f7ff ff78 	bl	8019470 <__sfp_lock_release>
 8019580:	230c      	movs	r3, #12
 8019582:	603b      	str	r3, [r7, #0]
 8019584:	e7ee      	b.n	8019564 <__sfp+0x60>
 8019586:	bf00      	nop
 8019588:	0801bec4 	.word	0x0801bec4
 801958c:	ffff0001 	.word	0xffff0001

08019590 <_fwalk_reent>:
 8019590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019594:	4606      	mov	r6, r0
 8019596:	4688      	mov	r8, r1
 8019598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801959c:	2700      	movs	r7, #0
 801959e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80195a2:	f1b9 0901 	subs.w	r9, r9, #1
 80195a6:	d505      	bpl.n	80195b4 <_fwalk_reent+0x24>
 80195a8:	6824      	ldr	r4, [r4, #0]
 80195aa:	2c00      	cmp	r4, #0
 80195ac:	d1f7      	bne.n	801959e <_fwalk_reent+0xe>
 80195ae:	4638      	mov	r0, r7
 80195b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195b4:	89ab      	ldrh	r3, [r5, #12]
 80195b6:	2b01      	cmp	r3, #1
 80195b8:	d907      	bls.n	80195ca <_fwalk_reent+0x3a>
 80195ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80195be:	3301      	adds	r3, #1
 80195c0:	d003      	beq.n	80195ca <_fwalk_reent+0x3a>
 80195c2:	4629      	mov	r1, r5
 80195c4:	4630      	mov	r0, r6
 80195c6:	47c0      	blx	r8
 80195c8:	4307      	orrs	r7, r0
 80195ca:	3568      	adds	r5, #104	; 0x68
 80195cc:	e7e9      	b.n	80195a2 <_fwalk_reent+0x12>

080195ce <__retarget_lock_init_recursive>:
 80195ce:	4770      	bx	lr

080195d0 <__retarget_lock_acquire_recursive>:
 80195d0:	4770      	bx	lr

080195d2 <__retarget_lock_release_recursive>:
 80195d2:	4770      	bx	lr

080195d4 <__swhatbuf_r>:
 80195d4:	b570      	push	{r4, r5, r6, lr}
 80195d6:	460e      	mov	r6, r1
 80195d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195dc:	2900      	cmp	r1, #0
 80195de:	b096      	sub	sp, #88	; 0x58
 80195e0:	4614      	mov	r4, r2
 80195e2:	461d      	mov	r5, r3
 80195e4:	da08      	bge.n	80195f8 <__swhatbuf_r+0x24>
 80195e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80195ea:	2200      	movs	r2, #0
 80195ec:	602a      	str	r2, [r5, #0]
 80195ee:	061a      	lsls	r2, r3, #24
 80195f0:	d410      	bmi.n	8019614 <__swhatbuf_r+0x40>
 80195f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80195f6:	e00e      	b.n	8019616 <__swhatbuf_r+0x42>
 80195f8:	466a      	mov	r2, sp
 80195fa:	f000 fbb1 	bl	8019d60 <_fstat_r>
 80195fe:	2800      	cmp	r0, #0
 8019600:	dbf1      	blt.n	80195e6 <__swhatbuf_r+0x12>
 8019602:	9a01      	ldr	r2, [sp, #4]
 8019604:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019608:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801960c:	425a      	negs	r2, r3
 801960e:	415a      	adcs	r2, r3
 8019610:	602a      	str	r2, [r5, #0]
 8019612:	e7ee      	b.n	80195f2 <__swhatbuf_r+0x1e>
 8019614:	2340      	movs	r3, #64	; 0x40
 8019616:	2000      	movs	r0, #0
 8019618:	6023      	str	r3, [r4, #0]
 801961a:	b016      	add	sp, #88	; 0x58
 801961c:	bd70      	pop	{r4, r5, r6, pc}
	...

08019620 <__smakebuf_r>:
 8019620:	898b      	ldrh	r3, [r1, #12]
 8019622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019624:	079d      	lsls	r5, r3, #30
 8019626:	4606      	mov	r6, r0
 8019628:	460c      	mov	r4, r1
 801962a:	d507      	bpl.n	801963c <__smakebuf_r+0x1c>
 801962c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019630:	6023      	str	r3, [r4, #0]
 8019632:	6123      	str	r3, [r4, #16]
 8019634:	2301      	movs	r3, #1
 8019636:	6163      	str	r3, [r4, #20]
 8019638:	b002      	add	sp, #8
 801963a:	bd70      	pop	{r4, r5, r6, pc}
 801963c:	ab01      	add	r3, sp, #4
 801963e:	466a      	mov	r2, sp
 8019640:	f7ff ffc8 	bl	80195d4 <__swhatbuf_r>
 8019644:	9900      	ldr	r1, [sp, #0]
 8019646:	4605      	mov	r5, r0
 8019648:	4630      	mov	r0, r6
 801964a:	f7ff fc2f 	bl	8018eac <_malloc_r>
 801964e:	b948      	cbnz	r0, 8019664 <__smakebuf_r+0x44>
 8019650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019654:	059a      	lsls	r2, r3, #22
 8019656:	d4ef      	bmi.n	8019638 <__smakebuf_r+0x18>
 8019658:	f023 0303 	bic.w	r3, r3, #3
 801965c:	f043 0302 	orr.w	r3, r3, #2
 8019660:	81a3      	strh	r3, [r4, #12]
 8019662:	e7e3      	b.n	801962c <__smakebuf_r+0xc>
 8019664:	4b0d      	ldr	r3, [pc, #52]	; (801969c <__smakebuf_r+0x7c>)
 8019666:	62b3      	str	r3, [r6, #40]	; 0x28
 8019668:	89a3      	ldrh	r3, [r4, #12]
 801966a:	6020      	str	r0, [r4, #0]
 801966c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019670:	81a3      	strh	r3, [r4, #12]
 8019672:	9b00      	ldr	r3, [sp, #0]
 8019674:	6163      	str	r3, [r4, #20]
 8019676:	9b01      	ldr	r3, [sp, #4]
 8019678:	6120      	str	r0, [r4, #16]
 801967a:	b15b      	cbz	r3, 8019694 <__smakebuf_r+0x74>
 801967c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019680:	4630      	mov	r0, r6
 8019682:	f000 fb7f 	bl	8019d84 <_isatty_r>
 8019686:	b128      	cbz	r0, 8019694 <__smakebuf_r+0x74>
 8019688:	89a3      	ldrh	r3, [r4, #12]
 801968a:	f023 0303 	bic.w	r3, r3, #3
 801968e:	f043 0301 	orr.w	r3, r3, #1
 8019692:	81a3      	strh	r3, [r4, #12]
 8019694:	89a0      	ldrh	r0, [r4, #12]
 8019696:	4305      	orrs	r5, r0
 8019698:	81a5      	strh	r5, [r4, #12]
 801969a:	e7cd      	b.n	8019638 <__smakebuf_r+0x18>
 801969c:	0801942d 	.word	0x0801942d

080196a0 <__malloc_lock>:
 80196a0:	4801      	ldr	r0, [pc, #4]	; (80196a8 <__malloc_lock+0x8>)
 80196a2:	f7ff bf95 	b.w	80195d0 <__retarget_lock_acquire_recursive>
 80196a6:	bf00      	nop
 80196a8:	20002e24 	.word	0x20002e24

080196ac <__malloc_unlock>:
 80196ac:	4801      	ldr	r0, [pc, #4]	; (80196b4 <__malloc_unlock+0x8>)
 80196ae:	f7ff bf90 	b.w	80195d2 <__retarget_lock_release_recursive>
 80196b2:	bf00      	nop
 80196b4:	20002e24 	.word	0x20002e24

080196b8 <__sfputc_r>:
 80196b8:	6893      	ldr	r3, [r2, #8]
 80196ba:	3b01      	subs	r3, #1
 80196bc:	2b00      	cmp	r3, #0
 80196be:	b410      	push	{r4}
 80196c0:	6093      	str	r3, [r2, #8]
 80196c2:	da08      	bge.n	80196d6 <__sfputc_r+0x1e>
 80196c4:	6994      	ldr	r4, [r2, #24]
 80196c6:	42a3      	cmp	r3, r4
 80196c8:	db01      	blt.n	80196ce <__sfputc_r+0x16>
 80196ca:	290a      	cmp	r1, #10
 80196cc:	d103      	bne.n	80196d6 <__sfputc_r+0x1e>
 80196ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196d2:	f7ff bd05 	b.w	80190e0 <__swbuf_r>
 80196d6:	6813      	ldr	r3, [r2, #0]
 80196d8:	1c58      	adds	r0, r3, #1
 80196da:	6010      	str	r0, [r2, #0]
 80196dc:	7019      	strb	r1, [r3, #0]
 80196de:	4608      	mov	r0, r1
 80196e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196e4:	4770      	bx	lr

080196e6 <__sfputs_r>:
 80196e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196e8:	4606      	mov	r6, r0
 80196ea:	460f      	mov	r7, r1
 80196ec:	4614      	mov	r4, r2
 80196ee:	18d5      	adds	r5, r2, r3
 80196f0:	42ac      	cmp	r4, r5
 80196f2:	d101      	bne.n	80196f8 <__sfputs_r+0x12>
 80196f4:	2000      	movs	r0, #0
 80196f6:	e007      	b.n	8019708 <__sfputs_r+0x22>
 80196f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196fc:	463a      	mov	r2, r7
 80196fe:	4630      	mov	r0, r6
 8019700:	f7ff ffda 	bl	80196b8 <__sfputc_r>
 8019704:	1c43      	adds	r3, r0, #1
 8019706:	d1f3      	bne.n	80196f0 <__sfputs_r+0xa>
 8019708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801970c <_vfiprintf_r>:
 801970c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019710:	460d      	mov	r5, r1
 8019712:	b09d      	sub	sp, #116	; 0x74
 8019714:	4614      	mov	r4, r2
 8019716:	4698      	mov	r8, r3
 8019718:	4606      	mov	r6, r0
 801971a:	b118      	cbz	r0, 8019724 <_vfiprintf_r+0x18>
 801971c:	6983      	ldr	r3, [r0, #24]
 801971e:	b90b      	cbnz	r3, 8019724 <_vfiprintf_r+0x18>
 8019720:	f7ff feb8 	bl	8019494 <__sinit>
 8019724:	4b89      	ldr	r3, [pc, #548]	; (801994c <_vfiprintf_r+0x240>)
 8019726:	429d      	cmp	r5, r3
 8019728:	d11b      	bne.n	8019762 <_vfiprintf_r+0x56>
 801972a:	6875      	ldr	r5, [r6, #4]
 801972c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801972e:	07d9      	lsls	r1, r3, #31
 8019730:	d405      	bmi.n	801973e <_vfiprintf_r+0x32>
 8019732:	89ab      	ldrh	r3, [r5, #12]
 8019734:	059a      	lsls	r2, r3, #22
 8019736:	d402      	bmi.n	801973e <_vfiprintf_r+0x32>
 8019738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801973a:	f7ff ff49 	bl	80195d0 <__retarget_lock_acquire_recursive>
 801973e:	89ab      	ldrh	r3, [r5, #12]
 8019740:	071b      	lsls	r3, r3, #28
 8019742:	d501      	bpl.n	8019748 <_vfiprintf_r+0x3c>
 8019744:	692b      	ldr	r3, [r5, #16]
 8019746:	b9eb      	cbnz	r3, 8019784 <_vfiprintf_r+0x78>
 8019748:	4629      	mov	r1, r5
 801974a:	4630      	mov	r0, r6
 801974c:	f7ff fd1a 	bl	8019184 <__swsetup_r>
 8019750:	b1c0      	cbz	r0, 8019784 <_vfiprintf_r+0x78>
 8019752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019754:	07dc      	lsls	r4, r3, #31
 8019756:	d50e      	bpl.n	8019776 <_vfiprintf_r+0x6a>
 8019758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801975c:	b01d      	add	sp, #116	; 0x74
 801975e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019762:	4b7b      	ldr	r3, [pc, #492]	; (8019950 <_vfiprintf_r+0x244>)
 8019764:	429d      	cmp	r5, r3
 8019766:	d101      	bne.n	801976c <_vfiprintf_r+0x60>
 8019768:	68b5      	ldr	r5, [r6, #8]
 801976a:	e7df      	b.n	801972c <_vfiprintf_r+0x20>
 801976c:	4b79      	ldr	r3, [pc, #484]	; (8019954 <_vfiprintf_r+0x248>)
 801976e:	429d      	cmp	r5, r3
 8019770:	bf08      	it	eq
 8019772:	68f5      	ldreq	r5, [r6, #12]
 8019774:	e7da      	b.n	801972c <_vfiprintf_r+0x20>
 8019776:	89ab      	ldrh	r3, [r5, #12]
 8019778:	0598      	lsls	r0, r3, #22
 801977a:	d4ed      	bmi.n	8019758 <_vfiprintf_r+0x4c>
 801977c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801977e:	f7ff ff28 	bl	80195d2 <__retarget_lock_release_recursive>
 8019782:	e7e9      	b.n	8019758 <_vfiprintf_r+0x4c>
 8019784:	2300      	movs	r3, #0
 8019786:	9309      	str	r3, [sp, #36]	; 0x24
 8019788:	2320      	movs	r3, #32
 801978a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801978e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019792:	2330      	movs	r3, #48	; 0x30
 8019794:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019958 <_vfiprintf_r+0x24c>
 8019798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801979c:	f04f 0901 	mov.w	r9, #1
 80197a0:	4623      	mov	r3, r4
 80197a2:	469a      	mov	sl, r3
 80197a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80197a8:	b10a      	cbz	r2, 80197ae <_vfiprintf_r+0xa2>
 80197aa:	2a25      	cmp	r2, #37	; 0x25
 80197ac:	d1f9      	bne.n	80197a2 <_vfiprintf_r+0x96>
 80197ae:	ebba 0b04 	subs.w	fp, sl, r4
 80197b2:	d00b      	beq.n	80197cc <_vfiprintf_r+0xc0>
 80197b4:	465b      	mov	r3, fp
 80197b6:	4622      	mov	r2, r4
 80197b8:	4629      	mov	r1, r5
 80197ba:	4630      	mov	r0, r6
 80197bc:	f7ff ff93 	bl	80196e6 <__sfputs_r>
 80197c0:	3001      	adds	r0, #1
 80197c2:	f000 80aa 	beq.w	801991a <_vfiprintf_r+0x20e>
 80197c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80197c8:	445a      	add	r2, fp
 80197ca:	9209      	str	r2, [sp, #36]	; 0x24
 80197cc:	f89a 3000 	ldrb.w	r3, [sl]
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	f000 80a2 	beq.w	801991a <_vfiprintf_r+0x20e>
 80197d6:	2300      	movs	r3, #0
 80197d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80197dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80197e0:	f10a 0a01 	add.w	sl, sl, #1
 80197e4:	9304      	str	r3, [sp, #16]
 80197e6:	9307      	str	r3, [sp, #28]
 80197e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80197ec:	931a      	str	r3, [sp, #104]	; 0x68
 80197ee:	4654      	mov	r4, sl
 80197f0:	2205      	movs	r2, #5
 80197f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197f6:	4858      	ldr	r0, [pc, #352]	; (8019958 <_vfiprintf_r+0x24c>)
 80197f8:	f7e6 fcfa 	bl	80001f0 <memchr>
 80197fc:	9a04      	ldr	r2, [sp, #16]
 80197fe:	b9d8      	cbnz	r0, 8019838 <_vfiprintf_r+0x12c>
 8019800:	06d1      	lsls	r1, r2, #27
 8019802:	bf44      	itt	mi
 8019804:	2320      	movmi	r3, #32
 8019806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801980a:	0713      	lsls	r3, r2, #28
 801980c:	bf44      	itt	mi
 801980e:	232b      	movmi	r3, #43	; 0x2b
 8019810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019814:	f89a 3000 	ldrb.w	r3, [sl]
 8019818:	2b2a      	cmp	r3, #42	; 0x2a
 801981a:	d015      	beq.n	8019848 <_vfiprintf_r+0x13c>
 801981c:	9a07      	ldr	r2, [sp, #28]
 801981e:	4654      	mov	r4, sl
 8019820:	2000      	movs	r0, #0
 8019822:	f04f 0c0a 	mov.w	ip, #10
 8019826:	4621      	mov	r1, r4
 8019828:	f811 3b01 	ldrb.w	r3, [r1], #1
 801982c:	3b30      	subs	r3, #48	; 0x30
 801982e:	2b09      	cmp	r3, #9
 8019830:	d94e      	bls.n	80198d0 <_vfiprintf_r+0x1c4>
 8019832:	b1b0      	cbz	r0, 8019862 <_vfiprintf_r+0x156>
 8019834:	9207      	str	r2, [sp, #28]
 8019836:	e014      	b.n	8019862 <_vfiprintf_r+0x156>
 8019838:	eba0 0308 	sub.w	r3, r0, r8
 801983c:	fa09 f303 	lsl.w	r3, r9, r3
 8019840:	4313      	orrs	r3, r2
 8019842:	9304      	str	r3, [sp, #16]
 8019844:	46a2      	mov	sl, r4
 8019846:	e7d2      	b.n	80197ee <_vfiprintf_r+0xe2>
 8019848:	9b03      	ldr	r3, [sp, #12]
 801984a:	1d19      	adds	r1, r3, #4
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	9103      	str	r1, [sp, #12]
 8019850:	2b00      	cmp	r3, #0
 8019852:	bfbb      	ittet	lt
 8019854:	425b      	neglt	r3, r3
 8019856:	f042 0202 	orrlt.w	r2, r2, #2
 801985a:	9307      	strge	r3, [sp, #28]
 801985c:	9307      	strlt	r3, [sp, #28]
 801985e:	bfb8      	it	lt
 8019860:	9204      	strlt	r2, [sp, #16]
 8019862:	7823      	ldrb	r3, [r4, #0]
 8019864:	2b2e      	cmp	r3, #46	; 0x2e
 8019866:	d10c      	bne.n	8019882 <_vfiprintf_r+0x176>
 8019868:	7863      	ldrb	r3, [r4, #1]
 801986a:	2b2a      	cmp	r3, #42	; 0x2a
 801986c:	d135      	bne.n	80198da <_vfiprintf_r+0x1ce>
 801986e:	9b03      	ldr	r3, [sp, #12]
 8019870:	1d1a      	adds	r2, r3, #4
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	9203      	str	r2, [sp, #12]
 8019876:	2b00      	cmp	r3, #0
 8019878:	bfb8      	it	lt
 801987a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801987e:	3402      	adds	r4, #2
 8019880:	9305      	str	r3, [sp, #20]
 8019882:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019968 <_vfiprintf_r+0x25c>
 8019886:	7821      	ldrb	r1, [r4, #0]
 8019888:	2203      	movs	r2, #3
 801988a:	4650      	mov	r0, sl
 801988c:	f7e6 fcb0 	bl	80001f0 <memchr>
 8019890:	b140      	cbz	r0, 80198a4 <_vfiprintf_r+0x198>
 8019892:	2340      	movs	r3, #64	; 0x40
 8019894:	eba0 000a 	sub.w	r0, r0, sl
 8019898:	fa03 f000 	lsl.w	r0, r3, r0
 801989c:	9b04      	ldr	r3, [sp, #16]
 801989e:	4303      	orrs	r3, r0
 80198a0:	3401      	adds	r4, #1
 80198a2:	9304      	str	r3, [sp, #16]
 80198a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198a8:	482c      	ldr	r0, [pc, #176]	; (801995c <_vfiprintf_r+0x250>)
 80198aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80198ae:	2206      	movs	r2, #6
 80198b0:	f7e6 fc9e 	bl	80001f0 <memchr>
 80198b4:	2800      	cmp	r0, #0
 80198b6:	d03f      	beq.n	8019938 <_vfiprintf_r+0x22c>
 80198b8:	4b29      	ldr	r3, [pc, #164]	; (8019960 <_vfiprintf_r+0x254>)
 80198ba:	bb1b      	cbnz	r3, 8019904 <_vfiprintf_r+0x1f8>
 80198bc:	9b03      	ldr	r3, [sp, #12]
 80198be:	3307      	adds	r3, #7
 80198c0:	f023 0307 	bic.w	r3, r3, #7
 80198c4:	3308      	adds	r3, #8
 80198c6:	9303      	str	r3, [sp, #12]
 80198c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198ca:	443b      	add	r3, r7
 80198cc:	9309      	str	r3, [sp, #36]	; 0x24
 80198ce:	e767      	b.n	80197a0 <_vfiprintf_r+0x94>
 80198d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80198d4:	460c      	mov	r4, r1
 80198d6:	2001      	movs	r0, #1
 80198d8:	e7a5      	b.n	8019826 <_vfiprintf_r+0x11a>
 80198da:	2300      	movs	r3, #0
 80198dc:	3401      	adds	r4, #1
 80198de:	9305      	str	r3, [sp, #20]
 80198e0:	4619      	mov	r1, r3
 80198e2:	f04f 0c0a 	mov.w	ip, #10
 80198e6:	4620      	mov	r0, r4
 80198e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80198ec:	3a30      	subs	r2, #48	; 0x30
 80198ee:	2a09      	cmp	r2, #9
 80198f0:	d903      	bls.n	80198fa <_vfiprintf_r+0x1ee>
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d0c5      	beq.n	8019882 <_vfiprintf_r+0x176>
 80198f6:	9105      	str	r1, [sp, #20]
 80198f8:	e7c3      	b.n	8019882 <_vfiprintf_r+0x176>
 80198fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80198fe:	4604      	mov	r4, r0
 8019900:	2301      	movs	r3, #1
 8019902:	e7f0      	b.n	80198e6 <_vfiprintf_r+0x1da>
 8019904:	ab03      	add	r3, sp, #12
 8019906:	9300      	str	r3, [sp, #0]
 8019908:	462a      	mov	r2, r5
 801990a:	4b16      	ldr	r3, [pc, #88]	; (8019964 <_vfiprintf_r+0x258>)
 801990c:	a904      	add	r1, sp, #16
 801990e:	4630      	mov	r0, r6
 8019910:	f3af 8000 	nop.w
 8019914:	4607      	mov	r7, r0
 8019916:	1c78      	adds	r0, r7, #1
 8019918:	d1d6      	bne.n	80198c8 <_vfiprintf_r+0x1bc>
 801991a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801991c:	07d9      	lsls	r1, r3, #31
 801991e:	d405      	bmi.n	801992c <_vfiprintf_r+0x220>
 8019920:	89ab      	ldrh	r3, [r5, #12]
 8019922:	059a      	lsls	r2, r3, #22
 8019924:	d402      	bmi.n	801992c <_vfiprintf_r+0x220>
 8019926:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019928:	f7ff fe53 	bl	80195d2 <__retarget_lock_release_recursive>
 801992c:	89ab      	ldrh	r3, [r5, #12]
 801992e:	065b      	lsls	r3, r3, #25
 8019930:	f53f af12 	bmi.w	8019758 <_vfiprintf_r+0x4c>
 8019934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019936:	e711      	b.n	801975c <_vfiprintf_r+0x50>
 8019938:	ab03      	add	r3, sp, #12
 801993a:	9300      	str	r3, [sp, #0]
 801993c:	462a      	mov	r2, r5
 801993e:	4b09      	ldr	r3, [pc, #36]	; (8019964 <_vfiprintf_r+0x258>)
 8019940:	a904      	add	r1, sp, #16
 8019942:	4630      	mov	r0, r6
 8019944:	f000 f880 	bl	8019a48 <_printf_i>
 8019948:	e7e4      	b.n	8019914 <_vfiprintf_r+0x208>
 801994a:	bf00      	nop
 801994c:	0801bee8 	.word	0x0801bee8
 8019950:	0801bf08 	.word	0x0801bf08
 8019954:	0801bec8 	.word	0x0801bec8
 8019958:	0801bf28 	.word	0x0801bf28
 801995c:	0801bf32 	.word	0x0801bf32
 8019960:	00000000 	.word	0x00000000
 8019964:	080196e7 	.word	0x080196e7
 8019968:	0801bf2e 	.word	0x0801bf2e

0801996c <_printf_common>:
 801996c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019970:	4616      	mov	r6, r2
 8019972:	4699      	mov	r9, r3
 8019974:	688a      	ldr	r2, [r1, #8]
 8019976:	690b      	ldr	r3, [r1, #16]
 8019978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801997c:	4293      	cmp	r3, r2
 801997e:	bfb8      	it	lt
 8019980:	4613      	movlt	r3, r2
 8019982:	6033      	str	r3, [r6, #0]
 8019984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019988:	4607      	mov	r7, r0
 801998a:	460c      	mov	r4, r1
 801998c:	b10a      	cbz	r2, 8019992 <_printf_common+0x26>
 801998e:	3301      	adds	r3, #1
 8019990:	6033      	str	r3, [r6, #0]
 8019992:	6823      	ldr	r3, [r4, #0]
 8019994:	0699      	lsls	r1, r3, #26
 8019996:	bf42      	ittt	mi
 8019998:	6833      	ldrmi	r3, [r6, #0]
 801999a:	3302      	addmi	r3, #2
 801999c:	6033      	strmi	r3, [r6, #0]
 801999e:	6825      	ldr	r5, [r4, #0]
 80199a0:	f015 0506 	ands.w	r5, r5, #6
 80199a4:	d106      	bne.n	80199b4 <_printf_common+0x48>
 80199a6:	f104 0a19 	add.w	sl, r4, #25
 80199aa:	68e3      	ldr	r3, [r4, #12]
 80199ac:	6832      	ldr	r2, [r6, #0]
 80199ae:	1a9b      	subs	r3, r3, r2
 80199b0:	42ab      	cmp	r3, r5
 80199b2:	dc26      	bgt.n	8019a02 <_printf_common+0x96>
 80199b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80199b8:	1e13      	subs	r3, r2, #0
 80199ba:	6822      	ldr	r2, [r4, #0]
 80199bc:	bf18      	it	ne
 80199be:	2301      	movne	r3, #1
 80199c0:	0692      	lsls	r2, r2, #26
 80199c2:	d42b      	bmi.n	8019a1c <_printf_common+0xb0>
 80199c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80199c8:	4649      	mov	r1, r9
 80199ca:	4638      	mov	r0, r7
 80199cc:	47c0      	blx	r8
 80199ce:	3001      	adds	r0, #1
 80199d0:	d01e      	beq.n	8019a10 <_printf_common+0xa4>
 80199d2:	6823      	ldr	r3, [r4, #0]
 80199d4:	68e5      	ldr	r5, [r4, #12]
 80199d6:	6832      	ldr	r2, [r6, #0]
 80199d8:	f003 0306 	and.w	r3, r3, #6
 80199dc:	2b04      	cmp	r3, #4
 80199de:	bf08      	it	eq
 80199e0:	1aad      	subeq	r5, r5, r2
 80199e2:	68a3      	ldr	r3, [r4, #8]
 80199e4:	6922      	ldr	r2, [r4, #16]
 80199e6:	bf0c      	ite	eq
 80199e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80199ec:	2500      	movne	r5, #0
 80199ee:	4293      	cmp	r3, r2
 80199f0:	bfc4      	itt	gt
 80199f2:	1a9b      	subgt	r3, r3, r2
 80199f4:	18ed      	addgt	r5, r5, r3
 80199f6:	2600      	movs	r6, #0
 80199f8:	341a      	adds	r4, #26
 80199fa:	42b5      	cmp	r5, r6
 80199fc:	d11a      	bne.n	8019a34 <_printf_common+0xc8>
 80199fe:	2000      	movs	r0, #0
 8019a00:	e008      	b.n	8019a14 <_printf_common+0xa8>
 8019a02:	2301      	movs	r3, #1
 8019a04:	4652      	mov	r2, sl
 8019a06:	4649      	mov	r1, r9
 8019a08:	4638      	mov	r0, r7
 8019a0a:	47c0      	blx	r8
 8019a0c:	3001      	adds	r0, #1
 8019a0e:	d103      	bne.n	8019a18 <_printf_common+0xac>
 8019a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a18:	3501      	adds	r5, #1
 8019a1a:	e7c6      	b.n	80199aa <_printf_common+0x3e>
 8019a1c:	18e1      	adds	r1, r4, r3
 8019a1e:	1c5a      	adds	r2, r3, #1
 8019a20:	2030      	movs	r0, #48	; 0x30
 8019a22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019a26:	4422      	add	r2, r4
 8019a28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019a2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019a30:	3302      	adds	r3, #2
 8019a32:	e7c7      	b.n	80199c4 <_printf_common+0x58>
 8019a34:	2301      	movs	r3, #1
 8019a36:	4622      	mov	r2, r4
 8019a38:	4649      	mov	r1, r9
 8019a3a:	4638      	mov	r0, r7
 8019a3c:	47c0      	blx	r8
 8019a3e:	3001      	adds	r0, #1
 8019a40:	d0e6      	beq.n	8019a10 <_printf_common+0xa4>
 8019a42:	3601      	adds	r6, #1
 8019a44:	e7d9      	b.n	80199fa <_printf_common+0x8e>
	...

08019a48 <_printf_i>:
 8019a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019a4c:	7e0f      	ldrb	r7, [r1, #24]
 8019a4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019a50:	2f78      	cmp	r7, #120	; 0x78
 8019a52:	4691      	mov	r9, r2
 8019a54:	4680      	mov	r8, r0
 8019a56:	460c      	mov	r4, r1
 8019a58:	469a      	mov	sl, r3
 8019a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019a5e:	d807      	bhi.n	8019a70 <_printf_i+0x28>
 8019a60:	2f62      	cmp	r7, #98	; 0x62
 8019a62:	d80a      	bhi.n	8019a7a <_printf_i+0x32>
 8019a64:	2f00      	cmp	r7, #0
 8019a66:	f000 80d8 	beq.w	8019c1a <_printf_i+0x1d2>
 8019a6a:	2f58      	cmp	r7, #88	; 0x58
 8019a6c:	f000 80a3 	beq.w	8019bb6 <_printf_i+0x16e>
 8019a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019a78:	e03a      	b.n	8019af0 <_printf_i+0xa8>
 8019a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019a7e:	2b15      	cmp	r3, #21
 8019a80:	d8f6      	bhi.n	8019a70 <_printf_i+0x28>
 8019a82:	a101      	add	r1, pc, #4	; (adr r1, 8019a88 <_printf_i+0x40>)
 8019a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019a88:	08019ae1 	.word	0x08019ae1
 8019a8c:	08019af5 	.word	0x08019af5
 8019a90:	08019a71 	.word	0x08019a71
 8019a94:	08019a71 	.word	0x08019a71
 8019a98:	08019a71 	.word	0x08019a71
 8019a9c:	08019a71 	.word	0x08019a71
 8019aa0:	08019af5 	.word	0x08019af5
 8019aa4:	08019a71 	.word	0x08019a71
 8019aa8:	08019a71 	.word	0x08019a71
 8019aac:	08019a71 	.word	0x08019a71
 8019ab0:	08019a71 	.word	0x08019a71
 8019ab4:	08019c01 	.word	0x08019c01
 8019ab8:	08019b25 	.word	0x08019b25
 8019abc:	08019be3 	.word	0x08019be3
 8019ac0:	08019a71 	.word	0x08019a71
 8019ac4:	08019a71 	.word	0x08019a71
 8019ac8:	08019c23 	.word	0x08019c23
 8019acc:	08019a71 	.word	0x08019a71
 8019ad0:	08019b25 	.word	0x08019b25
 8019ad4:	08019a71 	.word	0x08019a71
 8019ad8:	08019a71 	.word	0x08019a71
 8019adc:	08019beb 	.word	0x08019beb
 8019ae0:	682b      	ldr	r3, [r5, #0]
 8019ae2:	1d1a      	adds	r2, r3, #4
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	602a      	str	r2, [r5, #0]
 8019ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019af0:	2301      	movs	r3, #1
 8019af2:	e0a3      	b.n	8019c3c <_printf_i+0x1f4>
 8019af4:	6820      	ldr	r0, [r4, #0]
 8019af6:	6829      	ldr	r1, [r5, #0]
 8019af8:	0606      	lsls	r6, r0, #24
 8019afa:	f101 0304 	add.w	r3, r1, #4
 8019afe:	d50a      	bpl.n	8019b16 <_printf_i+0xce>
 8019b00:	680e      	ldr	r6, [r1, #0]
 8019b02:	602b      	str	r3, [r5, #0]
 8019b04:	2e00      	cmp	r6, #0
 8019b06:	da03      	bge.n	8019b10 <_printf_i+0xc8>
 8019b08:	232d      	movs	r3, #45	; 0x2d
 8019b0a:	4276      	negs	r6, r6
 8019b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b10:	485e      	ldr	r0, [pc, #376]	; (8019c8c <_printf_i+0x244>)
 8019b12:	230a      	movs	r3, #10
 8019b14:	e019      	b.n	8019b4a <_printf_i+0x102>
 8019b16:	680e      	ldr	r6, [r1, #0]
 8019b18:	602b      	str	r3, [r5, #0]
 8019b1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019b1e:	bf18      	it	ne
 8019b20:	b236      	sxthne	r6, r6
 8019b22:	e7ef      	b.n	8019b04 <_printf_i+0xbc>
 8019b24:	682b      	ldr	r3, [r5, #0]
 8019b26:	6820      	ldr	r0, [r4, #0]
 8019b28:	1d19      	adds	r1, r3, #4
 8019b2a:	6029      	str	r1, [r5, #0]
 8019b2c:	0601      	lsls	r1, r0, #24
 8019b2e:	d501      	bpl.n	8019b34 <_printf_i+0xec>
 8019b30:	681e      	ldr	r6, [r3, #0]
 8019b32:	e002      	b.n	8019b3a <_printf_i+0xf2>
 8019b34:	0646      	lsls	r6, r0, #25
 8019b36:	d5fb      	bpl.n	8019b30 <_printf_i+0xe8>
 8019b38:	881e      	ldrh	r6, [r3, #0]
 8019b3a:	4854      	ldr	r0, [pc, #336]	; (8019c8c <_printf_i+0x244>)
 8019b3c:	2f6f      	cmp	r7, #111	; 0x6f
 8019b3e:	bf0c      	ite	eq
 8019b40:	2308      	moveq	r3, #8
 8019b42:	230a      	movne	r3, #10
 8019b44:	2100      	movs	r1, #0
 8019b46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019b4a:	6865      	ldr	r5, [r4, #4]
 8019b4c:	60a5      	str	r5, [r4, #8]
 8019b4e:	2d00      	cmp	r5, #0
 8019b50:	bfa2      	ittt	ge
 8019b52:	6821      	ldrge	r1, [r4, #0]
 8019b54:	f021 0104 	bicge.w	r1, r1, #4
 8019b58:	6021      	strge	r1, [r4, #0]
 8019b5a:	b90e      	cbnz	r6, 8019b60 <_printf_i+0x118>
 8019b5c:	2d00      	cmp	r5, #0
 8019b5e:	d04d      	beq.n	8019bfc <_printf_i+0x1b4>
 8019b60:	4615      	mov	r5, r2
 8019b62:	fbb6 f1f3 	udiv	r1, r6, r3
 8019b66:	fb03 6711 	mls	r7, r3, r1, r6
 8019b6a:	5dc7      	ldrb	r7, [r0, r7]
 8019b6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019b70:	4637      	mov	r7, r6
 8019b72:	42bb      	cmp	r3, r7
 8019b74:	460e      	mov	r6, r1
 8019b76:	d9f4      	bls.n	8019b62 <_printf_i+0x11a>
 8019b78:	2b08      	cmp	r3, #8
 8019b7a:	d10b      	bne.n	8019b94 <_printf_i+0x14c>
 8019b7c:	6823      	ldr	r3, [r4, #0]
 8019b7e:	07de      	lsls	r6, r3, #31
 8019b80:	d508      	bpl.n	8019b94 <_printf_i+0x14c>
 8019b82:	6923      	ldr	r3, [r4, #16]
 8019b84:	6861      	ldr	r1, [r4, #4]
 8019b86:	4299      	cmp	r1, r3
 8019b88:	bfde      	ittt	le
 8019b8a:	2330      	movle	r3, #48	; 0x30
 8019b8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019b90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8019b94:	1b52      	subs	r2, r2, r5
 8019b96:	6122      	str	r2, [r4, #16]
 8019b98:	f8cd a000 	str.w	sl, [sp]
 8019b9c:	464b      	mov	r3, r9
 8019b9e:	aa03      	add	r2, sp, #12
 8019ba0:	4621      	mov	r1, r4
 8019ba2:	4640      	mov	r0, r8
 8019ba4:	f7ff fee2 	bl	801996c <_printf_common>
 8019ba8:	3001      	adds	r0, #1
 8019baa:	d14c      	bne.n	8019c46 <_printf_i+0x1fe>
 8019bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019bb0:	b004      	add	sp, #16
 8019bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bb6:	4835      	ldr	r0, [pc, #212]	; (8019c8c <_printf_i+0x244>)
 8019bb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019bbc:	6829      	ldr	r1, [r5, #0]
 8019bbe:	6823      	ldr	r3, [r4, #0]
 8019bc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8019bc4:	6029      	str	r1, [r5, #0]
 8019bc6:	061d      	lsls	r5, r3, #24
 8019bc8:	d514      	bpl.n	8019bf4 <_printf_i+0x1ac>
 8019bca:	07df      	lsls	r7, r3, #31
 8019bcc:	bf44      	itt	mi
 8019bce:	f043 0320 	orrmi.w	r3, r3, #32
 8019bd2:	6023      	strmi	r3, [r4, #0]
 8019bd4:	b91e      	cbnz	r6, 8019bde <_printf_i+0x196>
 8019bd6:	6823      	ldr	r3, [r4, #0]
 8019bd8:	f023 0320 	bic.w	r3, r3, #32
 8019bdc:	6023      	str	r3, [r4, #0]
 8019bde:	2310      	movs	r3, #16
 8019be0:	e7b0      	b.n	8019b44 <_printf_i+0xfc>
 8019be2:	6823      	ldr	r3, [r4, #0]
 8019be4:	f043 0320 	orr.w	r3, r3, #32
 8019be8:	6023      	str	r3, [r4, #0]
 8019bea:	2378      	movs	r3, #120	; 0x78
 8019bec:	4828      	ldr	r0, [pc, #160]	; (8019c90 <_printf_i+0x248>)
 8019bee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019bf2:	e7e3      	b.n	8019bbc <_printf_i+0x174>
 8019bf4:	0659      	lsls	r1, r3, #25
 8019bf6:	bf48      	it	mi
 8019bf8:	b2b6      	uxthmi	r6, r6
 8019bfa:	e7e6      	b.n	8019bca <_printf_i+0x182>
 8019bfc:	4615      	mov	r5, r2
 8019bfe:	e7bb      	b.n	8019b78 <_printf_i+0x130>
 8019c00:	682b      	ldr	r3, [r5, #0]
 8019c02:	6826      	ldr	r6, [r4, #0]
 8019c04:	6961      	ldr	r1, [r4, #20]
 8019c06:	1d18      	adds	r0, r3, #4
 8019c08:	6028      	str	r0, [r5, #0]
 8019c0a:	0635      	lsls	r5, r6, #24
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	d501      	bpl.n	8019c14 <_printf_i+0x1cc>
 8019c10:	6019      	str	r1, [r3, #0]
 8019c12:	e002      	b.n	8019c1a <_printf_i+0x1d2>
 8019c14:	0670      	lsls	r0, r6, #25
 8019c16:	d5fb      	bpl.n	8019c10 <_printf_i+0x1c8>
 8019c18:	8019      	strh	r1, [r3, #0]
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	6123      	str	r3, [r4, #16]
 8019c1e:	4615      	mov	r5, r2
 8019c20:	e7ba      	b.n	8019b98 <_printf_i+0x150>
 8019c22:	682b      	ldr	r3, [r5, #0]
 8019c24:	1d1a      	adds	r2, r3, #4
 8019c26:	602a      	str	r2, [r5, #0]
 8019c28:	681d      	ldr	r5, [r3, #0]
 8019c2a:	6862      	ldr	r2, [r4, #4]
 8019c2c:	2100      	movs	r1, #0
 8019c2e:	4628      	mov	r0, r5
 8019c30:	f7e6 fade 	bl	80001f0 <memchr>
 8019c34:	b108      	cbz	r0, 8019c3a <_printf_i+0x1f2>
 8019c36:	1b40      	subs	r0, r0, r5
 8019c38:	6060      	str	r0, [r4, #4]
 8019c3a:	6863      	ldr	r3, [r4, #4]
 8019c3c:	6123      	str	r3, [r4, #16]
 8019c3e:	2300      	movs	r3, #0
 8019c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c44:	e7a8      	b.n	8019b98 <_printf_i+0x150>
 8019c46:	6923      	ldr	r3, [r4, #16]
 8019c48:	462a      	mov	r2, r5
 8019c4a:	4649      	mov	r1, r9
 8019c4c:	4640      	mov	r0, r8
 8019c4e:	47d0      	blx	sl
 8019c50:	3001      	adds	r0, #1
 8019c52:	d0ab      	beq.n	8019bac <_printf_i+0x164>
 8019c54:	6823      	ldr	r3, [r4, #0]
 8019c56:	079b      	lsls	r3, r3, #30
 8019c58:	d413      	bmi.n	8019c82 <_printf_i+0x23a>
 8019c5a:	68e0      	ldr	r0, [r4, #12]
 8019c5c:	9b03      	ldr	r3, [sp, #12]
 8019c5e:	4298      	cmp	r0, r3
 8019c60:	bfb8      	it	lt
 8019c62:	4618      	movlt	r0, r3
 8019c64:	e7a4      	b.n	8019bb0 <_printf_i+0x168>
 8019c66:	2301      	movs	r3, #1
 8019c68:	4632      	mov	r2, r6
 8019c6a:	4649      	mov	r1, r9
 8019c6c:	4640      	mov	r0, r8
 8019c6e:	47d0      	blx	sl
 8019c70:	3001      	adds	r0, #1
 8019c72:	d09b      	beq.n	8019bac <_printf_i+0x164>
 8019c74:	3501      	adds	r5, #1
 8019c76:	68e3      	ldr	r3, [r4, #12]
 8019c78:	9903      	ldr	r1, [sp, #12]
 8019c7a:	1a5b      	subs	r3, r3, r1
 8019c7c:	42ab      	cmp	r3, r5
 8019c7e:	dcf2      	bgt.n	8019c66 <_printf_i+0x21e>
 8019c80:	e7eb      	b.n	8019c5a <_printf_i+0x212>
 8019c82:	2500      	movs	r5, #0
 8019c84:	f104 0619 	add.w	r6, r4, #25
 8019c88:	e7f5      	b.n	8019c76 <_printf_i+0x22e>
 8019c8a:	bf00      	nop
 8019c8c:	0801bf39 	.word	0x0801bf39
 8019c90:	0801bf4a 	.word	0x0801bf4a

08019c94 <__sread>:
 8019c94:	b510      	push	{r4, lr}
 8019c96:	460c      	mov	r4, r1
 8019c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c9c:	f000 f894 	bl	8019dc8 <_read_r>
 8019ca0:	2800      	cmp	r0, #0
 8019ca2:	bfab      	itete	ge
 8019ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8019ca8:	181b      	addge	r3, r3, r0
 8019caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019cae:	bfac      	ite	ge
 8019cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8019cb2:	81a3      	strhlt	r3, [r4, #12]
 8019cb4:	bd10      	pop	{r4, pc}

08019cb6 <__swrite>:
 8019cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cba:	461f      	mov	r7, r3
 8019cbc:	898b      	ldrh	r3, [r1, #12]
 8019cbe:	05db      	lsls	r3, r3, #23
 8019cc0:	4605      	mov	r5, r0
 8019cc2:	460c      	mov	r4, r1
 8019cc4:	4616      	mov	r6, r2
 8019cc6:	d505      	bpl.n	8019cd4 <__swrite+0x1e>
 8019cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ccc:	2302      	movs	r3, #2
 8019cce:	2200      	movs	r2, #0
 8019cd0:	f000 f868 	bl	8019da4 <_lseek_r>
 8019cd4:	89a3      	ldrh	r3, [r4, #12]
 8019cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019cde:	81a3      	strh	r3, [r4, #12]
 8019ce0:	4632      	mov	r2, r6
 8019ce2:	463b      	mov	r3, r7
 8019ce4:	4628      	mov	r0, r5
 8019ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019cea:	f000 b817 	b.w	8019d1c <_write_r>

08019cee <__sseek>:
 8019cee:	b510      	push	{r4, lr}
 8019cf0:	460c      	mov	r4, r1
 8019cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019cf6:	f000 f855 	bl	8019da4 <_lseek_r>
 8019cfa:	1c43      	adds	r3, r0, #1
 8019cfc:	89a3      	ldrh	r3, [r4, #12]
 8019cfe:	bf15      	itete	ne
 8019d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8019d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019d0a:	81a3      	strheq	r3, [r4, #12]
 8019d0c:	bf18      	it	ne
 8019d0e:	81a3      	strhne	r3, [r4, #12]
 8019d10:	bd10      	pop	{r4, pc}

08019d12 <__sclose>:
 8019d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d16:	f000 b813 	b.w	8019d40 <_close_r>
	...

08019d1c <_write_r>:
 8019d1c:	b538      	push	{r3, r4, r5, lr}
 8019d1e:	4d07      	ldr	r5, [pc, #28]	; (8019d3c <_write_r+0x20>)
 8019d20:	4604      	mov	r4, r0
 8019d22:	4608      	mov	r0, r1
 8019d24:	4611      	mov	r1, r2
 8019d26:	2200      	movs	r2, #0
 8019d28:	602a      	str	r2, [r5, #0]
 8019d2a:	461a      	mov	r2, r3
 8019d2c:	f7e8 fd57 	bl	80027de <_write>
 8019d30:	1c43      	adds	r3, r0, #1
 8019d32:	d102      	bne.n	8019d3a <_write_r+0x1e>
 8019d34:	682b      	ldr	r3, [r5, #0]
 8019d36:	b103      	cbz	r3, 8019d3a <_write_r+0x1e>
 8019d38:	6023      	str	r3, [r4, #0]
 8019d3a:	bd38      	pop	{r3, r4, r5, pc}
 8019d3c:	20002e28 	.word	0x20002e28

08019d40 <_close_r>:
 8019d40:	b538      	push	{r3, r4, r5, lr}
 8019d42:	4d06      	ldr	r5, [pc, #24]	; (8019d5c <_close_r+0x1c>)
 8019d44:	2300      	movs	r3, #0
 8019d46:	4604      	mov	r4, r0
 8019d48:	4608      	mov	r0, r1
 8019d4a:	602b      	str	r3, [r5, #0]
 8019d4c:	f7e8 fd63 	bl	8002816 <_close>
 8019d50:	1c43      	adds	r3, r0, #1
 8019d52:	d102      	bne.n	8019d5a <_close_r+0x1a>
 8019d54:	682b      	ldr	r3, [r5, #0]
 8019d56:	b103      	cbz	r3, 8019d5a <_close_r+0x1a>
 8019d58:	6023      	str	r3, [r4, #0]
 8019d5a:	bd38      	pop	{r3, r4, r5, pc}
 8019d5c:	20002e28 	.word	0x20002e28

08019d60 <_fstat_r>:
 8019d60:	b538      	push	{r3, r4, r5, lr}
 8019d62:	4d07      	ldr	r5, [pc, #28]	; (8019d80 <_fstat_r+0x20>)
 8019d64:	2300      	movs	r3, #0
 8019d66:	4604      	mov	r4, r0
 8019d68:	4608      	mov	r0, r1
 8019d6a:	4611      	mov	r1, r2
 8019d6c:	602b      	str	r3, [r5, #0]
 8019d6e:	f7e8 fd5e 	bl	800282e <_fstat>
 8019d72:	1c43      	adds	r3, r0, #1
 8019d74:	d102      	bne.n	8019d7c <_fstat_r+0x1c>
 8019d76:	682b      	ldr	r3, [r5, #0]
 8019d78:	b103      	cbz	r3, 8019d7c <_fstat_r+0x1c>
 8019d7a:	6023      	str	r3, [r4, #0]
 8019d7c:	bd38      	pop	{r3, r4, r5, pc}
 8019d7e:	bf00      	nop
 8019d80:	20002e28 	.word	0x20002e28

08019d84 <_isatty_r>:
 8019d84:	b538      	push	{r3, r4, r5, lr}
 8019d86:	4d06      	ldr	r5, [pc, #24]	; (8019da0 <_isatty_r+0x1c>)
 8019d88:	2300      	movs	r3, #0
 8019d8a:	4604      	mov	r4, r0
 8019d8c:	4608      	mov	r0, r1
 8019d8e:	602b      	str	r3, [r5, #0]
 8019d90:	f7e8 fd5d 	bl	800284e <_isatty>
 8019d94:	1c43      	adds	r3, r0, #1
 8019d96:	d102      	bne.n	8019d9e <_isatty_r+0x1a>
 8019d98:	682b      	ldr	r3, [r5, #0]
 8019d9a:	b103      	cbz	r3, 8019d9e <_isatty_r+0x1a>
 8019d9c:	6023      	str	r3, [r4, #0]
 8019d9e:	bd38      	pop	{r3, r4, r5, pc}
 8019da0:	20002e28 	.word	0x20002e28

08019da4 <_lseek_r>:
 8019da4:	b538      	push	{r3, r4, r5, lr}
 8019da6:	4d07      	ldr	r5, [pc, #28]	; (8019dc4 <_lseek_r+0x20>)
 8019da8:	4604      	mov	r4, r0
 8019daa:	4608      	mov	r0, r1
 8019dac:	4611      	mov	r1, r2
 8019dae:	2200      	movs	r2, #0
 8019db0:	602a      	str	r2, [r5, #0]
 8019db2:	461a      	mov	r2, r3
 8019db4:	f7e8 fd56 	bl	8002864 <_lseek>
 8019db8:	1c43      	adds	r3, r0, #1
 8019dba:	d102      	bne.n	8019dc2 <_lseek_r+0x1e>
 8019dbc:	682b      	ldr	r3, [r5, #0]
 8019dbe:	b103      	cbz	r3, 8019dc2 <_lseek_r+0x1e>
 8019dc0:	6023      	str	r3, [r4, #0]
 8019dc2:	bd38      	pop	{r3, r4, r5, pc}
 8019dc4:	20002e28 	.word	0x20002e28

08019dc8 <_read_r>:
 8019dc8:	b538      	push	{r3, r4, r5, lr}
 8019dca:	4d07      	ldr	r5, [pc, #28]	; (8019de8 <_read_r+0x20>)
 8019dcc:	4604      	mov	r4, r0
 8019dce:	4608      	mov	r0, r1
 8019dd0:	4611      	mov	r1, r2
 8019dd2:	2200      	movs	r2, #0
 8019dd4:	602a      	str	r2, [r5, #0]
 8019dd6:	461a      	mov	r2, r3
 8019dd8:	f7e8 fce4 	bl	80027a4 <_read>
 8019ddc:	1c43      	adds	r3, r0, #1
 8019dde:	d102      	bne.n	8019de6 <_read_r+0x1e>
 8019de0:	682b      	ldr	r3, [r5, #0]
 8019de2:	b103      	cbz	r3, 8019de6 <_read_r+0x1e>
 8019de4:	6023      	str	r3, [r4, #0]
 8019de6:	bd38      	pop	{r3, r4, r5, pc}
 8019de8:	20002e28 	.word	0x20002e28

08019dec <_init>:
 8019dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dee:	bf00      	nop
 8019df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019df2:	bc08      	pop	{r3}
 8019df4:	469e      	mov	lr, r3
 8019df6:	4770      	bx	lr

08019df8 <_fini>:
 8019df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dfa:	bf00      	nop
 8019dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019dfe:	bc08      	pop	{r3}
 8019e00:	469e      	mov	lr, r3
 8019e02:	4770      	bx	lr
