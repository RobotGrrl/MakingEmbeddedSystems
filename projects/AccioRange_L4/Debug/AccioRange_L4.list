
AccioRange_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000198ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002164  08019a9c  08019a9c  00029a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bc00  0801bc00  0003073c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bc00  0801bc00  0002bc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bc08  0801bc08  0003073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bc08  0801bc08  0002bc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bc0c  0801bc0c  0002bc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000073c  20000000  0801bc10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002698  2000073c  0801c34c  0003073c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002dd4  0801c34c  00032dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003073c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000463d4  00000000  00000000  0003076c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008b79  00000000  00000000  00076b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000038f8  00000000  00000000  0007f6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003548  00000000  00000000  00082fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003af45  00000000  00000000  00086500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046c96  00000000  00000000  000c1445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013fdc1  00000000  00000000  001080db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00247e9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fa0c  00000000  00000000  00247eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000073c 	.word	0x2000073c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08019a84 	.word	0x08019a84

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000740 	.word	0x20000740
 80001ec:	08019a84 	.word	0x08019a84

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005b8:	4a2f      	ldr	r2, [pc, #188]	; (8000678 <MX_ADC1_Init+0xe4>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005c4:	2208      	movs	r2, #8
 80005c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_ADC1_Init+0xe0>)
 800060a:	2200      	movs	r2, #0
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000616:	4817      	ldr	r0, [pc, #92]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000618:	f00a fe6e 	bl	800b2f8 <HAL_ADC_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000622:	f001 fb27 	bl	8001c74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000632:	f00b fbed 	bl	800be10 <HAL_ADCEx_MultiModeConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800063c:	f001 fb1a 	bl	8001c74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_ADC1_Init+0xe8>)
 8000642:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000644:	2306      	movs	r3, #6
 8000646:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800064c:	237f      	movs	r3, #127	; 0x7f
 800064e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000650:	2304      	movs	r3, #4
 8000652:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0xe0>)
 800065e:	f00a ffa5 	bl	800b5ac <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000668:	f001 fb04 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3728      	adds	r7, #40	; 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000758 	.word	0x20000758
 8000678:	50040000 	.word	0x50040000
 800067c:	36902000 	.word	0x36902000

08000680 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	463b      	mov	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_ADC2_Init+0xbc>)
 8000698:	4a29      	ldr	r2, [pc, #164]	; (8000740 <MX_ADC2_Init+0xc0>)
 800069a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <MX_ADC2_Init+0xbc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_ADC2_Init+0xbc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <MX_ADC2_Init+0xbc>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_ADC2_Init+0xbc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_ADC2_Init+0xbc>)
 80006b6:	2204      	movs	r2, #4
 80006b8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_ADC2_Init+0xbc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_ADC2_Init+0xbc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC2_Init+0xbc>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_ADC2_Init+0xbc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_ADC2_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_ADC2_Init+0xbc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_ADC2_Init+0xbc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_ADC2_Init+0xbc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_ADC2_Init+0xbc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006f6:	4811      	ldr	r0, [pc, #68]	; (800073c <MX_ADC2_Init+0xbc>)
 80006f8:	f00a fdfe 	bl	800b2f8 <HAL_ADC_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000702:	f001 fab7 	bl	8001c74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_ADC2_Init+0xc4>)
 8000708:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070a:	2306      	movs	r3, #6
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000712:	237f      	movs	r3, #127	; 0x7f
 8000714:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000716:	2304      	movs	r3, #4
 8000718:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_ADC2_Init+0xbc>)
 8000724:	f00a ff42 	bl	800b5ac <HAL_ADC_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800072e:	f001 faa1 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200007c0 	.word	0x200007c0
 8000740:	50040100 	.word	0x50040100
 8000744:	25b00200 	.word	0x25b00200

08000748 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000760:	4a29      	ldr	r2, [pc, #164]	; (8000808 <MX_ADC3_Init+0xc0>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_ADC3_Init+0xbc>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_ADC3_Init+0xbc>)
 800077e:	2204      	movs	r2, #4
 8000780:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_ADC3_Init+0xbc>)
 800078a:	2200      	movs	r2, #0
 800078c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000790:	2201      	movs	r2, #1
 8000792:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_ADC3_Init+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007be:	4811      	ldr	r0, [pc, #68]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007c0:	f00a fd9a 	bl	800b2f8 <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80007ca:	f001 fa53 	bl	8001c74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_ADC3_Init+0xc4>)
 80007d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d2:	2306      	movs	r3, #6
 80007d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007da:	237f      	movs	r3, #127	; 0x7f
 80007dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007de:	2304      	movs	r3, #4
 80007e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007ec:	f00a fede 	bl	800b5ac <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80007f6:	f001 fa3d 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000828 	.word	0x20000828
 8000808:	50040200 	.word	0x50040200
 800080c:	36902000 	.word	0x36902000

08000810 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08e      	sub	sp, #56	; 0x38
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a59      	ldr	r2, [pc, #356]	; (8000994 <HAL_ADC_MspInit+0x184>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d12d      	bne.n	800088e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000832:	4b59      	ldr	r3, [pc, #356]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	4a57      	ldr	r2, [pc, #348]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800083a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800083c:	4b56      	ldr	r3, [pc, #344]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10b      	bne.n	800085c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000844:	4b55      	ldr	r3, [pc, #340]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000848:	4a54      	ldr	r2, [pc, #336]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800084a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800084e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000850:	4b52      	ldr	r3, [pc, #328]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000858:	623b      	str	r3, [r7, #32]
 800085a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	4b4f      	ldr	r3, [pc, #316]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000860:	4a4e      	ldr	r2, [pc, #312]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000868:	4b4c      	ldr	r3, [pc, #304]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8000874:	2318      	movs	r3, #24
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000878:	230b      	movs	r3, #11
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	4619      	mov	r1, r3
 8000886:	4846      	ldr	r0, [pc, #280]	; (80009a0 <HAL_ADC_MspInit+0x190>)
 8000888:	f00b fe48 	bl	800c51c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800088c:	e07e      	b.n	800098c <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC2)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a44      	ldr	r2, [pc, #272]	; (80009a4 <HAL_ADC_MspInit+0x194>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d146      	bne.n	8000926 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000898:	4b3f      	ldr	r3, [pc, #252]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a3e      	ldr	r2, [pc, #248]	; (8000998 <HAL_ADC_MspInit+0x188>)
 80008a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80008a2:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <HAL_ADC_MspInit+0x188>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d10b      	bne.n	80008c2 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80008aa:	4b3c      	ldr	r3, [pc, #240]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a3b      	ldr	r2, [pc, #236]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b39      	ldr	r3, [pc, #228]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b36      	ldr	r3, [pc, #216]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a35      	ldr	r2, [pc, #212]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 80008f2:	2303      	movs	r3, #3
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008f6:	230b      	movs	r3, #11
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	4826      	ldr	r0, [pc, #152]	; (80009a0 <HAL_ADC_MspInit+0x190>)
 8000906:	f00b fe09 	bl	800c51c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 800090a:	2312      	movs	r3, #18
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800090e:	230b      	movs	r3, #11
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f00b fdfc 	bl	800c51c <HAL_GPIO_Init>
}
 8000924:	e032      	b.n	800098c <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC3)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <HAL_ADC_MspInit+0x198>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d12d      	bne.n	800098c <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a18      	ldr	r2, [pc, #96]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000938:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d10b      	bne.n	800095a <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000948:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000960:	f043 0320 	orr.w	r3, r3, #32
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000978:	230b      	movs	r3, #11
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4809      	ldr	r0, [pc, #36]	; (80009ac <HAL_ADC_MspInit+0x19c>)
 8000988:	f00b fdc8 	bl	800c51c <HAL_GPIO_Init>
}
 800098c:	bf00      	nop
 800098e:	3738      	adds	r7, #56	; 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	50040000 	.word	0x50040000
 8000998:	20000890 	.word	0x20000890
 800099c:	40021000 	.word	0x40021000
 80009a0:	48000800 	.word	0x48000800
 80009a4:	50040100 	.word	0x50040100
 80009a8:	50040200 	.word	0x50040200
 80009ac:	48001400 	.word	0x48001400

080009b0 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009b6:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <MX_DCMI_Init+0x64>)
 80009b8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009fe:	f00b fbfb 	bl	800c1f8 <HAL_DCMI_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f001 f934 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000894 	.word	0x20000894
 8000a14:	50050000 	.word	0x50050000

08000a18 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a33      	ldr	r2, [pc, #204]	; (8000b04 <HAL_DCMI_MspInit+0xec>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d160      	bne.n	8000afc <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000a3a:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a32      	ldr	r2, [pc, #200]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a52:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a2c      	ldr	r2, [pc, #176]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 8000a9a:	f645 7320 	movw	r3, #24352	; 0x5f20
 8000a9e:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000aac:	230a      	movs	r3, #10
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4815      	ldr	r0, [pc, #84]	; (8000b0c <HAL_DCMI_MspInit+0xf4>)
 8000ab8:	f00b fd30 	bl	800c51c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000abc:	23b0      	movs	r3, #176	; 0xb0
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000acc:	230a      	movs	r3, #10
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480e      	ldr	r0, [pc, #56]	; (8000b10 <HAL_DCMI_MspInit+0xf8>)
 8000ad8:	f00b fd20 	bl	800c51c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8000adc:	2320      	movs	r3, #32
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000aec:	230a      	movs	r3, #10
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4807      	ldr	r0, [pc, #28]	; (8000b14 <HAL_DCMI_MspInit+0xfc>)
 8000af8:	f00b fd10 	bl	800c51c <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	; 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	50050000 	.word	0x50050000
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	48001c00 	.word	0x48001c00
 8000b10:	48002000 	.word	0x48002000
 8000b14:	48001000 	.word	0x48001000

08000b18 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b1c:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b1e:	4a31      	ldr	r2, [pc, #196]	; (8000be4 <MX_DFSDM1_Init+0xcc>)
 8000b20:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b34:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b3a:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b6a:	481d      	ldr	r0, [pc, #116]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b6c:	f00b fbca 	bl	800c304 <HAL_DFSDM_ChannelInit>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000b76:	f001 f87d 	bl	8001c74 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <MX_DFSDM1_Init+0xd4>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b8e:	2202      	movs	r2, #2
 8000b90:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000bca:	4807      	ldr	r0, [pc, #28]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bcc:	f00b fb9a 	bl	800c304 <HAL_DFSDM_ChannelInit>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000bd6:	f001 f84d 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200008f8 	.word	0x200008f8
 8000be4:	40016020 	.word	0x40016020
 8000be8:	20000930 	.word	0x20000930
 8000bec:	40016040 	.word	0x40016040

08000bf0 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0ae      	sub	sp, #184	; 0xb8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	f107 0318 	add.w	r3, r7, #24
 8000c0c:	228c      	movs	r2, #140	; 0x8c
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f017 ff23 	bl	8018a5c <memset>
  if(DFSDM1_Init == 0)
 8000c16:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d163      	bne.n	8000ce6 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00f fa9a 	bl	8010168 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000c3a:	f001 f81b 	bl	8001c74 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	4a2c      	ldr	r2, [pc, #176]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c48:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a26      	ldr	r2, [pc, #152]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	4a20      	ldr	r2, [pc, #128]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8000c86:	2384      	movs	r3, #132	; 0x84
 8000c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000cac:	f00b fc36 	bl	800c51c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000cca:	2306      	movs	r3, #6
 8000ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_DFSDM_ChannelMspInit+0x10c>)
 8000cd8:	f00b fc20 	bl	800c51c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000ce4:	6013      	str	r3, [r2, #0]
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	37b8      	adds	r7, #184	; 0xb8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000968 	.word	0x20000968
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	48000400 	.word	0x48000400

08000d00 <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SRAM_HandleTypeDef hsram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2220      	movs	r2, #32
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f017 fea5 	bl	8018a5c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000d12:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d14:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000d18:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000d1a:	4b4d      	ldr	r3, [pc, #308]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d1c:	4a4d      	ldr	r2, [pc, #308]	; (8000e54 <MX_FMC_Init+0x154>)
 8000d1e:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8000d20:	4b4b      	ldr	r3, [pc, #300]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d22:	2202      	movs	r2, #2
 8000d24:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000d26:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000d2c:	4b48      	ldr	r3, [pc, #288]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d32:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d34:	2210      	movs	r2, #16
 8000d36:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000d38:	4b45      	ldr	r3, [pc, #276]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d3e:	4b44      	ldr	r3, [pc, #272]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000d44:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000d4a:	4b41      	ldr	r3, [pc, #260]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000d50:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000d56:	4b3e      	ldr	r3, [pc, #248]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d5c:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000d62:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000d68:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000d6e:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000d7e:	230f      	movs	r3, #15
 8000d80:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000d82:	23ff      	movs	r3, #255	; 0xff
 8000d84:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000d86:	230f      	movs	r3, #15
 8000d88:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000d8e:	2311      	movs	r3, #17
 8000d90:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	482c      	ldr	r0, [pc, #176]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d9e:	f011 fdb8 	bl	8012912 <HAL_SRAM_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8000da8:	f000 ff64 	bl	8001c74 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dae:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000db2:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000db4:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <MX_FMC_Init+0x158>)
 8000db6:	4a27      	ldr	r2, [pc, #156]	; (8000e54 <MX_FMC_Init+0x154>)
 8000db8:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8000dba:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dce:	2210      	movs	r2, #16
 8000dd0:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_FMC_Init+0x158>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_FMC_Init+0x158>)
 8000de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_FMC_Init+0x158>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000e16:	230f      	movs	r3, #15
 8000e18:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000e1e:	23ff      	movs	r3, #255	; 0xff
 8000e20:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000e22:	230f      	movs	r3, #15
 8000e24:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000e26:	2310      	movs	r3, #16
 8000e28:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000e2a:	2311      	movs	r3, #17
 8000e2c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e3a:	f011 fd6a 	bl	8012912 <HAL_SRAM_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8000e44:	f000 ff16 	bl	8001c74 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2000096c 	.word	0x2000096c
 8000e54:	a0000104 	.word	0xa0000104
 8000e58:	200009bc 	.word	0x200009bc

08000e5c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <HAL_FMC_MspInit+0xc4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d14f      	bne.n	8000f18 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <HAL_FMC_MspInit+0xc4>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e82:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6513      	str	r3, [r2, #80]	; 0x50
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8000e96:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e9a:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481d      	ldr	r0, [pc, #116]	; (8000f28 <HAL_FMC_MspInit+0xcc>)
 8000eb2:	f00b fb33 	bl	800c51c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8000eb6:	f240 233f 	movw	r3, #575	; 0x23f
 8000eba:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec8:	230c      	movs	r3, #12
 8000eca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4816      	ldr	r0, [pc, #88]	; (8000f2c <HAL_FMC_MspInit+0xd0>)
 8000ed2:	f00b fb23 	bl	800c51c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8000ed6:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8000eda:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ee8:	230c      	movs	r3, #12
 8000eea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480f      	ldr	r0, [pc, #60]	; (8000f30 <HAL_FMC_MspInit+0xd4>)
 8000ef2:	f00b fb13 	bl	800c51c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8000ef6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000efa:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f08:	230c      	movs	r3, #12
 8000f0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <HAL_FMC_MspInit+0xd8>)
 8000f12:	f00b fb03 	bl	800c51c <HAL_GPIO_Init>
 8000f16:	e000      	b.n	8000f1a <HAL_FMC_MspInit+0xbe>
    return;
 8000f18:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000a0c 	.word	0x20000a0c
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48001000 	.word	0x48001000
 8000f2c:	48001800 	.word	0x48001800
 8000f30:	48000c00 	.word	0x48000c00
 8000f34:	48001400 	.word	0x48001400

08000f38 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f40:	f7ff ff8c 	bl	8000e5c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <MX_GPIO_Init>:
     PH13   ------> TIM8_CH1N
     PB9   ------> S_TIM4_CH4
     PA8   ------> LPTIM2_OUT
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f62:	4bb4      	ldr	r3, [pc, #720]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4ab3      	ldr	r2, [pc, #716]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4bb1      	ldr	r3, [pc, #708]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f76:	623b      	str	r3, [r7, #32]
 8000f78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	4bae      	ldr	r3, [pc, #696]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4aad      	ldr	r2, [pc, #692]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4bab      	ldr	r3, [pc, #684]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f92:	4ba8      	ldr	r3, [pc, #672]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4aa7      	ldr	r2, [pc, #668]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000f98:	f043 0310 	orr.w	r3, r3, #16
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4ba5      	ldr	r3, [pc, #660]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4ba2      	ldr	r3, [pc, #648]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4aa1      	ldr	r2, [pc, #644]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b9f      	ldr	r3, [pc, #636]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b9c      	ldr	r3, [pc, #624]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a9b      	ldr	r2, [pc, #620]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b99      	ldr	r3, [pc, #612]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fda:	4b96      	ldr	r3, [pc, #600]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a95      	ldr	r2, [pc, #596]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b93      	ldr	r3, [pc, #588]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000ff2:	f00e f961 	bl	800f2b8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	4b8f      	ldr	r3, [pc, #572]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a8e      	ldr	r2, [pc, #568]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b8c      	ldr	r3, [pc, #560]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b89      	ldr	r3, [pc, #548]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a88      	ldr	r2, [pc, #544]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b86      	ldr	r3, [pc, #536]	; (8001234 <MX_GPIO_Init+0x2e8>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	4b83      	ldr	r3, [pc, #524]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a82      	ldr	r2, [pc, #520]	; (8001234 <MX_GPIO_Init+0x2e8>)
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b80      	ldr	r3, [pc, #512]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0320 	and.w	r3, r3, #32
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LCD_BL_Pin|ARD_D4_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f640 0101 	movw	r1, #2049	; 0x801
 8001044:	487c      	ldr	r0, [pc, #496]	; (8001238 <MX_GPIO_Init+0x2ec>)
 8001046:	f00b fced 	bl	800ca24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2143      	movs	r1, #67	; 0x43
 800104e:	487b      	ldr	r0, [pc, #492]	; (800123c <MX_GPIO_Init+0x2f0>)
 8001050:	f00b fce8 	bl	800ca24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2140      	movs	r1, #64	; 0x40
 8001058:	4879      	ldr	r0, [pc, #484]	; (8001240 <MX_GPIO_Init+0x2f4>)
 800105a:	f00b fce3 	bl	800ca24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARD_D2_Pin|ARD_D7_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8001064:	4877      	ldr	r0, [pc, #476]	; (8001244 <MX_GPIO_Init+0x2f8>)
 8001066:	f00b fcdd 	bl	800ca24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001070:	4875      	ldr	r0, [pc, #468]	; (8001248 <MX_GPIO_Init+0x2fc>)
 8001072:	f00b fcd7 	bl	800ca24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 8001076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001082:	2302      	movs	r3, #2
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	4619      	mov	r1, r3
 800108c:	486a      	ldr	r0, [pc, #424]	; (8001238 <MX_GPIO_Init+0x2ec>)
 800108e:	f00b fa45 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8001092:	2304      	movs	r3, #4
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001096:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	4619      	mov	r1, r3
 80010a6:	4865      	ldr	r0, [pc, #404]	; (800123c <MX_GPIO_Init+0x2f0>)
 80010a8:	f00b fa38 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|ARD_D4_Pin;
 80010ac:	f640 0301 	movw	r3, #2049	; 0x801
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c2:	4619      	mov	r1, r3
 80010c4:	485c      	ldr	r0, [pc, #368]	; (8001238 <MX_GPIO_Init+0x2ec>)
 80010c6:	f00b fa29 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin;
 80010ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010d0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010d6:	2302      	movs	r3, #2
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_LEFT_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	4619      	mov	r1, r3
 80010e0:	4855      	ldr	r0, [pc, #340]	; (8001238 <MX_GPIO_Init+0x2ec>)
 80010e2:	f00b fa1b 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010e6:	2340      	movs	r3, #64	; 0x40
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80010f6:	2303      	movs	r3, #3
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	484d      	ldr	r0, [pc, #308]	; (8001238 <MX_GPIO_Init+0x2ec>)
 8001102:	f00b fa0b 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8001106:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001118:	2303      	movs	r3, #3
 800111a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001120:	4619      	mov	r1, r3
 8001122:	4846      	ldr	r0, [pc, #280]	; (800123c <MX_GPIO_Init+0x2f0>)
 8001124:	f00b f9fa 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_UP_Pin;
 8001128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112e:	2300      	movs	r3, #0
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001132:	2302      	movs	r3, #2
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_UP_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	483e      	ldr	r0, [pc, #248]	; (8001238 <MX_GPIO_Init+0x2ec>)
 800113e:	f00b f9ed 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001154:	2302      	movs	r3, #2
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	483a      	ldr	r0, [pc, #232]	; (8001248 <MX_GPIO_Init+0x2fc>)
 8001160:	f00b f9dc 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	4619      	mov	r1, r3
 8001176:	4831      	ldr	r0, [pc, #196]	; (800123c <MX_GPIO_Init+0x2f0>)
 8001178:	f00b f9d0 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 800117c:	2343      	movs	r3, #67	; 0x43
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800118c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001190:	4619      	mov	r1, r3
 8001192:	482a      	ldr	r0, [pc, #168]	; (800123c <MX_GPIO_Init+0x2f0>)
 8001194:	f00b f9c2 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001198:	2340      	movs	r3, #64	; 0x40
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4824      	ldr	r0, [pc, #144]	; (8001240 <MX_GPIO_Init+0x2f4>)
 80011b0:	f00b f9b4 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 80011b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	481e      	ldr	r0, [pc, #120]	; (8001244 <MX_GPIO_Init+0x2f8>)
 80011cc:	f00b f9a6 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARD_D2_Pin|ARD_D7_Pin;
 80011d0:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e6:	4619      	mov	r1, r3
 80011e8:	4816      	ldr	r0, [pc, #88]	; (8001244 <MX_GPIO_Init+0x2f8>)
 80011ea:	f00b f997 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 80011ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8001200:	230e      	movs	r3, #14
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f00b f985 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001212:	2320      	movs	r3, #32
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001216:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_GPIO_Init+0x2f4>)
 8001228:	f00b f978 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 800122c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001230:	e00c      	b.n	800124c <MX_GPIO_Init+0x300>
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	48002000 	.word	0x48002000
 800123c:	48001c00 	.word	0x48001c00
 8001240:	48000800 	.word	0x48000800
 8001244:	48001800 	.word	0x48001800
 8001248:	48000400 	.word	0x48000400
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800124e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001254:	2302      	movs	r3, #2
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125c:	4619      	mov	r1, r3
 800125e:	4819      	ldr	r0, [pc, #100]	; (80012c4 <MX_GPIO_Init+0x378>)
 8001260:	f00b f95c 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8001264:	2304      	movs	r3, #4
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001274:	4619      	mov	r1, r3
 8001276:	4814      	ldr	r0, [pc, #80]	; (80012c8 <MX_GPIO_Init+0x37c>)
 8001278:	f00b f950 	bl	800c51c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800127c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001282:	2311      	movs	r3, #17
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001292:	4619      	mov	r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <MX_GPIO_Init+0x37c>)
 8001296:	f00b f941 	bl	800c51c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2017      	movs	r0, #23
 80012a0:	f00a ff65 	bl	800c16e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012a4:	2017      	movs	r0, #23
 80012a6:	f00a ff7e 	bl	800c1a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2028      	movs	r0, #40	; 0x28
 80012b0:	f00a ff5d 	bl	800c16e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012b4:	2028      	movs	r0, #40	; 0x28
 80012b6:	f00a ff76 	bl	800c1a6 <HAL_NVIC_EnableIRQ>

}
 80012ba:	bf00      	nop
 80012bc:	3738      	adds	r7, #56	; 0x38
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	48001400 	.word	0x48001400
 80012c8:	48000400 	.word	0x48000400

080012cc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <MX_I2C1_Init+0x74>)
 80012d2:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <MX_I2C1_Init+0x78>)
 80012d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_I2C1_Init+0x74>)
 80012d8:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <MX_I2C1_Init+0x7c>)
 80012da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <MX_I2C1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_I2C1_Init+0x74>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_I2C1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_I2C1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_I2C1_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_I2C1_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_I2C1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001306:	480e      	ldr	r0, [pc, #56]	; (8001340 <MX_I2C1_Init+0x74>)
 8001308:	f00b fbbc 	bl	800ca84 <HAL_I2C_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001312:	f000 fcaf 	bl	8001c74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001316:	2100      	movs	r1, #0
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <MX_I2C1_Init+0x74>)
 800131a:	f00c fcbf 	bl	800dc9c <HAL_I2CEx_ConfigAnalogFilter>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001324:	f000 fca6 	bl	8001c74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001328:	2100      	movs	r1, #0
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_I2C1_Init+0x74>)
 800132c:	f00c fd01 	bl	800dd32 <HAL_I2CEx_ConfigDigitalFilter>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001336:	f000 fc9d 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000a10 	.word	0x20000a10
 8001344:	40005400 	.word	0x40005400
 8001348:	20303e5d 	.word	0x20303e5d

0800134c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <MX_I2C2_Init+0x74>)
 8001352:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <MX_I2C2_Init+0x78>)
 8001354:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <MX_I2C2_Init+0x74>)
 8001358:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <MX_I2C2_Init+0x7c>)
 800135a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <MX_I2C2_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <MX_I2C2_Init+0x74>)
 8001364:	2201      	movs	r2, #1
 8001366:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <MX_I2C2_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <MX_I2C2_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MX_I2C2_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_I2C2_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_I2C2_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001386:	480e      	ldr	r0, [pc, #56]	; (80013c0 <MX_I2C2_Init+0x74>)
 8001388:	f00b fb7c 	bl	800ca84 <HAL_I2C_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001392:	f000 fc6f 	bl	8001c74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <MX_I2C2_Init+0x74>)
 800139a:	f00c fc7f 	bl	800dc9c <HAL_I2CEx_ConfigAnalogFilter>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013a4:	f000 fc66 	bl	8001c74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013a8:	2100      	movs	r1, #0
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_I2C2_Init+0x74>)
 80013ac:	f00c fcc1 	bl	800dd32 <HAL_I2CEx_ConfigDigitalFilter>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f000 fc5d 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000a64 	.word	0x20000a64
 80013c4:	40005800 	.word	0x40005800
 80013c8:	20303e5d 	.word	0x20303e5d

080013cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0b0      	sub	sp, #192	; 0xc0
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	228c      	movs	r2, #140	; 0x8c
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f017 fb35 	bl	8018a5c <memset>
  if(i2cHandle->Instance==I2C1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a53      	ldr	r2, [pc, #332]	; (8001544 <HAL_I2C_MspInit+0x178>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d13c      	bne.n	8001476 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013fc:	2340      	movs	r3, #64	; 0x40
 80013fe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001400:	2300      	movs	r3, #0
 8001402:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	4618      	mov	r0, r3
 800140a:	f00e fead 	bl	8010168 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001414:	f000 fc2e 	bl	8001c74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001418:	4b4b      	ldr	r3, [pc, #300]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 800141a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141c:	4a4a      	ldr	r2, [pc, #296]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 800141e:	f043 0302 	orr.w	r3, r3, #2
 8001422:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001424:	4b48      	ldr	r3, [pc, #288]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001430:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001434:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001438:	2312      	movs	r3, #18
 800143a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143e:	2301      	movs	r3, #1
 8001440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800144a:	2304      	movs	r3, #4
 800144c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001454:	4619      	mov	r1, r3
 8001456:	483d      	ldr	r0, [pc, #244]	; (800154c <HAL_I2C_MspInit+0x180>)
 8001458:	f00b f860 	bl	800c51c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800145c:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 800145e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001460:	4a39      	ldr	r2, [pc, #228]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 8001462:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001466:	6593      	str	r3, [r2, #88]	; 0x58
 8001468:	4b37      	ldr	r3, [pc, #220]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 800146a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001474:	e061      	b.n	800153a <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a35      	ldr	r2, [pc, #212]	; (8001550 <HAL_I2C_MspInit+0x184>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d15c      	bne.n	800153a <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001484:	2300      	movs	r3, #0
 8001486:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	4618      	mov	r0, r3
 800148e:	f00e fe6b 	bl	8010168 <HAL_RCCEx_PeriphCLKConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001498:	f000 fbec 	bl	8001c74 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	4a29      	ldr	r2, [pc, #164]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 80014a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	4a23      	ldr	r2, [pc, #140]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 80014cc:	2310      	movs	r3, #16
 80014ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d2:	2312      	movs	r3, #18
 80014d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d8:	2301      	movs	r3, #1
 80014da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014e4:	2304      	movs	r3, #4
 80014e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014ee:	4619      	mov	r1, r3
 80014f0:	4818      	ldr	r0, [pc, #96]	; (8001554 <HAL_I2C_MspInit+0x188>)
 80014f2:	f00b f813 	bl	800c51c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 80014f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001504:	2301      	movs	r3, #1
 8001506:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001510:	2304      	movs	r3, #4
 8001512:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800151a:	4619      	mov	r1, r3
 800151c:	480b      	ldr	r0, [pc, #44]	; (800154c <HAL_I2C_MspInit+0x180>)
 800151e:	f00a fffd 	bl	800c51c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 8001528:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800152c:	6593      	str	r3, [r2, #88]	; 0x58
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_I2C_MspInit+0x17c>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
}
 800153a:	bf00      	nop
 800153c:	37c0      	adds	r7, #192	; 0xc0
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40005400 	.word	0x40005400
 8001548:	40021000 	.word	0x40021000
 800154c:	48000400 	.word	0x48000400
 8001550:	40005800 	.word	0x40005800
 8001554:	48001c00 	.word	0x48001c00

08001558 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a15      	ldr	r2, [pc, #84]	; (80015bc <HAL_I2C_MspDeInit+0x64>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d10f      	bne.n	800158a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_I2C_MspDeInit+0x68>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <HAL_I2C_MspDeInit+0x68>)
 8001570:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001574:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157a:	4812      	ldr	r0, [pc, #72]	; (80015c4 <HAL_I2C_MspDeInit+0x6c>)
 800157c:	f00b f960 	bl	800c840 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	4810      	ldr	r0, [pc, #64]	; (80015c4 <HAL_I2C_MspDeInit+0x6c>)
 8001584:	f00b f95c 	bl	800c840 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001588:	e013      	b.n	80015b2 <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_I2C_MspDeInit+0x70>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d10e      	bne.n	80015b2 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_I2C_MspDeInit+0x68>)
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_I2C_MspDeInit+0x68>)
 800159a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800159e:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin);
 80015a0:	2110      	movs	r1, #16
 80015a2:	480a      	ldr	r0, [pc, #40]	; (80015cc <HAL_I2C_MspDeInit+0x74>)
 80015a4:	f00b f94c 	bl	800c840 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin);
 80015a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <HAL_I2C_MspDeInit+0x6c>)
 80015ae:	f00b f947 	bl	800c840 <HAL_GPIO_DeInit>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40005400 	.word	0x40005400
 80015c0:	40021000 	.word	0x40021000
 80015c4:	48000400 	.word	0x48000400
 80015c8:	40005800 	.word	0x40005800
 80015cc:	48001c00 	.word	0x48001c00

080015d0 <drawCircle>:
		sensor_sample = true;
	}

}

void drawCircle(uint16_t x, uint16_t y) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	460a      	mov	r2, r1
 80015da:	80fb      	strh	r3, [r7, #6]
 80015dc:	4613      	mov	r3, r2
 80015de:	80bb      	strh	r3, [r7, #4]

	if(!circle_selected) {
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <drawCircle+0x50>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	f083 0301 	eor.w	r3, r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00a      	beq.n	8001604 <drawCircle+0x34>
		BSP_LCD_SetTextColor( LCD_COLOR_DARKMAGENTA );
 80015ee:	f248 0010 	movw	r0, #32784	; 0x8010
 80015f2:	f008 fcd7 	bl	8009fa4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(x, y, 20);
 80015f6:	88b9      	ldrh	r1, [r7, #4]
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	2214      	movs	r2, #20
 80015fc:	4618      	mov	r0, r3
 80015fe:	f008 feef 	bl	800a3e0 <BSP_LCD_FillCircle>
	} else {
		BSP_LCD_SetTextColor( LCD_COLOR_GREEN );
		BSP_LCD_FillCircle(x, y, 40);
	}

}
 8001602:	e009      	b.n	8001618 <drawCircle+0x48>
		BSP_LCD_SetTextColor( LCD_COLOR_GREEN );
 8001604:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001608:	f008 fccc 	bl	8009fa4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(x, y, 40);
 800160c:	88b9      	ldrh	r1, [r7, #4]
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	2228      	movs	r2, #40	; 0x28
 8001612:	4618      	mov	r0, r3
 8001614:	f008 fee4 	bl	800a3e0 <BSP_LCD_FillCircle>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000ac6 	.word	0x20000ac6

08001624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b095      	sub	sp, #84	; 0x54
 8001628:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162a:	f009 fc0d 	bl	800ae48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162e:	f000 fa61 	bl	8001af4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001632:	f000 fac1 	bl	8001bb8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001636:	f7ff fc89 	bl	8000f4c <MX_GPIO_Init>
  MX_ADC1_Init();
 800163a:	f7fe ffab 	bl	8000594 <MX_ADC1_Init>
  MX_ADC2_Init();
 800163e:	f7ff f81f 	bl	8000680 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001642:	f7ff f881 	bl	8000748 <MX_ADC3_Init>
  MX_DCMI_Init();
 8001646:	f7ff f9b3 	bl	80009b0 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 800164a:	f7ff fa65 	bl	8000b18 <MX_DFSDM1_Init>
  MX_FMC_Init();
 800164e:	f7ff fb57 	bl	8000d00 <MX_FMC_Init>
  MX_I2C1_Init();
 8001652:	f7ff fe3b 	bl	80012cc <MX_I2C1_Init>
  MX_I2C2_Init();
 8001656:	f7ff fe79 	bl	800134c <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800165a:	f000 fffb 	bl	8002654 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800165e:	f001 f827 	bl	80026b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001662:	f001 f855 	bl	8002710 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8001666:	f000 fb0b 	bl	8001c80 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800166a:	f000 fb97 	bl	8001d9c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 800166e:	f000 fcb7 	bl	8001fe0 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8001672:	f000 fd47 	bl	8002104 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001676:	f000 fd83 	bl	8002180 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 800167a:	f016 fbad 	bl	8017dd8 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 800167e:	f000 ff93 	bl	80025a8 <MX_TIM6_Init>
  // above: MX_SDMMC1_SD_Init(); has to be commented out to not be called



  /* LCD Init */
	if (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE) == LCD_ERROR)
 8001682:	2001      	movs	r0, #1
 8001684:	f008 fbd0 	bl	8009e28 <BSP_LCD_InitEx>
 8001688:	4603      	mov	r3, r0
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <main+0x6e>
	{
		/* Initialization Error */
		Error_Handler();
 800168e:	f000 faf1 	bl	8001c74 <Error_Handler>
	}

	// the lcd bsp includes the fontNN.c files in the Utilities directory
	// in that file, a struct is declared: FontNN
	//BSP_LCD_SetFont(&Font20);
	BSP_LCD_SetFont(&Font24);
 8001692:	48a6      	ldr	r0, [pc, #664]	; (800192c <main+0x308>)
 8001694:	f008 fc96 	bl	8009fc4 <BSP_LCD_SetFont>

	// the display is 240 px tall, XYZ px wide
	BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Purple Ball", CENTER_MODE);
 8001698:	2301      	movs	r3, #1
 800169a:	4aa5      	ldr	r2, [pc, #660]	; (8001930 <main+0x30c>)
 800169c:	21af      	movs	r1, #175	; 0xaf
 800169e:	2000      	movs	r0, #0
 80016a0:	f008 fd00 	bl	800a0a4 <BSP_LCD_DisplayStringAt>



	// touchscreen init
	if(BSP_TS_InitEx(BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), LCD_ORIENTATION_LANDSCAPE) != TS_OK) {
 80016a4:	f008 fc66 	bl	8009f74 <BSP_LCD_GetXSize>
 80016a8:	4603      	mov	r3, r0
 80016aa:	b29c      	uxth	r4, r3
 80016ac:	f008 fc6e 	bl	8009f8c <BSP_LCD_GetYSize>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	2201      	movs	r2, #1
 80016b6:	4619      	mov	r1, r3
 80016b8:	4620      	mov	r0, r4
 80016ba:	f009 f9a7 	bl	800aa0c <BSP_TS_InitEx>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <main+0xa4>
		Error_Handler();
 80016c4:	f000 fad6 	bl	8001c74 <Error_Handler>
	}

	BSP_LCD_ScreenDimmingConfig(100, 5, 1, 20);
 80016c8:	2314      	movs	r3, #20
 80016ca:	2201      	movs	r2, #1
 80016cc:	2105      	movs	r1, #5
 80016ce:	2064      	movs	r0, #100	; 0x64
 80016d0:	f008 ff2c 	bl	800a52c <BSP_LCD_ScreenDimmingConfig>


	// LED GPIO
	BSP_LED_Init(LED2_PIN); // LD1
 80016d4:	2000      	movs	r0, #0
 80016d6:	f007 fd51 	bl	800917c <BSP_LED_Init>
	BSP_LED_On(LED2_PIN); // LD1 orange turns on
 80016da:	2000      	movs	r0, #0
 80016dc:	f007 fd9c 	bl	8009218 <BSP_LED_On>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET); // LD2 green turns on
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e6:	4893      	ldr	r0, [pc, #588]	; (8001934 <main+0x310>)
 80016e8:	f00b f99c 	bl	800ca24 <HAL_GPIO_WritePin>
	// LD3 is attached to ARD_D13, which is not an output, it's attached to SPI
	HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET); // laser
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016f2:	4891      	ldr	r0, [pc, #580]	; (8001938 <main+0x314>)
 80016f4:	f00b f996 	bl	800ca24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET); // test point: timer frequency
 80016f8:	2200      	movs	r2, #0
 80016fa:	2140      	movs	r1, #64	; 0x40
 80016fc:	488f      	ldr	r0, [pc, #572]	; (800193c <main+0x318>)
 80016fe:	f00b f991 	bl	800ca24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET); // turn on BT pwr transistor
 8001702:	2201      	movs	r2, #1
 8001704:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001708:	488c      	ldr	r0, [pc, #560]	; (800193c <main+0x318>)
 800170a:	f00b f98b 	bl	800ca24 <HAL_GPIO_WritePin>


	// Start timer
	HAL_TIM_Base_Start_IT(&htim6);
 800170e:	488c      	ldr	r0, [pc, #560]	; (8001940 <main+0x31c>)
 8001710:	f011 f99e 	bl	8012a50 <HAL_TIM_Base_Start_IT>
	//ResetAndDetectSensor(1); // EK TODO: the parameter SetDisplay doesn't matter

	// EK test1
	HAL_StatusTypeDef status;
	uint8_t pData;
	status = HAL_I2C_Mem_Read(&hi2c1, 0x52, 0xC0, 1, &pData, 1, HAL_TIMEOUT);
 8001714:	2303      	movs	r3, #3
 8001716:	9302      	str	r3, [sp, #8]
 8001718:	2301      	movs	r3, #1
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2301      	movs	r3, #1
 8001724:	22c0      	movs	r2, #192	; 0xc0
 8001726:	2152      	movs	r1, #82	; 0x52
 8001728:	4886      	ldr	r0, [pc, #536]	; (8001944 <main+0x320>)
 800172a:	f00b fd67 	bl	800d1fc <HAL_I2C_Mem_Read>
 800172e:	4603      	mov	r3, r0
 8001730:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	// pData should be 0xEE
	if(status == HAL_OK) {
 8001734:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <main+0x11e>
		printf("good");
 800173c:	4882      	ldr	r0, [pc, #520]	; (8001948 <main+0x324>)
 800173e:	f017 fa75 	bl	8018c2c <iprintf>
	}
	//--

	// EK test2
	VL53L0X_Dev_t *pDev;
	pDev = &VL53L0XDev;
 8001742:	4b82      	ldr	r3, [pc, #520]	; (800194c <main+0x328>)
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
	pDev->I2cDevAddr = 0x52;
 8001746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001748:	2252      	movs	r2, #82	; 0x52
 800174a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	pDev->Present = 0;
 800174e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001750:	2200      	movs	r2, #0
 8001752:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

	int status2 = VL53L0X_DataInit(pDev);
 8001756:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001758:	f003 f97c 	bl	8004a54 <VL53L0X_DataInit>
 800175c:	4603      	mov	r3, r0
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
	if( status2 == 0 ){
 8001760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001762:	2b00      	cmp	r3, #0
 8001764:	d104      	bne.n	8001770 <main+0x14c>
			pDev->Present = 1;
 8001766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001768:	2201      	movs	r2, #1
 800176a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800176e:	e002      	b.n	8001776 <main+0x152>
	}
	else{
			printf("VL53L0X_DataInit fail\n");
 8001770:	4877      	ldr	r0, [pc, #476]	; (8001950 <main+0x32c>)
 8001772:	f017 fae1 	bl	8018d38 <puts>
	}
	printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 8001776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001778:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 800177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001782:	461a      	mov	r2, r3
 8001784:	4873      	ldr	r0, [pc, #460]	; (8001954 <main+0x330>)
 8001786:	f017 fa51 	bl	8018c2c <iprintf>
	pDev->Present = 1;
 800178a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178c:	2201      	movs	r2, #1
 800178e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	uint8_t isApertureSpads;
	VL53L0X_RangingMeasurementData_t RangingMeasurementData;
	//int range;

	// Initialize the device in continuous ranging mode
	VL53L0X_StaticInit(pDev);
 8001792:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001794:	f003 fac2 	bl	8004d1c <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 8001798:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 800179c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80017a0:	4619      	mov	r1, r3
 80017a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017a4:	f004 f96a 	bl	8005a7c <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 80017a8:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	4619      	mov	r1, r3
 80017b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017b4:	f004 fdf0 	bl	8006398 <VL53L0X_PerformRefSpadManagement>
	//VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, 250); // Program continuous mode Inter-Measurement period in milliseconds
	//VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
	VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, TIMED_RANGING_PERIOD);
 80017b8:	2132      	movs	r1, #50	; 0x32
 80017ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017bc:	f003 fea8 	bl	8005510 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
	VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 80017c0:	2103      	movs	r1, #3
 80017c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017c4:	f003 fcbc 	bl	8005140 <VL53L0X_SetDeviceMode>

	// Start continuous ranging
	VL53L0X_StartMeasurement(pDev);
 80017c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017ca:	f004 f9d3 	bl	8005b74 <VL53L0X_StartMeasurement>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	// this has to be the 1st thing in the loop
  	if(gone_sleep) {
 80017ce:	4b62      	ldr	r3, [pc, #392]	; (8001958 <main+0x334>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d037      	beq.n	8001846 <main+0x222>
			//HAL_ResumeTick();
			awakeFromSleep();
 80017d6:	f000 fa25 	bl	8001c24 <awakeFromSleep>

			// turn on LD1, LD2
			BSP_LED_On(LED2_PIN); // LD1 orange turns off
 80017da:	2000      	movs	r0, #0
 80017dc:	f007 fd1c 	bl	8009218 <BSP_LED_On>
			HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET); // LD2 green turns on
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e6:	4853      	ldr	r0, [pc, #332]	; (8001934 <main+0x310>)
 80017e8:	f00b f91c 	bl	800ca24 <HAL_GPIO_WritePin>
			if(PWR_ANALYSIS) HAL_Delay(100);
 80017ec:	2064      	movs	r0, #100	; 0x64
 80017ee:	f009 fb9f 	bl	800af30 <HAL_Delay>

			// turn on BT pwr transistor
			HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET);
 80017f2:	2201      	movs	r2, #1
 80017f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f8:	4850      	ldr	r0, [pc, #320]	; (800193c <main+0x318>)
 80017fa:	f00b f913 	bl	800ca24 <HAL_GPIO_WritePin>
			if(PWR_ANALYSIS) HAL_Delay(100);
 80017fe:	2064      	movs	r0, #100	; 0x64
 8001800:	f009 fb96 	bl	800af30 <HAL_Delay>

			// turn on lcd
//			BSP_LCD_ScreenDimmingOff();
			BSP_LCD_DisplayOn();
 8001804:	f008 fe7e 	bl	800a504 <BSP_LCD_DisplayOn>
			dimmed_screen = false;
 8001808:	4b54      	ldr	r3, [pc, #336]	; (800195c <main+0x338>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
			if(PWR_ANALYSIS) HAL_Delay(100);
 800180e:	2064      	movs	r0, #100	; 0x64
 8001810:	f009 fb8e 	bl	800af30 <HAL_Delay>

			// turn on laser and test point
			HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_SET); // laser
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800181a:	4847      	ldr	r0, [pc, #284]	; (8001938 <main+0x314>)
 800181c:	f00b f902 	bl	800ca24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_SET); // test point: timer frequency
 8001820:	2201      	movs	r2, #1
 8001822:	2140      	movs	r1, #64	; 0x40
 8001824:	4845      	ldr	r0, [pc, #276]	; (800193c <main+0x318>)
 8001826:	f00b f8fd 	bl	800ca24 <HAL_GPIO_WritePin>
			if(PWR_ANALYSIS) HAL_Delay(100);
 800182a:	2064      	movs	r0, #100	; 0x64
 800182c:	f009 fb80 	bl	800af30 <HAL_Delay>

			// turn on ts
			BSP_TS_ITConfig();
 8001830:	f009 f944 	bl	800aabc <BSP_TS_ITConfig>
			if(PWR_ANALYSIS) HAL_Delay(100);
 8001834:	2064      	movs	r0, #100	; 0x64
 8001836:	f009 fb7b 	bl	800af30 <HAL_Delay>

			// set flags
			enter_sleep_mode = false;
 800183a:	4b49      	ldr	r3, [pc, #292]	; (8001960 <main+0x33c>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
			gone_sleep = false;
 8001840:	4b45      	ldr	r3, [pc, #276]	; (8001958 <main+0x334>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]

		}



  	if(enter_sleep_mode) {
 8001846:	4b46      	ldr	r3, [pc, #280]	; (8001960 <main+0x33c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d050      	beq.n	80018f0 <main+0x2cc>

  		// turn off ts
  		BSP_TS_ITDeConfig();
 800184e:	f009 f94d 	bl	800aaec <BSP_TS_ITDeConfig>

  		// turn off lcd
			BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001852:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001856:	f008 fbc5 	bl	8009fe4 <BSP_LCD_Clear>
			if(dimmed_screen == true) {
 800185a:	4b40      	ldr	r3, [pc, #256]	; (800195c <main+0x338>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <main+0x242>
				BSP_LCD_ScreenDimmingOff();
 8001862:	f008 ff8f 	bl	800a784 <BSP_LCD_ScreenDimmingOff>
			}
			BSP_LCD_ScreenDimmingConfig(100, 0, 5, 20);
 8001866:	2314      	movs	r3, #20
 8001868:	2205      	movs	r2, #5
 800186a:	2100      	movs	r1, #0
 800186c:	2064      	movs	r0, #100	; 0x64
 800186e:	f008 fe5d 	bl	800a52c <BSP_LCD_ScreenDimmingConfig>
			BSP_LCD_ScreenDimmingOn();
 8001872:	f008 fe8d 	bl	800a590 <BSP_LCD_ScreenDimmingOn>
			BSP_LCD_DisplayOff();
 8001876:	f008 fe4f 	bl	800a518 <BSP_LCD_DisplayOff>
			dimmed_screen = true;
 800187a:	4b38      	ldr	r3, [pc, #224]	; (800195c <main+0x338>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000); // wait for fade to finish
 8001880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001884:	f009 fb54 	bl	800af30 <HAL_Delay>
			HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_RESET); // force the backlight off
 8001888:	2200      	movs	r2, #0
 800188a:	2101      	movs	r1, #1
 800188c:	482a      	ldr	r0, [pc, #168]	; (8001938 <main+0x314>)
 800188e:	f00b f8c9 	bl	800ca24 <HAL_GPIO_WritePin>

			// turn off BT pwr transistor
			HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001898:	4828      	ldr	r0, [pc, #160]	; (800193c <main+0x318>)
 800189a:	f00b f8c3 	bl	800ca24 <HAL_GPIO_WritePin>
			if(PWR_ANALYSIS) HAL_Delay(100);
 800189e:	2064      	movs	r0, #100	; 0x64
 80018a0:	f009 fb46 	bl	800af30 <HAL_Delay>

			// turn off LD1, LD2
			BSP_LED_Off(LED2_PIN); // LD1 orange turns off
 80018a4:	2000      	movs	r0, #0
 80018a6:	f007 fcd9 	bl	800925c <BSP_LED_Off>
			HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_SET); // LD2 green turns off
 80018aa:	2201      	movs	r2, #1
 80018ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b0:	4820      	ldr	r0, [pc, #128]	; (8001934 <main+0x310>)
 80018b2:	f00b f8b7 	bl	800ca24 <HAL_GPIO_WritePin>
			if(PWR_ANALYSIS) HAL_Delay(100);
 80018b6:	2064      	movs	r0, #100	; 0x64
 80018b8:	f009 fb3a 	bl	800af30 <HAL_Delay>

			// turn off laser and test point
			HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET); // laser
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c2:	481d      	ldr	r0, [pc, #116]	; (8001938 <main+0x314>)
 80018c4:	f00b f8ae 	bl	800ca24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET); // test point: timer frequency
 80018c8:	2200      	movs	r2, #0
 80018ca:	2140      	movs	r1, #64	; 0x40
 80018cc:	481b      	ldr	r0, [pc, #108]	; (800193c <main+0x318>)
 80018ce:	f00b f8a9 	bl	800ca24 <HAL_GPIO_WritePin>
			if(PWR_ANALYSIS) HAL_Delay(100);
 80018d2:	2064      	movs	r0, #100	; 0x64
 80018d4:	f009 fb2c 	bl	800af30 <HAL_Delay>

			enter_sleep_mode = false;
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <main+0x33c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
			gone_sleep = true;
 80018de:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <main+0x334>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
			HAL_SuspendTick();
 80018e4:	f009 fb48 	bl	800af78 <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE); // left button configured as event
 80018e8:	2102      	movs	r1, #2
 80018ea:	2000      	movs	r0, #0
 80018ec:	f00d fc3c 	bl	800f168 <HAL_PWR_EnterSLEEPMode>
  	}



  	// sampling every 50 ms
  	if(sensor_sample) {
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <main+0x340>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <main+0x2da>
				}

			}
			*/

  		sensor_sample = false; // hope all of this takes < 50 ms
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <main+0x340>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]


		// by changing the text, we can prove that it's resetting when pressing
		// the reset button - because the display will say Beep instead of the
		// other two possibilities
		if(TimingDelay == 0) {
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <main+0x344>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d152      	bne.n	80019ac <main+0x388>
			/* Toggle LED1 */
			if(led_on) {
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <main+0x348>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d032      	beq.n	8001974 <main+0x350>
				BSP_LED_On(LED2_PIN); // LD1 orange
 800190e:	2000      	movs	r0, #0
 8001910:	f007 fc82 	bl	8009218 <BSP_LED_On>

				BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001914:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001918:	f008 fb64 	bl	8009fe4 <BSP_LCD_Clear>
				BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Zweep", CENTER_MODE);
 800191c:	2301      	movs	r3, #1
 800191e:	4a14      	ldr	r2, [pc, #80]	; (8001970 <main+0x34c>)
 8001920:	21af      	movs	r1, #175	; 0xaf
 8001922:	2000      	movs	r0, #0
 8001924:	f008 fbbe 	bl	800a0a4 <BSP_LCD_DisplayStringAt>
 8001928:	e031      	b.n	800198e <main+0x36a>
 800192a:	bf00      	nop
 800192c:	20000530 	.word	0x20000530
 8001930:	08019b6c 	.word	0x08019b6c
 8001934:	48000400 	.word	0x48000400
 8001938:	48002000 	.word	0x48002000
 800193c:	48001800 	.word	0x48001800
 8001940:	20000d7c 	.word	0x20000d7c
 8001944:	20000a10 	.word	0x20000a10
 8001948:	08019b78 	.word	0x08019b78
 800194c:	20000000 	.word	0x20000000
 8001950:	08019b80 	.word	0x08019b80
 8001954:	08019b14 	.word	0x08019b14
 8001958:	20000ace 	.word	0x20000ace
 800195c:	20000acc 	.word	0x20000acc
 8001960:	20000acf 	.word	0x20000acf
 8001964:	20000ab8 	.word	0x20000ab8
 8001968:	20000ad0 	.word	0x20000ad0
 800196c:	20000acd 	.word	0x20000acd
 8001970:	08019b98 	.word	0x08019b98
			} else {
				BSP_LED_Off(LED2_PIN); // LD1 orange
 8001974:	2000      	movs	r0, #0
 8001976:	f007 fc71 	bl	800925c <BSP_LED_Off>

				BSP_LCD_Clear(LCD_COLOR_WHITE);
 800197a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800197e:	f008 fb31 	bl	8009fe4 <BSP_LCD_Clear>
				BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Fleep", CENTER_MODE);
 8001982:	2301      	movs	r3, #1
 8001984:	4a55      	ldr	r2, [pc, #340]	; (8001adc <main+0x4b8>)
 8001986:	21af      	movs	r1, #175	; 0xaf
 8001988:	2000      	movs	r0, #0
 800198a:	f008 fb8b 	bl	800a0a4 <BSP_LCD_DisplayStringAt>
			}
			led_on = !led_on;
 800198e:	4b54      	ldr	r3, [pc, #336]	; (8001ae0 <main+0x4bc>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf14      	ite	ne
 8001996:	2301      	movne	r3, #1
 8001998:	2300      	moveq	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f083 0301 	eor.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	4b4d      	ldr	r3, [pc, #308]	; (8001ae0 <main+0x4bc>)
 80019aa:	701a      	strb	r2, [r3, #0]
  	// imagine the case where gettick has overflowed, but last_ts has not
		// eg 100-30000
		// abs could be used to prevent this from being a negative number, however
		// in this case, it is not needed, because two unsigned integers being
		// subtracted results in an unsigned integer
		if( HAL_GetTick()-last_ts >= 3000 && dimmed_screen == false) {
 80019ac:	f009 fab4 	bl	800af18 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b4c      	ldr	r3, [pc, #304]	; (8001ae4 <main+0x4c0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80019bc:	4293      	cmp	r3, r2
 80019be:	d911      	bls.n	80019e4 <main+0x3c0>
 80019c0:	4b49      	ldr	r3, [pc, #292]	; (8001ae8 <main+0x4c4>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	f083 0301 	eor.w	r3, r3, #1
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00a      	beq.n	80019e4 <main+0x3c0>
			BSP_LCD_ScreenDimmingConfig(100, 5, 5, 20); // 100-5=95/5=19*20=380ms
 80019ce:	2314      	movs	r3, #20
 80019d0:	2205      	movs	r2, #5
 80019d2:	2105      	movs	r1, #5
 80019d4:	2064      	movs	r0, #100	; 0x64
 80019d6:	f008 fda9 	bl	800a52c <BSP_LCD_ScreenDimmingConfig>
			BSP_LCD_ScreenDimmingOn();
 80019da:	f008 fdd9 	bl	800a590 <BSP_LCD_ScreenDimmingOn>
			dimmed_screen = true;
 80019de:	4b42      	ldr	r3, [pc, #264]	; (8001ae8 <main+0x4c4>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
		}



		uint8_t circle_x = 100;
 80019e4:	2364      	movs	r3, #100	; 0x64
 80019e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint8_t circle_y = 100;
 80019ea:	2364      	movs	r3, #100	; 0x64
 80019ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		drawCircle(circle_x, circle_y);
 80019f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80019fa:	b292      	uxth	r2, r2
 80019fc:	4611      	mov	r1, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fde6 	bl	80015d0 <drawCircle>

		BSP_TS_GetState(&ts_result);
 8001a04:	4839      	ldr	r0, [pc, #228]	; (8001aec <main+0x4c8>)
 8001a06:	f009 f889 	bl	800ab1c <BSP_TS_GetState>

		uint8_t num_touches = ts_result.touchDetected;
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <main+0x4c8>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		for(int i=0; i<num_touches; i++) {
 8001a12:	2300      	movs	r3, #0
 8001a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a16:	e05b      	b.n	8001ad0 <main+0x4ac>
			Point touch;
			touch.X = ts_result.touchX[i];
 8001a18:	4a34      	ldr	r2, [pc, #208]	; (8001aec <main+0x4c8>)
 8001a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	885b      	ldrh	r3, [r3, #2]
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	803b      	strh	r3, [r7, #0]
			touch.Y = ts_result.touchY[i];
 8001a26:	4a31      	ldr	r2, [pc, #196]	; (8001aec <main+0x4c8>)
 8001a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	88db      	ldrh	r3, [r3, #6]
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	807b      	strh	r3, [r7, #2]

			if(dimmed_screen) {
 8001a34:	4b2c      	ldr	r3, [pc, #176]	; (8001ae8 <main+0x4c4>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d004      	beq.n	8001a46 <main+0x422>
				//BSP_LCD_ScreenDimmingConfig(5, 100, 1, 20);
				//BSP_LCD_ScreenDimmingOn();
				BSP_LCD_ScreenDimmingOff();
 8001a3c:	f008 fea2 	bl	800a784 <BSP_LCD_ScreenDimmingOff>
				dimmed_screen = false;
 8001a40:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <main+0x4c4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
			}

			last_ts = HAL_GetTick();
 8001a46:	f009 fa67 	bl	800af18 <HAL_GetTick>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a25      	ldr	r2, [pc, #148]	; (8001ae4 <main+0x4c0>)
 8001a4e:	6013      	str	r3, [r2, #0]

			if(touch.X < circle_x+70 && touch.X > circle_x-70) {
 8001a50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a54:	3345      	adds	r3, #69	; 0x45
 8001a56:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	db28      	blt.n	8001ab0 <main+0x48c>
 8001a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a62:	3b45      	subs	r3, #69	; 0x45
 8001a64:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	dc21      	bgt.n	8001ab0 <main+0x48c>
				if(touch.Y < circle_y+70 && touch.Y > circle_y-70) {
 8001a6c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a70:	3345      	adds	r3, #69	; 0x45
 8001a72:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a76:	4293      	cmp	r3, r2
 8001a78:	db1a      	blt.n	8001ab0 <main+0x48c>
 8001a7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a7e:	3b45      	subs	r3, #69	; 0x45
 8001a80:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a84:	4293      	cmp	r3, r2
 8001a86:	dc13      	bgt.n	8001ab0 <main+0x48c>
					circle_selected = !circle_selected;
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <main+0x4cc>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bf14      	ite	ne
 8001a90:	2301      	movne	r3, #1
 8001a92:	2300      	moveq	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	f083 0301 	eor.w	r3, r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <main+0x4cc>)
 8001aa4:	701a      	strb	r2, [r3, #0]
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001aa6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001aaa:	f008 fa9b 	bl	8009fe4 <BSP_LCD_Clear>
 8001aae:	e68e      	b.n	80017ce <main+0x1aa>
					break;
				}
			}

			BSP_LCD_SetTextColor( LCD_COLOR_BLUE );
 8001ab0:	201f      	movs	r0, #31
 8001ab2:	f008 fa77 	bl	8009fa4 <BSP_LCD_SetTextColor>
			BSP_LCD_FillCircle(touch.X, touch.Y, 10);
 8001ab6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001ac0:	b291      	uxth	r1, r2
 8001ac2:	220a      	movs	r2, #10
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f008 fc8b 	bl	800a3e0 <BSP_LCD_FillCircle>
		for(int i=0; i<num_touches; i++) {
 8001aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001acc:	3301      	adds	r3, #1
 8001ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ad0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	db9e      	blt.n	8001a18 <main+0x3f4>
  {
 8001ada:	e678      	b.n	80017ce <main+0x1aa>
 8001adc:	08019ba0 	.word	0x08019ba0
 8001ae0:	20000acd 	.word	0x20000acd
 8001ae4:	20000ac8 	.word	0x20000ac8
 8001ae8:	20000acc 	.word	0x20000acc
 8001aec:	20000abc 	.word	0x20000abc
 8001af0:	20000ac6 	.word	0x20000ac6

08001af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b096      	sub	sp, #88	; 0x58
 8001af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	2244      	movs	r2, #68	; 0x44
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f016 ffaa 	bl	8018a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b08:	463b      	mov	r3, r7
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b1a:	f00d fb67 	bl	800f1ec <HAL_PWREx_ControlVoltageScaling>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b24:	f000 f8a6 	bl	8001c74 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b28:	f00d fb0e 	bl	800f148 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <SystemClock_Config+0xc0>)
 8001b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b32:	4a20      	ldr	r2, [pc, #128]	; (8001bb4 <SystemClock_Config+0xc0>)
 8001b34:	f023 0318 	bic.w	r3, r3, #24
 8001b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b3c:	2314      	movs	r3, #20
 8001b3e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b40:	2301      	movs	r3, #1
 8001b42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b44:	2301      	movs	r3, #1
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b4c:	2360      	movs	r3, #96	; 0x60
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b50:	2302      	movs	r3, #2
 8001b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b54:	2301      	movs	r3, #1
 8001b56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001b5c:	2318      	movs	r3, #24
 8001b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b60:	2302      	movs	r3, #2
 8001b62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b64:	2302      	movs	r3, #2
 8001b66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4618      	mov	r0, r3
 8001b72:	f00d fcbb 	bl	800f4ec <HAL_RCC_OscConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001b7c:	f000 f87a 	bl	8001c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b80:	230f      	movs	r3, #15
 8001b82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b84:	2303      	movs	r3, #3
 8001b86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b94:	463b      	mov	r3, r7
 8001b96:	2102      	movs	r1, #2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f00e f8c1 	bl	800fd20 <HAL_RCC_ClockConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001ba4:	f000 f866 	bl	8001c74 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001ba8:	f00f fb92 	bl	80112d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001bac:	bf00      	nop
 8001bae:	3758      	adds	r7, #88	; 0x58
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b0a4      	sub	sp, #144	; 0x90
 8001bbc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	228c      	movs	r2, #140	; 0x8c
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f016 ff49 	bl	8018a5c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 8001bca:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <PeriphCommonClock_Config+0x64>)
 8001bcc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001bd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001bd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001bda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bde:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8001be0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001be4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001be6:	2301      	movs	r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001bea:	2301      	movs	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001bee:	2318      	movs	r3, #24
 8001bf0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <PeriphCommonClock_Config+0x68>)
 8001c00:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	4618      	mov	r0, r3
 8001c06:	f00e faaf 	bl	8010168 <HAL_RCCEx_PeriphCLKConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001c10:	f000 f830 	bl	8001c74 <Error_Handler>
  }
}
 8001c14:	bf00      	nop
 8001c16:	3790      	adds	r7, #144	; 0x90
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	00086800 	.word	0x00086800
 8001c20:	01110000 	.word	0x01110000

08001c24 <awakeFromSleep>:

	/* ... Low-power SLEEP mode ... */

}

void awakeFromSleep(void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f007 faf5 	bl	8009218 <BSP_LED_On>

	/* System is Low Power Run mode when exiting Low Power Sleep mode,
		 disable low power run mode and reset the clock to initialization configuration */
	HAL_PWREx_DisableLowPowerRunMode();
 8001c2e:	f00d fb63 	bl	800f2f8 <HAL_PWREx_DisableLowPowerRunMode>

	/* Configure the system clock for the RUN mode */
	SystemClock_Config();
 8001c32:	f7ff ff5f 	bl	8001af4 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	// should this go here too? added it
	PeriphCommonClock_Config();
 8001c36:	f7ff ffbf 	bl	8001bb8 <PeriphCommonClock_Config>

	/* Re-init LED1 to toggle during Run mode */
	/*BSP_LED_Init(LED1);*/

	/* Resume Tick interrupt if disabled prior to Low Power Sleep mode entry */
	HAL_ResumeTick();
 8001c3a:	f009 f9ad 	bl	800af98 <HAL_ResumeTick>
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == JOY_DOWN_Pin) {
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c54:	d102      	bne.n	8001c5c <HAL_GPIO_EXTI_Callback+0x18>
//		HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_HIGH); // JOY_SEL on SYS_WKUP2
//		prepareForSleep();
//		enterSleep();

		// simpler version
		enter_sleep_mode = true;
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
	}

	// LEFT wakes it up as an event

	if(GPIO_Pin == JOY_RIGHT_Pin) {
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c62:	d101      	bne.n	8001c68 <HAL_GPIO_EXTI_Callback+0x24>
//		awakeFromSleep();

		// simpler version
		HAL_ResumeTick();
 8001c64:	f009 f998 	bl	800af98 <HAL_ResumeTick>
	}

}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000acf 	.word	0x20000acf

08001c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c78:	b672      	cpsid	i
}
 8001c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <Error_Handler+0x8>
	...

08001c80 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <MX_QUADSPI_Init+0x50>)
 8001c86:	4a13      	ldr	r2, [pc, #76]	; (8001cd4 <MX_QUADSPI_Init+0x54>)
 8001c88:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <MX_QUADSPI_Init+0x50>)
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_QUADSPI_Init+0x50>)
 8001c92:	2204      	movs	r2, #4
 8001c94:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <MX_QUADSPI_Init+0x50>)
 8001c98:	2210      	movs	r2, #16
 8001c9a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_QUADSPI_Init+0x50>)
 8001c9e:	2217      	movs	r2, #23
 8001ca0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <MX_QUADSPI_Init+0x50>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_QUADSPI_Init+0x50>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <MX_QUADSPI_Init+0x50>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <MX_QUADSPI_Init+0x50>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <MX_QUADSPI_Init+0x50>)
 8001cbc:	f00d fb54 	bl	800f368 <HAL_QSPI_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001cc6:	f7ff ffd5 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000ad4 	.word	0x20000ad4
 8001cd4:	a0001000 	.word	0xa0001000

08001cd8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	; 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a26      	ldr	r2, [pc, #152]	; (8001d90 <HAL_QSPI_MspInit+0xb8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d145      	bne.n	8001d86 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_QSPI_MspInit+0xbc>)
 8001cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfe:	4a25      	ldr	r2, [pc, #148]	; (8001d94 <HAL_QSPI_MspInit+0xbc>)
 8001d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d04:	6513      	str	r3, [r2, #80]	; 0x50
 8001d06:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_QSPI_MspInit+0xbc>)
 8001d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_QSPI_MspInit+0xbc>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_QSPI_MspInit+0xbc>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_QSPI_MspInit+0xbc>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_QSPI_MspInit+0xbc>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_QSPI_MspInit+0xbc>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_QSPI_MspInit+0xbc>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001d42:	f640 0303 	movw	r3, #2051	; 0x803
 8001d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d54:	230a      	movs	r3, #10
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480e      	ldr	r0, [pc, #56]	; (8001d98 <HAL_QSPI_MspInit+0xc0>)
 8001d60:	f00a fbdc 	bl	800c51c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8001d64:	23c8      	movs	r3, #200	; 0xc8
 8001d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d74:	230a      	movs	r3, #10
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d82:	f00a fbcb 	bl	800c51c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001d86:	bf00      	nop
 8001d88:	3728      	adds	r7, #40	; 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	a0001000 	.word	0xa0001000
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000400 	.word	0x48000400

08001d9c <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001da0:	4b4d      	ldr	r3, [pc, #308]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001da2:	4a4e      	ldr	r2, [pc, #312]	; (8001edc <MX_SAI1_Init+0x140>)
 8001da4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001da6:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001dac:	4b4a      	ldr	r3, [pc, #296]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001db2:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001db4:	2240      	movs	r2, #64	; 0x40
 8001db6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001db8:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001dbe:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001dc4:	4b44      	ldr	r3, [pc, #272]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001dca:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001dd0:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001dd6:	4b40      	ldr	r3, [pc, #256]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001ddc:	4b3e      	ldr	r3, [pc, #248]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001dde:	4a40      	ldr	r2, [pc, #256]	; (8001ee0 <MX_SAI1_Init+0x144>)
 8001de0:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001de2:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001de8:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001dee:	4b3a      	ldr	r3, [pc, #232]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001df4:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001dfa:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001e00:	4b35      	ldr	r3, [pc, #212]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001e06:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e0c:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001e12:	4b31      	ldr	r3, [pc, #196]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001e18:	4b2f      	ldr	r3, [pc, #188]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001e24:	4b2c      	ldr	r3, [pc, #176]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001e2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001e30:	4829      	ldr	r0, [pc, #164]	; (8001ed8 <MX_SAI1_Init+0x13c>)
 8001e32:	f00f fd2d 	bl	8011890 <HAL_SAI_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001e3c:	f7ff ff1a 	bl	8001c74 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e42:	4a29      	ldr	r2, [pc, #164]	; (8001ee8 <MX_SAI1_Init+0x14c>)
 8001e44:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e46:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e4e:	2203      	movs	r2, #3
 8001e50:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001e52:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e54:	2240      	movs	r2, #64	; 0x40
 8001e56:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e58:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001e64:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e90:	2208      	movs	r2, #8
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001ec4:	4807      	ldr	r0, [pc, #28]	; (8001ee4 <MX_SAI1_Init+0x148>)
 8001ec6:	f00f fce3 	bl	8011890 <HAL_SAI_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001ed0:	f7ff fed0 	bl	8001c74 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000b20 	.word	0x20000b20
 8001edc:	40015404 	.word	0x40015404
 8001ee0:	0002ee00 	.word	0x0002ee00
 8001ee4:	20000ba4 	.word	0x20000ba4
 8001ee8:	40015424 	.word	0x40015424

08001eec <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a33      	ldr	r2, [pc, #204]	; (8001fc8 <HAL_SAI_MspInit+0xdc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d135      	bne.n	8001f6a <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001efe:	4b33      	ldr	r3, [pc, #204]	; (8001fcc <HAL_SAI_MspInit+0xe0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10b      	bne.n	8001f1e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001f06:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <HAL_SAI_MspInit+0xe4>)
 8001f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0a:	4a31      	ldr	r2, [pc, #196]	; (8001fd0 <HAL_SAI_MspInit+0xe4>)
 8001f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f10:	6613      	str	r3, [r2, #96]	; 0x60
 8001f12:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <HAL_SAI_MspInit+0xe4>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001f1e:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <HAL_SAI_MspInit+0xe0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	3301      	adds	r3, #1
 8001f24:	4a29      	ldr	r2, [pc, #164]	; (8001fcc <HAL_SAI_MspInit+0xe0>)
 8001f26:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8001f28:	2354      	movs	r3, #84	; 0x54
 8001f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001f38:	230d      	movs	r3, #13
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	4619      	mov	r1, r3
 8001f42:	4824      	ldr	r0, [pc, #144]	; (8001fd4 <HAL_SAI_MspInit+0xe8>)
 8001f44:	f00a faea 	bl	800c51c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001f5a:	230d      	movs	r3, #13
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	481c      	ldr	r0, [pc, #112]	; (8001fd8 <HAL_SAI_MspInit+0xec>)
 8001f66:	f00a fad9 	bl	800c51c <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <HAL_SAI_MspInit+0xf0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d124      	bne.n	8001fbe <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001f74:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_SAI_MspInit+0xe0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10b      	bne.n	8001f94 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <HAL_SAI_MspInit+0xe4>)
 8001f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f80:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <HAL_SAI_MspInit+0xe4>)
 8001f82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f86:	6613      	str	r3, [r2, #96]	; 0x60
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_SAI_MspInit+0xe4>)
 8001f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_SAI_MspInit+0xe0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <HAL_SAI_MspInit+0xe0>)
 8001f9c:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8001f9e:	2308      	movs	r3, #8
 8001fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001fae:	230d      	movs	r3, #13
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <HAL_SAI_MspInit+0xe8>)
 8001fba:	f00a faaf 	bl	800c51c <HAL_GPIO_Init>

    }
}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	; 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40015404 	.word	0x40015404
 8001fcc:	20000c28 	.word	0x20000c28
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	48001000 	.word	0x48001000
 8001fd8:	48000400 	.word	0x48000400
 8001fdc:	40015424 	.word	0x40015424

08001fe0 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001fe4:	4b14      	ldr	r3, [pc, #80]	; (8002038 <MX_SDMMC1_SD_Init+0x58>)
 8001fe6:	4a15      	ldr	r2, [pc, #84]	; (800203c <MX_SDMMC1_SD_Init+0x5c>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001fea:	4b13      	ldr	r3, [pc, #76]	; (8002038 <MX_SDMMC1_SD_Init+0x58>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_SDMMC1_SD_Init+0x58>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <MX_SDMMC1_SD_Init+0x58>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <MX_SDMMC1_SD_Init+0x58>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002002:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <MX_SDMMC1_SD_Init+0x58>)
 8002004:	2200      	movs	r2, #0
 8002006:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <MX_SDMMC1_SD_Init+0x58>)
 800200a:	2200      	movs	r2, #0
 800200c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800200e:	480a      	ldr	r0, [pc, #40]	; (8002038 <MX_SDMMC1_SD_Init+0x58>)
 8002010:	f00f fdea 	bl	8011be8 <HAL_SD_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 800201a:	f7ff fe2b 	bl	8001c74 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800201e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002022:	4805      	ldr	r0, [pc, #20]	; (8002038 <MX_SDMMC1_SD_Init+0x58>)
 8002024:	f010 f85a 	bl	80120dc <HAL_SD_ConfigWideBusOperation>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 800202e:	f7ff fe21 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000c2c 	.word	0x20000c2c
 800203c:	40012800 	.word	0x40012800

08002040 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <HAL_SD_MspInit+0xb4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d144      	bne.n	80020ec <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002062:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <HAL_SD_MspInit+0xb8>)
 8002064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002066:	4a24      	ldr	r2, [pc, #144]	; (80020f8 <HAL_SD_MspInit+0xb8>)
 8002068:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800206c:	6613      	str	r3, [r2, #96]	; 0x60
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <HAL_SD_MspInit+0xb8>)
 8002070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <HAL_SD_MspInit+0xb8>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	4a1e      	ldr	r2, [pc, #120]	; (80020f8 <HAL_SD_MspInit+0xb8>)
 8002080:	f043 0308 	orr.w	r3, r3, #8
 8002084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <HAL_SD_MspInit+0xb8>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002092:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_SD_MspInit+0xb8>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4a18      	ldr	r2, [pc, #96]	; (80020f8 <HAL_SD_MspInit+0xb8>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_SD_MspInit+0xb8>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80020aa:	2304      	movs	r3, #4
 80020ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020ba:	230c      	movs	r3, #12
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80020be:	f107 0314 	add.w	r3, r7, #20
 80020c2:	4619      	mov	r1, r3
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <HAL_SD_MspInit+0xbc>)
 80020c6:	f00a fa29 	bl	800c51c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 80020ca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80020ce:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020dc:	230c      	movs	r3, #12
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4619      	mov	r1, r3
 80020e6:	4806      	ldr	r0, [pc, #24]	; (8002100 <HAL_SD_MspInit+0xc0>)
 80020e8:	f00a fa18 	bl	800c51c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80020ec:	bf00      	nop
 80020ee:	3728      	adds	r7, #40	; 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40012800 	.word	0x40012800
 80020f8:	40021000 	.word	0x40021000
 80020fc:	48000c00 	.word	0x48000c00
 8002100:	48000800 	.word	0x48000800

08002104 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <MX_SPI1_Init+0x74>)
 800210a:	4a1c      	ldr	r2, [pc, #112]	; (800217c <MX_SPI1_Init+0x78>)
 800210c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <MX_SPI1_Init+0x74>)
 8002110:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002114:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <MX_SPI1_Init+0x74>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <MX_SPI1_Init+0x74>)
 800211e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002122:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <MX_SPI1_Init+0x74>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <MX_SPI1_Init+0x74>)
 800212c:	2200      	movs	r2, #0
 800212e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <MX_SPI1_Init+0x74>)
 8002132:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002136:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <MX_SPI1_Init+0x74>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <MX_SPI1_Init+0x74>)
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <MX_SPI1_Init+0x74>)
 8002146:	2200      	movs	r2, #0
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <MX_SPI1_Init+0x74>)
 800214c:	2200      	movs	r2, #0
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <MX_SPI1_Init+0x74>)
 8002152:	2207      	movs	r2, #7
 8002154:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <MX_SPI1_Init+0x74>)
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <MX_SPI1_Init+0x74>)
 800215e:	2208      	movs	r2, #8
 8002160:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002162:	4805      	ldr	r0, [pc, #20]	; (8002178 <MX_SPI1_Init+0x74>)
 8002164:	f010 fb32 	bl	80127cc <HAL_SPI_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800216e:	f7ff fd81 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000cb0 	.word	0x20000cb0
 800217c:	40013000 	.word	0x40013000

08002180 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <MX_SPI2_Init+0x74>)
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <MX_SPI2_Init+0x78>)
 8002188:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <MX_SPI2_Init+0x74>)
 800218c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002190:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <MX_SPI2_Init+0x74>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <MX_SPI2_Init+0x74>)
 800219a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800219e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <MX_SPI2_Init+0x74>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <MX_SPI2_Init+0x74>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <MX_SPI2_Init+0x74>)
 80021ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <MX_SPI2_Init+0x74>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <MX_SPI2_Init+0x74>)
 80021bc:	2200      	movs	r2, #0
 80021be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <MX_SPI2_Init+0x74>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <MX_SPI2_Init+0x74>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <MX_SPI2_Init+0x74>)
 80021ce:	2207      	movs	r2, #7
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <MX_SPI2_Init+0x74>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <MX_SPI2_Init+0x74>)
 80021da:	2208      	movs	r2, #8
 80021dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_SPI2_Init+0x74>)
 80021e0:	f010 faf4 	bl	80127cc <HAL_SPI_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80021ea:	f7ff fd43 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000d14 	.word	0x20000d14
 80021f8:	40003800 	.word	0x40003800

080021fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08e      	sub	sp, #56	; 0x38
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a4b      	ldr	r2, [pc, #300]	; (8002348 <HAL_SPI_MspInit+0x14c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d146      	bne.n	80022ac <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800221e:	4b4b      	ldr	r3, [pc, #300]	; (800234c <HAL_SPI_MspInit+0x150>)
 8002220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002222:	4a4a      	ldr	r2, [pc, #296]	; (800234c <HAL_SPI_MspInit+0x150>)
 8002224:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002228:	6613      	str	r3, [r2, #96]	; 0x60
 800222a:	4b48      	ldr	r3, [pc, #288]	; (800234c <HAL_SPI_MspInit+0x150>)
 800222c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002232:	623b      	str	r3, [r7, #32]
 8002234:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	4b45      	ldr	r3, [pc, #276]	; (800234c <HAL_SPI_MspInit+0x150>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	4a44      	ldr	r2, [pc, #272]	; (800234c <HAL_SPI_MspInit+0x150>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002242:	4b42      	ldr	r3, [pc, #264]	; (800234c <HAL_SPI_MspInit+0x150>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	61fb      	str	r3, [r7, #28]
 800224c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	4b3f      	ldr	r3, [pc, #252]	; (800234c <HAL_SPI_MspInit+0x150>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	4a3e      	ldr	r2, [pc, #248]	; (800234c <HAL_SPI_MspInit+0x150>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800225a:	4b3c      	ldr	r3, [pc, #240]	; (800234c <HAL_SPI_MspInit+0x150>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8002266:	2330      	movs	r3, #48	; 0x30
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002272:	2303      	movs	r3, #3
 8002274:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002276:	2305      	movs	r3, #5
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227e:	4619      	mov	r1, r3
 8002280:	4833      	ldr	r0, [pc, #204]	; (8002350 <HAL_SPI_MspInit+0x154>)
 8002282:	f00a f94b 	bl	800c51c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8002286:	f248 0320 	movw	r3, #32800	; 0x8020
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002298:	2305      	movs	r3, #5
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a0:	4619      	mov	r1, r3
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a6:	f00a f939 	bl	800c51c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022aa:	e049      	b.n	8002340 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a28      	ldr	r2, [pc, #160]	; (8002354 <HAL_SPI_MspInit+0x158>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d144      	bne.n	8002340 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022b6:	4b25      	ldr	r3, [pc, #148]	; (800234c <HAL_SPI_MspInit+0x150>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	4a24      	ldr	r2, [pc, #144]	; (800234c <HAL_SPI_MspInit+0x150>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c0:	6593      	str	r3, [r2, #88]	; 0x58
 80022c2:	4b22      	ldr	r3, [pc, #136]	; (800234c <HAL_SPI_MspInit+0x150>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80022ce:	4b1f      	ldr	r3, [pc, #124]	; (800234c <HAL_SPI_MspInit+0x150>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	4a1e      	ldr	r2, [pc, #120]	; (800234c <HAL_SPI_MspInit+0x150>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_SPI_MspInit+0x150>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_SPI_MspInit+0x150>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	4a18      	ldr	r2, [pc, #96]	; (800234c <HAL_SPI_MspInit+0x150>)
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_SPI_MspInit+0x150>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 80022fe:	2306      	movs	r3, #6
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230a:	2303      	movs	r3, #3
 800230c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800230e:	2305      	movs	r3, #5
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	4619      	mov	r1, r3
 8002318:	480f      	ldr	r0, [pc, #60]	; (8002358 <HAL_SPI_MspInit+0x15c>)
 800231a:	f00a f8ff 	bl	800c51c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 800231e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002330:	2305      	movs	r3, #5
 8002332:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002338:	4619      	mov	r1, r3
 800233a:	4805      	ldr	r0, [pc, #20]	; (8002350 <HAL_SPI_MspInit+0x154>)
 800233c:	f00a f8ee 	bl	800c51c <HAL_GPIO_Init>
}
 8002340:	bf00      	nop
 8002342:	3738      	adds	r7, #56	; 0x38
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40013000 	.word	0x40013000
 800234c:	40021000 	.word	0x40021000
 8002350:	48000400 	.word	0x48000400
 8002354:	40003800 	.word	0x40003800
 8002358:	48002000 	.word	0x48002000

0800235c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <HAL_MspInit+0x44>)
 8002364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002366:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <HAL_MspInit+0x44>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6613      	str	r3, [r2, #96]	; 0x60
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <HAL_MspInit+0x44>)
 8002370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_MspInit+0x44>)
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <HAL_MspInit+0x44>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	6593      	str	r3, [r2, #88]	; 0x58
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_MspInit+0x44>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000

080023a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <NMI_Handler+0x4>

080023aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <HardFault_Handler+0x4>

080023b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <MemManage_Handler+0x4>

080023b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <BusFault_Handler+0x4>

080023bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <UsageFault_Handler+0x4>

080023c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f0:	f008 fd7e 	bl	800aef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQ_OUT_Pin);
 80023fc:	2020      	movs	r0, #32
 80023fe:	f00a fb29 	bl	800ca54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}

08002406 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 800240a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800240e:	f00a fb21 	bl	800ca54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 8002412:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002416:	f00a fb1d 	bl	800ca54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 800241a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800241e:	f00a fb19 	bl	800ca54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <OTG_FS_IRQHandler+0x10>)
 800242e:	f00b fe1f 	bl	800e070 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20002698 	.word	0x20002698

0800243c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	e00a      	b.n	8002464 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800244e:	f3af 8000 	nop.w
 8002452:	4601      	mov	r1, r0
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	60ba      	str	r2, [r7, #8]
 800245a:	b2ca      	uxtb	r2, r1
 800245c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3301      	adds	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	dbf0      	blt.n	800244e <_read+0x12>
	}

return len;
 800246c:	687b      	ldr	r3, [r7, #4]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	e009      	b.n	800249c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	60ba      	str	r2, [r7, #8]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	dbf1      	blt.n	8002488 <_write+0x12>
	}
	return len;
 80024a4:	687b      	ldr	r3, [r7, #4]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_close>:

int _close(int file)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
	return -1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d6:	605a      	str	r2, [r3, #4]
	return 0;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <_isatty>:

int _isatty(int file)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
	return 1;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
	return 0;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002520:	4a14      	ldr	r2, [pc, #80]	; (8002574 <_sbrk+0x5c>)
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <_sbrk+0x60>)
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <_sbrk+0x64>)
 8002536:	4a12      	ldr	r2, [pc, #72]	; (8002580 <_sbrk+0x68>)
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <_sbrk+0x64>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	429a      	cmp	r2, r3
 8002546:	d207      	bcs.n	8002558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002548:	f016 fa50 	bl	80189ec <__errno>
 800254c:	4603      	mov	r3, r0
 800254e:	220c      	movs	r2, #12
 8002550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002556:	e009      	b.n	800256c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <_sbrk+0x64>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <_sbrk+0x64>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <_sbrk+0x64>)
 8002568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20050000 	.word	0x20050000
 8002578:	00000400 	.word	0x00000400
 800257c:	20000d78 	.word	0x20000d78
 8002580:	20002dd8 	.word	0x20002dd8

08002584 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <SystemInit+0x20>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <SystemInit+0x20>)
 8002590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <MX_TIM6_Init+0x64>)
 80025ba:	4a15      	ldr	r2, [pc, #84]	; (8002610 <MX_TIM6_Init+0x68>)
 80025bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <MX_TIM6_Init+0x64>)
 80025c0:	2263      	movs	r2, #99	; 0x63
 80025c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <MX_TIM6_Init+0x64>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19200-1;
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <MX_TIM6_Init+0x64>)
 80025cc:	f644 22ff 	movw	r2, #19199	; 0x4aff
 80025d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <MX_TIM6_Init+0x64>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025d8:	480c      	ldr	r0, [pc, #48]	; (800260c <MX_TIM6_Init+0x64>)
 80025da:	f010 f9e2 	bl	80129a2 <HAL_TIM_Base_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80025e4:	f7ff fb46 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e8:	2300      	movs	r3, #0
 80025ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	4619      	mov	r1, r3
 80025f4:	4805      	ldr	r0, [pc, #20]	; (800260c <MX_TIM6_Init+0x64>)
 80025f6:	f011 f939 	bl	801386c <HAL_TIMEx_MasterConfigSynchronization>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002600:	f7ff fb38 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000d7c 	.word	0x20000d7c
 8002610:	40001000 	.word	0x40001000

08002614 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0a      	ldr	r2, [pc, #40]	; (800264c <HAL_TIM_Base_MspInit+0x38>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d10b      	bne.n	800263e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_TIM_Base_MspInit+0x3c>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_TIM_Base_MspInit+0x3c>)
 800262c:	f043 0310 	orr.w	r3, r3, #16
 8002630:	6593      	str	r3, [r2, #88]	; 0x58
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <HAL_TIM_Base_MspInit+0x3c>)
 8002634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40001000 	.word	0x40001000
 8002650:	40021000 	.word	0x40021000

08002654 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002658:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <MX_LPUART1_UART_Init+0x50>)
 800265a:	4a13      	ldr	r2, [pc, #76]	; (80026a8 <MX_LPUART1_UART_Init+0x54>)
 800265c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800265e:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <MX_LPUART1_UART_Init+0x50>)
 8002660:	4a12      	ldr	r2, [pc, #72]	; (80026ac <MX_LPUART1_UART_Init+0x58>)
 8002662:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <MX_LPUART1_UART_Init+0x50>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <MX_LPUART1_UART_Init+0x50>)
 800266c:	2200      	movs	r2, #0
 800266e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <MX_LPUART1_UART_Init+0x50>)
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <MX_LPUART1_UART_Init+0x50>)
 8002678:	220c      	movs	r2, #12
 800267a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <MX_LPUART1_UART_Init+0x50>)
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <MX_LPUART1_UART_Init+0x50>)
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <MX_LPUART1_UART_Init+0x50>)
 800268a:	2200      	movs	r2, #0
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800268e:	4805      	ldr	r0, [pc, #20]	; (80026a4 <MX_LPUART1_UART_Init+0x50>)
 8002690:	f011 f974 	bl	801397c <HAL_UART_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 800269a:	f7ff faeb 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000dc8 	.word	0x20000dc8
 80026a8:	40008000 	.word	0x40008000
 80026ac:	00033324 	.word	0x00033324

080026b0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <MX_USART1_UART_Init+0x58>)
 80026b6:	4a15      	ldr	r2, [pc, #84]	; (800270c <MX_USART1_UART_Init+0x5c>)
 80026b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026ba:	4b13      	ldr	r3, [pc, #76]	; (8002708 <MX_USART1_UART_Init+0x58>)
 80026bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026c2:	4b11      	ldr	r3, [pc, #68]	; (8002708 <MX_USART1_UART_Init+0x58>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026c8:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <MX_USART1_UART_Init+0x58>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <MX_USART1_UART_Init+0x58>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <MX_USART1_UART_Init+0x58>)
 80026d6:	220c      	movs	r2, #12
 80026d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <MX_USART1_UART_Init+0x58>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <MX_USART1_UART_Init+0x58>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <MX_USART1_UART_Init+0x58>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <MX_USART1_UART_Init+0x58>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026f2:	4805      	ldr	r0, [pc, #20]	; (8002708 <MX_USART1_UART_Init+0x58>)
 80026f4:	f011 f942 	bl	801397c <HAL_UART_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80026fe:	f7ff fab9 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000e4c 	.word	0x20000e4c
 800270c:	40013800 	.word	0x40013800

08002710 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002714:	4b14      	ldr	r3, [pc, #80]	; (8002768 <MX_USART2_UART_Init+0x58>)
 8002716:	4a15      	ldr	r2, [pc, #84]	; (800276c <MX_USART2_UART_Init+0x5c>)
 8002718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800271a:	4b13      	ldr	r3, [pc, #76]	; (8002768 <MX_USART2_UART_Init+0x58>)
 800271c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <MX_USART2_UART_Init+0x58>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <MX_USART2_UART_Init+0x58>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <MX_USART2_UART_Init+0x58>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <MX_USART2_UART_Init+0x58>)
 8002736:	220c      	movs	r2, #12
 8002738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <MX_USART2_UART_Init+0x58>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002740:	4b09      	ldr	r3, [pc, #36]	; (8002768 <MX_USART2_UART_Init+0x58>)
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <MX_USART2_UART_Init+0x58>)
 8002748:	2200      	movs	r2, #0
 800274a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <MX_USART2_UART_Init+0x58>)
 800274e:	2200      	movs	r2, #0
 8002750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002752:	4805      	ldr	r0, [pc, #20]	; (8002768 <MX_USART2_UART_Init+0x58>)
 8002754:	f011 f912 	bl	801397c <HAL_UART_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800275e:	f7ff fa89 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000ed0 	.word	0x20000ed0
 800276c:	40004400 	.word	0x40004400

08002770 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b0b2      	sub	sp, #200	; 0xc8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800278c:	228c      	movs	r2, #140	; 0x8c
 800278e:	2100      	movs	r1, #0
 8002790:	4618      	mov	r0, r3
 8002792:	f016 f963 	bl	8018a5c <memset>
  if(uartHandle->Instance==LPUART1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a86      	ldr	r2, [pc, #536]	; (80029b4 <HAL_UART_MspInit+0x244>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d13e      	bne.n	800281e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80027a0:	2320      	movs	r3, #32
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80027a4:	2300      	movs	r3, #0
 80027a6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ac:	4618      	mov	r0, r3
 80027ae:	f00d fcdb 	bl	8010168 <HAL_RCCEx_PeriphCLKConfig>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027b8:	f7ff fa5c 	bl	8001c74 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80027bc:	4b7e      	ldr	r3, [pc, #504]	; (80029b8 <HAL_UART_MspInit+0x248>)
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	4a7d      	ldr	r2, [pc, #500]	; (80029b8 <HAL_UART_MspInit+0x248>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80027c8:	4b7b      	ldr	r3, [pc, #492]	; (80029b8 <HAL_UART_MspInit+0x248>)
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027d4:	4b78      	ldr	r3, [pc, #480]	; (80029b8 <HAL_UART_MspInit+0x248>)
 80027d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d8:	4a77      	ldr	r2, [pc, #476]	; (80029b8 <HAL_UART_MspInit+0x248>)
 80027da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027e0:	4b75      	ldr	r3, [pc, #468]	; (80029b8 <HAL_UART_MspInit+0x248>)
 80027e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e8:	623b      	str	r3, [r7, #32]
 80027ea:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 80027ec:	f00c fd64 	bl	800f2b8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 80027f0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80027f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002804:	2303      	movs	r3, #3
 8002806:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800280a:	2308      	movs	r3, #8
 800280c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002810:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002814:	4619      	mov	r1, r3
 8002816:	4869      	ldr	r0, [pc, #420]	; (80029bc <HAL_UART_MspInit+0x24c>)
 8002818:	f009 fe80 	bl	800c51c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800281c:	e0c6      	b.n	80029ac <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a67      	ldr	r2, [pc, #412]	; (80029c0 <HAL_UART_MspInit+0x250>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d15f      	bne.n	80028e8 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002828:	2301      	movs	r3, #1
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800282c:	2300      	movs	r3, #0
 800282e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002834:	4618      	mov	r0, r3
 8002836:	f00d fc97 	bl	8010168 <HAL_RCCEx_PeriphCLKConfig>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002840:	f7ff fa18 	bl	8001c74 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002844:	4b5c      	ldr	r3, [pc, #368]	; (80029b8 <HAL_UART_MspInit+0x248>)
 8002846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002848:	4a5b      	ldr	r2, [pc, #364]	; (80029b8 <HAL_UART_MspInit+0x248>)
 800284a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800284e:	6613      	str	r3, [r2, #96]	; 0x60
 8002850:	4b59      	ldr	r3, [pc, #356]	; (80029b8 <HAL_UART_MspInit+0x248>)
 8002852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285c:	4b56      	ldr	r3, [pc, #344]	; (80029b8 <HAL_UART_MspInit+0x248>)
 800285e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002860:	4a55      	ldr	r2, [pc, #340]	; (80029b8 <HAL_UART_MspInit+0x248>)
 8002862:	f043 0302 	orr.w	r3, r3, #2
 8002866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002868:	4b53      	ldr	r3, [pc, #332]	; (80029b8 <HAL_UART_MspInit+0x248>)
 800286a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002874:	4b50      	ldr	r3, [pc, #320]	; (80029b8 <HAL_UART_MspInit+0x248>)
 8002876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002878:	4a4f      	ldr	r2, [pc, #316]	; (80029b8 <HAL_UART_MspInit+0x248>)
 800287a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800287e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002880:	4b4d      	ldr	r3, [pc, #308]	; (80029b8 <HAL_UART_MspInit+0x248>)
 8002882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 800288c:	f00c fd14 	bl	800f2b8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8002890:	2340      	movs	r3, #64	; 0x40
 8002892:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a2:	2303      	movs	r3, #3
 80028a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028a8:	2307      	movs	r3, #7
 80028aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80028ae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4843      	ldr	r0, [pc, #268]	; (80029c4 <HAL_UART_MspInit+0x254>)
 80028b6:	f009 fe31 	bl	800c51c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 80028ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80028be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ce:	2303      	movs	r3, #3
 80028d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028d4:	2307      	movs	r3, #7
 80028d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028da:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028de:	4619      	mov	r1, r3
 80028e0:	4836      	ldr	r0, [pc, #216]	; (80029bc <HAL_UART_MspInit+0x24c>)
 80028e2:	f009 fe1b 	bl	800c51c <HAL_GPIO_Init>
}
 80028e6:	e061      	b.n	80029ac <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a36      	ldr	r2, [pc, #216]	; (80029c8 <HAL_UART_MspInit+0x258>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d15c      	bne.n	80029ac <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028f2:	2302      	movs	r3, #2
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028f6:	2300      	movs	r3, #0
 80028f8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028fe:	4618      	mov	r0, r3
 8002900:	f00d fc32 	bl	8010168 <HAL_RCCEx_PeriphCLKConfig>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_UART_MspInit+0x19e>
      Error_Handler();
 800290a:	f7ff f9b3 	bl	8001c74 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800290e:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_UART_MspInit+0x248>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	4a29      	ldr	r2, [pc, #164]	; (80029b8 <HAL_UART_MspInit+0x248>)
 8002914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002918:	6593      	str	r3, [r2, #88]	; 0x58
 800291a:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <HAL_UART_MspInit+0x248>)
 800291c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <HAL_UART_MspInit+0x248>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	4a23      	ldr	r2, [pc, #140]	; (80029b8 <HAL_UART_MspInit+0x248>)
 800292c:	f043 0308 	orr.w	r3, r3, #8
 8002930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002932:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <HAL_UART_MspInit+0x248>)
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293e:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <HAL_UART_MspInit+0x248>)
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <HAL_UART_MspInit+0x248>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800294a:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_UART_MspInit+0x248>)
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8002956:	2340      	movs	r3, #64	; 0x40
 8002958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295c:	2302      	movs	r3, #2
 800295e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002968:	2303      	movs	r3, #3
 800296a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800296e:	2307      	movs	r3, #7
 8002970:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8002974:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002978:	4619      	mov	r1, r3
 800297a:	4814      	ldr	r0, [pc, #80]	; (80029cc <HAL_UART_MspInit+0x25c>)
 800297c:	f009 fdce 	bl	800c51c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8002980:	2304      	movs	r3, #4
 8002982:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002992:	2303      	movs	r3, #3
 8002994:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002998:	2307      	movs	r3, #7
 800299a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 800299e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029a2:	4619      	mov	r1, r3
 80029a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a8:	f009 fdb8 	bl	800c51c <HAL_GPIO_Init>
}
 80029ac:	bf00      	nop
 80029ae:	37c8      	adds	r7, #200	; 0xc8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40008000 	.word	0x40008000
 80029b8:	40021000 	.word	0x40021000
 80029bc:	48001800 	.word	0x48001800
 80029c0:	40013800 	.word	0x40013800
 80029c4:	48000400 	.word	0x48000400
 80029c8:	40004400 	.word	0x40004400
 80029cc:	48000c00 	.word	0x48000c00

080029d0 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	330a      	adds	r3, #10
 80029e0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80029ee:	b299      	uxth	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	f00a f900 	bl	800cc00 <HAL_I2C_Master_Transmit>
 8002a00:	4603      	mov	r3, r0
 8002a02:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002a04:	693b      	ldr	r3, [r7, #16]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b088      	sub	sp, #32
 8002a12:	af02      	add	r7, sp, #8
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	330a      	adds	r3, #10
 8002a1e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	b299      	uxth	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	f00a f9d2 	bl	800cde8 <HAL_I2C_Master_Receive>
 8002a44:	4603      	mov	r3, r0
 8002a46:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002a48:	693b      	ldr	r3, [r7, #16]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	460b      	mov	r3, r1
 8002a62:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b3f      	cmp	r3, #63	; 0x3f
 8002a6c:	d902      	bls.n	8002a74 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8002a6e:	f06f 0303 	mvn.w	r3, #3
 8002a72:	e016      	b.n	8002aa2 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8002a74:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <VL53L0X_WriteMulti+0x58>)
 8002a76:	7afb      	ldrb	r3, [r7, #11]
 8002a78:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	480c      	ldr	r0, [pc, #48]	; (8002ab0 <VL53L0X_WriteMulti+0x5c>)
 8002a80:	f015 ffde 	bl	8018a40 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	3301      	adds	r3, #1
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4908      	ldr	r1, [pc, #32]	; (8002aac <VL53L0X_WriteMulti+0x58>)
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7ff ff9f 	bl	80029d0 <_I2CWrite>
 8002a92:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002a9a:	23ec      	movs	r3, #236	; 0xec
 8002a9c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002a9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000f54 	.word	0x20000f54
 8002ab0:	20000f55 	.word	0x20000f55

08002ab4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002ac8:	f107 030b 	add.w	r3, r7, #11
 8002acc:	2201      	movs	r2, #1
 8002ace:	4619      	mov	r1, r3
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f7ff ff7d 	bl	80029d0 <_I2CWrite>
 8002ad6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002ade:	23ec      	movs	r3, #236	; 0xec
 8002ae0:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002ae2:	e00c      	b.n	8002afe <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff ff90 	bl	8002a0e <_I2CRead>
 8002aee:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002af6:	23ec      	movs	r3, #236	; 0xec
 8002af8:	75fb      	strb	r3, [r7, #23]
 8002afa:	e000      	b.n	8002afe <VL53L0X_ReadMulti+0x4a>
    }
done:
 8002afc:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8002afe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8002b20:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <VL53L0X_WrByte+0x44>)
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <VL53L0X_WrByte+0x44>)
 8002b28:	78bb      	ldrb	r3, [r7, #2]
 8002b2a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	4908      	ldr	r1, [pc, #32]	; (8002b50 <VL53L0X_WrByte+0x44>)
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff4d 	bl	80029d0 <_I2CWrite>
 8002b36:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002b3e:	23ec      	movs	r3, #236	; 0xec
 8002b40:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000f54 	.word	0x20000f54

08002b54 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	70fb      	strb	r3, [r7, #3]
 8002b60:	4613      	mov	r3, r2
 8002b62:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8002b68:	4a0e      	ldr	r2, [pc, #56]	; (8002ba4 <VL53L0X_WrWord+0x50>)
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8002b6e:	883b      	ldrh	r3, [r7, #0]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <VL53L0X_WrWord+0x50>)
 8002b78:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8002b7a:	883b      	ldrh	r3, [r7, #0]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <VL53L0X_WrWord+0x50>)
 8002b80:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8002b82:	2203      	movs	r2, #3
 8002b84:	4907      	ldr	r1, [pc, #28]	; (8002ba4 <VL53L0X_WrWord+0x50>)
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff ff22 	bl	80029d0 <_I2CWrite>
 8002b8c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002b94:	23ec      	movs	r3, #236	; 0xec
 8002b96:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000f54 	.word	0x20000f54

08002ba8 <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    _I2CBuffer[0] = index;
 8002bba:	4a13      	ldr	r2, [pc, #76]	; (8002c08 <VL53L0X_WrDWord+0x60>)
 8002bbc:	7afb      	ldrb	r3, [r7, #11]
 8002bbe:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = (data >> 24) & 0xFF;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	0e1b      	lsrs	r3, r3, #24
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <VL53L0X_WrDWord+0x60>)
 8002bc8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 16) & 0xFF;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <VL53L0X_WrDWord+0x60>)
 8002bd2:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 8)  & 0xFF;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <VL53L0X_WrDWord+0x60>)
 8002bdc:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 0 ) & 0xFF;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <VL53L0X_WrDWord+0x60>)
 8002be4:	711a      	strb	r2, [r3, #4]
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 5);
 8002be6:	2205      	movs	r2, #5
 8002be8:	4907      	ldr	r1, [pc, #28]	; (8002c08 <VL53L0X_WrDWord+0x60>)
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f7ff fef0 	bl	80029d0 <_I2CWrite>
 8002bf0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <VL53L0X_WrDWord+0x54>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002bf8:	23ec      	movs	r3, #236	; 0xec
 8002bfa:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002bfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000f54 	.word	0x20000f54

08002c0c <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	4608      	mov	r0, r1
 8002c16:	4611      	mov	r1, r2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	70fb      	strb	r3, [r7, #3]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	70bb      	strb	r3, [r7, #2]
 8002c22:	4613      	mov	r3, r2
 8002c24:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8002c2a:	f107 020e 	add.w	r2, r7, #14
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	4619      	mov	r1, r3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f81e 	bl	8002c74 <VL53L0X_RdByte>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8002c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d110      	bne.n	8002c66 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8002c44:	7bba      	ldrb	r2, [r7, #14]
 8002c46:	78bb      	ldrb	r3, [r7, #2]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	787b      	ldrb	r3, [r7, #1]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8002c54:	7bba      	ldrb	r2, [r7, #14]
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ff56 	bl	8002b0c <VL53L0X_WrByte>
 8002c60:	4603      	mov	r3, r0
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e000      	b.n	8002c68 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8002c66:	bf00      	nop
done:
    return Status;
 8002c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002c86:	f107 030b 	add.w	r3, r7, #11
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f7ff fe9e 	bl	80029d0 <_I2CWrite>
 8002c94:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002c9c:	23ec      	movs	r3, #236	; 0xec
 8002c9e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002ca0:	e00c      	b.n	8002cbc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f7ff feb1 	bl	8002a0e <_I2CRead>
 8002cac:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002cb4:	23ec      	movs	r3, #236	; 0xec
 8002cb6:	75fb      	strb	r3, [r7, #23]
 8002cb8:	e000      	b.n	8002cbc <VL53L0X_RdByte+0x48>
    }
done:
 8002cba:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8002cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002cda:	f107 030b 	add.w	r3, r7, #11
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7ff fe74 	bl	80029d0 <_I2CWrite>
 8002ce8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002cf0:	23ec      	movs	r3, #236	; 0xec
 8002cf2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002cf4:	e017      	b.n	8002d26 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	490e      	ldr	r1, [pc, #56]	; (8002d34 <VL53L0X_RdWord+0x6c>)
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f7ff fe87 	bl	8002a0e <_I2CRead>
 8002d00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002d08:	23ec      	movs	r3, #236	; 0xec
 8002d0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002d0c:	e00b      	b.n	8002d26 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <VL53L0X_RdWord+0x6c>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <VL53L0X_RdWord+0x6c>)
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8002d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000f54 	.word	0x20000f54

08002d38 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	460b      	mov	r3, r1
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002d4a:	f107 030b 	add.w	r3, r7, #11
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4619      	mov	r1, r3
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7ff fe3c 	bl	80029d0 <_I2CWrite>
 8002d58:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002d60:	23ec      	movs	r3, #236	; 0xec
 8002d62:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002d64:	e01b      	b.n	8002d9e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8002d66:	2204      	movs	r2, #4
 8002d68:	4910      	ldr	r1, [pc, #64]	; (8002dac <VL53L0X_RdDWord+0x74>)
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff fe4f 	bl	8002a0e <_I2CRead>
 8002d70:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002d78:	23ec      	movs	r3, #236	; 0xec
 8002d7a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002d7c:	e00f      	b.n	8002d9e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <VL53L0X_RdDWord+0x74>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	061a      	lsls	r2, r3, #24
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <VL53L0X_RdDWord+0x74>)
 8002d86:	785b      	ldrb	r3, [r3, #1]
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	441a      	add	r2, r3
 8002d8c:	4b07      	ldr	r3, [pc, #28]	; (8002dac <VL53L0X_RdDWord+0x74>)
 8002d8e:	789b      	ldrb	r3, [r3, #2]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	4413      	add	r3, r2
 8002d94:	4a05      	ldr	r2, [pc, #20]	; (8002dac <VL53L0X_RdDWord+0x74>)
 8002d96:	78d2      	ldrb	r2, [r2, #3]
 8002d98:	441a      	add	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8002d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000f54 	.word	0x20000f54

08002db0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8002dbc:	2002      	movs	r0, #2
 8002dbe:	f008 f8b7 	bl	800af30 <HAL_Delay>
    return status;
 8002dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002dd4:	f7ff fbd6 	bl	8002584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dd8:	480c      	ldr	r0, [pc, #48]	; (8002e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8002dda:	490d      	ldr	r1, [pc, #52]	; (8002e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ddc:	4a0d      	ldr	r2, [pc, #52]	; (8002e14 <LoopForever+0xe>)
  movs r3, #0
 8002dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de0:	e002      	b.n	8002de8 <LoopCopyDataInit>

08002de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002de6:	3304      	adds	r3, #4

08002de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dec:	d3f9      	bcc.n	8002de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dee:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002df0:	4c0a      	ldr	r4, [pc, #40]	; (8002e1c <LoopForever+0x16>)
  movs r3, #0
 8002df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df4:	e001      	b.n	8002dfa <LoopFillZerobss>

08002df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df8:	3204      	adds	r2, #4

08002dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dfc:	d3fb      	bcc.n	8002df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dfe:	f015 fdfb 	bl	80189f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e02:	f7fe fc0f 	bl	8001624 <main>

08002e06 <LoopForever>:

LoopForever:
    b LoopForever
 8002e06:	e7fe      	b.n	8002e06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e08:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e10:	2000073c 	.word	0x2000073c
  ldr r2, =_sidata
 8002e14:	0801bc10 	.word	0x0801bc10
  ldr r2, =_sbss
 8002e18:	2000073c 	.word	0x2000073c
  ldr r4, =_ebss
 8002e1c:	20002dd4 	.word	0x20002dd4

08002e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e20:	e7fe      	b.n	8002e20 <ADC1_2_IRQHandler>
	...

08002e24 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f90d 	bl	8003050 <ft6x06_GetInstance>
 8002e36:	4603      	mov	r3, r0
 8002e38:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2bff      	cmp	r3, #255	; 0xff
 8002e3e:	d10e      	bne.n	8002e5e <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8002e40:	2000      	movs	r0, #0
 8002e42:	f000 f905 	bl	8003050 <ft6x06_GetInstance>
 8002e46:	4603      	mov	r3, r0
 8002e48:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8002e4a:	7bbb      	ldrb	r3, [r7, #14]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d806      	bhi.n	8002e5e <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8002e50:	7bbb      	ldrb	r3, [r7, #14]
 8002e52:	88fa      	ldrh	r2, [r7, #6]
 8002e54:	b2d1      	uxtb	r1, r2
 8002e56:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <ft6x06_Init+0x44>)
 8002e58:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8002e5a:	f006 fee7 	bl	8009c2c <TS_IO_Init>
    }
  }
}
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000f94 	.word	0x20000f94

08002e6c <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	4603      	mov	r3, r0
 8002e8a:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8002e8c:	f006 fece 	bl	8009c2c <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	21a8      	movs	r1, #168	; 0xa8
 8002e96:	4618      	mov	r0, r3
 8002e98:	f006 ff0e 	bl	8009cb8 <TS_IO_Read>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	b29b      	uxth	r3, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 f8bc 	bl	8003032 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 f88d 	bl	8002fdc <ft6x06_TS_DisableIT>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f006 fee9 	bl	8009cb8 <TS_IO_Read>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <ft6x06_TS_DetectTouch+0x50>)
 8002f08:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8002f0a:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <ft6x06_TS_DetectTouch+0x50>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	b2db      	uxtb	r3, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000f98 	.word	0x20000f98

08002f20 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8002f32:	4b1f      	ldr	r3, [pc, #124]	; (8002fb0 <ft6x06_TS_GetXY+0x90>)
 8002f34:	789a      	ldrb	r2, [r3, #2]
 8002f36:	4b1e      	ldr	r3, [pc, #120]	; (8002fb0 <ft6x06_TS_GetXY+0x90>)
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d234      	bcs.n	8002fa8 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8002f3e:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <ft6x06_TS_GetXY+0x90>)
 8002f40:	789b      	ldrb	r3, [r3, #2]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <ft6x06_TS_GetXY+0x2c>
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d003      	beq.n	8002f52 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8002f4a:	e005      	b.n	8002f58 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f50:	e002      	b.n	8002f58 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8002f52:	2309      	movs	r3, #9
 8002f54:	75fb      	strb	r3, [r7, #23]
      break;
 8002f56:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8002f58:	89fb      	ldrh	r3, [r7, #14]
 8002f5a:	b2d8      	uxtb	r0, r3
 8002f5c:	f107 0210 	add.w	r2, r7, #16
 8002f60:	7df9      	ldrb	r1, [r7, #23]
 8002f62:	2304      	movs	r3, #4
 8002f64:	f006 febe 	bl	8009ce4 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8002f68:	7c3b      	ldrb	r3, [r7, #16]
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	b21b      	sxth	r3, r3
 8002f6e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f72:	b21a      	sxth	r2, r3
 8002f74:	7c7b      	ldrb	r3, [r7, #17]
 8002f76:	b21b      	sxth	r3, r3
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	b21b      	sxth	r3, r3
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8002f82:	7cbb      	ldrb	r3, [r7, #18]
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	b21b      	sxth	r3, r3
 8002f88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f8c:	b21a      	sxth	r2, r3
 8002f8e:	7cfb      	ldrb	r3, [r7, #19]
 8002f90:	b21b      	sxth	r3, r3
 8002f92:	4313      	orrs	r3, r2
 8002f94:	b21b      	sxth	r3, r3
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <ft6x06_TS_GetXY+0x90>)
 8002f9e:	789b      	ldrb	r3, [r3, #2]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	4b02      	ldr	r3, [pc, #8]	; (8002fb0 <ft6x06_TS_GetXY+0x90>)
 8002fa6:	709a      	strb	r2, [r3, #2]
  }
}
 8002fa8:	bf00      	nop
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20000f98 	.word	0x20000f98

08002fb4 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	7bfa      	ldrb	r2, [r7, #15]
 8002fcc:	21a4      	movs	r1, #164	; 0xa4
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f006 fe58 	bl	8009c84 <TS_IO_Write>
}
 8002fd4:	bf00      	nop
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002fea:	2300      	movs	r3, #0
 8002fec:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	7bfa      	ldrb	r2, [r7, #15]
 8002ff4:	21a4      	movs	r1, #164	; 0xa4
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f006 fe44 	bl	8009c84 <TS_IO_Write>
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	4603      	mov	r3, r0
 800303a:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8003040:	68fb      	ldr	r3, [r7, #12]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
 8003062:	e00b      	b.n	800307c <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <ft6x06_GetInstance+0x40>)
 8003068:	5cd3      	ldrb	r3, [r2, r3]
 800306a:	b29b      	uxth	r3, r3
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	429a      	cmp	r2, r3
 8003070:	d101      	bne.n	8003076 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	e006      	b.n	8003084 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	3301      	adds	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d9f0      	bls.n	8003064 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8003082:	23ff      	movs	r3, #255	; 0xff
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	20000f94 	.word	0x20000f94

08003094 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 ffd1 	bl	8004048 <mfxstm32l152_GetInstance>
 80030a6:	4603      	mov	r3, r0
 80030a8:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	2bff      	cmp	r3, #255	; 0xff
 80030ae:	d10e      	bne.n	80030ce <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 80030b0:	2000      	movs	r0, #0
 80030b2:	f000 ffc9 	bl	8004048 <mfxstm32l152_GetInstance>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 80030ba:	7bbb      	ldrb	r3, [r7, #14]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d806      	bhi.n	80030ce <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 80030c0:	7bbb      	ldrb	r3, [r7, #14]
 80030c2:	88fa      	ldrh	r2, [r7, #6]
 80030c4:	b2d1      	uxtb	r1, r2
 80030c6:	4a09      	ldr	r2, [pc, #36]	; (80030ec <mfxstm32l152_Init+0x58>)
 80030c8:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 80030ca:	f006 fb81 	bl	80097d0 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2102      	movs	r1, #2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f8db 	bl	800328e <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	2101      	movs	r1, #1
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 f8fc 	bl	80032da <mfxstm32l152_SetIrqOutPinType>
}
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000f9c 	.word	0x20000f9c

080030f0 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 ffc3 	bl	8004088 <mfxstm32l152_ReleaseInstance>
 8003102:	4603      	mov	r3, r0
 8003104:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2bff      	cmp	r3, #255	; 0xff
 800310a:	d001      	beq.n	8003110 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 800310c:	f006 fb70 	bl	80097f0 <MFX_IO_DeInit>
  }
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	2280      	movs	r2, #128	; 0x80
 8003126:	2140      	movs	r1, #64	; 0x40
 8003128:	4618      	mov	r0, r3
 800312a:	f006 fc03 	bl	8009934 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 800312e:	200a      	movs	r0, #10
 8003130:	f006 fc42 	bl	80099b8 <MFX_IO_Delay>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	2240      	movs	r2, #64	; 0x40
 800314a:	2140      	movs	r1, #64	; 0x40
 800314c:	4618      	mov	r0, r3
 800314e:	f006 fbf1 	bl	8009934 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 8003152:	f006 fbb7 	bl	80098c4 <MFX_IO_EnableWakeupPin>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	4603      	mov	r3, r0
 8003166:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 ff6c 	bl	8004048 <mfxstm32l152_GetInstance>
 8003170:	4603      	mov	r3, r0
 8003172:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	2bff      	cmp	r3, #255	; 0xff
 8003178:	d101      	bne.n	800317e <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 800317a:	f006 fba3 	bl	80098c4 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 800317e:	f006 fbc5 	bl	800990c <MFX_IO_Wakeup>
}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8003194:	2001      	movs	r0, #1
 8003196:	f006 fc0f 	bl	80099b8 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 800319a:	f006 fb19 	bl	80097d0 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	2100      	movs	r1, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f006 fbda 	bl	800995c <MFX_IO_Read>
 80031a8:	4603      	mov	r3, r0
 80031aa:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	b29b      	uxth	r3, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	460a      	mov	r2, r1
 80031c2:	80fb      	strh	r3, [r7, #6]
 80031c4:	4613      	mov	r3, r2
 80031c6:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	2142      	movs	r1, #66	; 0x42
 80031d0:	4618      	mov	r0, r3
 80031d2:	f006 fbc3 	bl	800995c <MFX_IO_Read>
 80031d6:	4603      	mov	r3, r0
 80031d8:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	797b      	ldrb	r3, [r7, #5]
 80031de:	4313      	orrs	r3, r2
 80031e0:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	2142      	movs	r1, #66	; 0x42
 80031e8:	4618      	mov	r0, r3
 80031ea:	f006 fba3 	bl	8009934 <MFX_IO_Write>
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	4603      	mov	r3, r0
 80031fe:	460a      	mov	r2, r1
 8003200:	80fb      	strh	r3, [r7, #6]
 8003202:	4613      	mov	r3, r2
 8003204:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	2142      	movs	r1, #66	; 0x42
 800320e:	4618      	mov	r0, r3
 8003210:	f006 fba4 	bl	800995c <MFX_IO_Read>
 8003214:	4603      	mov	r3, r0
 8003216:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 8003218:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800321c:	43db      	mvns	r3, r3
 800321e:	b25a      	sxtb	r2, r3
 8003220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003224:	4013      	ands	r3, r2
 8003226:	b25b      	sxtb	r3, r3
 8003228:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 800322a:	7bfa      	ldrb	r2, [r7, #15]
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	2142      	movs	r1, #66	; 0x42
 8003230:	4618      	mov	r0, r3
 8003232:	f006 fb7f 	bl	8009934 <MFX_IO_Write>
}
 8003236:	bf00      	nop
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	460a      	mov	r2, r1
 8003248:	80fb      	strh	r3, [r7, #6]
 800324a:	4613      	mov	r3, r2
 800324c:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	2108      	movs	r1, #8
 8003252:	4618      	mov	r0, r3
 8003254:	f006 fb82 	bl	800995c <MFX_IO_Read>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	797b      	ldrb	r3, [r7, #5]
 800325e:	4013      	ands	r3, r2
 8003260:	b2db      	uxtb	r3, r3
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	460a      	mov	r2, r1
 8003274:	80fb      	strh	r3, [r7, #6]
 8003276:	4613      	mov	r3, r2
 8003278:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 800327a:	797a      	ldrb	r2, [r7, #5]
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	2144      	movs	r1, #68	; 0x44
 8003280:	4618      	mov	r0, r3
 8003282:	f006 fb57 	bl	8009934 <MFX_IO_Write>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	460a      	mov	r2, r1
 8003298:	80fb      	strh	r3, [r7, #6]
 800329a:	4613      	mov	r3, r2
 800329c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	2141      	movs	r1, #65	; 0x41
 80032a6:	4618      	mov	r0, r3
 80032a8:	f006 fb58 	bl	800995c <MFX_IO_Read>
 80032ac:	4603      	mov	r3, r0
 80032ae:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	f023 0302 	bic.w	r3, r3, #2
 80032b6:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	797b      	ldrb	r3, [r7, #5]
 80032bc:	4313      	orrs	r3, r2
 80032be:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 80032c0:	7bfa      	ldrb	r2, [r7, #15]
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	2141      	movs	r1, #65	; 0x41
 80032c6:	4618      	mov	r0, r3
 80032c8:	f006 fb34 	bl	8009934 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80032cc:	2001      	movs	r0, #1
 80032ce:	f006 fb73 	bl	80099b8 <MFX_IO_Delay>

}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4603      	mov	r3, r0
 80032e2:	460a      	mov	r2, r1
 80032e4:	80fb      	strh	r3, [r7, #6]
 80032e6:	4613      	mov	r3, r2
 80032e8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	2141      	movs	r1, #65	; 0x41
 80032f2:	4618      	mov	r0, r3
 80032f4:	f006 fb32 	bl	800995c <MFX_IO_Read>
 80032f8:	4603      	mov	r3, r0
 80032fa:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	f023 0301 	bic.w	r3, r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	797b      	ldrb	r3, [r7, #5]
 8003308:	4313      	orrs	r3, r2
 800330a:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	2141      	movs	r1, #65	; 0x41
 8003312:	4618      	mov	r0, r3
 8003314:	f006 fb0e 	bl	8009934 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003318:	2001      	movs	r0, #1
 800331a:	f006 fb4d 	bl	80099b8 <MFX_IO_Delay>

}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	4603      	mov	r3, r0
 800332e:	6039      	str	r1, [r7, #0]
 8003330:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	2140      	movs	r1, #64	; 0x40
 8003336:	4618      	mov	r0, r3
 8003338:	f006 fb10 	bl	800995c <MFX_IO_Read>
 800333c:	4603      	mov	r3, r0
 800333e:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334e:	d304      	bcc.n	800335a <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	f043 0308 	orr.w	r3, r3, #8
 8003356:	73fb      	strb	r3, [r7, #15]
 8003358:	e003      	b.n	8003362 <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	f023 0308 	bic.w	r3, r3, #8
 8003360:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8003362:	7bfa      	ldrb	r2, [r7, #15]
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	2140      	movs	r1, #64	; 0x40
 8003368:	4618      	mov	r0, r3
 800336a:	f006 fae3 	bl	8009934 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 800336e:	2001      	movs	r0, #1
 8003370:	f006 fb22 	bl	80099b8 <MFX_IO_Delay>
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	6039      	str	r1, [r7, #0]
 8003386:	80fb      	strh	r3, [r7, #6]
 8003388:	4613      	mov	r3, r2
 800338a:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8003390:	797b      	ldrb	r3, [r7, #5]
 8003392:	2b17      	cmp	r3, #23
 8003394:	f200 82d4 	bhi.w	8003940 <mfxstm32l152_IO_Config+0x5c4>
 8003398:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <mfxstm32l152_IO_Config+0x24>)
 800339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339e:	bf00      	nop
 80033a0:	08003431 	.word	0x08003431
 80033a4:	080034c1 	.word	0x080034c1
 80033a8:	08003581 	.word	0x08003581
 80033ac:	08003671 	.word	0x08003671
 80033b0:	08003761 	.word	0x08003761
 80033b4:	08003851 	.word	0x08003851
 80033b8:	08003401 	.word	0x08003401
 80033bc:	08003401 	.word	0x08003401
 80033c0:	08003461 	.word	0x08003461
 80033c4:	08003491 	.word	0x08003491
 80033c8:	08003941 	.word	0x08003941
 80033cc:	08003551 	.word	0x08003551
 80033d0:	08003521 	.word	0x08003521
 80033d4:	08003941 	.word	0x08003941
 80033d8:	080034f1 	.word	0x080034f1
 80033dc:	080034c1 	.word	0x080034c1
 80033e0:	080035d1 	.word	0x080035d1
 80033e4:	08003621 	.word	0x08003621
 80033e8:	080036c1 	.word	0x080036c1
 80033ec:	08003711 	.word	0x08003711
 80033f0:	080037b1 	.word	0x080037b1
 80033f4:	08003801 	.word	0x08003801
 80033f8:	080038a1 	.word	0x080038a1
 80033fc:	080038f1 	.word	0x080038f1
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	6839      	ldr	r1, [r7, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fb67 	bl	8003ad8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	2200      	movs	r2, #0
 800340e:	6839      	ldr	r1, [r7, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fa9d 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003416:	88f8      	ldrh	r0, [r7, #6]
 8003418:	2300      	movs	r3, #0
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	2164      	movs	r1, #100	; 0x64
 800341e:	f000 fe57 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003422:	88f8      	ldrh	r0, [r7, #6]
 8003424:	2300      	movs	r3, #0
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	2168      	movs	r1, #104	; 0x68
 800342a:	f000 fe51 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    break;
 800342e:	e28a      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	6839      	ldr	r1, [r7, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fb4f 	bl	8003ad8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	2200      	movs	r2, #0
 800343e:	6839      	ldr	r1, [r7, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fa85 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003446:	88f8      	ldrh	r0, [r7, #6]
 8003448:	2300      	movs	r3, #0
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	2164      	movs	r1, #100	; 0x64
 800344e:	f000 fe3f 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003452:	88f8      	ldrh	r0, [r7, #6]
 8003454:	2301      	movs	r3, #1
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	2168      	movs	r1, #104	; 0x68
 800345a:	f000 fe39 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    break;
 800345e:	e272      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	6839      	ldr	r1, [r7, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fb37 	bl	8003ad8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	2200      	movs	r2, #0
 800346e:	6839      	ldr	r1, [r7, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fa6d 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003476:	88f8      	ldrh	r0, [r7, #6]
 8003478:	2301      	movs	r3, #1
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	2164      	movs	r1, #100	; 0x64
 800347e:	f000 fe27 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003482:	88f8      	ldrh	r0, [r7, #6]
 8003484:	2301      	movs	r3, #1
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	2168      	movs	r1, #104	; 0x68
 800348a:	f000 fe21 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    break;
 800348e:	e25a      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	6839      	ldr	r1, [r7, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fb1f 	bl	8003ad8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	2200      	movs	r2, #0
 800349e:	6839      	ldr	r1, [r7, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fa55 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80034a6:	88f8      	ldrh	r0, [r7, #6]
 80034a8:	2301      	movs	r3, #1
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	2164      	movs	r1, #100	; 0x64
 80034ae:	f000 fe0f 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80034b2:	88f8      	ldrh	r0, [r7, #6]
 80034b4:	2300      	movs	r3, #0
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	2168      	movs	r1, #104	; 0x68
 80034ba:	f000 fe09 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    break;
 80034be:	e242      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	6839      	ldr	r1, [r7, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fb07 	bl	8003ad8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80034ca:	88fb      	ldrh	r3, [r7, #6]
 80034cc:	2201      	movs	r2, #1
 80034ce:	6839      	ldr	r1, [r7, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fa3d 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80034d6:	88f8      	ldrh	r0, [r7, #6]
 80034d8:	2300      	movs	r3, #0
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	2164      	movs	r1, #100	; 0x64
 80034de:	f000 fdf7 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80034e2:	88f8      	ldrh	r0, [r7, #6]
 80034e4:	2300      	movs	r3, #0
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	2168      	movs	r1, #104	; 0x68
 80034ea:	f000 fdf1 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    break;
 80034ee:	e22a      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	6839      	ldr	r1, [r7, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 faef 	bl	8003ad8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	2201      	movs	r2, #1
 80034fe:	6839      	ldr	r1, [r7, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fa25 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8003506:	88f8      	ldrh	r0, [r7, #6]
 8003508:	2300      	movs	r3, #0
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	2164      	movs	r1, #100	; 0x64
 800350e:	f000 fddf 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003512:	88f8      	ldrh	r0, [r7, #6]
 8003514:	2301      	movs	r3, #1
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	2168      	movs	r1, #104	; 0x68
 800351a:	f000 fdd9 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    break;
 800351e:	e212      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	6839      	ldr	r1, [r7, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fad7 	bl	8003ad8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	2201      	movs	r2, #1
 800352e:	6839      	ldr	r1, [r7, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fa0d 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8003536:	88f8      	ldrh	r0, [r7, #6]
 8003538:	2301      	movs	r3, #1
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	2164      	movs	r1, #100	; 0x64
 800353e:	f000 fdc7 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003542:	88f8      	ldrh	r0, [r7, #6]
 8003544:	2300      	movs	r3, #0
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	2168      	movs	r1, #104	; 0x68
 800354a:	f000 fdc1 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    break;
 800354e:	e1fa      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	6839      	ldr	r1, [r7, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fabf 	bl	8003ad8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800355a:	88fb      	ldrh	r3, [r7, #6]
 800355c:	2201      	movs	r2, #1
 800355e:	6839      	ldr	r1, [r7, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f000 f9f5 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8003566:	88f8      	ldrh	r0, [r7, #6]
 8003568:	2301      	movs	r3, #1
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	2164      	movs	r1, #100	; 0x64
 800356e:	f000 fdaf 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003572:	88f8      	ldrh	r0, [r7, #6]
 8003574:	2301      	movs	r3, #1
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	2168      	movs	r1, #104	; 0x68
 800357a:	f000 fda9 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    break;
 800357e:	e1e2      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fa7a 	bl	8003a7c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	2200      	movs	r2, #0
 800358c:	6839      	ldr	r1, [r7, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 f9de 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003594:	88f8      	ldrh	r0, [r7, #6]
 8003596:	2300      	movs	r3, #0
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	2164      	movs	r1, #100	; 0x64
 800359c:	f000 fd98 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80035a0:	88f8      	ldrh	r0, [r7, #6]
 80035a2:	2301      	movs	r3, #1
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	2168      	movs	r1, #104	; 0x68
 80035a8:	f000 fd92 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	2201      	movs	r2, #1
 80035b0:	6839      	ldr	r1, [r7, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f9de 	bl	8003974 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	2201      	movs	r2, #1
 80035bc:	6839      	ldr	r1, [r7, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f9ed 	bl	800399e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	6839      	ldr	r1, [r7, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fa75 	bl	8003ab8 <mfxstm32l152_IO_EnablePinIT>
    break;
 80035ce:	e1ba      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fa52 	bl	8003a7c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	2200      	movs	r2, #0
 80035dc:	6839      	ldr	r1, [r7, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 f9b6 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80035e4:	88f8      	ldrh	r0, [r7, #6]
 80035e6:	2301      	movs	r3, #1
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	2164      	movs	r1, #100	; 0x64
 80035ec:	f000 fd70 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80035f0:	88f8      	ldrh	r0, [r7, #6]
 80035f2:	2301      	movs	r3, #1
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	2168      	movs	r1, #104	; 0x68
 80035f8:	f000 fd6a 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	2201      	movs	r2, #1
 8003600:	6839      	ldr	r1, [r7, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f000 f9b6 	bl	8003974 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	2201      	movs	r2, #1
 800360c:	6839      	ldr	r1, [r7, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f9c5 	bl	800399e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003614:	88fb      	ldrh	r3, [r7, #6]
 8003616:	6839      	ldr	r1, [r7, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fa4d 	bl	8003ab8 <mfxstm32l152_IO_EnablePinIT>
    break;
 800361e:	e192      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fa2a 	bl	8003a7c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	2200      	movs	r2, #0
 800362c:	6839      	ldr	r1, [r7, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f98e 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003634:	88f8      	ldrh	r0, [r7, #6]
 8003636:	2301      	movs	r3, #1
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	2164      	movs	r1, #100	; 0x64
 800363c:	f000 fd48 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003640:	88f8      	ldrh	r0, [r7, #6]
 8003642:	2300      	movs	r3, #0
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	2168      	movs	r1, #104	; 0x68
 8003648:	f000 fd42 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	2201      	movs	r2, #1
 8003650:	6839      	ldr	r1, [r7, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f98e 	bl	8003974 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003658:	88fb      	ldrh	r3, [r7, #6]
 800365a:	2201      	movs	r2, #1
 800365c:	6839      	ldr	r1, [r7, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f99d 	bl	800399e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	6839      	ldr	r1, [r7, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fa25 	bl	8003ab8 <mfxstm32l152_IO_EnablePinIT>
    break;
 800366e:	e16a      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fa02 	bl	8003a7c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	2200      	movs	r2, #0
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f966 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003684:	88f8      	ldrh	r0, [r7, #6]
 8003686:	2300      	movs	r3, #0
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	2164      	movs	r1, #100	; 0x64
 800368c:	f000 fd20 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003690:	88f8      	ldrh	r0, [r7, #6]
 8003692:	2301      	movs	r3, #1
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	2168      	movs	r1, #104	; 0x68
 8003698:	f000 fd1a 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800369c:	88fb      	ldrh	r3, [r7, #6]
 800369e:	2201      	movs	r2, #1
 80036a0:	6839      	ldr	r1, [r7, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f966 	bl	8003974 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	2200      	movs	r2, #0
 80036ac:	6839      	ldr	r1, [r7, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f975 	bl	800399e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	6839      	ldr	r1, [r7, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 f9fd 	bl	8003ab8 <mfxstm32l152_IO_EnablePinIT>
    break;
 80036be:	e142      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80036c0:	88fb      	ldrh	r3, [r7, #6]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f9da 	bl	8003a7c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	2200      	movs	r2, #0
 80036cc:	6839      	ldr	r1, [r7, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f93e 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80036d4:	88f8      	ldrh	r0, [r7, #6]
 80036d6:	2301      	movs	r3, #1
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	2164      	movs	r1, #100	; 0x64
 80036dc:	f000 fcf8 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80036e0:	88f8      	ldrh	r0, [r7, #6]
 80036e2:	2301      	movs	r3, #1
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	2168      	movs	r1, #104	; 0x68
 80036e8:	f000 fcf2 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	2201      	movs	r2, #1
 80036f0:	6839      	ldr	r1, [r7, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f93e 	bl	8003974 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	2200      	movs	r2, #0
 80036fc:	6839      	ldr	r1, [r7, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f94d 	bl	800399e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	6839      	ldr	r1, [r7, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f9d5 	bl	8003ab8 <mfxstm32l152_IO_EnablePinIT>
    break;
 800370e:	e11a      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f9b2 	bl	8003a7c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	2200      	movs	r2, #0
 800371c:	6839      	ldr	r1, [r7, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f916 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003724:	88f8      	ldrh	r0, [r7, #6]
 8003726:	2301      	movs	r3, #1
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	2164      	movs	r1, #100	; 0x64
 800372c:	f000 fcd0 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003730:	88f8      	ldrh	r0, [r7, #6]
 8003732:	2300      	movs	r3, #0
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	2168      	movs	r1, #104	; 0x68
 8003738:	f000 fcca 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	2201      	movs	r2, #1
 8003740:	6839      	ldr	r1, [r7, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f916 	bl	8003974 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	2200      	movs	r2, #0
 800374c:	6839      	ldr	r1, [r7, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f925 	bl	800399e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	6839      	ldr	r1, [r7, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 f9ad 	bl	8003ab8 <mfxstm32l152_IO_EnablePinIT>
    break;
 800375e:	e0f2      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f98a 	bl	8003a7c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	2200      	movs	r2, #0
 800376c:	6839      	ldr	r1, [r7, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f8ee 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003774:	88f8      	ldrh	r0, [r7, #6]
 8003776:	2300      	movs	r3, #0
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	2164      	movs	r1, #100	; 0x64
 800377c:	f000 fca8 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003780:	88f8      	ldrh	r0, [r7, #6]
 8003782:	2301      	movs	r3, #1
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	2168      	movs	r1, #104	; 0x68
 8003788:	f000 fca2 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	2200      	movs	r2, #0
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f8ee 	bl	8003974 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	2200      	movs	r2, #0
 800379c:	6839      	ldr	r1, [r7, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 f8fd 	bl	800399e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	6839      	ldr	r1, [r7, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f985 	bl	8003ab8 <mfxstm32l152_IO_EnablePinIT>
    break;
 80037ae:	e0ca      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80037b0:	88fb      	ldrh	r3, [r7, #6]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f962 	bl	8003a7c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	2200      	movs	r2, #0
 80037bc:	6839      	ldr	r1, [r7, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f8c6 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80037c4:	88f8      	ldrh	r0, [r7, #6]
 80037c6:	2301      	movs	r3, #1
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	2164      	movs	r1, #100	; 0x64
 80037cc:	f000 fc80 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80037d0:	88f8      	ldrh	r0, [r7, #6]
 80037d2:	2301      	movs	r3, #1
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	2168      	movs	r1, #104	; 0x68
 80037d8:	f000 fc7a 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	2200      	movs	r2, #0
 80037e0:	6839      	ldr	r1, [r7, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f8c6 	bl	8003974 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	2200      	movs	r2, #0
 80037ec:	6839      	ldr	r1, [r7, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f8d5 	bl	800399e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	6839      	ldr	r1, [r7, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 f95d 	bl	8003ab8 <mfxstm32l152_IO_EnablePinIT>
    break;
 80037fe:	e0a2      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f93a 	bl	8003a7c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	2200      	movs	r2, #0
 800380c:	6839      	ldr	r1, [r7, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f89e 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003814:	88f8      	ldrh	r0, [r7, #6]
 8003816:	2301      	movs	r3, #1
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	2164      	movs	r1, #100	; 0x64
 800381c:	f000 fc58 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003820:	88f8      	ldrh	r0, [r7, #6]
 8003822:	2300      	movs	r3, #0
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	2168      	movs	r1, #104	; 0x68
 8003828:	f000 fc52 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	2200      	movs	r2, #0
 8003830:	6839      	ldr	r1, [r7, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f89e 	bl	8003974 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	2200      	movs	r2, #0
 800383c:	6839      	ldr	r1, [r7, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f8ad 	bl	800399e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	6839      	ldr	r1, [r7, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f000 f935 	bl	8003ab8 <mfxstm32l152_IO_EnablePinIT>
    break;
 800384e:	e07a      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f912 	bl	8003a7c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	2200      	movs	r2, #0
 800385c:	6839      	ldr	r1, [r7, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f876 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003864:	88f8      	ldrh	r0, [r7, #6]
 8003866:	2300      	movs	r3, #0
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	2164      	movs	r1, #100	; 0x64
 800386c:	f000 fc30 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003870:	88f8      	ldrh	r0, [r7, #6]
 8003872:	2301      	movs	r3, #1
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	2168      	movs	r1, #104	; 0x68
 8003878:	f000 fc2a 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	2200      	movs	r2, #0
 8003880:	6839      	ldr	r1, [r7, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f876 	bl	8003974 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	2201      	movs	r2, #1
 800388c:	6839      	ldr	r1, [r7, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 f885 	bl	800399e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003894:	88fb      	ldrh	r3, [r7, #6]
 8003896:	6839      	ldr	r1, [r7, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 f90d 	bl	8003ab8 <mfxstm32l152_IO_EnablePinIT>
    break;
 800389e:	e052      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f8ea 	bl	8003a7c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	2200      	movs	r2, #0
 80038ac:	6839      	ldr	r1, [r7, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 f84e 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80038b4:	88f8      	ldrh	r0, [r7, #6]
 80038b6:	2301      	movs	r3, #1
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	2164      	movs	r1, #100	; 0x64
 80038bc:	f000 fc08 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80038c0:	88f8      	ldrh	r0, [r7, #6]
 80038c2:	2301      	movs	r3, #1
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	2168      	movs	r1, #104	; 0x68
 80038c8:	f000 fc02 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	2200      	movs	r2, #0
 80038d0:	6839      	ldr	r1, [r7, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 f84e 	bl	8003974 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	2201      	movs	r2, #1
 80038dc:	6839      	ldr	r1, [r7, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f85d 	bl	800399e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	6839      	ldr	r1, [r7, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 f8e5 	bl	8003ab8 <mfxstm32l152_IO_EnablePinIT>
    break;
 80038ee:	e02a      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f8c2 	bl	8003a7c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	2200      	movs	r2, #0
 80038fc:	6839      	ldr	r1, [r7, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 f826 	bl	8003950 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003904:	88f8      	ldrh	r0, [r7, #6]
 8003906:	2301      	movs	r3, #1
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	2164      	movs	r1, #100	; 0x64
 800390c:	f000 fbe0 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003910:	88f8      	ldrh	r0, [r7, #6]
 8003912:	2300      	movs	r3, #0
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	2168      	movs	r1, #104	; 0x68
 8003918:	f000 fbda 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	2200      	movs	r2, #0
 8003920:	6839      	ldr	r1, [r7, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f826 	bl	8003974 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	2201      	movs	r2, #1
 800392c:	6839      	ldr	r1, [r7, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 f835 	bl	800399e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003934:	88fb      	ldrh	r3, [r7, #6]
 8003936:	6839      	ldr	r1, [r7, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f000 f8bd 	bl	8003ab8 <mfxstm32l152_IO_EnablePinIT>
    break;
 800393e:	e002      	b.n	8003946 <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 8003940:	797b      	ldrb	r3, [r7, #5]
 8003942:	73fb      	strb	r3, [r7, #15]
    break;
 8003944:	bf00      	nop
  }

  return error_code;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	6039      	str	r1, [r7, #0]
 800395a:	80fb      	strh	r3, [r7, #6]
 800395c:	4613      	mov	r3, r2
 800395e:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8003960:	797b      	ldrb	r3, [r7, #5]
 8003962:	88f8      	ldrh	r0, [r7, #6]
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	2160      	movs	r1, #96	; 0x60
 8003968:	f000 fbb2 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
}
 800396c:	bf00      	nop
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	80fb      	strh	r3, [r7, #6]
 8003980:	4613      	mov	r3, r2
 8003982:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8003984:	797b      	ldrb	r3, [r7, #5]
 8003986:	88f8      	ldrh	r0, [r7, #6]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	214c      	movs	r1, #76	; 0x4c
 800398c:	f000 fba0 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8003990:	2001      	movs	r0, #1
 8003992:	f006 f811 	bl	80099b8 <MFX_IO_Delay>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	4603      	mov	r3, r0
 80039a6:	6039      	str	r1, [r7, #0]
 80039a8:	80fb      	strh	r3, [r7, #6]
 80039aa:	4613      	mov	r3, r2
 80039ac:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 80039ae:	797b      	ldrb	r3, [r7, #5]
 80039b0:	88f8      	ldrh	r0, [r7, #6]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	2150      	movs	r1, #80	; 0x50
 80039b6:	f000 fb8b 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 80039ba:	2001      	movs	r0, #1
 80039bc:	f005 fffc 	bl	80099b8 <MFX_IO_Delay>
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	6039      	str	r1, [r7, #0]
 80039d2:	80fb      	strh	r3, [r7, #6]
 80039d4:	4613      	mov	r3, r2
 80039d6:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 80039d8:	797b      	ldrb	r3, [r7, #5]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d006      	beq.n	80039ec <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 80039de:	88f8      	ldrh	r0, [r7, #6]
 80039e0:	2301      	movs	r3, #1
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	216c      	movs	r1, #108	; 0x6c
 80039e6:	f000 fb73 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 80039ea:	e005      	b.n	80039f8 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 80039ec:	88f8      	ldrh	r0, [r7, #6]
 80039ee:	2301      	movs	r3, #1
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	2170      	movs	r1, #112	; 0x70
 80039f4:	f000 fb6c 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	6039      	str	r1, [r7, #0]
 8003a0a:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d006      	beq.n	8003a2e <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	2110      	movs	r1, #16
 8003a24:	4618      	mov	r0, r3
 8003a26:	f005 ff99 	bl	800995c <MFX_IO_Read>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d006      	beq.n	8003a46 <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	2111      	movs	r1, #17
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f005 ff8d 	bl	800995c <MFX_IO_Read>
 8003a42:	4603      	mov	r3, r0
 8003a44:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d006      	beq.n	8003a5e <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	2112      	movs	r1, #18
 8003a54:	4618      	mov	r0, r3
 8003a56:	f005 ff81 	bl	800995c <MFX_IO_Read>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	021a      	lsls	r2, r3, #8
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	441a      	add	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	041b      	lsls	r3, r3, #16
 8003a6a:	4413      	add	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4013      	ands	r3, r2
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003a86:	f005 feef 	bl	8009868 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff fb92 	bl	80031b8 <mfxstm32l152_EnableITSource>
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fba3 	bl	80031f6 <mfxstm32l152_DisableITSource>
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	6039      	str	r1, [r7, #0]
 8003ac2:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8003ac4:	88f8      	ldrh	r0, [r7, #6]
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	2148      	movs	r1, #72	; 0x48
 8003acc:	f000 fb00 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	6039      	str	r1, [r7, #0]
 8003ae2:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8003ae4:	88f8      	ldrh	r0, [r7, #6]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	2148      	movs	r1, #72	; 0x48
 8003aec:	f000 faf0 	bl	80040d0 <mfxstm32l152_reg24_setPinValue>
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	6039      	str	r1, [r7, #0]
 8003b02:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d006      	beq.n	8003b26 <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	210c      	movs	r1, #12
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f005 ff1d 	bl	800995c <MFX_IO_Read>
 8003b22:	4603      	mov	r3, r0
 8003b24:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d006      	beq.n	8003b42 <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	210d      	movs	r1, #13
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f005 ff0f 	bl	800995c <MFX_IO_Read>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	0c1b      	lsrs	r3, r3, #16
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d006      	beq.n	8003b5a <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	210e      	movs	r1, #14
 8003b50:	4618      	mov	r0, r3
 8003b52:	f005 ff03 	bl	800995c <MFX_IO_Read>
 8003b56:	4603      	mov	r3, r0
 8003b58:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8003b5a:	7bfa      	ldrb	r2, [r7, #15]
 8003b5c:	89bb      	ldrh	r3, [r7, #12]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	4413      	add	r3, r2
 8003b62:	461a      	mov	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	041b      	lsls	r3, r3, #16
 8003b68:	4413      	add	r3, r2
 8003b6a:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	4013      	ands	r3, r2
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	4603      	mov	r3, r0
 8003b82:	6039      	str	r1, [r7, #0]
 8003b84:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	0a1b      	lsrs	r3, r3, #8
 8003b8e:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	0c1b      	lsrs	r3, r3, #16
 8003b94:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	2154      	movs	r1, #84	; 0x54
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f005 fec6 	bl	8009934 <MFX_IO_Write>
  }
  if (pin_8_15)
 8003ba8:	7bbb      	ldrb	r3, [r7, #14]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8003bae:	7bba      	ldrb	r2, [r7, #14]
 8003bb0:	88fb      	ldrh	r3, [r7, #6]
 8003bb2:	2155      	movs	r1, #85	; 0x55
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f005 febd 	bl	8009934 <MFX_IO_Write>
  }
  if (pin_16_23)
 8003bba:	7b7b      	ldrb	r3, [r7, #13]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8003bc0:	7b7a      	ldrb	r2, [r7, #13]
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	2156      	movs	r1, #86	; 0x56
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f005 feb4 	bl	8009934 <MFX_IO_Write>
  }
}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	4618      	mov	r0, r3
 8003bec:	f005 feb6 	bl	800995c <MFX_IO_Read>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	7bfa      	ldrb	r2, [r7, #15]
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	4618      	mov	r0, r3
 8003c08:	f005 fe94 	bl	8009934 <MFX_IO_Write>
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 8003c14:	b084      	sub	sp, #16
 8003c16:	b590      	push	{r4, r7, lr}
 8003c18:	b085      	sub	sp, #20
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	4604      	mov	r4, r0
 8003c1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003c26:	4623      	mov	r3, r4
 8003c28:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2140      	movs	r1, #64	; 0x40
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f005 fe8e 	bl	800995c <MFX_IO_Read>
 8003c40:	4603      	mov	r3, r0
 8003c42:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8003c44:	7bbb      	ldrb	r3, [r7, #14]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10b      	bne.n	8003c66 <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 8003c4e:	7bbb      	ldrb	r3, [r7, #14]
 8003c50:	f043 0304 	orr.w	r3, r3, #4
 8003c54:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	7bba      	ldrb	r2, [r7, #14]
 8003c5e:	2140      	movs	r1, #64	; 0x40
 8003c60:	4618      	mov	r0, r3
 8003c62:	f005 fe67 	bl	8009934 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8003c66:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f003 030e 	and.w	r3, r3, #14
 8003c72:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8003c74:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003c78:	b25b      	sxtb	r3, r3
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	b25a      	sxtb	r2, r3
 8003c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	b25b      	sxtb	r3, r3
 8003c88:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8003c8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c8e:	b25b      	sxtb	r3, r3
 8003c90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c94:	b25a      	sxtb	r2, r3
 8003c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	b25b      	sxtb	r3, r3
 8003c9e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	2180      	movs	r1, #128	; 0x80
 8003caa:	4618      	mov	r0, r3
 8003cac:	f005 fe42 	bl	8009934 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8003cb0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003cb4:	b25b      	sxtb	r3, r3
 8003cb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003cba:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8003cbc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003cc0:	b25b      	sxtb	r3, r3
 8003cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cc6:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	b25b      	sxtb	r3, r3
 8003ccc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	7bfa      	ldrb	r2, [r7, #15]
 8003cd6:	2181      	movs	r1, #129	; 0x81
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f005 fe2b 	bl	8009934 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8003cde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	7bfa      	ldrb	r2, [r7, #15]
 8003cee:	2182      	movs	r1, #130	; 0x82
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f005 fe1f 	bl	8009934 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8003cf6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cf8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	7bfa      	ldrb	r2, [r7, #15]
 8003d02:	2183      	movs	r1, #131	; 0x83
 8003d04:	4618      	mov	r0, r3
 8003d06:	f005 fe15 	bl	8009934 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8003d0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 8003d12:	88fb      	ldrh	r3, [r7, #6]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	7bfa      	ldrb	r2, [r7, #15]
 8003d1a:	2184      	movs	r1, #132	; 0x84
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f005 fe09 	bl	8009934 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 8003d22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d24:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	7bfa      	ldrb	r2, [r7, #15]
 8003d2e:	2185      	movs	r1, #133	; 0x85
 8003d30:	4618      	mov	r0, r3
 8003d32:	f005 fdff 	bl	8009934 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 8003d36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d38:	0a1b      	lsrs	r3, r3, #8
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	7bfa      	ldrb	r2, [r7, #15]
 8003d46:	2186      	movs	r1, #134	; 0x86
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f005 fdf3 	bl	8009934 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 8003d4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d50:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	7bfa      	ldrb	r2, [r7, #15]
 8003d5a:	2187      	movs	r1, #135	; 0x87
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f005 fde9 	bl	8009934 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8003d62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d64:	0a1b      	lsrs	r3, r3, #8
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	7bfa      	ldrb	r2, [r7, #15]
 8003d72:	2188      	movs	r1, #136	; 0x88
 8003d74:	4618      	mov	r0, r3
 8003d76:	f005 fddd 	bl	8009934 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 8003d7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d7c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	7bfa      	ldrb	r2, [r7, #15]
 8003d86:	2189      	movs	r1, #137	; 0x89
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f005 fdd3 	bl	8009934 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 8003d8e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003d90:	0a1b      	lsrs	r3, r3, #8
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	218a      	movs	r1, #138	; 0x8a
 8003da0:	4618      	mov	r0, r3
 8003da2:	f005 fdc7 	bl	8009934 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8003da6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003da8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	7bfa      	ldrb	r2, [r7, #15]
 8003db2:	218b      	movs	r1, #139	; 0x8b
 8003db4:	4618      	mov	r0, r3
 8003db6:	f005 fdbd 	bl	8009934 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8003dba:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003dbc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	7bfa      	ldrb	r2, [r7, #15]
 8003dc6:	2190      	movs	r1, #144	; 0x90
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f005 fdb3 	bl	8009934 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8003dce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003dd0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	7bfa      	ldrb	r2, [r7, #15]
 8003dda:	2191      	movs	r1, #145	; 0x91
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f005 fda9 	bl	8009934 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8003de2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003de4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	7bfa      	ldrb	r2, [r7, #15]
 8003dee:	2192      	movs	r1, #146	; 0x92
 8003df0:	4618      	mov	r0, r3
 8003df2:	f005 fd9f 	bl	8009934 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8003df6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003df8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	2193      	movs	r1, #147	; 0x93
 8003e04:	4618      	mov	r0, r3
 8003e06:	f005 fd95 	bl	8009934 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8003e0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003e0c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	7bfa      	ldrb	r2, [r7, #15]
 8003e16:	2194      	movs	r1, #148	; 0x94
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f005 fd8b 	bl	8009934 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8003e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e20:	0a1b      	lsrs	r3, r3, #8
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	7bfa      	ldrb	r2, [r7, #15]
 8003e2e:	218c      	movs	r1, #140	; 0x8c
 8003e30:	4618      	mov	r0, r3
 8003e32:	f005 fd7f 	bl	8009934 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 8003e36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e38:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	7bfa      	ldrb	r2, [r7, #15]
 8003e42:	218d      	movs	r1, #141	; 0x8d
 8003e44:	4618      	mov	r0, r3
 8003e46:	f005 fd75 	bl	8009934 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 8003e4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	7bfa      	ldrb	r2, [r7, #15]
 8003e5a:	218e      	movs	r1, #142	; 0x8e
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f005 fd69 	bl	8009934 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8003e62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e64:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	218f      	movs	r1, #143	; 0x8f
 8003e70:	4618      	mov	r0, r3
 8003e72:	f005 fd5f 	bl	8009934 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8003e76:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003e7a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	7bfa      	ldrb	r2, [r7, #15]
 8003e84:	2196      	movs	r1, #150	; 0x96
 8003e86:	4618      	mov	r0, r3
 8003e88:	f005 fd54 	bl	8009934 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8003e8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003e90:	b25b      	sxtb	r3, r3
 8003e92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e96:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8003e98:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003e9c:	b25b      	sxtb	r3, r3
 8003e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea2:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	b25b      	sxtb	r3, r3
 8003ea8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	7bfa      	ldrb	r2, [r7, #15]
 8003eb2:	2197      	movs	r1, #151	; 0x97
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f005 fd3d 	bl	8009934 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8003eba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003ebe:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	7bfa      	ldrb	r2, [r7, #15]
 8003ec8:	2198      	movs	r1, #152	; 0x98
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f005 fd32 	bl	8009934 <MFX_IO_Write>
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003eda:	b004      	add	sp, #16
 8003edc:	4770      	bx	lr

08003ede <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	6039      	str	r1, [r7, #0]
 8003ee8:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	b298      	uxth	r0, r3
 8003ef0:	f107 020c 	add.w	r2, r7, #12
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	2114      	movs	r1, #20
 8003ef8:	f005 fd44 	bl	8009984 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8003efc:	7b3b      	ldrb	r3, [r7, #12]
 8003efe:	041a      	lsls	r2, r3, #16
 8003f00:	7b7b      	ldrb	r3, [r7, #13]
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	4313      	orrs	r3, r2
 8003f06:	7bba      	ldrb	r2, [r7, #14]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	601a      	str	r2, [r3, #0]

}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003f22:	f005 fca1 	bl	8009868 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	2102      	movs	r1, #2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff f944 	bl	80031b8 <mfxstm32l152_EnableITSource>
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	2102      	movs	r1, #2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff f98f 	bl	800326a <mfxstm32l152_ClearGlobalIT>
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	2102      	movs	r1, #2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff f96b 	bl	800323e <mfxstm32l152_GlobalITStatus>
 8003f68:	4603      	mov	r3, r0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	4603      	mov	r3, r0
 8003f7a:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	2102      	movs	r1, #2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff f938 	bl	80031f6 <mfxstm32l152_DisableITSource>
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	4603      	mov	r3, r0
 8003f96:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2103      	movs	r1, #3
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f005 fcdb 	bl	800995c <MFX_IO_Read>
 8003fa6:	4603      	mov	r3, r0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2104      	movs	r1, #4
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f005 fcca 	bl	800995c <MFX_IO_Read>
 8003fc8:	4603      	mov	r3, r0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	4603      	mov	r3, r0
 8003fda:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003fdc:	f005 fc44 	bl	8009868 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	2104      	movs	r1, #4
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff f8e7 	bl	80031b8 <mfxstm32l152_EnableITSource>
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8003ffc:	88fb      	ldrh	r3, [r7, #6]
 8003ffe:	2104      	movs	r1, #4
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff f932 	bl	800326a <mfxstm32l152_ClearGlobalIT>
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	4603      	mov	r3, r0
 8004016:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	2104      	movs	r1, #4
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff f90e 	bl	800323e <mfxstm32l152_GlobalITStatus>
 8004022:	4603      	mov	r3, r0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	2104      	movs	r1, #4
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff f8db 	bl	80031f6 <mfxstm32l152_DisableITSource>
}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
 8004056:	e00b      	b.n	8004070 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <mfxstm32l152_GetInstance+0x3c>)
 800405c:	5cd3      	ldrb	r3, [r2, r3]
 800405e:	b29b      	uxth	r3, r3
 8004060:	88fa      	ldrh	r2, [r7, #6]
 8004062:	429a      	cmp	r2, r3
 8004064:	d101      	bne.n	800406a <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	e006      	b.n	8004078 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	3301      	adds	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d9f0      	bls.n	8004058 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8004076:	23ff      	movs	r3, #255	; 0xff
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	20000f9c 	.word	0x20000f9c

08004088 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]
 8004096:	e00f      	b.n	80040b8 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	4a0c      	ldr	r2, [pc, #48]	; (80040cc <mfxstm32l152_ReleaseInstance+0x44>)
 800409c:	5cd3      	ldrb	r3, [r2, r3]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	88fa      	ldrh	r2, [r7, #6]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d105      	bne.n	80040b2 <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	4a08      	ldr	r2, [pc, #32]	; (80040cc <mfxstm32l152_ReleaseInstance+0x44>)
 80040aa:	2100      	movs	r1, #0
 80040ac:	54d1      	strb	r1, [r2, r3]
      return idx;
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	e006      	b.n	80040c0 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	3301      	adds	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d9ec      	bls.n	8004098 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 80040be:	23ff      	movs	r3, #255	; 0xff
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	20000f9c 	.word	0x20000f9c

080040d0 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	603a      	str	r2, [r7, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	4603      	mov	r3, r0
 80040dc:	80fb      	strh	r3, [r7, #6]
 80040de:	460b      	mov	r3, r1
 80040e0:	717b      	strb	r3, [r7, #5]
 80040e2:	4613      	mov	r3, r2
 80040e4:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	0a1b      	lsrs	r3, r3, #8
 80040f2:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	0c1b      	lsrs	r3, r3, #16
 80040f8:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 80040fa:	7bbb      	ldrb	r3, [r7, #14]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01e      	beq.n	800413e <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8004100:	797a      	ldrb	r2, [r7, #5]
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f005 fc28 	bl	800995c <MFX_IO_Read>
 800410c:	4603      	mov	r3, r0
 800410e:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8004110:	793b      	ldrb	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 8004116:	7bfa      	ldrb	r2, [r7, #15]
 8004118:	7bbb      	ldrb	r3, [r7, #14]
 800411a:	4313      	orrs	r3, r2
 800411c:	73fb      	strb	r3, [r7, #15]
 800411e:	e008      	b.n	8004132 <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8004120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004124:	43db      	mvns	r3, r3
 8004126:	b25a      	sxtb	r2, r3
 8004128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800412c:	4013      	ands	r3, r2
 800412e:	b25b      	sxtb	r3, r3
 8004130:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 8004132:	7bfa      	ldrb	r2, [r7, #15]
 8004134:	7979      	ldrb	r1, [r7, #5]
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	4618      	mov	r0, r3
 800413a:	f005 fbfb 	bl	8009934 <MFX_IO_Write>
  }

  if (pin_8_15)
 800413e:	7b7b      	ldrb	r3, [r7, #13]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d022      	beq.n	800418a <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 8004144:	797b      	ldrb	r3, [r7, #5]
 8004146:	3301      	adds	r3, #1
 8004148:	b2da      	uxtb	r2, r3
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	4611      	mov	r1, r2
 800414e:	4618      	mov	r0, r3
 8004150:	f005 fc04 	bl	800995c <MFX_IO_Read>
 8004154:	4603      	mov	r3, r0
 8004156:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8004158:	793b      	ldrb	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d004      	beq.n	8004168 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 800415e:	7bfa      	ldrb	r2, [r7, #15]
 8004160:	7b7b      	ldrb	r3, [r7, #13]
 8004162:	4313      	orrs	r3, r2
 8004164:	73fb      	strb	r3, [r7, #15]
 8004166:	e008      	b.n	800417a <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8004168:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800416c:	43db      	mvns	r3, r3
 800416e:	b25a      	sxtb	r2, r3
 8004170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004174:	4013      	ands	r3, r2
 8004176:	b25b      	sxtb	r3, r3
 8004178:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 800417a:	797b      	ldrb	r3, [r7, #5]
 800417c:	3301      	adds	r3, #1
 800417e:	b2d9      	uxtb	r1, r3
 8004180:	7bfa      	ldrb	r2, [r7, #15]
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	4618      	mov	r0, r3
 8004186:	f005 fbd5 	bl	8009934 <MFX_IO_Write>
  }

  if (pin_16_23)
 800418a:	7b3b      	ldrb	r3, [r7, #12]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d022      	beq.n	80041d6 <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8004190:	797b      	ldrb	r3, [r7, #5]
 8004192:	3302      	adds	r3, #2
 8004194:	b2da      	uxtb	r2, r3
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f005 fbde 	bl	800995c <MFX_IO_Read>
 80041a0:	4603      	mov	r3, r0
 80041a2:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80041a4:	793b      	ldrb	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d004      	beq.n	80041b4 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	7b3b      	ldrb	r3, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	73fb      	strb	r3, [r7, #15]
 80041b2:	e008      	b.n	80041c6 <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 80041b4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80041b8:	43db      	mvns	r3, r3
 80041ba:	b25a      	sxtb	r2, r3
 80041bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c0:	4013      	ands	r3, r2
 80041c2:	b25b      	sxtb	r3, r3
 80041c4:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 80041c6:	797b      	ldrb	r3, [r7, #5]
 80041c8:	3302      	adds	r3, #2
 80041ca:	b2d9      	uxtb	r1, r3
 80041cc:	7bfa      	ldrb	r2, [r7, #15]
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f005 fbaf 	bl	8009934 <MFX_IO_Write>
  }
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80041e4:	f005 fcf0 	bl	8009bc8 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80041e8:	2200      	movs	r2, #0
 80041ea:	2100      	movs	r1, #0
 80041ec:	2010      	movs	r0, #16
 80041ee:	f000 f9e4 	bl	80045ba <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80041f2:	200a      	movs	r0, #10
 80041f4:	f005 fd0f 	bl	8009c16 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 80041f8:	2200      	movs	r2, #0
 80041fa:	2100      	movs	r1, #0
 80041fc:	2001      	movs	r0, #1
 80041fe:	f000 f9dc 	bl	80045ba <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8004202:	20c8      	movs	r0, #200	; 0xc8
 8004204:	f005 fd07 	bl	8009c16 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8004208:	2200      	movs	r2, #0
 800420a:	2100      	movs	r1, #0
 800420c:	2011      	movs	r0, #17
 800420e:	f000 f9d4 	bl	80045ba <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8004212:	2078      	movs	r0, #120	; 0x78
 8004214:	f005 fcff 	bl	8009c16 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8004218:	2300      	movs	r3, #0
 800421a:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 800421c:	463b      	mov	r3, r7
 800421e:	2201      	movs	r2, #1
 8004220:	4619      	mov	r1, r3
 8004222:	2036      	movs	r0, #54	; 0x36
 8004224:	f000 f9c9 	bl	80045ba <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8004228:	2305      	movs	r3, #5
 800422a:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 800422c:	463b      	mov	r3, r7
 800422e:	2201      	movs	r2, #1
 8004230:	4619      	mov	r1, r3
 8004232:	203a      	movs	r0, #58	; 0x3a
 8004234:	f000 f9c1 	bl	80045ba <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8004238:	2200      	movs	r2, #0
 800423a:	2100      	movs	r1, #0
 800423c:	2021      	movs	r0, #33	; 0x21
 800423e:	f000 f9bc 	bl	80045ba <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8004242:	2300      	movs	r3, #0
 8004244:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8004246:	2300      	movs	r3, #0
 8004248:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800424a:	2300      	movs	r3, #0
 800424c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800424e:	23ef      	movs	r3, #239	; 0xef
 8004250:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8004252:	463b      	mov	r3, r7
 8004254:	2204      	movs	r2, #4
 8004256:	4619      	mov	r1, r3
 8004258:	202a      	movs	r0, #42	; 0x2a
 800425a:	f000 f9ae 	bl	80045ba <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 800425e:	2300      	movs	r3, #0
 8004260:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8004262:	2300      	movs	r3, #0
 8004264:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8004266:	2300      	movs	r3, #0
 8004268:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800426a:	23ef      	movs	r3, #239	; 0xef
 800426c:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800426e:	463b      	mov	r3, r7
 8004270:	2204      	movs	r2, #4
 8004272:	4619      	mov	r1, r3
 8004274:	202b      	movs	r0, #43	; 0x2b
 8004276:	f000 f9a0 	bl	80045ba <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 800427a:	230c      	movs	r3, #12
 800427c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 800427e:	230c      	movs	r3, #12
 8004280:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8004282:	2300      	movs	r3, #0
 8004284:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8004286:	2333      	movs	r3, #51	; 0x33
 8004288:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 800428a:	2333      	movs	r3, #51	; 0x33
 800428c:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 800428e:	463b      	mov	r3, r7
 8004290:	2205      	movs	r2, #5
 8004292:	4619      	mov	r1, r3
 8004294:	20b2      	movs	r0, #178	; 0xb2
 8004296:	f000 f990 	bl	80045ba <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 800429a:	2335      	movs	r3, #53	; 0x35
 800429c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 800429e:	463b      	mov	r3, r7
 80042a0:	2201      	movs	r2, #1
 80042a2:	4619      	mov	r1, r3
 80042a4:	20b7      	movs	r0, #183	; 0xb7
 80042a6:	f000 f988 	bl	80045ba <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 80042aa:	231f      	movs	r3, #31
 80042ac:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 80042ae:	463b      	mov	r3, r7
 80042b0:	2201      	movs	r2, #1
 80042b2:	4619      	mov	r1, r3
 80042b4:	20bb      	movs	r0, #187	; 0xbb
 80042b6:	f000 f980 	bl	80045ba <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 80042ba:	232c      	movs	r3, #44	; 0x2c
 80042bc:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 80042be:	463b      	mov	r3, r7
 80042c0:	2201      	movs	r2, #1
 80042c2:	4619      	mov	r1, r3
 80042c4:	20c0      	movs	r0, #192	; 0xc0
 80042c6:	f000 f978 	bl	80045ba <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 80042ca:	2301      	movs	r3, #1
 80042cc:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 80042ce:	23c3      	movs	r3, #195	; 0xc3
 80042d0:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 80042d2:	463b      	mov	r3, r7
 80042d4:	2202      	movs	r2, #2
 80042d6:	4619      	mov	r1, r3
 80042d8:	20c2      	movs	r0, #194	; 0xc2
 80042da:	f000 f96e 	bl	80045ba <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 80042de:	2320      	movs	r3, #32
 80042e0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 80042e2:	463b      	mov	r3, r7
 80042e4:	2201      	movs	r2, #1
 80042e6:	4619      	mov	r1, r3
 80042e8:	20c4      	movs	r0, #196	; 0xc4
 80042ea:	f000 f966 	bl	80045ba <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 80042ee:	230f      	movs	r3, #15
 80042f0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 80042f2:	463b      	mov	r3, r7
 80042f4:	2201      	movs	r2, #1
 80042f6:	4619      	mov	r1, r3
 80042f8:	20c6      	movs	r0, #198	; 0xc6
 80042fa:	f000 f95e 	bl	80045ba <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 80042fe:	23a4      	movs	r3, #164	; 0xa4
 8004300:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8004302:	23a1      	movs	r3, #161	; 0xa1
 8004304:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 8004306:	463b      	mov	r3, r7
 8004308:	2202      	movs	r2, #2
 800430a:	4619      	mov	r1, r3
 800430c:	20d0      	movs	r0, #208	; 0xd0
 800430e:	f000 f954 	bl	80045ba <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8004312:	23d0      	movs	r3, #208	; 0xd0
 8004314:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8004316:	2308      	movs	r3, #8
 8004318:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 800431a:	2311      	movs	r3, #17
 800431c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 800431e:	2308      	movs	r3, #8
 8004320:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8004322:	230c      	movs	r3, #12
 8004324:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8004326:	2315      	movs	r3, #21
 8004328:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800432a:	2339      	movs	r3, #57	; 0x39
 800432c:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 800432e:	2333      	movs	r3, #51	; 0x33
 8004330:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8004332:	2350      	movs	r3, #80	; 0x50
 8004334:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8004336:	2336      	movs	r3, #54	; 0x36
 8004338:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 800433a:	2313      	movs	r3, #19
 800433c:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 800433e:	2314      	movs	r3, #20
 8004340:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8004342:	2329      	movs	r3, #41	; 0x29
 8004344:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8004346:	232d      	movs	r3, #45	; 0x2d
 8004348:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 800434a:	463b      	mov	r3, r7
 800434c:	220e      	movs	r2, #14
 800434e:	4619      	mov	r1, r3
 8004350:	20e0      	movs	r0, #224	; 0xe0
 8004352:	f000 f932 	bl	80045ba <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8004356:	23d0      	movs	r3, #208	; 0xd0
 8004358:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800435a:	2308      	movs	r3, #8
 800435c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 800435e:	2310      	movs	r3, #16
 8004360:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8004362:	2308      	movs	r3, #8
 8004364:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8004366:	2306      	movs	r3, #6
 8004368:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 800436a:	2306      	movs	r3, #6
 800436c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800436e:	2339      	movs	r3, #57	; 0x39
 8004370:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8004372:	2344      	movs	r3, #68	; 0x44
 8004374:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8004376:	2351      	movs	r3, #81	; 0x51
 8004378:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 800437a:	230b      	movs	r3, #11
 800437c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 800437e:	2316      	movs	r3, #22
 8004380:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8004382:	2314      	movs	r3, #20
 8004384:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8004386:	232f      	movs	r3, #47	; 0x2f
 8004388:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 800438a:	2331      	movs	r3, #49	; 0x31
 800438c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 800438e:	463b      	mov	r3, r7
 8004390:	220e      	movs	r2, #14
 8004392:	4619      	mov	r1, r3
 8004394:	20e1      	movs	r0, #225	; 0xe1
 8004396:	f000 f910 	bl	80045ba <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 800439a:	f000 f847 	bl	800442c <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 800439e:	2300      	movs	r3, #0
 80043a0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 80043a2:	463b      	mov	r3, r7
 80043a4:	2201      	movs	r2, #1
 80043a6:	4619      	mov	r1, r3
 80043a8:	2035      	movs	r0, #53	; 0x35
 80043aa:	f000 f906 	bl	80045ba <ST7789H2_WriteReg>

}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d102      	bne.n	80043ca <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 80043c4:	2300      	movs	r3, #0
 80043c6:	723b      	strb	r3, [r7, #8]
 80043c8:	e025      	b.n	8004416 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d120      	bne.n	8004412 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 80043d0:	2300      	movs	r3, #0
 80043d2:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 80043d4:	2300      	movs	r3, #0
 80043d6:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 80043d8:	2301      	movs	r3, #1
 80043da:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 80043dc:	23f0      	movs	r3, #240	; 0xf0
 80043de:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 80043e0:	2300      	movs	r3, #0
 80043e2:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 80043e4:	2300      	movs	r3, #0
 80043e6:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 80043e8:	f107 0308 	add.w	r3, r7, #8
 80043ec:	2206      	movs	r2, #6
 80043ee:	4619      	mov	r1, r3
 80043f0:	2033      	movs	r0, #51	; 0x33
 80043f2:	f000 f8e2 	bl	80045ba <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 80043f6:	2300      	movs	r3, #0
 80043f8:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 80043fa:	2350      	movs	r3, #80	; 0x50
 80043fc:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 80043fe:	f107 0308 	add.w	r3, r7, #8
 8004402:	2202      	movs	r2, #2
 8004404:	4619      	mov	r1, r3
 8004406:	2037      	movs	r0, #55	; 0x37
 8004408:	f000 f8d7 	bl	80045ba <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 800440c:	23c0      	movs	r3, #192	; 0xc0
 800440e:	723b      	strb	r3, [r7, #8]
 8004410:	e001      	b.n	8004416 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8004412:	2360      	movs	r3, #96	; 0x60
 8004414:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8004416:	f107 0308 	add.w	r3, r7, #8
 800441a:	2201      	movs	r2, #1
 800441c:	4619      	mov	r1, r3
 800441e:	2036      	movs	r0, #54	; 0x36
 8004420:	f000 f8cb 	bl	80045ba <ST7789H2_WriteReg>
}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8004430:	2200      	movs	r2, #0
 8004432:	2100      	movs	r1, #0
 8004434:	2029      	movs	r0, #41	; 0x29
 8004436:	f000 f8c0 	bl	80045ba <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 800443a:	2200      	movs	r2, #0
 800443c:	2100      	movs	r1, #0
 800443e:	2011      	movs	r0, #17
 8004440:	f000 f8bb 	bl	80045ba <ST7789H2_WriteReg>
}
 8004444:	bf00      	nop
 8004446:	bd80      	pop	{r7, pc}

08004448 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 800444e:	23fe      	movs	r3, #254	; 0xfe
 8004450:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8004452:	1d3b      	adds	r3, r7, #4
 8004454:	2201      	movs	r2, #1
 8004456:	4619      	mov	r1, r3
 8004458:	20bd      	movs	r0, #189	; 0xbd
 800445a:	f000 f8ae 	bl	80045ba <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 800445e:	2200      	movs	r2, #0
 8004460:	2100      	movs	r1, #0
 8004462:	2010      	movs	r0, #16
 8004464:	f000 f8a9 	bl	80045ba <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8004468:	200a      	movs	r0, #10
 800446a:	f005 fbd4 	bl	8009c16 <LCD_IO_Delay>
}
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8004476:	b480      	push	{r7}
 8004478:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 800447a:	23f0      	movs	r3, #240	; 0xf0
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8004486:	b480      	push	{r7}
 8004488:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 800448a:	23f0      	movs	r3, #240	; 0xf0
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800449a:	f005 fb95 	bl	8009bc8 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 800449e:	2004      	movs	r0, #4
 80044a0:	f000 f8ae 	bl	8004600 <ST7789H2_ReadReg>
 80044a4:	4603      	mov	r3, r0
 80044a6:	b29b      	uxth	r3, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	bd80      	pop	{r7, pc}

080044ac <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	460a      	mov	r2, r1
 80044b6:	80fb      	strh	r3, [r7, #6]
 80044b8:	4613      	mov	r3, r2
 80044ba:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 80044bc:	2300      	movs	r3, #0
 80044be:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 80044c0:	88fb      	ldrh	r3, [r7, #6]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80044c6:	2300      	movs	r3, #0
 80044c8:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	3b11      	subs	r3, #17
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80044d4:	f107 030c 	add.w	r3, r7, #12
 80044d8:	2204      	movs	r2, #4
 80044da:	4619      	mov	r1, r3
 80044dc:	202a      	movs	r0, #42	; 0x2a
 80044de:	f000 f86c 	bl	80045ba <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 80044e2:	2300      	movs	r3, #0
 80044e4:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 80044e6:	88bb      	ldrh	r3, [r7, #4]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80044ec:	2300      	movs	r3, #0
 80044ee:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 80044f0:	88bb      	ldrh	r3, [r7, #4]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	3b11      	subs	r3, #17
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80044fa:	f107 030c 	add.w	r3, r7, #12
 80044fe:	2204      	movs	r2, #4
 8004500:	4619      	mov	r1, r3
 8004502:	202b      	movs	r0, #43	; 0x2b
 8004504:	f000 f859 	bl	80045ba <ST7789H2_WriteReg>
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	80fb      	strh	r3, [r7, #6]
 800451a:	460b      	mov	r3, r1
 800451c:	80bb      	strh	r3, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004522:	88ba      	ldrh	r2, [r7, #4]
 8004524:	88fb      	ldrh	r3, [r7, #6]
 8004526:	4611      	mov	r1, r2
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff ffbf 	bl	80044ac <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800452e:	2200      	movs	r2, #0
 8004530:	2100      	movs	r1, #0
 8004532:	202c      	movs	r0, #44	; 0x2c
 8004534:	f000 f841 	bl	80045ba <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8004538:	887b      	ldrh	r3, [r7, #2]
 800453a:	4618      	mov	r0, r3
 800453c:	f005 fb4a 	bl	8009bd4 <LCD_IO_WriteData>
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	460a      	mov	r2, r1
 8004552:	80fb      	strh	r3, [r7, #6]
 8004554:	4613      	mov	r3, r2
 8004556:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004558:	88ba      	ldrh	r2, [r7, #4]
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	4611      	mov	r1, r2
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff ffa4 	bl	80044ac <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8004564:	88ba      	ldrh	r2, [r7, #4]
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	4611      	mov	r1, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f9c0 	bl	80048f0 <ST7789H2_ReadPixel_rgb888>
 8004570:	4603      	mov	r3, r0
 8004572:	461a      	mov	r2, r3
 8004574:	733a      	strb	r2, [r7, #12]
 8004576:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800457a:	737a      	strb	r2, [r7, #13]
 800457c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004580:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8004582:	7b3b      	ldrb	r3, [r7, #12]
 8004584:	08db      	lsrs	r3, r3, #3
 8004586:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8004588:	7b7b      	ldrb	r3, [r7, #13]
 800458a:	089b      	lsrs	r3, r3, #2
 800458c:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800458e:	7bbb      	ldrb	r3, [r7, #14]
 8004590:	08db      	lsrs	r3, r3, #3
 8004592:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	b29b      	uxth	r3, r3
 8004598:	02db      	lsls	r3, r3, #11
 800459a:	b29a      	uxth	r2, r3
 800459c:	7dbb      	ldrb	r3, [r7, #22]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	015b      	lsls	r3, r3, #5
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	4413      	add	r3, r2
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	7d7b      	ldrb	r3, [r7, #21]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	4413      	add	r3, r2
 80045ae:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 80045b0:	8a7b      	ldrh	r3, [r7, #18]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	4603      	mov	r3, r0
 80045c2:	6039      	str	r1, [r7, #0]
 80045c4:	71fb      	strb	r3, [r7, #7]
 80045c6:	4613      	mov	r3, r2
 80045c8:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f005 fb0e 	bl	8009bee <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 80045d2:	2300      	movs	r3, #0
 80045d4:	73fb      	strb	r3, [r7, #15]
 80045d6:	e00a      	b.n	80045ee <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	4413      	add	r3, r2
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	4618      	mov	r0, r3
 80045e4:	f005 faf6 	bl	8009bd4 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	3301      	adds	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
 80045ee:	7bfa      	ldrb	r2, [r7, #15]
 80045f0:	79bb      	ldrb	r3, [r7, #6]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d3f0      	bcc.n	80045d8 <ST7789H2_WriteReg+0x1e>
  }
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	4618      	mov	r0, r3
 800460e:	f005 faee 	bl	8009bee <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8004612:	f005 faf9 	bl	8009c08 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8004616:	f005 faf7 	bl	8009c08 <LCD_IO_ReadData>
 800461a:	4603      	mov	r3, r0
 800461c:	b2db      	uxtb	r3, r3
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004628:	b490      	push	{r4, r7}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	4604      	mov	r4, r0
 8004630:	4608      	mov	r0, r1
 8004632:	4611      	mov	r1, r2
 8004634:	461a      	mov	r2, r3
 8004636:	4623      	mov	r3, r4
 8004638:	80fb      	strh	r3, [r7, #6]
 800463a:	4603      	mov	r3, r0
 800463c:	80bb      	strh	r3, [r7, #4]
 800463e:	460b      	mov	r3, r1
 8004640:	807b      	strh	r3, [r7, #2]
 8004642:	4613      	mov	r3, r2
 8004644:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	2bef      	cmp	r3, #239	; 0xef
 800464a:	d803      	bhi.n	8004654 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 800464c:	4a1b      	ldr	r2, [pc, #108]	; (80046bc <ST7789H2_SetDisplayWindow+0x94>)
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	8013      	strh	r3, [r2, #0]
 8004652:	e002      	b.n	800465a <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8004654:	4b19      	ldr	r3, [pc, #100]	; (80046bc <ST7789H2_SetDisplayWindow+0x94>)
 8004656:	2200      	movs	r2, #0
 8004658:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 800465a:	88bb      	ldrh	r3, [r7, #4]
 800465c:	2bef      	cmp	r3, #239	; 0xef
 800465e:	d803      	bhi.n	8004668 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8004660:	4a17      	ldr	r2, [pc, #92]	; (80046c0 <ST7789H2_SetDisplayWindow+0x98>)
 8004662:	88bb      	ldrh	r3, [r7, #4]
 8004664:	8013      	strh	r3, [r2, #0]
 8004666:	e002      	b.n	800466e <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8004668:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <ST7789H2_SetDisplayWindow+0x98>)
 800466a:	2200      	movs	r2, #0
 800466c:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 800466e:	887a      	ldrh	r2, [r7, #2]
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	4413      	add	r3, r2
 8004674:	2bf0      	cmp	r3, #240	; 0xf0
 8004676:	dc08      	bgt.n	800468a <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8004678:	887a      	ldrh	r2, [r7, #2]
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	4413      	add	r3, r2
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <ST7789H2_SetDisplayWindow+0x9c>)
 8004686:	801a      	strh	r2, [r3, #0]
 8004688:	e002      	b.n	8004690 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 800468a:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <ST7789H2_SetDisplayWindow+0x9c>)
 800468c:	22ef      	movs	r2, #239	; 0xef
 800468e:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8004690:	883a      	ldrh	r2, [r7, #0]
 8004692:	88bb      	ldrh	r3, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	2bf0      	cmp	r3, #240	; 0xf0
 8004698:	dc08      	bgt.n	80046ac <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 800469a:	883a      	ldrh	r2, [r7, #0]
 800469c:	88bb      	ldrh	r3, [r7, #4]
 800469e:	4413      	add	r3, r2
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <ST7789H2_SetDisplayWindow+0xa0>)
 80046a8:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 80046aa:	e002      	b.n	80046b2 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <ST7789H2_SetDisplayWindow+0xa0>)
 80046ae:	22ef      	movs	r2, #239	; 0xef
 80046b0:	801a      	strh	r2, [r3, #0]
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc90      	pop	{r4, r7}
 80046ba:	4770      	bx	lr
 80046bc:	20000fa0 	.word	0x20000fa0
 80046c0:	20000fa2 	.word	0x20000fa2
 80046c4:	2000026c 	.word	0x2000026c
 80046c8:	2000026e 	.word	0x2000026e

080046cc <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80046cc:	b590      	push	{r4, r7, lr}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4604      	mov	r4, r0
 80046d4:	4608      	mov	r0, r1
 80046d6:	4611      	mov	r1, r2
 80046d8:	461a      	mov	r2, r3
 80046da:	4623      	mov	r3, r4
 80046dc:	80fb      	strh	r3, [r7, #6]
 80046de:	4603      	mov	r3, r0
 80046e0:	80bb      	strh	r3, [r7, #4]
 80046e2:	460b      	mov	r3, r1
 80046e4:	807b      	strh	r3, [r7, #2]
 80046e6:	4613      	mov	r3, r2
 80046e8:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 80046ea:	887a      	ldrh	r2, [r7, #2]
 80046ec:	88bb      	ldrh	r3, [r7, #4]
 80046ee:	4611      	mov	r1, r2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff fedb 	bl	80044ac <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80046f6:	2200      	movs	r2, #0
 80046f8:	2100      	movs	r1, #0
 80046fa:	202c      	movs	r0, #44	; 0x2c
 80046fc:	f7ff ff5d 	bl	80045ba <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8004700:	2300      	movs	r3, #0
 8004702:	81fb      	strh	r3, [r7, #14]
 8004704:	e006      	b.n	8004714 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	4618      	mov	r0, r3
 800470a:	f005 fa63 	bl	8009bd4 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 800470e:	89fb      	ldrh	r3, [r7, #14]
 8004710:	3301      	adds	r3, #1
 8004712:	81fb      	strh	r3, [r7, #14]
 8004714:	89fa      	ldrh	r2, [r7, #14]
 8004716:	883b      	ldrh	r3, [r7, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d3f4      	bcc.n	8004706 <ST7789H2_DrawHLine+0x3a>
  }  
}
 800471c:	bf00      	nop
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	bd90      	pop	{r4, r7, pc}

08004726 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004726:	b590      	push	{r4, r7, lr}
 8004728:	b085      	sub	sp, #20
 800472a:	af00      	add	r7, sp, #0
 800472c:	4604      	mov	r4, r0
 800472e:	4608      	mov	r0, r1
 8004730:	4611      	mov	r1, r2
 8004732:	461a      	mov	r2, r3
 8004734:	4623      	mov	r3, r4
 8004736:	80fb      	strh	r3, [r7, #6]
 8004738:	4603      	mov	r3, r0
 800473a:	80bb      	strh	r3, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	807b      	strh	r3, [r7, #2]
 8004740:	4613      	mov	r3, r2
 8004742:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004744:	887a      	ldrh	r2, [r7, #2]
 8004746:	88bb      	ldrh	r3, [r7, #4]
 8004748:	4611      	mov	r1, r2
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff feae 	bl	80044ac <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004750:	2200      	movs	r2, #0
 8004752:	2100      	movs	r1, #0
 8004754:	202c      	movs	r0, #44	; 0x2c
 8004756:	f7ff ff30 	bl	80045ba <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 800475a:	2300      	movs	r3, #0
 800475c:	81fb      	strh	r3, [r7, #14]
 800475e:	e00b      	b.n	8004778 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8004760:	887a      	ldrh	r2, [r7, #2]
 8004762:	89fb      	ldrh	r3, [r7, #14]
 8004764:	4413      	add	r3, r2
 8004766:	b299      	uxth	r1, r3
 8004768:	88fa      	ldrh	r2, [r7, #6]
 800476a:	88bb      	ldrh	r3, [r7, #4]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fecf 	bl	8004510 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8004772:	89fb      	ldrh	r3, [r7, #14]
 8004774:	3301      	adds	r3, #1
 8004776:	81fb      	strh	r3, [r7, #14]
 8004778:	89fa      	ldrh	r2, [r7, #14]
 800477a:	883b      	ldrh	r3, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d3ef      	bcc.n	8004760 <ST7789H2_DrawVLine+0x3a>
  }
}
 8004780:	bf00      	nop
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	bd90      	pop	{r4, r7, pc}
	...

0800478c <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	603a      	str	r2, [r7, #0]
 8004796:	80fb      	strh	r3, [r7, #6]
 8004798:	460b      	mov	r3, r1
 800479a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 80047a8:	4b30      	ldr	r3, [pc, #192]	; (800486c <ST7789H2_DrawBitmap+0xe0>)
 80047aa:	881a      	ldrh	r2, [r3, #0]
 80047ac:	4b30      	ldr	r3, [pc, #192]	; (8004870 <ST7789H2_DrawBitmap+0xe4>)
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3301      	adds	r3, #1
 80047b6:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 80047b8:	4b2e      	ldr	r3, [pc, #184]	; (8004874 <ST7789H2_DrawBitmap+0xe8>)
 80047ba:	881a      	ldrh	r2, [r3, #0]
 80047bc:	4b2e      	ldr	r3, [pc, #184]	; (8004878 <ST7789H2_DrawBitmap+0xec>)
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3301      	adds	r3, #1
 80047c6:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	3302      	adds	r3, #2
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	3304      	adds	r3, #4
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	041b      	lsls	r3, r3, #16
 80047dc:	461a      	mov	r2, r3
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	330a      	adds	r3, #10
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	330c      	adds	r3, #12
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	041b      	lsls	r3, r3, #16
 80047f8:	461a      	mov	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	613b      	str	r3, [r7, #16]
  pbmp += index;
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	4413      	add	r3, r2
 8004810:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8004812:	88ba      	ldrh	r2, [r7, #4]
 8004814:	89bb      	ldrh	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	e01d      	b.n	8004858 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	4611      	mov	r1, r2
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fe3f 	bl	80044ac <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b299      	uxth	r1, r3
 8004836:	89fb      	ldrh	r3, [r7, #14]
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	fb02 f303 	mul.w	r3, r2, r3
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	4413      	add	r3, r2
 8004844:	89fa      	ldrh	r2, [r7, #14]
 8004846:	88f8      	ldrh	r0, [r7, #6]
 8004848:	f000 f89c 	bl	8004984 <ST7789H2_DrawRGBHLine>
    nb_line++;
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	3301      	adds	r3, #1
 8004850:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3b01      	subs	r3, #1
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	88bb      	ldrh	r3, [r7, #4]
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	429a      	cmp	r2, r3
 800485e:	d8dd      	bhi.n	800481c <ST7789H2_DrawBitmap+0x90>
  }
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	3720      	adds	r7, #32
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	2000026c 	.word	0x2000026c
 8004870:	20000fa0 	.word	0x20000fa0
 8004874:	2000026e 	.word	0x2000026e
 8004878:	20000fa2 	.word	0x20000fa2

0800487c <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 800487c:	b590      	push	{r4, r7, lr}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	4604      	mov	r4, r0
 8004884:	4608      	mov	r0, r1
 8004886:	4611      	mov	r1, r2
 8004888:	461a      	mov	r2, r3
 800488a:	4623      	mov	r3, r4
 800488c:	80fb      	strh	r3, [r7, #6]
 800488e:	4603      	mov	r3, r0
 8004890:	80bb      	strh	r3, [r7, #4]
 8004892:	460b      	mov	r3, r1
 8004894:	807b      	strh	r3, [r7, #2]
 8004896:	4613      	mov	r3, r2
 8004898:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800489e:	88bb      	ldrh	r3, [r7, #4]
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	e019      	b.n	80048d8 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff fdfd 	bl	80044ac <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	b299      	uxth	r1, r3
 80048b6:	887b      	ldrh	r3, [r7, #2]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	fb02 f303 	mul.w	r3, r2, r3
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	6a3a      	ldr	r2, [r7, #32]
 80048c2:	4413      	add	r3, r2
 80048c4:	887a      	ldrh	r2, [r7, #2]
 80048c6:	88f8      	ldrh	r0, [r7, #6]
 80048c8:	f000 f85c 	bl	8004984 <ST7789H2_DrawRGBHLine>
    nb_line++;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3301      	adds	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	88ba      	ldrh	r2, [r7, #4]
 80048da:	883b      	ldrh	r3, [r7, #0]
 80048dc:	4413      	add	r3, r2
 80048de:	461a      	mov	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d3de      	bcc.n	80048a4 <ST7789H2_DrawRGBImage+0x28>
  }
}
 80048e6:	bf00      	nop
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd90      	pop	{r4, r7, pc}

080048f0 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	460a      	mov	r2, r1
 80048fa:	80fb      	strh	r3, [r7, #6]
 80048fc:	4613      	mov	r3, r2
 80048fe:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004900:	88ba      	ldrh	r2, [r7, #4]
 8004902:	88fb      	ldrh	r3, [r7, #6]
 8004904:	4611      	mov	r1, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fdd0 	bl	80044ac <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 800490c:	2200      	movs	r2, #0
 800490e:	2100      	movs	r1, #0
 8004910:	202e      	movs	r0, #46	; 0x2e
 8004912:	f7ff fe52 	bl	80045ba <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8004916:	f005 f977 	bl	8009c08 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 800491a:	f005 f975 	bl	8009c08 <LCD_IO_ReadData>
 800491e:	4603      	mov	r3, r0
 8004920:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8004922:	f005 f971 	bl	8009c08 <LCD_IO_ReadData>
 8004926:	4603      	mov	r3, r0
 8004928:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 800492a:	8afb      	ldrh	r3, [r7, #22]
 800492c:	121b      	asrs	r3, r3, #8
 800492e:	b2db      	uxtb	r3, r3
 8004930:	f023 0303 	bic.w	r3, r3, #3
 8004934:	b2db      	uxtb	r3, r3
 8004936:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8004938:	8afb      	ldrh	r3, [r7, #22]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f023 0303 	bic.w	r3, r3, #3
 8004940:	b2db      	uxtb	r3, r3
 8004942:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8004944:	8abb      	ldrh	r3, [r7, #20]
 8004946:	121b      	asrs	r3, r3, #8
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f023 0303 	bic.w	r3, r3, #3
 800494e:	b2db      	uxtb	r3, r3
 8004950:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8004952:	f107 0310 	add.w	r3, r7, #16
 8004956:	f107 020c 	add.w	r2, r7, #12
 800495a:	6812      	ldr	r2, [r2, #0]
 800495c:	4611      	mov	r1, r2
 800495e:	8019      	strh	r1, [r3, #0]
 8004960:	3302      	adds	r3, #2
 8004962:	0c12      	lsrs	r2, r2, #16
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	2300      	movs	r3, #0
 8004968:	7c3a      	ldrb	r2, [r7, #16]
 800496a:	f362 0307 	bfi	r3, r2, #0, #8
 800496e:	7c7a      	ldrb	r2, [r7, #17]
 8004970:	f362 230f 	bfi	r3, r2, #8, #8
 8004974:	7cba      	ldrb	r2, [r7, #18]
 8004976:	f362 4317 	bfi	r3, r2, #16, #8
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	4603      	mov	r3, r0
 800498e:	81fb      	strh	r3, [r7, #14]
 8004990:	460b      	mov	r3, r1
 8004992:	81bb      	strh	r3, [r7, #12]
 8004994:	4613      	mov	r3, r2
 8004996:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80049a0:	2200      	movs	r2, #0
 80049a2:	2100      	movs	r1, #0
 80049a4:	202c      	movs	r0, #44	; 0x2c
 80049a6:	f7ff fe08 	bl	80045ba <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80049aa:	89fb      	ldrh	r3, [r7, #14]
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	e029      	b.n	8004a04 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80049b0:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <ST7789H2_DrawRGBHLine+0x98>)
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d320      	bcc.n	80049fe <ST7789H2_DrawRGBHLine+0x7a>
 80049bc:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <ST7789H2_DrawRGBHLine+0x9c>)
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	89ba      	ldrh	r2, [r7, #12]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d31b      	bcc.n	80049fe <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80049c6:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <ST7789H2_DrawRGBHLine+0xa0>)
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d815      	bhi.n	80049fe <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80049d2:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <ST7789H2_DrawRGBHLine+0xa4>)
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	89ba      	ldrh	r2, [r7, #12]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d810      	bhi.n	80049fe <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 80049dc:	897a      	ldrh	r2, [r7, #10]
 80049de:	89fb      	ldrh	r3, [r7, #14]
 80049e0:	441a      	add	r2, r3
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d007      	beq.n	80049f8 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4413      	add	r3, r2
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f005 f8ee 	bl	8009bd4 <LCD_IO_WriteData>
      }      
      i++;
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	3301      	adds	r3, #1
 80049fc:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	3301      	adds	r3, #1
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	897a      	ldrh	r2, [r7, #10]
 8004a06:	89fb      	ldrh	r3, [r7, #14]
 8004a08:	4413      	add	r3, r2
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d3ce      	bcc.n	80049b0 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	20000fa0 	.word	0x20000fa0
 8004a20:	20000fa2 	.word	0x20000fa2
 8004a24:	2000026c 	.word	0x2000026c
 8004a28:	2000026e 	.word	0x2000026e

08004a2c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004a3a:	6839      	ldr	r1, [r7, #0]
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f001 fcc0 	bl	80063c2 <VL53L0X_get_offset_calibration_data_micro_meter>
 8004a42:	4603      	mov	r3, r0
 8004a44:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004a54:	b5b0      	push	{r4, r5, r7, lr}
 8004a56:	b096      	sub	sp, #88	; 0x58
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004a62:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d107      	bne.n	8004a7a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2188      	movs	r1, #136	; 0x88
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fe f84c 	bl	8002b0c <VL53L0X_WrByte>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a88:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004a92:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a9e      	ldr	r2, [pc, #632]	; (8004d14 <VL53L0X_DataInit+0x2c0>)
 8004a9a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a9d      	ldr	r2, [pc, #628]	; (8004d18 <VL53L0X_DataInit+0x2c4>)
 8004aa2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004aac:	f107 0310 	add.w	r3, r7, #16
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fab4 	bl	8005020 <VL53L0X_GetDeviceParameters>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8004abe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d112      	bne.n	8004aec <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004aca:	2300      	movs	r3, #0
 8004acc:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f103 0410 	add.w	r4, r3, #16
 8004ad4:	f107 0510 	add.w	r5, r7, #16
 8004ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ae4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004ae8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2264      	movs	r2, #100	; 0x64
 8004af0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004afa:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004b04:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004b0e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	2180      	movs	r1, #128	; 0x80
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fd fff4 	bl	8002b0c <VL53L0X_WrByte>
 8004b24:	4603      	mov	r3, r0
 8004b26:	461a      	mov	r2, r3
 8004b28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004b32:	2201      	movs	r2, #1
 8004b34:	21ff      	movs	r1, #255	; 0xff
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fd ffe8 	bl	8002b0c <VL53L0X_WrByte>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fd ffdc 	bl	8002b0c <VL53L0X_WrByte>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461a      	mov	r2, r3
 8004b58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004b62:	f107 030f 	add.w	r3, r7, #15
 8004b66:	461a      	mov	r2, r3
 8004b68:	2191      	movs	r1, #145	; 0x91
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fe f882 	bl	8002c74 <VL53L0X_RdByte>
 8004b70:	4603      	mov	r3, r0
 8004b72:	461a      	mov	r2, r3
 8004b74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004b7e:	7bfa      	ldrb	r2, [r7, #15]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004b86:	2201      	movs	r2, #1
 8004b88:	2100      	movs	r1, #0
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fd ffbe 	bl	8002b0c <VL53L0X_WrByte>
 8004b90:	4603      	mov	r3, r0
 8004b92:	461a      	mov	r2, r3
 8004b94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	21ff      	movs	r1, #255	; 0xff
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fd ffb2 	bl	8002b0c <VL53L0X_WrByte>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	461a      	mov	r2, r3
 8004bac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2180      	movs	r1, #128	; 0x80
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fd ffa6 	bl	8002b0c <VL53L0X_WrByte>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004bce:	2300      	movs	r3, #0
 8004bd0:	653b      	str	r3, [r7, #80]	; 0x50
 8004bd2:	e014      	b.n	8004bfe <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8004bd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d114      	bne.n	8004c06 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2201      	movs	r2, #1
 8004be2:	4619      	mov	r1, r3
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fd43 	bl	8005670 <VL53L0X_SetLimitCheckEnable>
 8004bea:	4603      	mov	r3, r0
 8004bec:	461a      	mov	r2, r3
 8004bee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	653b      	str	r3, [r7, #80]	; 0x50
 8004bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c00:	2b05      	cmp	r3, #5
 8004c02:	dde7      	ble.n	8004bd4 <VL53L0X_DataInit+0x180>
 8004c04:	e000      	b.n	8004c08 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8004c06:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004c08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d107      	bne.n	8004c20 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c10:	2200      	movs	r2, #0
 8004c12:	2102      	movs	r1, #2
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fd2b 	bl	8005670 <VL53L0X_SetLimitCheckEnable>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004c20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d107      	bne.n	8004c38 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2103      	movs	r1, #3
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fd1f 	bl	8005670 <VL53L0X_SetLimitCheckEnable>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004c38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d107      	bne.n	8004c50 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c40:	2200      	movs	r2, #0
 8004c42:	2104      	movs	r1, #4
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fd13 	bl	8005670 <VL53L0X_SetLimitCheckEnable>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004c50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d107      	bne.n	8004c68 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2105      	movs	r1, #5
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fd07 	bl	8005670 <VL53L0X_SetLimitCheckEnable>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004c68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d108      	bne.n	8004c82 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004c70:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004c74:	2100      	movs	r1, #0
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fdaa 	bl	80057d0 <VL53L0X_SetLimitCheckValue>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004c82:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d108      	bne.n	8004c9c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c8e:	2101      	movs	r1, #1
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fd9d 	bl	80057d0 <VL53L0X_SetLimitCheckValue>
 8004c96:	4603      	mov	r3, r0
 8004c98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004c9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d108      	bne.n	8004cb6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004ca4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004ca8:	2102      	movs	r1, #2
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fd90 	bl	80057d0 <VL53L0X_SetLimitCheckValue>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004cb6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d107      	bne.n	8004cce <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2103      	movs	r1, #3
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fd84 	bl	80057d0 <VL53L0X_SetLimitCheckValue>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004cce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10f      	bne.n	8004cf6 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	22ff      	movs	r2, #255	; 0xff
 8004cda:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004cde:	22ff      	movs	r2, #255	; 0xff
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fd ff12 	bl	8002b0c <VL53L0X_WrByte>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004cf6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d103      	bne.n	8004d06 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8004d06:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3758      	adds	r7, #88	; 0x58
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bdb0      	pop	{r4, r5, r7, pc}
 8004d12:	bf00      	nop
 8004d14:	00016b85 	.word	0x00016b85
 8004d18:	000970a4 	.word	0x000970a4

08004d1c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8004d1c:	b5b0      	push	{r4, r5, r7, lr}
 8004d1e:	b09e      	sub	sp, #120	; 0x78
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d24:	2300      	movs	r3, #0
 8004d26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8004d2a:	f107 031c 	add.w	r3, r7, #28
 8004d2e:	2240      	movs	r2, #64	; 0x40
 8004d30:	2100      	movs	r1, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f013 fe92 	bl	8018a5c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8004d52:	2300      	movs	r3, #0
 8004d54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004d58:	2101      	movs	r1, #1
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f002 fa74 	bl	8007248 <VL53L0X_get_info_from_device>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004d6c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8004d74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004d78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d80d      	bhi.n	8004d9c <VL53L0X_StaticInit+0x80>
 8004d80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d102      	bne.n	8004d8e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004d88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d806      	bhi.n	8004d9c <VL53L0X_StaticInit+0x80>
 8004d8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10e      	bne.n	8004db4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8004d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d98:	2b0c      	cmp	r3, #12
 8004d9a:	d90b      	bls.n	8004db4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004d9c:	f107 0218 	add.w	r2, r7, #24
 8004da0:	f107 0314 	add.w	r3, r7, #20
 8004da4:	4619      	mov	r1, r3
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f001 fd06 	bl	80067b8 <VL53L0X_perform_ref_spad_management>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004db2:	e009      	b.n	8004dc8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8004db4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004db8:	461a      	mov	r2, r3
 8004dba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f001 ff07 	bl	8006bd0 <VL53L0X_set_reference_spads>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004dc8:	4b94      	ldr	r3, [pc, #592]	; (800501c <VL53L0X_StaticInit+0x300>)
 8004dca:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8004dcc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10f      	bne.n	8004df4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004dda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004dde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004dec:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dee:	e001      	b.n	8004df4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8004df0:	4b8a      	ldr	r3, [pc, #552]	; (800501c <VL53L0X_StaticInit+0x300>)
 8004df2:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004df4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8004dfc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f003 fb40 	bl	8008484 <VL53L0X_load_tuning_settings>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8004e0a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8004e12:	2300      	movs	r3, #0
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	2304      	movs	r3, #4
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f001 f8ff 	bl	8006020 <VL53L0X_SetGpioConfig>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e28:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d121      	bne.n	8004e74 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004e30:	2201      	movs	r2, #1
 8004e32:	21ff      	movs	r1, #255	; 0xff
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7fd fe69 	bl	8002b0c <VL53L0X_WrByte>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8004e40:	f107 031a 	add.w	r3, r7, #26
 8004e44:	461a      	mov	r2, r3
 8004e46:	2184      	movs	r1, #132	; 0x84
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7fd ff3d 	bl	8002cc8 <VL53L0X_RdWord>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	461a      	mov	r2, r3
 8004e52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	21ff      	movs	r1, #255	; 0xff
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7fd fe53 	bl	8002b0c <VL53L0X_WrByte>
 8004e66:	4603      	mov	r3, r0
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e74:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d105      	bne.n	8004e88 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004e7c:	8b7b      	ldrh	r3, [r7, #26]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	461a      	mov	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8004e88:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004e90:	f107 031c 	add.w	r3, r7, #28
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f8c2 	bl	8005020 <VL53L0X_GetDeviceParameters>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8004ea2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d110      	bne.n	8004ecc <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004eaa:	f107 0319 	add.w	r3, r7, #25
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f984 	bl	80051be <VL53L0X_GetFractionEnable>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8004ebc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d103      	bne.n	8004ecc <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8004ec4:	7e7a      	ldrb	r2, [r7, #25]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004ecc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10e      	bne.n	8004ef2 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f103 0410 	add.w	r4, r3, #16
 8004eda:	f107 051c 	add.w	r5, r7, #28
 8004ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004eee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8004ef2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d111      	bne.n	8004f1e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8004efa:	f107 0319 	add.w	r3, r7, #25
 8004efe:	461a      	mov	r2, r3
 8004f00:	2101      	movs	r1, #1
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fd feb6 	bl	8002c74 <VL53L0X_RdByte>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8004f0e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d103      	bne.n	8004f1e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8004f16:	7e7a      	ldrb	r2, [r7, #25]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8004f1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d107      	bne.n	8004f36 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004f26:	2200      	movs	r2, #0
 8004f28:	2100      	movs	r1, #0
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f9a4 	bl	8005278 <VL53L0X_SetSequenceStepEnable>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004f36:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d107      	bne.n	8004f4e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2102      	movs	r1, #2
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f998 	bl	8005278 <VL53L0X_SetSequenceStepEnable>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8004f4e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2203      	movs	r2, #3
 8004f5a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004f5e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004f66:	f107 0313 	add.w	r3, r7, #19
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f96a 	bl	8005248 <VL53L0X_GetVcselPulsePeriod>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004f7a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d103      	bne.n	8004f8a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004f82:	7cfa      	ldrb	r2, [r7, #19]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004f8a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004f92:	f107 0313 	add.w	r3, r7, #19
 8004f96:	461a      	mov	r2, r3
 8004f98:	2101      	movs	r1, #1
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f954 	bl	8005248 <VL53L0X_GetVcselPulsePeriod>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004fa6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004fae:	7cfa      	ldrb	r2, [r7, #19]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004fb6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8004fbe:	f107 030c 	add.w	r3, r7, #12
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	2103      	movs	r1, #3
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f002 fec0 	bl	8007d4c <get_sequence_step_timeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004fd2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004fe2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8004fea:	f107 030c 	add.w	r3, r7, #12
 8004fee:	461a      	mov	r2, r3
 8004ff0:	2104      	movs	r1, #4
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f002 feaa 	bl	8007d4c <get_sequence_step_timeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004ffe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005002:	2b00      	cmp	r3, #0
 8005004:	d103      	bne.n	800500e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800500e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8005012:	4618      	mov	r0, r3
 8005014:	3770      	adds	r7, #112	; 0x70
 8005016:	46bd      	mov	sp, r7
 8005018:	bdb0      	pop	{r4, r5, r7, pc}
 800501a:	bf00      	nop
 800501c:	20000270 	.word	0x20000270

08005020 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800502a:	2300      	movs	r3, #0
 800502c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	4619      	mov	r1, r3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f8b0 	bl	8005198 <VL53L0X_GetDeviceMode>
 8005038:	4603      	mov	r3, r0
 800503a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800503c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d107      	bne.n	8005054 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	3308      	adds	r3, #8
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fa94 	bl	8005578 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8005050:	4603      	mov	r3, r0
 8005052:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8005054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d102      	bne.n	8005062 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2200      	movs	r2, #0
 8005060:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8005062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d107      	bne.n	800507a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	3310      	adds	r3, #16
 800506e:	4619      	mov	r1, r3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 faca 	bl	800560a <VL53L0X_GetXTalkCompensationRateMegaCps>
 8005076:	4603      	mov	r3, r0
 8005078:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800507a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d107      	bne.n	8005092 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	3314      	adds	r3, #20
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff fccf 	bl	8004a2c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800508e:	4603      	mov	r3, r0
 8005090:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8005092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d134      	bne.n	8005104 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	e02a      	b.n	80050f6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80050a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d12a      	bne.n	80050fe <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	b299      	uxth	r1, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	3308      	adds	r3, #8
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	4413      	add	r3, r2
 80050b6:	3304      	adds	r3, #4
 80050b8:	461a      	mov	r2, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fbea 	bl	8005894 <VL53L0X_GetLimitCheckValue>
 80050c0:	4603      	mov	r3, r0
 80050c2:	461a      	mov	r2, r3
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80050ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d117      	bne.n	8005102 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	b299      	uxth	r1, r3
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	3318      	adds	r3, #24
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	4413      	add	r3, r2
 80050de:	461a      	mov	r2, r3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fb51 	bl	8005788 <VL53L0X_GetLimitCheckEnable>
 80050e6:	4603      	mov	r3, r0
 80050e8:	461a      	mov	r2, r3
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	3301      	adds	r3, #1
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	ddd1      	ble.n	80050a0 <VL53L0X_GetDeviceParameters+0x80>
 80050fc:	e002      	b.n	8005104 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80050fe:	bf00      	nop
 8005100:	e000      	b.n	8005104 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8005102:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d107      	bne.n	800511c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	333c      	adds	r3, #60	; 0x3c
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fc4c 	bl	80059b0 <VL53L0X_GetWrapAroundCheckEnable>
 8005118:	4603      	mov	r3, r0
 800511a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800511c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d107      	bne.n	8005134 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	3304      	adds	r3, #4
 8005128:	4619      	mov	r1, r3
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f879 	bl	8005222 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8005130:	4603      	mov	r3, r0
 8005132:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005134:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	460b      	mov	r3, r1
 800514a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800514c:	2300      	movs	r3, #0
 800514e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	2b15      	cmp	r3, #21
 8005154:	bf8c      	ite	hi
 8005156:	2201      	movhi	r2, #1
 8005158:	2200      	movls	r2, #0
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	2a00      	cmp	r2, #0
 800515e:	d10e      	bne.n	800517e <VL53L0X_SetDeviceMode+0x3e>
 8005160:	2201      	movs	r2, #1
 8005162:	409a      	lsls	r2, r3
 8005164:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <VL53L0X_SetDeviceMode+0x54>)
 8005166:	4013      	ands	r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	bf14      	ite	ne
 800516c:	2301      	movne	r3, #1
 800516e:	2300      	moveq	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	78fa      	ldrb	r2, [r7, #3]
 800517a:	741a      	strb	r2, [r3, #16]
		break;
 800517c:	e001      	b.n	8005182 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800517e:	23f8      	movs	r3, #248	; 0xf8
 8005180:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005182:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	0030000b 	.word	0x0030000b

08005198 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	7c1a      	ldrb	r2, [r3, #16]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80051ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b084      	sub	sp, #16
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	2109      	movs	r1, #9
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7fd fd4f 	bl	8002c74 <VL53L0X_RdByte>
 80051d6:	4603      	mov	r3, r0
 80051d8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80051da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80051f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f002 ffa7 	bl	8008160 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8005212:	4603      	mov	r3, r0
 8005214:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8005216:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800522c:	2300      	movs	r3, #0
 800522e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f003 f874 	bl	8008320 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8005238:	4603      	mov	r3, r0
 800523a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800523c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	460b      	mov	r3, r1
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800525a:	7afb      	ldrb	r3, [r7, #11]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	4619      	mov	r1, r3
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f002 ff46 	bl	80080f2 <VL53L0X_get_vcsel_pulse_period>
 8005266:	4603      	mov	r3, r0
 8005268:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800526a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	70fb      	strb	r3, [r7, #3]
 8005284:	4613      	mov	r3, r2
 8005286:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005288:	2300      	movs	r3, #0
 800528a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8005290:	2300      	movs	r3, #0
 8005292:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005294:	f107 030f 	add.w	r3, r7, #15
 8005298:	461a      	mov	r2, r3
 800529a:	2101      	movs	r1, #1
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7fd fce9 	bl	8002c74 <VL53L0X_RdByte>
 80052a2:	4603      	mov	r3, r0
 80052a4:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80052aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d15a      	bne.n	8005368 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80052b2:	78bb      	ldrb	r3, [r7, #2]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d12b      	bne.n	8005310 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d825      	bhi.n	800530a <VL53L0X_SetSequenceStepEnable+0x92>
 80052be:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80052c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c4:	080052d9 	.word	0x080052d9
 80052c8:	080052e3 	.word	0x080052e3
 80052cc:	080052ed 	.word	0x080052ed
 80052d0:	080052f7 	.word	0x080052f7
 80052d4:	08005301 	.word	0x08005301
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80052d8:	7dbb      	ldrb	r3, [r7, #22]
 80052da:	f043 0310 	orr.w	r3, r3, #16
 80052de:	75bb      	strb	r3, [r7, #22]
				break;
 80052e0:	e043      	b.n	800536a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80052e2:	7dbb      	ldrb	r3, [r7, #22]
 80052e4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80052e8:	75bb      	strb	r3, [r7, #22]
				break;
 80052ea:	e03e      	b.n	800536a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80052ec:	7dbb      	ldrb	r3, [r7, #22]
 80052ee:	f043 0304 	orr.w	r3, r3, #4
 80052f2:	75bb      	strb	r3, [r7, #22]
				break;
 80052f4:	e039      	b.n	800536a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80052f6:	7dbb      	ldrb	r3, [r7, #22]
 80052f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052fc:	75bb      	strb	r3, [r7, #22]
				break;
 80052fe:	e034      	b.n	800536a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8005300:	7dbb      	ldrb	r3, [r7, #22]
 8005302:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005306:	75bb      	strb	r3, [r7, #22]
				break;
 8005308:	e02f      	b.n	800536a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800530a:	23fc      	movs	r3, #252	; 0xfc
 800530c:	75fb      	strb	r3, [r7, #23]
 800530e:	e02c      	b.n	800536a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	2b04      	cmp	r3, #4
 8005314:	d825      	bhi.n	8005362 <VL53L0X_SetSequenceStepEnable+0xea>
 8005316:	a201      	add	r2, pc, #4	; (adr r2, 800531c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531c:	08005331 	.word	0x08005331
 8005320:	0800533b 	.word	0x0800533b
 8005324:	08005345 	.word	0x08005345
 8005328:	0800534f 	.word	0x0800534f
 800532c:	08005359 	.word	0x08005359
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8005330:	7dbb      	ldrb	r3, [r7, #22]
 8005332:	f023 0310 	bic.w	r3, r3, #16
 8005336:	75bb      	strb	r3, [r7, #22]
				break;
 8005338:	e017      	b.n	800536a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800533a:	7dbb      	ldrb	r3, [r7, #22]
 800533c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005340:	75bb      	strb	r3, [r7, #22]
				break;
 8005342:	e012      	b.n	800536a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8005344:	7dbb      	ldrb	r3, [r7, #22]
 8005346:	f023 0304 	bic.w	r3, r3, #4
 800534a:	75bb      	strb	r3, [r7, #22]
				break;
 800534c:	e00d      	b.n	800536a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800534e:	7dbb      	ldrb	r3, [r7, #22]
 8005350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005354:	75bb      	strb	r3, [r7, #22]
				break;
 8005356:	e008      	b.n	800536a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8005358:	7dbb      	ldrb	r3, [r7, #22]
 800535a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800535e:	75bb      	strb	r3, [r7, #22]
				break;
 8005360:	e003      	b.n	800536a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005362:	23fc      	movs	r3, #252	; 0xfc
 8005364:	75fb      	strb	r3, [r7, #23]
 8005366:	e000      	b.n	800536a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8005368:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	7dba      	ldrb	r2, [r7, #22]
 800536e:	429a      	cmp	r2, r3
 8005370:	d01e      	beq.n	80053b0 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8005372:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d107      	bne.n	800538a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800537a:	7dbb      	ldrb	r3, [r7, #22]
 800537c:	461a      	mov	r2, r3
 800537e:	2101      	movs	r1, #1
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7fd fbc3 	bl	8002b0c <VL53L0X_WrByte>
 8005386:	4603      	mov	r3, r0
 8005388:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800538a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d103      	bne.n	800539a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	7dba      	ldrb	r2, [r7, #22]
 8005396:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800539a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80053a8:	6939      	ldr	r1, [r7, #16]
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff ff26 	bl	80051fc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80053b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	607b      	str	r3, [r7, #4]
 80053c6:	460b      	mov	r3, r1
 80053c8:	72fb      	strb	r3, [r7, #11]
 80053ca:	4613      	mov	r3, r2
 80053cc:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80053d8:	7afb      	ldrb	r3, [r7, #11]
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d836      	bhi.n	800544c <sequence_step_enabled+0x90>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <sequence_step_enabled+0x28>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	080053f9 	.word	0x080053f9
 80053e8:	0800540b 	.word	0x0800540b
 80053ec:	0800541d 	.word	0x0800541d
 80053f0:	0800542f 	.word	0x0800542f
 80053f4:	08005441 	.word	0x08005441
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80053f8:	7abb      	ldrb	r3, [r7, #10]
 80053fa:	111b      	asrs	r3, r3, #4
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	b2da      	uxtb	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	701a      	strb	r2, [r3, #0]
		break;
 8005408:	e022      	b.n	8005450 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800540a:	7abb      	ldrb	r3, [r7, #10]
 800540c:	10db      	asrs	r3, r3, #3
 800540e:	b2db      	uxtb	r3, r3
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	b2da      	uxtb	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	701a      	strb	r2, [r3, #0]
		break;
 800541a:	e019      	b.n	8005450 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800541c:	7abb      	ldrb	r3, [r7, #10]
 800541e:	109b      	asrs	r3, r3, #2
 8005420:	b2db      	uxtb	r3, r3
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	b2da      	uxtb	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	701a      	strb	r2, [r3, #0]
		break;
 800542c:	e010      	b.n	8005450 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800542e:	7abb      	ldrb	r3, [r7, #10]
 8005430:	119b      	asrs	r3, r3, #6
 8005432:	b2db      	uxtb	r3, r3
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	b2da      	uxtb	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	701a      	strb	r2, [r3, #0]
		break;
 800543e:	e007      	b.n	8005450 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005440:	7abb      	ldrb	r3, [r7, #10]
 8005442:	09db      	lsrs	r3, r3, #7
 8005444:	b2da      	uxtb	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	701a      	strb	r2, [r3, #0]
		break;
 800544a:	e001      	b.n	8005450 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800544c:	23fc      	movs	r3, #252	; 0xfc
 800544e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005450:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005454:	4618      	mov	r0, r3
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800546a:	2300      	movs	r3, #0
 800546c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005472:	f107 030e 	add.w	r3, r7, #14
 8005476:	461a      	mov	r2, r3
 8005478:	2101      	movs	r1, #1
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fd fbfa 	bl	8002c74 <VL53L0X_RdByte>
 8005480:	4603      	mov	r3, r0
 8005482:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8005484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d107      	bne.n	800549c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800548c:	7bba      	ldrb	r2, [r7, #14]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2100      	movs	r1, #0
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff ff92 	bl	80053bc <sequence_step_enabled>
 8005498:	4603      	mov	r3, r0
 800549a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800549c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d108      	bne.n	80054b6 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80054a4:	7bba      	ldrb	r2, [r7, #14]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	3302      	adds	r3, #2
 80054aa:	2101      	movs	r1, #1
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff ff85 	bl	80053bc <sequence_step_enabled>
 80054b2:	4603      	mov	r3, r0
 80054b4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80054b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d108      	bne.n	80054d0 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80054be:	7bba      	ldrb	r2, [r7, #14]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	3301      	adds	r3, #1
 80054c4:	2102      	movs	r1, #2
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff ff78 	bl	80053bc <sequence_step_enabled>
 80054cc:	4603      	mov	r3, r0
 80054ce:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80054d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d108      	bne.n	80054ea <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80054d8:	7bba      	ldrb	r2, [r7, #14]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	3303      	adds	r3, #3
 80054de:	2103      	movs	r1, #3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff ff6b 	bl	80053bc <sequence_step_enabled>
 80054e6:	4603      	mov	r3, r0
 80054e8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80054ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d108      	bne.n	8005504 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80054f2:	7bba      	ldrb	r2, [r7, #14]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	3304      	adds	r3, #4
 80054f8:	2104      	movs	r1, #4
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff ff5e 	bl	80053bc <sequence_step_enabled>
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005504:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800551a:	2300      	movs	r3, #0
 800551c:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800551e:	f107 030e 	add.w	r3, r7, #14
 8005522:	461a      	mov	r2, r3
 8005524:	21f8      	movs	r1, #248	; 0xf8
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fd fbce 	bl	8002cc8 <VL53L0X_RdWord>
 800552c:	4603      	mov	r3, r0
 800552e:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005530:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d112      	bne.n	800555e <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 8005538:	89fb      	ldrh	r3, [r7, #14]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d006      	beq.n	800554c <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 800553e:	89fb      	ldrh	r3, [r7, #14]
 8005540:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	fb02 f303 	mul.w	r3, r2, r3
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	e001      	b.n	8005550 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	2104      	movs	r1, #4
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7fd fb27 	bl	8002ba8 <VL53L0X_WrDWord>
 800555a:	4603      	mov	r3, r0
 800555c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800555e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d102      	bne.n	800556c <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800556c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005586:	f107 030c 	add.w	r3, r7, #12
 800558a:	461a      	mov	r2, r3
 800558c:	21f8      	movs	r1, #248	; 0xf8
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fd fb9a 	bl	8002cc8 <VL53L0X_RdWord>
 8005594:	4603      	mov	r3, r0
 8005596:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d108      	bne.n	80055b2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80055a0:	f107 0308 	add.w	r3, r7, #8
 80055a4:	461a      	mov	r2, r3
 80055a6:	2104      	movs	r1, #4
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7fd fbc5 	bl	8002d38 <VL53L0X_RdDWord>
 80055ae:	4603      	mov	r3, r0
 80055b0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80055b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10c      	bne.n	80055d4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80055ba:	89bb      	ldrh	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d005      	beq.n	80055cc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	89ba      	ldrh	r2, [r7, #12]
 80055c4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80055d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	7f1b      	ldrb	r3, [r3, #28]
 80055f2:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	7bba      	ldrb	r2, [r7, #14]
 80055f8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80055fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b086      	sub	sp, #24
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005614:	2300      	movs	r3, #0
 8005616:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005618:	f107 030e 	add.w	r3, r7, #14
 800561c:	461a      	mov	r2, r3
 800561e:	2120      	movs	r1, #32
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7fd fb51 	bl	8002cc8 <VL53L0X_RdWord>
 8005626:	4603      	mov	r3, r0
 8005628:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800562a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d118      	bne.n	8005664 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8005632:	89fb      	ldrh	r3, [r7, #14]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d109      	bne.n	800564c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	771a      	strb	r2, [r3, #28]
 800564a:	e00b      	b.n	8005664 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800564c:	89fb      	ldrh	r3, [r7, #14]
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005664:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	807b      	strh	r3, [r7, #2]
 800567c:	4613      	mov	r3, r2
 800567e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005680:	2300      	movs	r3, #0
 8005682:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005690:	887b      	ldrh	r3, [r7, #2]
 8005692:	2b05      	cmp	r3, #5
 8005694:	d902      	bls.n	800569c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005696:	23fc      	movs	r3, #252	; 0xfc
 8005698:	75fb      	strb	r3, [r7, #23]
 800569a:	e05b      	b.n	8005754 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800569c:	787b      	ldrb	r3, [r7, #1]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80056aa:	2301      	movs	r3, #1
 80056ac:	73bb      	strb	r3, [r7, #14]
 80056ae:	e00a      	b.n	80056c6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80056b0:	887b      	ldrh	r3, [r7, #2]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	330c      	adds	r3, #12
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80056c6:	887b      	ldrh	r3, [r7, #2]
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	d841      	bhi.n	8005750 <VL53L0X_SetLimitCheckEnable+0xe0>
 80056cc:	a201      	add	r2, pc, #4	; (adr r2, 80056d4 <VL53L0X_SetLimitCheckEnable+0x64>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	080056ed 	.word	0x080056ed
 80056d8:	080056f7 	.word	0x080056f7
 80056dc:	0800570d 	.word	0x0800570d
 80056e0:	08005717 	.word	0x08005717
 80056e4:	08005721 	.word	0x08005721
 80056e8:	08005739 	.word	0x08005739

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	7bfa      	ldrb	r2, [r7, #15]
 80056f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80056f4:	e02e      	b.n	8005754 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	2144      	movs	r1, #68	; 0x44
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7fd fa27 	bl	8002b54 <VL53L0X_WrWord>
 8005706:	4603      	mov	r3, r0
 8005708:	75fb      	strb	r3, [r7, #23]

			break;
 800570a:	e023      	b.n	8005754 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	7bfa      	ldrb	r2, [r7, #15]
 8005710:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8005714:	e01e      	b.n	8005754 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	7bfa      	ldrb	r2, [r7, #15]
 800571a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800571e:	e019      	b.n	8005754 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005720:	7bbb      	ldrb	r3, [r7, #14]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005726:	7b7b      	ldrb	r3, [r7, #13]
 8005728:	22fe      	movs	r2, #254	; 0xfe
 800572a:	2160      	movs	r1, #96	; 0x60
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7fd fa6d 	bl	8002c0c <VL53L0X_UpdateByte>
 8005732:	4603      	mov	r3, r0
 8005734:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8005736:	e00d      	b.n	8005754 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8005738:	7bbb      	ldrb	r3, [r7, #14]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800573e:	7b7b      	ldrb	r3, [r7, #13]
 8005740:	22ef      	movs	r2, #239	; 0xef
 8005742:	2160      	movs	r1, #96	; 0x60
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7fd fa61 	bl	8002c0c <VL53L0X_UpdateByte>
 800574a:	4603      	mov	r3, r0
 800574c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800574e:	e001      	b.n	8005754 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005750:	23fc      	movs	r3, #252	; 0xfc
 8005752:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005754:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10f      	bne.n	800577c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800575c:	787b      	ldrb	r3, [r7, #1]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005762:	887b      	ldrh	r3, [r7, #2]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	4413      	add	r3, r2
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800576e:	e005      	b.n	800577c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005770:	887b      	ldrh	r3, [r7, #2]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	4413      	add	r3, r2
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800577c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	460b      	mov	r3, r1
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800579a:	897b      	ldrh	r3, [r7, #10]
 800579c:	2b05      	cmp	r3, #5
 800579e:	d905      	bls.n	80057ac <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80057a0:	23fc      	movs	r3, #252	; 0xfc
 80057a2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	e008      	b.n	80057be <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80057ac:	897b      	ldrh	r3, [r7, #10]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4413      	add	r3, r2
 80057b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057b6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	7dba      	ldrb	r2, [r7, #22]
 80057bc:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80057be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
	...

080057d0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	460b      	mov	r3, r1
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057de:	2300      	movs	r3, #0
 80057e0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80057e2:	897b      	ldrh	r3, [r7, #10]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057ec:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80057ee:	7dbb      	ldrb	r3, [r7, #22]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d107      	bne.n	8005804 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80057f4:	897b      	ldrh	r3, [r7, #10]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	330c      	adds	r3, #12
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	605a      	str	r2, [r3, #4]
 8005802:	e040      	b.n	8005886 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8005804:	897b      	ldrh	r3, [r7, #10]
 8005806:	2b05      	cmp	r3, #5
 8005808:	d830      	bhi.n	800586c <VL53L0X_SetLimitCheckValue+0x9c>
 800580a:	a201      	add	r2, pc, #4	; (adr r2, 8005810 <VL53L0X_SetLimitCheckValue+0x40>)
 800580c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005810:	08005829 	.word	0x08005829
 8005814:	08005831 	.word	0x08005831
 8005818:	08005847 	.word	0x08005847
 800581c:	0800584f 	.word	0x0800584f
 8005820:	08005857 	.word	0x08005857
 8005824:	08005857 	.word	0x08005857

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800582e:	e01f      	b.n	8005870 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005834:	b29b      	uxth	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	2144      	movs	r1, #68	; 0x44
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f7fd f98a 	bl	8002b54 <VL53L0X_WrWord>
 8005840:	4603      	mov	r3, r0
 8005842:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005844:	e014      	b.n	8005870 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800584c:	e010      	b.n	8005870 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8005854:	e00c      	b.n	8005870 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800585a:	b29b      	uxth	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	2164      	movs	r1, #100	; 0x64
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7fd f977 	bl	8002b54 <VL53L0X_WrWord>
 8005866:	4603      	mov	r3, r0
 8005868:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800586a:	e001      	b.n	8005870 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800586c:	23fc      	movs	r3, #252	; 0xfc
 800586e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005870:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d106      	bne.n	8005886 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005878:	897b      	ldrh	r3, [r7, #10]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	330c      	adds	r3, #12
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005886:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop

08005894 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	460b      	mov	r3, r1
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058a2:	2300      	movs	r3, #0
 80058a4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80058a6:	2300      	movs	r3, #0
 80058a8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80058aa:	897b      	ldrh	r3, [r7, #10]
 80058ac:	2b05      	cmp	r3, #5
 80058ae:	d847      	bhi.n	8005940 <VL53L0X_GetLimitCheckValue+0xac>
 80058b0:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <VL53L0X_GetLimitCheckValue+0x24>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	080058d1 	.word	0x080058d1
 80058bc:	080058dd 	.word	0x080058dd
 80058c0:	08005903 	.word	0x08005903
 80058c4:	0800590f 	.word	0x0800590f
 80058c8:	0800591b 	.word	0x0800591b
 80058cc:	0800591b 	.word	0x0800591b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	77bb      	strb	r3, [r7, #30]
		break;
 80058da:	e033      	b.n	8005944 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80058dc:	f107 0316 	add.w	r3, r7, #22
 80058e0:	461a      	mov	r2, r3
 80058e2:	2144      	movs	r1, #68	; 0x44
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f7fd f9ef 	bl	8002cc8 <VL53L0X_RdWord>
 80058ea:	4603      	mov	r3, r0
 80058ec:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80058ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80058f6:	8afb      	ldrh	r3, [r7, #22]
 80058f8:	025b      	lsls	r3, r3, #9
 80058fa:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80058fc:	2301      	movs	r3, #1
 80058fe:	77bb      	strb	r3, [r7, #30]
		break;
 8005900:	e020      	b.n	8005944 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005906:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8005908:	2300      	movs	r3, #0
 800590a:	77bb      	strb	r3, [r7, #30]
		break;
 800590c:	e01a      	b.n	8005944 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	77bb      	strb	r3, [r7, #30]
		break;
 8005918:	e014      	b.n	8005944 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800591a:	f107 0316 	add.w	r3, r7, #22
 800591e:	461a      	mov	r2, r3
 8005920:	2164      	movs	r1, #100	; 0x64
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7fd f9d0 	bl	8002cc8 <VL53L0X_RdWord>
 8005928:	4603      	mov	r3, r0
 800592a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800592c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d102      	bne.n	800593a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005934:	8afb      	ldrh	r3, [r7, #22]
 8005936:	025b      	lsls	r3, r3, #9
 8005938:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	77bb      	strb	r3, [r7, #30]
		break;
 800593e:	e001      	b.n	8005944 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005940:	23fc      	movs	r3, #252	; 0xfc
 8005942:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005944:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d12a      	bne.n	80059a2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800594c:	7fbb      	ldrb	r3, [r7, #30]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d124      	bne.n	800599c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d110      	bne.n	800597a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005958:	897b      	ldrh	r3, [r7, #10]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	330c      	adds	r3, #12
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800596c:	897b      	ldrh	r3, [r7, #10]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005978:	e013      	b.n	80059a2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005980:	897b      	ldrh	r3, [r7, #10]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	330c      	adds	r3, #12
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800598e:	897b      	ldrh	r3, [r7, #10]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800599a:	e002      	b.n	80059a2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80059a2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3720      	adds	r7, #32
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop

080059b0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059ba:	2300      	movs	r3, #0
 80059bc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80059be:	f107 030e 	add.w	r3, r7, #14
 80059c2:	461a      	mov	r2, r3
 80059c4:	2101      	movs	r1, #1
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fd f954 	bl	8002c74 <VL53L0X_RdByte>
 80059cc:	4603      	mov	r3, r0
 80059ce:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80059d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10e      	bne.n	80059f6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80059d8:	7bba      	ldrb	r2, [r7, #14]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80059e0:	7bbb      	ldrb	r3, [r7, #14]
 80059e2:	b25b      	sxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	da03      	bge.n	80059f0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2201      	movs	r2, #1
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	e002      	b.n	80059f6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80059f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d104      	bne.n	8005a08 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781a      	ldrb	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005a20:	f107 030e 	add.w	r3, r7, #14
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff fbb6 	bl	8005198 <VL53L0X_GetDeviceMode>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d107      	bne.n	8005a48 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005a38:	7bbb      	ldrb	r3, [r7, #14]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d104      	bne.n	8005a48 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f898 	bl	8005b74 <VL53L0X_StartMeasurement>
 8005a44:	4603      	mov	r3, r0
 8005a46:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d104      	bne.n	8005a5a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f001 fb3f 	bl	80070d4 <VL53L0X_measurement_poll_for_completion>
 8005a56:	4603      	mov	r3, r0
 8005a58:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005a62:	7bbb      	ldrb	r3, [r7, #14]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d103      	bne.n	8005a70 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8005a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f001 fae1 	bl	800705a <VL53L0X_perform_ref_calibration>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8005a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005abe:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8005ac0:	7dbb      	ldrb	r3, [r7, #22]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d005      	beq.n	8005ad2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005ac6:	7dbb      	ldrb	r3, [r7, #22]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d002      	beq.n	8005ad2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005acc:	7dbb      	ldrb	r3, [r7, #22]
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d147      	bne.n	8005b62 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005ad2:	f107 030c 	add.w	r3, r7, #12
 8005ad6:	f107 0210 	add.w	r2, r7, #16
 8005ada:	2101      	movs	r1, #1
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fbc3 	bl	8006268 <VL53L0X_GetInterruptThresholds>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005aec:	d803      	bhi.n	8005af6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8005aee:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005af0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005af4:	d935      	bls.n	8005b62 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8005af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d131      	bne.n	8005b62 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005afe:	78fb      	ldrb	r3, [r7, #3]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d006      	beq.n	8005b12 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005b04:	491a      	ldr	r1, [pc, #104]	; (8005b70 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f002 fcbc 	bl	8008484 <VL53L0X_load_tuning_settings>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	75fb      	strb	r3, [r7, #23]
 8005b10:	e027      	b.n	8005b62 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005b12:	2204      	movs	r2, #4
 8005b14:	21ff      	movs	r1, #255	; 0xff
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fc fff8 	bl	8002b0c <VL53L0X_WrByte>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	461a      	mov	r2, r3
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005b26:	2200      	movs	r2, #0
 8005b28:	2170      	movs	r1, #112	; 0x70
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fc ffee 	bl	8002b0c <VL53L0X_WrByte>
 8005b30:	4603      	mov	r3, r0
 8005b32:	461a      	mov	r2, r3
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	21ff      	movs	r1, #255	; 0xff
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fc ffe4 	bl	8002b0c <VL53L0X_WrByte>
 8005b44:	4603      	mov	r3, r0
 8005b46:	461a      	mov	r2, r3
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2180      	movs	r1, #128	; 0x80
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fc ffda 	bl	8002b0c <VL53L0X_WrByte>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	7dfb      	ldrb	r3, [r7, #23]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8005b62:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000364 	.word	0x20000364

08005b74 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005b80:	2301      	movs	r3, #1
 8005b82:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005b84:	f107 030e 	add.w	r3, r7, #14
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff fb04 	bl	8005198 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005b90:	2201      	movs	r2, #1
 8005b92:	2180      	movs	r1, #128	; 0x80
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7fc ffb9 	bl	8002b0c <VL53L0X_WrByte>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	21ff      	movs	r1, #255	; 0xff
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fc ffb2 	bl	8002b0c <VL53L0X_WrByte>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005bac:	2200      	movs	r2, #0
 8005bae:	2100      	movs	r1, #0
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7fc ffab 	bl	8002b0c <VL53L0X_WrByte>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	2191      	movs	r1, #145	; 0x91
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7fc ffa1 	bl	8002b0c <VL53L0X_WrByte>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005bce:	2201      	movs	r2, #1
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fc ff9a 	bl	8002b0c <VL53L0X_WrByte>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005bdc:	2200      	movs	r2, #0
 8005bde:	21ff      	movs	r1, #255	; 0xff
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7fc ff93 	bl	8002b0c <VL53L0X_WrByte>
 8005be6:	4603      	mov	r3, r0
 8005be8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005bea:	2200      	movs	r2, #0
 8005bec:	2180      	movs	r1, #128	; 0x80
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fc ff8c 	bl	8002b0c <VL53L0X_WrByte>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005bf8:	7bbb      	ldrb	r3, [r7, #14]
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d054      	beq.n	8005ca8 <VL53L0X_StartMeasurement+0x134>
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	dc6c      	bgt.n	8005cdc <VL53L0X_StartMeasurement+0x168>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <VL53L0X_StartMeasurement+0x98>
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d034      	beq.n	8005c74 <VL53L0X_StartMeasurement+0x100>
 8005c0a:	e067      	b.n	8005cdc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	2100      	movs	r1, #0
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7fc ff7b 	bl	8002b0c <VL53L0X_WrByte>
 8005c16:	4603      	mov	r3, r0
 8005c18:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8005c1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d15d      	bne.n	8005ce2 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8005c30:	f107 030d 	add.w	r3, r7, #13
 8005c34:	461a      	mov	r2, r3
 8005c36:	2100      	movs	r1, #0
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fd f81b 	bl	8002c74 <VL53L0X_RdByte>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	3301      	adds	r3, #1
 8005c46:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005c48:	7b7a      	ldrb	r2, [r7, #13]
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005c50:	7bfa      	ldrb	r2, [r7, #15]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d107      	bne.n	8005c66 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8005c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c64:	d3e1      	bcc.n	8005c2a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c6c:	d339      	bcc.n	8005ce2 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005c6e:	23f9      	movs	r3, #249	; 0xf9
 8005c70:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005c72:	e036      	b.n	8005ce2 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005c74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d105      	bne.n	8005c88 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff ff12 	bl	8005aa8 <VL53L0X_CheckAndLoadInterruptSettings>
 8005c84:	4603      	mov	r3, r0
 8005c86:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005c88:	2202      	movs	r2, #2
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7fc ff3d 	bl	8002b0c <VL53L0X_WrByte>
 8005c92:	4603      	mov	r3, r0
 8005c94:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8005c96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d123      	bne.n	8005ce6 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2204      	movs	r2, #4
 8005ca2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005ca6:	e01e      	b.n	8005ce6 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d105      	bne.n	8005cbc <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff fef8 	bl	8005aa8 <VL53L0X_CheckAndLoadInterruptSettings>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005cbc:	2204      	movs	r2, #4
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7fc ff23 	bl	8002b0c <VL53L0X_WrByte>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10b      	bne.n	8005cea <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005cda:	e006      	b.n	8005cea <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005cdc:	23f8      	movs	r3, #248	; 0xf8
 8005cde:	75fb      	strb	r3, [r7, #23]
 8005ce0:	e004      	b.n	8005cec <VL53L0X_StartMeasurement+0x178>
		break;
 8005ce2:	bf00      	nop
 8005ce4:	e002      	b.n	8005cec <VL53L0X_StartMeasurement+0x178>
		break;
 8005ce6:	bf00      	nop
 8005ce8:	e000      	b.n	8005cec <VL53L0X_StartMeasurement+0x178>
		break;
 8005cea:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005cec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005d0c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005d0e:	7bbb      	ldrb	r3, [r7, #14]
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d112      	bne.n	8005d3a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005d14:	f107 0308 	add.w	r3, r7, #8
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fb1a 	bl	8006354 <VL53L0X_GetInterruptMaskStatus>
 8005d20:	4603      	mov	r3, r0
 8005d22:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d103      	bne.n	8005d32 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	701a      	strb	r2, [r3, #0]
 8005d30:	e01c      	b.n	8005d6c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2200      	movs	r2, #0
 8005d36:	701a      	strb	r2, [r3, #0]
 8005d38:	e018      	b.n	8005d6c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005d3a:	f107 030d 	add.w	r3, r7, #13
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2114      	movs	r1, #20
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fc ff96 	bl	8002c74 <VL53L0X_RdByte>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10b      	bne.n	8005d6c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005d54:	7b7b      	ldrb	r3, [r7, #13]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2201      	movs	r2, #1
 8005d62:	701a      	strb	r2, [r3, #0]
 8005d64:	e002      	b.n	8005d6c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005d78:	b5b0      	push	{r4, r5, r7, lr}
 8005d7a:	b096      	sub	sp, #88	; 0x58
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005d88:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d8c:	230c      	movs	r3, #12
 8005d8e:	2114      	movs	r1, #20
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7fc fe8f 	bl	8002ab4 <VL53L0X_ReadMulti>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005d9c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f040 80d1 	bne.w	8005f48 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2200      	movs	r2, #0
 8005daa:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005db2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005dce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	021b      	lsls	r3, r3, #8
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	4413      	add	r3, r2
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	025b      	lsls	r3, r3, #9
 8005de4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dea:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005dec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005e02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e06:	025b      	lsls	r3, r3, #9
 8005e08:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005e0e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	4413      	add	r3, r2
 8005e20:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005e2a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8005e2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8005e3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8005e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005e46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e4c:	d046      	beq.n	8005edc <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005e4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e50:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005e54:	fb02 f303 	mul.w	r3, r2, r3
 8005e58:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005e5c:	4a57      	ldr	r2, [pc, #348]	; (8005fbc <VL53L0X_GetRangingMeasurementData+0x244>)
 8005e5e:	fb82 1203 	smull	r1, r2, r2, r3
 8005e62:	1192      	asrs	r2, r2, #6
 8005e64:	17db      	asrs	r3, r3, #31
 8005e66:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005e68:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7f1b      	ldrb	r3, [r3, #28]
 8005e76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005e7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d02c      	beq.n	8005edc <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8005e82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e84:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005e88:	fb02 f303 	mul.w	r3, r2, r3
 8005e8c:	121a      	asrs	r2, r3, #8
					<= 0) {
 8005e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d10d      	bne.n	8005eb0 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8005e94:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8005e9c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005ea0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005ea4:	e016      	b.n	8005ed4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8005ea6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005eaa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005eae:	e011      	b.n	8005ed4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005eb0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005eb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eb6:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005eba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ebc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005ec4:	121b      	asrs	r3, r3, #8
 8005ec6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eca:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005ecc:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005ed0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005ed4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ed8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005edc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00d      	beq.n	8005f00 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005ee4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005ee8:	089b      	lsrs	r3, r3, #2
 8005eea:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005ef0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	019b      	lsls	r3, r3, #6
 8005ef8:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	75da      	strb	r2, [r3, #23]
 8005efe:	e006      	b.n	8005f0e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005f06:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005f0e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005f12:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005f16:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	4613      	mov	r3, r2
 8005f22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f002 ff4b 	bl	8008dc0 <VL53L0X_get_pal_range_status>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005f32:	4313      	orrs	r3, r2
 8005f34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005f38:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d103      	bne.n	8005f48 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005f40:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f48:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d12f      	bne.n	8005fb0 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f107 040c 	add.w	r4, r7, #12
 8005f56:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8005f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005f62:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8005f6a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8005f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005f78:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005f7e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8005f84:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005f8a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8005f90:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005f96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8005fa0:	f107 050c 	add.w	r5, r7, #12
 8005fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005fac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005fb0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3750      	adds	r7, #80	; 0x50
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bdb0      	pop	{r4, r5, r7, pc}
 8005fbc:	10624dd3 	.word	0x10624dd3

08005fc0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8005fce:	2100      	movs	r1, #0
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff f8b5 	bl	8005140 <VL53L0X_SetDeviceMode>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d104      	bne.n	8005fec <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7ff fd16 	bl	8005a14 <VL53L0X_PerformSingleMeasurement>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d105      	bne.n	8006000 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff febe 	bl	8005d78 <VL53L0X_GetRangingMeasurementData>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d105      	bne.n	8006014 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006008:	2100      	movs	r1, #0
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f962 	bl	80062d4 <VL53L0X_ClearInterruptMask>
 8006010:	4603      	mov	r3, r0
 8006012:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8006014:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	4608      	mov	r0, r1
 800602a:	4611      	mov	r1, r2
 800602c:	461a      	mov	r2, r3
 800602e:	4603      	mov	r3, r0
 8006030:	70fb      	strb	r3, [r7, #3]
 8006032:	460b      	mov	r3, r1
 8006034:	70bb      	strb	r3, [r7, #2]
 8006036:	4613      	mov	r3, r2
 8006038:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800603a:	2300      	movs	r3, #0
 800603c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800603e:	78fb      	ldrb	r3, [r7, #3]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8006044:	23f6      	movs	r3, #246	; 0xf6
 8006046:	73fb      	strb	r3, [r7, #15]
 8006048:	e107      	b.n	800625a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800604a:	78bb      	ldrb	r3, [r7, #2]
 800604c:	2b14      	cmp	r3, #20
 800604e:	d110      	bne.n	8006072 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006050:	7e3b      	ldrb	r3, [r7, #24]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d102      	bne.n	800605c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8006056:	2310      	movs	r3, #16
 8006058:	73bb      	strb	r3, [r7, #14]
 800605a:	e001      	b.n	8006060 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800605c:	2301      	movs	r3, #1
 800605e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8006060:	7bbb      	ldrb	r3, [r7, #14]
 8006062:	461a      	mov	r2, r3
 8006064:	2184      	movs	r1, #132	; 0x84
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fc fd50 	bl	8002b0c <VL53L0X_WrByte>
 800606c:	4603      	mov	r3, r0
 800606e:	73fb      	strb	r3, [r7, #15]
 8006070:	e0f3      	b.n	800625a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006072:	78bb      	ldrb	r3, [r7, #2]
 8006074:	2b15      	cmp	r3, #21
 8006076:	f040 8097 	bne.w	80061a8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800607a:	2201      	movs	r2, #1
 800607c:	21ff      	movs	r1, #255	; 0xff
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fc fd44 	bl	8002b0c <VL53L0X_WrByte>
 8006084:	4603      	mov	r3, r0
 8006086:	461a      	mov	r2, r3
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	4313      	orrs	r3, r2
 800608c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800608e:	2200      	movs	r2, #0
 8006090:	2100      	movs	r1, #0
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fc fd3a 	bl	8002b0c <VL53L0X_WrByte>
 8006098:	4603      	mov	r3, r0
 800609a:	461a      	mov	r2, r3
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	4313      	orrs	r3, r2
 80060a0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80060a2:	2200      	movs	r2, #0
 80060a4:	21ff      	movs	r1, #255	; 0xff
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fc fd30 	bl	8002b0c <VL53L0X_WrByte>
 80060ac:	4603      	mov	r3, r0
 80060ae:	461a      	mov	r2, r3
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80060b6:	2201      	movs	r2, #1
 80060b8:	2180      	movs	r1, #128	; 0x80
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fc fd26 	bl	8002b0c <VL53L0X_WrByte>
 80060c0:	4603      	mov	r3, r0
 80060c2:	461a      	mov	r2, r3
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80060ca:	2202      	movs	r2, #2
 80060cc:	2185      	movs	r1, #133	; 0x85
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fc fd1c 	bl	8002b0c <VL53L0X_WrByte>
 80060d4:	4603      	mov	r3, r0
 80060d6:	461a      	mov	r2, r3
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	4313      	orrs	r3, r2
 80060dc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80060de:	2204      	movs	r2, #4
 80060e0:	21ff      	movs	r1, #255	; 0xff
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fc fd12 	bl	8002b0c <VL53L0X_WrByte>
 80060e8:	4603      	mov	r3, r0
 80060ea:	461a      	mov	r2, r3
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80060f2:	2200      	movs	r2, #0
 80060f4:	21cd      	movs	r1, #205	; 0xcd
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7fc fd08 	bl	8002b0c <VL53L0X_WrByte>
 80060fc:	4603      	mov	r3, r0
 80060fe:	461a      	mov	r2, r3
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	4313      	orrs	r3, r2
 8006104:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8006106:	2211      	movs	r2, #17
 8006108:	21cc      	movs	r1, #204	; 0xcc
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fc fcfe 	bl	8002b0c <VL53L0X_WrByte>
 8006110:	4603      	mov	r3, r0
 8006112:	461a      	mov	r2, r3
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	4313      	orrs	r3, r2
 8006118:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800611a:	2207      	movs	r2, #7
 800611c:	21ff      	movs	r1, #255	; 0xff
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7fc fcf4 	bl	8002b0c <VL53L0X_WrByte>
 8006124:	4603      	mov	r3, r0
 8006126:	461a      	mov	r2, r3
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	4313      	orrs	r3, r2
 800612c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800612e:	2200      	movs	r2, #0
 8006130:	21be      	movs	r1, #190	; 0xbe
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fc fcea 	bl	8002b0c <VL53L0X_WrByte>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	4313      	orrs	r3, r2
 8006140:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8006142:	2206      	movs	r2, #6
 8006144:	21ff      	movs	r1, #255	; 0xff
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7fc fce0 	bl	8002b0c <VL53L0X_WrByte>
 800614c:	4603      	mov	r3, r0
 800614e:	461a      	mov	r2, r3
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	4313      	orrs	r3, r2
 8006154:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8006156:	2209      	movs	r2, #9
 8006158:	21cc      	movs	r1, #204	; 0xcc
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fc fcd6 	bl	8002b0c <VL53L0X_WrByte>
 8006160:	4603      	mov	r3, r0
 8006162:	461a      	mov	r2, r3
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	4313      	orrs	r3, r2
 8006168:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800616a:	2200      	movs	r2, #0
 800616c:	21ff      	movs	r1, #255	; 0xff
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fc fccc 	bl	8002b0c <VL53L0X_WrByte>
 8006174:	4603      	mov	r3, r0
 8006176:	461a      	mov	r2, r3
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	4313      	orrs	r3, r2
 800617c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800617e:	2201      	movs	r2, #1
 8006180:	21ff      	movs	r1, #255	; 0xff
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fc fcc2 	bl	8002b0c <VL53L0X_WrByte>
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	4313      	orrs	r3, r2
 8006190:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006192:	2200      	movs	r2, #0
 8006194:	2100      	movs	r1, #0
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fc fcb8 	bl	8002b0c <VL53L0X_WrByte>
 800619c:	4603      	mov	r3, r0
 800619e:	461a      	mov	r2, r3
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	73fb      	strb	r3, [r7, #15]
 80061a6:	e058      	b.n	800625a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80061a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d121      	bne.n	80061f4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80061b0:	787b      	ldrb	r3, [r7, #1]
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d81b      	bhi.n	80061ee <VL53L0X_SetGpioConfig+0x1ce>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <VL53L0X_SetGpioConfig+0x19c>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061d1 	.word	0x080061d1
 80061c0:	080061d7 	.word	0x080061d7
 80061c4:	080061dd 	.word	0x080061dd
 80061c8:	080061e3 	.word	0x080061e3
 80061cc:	080061e9 	.word	0x080061e9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80061d0:	2300      	movs	r3, #0
 80061d2:	73bb      	strb	r3, [r7, #14]
				break;
 80061d4:	e00f      	b.n	80061f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80061d6:	2301      	movs	r3, #1
 80061d8:	73bb      	strb	r3, [r7, #14]
				break;
 80061da:	e00c      	b.n	80061f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80061dc:	2302      	movs	r3, #2
 80061de:	73bb      	strb	r3, [r7, #14]
				break;
 80061e0:	e009      	b.n	80061f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80061e2:	2303      	movs	r3, #3
 80061e4:	73bb      	strb	r3, [r7, #14]
				break;
 80061e6:	e006      	b.n	80061f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80061e8:	2304      	movs	r3, #4
 80061ea:	73bb      	strb	r3, [r7, #14]
				break;
 80061ec:	e003      	b.n	80061f6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80061ee:	23f5      	movs	r3, #245	; 0xf5
 80061f0:	73fb      	strb	r3, [r7, #15]
 80061f2:	e000      	b.n	80061f6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80061f4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80061f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d107      	bne.n	800620e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	461a      	mov	r2, r3
 8006202:	210a      	movs	r1, #10
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7fc fc81 	bl	8002b0c <VL53L0X_WrByte>
 800620a:	4603      	mov	r3, r0
 800620c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800620e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10f      	bne.n	8006236 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006216:	7e3b      	ldrb	r3, [r7, #24]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d102      	bne.n	8006222 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	73bb      	strb	r3, [r7, #14]
 8006220:	e001      	b.n	8006226 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8006222:	2310      	movs	r3, #16
 8006224:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8006226:	7bbb      	ldrb	r3, [r7, #14]
 8006228:	22ef      	movs	r2, #239	; 0xef
 800622a:	2184      	movs	r1, #132	; 0x84
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7fc fced 	bl	8002c0c <VL53L0X_UpdateByte>
 8006232:	4603      	mov	r3, r0
 8006234:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8006236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d103      	bne.n	8006246 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	787a      	ldrb	r2, [r7, #1]
 8006242:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8006246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d105      	bne.n	800625a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800624e:	2100      	movs	r1, #0
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f83f 	bl	80062d4 <VL53L0X_ClearInterruptMask>
 8006256:	4603      	mov	r3, r0
 8006258:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800625a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop

08006268 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	607a      	str	r2, [r7, #4]
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	460b      	mov	r3, r1
 8006276:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006278:	2300      	movs	r3, #0
 800627a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800627c:	f107 0314 	add.w	r3, r7, #20
 8006280:	461a      	mov	r2, r3
 8006282:	210e      	movs	r1, #14
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7fc fd1f 	bl	8002cc8 <VL53L0X_RdWord>
 800628a:	4603      	mov	r3, r0
 800628c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800628e:	8abb      	ldrh	r3, [r7, #20]
 8006290:	045b      	lsls	r3, r3, #17
 8006292:	461a      	mov	r2, r3
 8006294:	4b0e      	ldr	r3, [pc, #56]	; (80062d0 <VL53L0X_GetInterruptThresholds+0x68>)
 8006296:	4013      	ands	r3, r2
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800629c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10f      	bne.n	80062c4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80062a4:	f107 0314 	add.w	r3, r7, #20
 80062a8:	461a      	mov	r2, r3
 80062aa:	210c      	movs	r1, #12
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7fc fd0b 	bl	8002cc8 <VL53L0X_RdWord>
 80062b2:	4603      	mov	r3, r0
 80062b4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80062b6:	8abb      	ldrh	r3, [r7, #20]
 80062b8:	045b      	lsls	r3, r3, #17
 80062ba:	461a      	mov	r2, r3
 80062bc:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <VL53L0X_GetInterruptThresholds+0x68>)
 80062be:	4013      	ands	r3, r2
		*pThresholdHigh =
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	1ffe0000 	.word	0x1ffe0000

080062d4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062de:	2300      	movs	r3, #0
 80062e0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80062e6:	2201      	movs	r2, #1
 80062e8:	210b      	movs	r1, #11
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fc fc0e 	bl	8002b0c <VL53L0X_WrByte>
 80062f0:	4603      	mov	r3, r0
 80062f2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80062f4:	2200      	movs	r2, #0
 80062f6:	210b      	movs	r1, #11
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7fc fc07 	bl	8002b0c <VL53L0X_WrByte>
 80062fe:	4603      	mov	r3, r0
 8006300:	461a      	mov	r2, r3
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	4313      	orrs	r3, r2
 8006306:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8006308:	f107 030d 	add.w	r3, r7, #13
 800630c:	461a      	mov	r2, r3
 800630e:	2113      	movs	r1, #19
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7fc fcaf 	bl	8002c74 <VL53L0X_RdByte>
 8006316:	4603      	mov	r3, r0
 8006318:	461a      	mov	r2, r3
 800631a:	7bfb      	ldrb	r3, [r7, #15]
 800631c:	4313      	orrs	r3, r2
 800631e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8006320:	7bbb      	ldrb	r3, [r7, #14]
 8006322:	3301      	adds	r3, #1
 8006324:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8006326:	7b7b      	ldrb	r3, [r7, #13]
 8006328:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800632c:	2b00      	cmp	r3, #0
 800632e:	d006      	beq.n	800633e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d803      	bhi.n	800633e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8006336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0d3      	beq.n	80062e6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800633e:	7bbb      	ldrb	r3, [r7, #14]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d901      	bls.n	8006348 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8006344:	23f4      	movs	r3, #244	; 0xf4
 8006346:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8006362:	f107 030e 	add.w	r3, r7, #14
 8006366:	461a      	mov	r2, r3
 8006368:	2113      	movs	r1, #19
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fc fc82 	bl	8002c74 <VL53L0X_RdByte>
 8006370:	4603      	mov	r3, r0
 8006372:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	f003 0207 	and.w	r2, r3, #7
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800637e:	7bbb      	ldrb	r3, [r7, #14]
 8006380:	f003 0318 	and.w	r3, r3, #24
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8006388:	23fa      	movs	r3, #250	; 0xfa
 800638a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800638c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fa03 	bl	80067b8 <VL53L0X_perform_ref_spad_management>
 80063b2:	4603      	mov	r3, r0
 80063b4:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80063b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063cc:	2300      	movs	r3, #0
 80063ce:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80063d0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80063d4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80063d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063da:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80063dc:	f107 0308 	add.w	r3, r7, #8
 80063e0:	461a      	mov	r2, r3
 80063e2:	2128      	movs	r1, #40	; 0x28
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7fc fc6f 	bl	8002cc8 <VL53L0X_RdWord>
 80063ea:	4603      	mov	r3, r0
 80063ec:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80063ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d11e      	bne.n	8006434 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80063f6:	893b      	ldrh	r3, [r7, #8]
 80063f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006400:	893b      	ldrh	r3, [r7, #8]
 8006402:	461a      	mov	r2, r3
 8006404:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006408:	429a      	cmp	r2, r3
 800640a:	dd0b      	ble.n	8006424 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800640c:	893a      	ldrh	r2, [r7, #8]
 800640e:	897b      	ldrh	r3, [r7, #10]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	b29b      	uxth	r3, r3
 8006414:	b21b      	sxth	r3, r3
 8006416:	461a      	mov	r2, r3
					* 250;
 8006418:	23fa      	movs	r3, #250	; 0xfa
 800641a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	e007      	b.n	8006434 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8006424:	893b      	ldrh	r3, [r7, #8]
 8006426:	b21b      	sxth	r3, r3
 8006428:	461a      	mov	r2, r3
 800642a:	23fa      	movs	r3, #250	; 0xfa
 800642c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8006434:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006440:	b480      	push	{r7}
 8006442:	b08b      	sub	sp, #44	; 0x2c
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800644e:	2308      	movs	r3, #8
 8006450:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8006452:	2300      	movs	r3, #0
 8006454:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800645c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	fbb2 f3f3 	udiv	r3, r2, r3
 8006466:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006470:	69b9      	ldr	r1, [r7, #24]
 8006472:	fb01 f202 	mul.w	r2, r1, r2
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
 800647e:	e030      	b.n	80064e2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	4413      	add	r3, r2
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800648e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	429a      	cmp	r2, r3
 8006494:	d11e      	bne.n	80064d4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8006496:	7ffa      	ldrb	r2, [r7, #31]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	fa42 f303 	asr.w	r3, r2, r3
 800649e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80064a4:	e016      	b.n	80064d4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80064a6:	7ffb      	ldrb	r3, [r7, #31]
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <get_next_good_spad+0x88>
				success = 1;
 80064b0:	2301      	movs	r3, #1
 80064b2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	fb03 f202 	mul.w	r2, r3, r2
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	4413      	add	r3, r2
 80064c0:	461a      	mov	r2, r3
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	601a      	str	r2, [r3, #0]
				break;
 80064c6:	e009      	b.n	80064dc <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80064c8:	7ffb      	ldrb	r3, [r7, #31]
 80064ca:	085b      	lsrs	r3, r3, #1
 80064cc:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	3301      	adds	r3, #1
 80064d2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80064d4:	6a3a      	ldr	r2, [r7, #32]
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d3e4      	bcc.n	80064a6 <get_next_good_spad+0x66>
				coarseIndex++) {
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	3301      	adds	r3, #1
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80064e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d202      	bcs.n	80064f0 <get_next_good_spad+0xb0>
 80064ea:	7fbb      	ldrb	r3, [r7, #30]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0c7      	beq.n	8006480 <get_next_good_spad+0x40>
		}
	}
}
 80064f0:	bf00      	nop
 80064f2:	372c      	adds	r7, #44	; 0x2c
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8006504:	2301      	movs	r3, #1
 8006506:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	099b      	lsrs	r3, r3, #6
 800650c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800650e:	4a07      	ldr	r2, [pc, #28]	; (800652c <is_aperture+0x30>)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <is_aperture+0x22>
		isAperture = 0;
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800651e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	2000051c 	.word	0x2000051c

08006530 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8006530:	b480      	push	{r7}
 8006532:	b089      	sub	sp, #36	; 0x24
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800653c:	2300      	movs	r3, #0
 800653e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8006540:	2308      	movs	r3, #8
 8006542:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	fbb2 f3f3 	udiv	r3, r2, r3
 800654c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	fbb3 f2f2 	udiv	r2, r3, r2
 8006556:	69b9      	ldr	r1, [r7, #24]
 8006558:	fb01 f202 	mul.w	r2, r1, r2
 800655c:	1a9b      	subs	r3, r3, r2
 800655e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	429a      	cmp	r2, r3
 8006566:	d302      	bcc.n	800656e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006568:	23ce      	movs	r3, #206	; 0xce
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e010      	b.n	8006590 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	4413      	add	r3, r2
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	b25a      	sxtb	r2, r3
 8006578:	2101      	movs	r1, #1
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	fa01 f303 	lsl.w	r3, r1, r3
 8006580:	b25b      	sxtb	r3, r3
 8006582:	4313      	orrs	r3, r2
 8006584:	b259      	sxtb	r1, r3
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	4413      	add	r3, r2
 800658c:	b2ca      	uxtb	r2, r1
 800658e:	701a      	strb	r2, [r3, #0]

	return status;
 8006590:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3724      	adds	r7, #36	; 0x24
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80065aa:	2306      	movs	r3, #6
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	21b0      	movs	r1, #176	; 0xb0
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7fc fa4f 	bl	8002a54 <VL53L0X_WriteMulti>
 80065b6:	4603      	mov	r3, r0
 80065b8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80065ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80065d0:	2306      	movs	r3, #6
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	21b0      	movs	r1, #176	; 0xb0
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fc fa6c 	bl	8002ab4 <VL53L0X_ReadMulti>
 80065dc:	4603      	mov	r3, r0
 80065de:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80065e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08c      	sub	sp, #48	; 0x30
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	607a      	str	r2, [r7, #4]
 80065f6:	603b      	str	r3, [r7, #0]
 80065f8:	460b      	mov	r3, r1
 80065fa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8006602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006604:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8006606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006608:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800660a:	2300      	movs	r3, #0
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28
 800660e:	e02b      	b.n	8006668 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8006610:	f107 031c 	add.w	r3, r7, #28
 8006614:	6a3a      	ldr	r2, [r7, #32]
 8006616:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff ff11 	bl	8006440 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006624:	d103      	bne.n	800662e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006626:	23ce      	movs	r3, #206	; 0xce
 8006628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800662c:	e020      	b.n	8006670 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	461a      	mov	r2, r3
 8006632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006634:	4413      	add	r3, r2
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff ff60 	bl	80064fc <is_aperture>
 800663c:	4603      	mov	r3, r0
 800663e:	461a      	mov	r2, r3
 8006640:	7afb      	ldrb	r3, [r7, #11]
 8006642:	4293      	cmp	r3, r2
 8006644:	d003      	beq.n	800664e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006646:	23ce      	movs	r3, #206	; 0xce
 8006648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800664c:	e010      	b.n	8006670 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8006652:	6a3a      	ldr	r2, [r7, #32]
 8006654:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006656:	6838      	ldr	r0, [r7, #0]
 8006658:	f7ff ff6a 	bl	8006530 <enable_spad_bit>
		currentSpad++;
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	3301      	adds	r3, #1
 8006660:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	3301      	adds	r3, #1
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
 8006668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800666c:	429a      	cmp	r2, r3
 800666e:	d3cf      	bcc.n	8006610 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8006670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006672:	6a3a      	ldr	r2, [r7, #32]
 8006674:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006676:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f7ff ff8d 	bl	80065a0 <set_ref_spad_map>
 8006686:	4603      	mov	r3, r0
 8006688:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800668c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006690:	2b00      	cmp	r3, #0
 8006692:	d121      	bne.n	80066d8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8006694:	f107 0314 	add.w	r3, r7, #20
 8006698:	4619      	mov	r1, r3
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f7ff ff93 	bl	80065c6 <get_ref_spad_map>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80066aa:	e011      	b.n	80066d0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	4413      	add	r3, r2
 80066b2:	781a      	ldrb	r2, [r3, #0]
 80066b4:	f107 0114 	add.w	r1, r7, #20
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	440b      	add	r3, r1
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d003      	beq.n	80066ca <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80066c2:	23ce      	movs	r3, #206	; 0xce
 80066c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80066c8:	e006      	b.n	80066d8 <enable_ref_spads+0xec>
			}
			i++;
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	3301      	adds	r3, #1
 80066ce:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80066d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d3e9      	bcc.n	80066ac <enable_ref_spads+0xc0>
		}
	}
	return status;
 80066d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3730      	adds	r7, #48	; 0x30
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08a      	sub	sp, #40	; 0x28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006700:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8006704:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006708:	2b00      	cmp	r3, #0
 800670a:	d107      	bne.n	800671c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800670c:	22c0      	movs	r2, #192	; 0xc0
 800670e:	2101      	movs	r1, #1
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7fc f9fb 	bl	8002b0c <VL53L0X_WrByte>
 8006716:	4603      	mov	r3, r0
 8006718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800671c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006720:	2b00      	cmp	r3, #0
 8006722:	d108      	bne.n	8006736 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8006724:	f107 0308 	add.w	r3, r7, #8
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7ff fc48 	bl	8005fc0 <VL53L0X_PerformSingleRangingMeasurement>
 8006730:	4603      	mov	r3, r0
 8006732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8006736:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800673a:	2b00      	cmp	r3, #0
 800673c:	d107      	bne.n	800674e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800673e:	2201      	movs	r2, #1
 8006740:	21ff      	movs	r1, #255	; 0xff
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fc f9e2 	bl	8002b0c <VL53L0X_WrByte>
 8006748:	4603      	mov	r3, r0
 800674a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800674e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006752:	2b00      	cmp	r3, #0
 8006754:	d107      	bne.n	8006766 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	21b6      	movs	r1, #182	; 0xb6
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fc fab4 	bl	8002cc8 <VL53L0X_RdWord>
 8006760:	4603      	mov	r3, r0
 8006762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006766:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800676a:	2b00      	cmp	r3, #0
 800676c:	d107      	bne.n	800677e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800676e:	2200      	movs	r2, #0
 8006770:	21ff      	movs	r1, #255	; 0xff
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fc f9ca 	bl	8002b0c <VL53L0X_WrByte>
 8006778:	4603      	mov	r3, r0
 800677a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800677e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006782:	2b00      	cmp	r3, #0
 8006784:	d112      	bne.n	80067ac <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006786:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800678a:	461a      	mov	r2, r3
 800678c:	2101      	movs	r1, #1
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fc f9bc 	bl	8002b0c <VL53L0X_WrByte>
 8006794:	4603      	mov	r3, r0
 8006796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800679a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80067a8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80067ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3728      	adds	r7, #40	; 0x28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80067b8:	b590      	push	{r4, r7, lr}
 80067ba:	b09d      	sub	sp, #116	; 0x74
 80067bc:	af06      	add	r7, sp, #24
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067c4:	2300      	movs	r3, #0
 80067c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80067ca:	23b4      	movs	r3, #180	; 0xb4
 80067cc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80067d0:	2303      	movs	r3, #3
 80067d2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80067d4:	232c      	movs	r3, #44	; 0x2c
 80067d6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80067e4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80067e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80067f2:	2306      	movs	r3, #6
 80067f4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8006808:	2300      	movs	r3, #0
 800680a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800681c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800681e:	2300      	movs	r3, #0
 8006820:	64bb      	str	r3, [r7, #72]	; 0x48
 8006822:	e009      	b.n	8006838 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006828:	4413      	add	r3, r2
 800682a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800682e:	2200      	movs	r2, #0
 8006830:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006834:	3301      	adds	r3, #1
 8006836:	64bb      	str	r3, [r7, #72]	; 0x48
 8006838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	429a      	cmp	r2, r3
 800683e:	d3f1      	bcc.n	8006824 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006840:	2201      	movs	r2, #1
 8006842:	21ff      	movs	r1, #255	; 0xff
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f7fc f961 	bl	8002b0c <VL53L0X_WrByte>
 800684a:	4603      	mov	r3, r0
 800684c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006850:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006854:	2b00      	cmp	r3, #0
 8006856:	d107      	bne.n	8006868 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006858:	2200      	movs	r2, #0
 800685a:	214f      	movs	r1, #79	; 0x4f
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f7fc f955 	bl	8002b0c <VL53L0X_WrByte>
 8006862:	4603      	mov	r3, r0
 8006864:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006868:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800686c:	2b00      	cmp	r3, #0
 800686e:	d107      	bne.n	8006880 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006870:	222c      	movs	r2, #44	; 0x2c
 8006872:	214e      	movs	r1, #78	; 0x4e
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f7fc f949 	bl	8002b0c <VL53L0X_WrByte>
 800687a:	4603      	mov	r3, r0
 800687c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006880:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006884:	2b00      	cmp	r3, #0
 8006886:	d107      	bne.n	8006898 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006888:	2200      	movs	r2, #0
 800688a:	21ff      	movs	r1, #255	; 0xff
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f7fc f93d 	bl	8002b0c <VL53L0X_WrByte>
 8006892:	4603      	mov	r3, r0
 8006894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006898:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800689c:	2b00      	cmp	r3, #0
 800689e:	d109      	bne.n	80068b4 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80068a0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80068a4:	461a      	mov	r2, r3
 80068a6:	21b6      	movs	r1, #182	; 0xb6
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f7fc f92f 	bl	8002b0c <VL53L0X_WrByte>
 80068ae:	4603      	mov	r3, r0
 80068b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80068b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d107      	bne.n	80068cc <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80068bc:	2200      	movs	r2, #0
 80068be:	2180      	movs	r1, #128	; 0x80
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7fc f923 	bl	8002b0c <VL53L0X_WrByte>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80068cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10a      	bne.n	80068ea <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80068d4:	f107 0210 	add.w	r2, r7, #16
 80068d8:	f107 0111 	add.w	r1, r7, #17
 80068dc:	2300      	movs	r3, #0
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 fbbb 	bl	800705a <VL53L0X_perform_ref_calibration>
 80068e4:	4603      	mov	r3, r0
 80068e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80068ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d121      	bne.n	8006936 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80068f2:	2300      	movs	r3, #0
 80068f4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80068f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80068fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006900:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800690e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006912:	f107 0218 	add.w	r2, r7, #24
 8006916:	9204      	str	r2, [sp, #16]
 8006918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800691a:	9203      	str	r2, [sp, #12]
 800691c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800691e:	9202      	str	r2, [sp, #8]
 8006920:	9301      	str	r3, [sp, #4]
 8006922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	4623      	mov	r3, r4
 8006928:	4602      	mov	r2, r0
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7ff fe5e 	bl	80065ec <enable_ref_spads>
 8006930:	4603      	mov	r3, r0
 8006932:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006936:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800693a:	2b00      	cmp	r3, #0
 800693c:	d174      	bne.n	8006a28 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8006942:	f107 0312 	add.w	r3, r7, #18
 8006946:	4619      	mov	r1, r3
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f7ff fecb 	bl	80066e4 <perform_ref_signal_measurement>
 800694e:	4603      	mov	r3, r0
 8006950:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006954:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006958:	2b00      	cmp	r3, #0
 800695a:	d161      	bne.n	8006a20 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800695c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800695e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006960:	429a      	cmp	r2, r3
 8006962:	d25d      	bcs.n	8006a20 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8006964:	2300      	movs	r3, #0
 8006966:	64bb      	str	r3, [r7, #72]	; 0x48
 8006968:	e009      	b.n	800697e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800696e:	4413      	add	r3, r2
 8006970:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006974:	2200      	movs	r2, #0
 8006976:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800697a:	3301      	adds	r3, #1
 800697c:	64bb      	str	r3, [r7, #72]	; 0x48
 800697e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	429a      	cmp	r2, r3
 8006984:	d3f1      	bcc.n	800696a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8006986:	e002      	b.n	800698e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8006988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800698a:	3301      	adds	r3, #1
 800698c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800698e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8006992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006994:	4413      	add	r3, r2
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff fdb0 	bl	80064fc <is_aperture>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d103      	bne.n	80069aa <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80069a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d3ee      	bcc.n	8006988 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80069aa:	2301      	movs	r3, #1
 80069ac:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80069ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80069be:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80069c2:	f107 0218 	add.w	r2, r7, #24
 80069c6:	9204      	str	r2, [sp, #16]
 80069c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069ca:	9203      	str	r2, [sp, #12]
 80069cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069ce:	9202      	str	r2, [sp, #8]
 80069d0:	9301      	str	r3, [sp, #4]
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	4623      	mov	r3, r4
 80069d8:	4602      	mov	r2, r0
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff fe06 	bl	80065ec <enable_ref_spads>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80069e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d11b      	bne.n	8006a26 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80069f2:	f107 0312 	add.w	r3, r7, #18
 80069f6:	4619      	mov	r1, r3
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7ff fe73 	bl	80066e4 <perform_ref_signal_measurement>
 80069fe:	4603      	mov	r3, r0
 8006a00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8006a04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10c      	bne.n	8006a26 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006a0c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006a0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d208      	bcs.n	8006a26 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8006a1e:	e002      	b.n	8006a26 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a24:	e000      	b.n	8006a28 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8006a26:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006a28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f040 80af 	bne.w	8006b90 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8006a32:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006a34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a36:	429a      	cmp	r2, r3
 8006a38:	f240 80aa 	bls.w	8006b90 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8006a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a44:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8006a4c:	f107 031c 	add.w	r3, r7, #28
 8006a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a52:	4618      	mov	r0, r3
 8006a54:	f011 fff4 	bl	8018a40 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006a58:	8a7b      	ldrh	r3, [r7, #18]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	bfb8      	it	lt
 8006a64:	425b      	neglt	r3, r3
 8006a66:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8006a6e:	e086      	b.n	8006b7e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8006a76:	f107 0314 	add.w	r3, r7, #20
 8006a7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a7e:	f7ff fcdf 	bl	8006440 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a88:	d103      	bne.n	8006a92 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006a8a:	23ce      	movs	r3, #206	; 0xce
 8006a8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006a90:	e07e      	b.n	8006b90 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006a92:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	4413      	add	r3, r2
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff fd2e 	bl	80064fc <is_aperture>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d003      	beq.n	8006ab2 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006ab0:	e06e      	b.n	8006b90 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8006ac2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff fd32 	bl	8006530 <enable_spad_bit>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006ad2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10c      	bne.n	8006af4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006adc:	3301      	adds	r3, #1
 8006ade:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f7ff fd59 	bl	80065a0 <set_ref_spad_map>
 8006aee:	4603      	mov	r3, r0
 8006af0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006af4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d146      	bne.n	8006b8a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006afc:	f107 0312 	add.w	r3, r7, #18
 8006b00:	4619      	mov	r1, r3
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f7ff fdee 	bl	80066e4 <perform_ref_signal_measurement>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006b0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d13b      	bne.n	8006b8e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006b16:	8a7b      	ldrh	r3, [r7, #18]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bfb8      	it	lt
 8006b22:	425b      	neglt	r3, r3
 8006b24:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8006b26:	8a7b      	ldrh	r3, [r7, #18]
 8006b28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d21c      	bcs.n	8006b68 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8006b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d914      	bls.n	8006b60 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8006b36:	f107 031c 	add.w	r3, r7, #28
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f7ff fd2f 	bl	80065a0 <set_ref_spad_map>
 8006b42:	4603      	mov	r3, r0
 8006b44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8006b4e:	f107 011c 	add.w	r1, r7, #28
 8006b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b54:	4618      	mov	r0, r3
 8006b56:	f011 ff73 	bl	8018a40 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8006b60:	2301      	movs	r3, #1
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b66:	e00a      	b.n	8006b7e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8006b72:	f107 031c 	add.w	r3, r7, #28
 8006b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f011 ff61 	bl	8018a40 <memcpy>
		while (!complete) {
 8006b7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f43f af74 	beq.w	8006a70 <VL53L0X_perform_ref_spad_management+0x2b8>
 8006b88:	e002      	b.n	8006b90 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006b8a:	bf00      	nop
 8006b8c:	e000      	b.n	8006b90 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006b8e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d115      	bne.n	8006bc4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b9c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006ba4:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	781a      	ldrb	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006bc4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	375c      	adds	r7, #92	; 0x5c
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd90      	pop	{r4, r7, pc}

08006bd0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006bd0:	b590      	push	{r4, r7, lr}
 8006bd2:	b093      	sub	sp, #76	; 0x4c
 8006bd4:	af06      	add	r7, sp, #24
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bde:	2300      	movs	r3, #0
 8006be0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006be8:	23b4      	movs	r3, #180	; 0xb4
 8006bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006bee:	2306      	movs	r3, #6
 8006bf0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8006bf2:	232c      	movs	r3, #44	; 0x2c
 8006bf4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	21ff      	movs	r1, #255	; 0xff
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f7fb ff86 	bl	8002b0c <VL53L0X_WrByte>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006c06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d107      	bne.n	8006c1e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006c0e:	2200      	movs	r2, #0
 8006c10:	214f      	movs	r1, #79	; 0x4f
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f7fb ff7a 	bl	8002b0c <VL53L0X_WrByte>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006c1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d107      	bne.n	8006c36 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006c26:	222c      	movs	r2, #44	; 0x2c
 8006c28:	214e      	movs	r1, #78	; 0x4e
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f7fb ff6e 	bl	8002b0c <VL53L0X_WrByte>
 8006c30:	4603      	mov	r3, r0
 8006c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006c36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d107      	bne.n	8006c4e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006c3e:	2200      	movs	r2, #0
 8006c40:	21ff      	movs	r1, #255	; 0xff
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7fb ff62 	bl	8002b0c <VL53L0X_WrByte>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006c4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d109      	bne.n	8006c6a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	21b6      	movs	r1, #182	; 0xb6
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f7fb ff54 	bl	8002b0c <VL53L0X_WrByte>
 8006c64:	4603      	mov	r3, r0
 8006c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c6e:	e009      	b.n	8006c84 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	3301      	adds	r3, #1
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24
 8006c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d3f1      	bcc.n	8006c70 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d011      	beq.n	8006cb6 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006c92:	e002      	b.n	8006c9a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	3301      	adds	r3, #1
 8006c98:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006c9a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	4413      	add	r3, r2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff fc2a 	bl	80064fc <is_aperture>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d103      	bne.n	8006cb6 <VL53L0X_set_reference_spads+0xe6>
 8006cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d3ee      	bcc.n	8006c94 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8006cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cc6:	79f9      	ldrb	r1, [r7, #7]
 8006cc8:	f107 0214 	add.w	r2, r7, #20
 8006ccc:	9204      	str	r2, [sp, #16]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	9203      	str	r2, [sp, #12]
 8006cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cd4:	9202      	str	r2, [sp, #8]
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	4623      	mov	r3, r4
 8006cde:	4602      	mov	r2, r0
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff fc83 	bl	80065ec <enable_ref_spads>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006cec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10c      	bne.n	8006d0e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	79fa      	ldrb	r2, [r7, #7]
 8006d0a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8006d0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3734      	adds	r7, #52	; 0x34
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd90      	pop	{r4, r7, pc}

08006d1a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	460b      	mov	r3, r1
 8006d24:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	f043 0301 	orr.w	r3, r3, #1
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fb fee4 	bl	8002b0c <VL53L0X_WrByte>
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d104      	bne.n	8006d5a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f9bf 	bl	80070d4 <VL53L0X_measurement_poll_for_completion>
 8006d56:	4603      	mov	r3, r0
 8006d58:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d105      	bne.n	8006d6e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006d62:	2100      	movs	r1, #0
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff fab5 	bl	80062d4 <VL53L0X_ClearInterruptMask>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d106      	bne.n	8006d84 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006d76:	2200      	movs	r2, #0
 8006d78:	2100      	movs	r1, #0
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7fb fec6 	bl	8002b0c <VL53L0X_WrByte>
 8006d80:	4603      	mov	r3, r0
 8006d82:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	4608      	mov	r0, r1
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	4603      	mov	r3, r0
 8006da0:	70fb      	strb	r3, [r7, #3]
 8006da2:	460b      	mov	r3, r1
 8006da4:	70bb      	strb	r3, [r7, #2]
 8006da6:	4613      	mov	r3, r2
 8006da8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006db2:	2201      	movs	r2, #1
 8006db4:	21ff      	movs	r1, #255	; 0xff
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7fb fea8 	bl	8002b0c <VL53L0X_WrByte>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	2100      	movs	r1, #0
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7fb fe9e 	bl	8002b0c <VL53L0X_WrByte>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006dda:	2200      	movs	r2, #0
 8006ddc:	21ff      	movs	r1, #255	; 0xff
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7fb fe94 	bl	8002b0c <VL53L0X_WrByte>
 8006de4:	4603      	mov	r3, r0
 8006de6:	461a      	mov	r2, r3
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d01e      	beq.n	8006e32 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8006df4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d009      	beq.n	8006e10 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	21cb      	movs	r1, #203	; 0xcb
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7fb ff37 	bl	8002c74 <VL53L0X_RdByte>
 8006e06:	4603      	mov	r3, r0
 8006e08:	461a      	mov	r2, r3
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006e10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d02a      	beq.n	8006e6e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006e18:	f107 030e 	add.w	r3, r7, #14
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	21ee      	movs	r1, #238	; 0xee
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7fb ff27 	bl	8002c74 <VL53L0X_RdByte>
 8006e26:	4603      	mov	r3, r0
 8006e28:	461a      	mov	r2, r3
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	73fb      	strb	r3, [r7, #15]
 8006e30:	e01d      	b.n	8006e6e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8006e32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006e3a:	78bb      	ldrb	r3, [r7, #2]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	21cb      	movs	r1, #203	; 0xcb
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7fb fe63 	bl	8002b0c <VL53L0X_WrByte>
 8006e46:	4603      	mov	r3, r0
 8006e48:	461a      	mov	r2, r3
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006e50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00a      	beq.n	8006e6e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006e58:	787b      	ldrb	r3, [r7, #1]
 8006e5a:	2280      	movs	r2, #128	; 0x80
 8006e5c:	21ee      	movs	r1, #238	; 0xee
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7fb fed4 	bl	8002c0c <VL53L0X_UpdateByte>
 8006e64:	4603      	mov	r3, r0
 8006e66:	461a      	mov	r2, r3
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e6e:	2201      	movs	r2, #1
 8006e70:	21ff      	movs	r1, #255	; 0xff
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fb fe4a 	bl	8002b0c <VL53L0X_WrByte>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006e82:	2201      	movs	r2, #1
 8006e84:	2100      	movs	r1, #0
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7fb fe40 	bl	8002b0c <VL53L0X_WrByte>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	461a      	mov	r2, r3
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006e96:	2200      	movs	r2, #0
 8006e98:	21ff      	movs	r1, #255	; 0xff
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fb fe36 	bl	8002b0c <VL53L0X_WrByte>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	f023 0310 	bic.w	r3, r3, #16
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	701a      	strb	r2, [r3, #0]

	return Status;
 8006eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b08a      	sub	sp, #40	; 0x28
 8006ec6:	af04      	add	r7, sp, #16
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	4611      	mov	r1, r2
 8006ece:	461a      	mov	r2, r3
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	71fb      	strb	r3, [r7, #7]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006eec:	79bb      	ldrb	r3, [r7, #6]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006ef8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006efa:	2201      	movs	r2, #1
 8006efc:	2101      	movs	r1, #1
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f7fb fe04 	bl	8002b0c <VL53L0X_WrByte>
 8006f04:	4603      	mov	r3, r0
 8006f06:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006f08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d105      	bne.n	8006f1c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8006f10:	2140      	movs	r1, #64	; 0x40
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7ff ff01 	bl	8006d1a <VL53L0X_perform_single_ref_calibration>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006f1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d115      	bne.n	8006f50 <VL53L0X_perform_vhv_calibration+0x8e>
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d112      	bne.n	8006f50 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006f2a:	7d39      	ldrb	r1, [r7, #20]
 8006f2c:	7d7a      	ldrb	r2, [r7, #21]
 8006f2e:	2300      	movs	r3, #0
 8006f30:	9303      	str	r3, [sp, #12]
 8006f32:	2301      	movs	r3, #1
 8006f34:	9302      	str	r3, [sp, #8]
 8006f36:	f107 0313 	add.w	r3, r7, #19
 8006f3a:	9301      	str	r3, [sp, #4]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	460b      	mov	r3, r1
 8006f42:	2101      	movs	r1, #1
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f7ff ff23 	bl	8006d90 <VL53L0X_ref_calibration_io>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	75fb      	strb	r3, [r7, #23]
 8006f4e:	e002      	b.n	8006f56 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2200      	movs	r2, #0
 8006f54:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d112      	bne.n	8006f84 <VL53L0X_perform_vhv_calibration+0xc2>
 8006f5e:	79bb      	ldrb	r3, [r7, #6]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00f      	beq.n	8006f84 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006f64:	7dbb      	ldrb	r3, [r7, #22]
 8006f66:	461a      	mov	r2, r3
 8006f68:	2101      	movs	r1, #1
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7fb fdce 	bl	8002b0c <VL53L0X_WrByte>
 8006f70:	4603      	mov	r3, r0
 8006f72:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006f74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d103      	bne.n	8006f84 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	7dba      	ldrb	r2, [r7, #22]
 8006f80:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006f84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08a      	sub	sp, #40	; 0x28
 8006f94:	af04      	add	r7, sp, #16
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	71fb      	strb	r3, [r7, #7]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006fb6:	79bb      	ldrb	r3, [r7, #6]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006fc2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7fb fd9f 	bl	8002b0c <VL53L0X_WrByte>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d105      	bne.n	8006fe6 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006fda:	2100      	movs	r1, #0
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f7ff fe9c 	bl	8006d1a <VL53L0X_perform_single_ref_calibration>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006fe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d115      	bne.n	800701a <VL53L0X_perform_phase_calibration+0x8a>
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d112      	bne.n	800701a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006ff4:	7d39      	ldrb	r1, [r7, #20]
 8006ff6:	7d7a      	ldrb	r2, [r7, #21]
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	9303      	str	r3, [sp, #12]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	9302      	str	r3, [sp, #8]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	9301      	str	r3, [sp, #4]
 8007004:	f107 0313 	add.w	r3, r7, #19
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	460b      	mov	r3, r1
 800700c:	2101      	movs	r1, #1
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f7ff febe 	bl	8006d90 <VL53L0X_ref_calibration_io>
 8007014:	4603      	mov	r3, r0
 8007016:	75fb      	strb	r3, [r7, #23]
 8007018:	e002      	b.n	8007020 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2200      	movs	r2, #0
 800701e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007020:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d112      	bne.n	800704e <VL53L0X_perform_phase_calibration+0xbe>
 8007028:	79bb      	ldrb	r3, [r7, #6]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00f      	beq.n	800704e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800702e:	7dbb      	ldrb	r3, [r7, #22]
 8007030:	461a      	mov	r2, r3
 8007032:	2101      	movs	r1, #1
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7fb fd69 	bl	8002b0c <VL53L0X_WrByte>
 800703a:	4603      	mov	r3, r0
 800703c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800703e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d103      	bne.n	800704e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	7dba      	ldrb	r2, [r7, #22]
 800704a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800704e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3718      	adds	r7, #24
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b086      	sub	sp, #24
 800705e:	af00      	add	r7, sp, #0
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	607a      	str	r2, [r7, #4]
 8007066:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007068:	2300      	movs	r3, #0
 800706a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800706c:	2300      	movs	r3, #0
 800706e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007076:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8007078:	78fa      	ldrb	r2, [r7, #3]
 800707a:	2300      	movs	r3, #0
 800707c:	68b9      	ldr	r1, [r7, #8]
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f7ff ff1f 	bl	8006ec2 <VL53L0X_perform_vhv_calibration>
 8007084:	4603      	mov	r3, r0
 8007086:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007088:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d107      	bne.n	80070a0 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8007090:	78fa      	ldrb	r2, [r7, #3]
 8007092:	2300      	movs	r3, #0
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f7ff ff7a 	bl	8006f90 <VL53L0X_perform_phase_calibration>
 800709c:	4603      	mov	r3, r0
 800709e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80070a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10f      	bne.n	80070c8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80070a8:	7dbb      	ldrb	r3, [r7, #22]
 80070aa:	461a      	mov	r2, r3
 80070ac:	2101      	movs	r1, #1
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f7fb fd2c 	bl	8002b0c <VL53L0X_WrByte>
 80070b4:	4603      	mov	r3, r0
 80070b6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80070b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d103      	bne.n	80070c8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	7dba      	ldrb	r2, [r7, #22]
 80070c4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80070c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070dc:	2300      	movs	r3, #0
 80070de:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80070e4:	2300      	movs	r3, #0
 80070e6:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80070e8:	f107 030f 	add.w	r3, r7, #15
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7fe fe02 	bl	8005cf8 <VL53L0X_GetMeasurementDataReady>
 80070f4:	4603      	mov	r3, r0
 80070f6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80070f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d110      	bne.n	8007122 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007100:	7bfb      	ldrb	r3, [r7, #15]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d00f      	beq.n	8007126 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	3301      	adds	r3, #1
 800710a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007112:	d302      	bcc.n	800711a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007114:	23f9      	movs	r3, #249	; 0xf9
 8007116:	75fb      	strb	r3, [r7, #23]
			break;
 8007118:	e006      	b.n	8007128 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fb fe48 	bl	8002db0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007120:	e7e2      	b.n	80070e8 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8007122:	bf00      	nop
 8007124:	e000      	b.n	8007128 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8007126:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8007128:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8007142:	79fb      	ldrb	r3, [r7, #7]
 8007144:	3301      	adds	r3, #1
 8007146:	b2db      	uxtb	r3, r3
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800715a:	b480      	push	{r7}
 800715c:	b085      	sub	sp, #20
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8007166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800716a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800716c:	e002      	b.n	8007174 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	089b      	lsrs	r3, r3, #2
 8007172:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	429a      	cmp	r2, r3
 800717a:	d8f8      	bhi.n	800716e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800717c:	e017      	b.n	80071ae <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4413      	add	r3, r2
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	429a      	cmp	r2, r3
 8007188:	d30b      	bcc.n	80071a2 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	4413      	add	r3, r2
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	085b      	lsrs	r3, r3, #1
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	4413      	add	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	e002      	b.n	80071a8 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	085b      	lsrs	r3, r3, #1
 80071a6:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	089b      	lsrs	r3, r3, #2
 80071ac:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e4      	bne.n	800717e <VL53L0X_isqrt+0x24>
	}

	return res;
 80071b4:	68fb      	ldr	r3, [r7, #12]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b086      	sub	sp, #24
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80071ce:	2200      	movs	r2, #0
 80071d0:	2183      	movs	r1, #131	; 0x83
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7fb fc9a 	bl	8002b0c <VL53L0X_WrByte>
 80071d8:	4603      	mov	r3, r0
 80071da:	461a      	mov	r2, r3
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	4313      	orrs	r3, r2
 80071e0:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80071e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d11e      	bne.n	8007228 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80071ee:	f107 030f 	add.w	r3, r7, #15
 80071f2:	461a      	mov	r2, r3
 80071f4:	2183      	movs	r1, #131	; 0x83
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7fb fd3c 	bl	8002c74 <VL53L0X_RdByte>
 80071fc:	4603      	mov	r3, r0
 80071fe:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <VL53L0X_device_read_strobe+0x5a>
 8007206:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d106      	bne.n	800721c <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3301      	adds	r3, #1
 8007212:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800721a:	d3e8      	bcc.n	80071ee <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007222:	d301      	bcc.n	8007228 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007224:	23f9      	movs	r3, #249	; 0xf9
 8007226:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8007228:	2201      	movs	r2, #1
 800722a:	2183      	movs	r1, #131	; 0x83
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7fb fc6d 	bl	8002b0c <VL53L0X_WrByte>
 8007232:	4603      	mov	r3, r0
 8007234:	461a      	mov	r2, r3
 8007236:	7dfb      	ldrb	r3, [r7, #23]
 8007238:	4313      	orrs	r3, r2
 800723a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800723c:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007240:	4618      	mov	r0, r3
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b098      	sub	sp, #96	; 0x60
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007254:	2300      	movs	r3, #0
 8007256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8007278:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800727c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8007282:	2300      	movs	r3, #0
 8007284:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8007290:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8007294:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007298:	2b07      	cmp	r3, #7
 800729a:	f000 8408 	beq.w	8007aae <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800729e:	2201      	movs	r2, #1
 80072a0:	2180      	movs	r1, #128	; 0x80
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fb fc32 	bl	8002b0c <VL53L0X_WrByte>
 80072a8:	4603      	mov	r3, r0
 80072aa:	461a      	mov	r2, r3
 80072ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072b0:	4313      	orrs	r3, r2
 80072b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80072b6:	2201      	movs	r2, #1
 80072b8:	21ff      	movs	r1, #255	; 0xff
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7fb fc26 	bl	8002b0c <VL53L0X_WrByte>
 80072c0:	4603      	mov	r3, r0
 80072c2:	461a      	mov	r2, r3
 80072c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80072ce:	2200      	movs	r2, #0
 80072d0:	2100      	movs	r1, #0
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7fb fc1a 	bl	8002b0c <VL53L0X_WrByte>
 80072d8:	4603      	mov	r3, r0
 80072da:	461a      	mov	r2, r3
 80072dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80072e6:	2206      	movs	r2, #6
 80072e8:	21ff      	movs	r1, #255	; 0xff
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7fb fc0e 	bl	8002b0c <VL53L0X_WrByte>
 80072f0:	4603      	mov	r3, r0
 80072f2:	461a      	mov	r2, r3
 80072f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072f8:	4313      	orrs	r3, r2
 80072fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80072fe:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007302:	461a      	mov	r2, r3
 8007304:	2183      	movs	r1, #131	; 0x83
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7fb fcb4 	bl	8002c74 <VL53L0X_RdByte>
 800730c:	4603      	mov	r3, r0
 800730e:	461a      	mov	r2, r3
 8007310:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007314:	4313      	orrs	r3, r2
 8007316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800731a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800731e:	f043 0304 	orr.w	r3, r3, #4
 8007322:	b2db      	uxtb	r3, r3
 8007324:	461a      	mov	r2, r3
 8007326:	2183      	movs	r1, #131	; 0x83
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7fb fbef 	bl	8002b0c <VL53L0X_WrByte>
 800732e:	4603      	mov	r3, r0
 8007330:	461a      	mov	r2, r3
 8007332:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007336:	4313      	orrs	r3, r2
 8007338:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800733c:	2207      	movs	r2, #7
 800733e:	21ff      	movs	r1, #255	; 0xff
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7fb fbe3 	bl	8002b0c <VL53L0X_WrByte>
 8007346:	4603      	mov	r3, r0
 8007348:	461a      	mov	r2, r3
 800734a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800734e:	4313      	orrs	r3, r2
 8007350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8007354:	2201      	movs	r2, #1
 8007356:	2181      	movs	r1, #129	; 0x81
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7fb fbd7 	bl	8002b0c <VL53L0X_WrByte>
 800735e:	4603      	mov	r3, r0
 8007360:	461a      	mov	r2, r3
 8007362:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007366:	4313      	orrs	r3, r2
 8007368:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7fb fd1f 	bl	8002db0 <VL53L0X_PollingDelay>
 8007372:	4603      	mov	r3, r0
 8007374:	461a      	mov	r2, r3
 8007376:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800737a:	4313      	orrs	r3, r2
 800737c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007380:	2201      	movs	r2, #1
 8007382:	2180      	movs	r1, #128	; 0x80
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7fb fbc1 	bl	8002b0c <VL53L0X_WrByte>
 800738a:	4603      	mov	r3, r0
 800738c:	461a      	mov	r2, r3
 800738e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007392:	4313      	orrs	r3, r2
 8007394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8007398:	78fb      	ldrb	r3, [r7, #3]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 8098 	beq.w	80074d4 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80073a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073a8:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f040 8091 	bne.w	80074d4 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80073b2:	226b      	movs	r2, #107	; 0x6b
 80073b4:	2194      	movs	r1, #148	; 0x94
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fb fba8 	bl	8002b0c <VL53L0X_WrByte>
 80073bc:	4603      	mov	r3, r0
 80073be:	461a      	mov	r2, r3
 80073c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073c4:	4313      	orrs	r3, r2
 80073c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff fef9 	bl	80071c2 <VL53L0X_device_read_strobe>
 80073d0:	4603      	mov	r3, r0
 80073d2:	461a      	mov	r2, r3
 80073d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073d8:	4313      	orrs	r3, r2
 80073da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80073de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80073e2:	461a      	mov	r2, r3
 80073e4:	2190      	movs	r1, #144	; 0x90
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7fb fca6 	bl	8002d38 <VL53L0X_RdDWord>
 80073ec:	4603      	mov	r3, r0
 80073ee:	461a      	mov	r2, r3
 80073f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	0a1b      	lsrs	r3, r3, #8
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007404:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	0bdb      	lsrs	r3, r3, #15
 800740c:	b2db      	uxtb	r3, r3
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8007416:	2224      	movs	r2, #36	; 0x24
 8007418:	2194      	movs	r1, #148	; 0x94
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7fb fb76 	bl	8002b0c <VL53L0X_WrByte>
 8007420:	4603      	mov	r3, r0
 8007422:	461a      	mov	r2, r3
 8007424:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007428:	4313      	orrs	r3, r2
 800742a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7ff fec7 	bl	80071c2 <VL53L0X_device_read_strobe>
 8007434:	4603      	mov	r3, r0
 8007436:	461a      	mov	r2, r3
 8007438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800743c:	4313      	orrs	r3, r2
 800743e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007442:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007446:	461a      	mov	r2, r3
 8007448:	2190      	movs	r1, #144	; 0x90
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fb fc74 	bl	8002d38 <VL53L0X_RdDWord>
 8007450:	4603      	mov	r3, r0
 8007452:	461a      	mov	r2, r3
 8007454:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007458:	4313      	orrs	r3, r2
 800745a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	0e1b      	lsrs	r3, r3, #24
 8007462:	b2db      	uxtb	r3, r3
 8007464:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	0c1b      	lsrs	r3, r3, #16
 800746a:	b2db      	uxtb	r3, r3
 800746c:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	0a1b      	lsrs	r3, r3, #8
 8007472:	b2db      	uxtb	r3, r3
 8007474:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	b2db      	uxtb	r3, r3
 800747a:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800747c:	2225      	movs	r2, #37	; 0x25
 800747e:	2194      	movs	r1, #148	; 0x94
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7fb fb43 	bl	8002b0c <VL53L0X_WrByte>
 8007486:	4603      	mov	r3, r0
 8007488:	461a      	mov	r2, r3
 800748a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800748e:	4313      	orrs	r3, r2
 8007490:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff fe94 	bl	80071c2 <VL53L0X_device_read_strobe>
 800749a:	4603      	mov	r3, r0
 800749c:	461a      	mov	r2, r3
 800749e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074a2:	4313      	orrs	r3, r2
 80074a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80074a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074ac:	461a      	mov	r2, r3
 80074ae:	2190      	movs	r1, #144	; 0x90
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7fb fc41 	bl	8002d38 <VL53L0X_RdDWord>
 80074b6:	4603      	mov	r3, r0
 80074b8:	461a      	mov	r2, r3
 80074ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074be:	4313      	orrs	r3, r2
 80074c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	0e1b      	lsrs	r3, r3, #24
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	0c1b      	lsrs	r3, r3, #16
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 8189 	beq.w	80077f2 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80074e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80074e4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f040 8182 	bne.w	80077f2 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80074ee:	2202      	movs	r2, #2
 80074f0:	2194      	movs	r1, #148	; 0x94
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7fb fb0a 	bl	8002b0c <VL53L0X_WrByte>
 80074f8:	4603      	mov	r3, r0
 80074fa:	461a      	mov	r2, r3
 80074fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007500:	4313      	orrs	r3, r2
 8007502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff fe5b 	bl	80071c2 <VL53L0X_device_read_strobe>
 800750c:	4603      	mov	r3, r0
 800750e:	461a      	mov	r2, r3
 8007510:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007514:	4313      	orrs	r3, r2
 8007516:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800751a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800751e:	461a      	mov	r2, r3
 8007520:	2190      	movs	r1, #144	; 0x90
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fb fba6 	bl	8002c74 <VL53L0X_RdByte>
 8007528:	4603      	mov	r3, r0
 800752a:	461a      	mov	r2, r3
 800752c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007530:	4313      	orrs	r3, r2
 8007532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007536:	227b      	movs	r2, #123	; 0x7b
 8007538:	2194      	movs	r1, #148	; 0x94
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7fb fae6 	bl	8002b0c <VL53L0X_WrByte>
 8007540:	4603      	mov	r3, r0
 8007542:	461a      	mov	r2, r3
 8007544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007548:	4313      	orrs	r3, r2
 800754a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff fe37 	bl	80071c2 <VL53L0X_device_read_strobe>
 8007554:	4603      	mov	r3, r0
 8007556:	461a      	mov	r2, r3
 8007558:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800755c:	4313      	orrs	r3, r2
 800755e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8007562:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8007566:	461a      	mov	r2, r3
 8007568:	2190      	movs	r1, #144	; 0x90
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7fb fb82 	bl	8002c74 <VL53L0X_RdByte>
 8007570:	4603      	mov	r3, r0
 8007572:	461a      	mov	r2, r3
 8007574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007578:	4313      	orrs	r3, r2
 800757a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800757e:	2277      	movs	r2, #119	; 0x77
 8007580:	2194      	movs	r1, #148	; 0x94
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7fb fac2 	bl	8002b0c <VL53L0X_WrByte>
 8007588:	4603      	mov	r3, r0
 800758a:	461a      	mov	r2, r3
 800758c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007590:	4313      	orrs	r3, r2
 8007592:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7ff fe13 	bl	80071c2 <VL53L0X_device_read_strobe>
 800759c:	4603      	mov	r3, r0
 800759e:	461a      	mov	r2, r3
 80075a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075a4:	4313      	orrs	r3, r2
 80075a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80075aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075ae:	461a      	mov	r2, r3
 80075b0:	2190      	movs	r1, #144	; 0x90
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fb fbc0 	bl	8002d38 <VL53L0X_RdDWord>
 80075b8:	4603      	mov	r3, r0
 80075ba:	461a      	mov	r2, r3
 80075bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075c0:	4313      	orrs	r3, r2
 80075c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	0e5b      	lsrs	r3, r3, #25
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	0c9b      	lsrs	r3, r3, #18
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	0adb      	lsrs	r3, r3, #11
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	091b      	lsrs	r3, r3, #4
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80075fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007600:	b2db      	uxtb	r3, r3
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	b2db      	uxtb	r3, r3
 8007606:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800760a:	b2db      	uxtb	r3, r3
 800760c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8007610:	2278      	movs	r2, #120	; 0x78
 8007612:	2194      	movs	r1, #148	; 0x94
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7fb fa79 	bl	8002b0c <VL53L0X_WrByte>
 800761a:	4603      	mov	r3, r0
 800761c:	461a      	mov	r2, r3
 800761e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007622:	4313      	orrs	r3, r2
 8007624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff fdca 	bl	80071c2 <VL53L0X_device_read_strobe>
 800762e:	4603      	mov	r3, r0
 8007630:	461a      	mov	r2, r3
 8007632:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007636:	4313      	orrs	r3, r2
 8007638:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800763c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007640:	461a      	mov	r2, r3
 8007642:	2190      	movs	r1, #144	; 0x90
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7fb fb77 	bl	8002d38 <VL53L0X_RdDWord>
 800764a:	4603      	mov	r3, r0
 800764c:	461a      	mov	r2, r3
 800764e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007652:	4313      	orrs	r3, r2
 8007654:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	0f5b      	lsrs	r3, r3, #29
 800765c:	b2db      	uxtb	r3, r3
 800765e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007662:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8007664:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007668:	4413      	add	r3, r2
 800766a:	b2db      	uxtb	r3, r3
 800766c:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	0d9b      	lsrs	r3, r3, #22
 8007672:	b2db      	uxtb	r3, r3
 8007674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007678:	b2db      	uxtb	r3, r3
 800767a:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	0bdb      	lsrs	r3, r3, #15
 8007680:	b2db      	uxtb	r3, r3
 8007682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007686:	b2db      	uxtb	r3, r3
 8007688:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	0a1b      	lsrs	r3, r3, #8
 800768e:	b2db      	uxtb	r3, r3
 8007690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007694:	b2db      	uxtb	r3, r3
 8007696:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	085b      	lsrs	r3, r3, #1
 800769c:	b2db      	uxtb	r3, r3
 800769e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	019b      	lsls	r3, r3, #6
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80076b8:	2279      	movs	r2, #121	; 0x79
 80076ba:	2194      	movs	r1, #148	; 0x94
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7fb fa25 	bl	8002b0c <VL53L0X_WrByte>
 80076c2:	4603      	mov	r3, r0
 80076c4:	461a      	mov	r2, r3
 80076c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff fd76 	bl	80071c2 <VL53L0X_device_read_strobe>
 80076d6:	4603      	mov	r3, r0
 80076d8:	461a      	mov	r2, r3
 80076da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076de:	4313      	orrs	r3, r2
 80076e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80076e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076e8:	461a      	mov	r2, r3
 80076ea:	2190      	movs	r1, #144	; 0x90
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7fb fb23 	bl	8002d38 <VL53L0X_RdDWord>
 80076f2:	4603      	mov	r3, r0
 80076f4:	461a      	mov	r2, r3
 80076f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076fa:	4313      	orrs	r3, r2
 80076fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	0e9b      	lsrs	r3, r3, #26
 8007704:	b2db      	uxtb	r3, r3
 8007706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800770a:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800770c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007710:	4413      	add	r3, r2
 8007712:	b2db      	uxtb	r3, r3
 8007714:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	0cdb      	lsrs	r3, r3, #19
 800771a:	b2db      	uxtb	r3, r3
 800771c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007720:	b2db      	uxtb	r3, r3
 8007722:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	0b1b      	lsrs	r3, r3, #12
 8007728:	b2db      	uxtb	r3, r3
 800772a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800772e:	b2db      	uxtb	r3, r3
 8007730:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	095b      	lsrs	r3, r3, #5
 8007736:	b2db      	uxtb	r3, r3
 8007738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800773c:	b2db      	uxtb	r3, r3
 800773e:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8007740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007742:	b2db      	uxtb	r3, r3
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	b2db      	uxtb	r3, r3
 8007748:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007752:	227a      	movs	r2, #122	; 0x7a
 8007754:	2194      	movs	r1, #148	; 0x94
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7fb f9d8 	bl	8002b0c <VL53L0X_WrByte>
 800775c:	4603      	mov	r3, r0
 800775e:	461a      	mov	r2, r3
 8007760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007764:	4313      	orrs	r3, r2
 8007766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7ff fd29 	bl	80071c2 <VL53L0X_device_read_strobe>
 8007770:	4603      	mov	r3, r0
 8007772:	461a      	mov	r2, r3
 8007774:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007778:	4313      	orrs	r3, r2
 800777a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800777e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007782:	461a      	mov	r2, r3
 8007784:	2190      	movs	r1, #144	; 0x90
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fb fad6 	bl	8002d38 <VL53L0X_RdDWord>
 800778c:	4603      	mov	r3, r0
 800778e:	461a      	mov	r2, r3
 8007790:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007794:	4313      	orrs	r3, r2
 8007796:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	0f9b      	lsrs	r3, r3, #30
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a4:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80077a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077aa:	4413      	add	r3, r2
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80077b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b2:	0ddb      	lsrs	r3, r3, #23
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	0c1b      	lsrs	r3, r3, #16
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80077cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ce:	0a5b      	lsrs	r3, r3, #9
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80077dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077de:	089b      	lsrs	r3, r3, #2
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80077ec:	2300      	movs	r3, #0
 80077ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 80f1 	beq.w	80079e0 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80077fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007802:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007806:	2b00      	cmp	r3, #0
 8007808:	f040 80ea 	bne.w	80079e0 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800780c:	227b      	movs	r2, #123	; 0x7b
 800780e:	2194      	movs	r1, #148	; 0x94
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7fb f97b 	bl	8002b0c <VL53L0X_WrByte>
 8007816:	4603      	mov	r3, r0
 8007818:	461a      	mov	r2, r3
 800781a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800781e:	4313      	orrs	r3, r2
 8007820:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff fccc 	bl	80071c2 <VL53L0X_device_read_strobe>
 800782a:	4603      	mov	r3, r0
 800782c:	461a      	mov	r2, r3
 800782e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007832:	4313      	orrs	r3, r2
 8007834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8007838:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800783c:	461a      	mov	r2, r3
 800783e:	2190      	movs	r1, #144	; 0x90
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7fb fa79 	bl	8002d38 <VL53L0X_RdDWord>
 8007846:	4603      	mov	r3, r0
 8007848:	461a      	mov	r2, r3
 800784a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800784e:	4313      	orrs	r3, r2
 8007850:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007854:	227c      	movs	r2, #124	; 0x7c
 8007856:	2194      	movs	r1, #148	; 0x94
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7fb f957 	bl	8002b0c <VL53L0X_WrByte>
 800785e:	4603      	mov	r3, r0
 8007860:	461a      	mov	r2, r3
 8007862:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007866:	4313      	orrs	r3, r2
 8007868:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff fca8 	bl	80071c2 <VL53L0X_device_read_strobe>
 8007872:	4603      	mov	r3, r0
 8007874:	461a      	mov	r2, r3
 8007876:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800787a:	4313      	orrs	r3, r2
 800787c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8007880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007884:	461a      	mov	r2, r3
 8007886:	2190      	movs	r1, #144	; 0x90
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7fb fa55 	bl	8002d38 <VL53L0X_RdDWord>
 800788e:	4603      	mov	r3, r0
 8007890:	461a      	mov	r2, r3
 8007892:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007896:	4313      	orrs	r3, r2
 8007898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800789c:	2273      	movs	r2, #115	; 0x73
 800789e:	2194      	movs	r1, #148	; 0x94
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7fb f933 	bl	8002b0c <VL53L0X_WrByte>
 80078a6:	4603      	mov	r3, r0
 80078a8:	461a      	mov	r2, r3
 80078aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078ae:	4313      	orrs	r3, r2
 80078b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff fc84 	bl	80071c2 <VL53L0X_device_read_strobe>
 80078ba:	4603      	mov	r3, r0
 80078bc:	461a      	mov	r2, r3
 80078be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078c2:	4313      	orrs	r3, r2
 80078c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80078c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078cc:	461a      	mov	r2, r3
 80078ce:	2190      	movs	r1, #144	; 0x90
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7fb fa31 	bl	8002d38 <VL53L0X_RdDWord>
 80078d6:	4603      	mov	r3, r0
 80078d8:	461a      	mov	r2, r3
 80078da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078de:	4313      	orrs	r3, r2
 80078e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80078ec:	2274      	movs	r2, #116	; 0x74
 80078ee:	2194      	movs	r1, #148	; 0x94
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7fb f90b 	bl	8002b0c <VL53L0X_WrByte>
 80078f6:	4603      	mov	r3, r0
 80078f8:	461a      	mov	r2, r3
 80078fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078fe:	4313      	orrs	r3, r2
 8007900:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff fc5c 	bl	80071c2 <VL53L0X_device_read_strobe>
 800790a:	4603      	mov	r3, r0
 800790c:	461a      	mov	r2, r3
 800790e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007912:	4313      	orrs	r3, r2
 8007914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800791c:	461a      	mov	r2, r3
 800791e:	2190      	movs	r1, #144	; 0x90
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7fb fa09 	bl	8002d38 <VL53L0X_RdDWord>
 8007926:	4603      	mov	r3, r0
 8007928:	461a      	mov	r2, r3
 800792a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800792e:	4313      	orrs	r3, r2
 8007930:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8007934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007936:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8007938:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800793a:	4313      	orrs	r3, r2
 800793c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800793e:	2275      	movs	r2, #117	; 0x75
 8007940:	2194      	movs	r1, #148	; 0x94
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7fb f8e2 	bl	8002b0c <VL53L0X_WrByte>
 8007948:	4603      	mov	r3, r0
 800794a:	461a      	mov	r2, r3
 800794c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007950:	4313      	orrs	r3, r2
 8007952:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7ff fc33 	bl	80071c2 <VL53L0X_device_read_strobe>
 800795c:	4603      	mov	r3, r0
 800795e:	461a      	mov	r2, r3
 8007960:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007964:	4313      	orrs	r3, r2
 8007966:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800796a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800796e:	461a      	mov	r2, r3
 8007970:	2190      	movs	r1, #144	; 0x90
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7fb f9e0 	bl	8002d38 <VL53L0X_RdDWord>
 8007978:	4603      	mov	r3, r0
 800797a:	461a      	mov	r2, r3
 800797c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007980:	4313      	orrs	r3, r2
 8007982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800798a:	b29b      	uxth	r3, r3
 800798c:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800798e:	2276      	movs	r2, #118	; 0x76
 8007990:	2194      	movs	r1, #148	; 0x94
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7fb f8ba 	bl	8002b0c <VL53L0X_WrByte>
 8007998:	4603      	mov	r3, r0
 800799a:	461a      	mov	r2, r3
 800799c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079a0:	4313      	orrs	r3, r2
 80079a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff fc0b 	bl	80071c2 <VL53L0X_device_read_strobe>
 80079ac:	4603      	mov	r3, r0
 80079ae:	461a      	mov	r2, r3
 80079b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80079ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079be:	461a      	mov	r2, r3
 80079c0:	2190      	movs	r1, #144	; 0x90
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7fb f9b8 	bl	8002d38 <VL53L0X_RdDWord>
 80079c8:	4603      	mov	r3, r0
 80079ca:	461a      	mov	r2, r3
 80079cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079d0:	4313      	orrs	r3, r2
 80079d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80079da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079dc:	4313      	orrs	r3, r2
 80079de:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80079e0:	2200      	movs	r2, #0
 80079e2:	2181      	movs	r1, #129	; 0x81
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7fb f891 	bl	8002b0c <VL53L0X_WrByte>
 80079ea:	4603      	mov	r3, r0
 80079ec:	461a      	mov	r2, r3
 80079ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079f2:	4313      	orrs	r3, r2
 80079f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80079f8:	2206      	movs	r2, #6
 80079fa:	21ff      	movs	r1, #255	; 0xff
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7fb f885 	bl	8002b0c <VL53L0X_WrByte>
 8007a02:	4603      	mov	r3, r0
 8007a04:	461a      	mov	r2, r3
 8007a06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007a10:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007a14:	461a      	mov	r2, r3
 8007a16:	2183      	movs	r1, #131	; 0x83
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7fb f92b 	bl	8002c74 <VL53L0X_RdByte>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	461a      	mov	r2, r3
 8007a22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a26:	4313      	orrs	r3, r2
 8007a28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007a2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a30:	f023 0304 	bic.w	r3, r3, #4
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	2183      	movs	r1, #131	; 0x83
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7fb f866 	bl	8002b0c <VL53L0X_WrByte>
 8007a40:	4603      	mov	r3, r0
 8007a42:	461a      	mov	r2, r3
 8007a44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a4e:	2201      	movs	r2, #1
 8007a50:	21ff      	movs	r1, #255	; 0xff
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7fb f85a 	bl	8002b0c <VL53L0X_WrByte>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007a66:	2201      	movs	r2, #1
 8007a68:	2100      	movs	r1, #0
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7fb f84e 	bl	8002b0c <VL53L0X_WrByte>
 8007a70:	4603      	mov	r3, r0
 8007a72:	461a      	mov	r2, r3
 8007a74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007a7e:	2200      	movs	r2, #0
 8007a80:	21ff      	movs	r1, #255	; 0xff
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7fb f842 	bl	8002b0c <VL53L0X_WrByte>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a90:	4313      	orrs	r3, r2
 8007a92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007a96:	2200      	movs	r2, #0
 8007a98:	2180      	movs	r1, #128	; 0x80
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fb f836 	bl	8002b0c <VL53L0X_WrByte>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007aae:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f040 808f 	bne.w	8007bd6 <VL53L0X_get_info_from_device+0x98e>
 8007ab8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007abc:	2b07      	cmp	r3, #7
 8007abe:	f000 808a 	beq.w	8007bd6 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007ac2:	78fb      	ldrb	r3, [r7, #3]
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d024      	beq.n	8007b16 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007acc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ad0:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d11e      	bne.n	8007b16 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007ade:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007ae8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007aec:	2300      	movs	r3, #0
 8007aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007af0:	e00e      	b.n	8007b10 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8007af2:	f107 0208 	add.w	r2, r7, #8
 8007af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007af8:	4413      	add	r3, r2
 8007afa:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007b06:	460a      	mov	r2, r1
 8007b08:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b12:	2b05      	cmp	r3, #5
 8007b14:	dded      	ble.n	8007af2 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007b16:	78fb      	ldrb	r3, [r7, #3]
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d018      	beq.n	8007b52 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007b20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b24:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d112      	bne.n	8007b52 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b2c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b36:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	33f3      	adds	r3, #243	; 0xf3
 8007b44:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007b46:	f107 0310 	add.w	r3, r7, #16
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b4e:	f011 f90b 	bl	8018d68 <strcpy>

		}

		if (((option & 4) == 4) &&
 8007b52:	78fb      	ldrb	r3, [r7, #3]
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d030      	beq.n	8007bbe <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007b5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b60:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d12a      	bne.n	8007bbe <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b7a:	025b      	lsls	r3, r3, #9
 8007b7c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b82:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007b86:	2300      	movs	r3, #0
 8007b88:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d011      	beq.n	8007bb6 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8007b92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8007b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ba0:	fb02 f303 	mul.w	r3, r2, r3
 8007ba4:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8007ba6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8007baa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007bae:	425b      	negs	r3, r3
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8007bb6:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007bbe:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007bcc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007bd6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3760      	adds	r7, #96	; 0x60
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b087      	sub	sp, #28
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	460b      	mov	r3, r1
 8007bec:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8007bee:	f240 6277 	movw	r2, #1655	; 0x677
 8007bf2:	f04f 0300 	mov.w	r3, #0
 8007bf6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8007bfa:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007bfe:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	fb02 f303 	mul.w	r3, r2, r3
 8007c0e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007c10:	68bb      	ldr	r3, [r7, #8]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b087      	sub	sp, #28
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007c26:	2300      	movs	r3, #0
 8007c28:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d017      	beq.n	8007c68 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007c3e:	e005      	b.n	8007c4c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007c46:	89fb      	ldrh	r3, [r7, #14]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1f4      	bne.n	8007c40 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007c56:	89fb      	ldrh	r3, [r7, #14]
 8007c58:	021b      	lsls	r3, r3, #8
 8007c5a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007c64:	4413      	add	r3, r2
 8007c66:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007c68:	8afb      	ldrh	r3, [r7, #22]

}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	371c      	adds	r7, #28
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007c84:	88fb      	ldrh	r3, [r7, #6]
 8007c86:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007c88:	88fa      	ldrh	r2, [r7, #6]
 8007c8a:	0a12      	lsrs	r2, r2, #8
 8007c8c:	b292      	uxth	r2, r2
 8007c8e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007c90:	3301      	adds	r3, #1
 8007c92:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007c94:	68fb      	ldr	r3, [r7, #12]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
	...

08007ca4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f7ff ff91 	bl	8007be2 <VL53L0X_calc_macro_period_ps>
 8007cc0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007cc8:	4a0a      	ldr	r2, [pc, #40]	; (8007cf4 <VL53L0X_calc_timeout_mclks+0x50>)
 8007cca:	fba2 2303 	umull	r2, r3, r2, r3
 8007cce:	099b      	lsrs	r3, r3, #6
 8007cd0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cd8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	085b      	lsrs	r3, r3, #1
 8007ce0:	441a      	add	r2, r3
	timeout_period_mclks =
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8007cea:	69fb      	ldr	r3, [r7, #28]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3720      	adds	r7, #32
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	10624dd3 	.word	0x10624dd3

08007cf8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	807b      	strh	r3, [r7, #2]
 8007d04:	4613      	mov	r3, r2
 8007d06:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007d0c:	787b      	ldrb	r3, [r7, #1]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7ff ff66 	bl	8007be2 <VL53L0X_calc_macro_period_ps>
 8007d16:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d1e:	4a0a      	ldr	r2, [pc, #40]	; (8007d48 <VL53L0X_calc_timeout_us+0x50>)
 8007d20:	fba2 2303 	umull	r2, r3, r2, r3
 8007d24:	099b      	lsrs	r3, r3, #6
 8007d26:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007d28:	887b      	ldrh	r3, [r7, #2]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	fb02 f303 	mul.w	r3, r2, r3
 8007d30:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8007d34:	4a04      	ldr	r2, [pc, #16]	; (8007d48 <VL53L0X_calc_timeout_us+0x50>)
 8007d36:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3a:	099b      	lsrs	r3, r3, #6
 8007d3c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007d3e:	697b      	ldr	r3, [r7, #20]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	10624dd3 	.word	0x10624dd3

08007d4c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08c      	sub	sp, #48	; 0x30
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	460b      	mov	r3, r1
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007d60:	2300      	movs	r3, #0
 8007d62:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <get_sequence_step_timeout+0x38>
 8007d78:	7afb      	ldrb	r3, [r7, #11]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d002      	beq.n	8007d84 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007d7e:	7afb      	ldrb	r3, [r7, #11]
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d128      	bne.n	8007dd6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007d84:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007d88:	461a      	mov	r2, r3
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7fd fa5b 	bl	8005248 <VL53L0X_GetVcselPulsePeriod>
 8007d92:	4603      	mov	r3, r0
 8007d94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007d98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d109      	bne.n	8007db4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007da0:	f107 0320 	add.w	r3, r7, #32
 8007da4:	461a      	mov	r2, r3
 8007da6:	2146      	movs	r1, #70	; 0x46
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f7fa ff63 	bl	8002c74 <VL53L0X_RdByte>
 8007dae:	4603      	mov	r3, r0
 8007db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007db4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7ff ff5b 	bl	8007c76 <VL53L0X_decode_timeout>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007dc4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007dc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007dca:	4619      	mov	r1, r3
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f7ff ff93 	bl	8007cf8 <VL53L0X_calc_timeout_us>
 8007dd2:	62b8      	str	r0, [r7, #40]	; 0x28
 8007dd4:	e092      	b.n	8007efc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007dd6:	7afb      	ldrb	r3, [r7, #11]
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d135      	bne.n	8007e48 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007ddc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007de0:	461a      	mov	r2, r3
 8007de2:	2100      	movs	r1, #0
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f7fd fa2f 	bl	8005248 <VL53L0X_GetVcselPulsePeriod>
 8007dea:	4603      	mov	r3, r0
 8007dec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007df0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f040 8081 	bne.w	8007efc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007dfa:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007dfe:	461a      	mov	r2, r3
 8007e00:	2100      	movs	r1, #0
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f7fd fa20 	bl	8005248 <VL53L0X_GetVcselPulsePeriod>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8007e0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d109      	bne.n	8007e2a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8007e16:	f107 031e 	add.w	r3, r7, #30
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	2151      	movs	r1, #81	; 0x51
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7fa ff52 	bl	8002cc8 <VL53L0X_RdWord>
 8007e24:	4603      	mov	r3, r0
 8007e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007e2a:	8bfb      	ldrh	r3, [r7, #30]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7ff ff22 	bl	8007c76 <VL53L0X_decode_timeout>
 8007e32:	4603      	mov	r3, r0
 8007e34:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007e36:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007e3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff ff5a 	bl	8007cf8 <VL53L0X_calc_timeout_us>
 8007e44:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e46:	e059      	b.n	8007efc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007e48:	7afb      	ldrb	r3, [r7, #11]
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d156      	bne.n	8007efc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007e4e:	f107 0314 	add.w	r3, r7, #20
 8007e52:	4619      	mov	r1, r3
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f7fd fb03 	bl	8005460 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01d      	beq.n	8007ea0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e64:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007e68:	461a      	mov	r2, r3
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f7fd f9eb 	bl	8005248 <VL53L0X_GetVcselPulsePeriod>
 8007e72:	4603      	mov	r3, r0
 8007e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8007e78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10f      	bne.n	8007ea0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8007e80:	f107 031e 	add.w	r3, r7, #30
 8007e84:	461a      	mov	r2, r3
 8007e86:	2151      	movs	r1, #81	; 0x51
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7fa ff1d 	bl	8002cc8 <VL53L0X_RdWord>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007e94:	8bfb      	ldrh	r3, [r7, #30]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff feed 	bl	8007c76 <VL53L0X_decode_timeout>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007ea0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d109      	bne.n	8007ebc <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007ea8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007eac:	461a      	mov	r2, r3
 8007eae:	2101      	movs	r1, #1
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f7fd f9c9 	bl	8005248 <VL53L0X_GetVcselPulsePeriod>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007ebc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10f      	bne.n	8007ee4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007ec4:	f107 031c 	add.w	r3, r7, #28
 8007ec8:	461a      	mov	r2, r3
 8007eca:	2171      	movs	r1, #113	; 0x71
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7fa fefb 	bl	8002cc8 <VL53L0X_RdWord>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007ed8:	8bbb      	ldrh	r3, [r7, #28]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff fecb 	bl	8007c76 <VL53L0X_decode_timeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007ee4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ee6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007eec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007ef0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f7ff feff 	bl	8007cf8 <VL53L0X_calc_timeout_us>
 8007efa:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f00:	601a      	str	r2, [r3, #0]

	return Status;
 8007f02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3730      	adds	r7, #48	; 0x30
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b08a      	sub	sp, #40	; 0x28
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	60f8      	str	r0, [r7, #12]
 8007f16:	460b      	mov	r3, r1
 8007f18:	607a      	str	r2, [r7, #4]
 8007f1a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007f22:	7afb      	ldrb	r3, [r7, #11]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <set_sequence_step_timeout+0x26>
 8007f28:	7afb      	ldrb	r3, [r7, #11]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d002      	beq.n	8007f34 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007f2e:	7afb      	ldrb	r3, [r7, #11]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d138      	bne.n	8007fa6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007f34:	f107 031b 	add.w	r3, r7, #27
 8007f38:	461a      	mov	r2, r3
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f7fd f983 	bl	8005248 <VL53L0X_GetVcselPulsePeriod>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007f48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d11a      	bne.n	8007f86 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007f50:	7efb      	ldrb	r3, [r7, #27]
 8007f52:	461a      	mov	r2, r3
 8007f54:	6879      	ldr	r1, [r7, #4]
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7ff fea4 	bl	8007ca4 <VL53L0X_calc_timeout_mclks>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8007f60:	8bbb      	ldrh	r3, [r7, #28]
 8007f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f66:	d903      	bls.n	8007f70 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007f68:	23ff      	movs	r3, #255	; 0xff
 8007f6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007f6e:	e004      	b.n	8007f7a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8007f70:	8bbb      	ldrh	r3, [r7, #28]
 8007f72:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8007f74:	3b01      	subs	r3, #1
 8007f76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007f86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f040 80ab 	bne.w	80080e6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8007f90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f94:	461a      	mov	r2, r3
 8007f96:	2146      	movs	r1, #70	; 0x46
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f7fa fdb7 	bl	8002b0c <VL53L0X_WrByte>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007fa4:	e09f      	b.n	80080e6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007fa6:	7afb      	ldrb	r3, [r7, #11]
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d135      	bne.n	8008018 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8007fac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d11b      	bne.n	8007fec <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007fb4:	f107 031b 	add.w	r3, r7, #27
 8007fb8:	461a      	mov	r2, r3
 8007fba:	2100      	movs	r1, #0
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f7fd f943 	bl	8005248 <VL53L0X_GetVcselPulsePeriod>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007fc8:	7efb      	ldrb	r3, [r7, #27]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f7ff fe68 	bl	8007ca4 <VL53L0X_calc_timeout_mclks>
 8007fd4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8007fd6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007fd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7ff fe1f 	bl	8007c1e <VL53L0X_encode_timeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007fe4:	8b3a      	ldrh	r2, [r7, #24]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007fec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d108      	bne.n	8008006 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8007ff4:	8b3b      	ldrh	r3, [r7, #24]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	2151      	movs	r1, #81	; 0x51
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f7fa fdaa 	bl	8002b54 <VL53L0X_WrWord>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008006:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800800a:	2b00      	cmp	r3, #0
 800800c:	d16b      	bne.n	80080e6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8008016:	e066      	b.n	80080e6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008018:	7afb      	ldrb	r3, [r7, #11]
 800801a:	2b04      	cmp	r3, #4
 800801c:	d160      	bne.n	80080e0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800801e:	f107 0310 	add.w	r3, r7, #16
 8008022:	4619      	mov	r1, r3
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f7fd fa1b 	bl	8005460 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800802e:	7cfb      	ldrb	r3, [r7, #19]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d01d      	beq.n	8008070 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008034:	f107 031b 	add.w	r3, r7, #27
 8008038:	461a      	mov	r2, r3
 800803a:	2100      	movs	r1, #0
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7fd f903 	bl	8005248 <VL53L0X_GetVcselPulsePeriod>
 8008042:	4603      	mov	r3, r0
 8008044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8008048:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10f      	bne.n	8008070 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008050:	f107 0318 	add.w	r3, r7, #24
 8008054:	461a      	mov	r2, r3
 8008056:	2151      	movs	r1, #81	; 0x51
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f7fa fe35 	bl	8002cc8 <VL53L0X_RdWord>
 800805e:	4603      	mov	r3, r0
 8008060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8008064:	8b3b      	ldrh	r3, [r7, #24]
 8008066:	4618      	mov	r0, r3
 8008068:	f7ff fe05 	bl	8007c76 <VL53L0X_decode_timeout>
 800806c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800806e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008070:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008074:	2b00      	cmp	r3, #0
 8008076:	d109      	bne.n	800808c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008078:	f107 031b 	add.w	r3, r7, #27
 800807c:	461a      	mov	r2, r3
 800807e:	2101      	movs	r1, #1
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7fd f8e1 	bl	8005248 <VL53L0X_GetVcselPulsePeriod>
 8008086:	4603      	mov	r3, r0
 8008088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800808c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008090:	2b00      	cmp	r3, #0
 8008092:	d128      	bne.n	80080e6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008094:	7efb      	ldrb	r3, [r7, #27]
 8008096:	461a      	mov	r2, r3
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f7ff fe02 	bl	8007ca4 <VL53L0X_calc_timeout_mclks>
 80080a0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80080a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080a4:	6a3a      	ldr	r2, [r7, #32]
 80080a6:	4413      	add	r3, r2
 80080a8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80080aa:	6a38      	ldr	r0, [r7, #32]
 80080ac:	f7ff fdb7 	bl	8007c1e <VL53L0X_encode_timeout>
 80080b0:	4603      	mov	r3, r0
 80080b2:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80080b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d108      	bne.n	80080ce <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80080bc:	8bfb      	ldrh	r3, [r7, #30]
 80080be:	461a      	mov	r2, r3
 80080c0:	2171      	movs	r1, #113	; 0x71
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f7fa fd46 	bl	8002b54 <VL53L0X_WrWord>
 80080c8:	4603      	mov	r3, r0
 80080ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80080ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d107      	bne.n	80080e6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80080de:	e002      	b.n	80080e6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80080e0:	23fc      	movs	r3, #252	; 0xfc
 80080e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80080e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3728      	adds	r7, #40	; 0x28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b086      	sub	sp, #24
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	460b      	mov	r3, r1
 80080fc:	607a      	str	r2, [r7, #4]
 80080fe:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008100:	2300      	movs	r3, #0
 8008102:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8008104:	7afb      	ldrb	r3, [r7, #11]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800810a:	2b01      	cmp	r3, #1
 800810c:	d00a      	beq.n	8008124 <VL53L0X_get_vcsel_pulse_period+0x32>
 800810e:	e013      	b.n	8008138 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008110:	f107 0316 	add.w	r3, r7, #22
 8008114:	461a      	mov	r2, r3
 8008116:	2150      	movs	r1, #80	; 0x50
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7fa fdab 	bl	8002c74 <VL53L0X_RdByte>
 800811e:	4603      	mov	r3, r0
 8008120:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008122:	e00b      	b.n	800813c <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008124:	f107 0316 	add.w	r3, r7, #22
 8008128:	461a      	mov	r2, r3
 800812a:	2170      	movs	r1, #112	; 0x70
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7fa fda1 	bl	8002c74 <VL53L0X_RdByte>
 8008132:	4603      	mov	r3, r0
 8008134:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008136:	e001      	b.n	800813c <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008138:	23fc      	movs	r3, #252	; 0xfc
 800813a:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800813c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d107      	bne.n	8008154 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008144:	7dbb      	ldrb	r3, [r7, #22]
 8008146:	4618      	mov	r0, r3
 8008148:	f7fe fff4 	bl	8007134 <VL53L0X_decode_vcsel_period>
 800814c:	4603      	mov	r3, r0
 800814e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	701a      	strb	r2, [r3, #0]

	return Status;
 8008154:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3718      	adds	r7, #24
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b092      	sub	sp, #72	; 0x48
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800816a:	2300      	movs	r3, #0
 800816c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008170:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008174:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008176:	f240 7376 	movw	r3, #1910	; 0x776
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800817c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008180:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008182:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008186:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8008188:	f240 234e 	movw	r3, #590	; 0x24e
 800818c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800818e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008192:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008194:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008198:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800819a:	f240 2326 	movw	r3, #550	; 0x226
 800819e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80081a4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80081a8:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d205      	bcs.n	80081c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081b6:	23fc      	movs	r3, #252	; 0xfc
 80081b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80081bc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80081c0:	e0aa      	b.n	8008318 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80081c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80081ce:	f107 0314 	add.w	r3, r7, #20
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7fd f943 	bl	8005460 <VL53L0X_GetSequenceStepEnables>
 80081da:	4603      	mov	r3, r0
 80081dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80081e0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d15b      	bne.n	80082a0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80081e8:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d105      	bne.n	80081fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80081ee:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80081f4:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d052      	beq.n	80082a0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80081fa:	f107 0310 	add.w	r3, r7, #16
 80081fe:	461a      	mov	r2, r3
 8008200:	2102      	movs	r1, #2
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff fda2 	bl	8007d4c <get_sequence_step_timeout>
 8008208:	4603      	mov	r3, r0
 800820a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800820e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8008216:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800821a:	e07d      	b.n	8008318 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800821c:	7d3b      	ldrb	r3, [r7, #20]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00f      	beq.n	8008242 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8008222:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8008224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008226:	4413      	add	r3, r2
 8008228:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800822e:	429a      	cmp	r2, r3
 8008230:	d204      	bcs.n	800823c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008232:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	643b      	str	r3, [r7, #64]	; 0x40
 800823a:	e002      	b.n	8008242 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800823c:	23fc      	movs	r3, #252	; 0xfc
 800823e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008242:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800824a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800824e:	e063      	b.n	8008318 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8008250:	7dbb      	ldrb	r3, [r7, #22]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d011      	beq.n	800827a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825a:	4413      	add	r3, r2
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008260:	69fa      	ldr	r2, [r7, #28]
 8008262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008264:	429a      	cmp	r2, r3
 8008266:	d204      	bcs.n	8008272 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008268:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	643b      	str	r3, [r7, #64]	; 0x40
 8008270:	e016      	b.n	80082a0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008272:	23fc      	movs	r3, #252	; 0xfc
 8008274:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008278:	e012      	b.n	80082a0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800827a:	7d7b      	ldrb	r3, [r7, #21]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00f      	beq.n	80082a0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008284:	4413      	add	r3, r2
 8008286:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008288:	69fa      	ldr	r2, [r7, #28]
 800828a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800828c:	429a      	cmp	r2, r3
 800828e:	d204      	bcs.n	800829a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008290:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	643b      	str	r3, [r7, #64]	; 0x40
 8008298:	e002      	b.n	80082a0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800829a:	23fc      	movs	r3, #252	; 0xfc
 800829c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80082a0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80082a8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80082ac:	e034      	b.n	8008318 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d019      	beq.n	80082e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80082b4:	f107 030c 	add.w	r3, r7, #12
 80082b8:	461a      	mov	r2, r3
 80082ba:	2103      	movs	r1, #3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7ff fd45 	bl	8007d4c <get_sequence_step_timeout>
 80082c2:	4603      	mov	r3, r0
 80082c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082cc:	4413      	add	r3, r2
 80082ce:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80082d0:	69fa      	ldr	r2, [r7, #28]
 80082d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d204      	bcs.n	80082e2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80082d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	643b      	str	r3, [r7, #64]	; 0x40
 80082e0:	e002      	b.n	80082e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80082e2:	23fc      	movs	r3, #252	; 0xfc
 80082e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80082e8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d111      	bne.n	8008314 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80082f0:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00e      	beq.n	8008314 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80082f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80082fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008300:	2104      	movs	r1, #4
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7ff fe03 	bl	8007f0e <set_sequence_step_timeout>
 8008308:	4603      	mov	r3, r0
 800830a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008314:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8008318:	4618      	mov	r0, r3
 800831a:	3748      	adds	r7, #72	; 0x48
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b090      	sub	sp, #64	; 0x40
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800832a:	2300      	movs	r3, #0
 800832c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008330:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008334:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008336:	f240 7376 	movw	r3, #1910	; 0x776
 800833a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800833c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008340:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008342:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008346:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8008348:	f240 234e 	movw	r3, #590	; 0x24e
 800834c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800834e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008352:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008354:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800835a:	f240 2326 	movw	r3, #550	; 0x226
 800835e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008360:	2300      	movs	r3, #0
 8008362:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008368:	441a      	add	r2, r3
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800836e:	f107 0318 	add.w	r3, r7, #24
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7fd f873 	bl	8005460 <VL53L0X_GetSequenceStepEnables>
 800837a:	4603      	mov	r3, r0
 800837c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008380:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008388:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800838c:	e075      	b.n	800847a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800838e:	7e3b      	ldrb	r3, [r7, #24]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d105      	bne.n	80083a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8008394:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8008396:	2b00      	cmp	r3, #0
 8008398:	d102      	bne.n	80083a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800839a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800839c:	2b00      	cmp	r3, #0
 800839e:	d030      	beq.n	8008402 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80083a0:	f107 0310 	add.w	r3, r7, #16
 80083a4:	461a      	mov	r2, r3
 80083a6:	2102      	movs	r1, #2
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7ff fccf 	bl	8007d4c <get_sequence_step_timeout>
 80083ae:	4603      	mov	r3, r0
 80083b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80083b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d122      	bne.n	8008402 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80083bc:	7e3b      	ldrb	r3, [r7, #24]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d007      	beq.n	80083d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80083c6:	6939      	ldr	r1, [r7, #16]
 80083c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ca:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80083cc:	441a      	add	r2, r3
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80083d2:	7ebb      	ldrb	r3, [r7, #26]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d009      	beq.n	80083ec <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80083dc:	6939      	ldr	r1, [r7, #16]
 80083de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e0:	440b      	add	r3, r1
 80083e2:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80083e4:	441a      	add	r2, r3
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	e00a      	b.n	8008402 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80083ec:	7e7b      	ldrb	r3, [r7, #25]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d007      	beq.n	8008402 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80083f6:	6939      	ldr	r1, [r7, #16]
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80083fc:	441a      	add	r2, r3
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008402:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008406:	2b00      	cmp	r3, #0
 8008408:	d114      	bne.n	8008434 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800840a:	7efb      	ldrb	r3, [r7, #27]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d011      	beq.n	8008434 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8008410:	f107 030c 	add.w	r3, r7, #12
 8008414:	461a      	mov	r2, r3
 8008416:	2103      	movs	r1, #3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff fc97 	bl	8007d4c <get_sequence_step_timeout>
 800841e:	4603      	mov	r3, r0
 8008420:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8008428:	68f9      	ldr	r1, [r7, #12]
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800842e:	441a      	add	r2, r3
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008434:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008438:	2b00      	cmp	r3, #0
 800843a:	d114      	bne.n	8008466 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800843c:	7f3b      	ldrb	r3, [r7, #28]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d011      	beq.n	8008466 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008442:	f107 0314 	add.w	r3, r7, #20
 8008446:	461a      	mov	r2, r3
 8008448:	2104      	movs	r1, #4
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff fc7e 	bl	8007d4c <get_sequence_step_timeout>
 8008450:	4603      	mov	r3, r0
 8008452:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800845a:	6979      	ldr	r1, [r7, #20]
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008460:	441a      	add	r2, r3
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008466:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800846a:	2b00      	cmp	r3, #0
 800846c:	d103      	bne.n	8008476 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008476:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800847a:	4618      	mov	r0, r3
 800847c:	3740      	adds	r7, #64	; 0x40
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800848e:	2300      	movs	r3, #0
 8008490:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008496:	e0c6      	b.n	8008626 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	4413      	add	r3, r2
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	74fb      	strb	r3, [r7, #19]
		Index++;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	3301      	adds	r3, #1
 80084a6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80084a8:	7cfb      	ldrb	r3, [r7, #19]
 80084aa:	2bff      	cmp	r3, #255	; 0xff
 80084ac:	f040 808d 	bne.w	80085ca <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	4413      	add	r3, r2
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	747b      	strb	r3, [r7, #17]
			Index++;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	3301      	adds	r3, #1
 80084be:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80084c0:	7c7b      	ldrb	r3, [r7, #17]
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d87e      	bhi.n	80085c4 <VL53L0X_load_tuning_settings+0x140>
 80084c6:	a201      	add	r2, pc, #4	; (adr r2, 80084cc <VL53L0X_load_tuning_settings+0x48>)
 80084c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084cc:	080084dd 	.word	0x080084dd
 80084d0:	08008517 	.word	0x08008517
 80084d4:	08008551 	.word	0x08008551
 80084d8:	0800858b 	.word	0x0800858b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	4413      	add	r3, r2
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	743b      	strb	r3, [r7, #16]
				Index++;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	3301      	adds	r3, #1
 80084ea:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	4413      	add	r3, r2
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	73fb      	strb	r3, [r7, #15]
				Index++;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	3301      	adds	r3, #1
 80084fa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80084fc:	7c3b      	ldrb	r3, [r7, #16]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	021b      	lsls	r3, r3, #8
 8008502:	b29a      	uxth	r2, r3
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	b29b      	uxth	r3, r3
 8008508:	4413      	add	r3, r2
 800850a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	89ba      	ldrh	r2, [r7, #12]
 8008510:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8008514:	e087      	b.n	8008626 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	4413      	add	r3, r2
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	743b      	strb	r3, [r7, #16]
				Index++;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	3301      	adds	r3, #1
 8008524:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	4413      	add	r3, r2
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	3301      	adds	r3, #1
 8008534:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008536:	7c3b      	ldrb	r3, [r7, #16]
 8008538:	b29b      	uxth	r3, r3
 800853a:	021b      	lsls	r3, r3, #8
 800853c:	b29a      	uxth	r2, r3
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	b29b      	uxth	r3, r3
 8008542:	4413      	add	r3, r2
 8008544:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	89ba      	ldrh	r2, [r7, #12]
 800854a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800854e:	e06a      	b.n	8008626 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	4413      	add	r3, r2
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	743b      	strb	r3, [r7, #16]
				Index++;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	3301      	adds	r3, #1
 800855e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	4413      	add	r3, r2
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	73fb      	strb	r3, [r7, #15]
				Index++;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	3301      	adds	r3, #1
 800856e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008570:	7c3b      	ldrb	r3, [r7, #16]
 8008572:	b29b      	uxth	r3, r3
 8008574:	021b      	lsls	r3, r3, #8
 8008576:	b29a      	uxth	r2, r3
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	b29b      	uxth	r3, r3
 800857c:	4413      	add	r3, r2
 800857e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	89ba      	ldrh	r2, [r7, #12]
 8008584:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8008588:	e04d      	b.n	8008626 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	4413      	add	r3, r2
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	743b      	strb	r3, [r7, #16]
				Index++;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	3301      	adds	r3, #1
 8008598:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	4413      	add	r3, r2
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	73fb      	strb	r3, [r7, #15]
				Index++;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	3301      	adds	r3, #1
 80085a8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80085aa:	7c3b      	ldrb	r3, [r7, #16]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	021b      	lsls	r3, r3, #8
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	4413      	add	r3, r2
 80085b8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	89ba      	ldrh	r2, [r7, #12]
 80085be:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80085c2:	e030      	b.n	8008626 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80085c4:	23fc      	movs	r3, #252	; 0xfc
 80085c6:	77fb      	strb	r3, [r7, #31]
 80085c8:	e02d      	b.n	8008626 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80085ca:	7cfb      	ldrb	r3, [r7, #19]
 80085cc:	2b04      	cmp	r3, #4
 80085ce:	d828      	bhi.n	8008622 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	4413      	add	r3, r2
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	74bb      	strb	r3, [r7, #18]
			Index++;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	3301      	adds	r3, #1
 80085de:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80085e0:	2300      	movs	r3, #0
 80085e2:	61bb      	str	r3, [r7, #24]
 80085e4:	e00f      	b.n	8008606 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	4413      	add	r3, r2
 80085ec:	7819      	ldrb	r1, [r3, #0]
 80085ee:	f107 0208 	add.w	r2, r7, #8
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	4413      	add	r3, r2
 80085f6:	460a      	mov	r2, r1
 80085f8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	3301      	adds	r3, #1
 80085fe:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	3301      	adds	r3, #1
 8008604:	61bb      	str	r3, [r7, #24]
 8008606:	7cfb      	ldrb	r3, [r7, #19]
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	429a      	cmp	r2, r3
 800860c:	dbeb      	blt.n	80085e6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800860e:	7cfb      	ldrb	r3, [r7, #19]
 8008610:	f107 0208 	add.w	r2, r7, #8
 8008614:	7cb9      	ldrb	r1, [r7, #18]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7fa fa1c 	bl	8002a54 <VL53L0X_WriteMulti>
 800861c:	4603      	mov	r3, r0
 800861e:	77fb      	strb	r3, [r7, #31]
 8008620:	e001      	b.n	8008626 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008622:	23fc      	movs	r3, #252	; 0xfc
 8008624:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	4413      	add	r3, r2
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d004      	beq.n	800863c <VL53L0X_load_tuning_settings+0x1b8>
 8008632:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f43f af2e 	beq.w	8008498 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800863c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3720      	adds	r7, #32
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b088      	sub	sp, #32
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008654:	2300      	movs	r3, #0
 8008656:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800865e:	f107 0313 	add.w	r3, r7, #19
 8008662:	4619      	mov	r1, r3
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f7fc ffbb 	bl	80055e0 <VL53L0X_GetXTalkCompensationEnable>
 800866a:	4603      	mov	r3, r0
 800866c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800866e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d111      	bne.n	800869a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008676:	7cfb      	ldrb	r3, [r7, #19]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00e      	beq.n	800869a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	8a9b      	ldrh	r3, [r3, #20]
 8008686:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	fb02 f303 	mul.w	r3, r2, r3
 800868e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	3380      	adds	r3, #128	; 0x80
 8008694:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800869a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3720      	adds	r7, #32
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b086      	sub	sp, #24
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086b2:	2300      	movs	r3, #0
 80086b4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80086be:	f107 0310 	add.w	r3, r7, #16
 80086c2:	461a      	mov	r2, r3
 80086c4:	68b9      	ldr	r1, [r7, #8]
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff ffbe 	bl	8008648 <VL53L0X_get_total_xtalk_rate>
 80086cc:	4603      	mov	r3, r0
 80086ce:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80086d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d105      	bne.n	80086e4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	441a      	add	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	601a      	str	r2, [r3, #0]

	return Status;
 80086e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3718      	adds	r7, #24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b09a      	sub	sp, #104	; 0x68
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80086fe:	2312      	movs	r3, #18
 8008700:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8008702:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008706:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8008708:	2342      	movs	r3, #66	; 0x42
 800870a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800870c:	2306      	movs	r3, #6
 800870e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8008710:	2307      	movs	r3, #7
 8008712:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008714:	2300      	movs	r3, #0
 8008716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8008720:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8008728:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800872a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800872c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800872e:	fb02 f303 	mul.w	r3, r2, r3
 8008732:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008736:	3380      	adds	r3, #128	; 0x80
 8008738:	0a1b      	lsrs	r3, r3, #8
 800873a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800873c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008740:	fb02 f303 	mul.w	r3, r2, r3
 8008744:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d01a      	beq.n	8008786 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	029b      	lsls	r3, r3, #10
 8008754:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800875a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800875c:	4413      	add	r3, r2
 800875e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008760:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	fbb2 f3f3 	udiv	r3, r2, r3
 8008768:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800876a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800876c:	4613      	mov	r3, r2
 800876e:	005b      	lsls	r3, r3, #1
 8008770:	4413      	add	r3, r2
 8008772:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008776:	fb03 f303 	mul.w	r3, r3, r3
 800877a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800877c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800877e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008782:	0c1b      	lsrs	r3, r3, #16
 8008784:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800878a:	fb02 f303 	mul.w	r3, r2, r3
 800878e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008792:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008796:	0c1b      	lsrs	r3, r3, #16
 8008798:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	fb03 f303 	mul.w	r3, r3, r3
 80087a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80087a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80087a8:	0c1b      	lsrs	r3, r3, #16
 80087aa:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80087ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ae:	085a      	lsrs	r2, r3, #1
 80087b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b2:	441a      	add	r2, r3
 80087b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ba:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087c0:	fb02 f303 	mul.w	r3, r2, r3
 80087c4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087cc:	d302      	bcc.n	80087d4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 80087ce:	4b54      	ldr	r3, [pc, #336]	; (8008920 <VL53L0X_calc_dmax+0x230>)
 80087d0:	663b      	str	r3, [r7, #96]	; 0x60
 80087d2:	e015      	b.n	8008800 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80087d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d6:	085a      	lsrs	r2, r3, #1
 80087d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087da:	441a      	add	r2, r3
 80087dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087de:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80087e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087e8:	fb02 f303 	mul.w	r3, r2, r3
 80087ec:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80087ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087f0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80087f4:	0c1b      	lsrs	r3, r3, #16
 80087f6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80087f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087fa:	fb03 f303 	mul.w	r3, r3, r3
 80087fe:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8008800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008802:	039b      	lsls	r3, r3, #14
 8008804:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008808:	4a46      	ldr	r2, [pc, #280]	; (8008924 <VL53L0X_calc_dmax+0x234>)
 800880a:	fba2 2303 	umull	r2, r3, r2, r3
 800880e:	099b      	lsrs	r3, r3, #6
 8008810:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	fb03 f303 	mul.w	r3, r3, r3
 8008818:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800881a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800881c:	fb03 f303 	mul.w	r3, r3, r3
 8008820:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	3308      	adds	r3, #8
 8008826:	091b      	lsrs	r3, r3, #4
 8008828:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800882a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8008832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008834:	4613      	mov	r3, r2
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	4413      	add	r3, r2
 800883a:	011b      	lsls	r3, r3, #4
 800883c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008844:	0b9b      	lsrs	r3, r3, #14
 8008846:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800884a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800884c:	4413      	add	r3, r2
 800884e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008852:	085b      	lsrs	r3, r3, #1
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	4413      	add	r3, r2
 8008858:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800885e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008862:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	039b      	lsls	r3, r3, #14
 8008868:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	085b      	lsrs	r3, r3, #1
 800886e:	69ba      	ldr	r2, [r7, #24]
 8008870:	4413      	add	r3, r2
 8008872:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8008874:	69ba      	ldr	r2, [r7, #24]
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	fbb2 f3f3 	udiv	r3, r2, r3
 800887c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008882:	fb02 f303 	mul.w	r3, r2, r3
 8008886:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800888e:	4a25      	ldr	r2, [pc, #148]	; (8008924 <VL53L0X_calc_dmax+0x234>)
 8008890:	fba2 2303 	umull	r2, r3, r2, r3
 8008894:	099b      	lsrs	r3, r3, #6
 8008896:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	011b      	lsls	r3, r3, #4
 800889c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80088a4:	4a1f      	ldr	r2, [pc, #124]	; (8008924 <VL53L0X_calc_dmax+0x234>)
 80088a6:	fba2 2303 	umull	r2, r3, r2, r3
 80088aa:	099b      	lsrs	r3, r3, #6
 80088ac:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80088ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088b0:	3380      	adds	r3, #128	; 0x80
 80088b2:	0a1b      	lsrs	r3, r3, #8
 80088b4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d008      	beq.n	80088ce <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	085a      	lsrs	r2, r3, #1
 80088c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c2:	441a      	add	r2, r3
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80088cc:	e001      	b.n	80088d2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80088d2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80088d4:	f7fe fc41 	bl	800715a <VL53L0X_isqrt>
 80088d8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d008      	beq.n	80088f2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	085a      	lsrs	r2, r3, #1
 80088e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e6:	441a      	add	r2, r3
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088f0:	e001      	b.n	80088f6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80088f6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80088f8:	f7fe fc2f 	bl	800715a <VL53L0X_isqrt>
 80088fc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 80088fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008908:	429a      	cmp	r2, r3
 800890a:	d902      	bls.n	8008912 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800890c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800890e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008910:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8008912:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8008916:	4618      	mov	r0, r3
 8008918:	3768      	adds	r7, #104	; 0x68
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	fff00000 	.word	0xfff00000
 8008924:	10624dd3 	.word	0x10624dd3

08008928 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b0b4      	sub	sp, #208	; 0xd0
 800892c:	af04      	add	r7, sp, #16
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
 8008934:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8008936:	f44f 7348 	mov.w	r3, #800	; 0x320
 800893a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800893e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8008946:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800894a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800894e:	f241 235c 	movw	r3, #4700	; 0x125c
 8008952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8008956:	4b9e      	ldr	r3, [pc, #632]	; (8008bd0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008958:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800895c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008960:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8008962:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8008966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800896a:	fbb2 f3f3 	udiv	r3, r2, r3
 800896e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008970:	4b98      	ldr	r3, [pc, #608]	; (8008bd4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8008972:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8008974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008978:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800897a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800897e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8008980:	f240 6377 	movw	r3, #1655	; 0x677
 8008984:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008986:	2300      	movs	r3, #0
 8008988:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800899a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800899e:	0c1b      	lsrs	r3, r3, #16
 80089a0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80089a8:	f107 0310 	add.w	r3, r7, #16
 80089ac:	461a      	mov	r2, r3
 80089ae:	68b9      	ldr	r1, [r7, #8]
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f7ff fe78 	bl	80086a6 <VL53L0X_get_total_signal_rate>
 80089b6:	4603      	mov	r3, r0
 80089b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80089bc:	f107 0314 	add.w	r3, r7, #20
 80089c0:	461a      	mov	r2, r3
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f7ff fe3f 	bl	8008648 <VL53L0X_get_total_xtalk_rate>
 80089ca:	4603      	mov	r3, r0
 80089cc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089d6:	fb02 f303 	mul.w	r3, r2, r3
 80089da:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80089dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80089e2:	0c1b      	lsrs	r3, r3, #16
 80089e4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089ec:	fb02 f303 	mul.w	r3, r2, r3
 80089f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80089f4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80089f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d902      	bls.n	8008a04 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80089fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008a04:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d168      	bne.n	8008ade <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008a12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8008a1c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008a20:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008a24:	461a      	mov	r2, r3
 8008a26:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f7ff f93a 	bl	8007ca4 <VL53L0X_calc_timeout_mclks>
 8008a30:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008a38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8008a42:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008a46:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f7ff f927 	bl	8007ca4 <VL53L0X_calc_timeout_mclks>
 8008a56:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8008a5e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008a62:	2b08      	cmp	r3, #8
 8008a64:	d102      	bne.n	8008a6c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8008a66:	2302      	movs	r3, #2
 8008a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8008a6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a70:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008a72:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008a76:	fb02 f303 	mul.w	r3, r2, r3
 8008a7a:	02db      	lsls	r3, r3, #11
 8008a7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008a80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a84:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008a88:	4a53      	ldr	r2, [pc, #332]	; (8008bd8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8e:	099b      	lsrs	r3, r3, #6
 8008a90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8008a94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a9a:	fb02 f303 	mul.w	r3, r2, r3
 8008a9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008aa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008aa6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008aaa:	4a4b      	ldr	r2, [pc, #300]	; (8008bd8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008aac:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab0:	099b      	lsrs	r3, r3, #6
 8008ab2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	3380      	adds	r3, #128	; 0x80
 8008aba:	0a1b      	lsrs	r3, r3, #8
 8008abc:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ac4:	fb02 f303 	mul.w	r3, r2, r3
 8008ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8008acc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008ad0:	3380      	adds	r3, #128	; 0x80
 8008ad2:	0a1b      	lsrs	r3, r3, #8
 8008ad4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	021b      	lsls	r3, r3, #8
 8008adc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008ade:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8008ae6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008aea:	e15e      	b.n	8008daa <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8008aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10c      	bne.n	8008b0c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008af8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b00:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2200      	movs	r2, #0
 8008b08:	601a      	str	r2, [r3, #0]
 8008b0a:	e14c      	b.n	8008da6 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8008b0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d102      	bne.n	8008b1a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8008b14:	2301      	movs	r3, #1
 8008b16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8008b1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b1e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8008b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b22:	041a      	lsls	r2, r3, #16
 8008b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8008b2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d902      	bls.n	8008b3e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8008b3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008b42:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008b46:	fb02 f303 	mul.w	r3, r2, r3
 8008b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8008b4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008b52:	4613      	mov	r3, r2
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	4413      	add	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe fafd 	bl	800715a <VL53L0X_isqrt>
 8008b60:	4603      	mov	r3, r0
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	891b      	ldrh	r3, [r3, #8]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b6e:	fb02 f303 	mul.w	r3, r2, r3
 8008b72:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b76:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008b78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b7c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008b7e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008b80:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008b84:	4a14      	ldr	r2, [pc, #80]	; (8008bd8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008b86:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8a:	099b      	lsrs	r3, r3, #6
 8008b8c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8008b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b90:	041b      	lsls	r3, r3, #16
 8008b92:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008b96:	4a10      	ldr	r2, [pc, #64]	; (8008bd8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008b98:	fba2 2303 	umull	r2, r3, r2, r3
 8008b9c:	099b      	lsrs	r3, r3, #6
 8008b9e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8008ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8008ba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	bfb8      	it	lt
 8008bb2:	425b      	neglt	r3, r3
 8008bb4:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8008bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb8:	021b      	lsls	r3, r3, #8
 8008bba:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	7e1b      	ldrb	r3, [r3, #24]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00b      	beq.n	8008bdc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8008bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008bcc:	e033      	b.n	8008c36 <VL53L0X_calc_sigma_estimate+0x30e>
 8008bce:	bf00      	nop
 8008bd0:	028f87ae 	.word	0x028f87ae
 8008bd4:	0006999a 	.word	0x0006999a
 8008bd8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8008bdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8008bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bec:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8008bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bf4:	fb02 f303 	mul.w	r3, r2, r3
 8008bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8008bfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008c00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c02:	4413      	add	r3, r2
 8008c04:	0c1b      	lsrs	r3, r3, #16
 8008c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8008c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c0e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008c12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8008c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c1a:	085b      	lsrs	r3, r3, #1
 8008c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8008c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c24:	fb03 f303 	mul.w	r3, r3, r3
 8008c28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8008c2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c30:	0b9b      	lsrs	r3, r3, #14
 8008c32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008c36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c3c:	fb02 f303 	mul.w	r3, r2, r3
 8008c40:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008c48:	0c1b      	lsrs	r3, r3, #16
 8008c4a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4e:	fb03 f303 	mul.w	r3, r3, r3
 8008c52:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8008c54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c58:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8008c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008c60:	0c1b      	lsrs	r3, r3, #16
 8008c62:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8008c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c66:	fb03 f303 	mul.w	r3, r3, r3
 8008c6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8008c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c70:	4413      	add	r3, r2
 8008c72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8008c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c76:	f7fe fa70 	bl	800715a <VL53L0X_isqrt>
 8008c7a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	041b      	lsls	r3, r3, #16
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	3332      	adds	r3, #50	; 0x32
 8008c86:	4a4b      	ldr	r2, [pc, #300]	; (8008db4 <VL53L0X_calc_sigma_estimate+0x48c>)
 8008c88:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8c:	095a      	lsrs	r2, r3, #5
 8008c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8008c98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c9c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8008ca0:	fb02 f303 	mul.w	r3, r2, r3
 8008ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8008ca8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cac:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8008cb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cba:	4a3f      	ldr	r2, [pc, #252]	; (8008db8 <VL53L0X_calc_sigma_estimate+0x490>)
 8008cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc0:	0b5b      	lsrs	r3, r3, #13
 8008cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8008cc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008cca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d902      	bls.n	8008cd6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8008cd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008cd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8008cd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008cda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8008ce4:	4a35      	ldr	r2, [pc, #212]	; (8008dbc <VL53L0X_calc_sigma_estimate+0x494>)
 8008ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cea:	099b      	lsrs	r3, r3, #6
 8008cec:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8008cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cf6:	441a      	add	r2, r3
 8008cf8:	6a3b      	ldr	r3, [r7, #32]
 8008cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fe fa2b 	bl	800715a <VL53L0X_isqrt>
 8008d04:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	021b      	lsls	r3, r3, #8
 8008d0a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008d12:	4a2a      	ldr	r2, [pc, #168]	; (8008dbc <VL53L0X_calc_sigma_estimate+0x494>)
 8008d14:	fba2 2303 	umull	r2, r3, r2, r3
 8008d18:	099b      	lsrs	r3, r3, #6
 8008d1a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8008d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d20:	fb03 f303 	mul.w	r3, r3, r3
 8008d24:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	fb03 f303 	mul.w	r3, r3, r3
 8008d2c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8008d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d32:	4413      	add	r3, r2
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fe fa10 	bl	800715a <VL53L0X_isqrt>
 8008d3a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d42:	fb02 f303 	mul.w	r3, r2, r3
 8008d46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8008d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d009      	beq.n	8008d64 <VL53L0X_calc_sigma_estimate+0x43c>
 8008d50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d005      	beq.n	8008d64 <VL53L0X_calc_sigma_estimate+0x43c>
 8008d58:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008d5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d903      	bls.n	8008d6c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8008d64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008d72:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8008d7e:	6939      	ldr	r1, [r7, #16]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	9303      	str	r3, [sp, #12]
 8008d84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d88:	9302      	str	r3, [sp, #8]
 8008d8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d8e:	9301      	str	r3, [sp, #4]
 8008d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f7ff fca8 	bl	80086f0 <VL53L0X_calc_dmax>
 8008da0:	4603      	mov	r3, r0
 8008da2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008da6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	37c0      	adds	r7, #192	; 0xc0
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	51eb851f 	.word	0x51eb851f
 8008db8:	d1b71759 	.word	0xd1b71759
 8008dbc:	10624dd3 	.word	0x10624dd3

08008dc0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b090      	sub	sp, #64	; 0x40
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	607a      	str	r2, [r7, #4]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	460b      	mov	r3, r1
 8008dce:	72fb      	strb	r3, [r7, #11]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008e04:	2300      	movs	r3, #0
 8008e06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8008e12:	7afb      	ldrb	r3, [r7, #11]
 8008e14:	10db      	asrs	r3, r3, #3
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	f003 030f 	and.w	r3, r3, #15
 8008e1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008e20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d017      	beq.n	8008e58 <VL53L0X_get_pal_range_status+0x98>
 8008e28:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e2c:	2b05      	cmp	r3, #5
 8008e2e:	d013      	beq.n	8008e58 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008e30:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e34:	2b07      	cmp	r3, #7
 8008e36:	d00f      	beq.n	8008e58 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008e38:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e3c:	2b0c      	cmp	r3, #12
 8008e3e:	d00b      	beq.n	8008e58 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008e40:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e44:	2b0d      	cmp	r3, #13
 8008e46:	d007      	beq.n	8008e58 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008e48:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e4c:	2b0e      	cmp	r3, #14
 8008e4e:	d003      	beq.n	8008e58 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8008e50:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e54:	2b0f      	cmp	r3, #15
 8008e56:	d103      	bne.n	8008e60 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008e5e:	e002      	b.n	8008e66 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008e66:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d109      	bne.n	8008e82 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008e6e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008e72:	461a      	mov	r2, r3
 8008e74:	2100      	movs	r1, #0
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f7fc fc86 	bl	8005788 <VL53L0X_GetLimitCheckEnable>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8008e82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d02e      	beq.n	8008ee8 <VL53L0X_get_pal_range_status+0x128>
 8008e8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d12a      	bne.n	8008ee8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8008e92:	f107 0310 	add.w	r3, r7, #16
 8008e96:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008e9a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f7ff fd43 	bl	8008928 <VL53L0X_calc_sigma_estimate>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8008ea8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d103      	bne.n	8008eb8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eb6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8008eb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d113      	bne.n	8008ee8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8008ec0:	f107 0320 	add.w	r3, r7, #32
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f7fc fce3 	bl	8005894 <VL53L0X_GetLimitCheckValue>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d006      	beq.n	8008ee8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8008eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008edc:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d902      	bls.n	8008ee8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008ee8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d109      	bne.n	8008f04 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008ef0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	2102      	movs	r1, #2
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f7fc fc45 	bl	8005788 <VL53L0X_GetLimitCheckEnable>
 8008efe:	4603      	mov	r3, r0
 8008f00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008f04:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d044      	beq.n	8008f96 <VL53L0X_get_pal_range_status+0x1d6>
 8008f0c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d140      	bne.n	8008f96 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008f14:	f107 031c 	add.w	r3, r7, #28
 8008f18:	461a      	mov	r2, r3
 8008f1a:	2102      	movs	r1, #2
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f7fc fcb9 	bl	8005894 <VL53L0X_GetLimitCheckValue>
 8008f22:	4603      	mov	r3, r0
 8008f24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8008f28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d107      	bne.n	8008f40 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008f30:	2201      	movs	r2, #1
 8008f32:	21ff      	movs	r1, #255	; 0xff
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f7f9 fde9 	bl	8002b0c <VL53L0X_WrByte>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008f40:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d109      	bne.n	8008f5c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8008f48:	f107 0316 	add.w	r3, r7, #22
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	21b6      	movs	r1, #182	; 0xb6
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f7f9 feb9 	bl	8002cc8 <VL53L0X_RdWord>
 8008f56:	4603      	mov	r3, r0
 8008f58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8008f5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d107      	bne.n	8008f74 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008f64:	2200      	movs	r2, #0
 8008f66:	21ff      	movs	r1, #255	; 0xff
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f7f9 fdcf 	bl	8002b0c <VL53L0X_WrByte>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8008f74:	8afb      	ldrh	r3, [r7, #22]
 8008f76:	025b      	lsls	r3, r3, #9
 8008f78:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f7e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d006      	beq.n	8008f96 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008f88:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d902      	bls.n	8008f96 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8008f90:	2301      	movs	r3, #1
 8008f92:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008f96:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d109      	bne.n	8008fb2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	2103      	movs	r1, #3
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f7fc fbee 	bl	8005788 <VL53L0X_GetLimitCheckEnable>
 8008fac:	4603      	mov	r3, r0
 8008fae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008fb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d023      	beq.n	8009002 <VL53L0X_get_pal_range_status+0x242>
 8008fba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d11f      	bne.n	8009002 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008fc2:	893b      	ldrh	r3, [r7, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d102      	bne.n	8008fce <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	637b      	str	r3, [r7, #52]	; 0x34
 8008fcc:	e005      	b.n	8008fda <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	021a      	lsls	r2, r3, #8
 8008fd2:	893b      	ldrh	r3, [r7, #8]
 8008fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fd8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008fda:	f107 0318 	add.w	r3, r7, #24
 8008fde:	461a      	mov	r2, r3
 8008fe0:	2103      	movs	r1, #3
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f7fc fc56 	bl	8005894 <VL53L0X_GetLimitCheckValue>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d006      	beq.n	8009002 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008ff4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d202      	bcs.n	8009002 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009002:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009006:	2b00      	cmp	r3, #0
 8009008:	d14a      	bne.n	80090a0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800900a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800900e:	2b01      	cmp	r3, #1
 8009010:	d103      	bne.n	800901a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8009012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009014:	22ff      	movs	r2, #255	; 0xff
 8009016:	701a      	strb	r2, [r3, #0]
 8009018:	e042      	b.n	80090a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800901a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800901e:	2b01      	cmp	r3, #1
 8009020:	d007      	beq.n	8009032 <VL53L0X_get_pal_range_status+0x272>
 8009022:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009026:	2b02      	cmp	r3, #2
 8009028:	d003      	beq.n	8009032 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800902a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800902e:	2b03      	cmp	r3, #3
 8009030:	d103      	bne.n	800903a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8009032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009034:	2205      	movs	r2, #5
 8009036:	701a      	strb	r2, [r3, #0]
 8009038:	e032      	b.n	80090a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800903a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800903e:	2b06      	cmp	r3, #6
 8009040:	d003      	beq.n	800904a <VL53L0X_get_pal_range_status+0x28a>
 8009042:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009046:	2b09      	cmp	r3, #9
 8009048:	d103      	bne.n	8009052 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800904a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800904c:	2204      	movs	r2, #4
 800904e:	701a      	strb	r2, [r3, #0]
 8009050:	e026      	b.n	80090a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8009052:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009056:	2b08      	cmp	r3, #8
 8009058:	d007      	beq.n	800906a <VL53L0X_get_pal_range_status+0x2aa>
 800905a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800905e:	2b0a      	cmp	r3, #10
 8009060:	d003      	beq.n	800906a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8009062:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009066:	2b01      	cmp	r3, #1
 8009068:	d103      	bne.n	8009072 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800906a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800906c:	2203      	movs	r2, #3
 800906e:	701a      	strb	r2, [r3, #0]
 8009070:	e016      	b.n	80090a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8009072:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009076:	2b04      	cmp	r3, #4
 8009078:	d003      	beq.n	8009082 <VL53L0X_get_pal_range_status+0x2c2>
 800907a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800907e:	2b01      	cmp	r3, #1
 8009080:	d103      	bne.n	800908a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8009082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009084:	2202      	movs	r2, #2
 8009086:	701a      	strb	r2, [r3, #0]
 8009088:	e00a      	b.n	80090a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800908a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800908e:	2b01      	cmp	r3, #1
 8009090:	d103      	bne.n	800909a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8009092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009094:	2201      	movs	r2, #1
 8009096:	701a      	strb	r2, [r3, #0]
 8009098:	e002      	b.n	80090a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800909a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800909c:	2200      	movs	r2, #0
 800909e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80090a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d102      	bne.n	80090ae <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80090a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090aa:	2200      	movs	r2, #0
 80090ac:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80090ae:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80090b2:	461a      	mov	r2, r3
 80090b4:	2101      	movs	r1, #1
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f7fc fb66 	bl	8005788 <VL53L0X_GetLimitCheckEnable>
 80090bc:	4603      	mov	r3, r0
 80090be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80090c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d14f      	bne.n	800916a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80090ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <VL53L0X_get_pal_range_status+0x31a>
 80090d2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d103      	bne.n	80090e2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80090da:	2301      	movs	r3, #1
 80090dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090e0:	e002      	b.n	80090e8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80090ee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80090f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	d003      	beq.n	8009102 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80090fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d103      	bne.n	800910a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8009102:	2301      	movs	r3, #1
 8009104:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009108:	e002      	b.n	8009110 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009116:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800911a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <VL53L0X_get_pal_range_status+0x36a>
 8009122:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009126:	2b01      	cmp	r3, #1
 8009128:	d103      	bne.n	8009132 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800912a:	2301      	movs	r3, #1
 800912c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009130:	e002      	b.n	8009138 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800913e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8009142:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <VL53L0X_get_pal_range_status+0x392>
 800914a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800914e:	2b01      	cmp	r3, #1
 8009150:	d103      	bne.n	800915a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8009152:	2301      	movs	r3, #1
 8009154:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009158:	e002      	b.n	8009160 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800915a:	2300      	movs	r3, #0
 800915c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009166:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800916a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800916e:	4618      	mov	r0, r3
 8009170:	3740      	adds	r7, #64	; 0x40
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8009176:	b480      	push	{r7}
 8009178:	af00      	add	r7, sp, #0
  while (1);
 800917a:	e7fe      	b.n	800917a <BSP_ErrorHandler+0x4>

0800917c <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  if (Led == LED2)
 8009186:	79fb      	ldrb	r3, [r7, #7]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d124      	bne.n	80091d6 <BSP_LED_Init+0x5a>
  {
    /* Enable the GPIO_LED clock */
    LED2_GPIO_CLK_ENABLE();
 800918c:	4b1f      	ldr	r3, [pc, #124]	; (800920c <BSP_LED_Init+0x90>)
 800918e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009190:	4a1e      	ldr	r2, [pc, #120]	; (800920c <BSP_LED_Init+0x90>)
 8009192:	f043 0302 	orr.w	r3, r3, #2
 8009196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009198:	4b1c      	ldr	r3, [pc, #112]	; (800920c <BSP_LED_Init+0x90>)
 800919a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800919c:	f003 0302 	and.w	r3, r3, #2
 80091a0:	60bb      	str	r3, [r7, #8]
 80091a2:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.Pin = LED_PIN[Led];
 80091a4:	79fb      	ldrb	r3, [r7, #7]
 80091a6:	4a1a      	ldr	r2, [pc, #104]	; (8009210 <BSP_LED_Init+0x94>)
 80091a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80091ae:	2301      	movs	r3, #1
 80091b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091b6:	2303      	movs	r3, #3
 80091b8:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 80091ba:	f107 030c 	add.w	r3, r7, #12
 80091be:	4619      	mov	r1, r3
 80091c0:	4814      	ldr	r0, [pc, #80]	; (8009214 <BSP_LED_Init+0x98>)
 80091c2:	f003 f9ab 	bl	800c51c <HAL_GPIO_Init>
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, GPIO_InitStructure.Pin, GPIO_PIN_SET);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	2201      	movs	r2, #1
 80091cc:	4619      	mov	r1, r3
 80091ce:	4811      	ldr	r0, [pc, #68]	; (8009214 <BSP_LED_Init+0x98>)
 80091d0:	f003 fc28 	bl	800ca24 <HAL_GPIO_WritePin>

    /* By default, turn off LED */
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }

}
 80091d4:	e016      	b.n	8009204 <BSP_LED_Init+0x88>
    if (BSP_IO_Init() == IO_ERROR)
 80091d6:	f000 fda3 	bl	8009d20 <BSP_IO_Init>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d101      	bne.n	80091e4 <BSP_LED_Init+0x68>
      BSP_ErrorHandler();
 80091e0:	f7ff ffc9 	bl	8009176 <BSP_ErrorHandler>
    BSP_IO_ConfigPin(LED_PIN[Led], IO_MODE_OUTPUT);
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	4a0a      	ldr	r2, [pc, #40]	; (8009210 <BSP_LED_Init+0x94>)
 80091e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ec:	2101      	movs	r1, #1
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 fdda 	bl	8009da8 <BSP_IO_ConfigPin>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	4a06      	ldr	r2, [pc, #24]	; (8009210 <BSP_LED_Init+0x94>)
 80091f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091fc:	2101      	movs	r1, #1
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 fdee 	bl	8009de0 <BSP_IO_WritePin>
}
 8009204:	bf00      	nop
 8009206:	3720      	adds	r7, #32
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	40021000 	.word	0x40021000
 8009210:	08019c38 	.word	0x08019c38
 8009214:	48000400 	.word	0x48000400

08009218 <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	4603      	mov	r3, r0
 8009220:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 8009222:	79fb      	ldrb	r3, [r7, #7]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d109      	bne.n	800923c <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	4a0a      	ldr	r2, [pc, #40]	; (8009254 <BSP_LED_On+0x3c>)
 800922c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009230:	2200      	movs	r2, #0
 8009232:	4619      	mov	r1, r3
 8009234:	4808      	ldr	r0, [pc, #32]	; (8009258 <BSP_LED_On+0x40>)
 8009236:	f003 fbf5 	bl	800ca24 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 800923a:	e007      	b.n	800924c <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 800923c:	79fb      	ldrb	r3, [r7, #7]
 800923e:	4a05      	ldr	r2, [pc, #20]	; (8009254 <BSP_LED_On+0x3c>)
 8009240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009244:	2100      	movs	r1, #0
 8009246:	4618      	mov	r0, r3
 8009248:	f000 fdca 	bl	8009de0 <BSP_IO_WritePin>
}
 800924c:	bf00      	nop
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	08019c38 	.word	0x08019c38
 8009258:	48000400 	.word	0x48000400

0800925c <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	4603      	mov	r3, r0
 8009264:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 8009266:	79fb      	ldrb	r3, [r7, #7]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d109      	bne.n	8009280 <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 800926c:	79fb      	ldrb	r3, [r7, #7]
 800926e:	4a0a      	ldr	r2, [pc, #40]	; (8009298 <BSP_LED_Off+0x3c>)
 8009270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009274:	2201      	movs	r2, #1
 8009276:	4619      	mov	r1, r3
 8009278:	4808      	ldr	r0, [pc, #32]	; (800929c <BSP_LED_Off+0x40>)
 800927a:	f003 fbd3 	bl	800ca24 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 800927e:	e007      	b.n	8009290 <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8009280:	79fb      	ldrb	r3, [r7, #7]
 8009282:	4a05      	ldr	r2, [pc, #20]	; (8009298 <BSP_LED_Off+0x3c>)
 8009284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009288:	2101      	movs	r1, #1
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fda8 	bl	8009de0 <BSP_IO_WritePin>
}
 8009290:	bf00      	nop
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	08019c38 	.word	0x08019c38
 800929c:	48000400 	.word	0x48000400

080092a0 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 80092a4:	4812      	ldr	r0, [pc, #72]	; (80092f0 <I2C2_Init+0x50>)
 80092a6:	f004 f9ca 	bl	800d63e <HAL_I2C_GetState>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d11d      	bne.n	80092ec <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 80092b0:	4b0f      	ldr	r3, [pc, #60]	; (80092f0 <I2C2_Init+0x50>)
 80092b2:	4a10      	ldr	r2, [pc, #64]	; (80092f4 <I2C2_Init+0x54>)
 80092b4:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 80092b6:	4b0e      	ldr	r3, [pc, #56]	; (80092f0 <I2C2_Init+0x50>)
 80092b8:	4a0f      	ldr	r2, [pc, #60]	; (80092f8 <I2C2_Init+0x58>)
 80092ba:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 80092bc:	4b0c      	ldr	r3, [pc, #48]	; (80092f0 <I2C2_Init+0x50>)
 80092be:	2270      	movs	r2, #112	; 0x70
 80092c0:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80092c2:	4b0b      	ldr	r3, [pc, #44]	; (80092f0 <I2C2_Init+0x50>)
 80092c4:	2201      	movs	r2, #1
 80092c6:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80092c8:	4b09      	ldr	r3, [pc, #36]	; (80092f0 <I2C2_Init+0x50>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 80092ce:	4b08      	ldr	r3, [pc, #32]	; (80092f0 <I2C2_Init+0x50>)
 80092d0:	22ff      	movs	r2, #255	; 0xff
 80092d2:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80092d4:	4b06      	ldr	r3, [pc, #24]	; (80092f0 <I2C2_Init+0x50>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80092da:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <I2C2_Init+0x50>)
 80092dc:	2200      	movs	r2, #0
 80092de:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 80092e0:	4803      	ldr	r0, [pc, #12]	; (80092f0 <I2C2_Init+0x50>)
 80092e2:	f000 f80b 	bl	80092fc <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 80092e6:	4802      	ldr	r0, [pc, #8]	; (80092f0 <I2C2_Init+0x50>)
 80092e8:	f003 fbcc 	bl	800ca84 <HAL_I2C_Init>
  }
}
 80092ec:	bf00      	nop
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	20000fa8 	.word	0x20000fa8
 80092f4:	40005800 	.word	0x40005800
 80092f8:	40403e5d 	.word	0x40403e5d

080092fc <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b0ae      	sub	sp, #184	; 0xb8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a37      	ldr	r2, [pc, #220]	; (80093e8 <I2C2_MspInit+0xec>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d168      	bne.n	80093e0 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800930e:	2380      	movs	r3, #128	; 0x80
 8009310:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8009312:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009316:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8009318:	f107 0318 	add.w	r3, r7, #24
 800931c:	4618      	mov	r0, r3
 800931e:	f006 ff23 	bl	8010168 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8009322:	4b32      	ldr	r3, [pc, #200]	; (80093ec <I2C2_MspInit+0xf0>)
 8009324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009326:	4a31      	ldr	r2, [pc, #196]	; (80093ec <I2C2_MspInit+0xf0>)
 8009328:	f043 0302 	orr.w	r3, r3, #2
 800932c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800932e:	4b2f      	ldr	r3, [pc, #188]	; (80093ec <I2C2_MspInit+0xf0>)
 8009330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009332:	f003 0302 	and.w	r3, r3, #2
 8009336:	617b      	str	r3, [r7, #20]
 8009338:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 800933a:	4b2c      	ldr	r3, [pc, #176]	; (80093ec <I2C2_MspInit+0xf0>)
 800933c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800933e:	4a2b      	ldr	r2, [pc, #172]	; (80093ec <I2C2_MspInit+0xf0>)
 8009340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009346:	4b29      	ldr	r3, [pc, #164]	; (80093ec <I2C2_MspInit+0xf0>)
 8009348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800934a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800934e:	613b      	str	r3, [r7, #16]
 8009350:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 8009352:	2310      	movs	r3, #16
 8009354:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8009358:	2312      	movs	r3, #18
 800935a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 800935e:	2301      	movs	r3, #1
 8009360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8009364:	2303      	movs	r3, #3
 8009366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 800936a:	2304      	movs	r3, #4
 800936c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8009370:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009374:	4619      	mov	r1, r3
 8009376:	481e      	ldr	r0, [pc, #120]	; (80093f0 <I2C2_MspInit+0xf4>)
 8009378:	f003 f8d0 	bl	800c51c <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 800937c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8009384:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009388:	4619      	mov	r1, r3
 800938a:	481a      	ldr	r0, [pc, #104]	; (80093f4 <I2C2_MspInit+0xf8>)
 800938c:	f003 f8c6 	bl	800c51c <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 8009390:	4b16      	ldr	r3, [pc, #88]	; (80093ec <I2C2_MspInit+0xf0>)
 8009392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009394:	4a15      	ldr	r2, [pc, #84]	; (80093ec <I2C2_MspInit+0xf0>)
 8009396:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800939a:	6593      	str	r3, [r2, #88]	; 0x58
 800939c:	4b13      	ldr	r3, [pc, #76]	; (80093ec <I2C2_MspInit+0xf0>)
 800939e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093a4:	60fb      	str	r3, [r7, #12]
 80093a6:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 80093a8:	4b10      	ldr	r3, [pc, #64]	; (80093ec <I2C2_MspInit+0xf0>)
 80093aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ac:	4a0f      	ldr	r2, [pc, #60]	; (80093ec <I2C2_MspInit+0xf0>)
 80093ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80093b2:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 80093b4:	4b0d      	ldr	r3, [pc, #52]	; (80093ec <I2C2_MspInit+0xf0>)
 80093b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b8:	4a0c      	ldr	r2, [pc, #48]	; (80093ec <I2C2_MspInit+0xf0>)
 80093ba:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80093be:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 80093c0:	2200      	movs	r2, #0
 80093c2:	2100      	movs	r1, #0
 80093c4:	2021      	movs	r0, #33	; 0x21
 80093c6:	f002 fed2 	bl	800c16e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 80093ca:	2021      	movs	r0, #33	; 0x21
 80093cc:	f002 feeb 	bl	800c1a6 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 80093d0:	2200      	movs	r2, #0
 80093d2:	2100      	movs	r1, #0
 80093d4:	2022      	movs	r0, #34	; 0x22
 80093d6:	f002 feca 	bl	800c16e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 80093da:	2022      	movs	r0, #34	; 0x22
 80093dc:	f002 fee3 	bl	800c1a6 <HAL_NVIC_EnableIRQ>
  }
}
 80093e0:	bf00      	nop
 80093e2:	37b8      	adds	r7, #184	; 0xb8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	40005800 	.word	0x40005800
 80093ec:	40021000 	.word	0x40021000
 80093f0:	48001c00 	.word	0x48001c00
 80093f4:	48000400 	.word	0x48000400

080093f8 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 80093fc:	4806      	ldr	r0, [pc, #24]	; (8009418 <I2C2_DeInit+0x20>)
 80093fe:	f004 f91e 	bl	800d63e <HAL_I2C_GetState>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d005      	beq.n	8009414 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 8009408:	4803      	ldr	r0, [pc, #12]	; (8009418 <I2C2_DeInit+0x20>)
 800940a:	f003 fbca 	bl	800cba2 <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 800940e:	4802      	ldr	r0, [pc, #8]	; (8009418 <I2C2_DeInit+0x20>)
 8009410:	f000 f804 	bl	800941c <I2C2_MspDeInit>
  }
}
 8009414:	bf00      	nop
 8009416:	bd80      	pop	{r7, pc}
 8009418:	20000fa8 	.word	0x20000fa8

0800941c <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a1f      	ldr	r2, [pc, #124]	; (80094a8 <I2C2_MspDeInit+0x8c>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d138      	bne.n	80094a0 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 800942e:	4b1f      	ldr	r3, [pc, #124]	; (80094ac <I2C2_MspDeInit+0x90>)
 8009430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009432:	4a1e      	ldr	r2, [pc, #120]	; (80094ac <I2C2_MspDeInit+0x90>)
 8009434:	f043 0302 	orr.w	r3, r3, #2
 8009438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800943a:	4b1c      	ldr	r3, [pc, #112]	; (80094ac <I2C2_MspDeInit+0x90>)
 800943c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8009446:	4b19      	ldr	r3, [pc, #100]	; (80094ac <I2C2_MspDeInit+0x90>)
 8009448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800944a:	4a18      	ldr	r2, [pc, #96]	; (80094ac <I2C2_MspDeInit+0x90>)
 800944c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009452:	4b16      	ldr	r3, [pc, #88]	; (80094ac <I2C2_MspDeInit+0x90>)
 8009454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945a:	60bb      	str	r3, [r7, #8]
 800945c:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 800945e:	2110      	movs	r1, #16
 8009460:	4813      	ldr	r0, [pc, #76]	; (80094b0 <I2C2_MspDeInit+0x94>)
 8009462:	f003 f9ed 	bl	800c840 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 8009466:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800946a:	4812      	ldr	r0, [pc, #72]	; (80094b4 <I2C2_MspDeInit+0x98>)
 800946c:	f003 f9e8 	bl	800c840 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 8009470:	4b0e      	ldr	r3, [pc, #56]	; (80094ac <I2C2_MspDeInit+0x90>)
 8009472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009474:	4a0d      	ldr	r2, [pc, #52]	; (80094ac <I2C2_MspDeInit+0x90>)
 8009476:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800947a:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 800947c:	4b0b      	ldr	r3, [pc, #44]	; (80094ac <I2C2_MspDeInit+0x90>)
 800947e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009480:	4a0a      	ldr	r2, [pc, #40]	; (80094ac <I2C2_MspDeInit+0x90>)
 8009482:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009486:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8009488:	4b08      	ldr	r3, [pc, #32]	; (80094ac <I2C2_MspDeInit+0x90>)
 800948a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800948c:	4a07      	ldr	r2, [pc, #28]	; (80094ac <I2C2_MspDeInit+0x90>)
 800948e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009492:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8009494:	2021      	movs	r0, #33	; 0x21
 8009496:	f002 fe94 	bl	800c1c2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 800949a:	2022      	movs	r0, #34	; 0x22
 800949c:	f002 fe91 	bl	800c1c2 <HAL_NVIC_DisableIRQ>
  }
}
 80094a0:	bf00      	nop
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	40005800 	.word	0x40005800
 80094ac:	40021000 	.word	0x40021000
 80094b0:	48001c00 	.word	0x48001c00
 80094b4:	48000400 	.word	0x48000400

080094b8 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 80094b8:	b590      	push	{r4, r7, lr}
 80094ba:	b089      	sub	sp, #36	; 0x24
 80094bc:	af04      	add	r7, sp, #16
 80094be:	4604      	mov	r4, r0
 80094c0:	4608      	mov	r0, r1
 80094c2:	4611      	mov	r1, r2
 80094c4:	461a      	mov	r2, r3
 80094c6:	4623      	mov	r3, r4
 80094c8:	80fb      	strh	r3, [r7, #6]
 80094ca:	4603      	mov	r3, r0
 80094cc:	80bb      	strh	r3, [r7, #4]
 80094ce:	460b      	mov	r3, r1
 80094d0:	807b      	strh	r3, [r7, #2]
 80094d2:	4613      	mov	r3, r2
 80094d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 80094da:	b672      	cpsid	i
}
 80094dc:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 80094de:	4b0d      	ldr	r3, [pc, #52]	; (8009514 <I2C2_WriteData+0x5c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	8878      	ldrh	r0, [r7, #2]
 80094e4:	88ba      	ldrh	r2, [r7, #4]
 80094e6:	88f9      	ldrh	r1, [r7, #6]
 80094e8:	9302      	str	r3, [sp, #8]
 80094ea:	2301      	movs	r3, #1
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	1c7b      	adds	r3, r7, #1
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	4603      	mov	r3, r0
 80094f4:	4808      	ldr	r0, [pc, #32]	; (8009518 <I2C2_WriteData+0x60>)
 80094f6:	f003 fd6d 	bl	800cfd4 <HAL_I2C_Mem_Write>
 80094fa:	4603      	mov	r3, r0
 80094fc:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80094fe:	b662      	cpsie	i
}
 8009500:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 8009502:	7bfb      	ldrb	r3, [r7, #15]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8009508:	f000 f890 	bl	800962c <I2C2_Error>
  }
}
 800950c:	bf00      	nop
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	bd90      	pop	{r4, r7, pc}
 8009514:	2000052c 	.word	0x2000052c
 8009518:	20000fa8 	.word	0x20000fa8

0800951c <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b088      	sub	sp, #32
 8009520:	af04      	add	r7, sp, #16
 8009522:	4603      	mov	r3, r0
 8009524:	80fb      	strh	r3, [r7, #6]
 8009526:	460b      	mov	r3, r1
 8009528:	80bb      	strh	r3, [r7, #4]
 800952a:	4613      	mov	r3, r2
 800952c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8009532:	2300      	movs	r3, #0
 8009534:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8009536:	b672      	cpsid	i
}
 8009538:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 800953a:	4b10      	ldr	r3, [pc, #64]	; (800957c <I2C2_ReadData+0x60>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	8878      	ldrh	r0, [r7, #2]
 8009540:	88ba      	ldrh	r2, [r7, #4]
 8009542:	88f9      	ldrh	r1, [r7, #6]
 8009544:	9302      	str	r3, [sp, #8]
 8009546:	2301      	movs	r3, #1
 8009548:	9301      	str	r3, [sp, #4]
 800954a:	f107 030e 	add.w	r3, r7, #14
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	4603      	mov	r3, r0
 8009552:	480b      	ldr	r0, [pc, #44]	; (8009580 <I2C2_ReadData+0x64>)
 8009554:	f003 fe52 	bl	800d1fc <HAL_I2C_Mem_Read>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800955c:	b662      	cpsie	i
}
 800955e:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8009560:	7bfb      	ldrb	r3, [r7, #15]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d004      	beq.n	8009570 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8009566:	f000 f861 	bl	800962c <I2C2_Error>
    HAL_Delay(200);
 800956a:	20c8      	movs	r0, #200	; 0xc8
 800956c:	f001 fce0 	bl	800af30 <HAL_Delay>
  }

  return value;
 8009570:	7bbb      	ldrb	r3, [r7, #14]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	2000052c 	.word	0x2000052c
 8009580:	20000fa8 	.word	0x20000fa8

08009584 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	4603      	mov	r3, r0
 800958c:	6039      	str	r1, [r7, #0]
 800958e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009590:	2300      	movs	r3, #0
 8009592:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8009594:	2300      	movs	r3, #0
 8009596:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8009598:	b672      	cpsid	i
}
 800959a:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 800959c:	88f9      	ldrh	r1, [r7, #6]
 800959e:	2332      	movs	r3, #50	; 0x32
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	480a      	ldr	r0, [pc, #40]	; (80095cc <I2C2_isDeviceReady+0x48>)
 80095a4:	f003 ff44 	bl	800d430 <HAL_I2C_IsDeviceReady>
 80095a8:	4603      	mov	r3, r0
 80095aa:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80095ac:	b662      	cpsie	i
}
 80095ae:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d004      	beq.n	80095c0 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80095b6:	f000 f839 	bl	800962c <I2C2_Error>
    HAL_Delay(200);
 80095ba:	20c8      	movs	r0, #200	; 0xc8
 80095bc:	f001 fcb8 	bl	800af30 <HAL_Delay>
  }

  return value;
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20000fa8 	.word	0x20000fa8

080095d0 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08a      	sub	sp, #40	; 0x28
 80095d4:	af04      	add	r7, sp, #16
 80095d6:	607b      	str	r3, [r7, #4]
 80095d8:	4603      	mov	r3, r0
 80095da:	81fb      	strh	r3, [r7, #14]
 80095dc:	460b      	mov	r3, r1
 80095de:	81bb      	strh	r3, [r7, #12]
 80095e0:	4613      	mov	r3, r2
 80095e2:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 80095e8:	b672      	cpsid	i
}
 80095ea:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 80095ec:	4b0d      	ldr	r3, [pc, #52]	; (8009624 <I2C2_ReadBuffer+0x54>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	8978      	ldrh	r0, [r7, #10]
 80095f2:	89ba      	ldrh	r2, [r7, #12]
 80095f4:	89f9      	ldrh	r1, [r7, #14]
 80095f6:	9302      	str	r3, [sp, #8]
 80095f8:	8c3b      	ldrh	r3, [r7, #32]
 80095fa:	9301      	str	r3, [sp, #4]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	4603      	mov	r3, r0
 8009602:	4809      	ldr	r0, [pc, #36]	; (8009628 <I2C2_ReadBuffer+0x58>)
 8009604:	f003 fdfa 	bl	800d1fc <HAL_I2C_Mem_Read>
 8009608:	4603      	mov	r3, r0
 800960a:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 800960c:	b662      	cpsie	i
}
 800960e:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8009610:	7dfb      	ldrb	r3, [r7, #23]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8009616:	f000 f809 	bl	800962c <I2C2_Error>
  }

  return status;
 800961a:	7dfb      	ldrb	r3, [r7, #23]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	2000052c 	.word	0x2000052c
 8009628:	20000fa8 	.word	0x20000fa8

0800962c <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 8009630:	f7ff fda1 	bl	8009176 <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 8009634:	4803      	ldr	r0, [pc, #12]	; (8009644 <I2C2_Error+0x18>)
 8009636:	f003 fab4 	bl	800cba2 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 800963a:	f7ff fe31 	bl	80092a0 <I2C2_Init>
}
 800963e:	bf00      	nop
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000fa8 	.word	0x20000fa8

08009648 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]

  if (HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f003 fff4 	bl	800d63e <HAL_I2C_GetState>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d132      	bne.n	80096c2 <I2Cx_Init+0x7a>
  {
    if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a1b      	ldr	r2, [pc, #108]	; (80096cc <I2Cx_Init+0x84>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d103      	bne.n	800966c <I2Cx_Init+0x24>
    {
      /* TS (Capacitive Touch Panel) and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_TS_I2Cx;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a1a      	ldr	r2, [pc, #104]	; (80096d0 <I2Cx_Init+0x88>)
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	e012      	b.n	8009692 <I2Cx_Init+0x4a>

      /* Need to enable MFX, and in doing so, initialize I2C at the same time */
      /* MFX_IO_Init();*/

    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cAudioHandler))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a19      	ldr	r2, [pc, #100]	; (80096d4 <I2Cx_Init+0x8c>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d103      	bne.n	800967c <I2Cx_Init+0x34>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a18      	ldr	r2, [pc, #96]	; (80096d8 <I2Cx_Init+0x90>)
 8009678:	601a      	str	r2, [r3, #0]
 800967a:	e00a      	b.n	8009692 <I2Cx_Init+0x4a>
    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cCameraHandler))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a17      	ldr	r2, [pc, #92]	; (80096dc <I2Cx_Init+0x94>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d103      	bne.n	800968c <I2Cx_Init+0x44>
    {
      i2c_handler->Instance = DISCOVERY_CAMERA_I2Cx;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a12      	ldr	r2, [pc, #72]	; (80096d0 <I2Cx_Init+0x88>)
 8009688:	601a      	str	r2, [r3, #0]
 800968a:	e002      	b.n	8009692 <I2Cx_Init+0x4a>
    }
    else
    {
      /* External, EEPROM and Arduino connector I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a10      	ldr	r2, [pc, #64]	; (80096d0 <I2Cx_Init+0x88>)
 8009690:	601a      	str	r2, [r3, #0]
    }

    i2c_handler->Init.Timing           = DISCOVERY_I2C_TIMING;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a12      	ldr	r2, [pc, #72]	; (80096e0 <I2Cx_Init+0x98>)
 8009696:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0x70;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2270      	movs	r2, #112	; 0x70
 800969c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2201      	movs	r2, #1
 80096a2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0xFF;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	22ff      	movs	r2, #255	; 0xff
 80096ae:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	621a      	str	r2, [r3, #32]


    /* Init the I2C */
    HAL_I2C_Init(i2c_handler);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f003 f9e1 	bl	800ca84 <HAL_I2C_Init>

  }

}
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	20000ffc 	.word	0x20000ffc
 80096d0:	40005800 	.word	0x40005800
 80096d4:	20001050 	.word	0x20001050
 80096d8:	40005400 	.word	0x40005400
 80096dc:	200010a4 	.word	0x200010a4
 80096e0:	90112626 	.word	0x90112626

080096e4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b08a      	sub	sp, #40	; 0x28
 80096e8:	af04      	add	r7, sp, #16
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	4608      	mov	r0, r1
 80096ee:	4611      	mov	r1, r2
 80096f0:	461a      	mov	r2, r3
 80096f2:	4603      	mov	r3, r0
 80096f4:	72fb      	strb	r3, [r7, #11]
 80096f6:	460b      	mov	r3, r1
 80096f8:	813b      	strh	r3, [r7, #8]
 80096fa:	4613      	mov	r3, r2
 80096fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009702:	7afb      	ldrb	r3, [r7, #11]
 8009704:	b299      	uxth	r1, r3
 8009706:	88f8      	ldrh	r0, [r7, #6]
 8009708:	893a      	ldrh	r2, [r7, #8]
 800970a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800970e:	9302      	str	r3, [sp, #8]
 8009710:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009712:	9301      	str	r3, [sp, #4]
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	4603      	mov	r3, r0
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f003 fd6e 	bl	800d1fc <HAL_I2C_Mem_Read>
 8009720:	4603      	mov	r3, r0
 8009722:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8009724:	7dfb      	ldrb	r3, [r7, #23]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d004      	beq.n	8009734 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800972a:	7afb      	ldrb	r3, [r7, #11]
 800972c:	4619      	mov	r1, r3
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f000 f832 	bl	8009798 <I2Cx_Error>
  }
  return status;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b08a      	sub	sp, #40	; 0x28
 8009742:	af04      	add	r7, sp, #16
 8009744:	60f8      	str	r0, [r7, #12]
 8009746:	4608      	mov	r0, r1
 8009748:	4611      	mov	r1, r2
 800974a:	461a      	mov	r2, r3
 800974c:	4603      	mov	r3, r0
 800974e:	72fb      	strb	r3, [r7, #11]
 8009750:	460b      	mov	r3, r1
 8009752:	813b      	strh	r3, [r7, #8]
 8009754:	4613      	mov	r3, r2
 8009756:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800975c:	7afb      	ldrb	r3, [r7, #11]
 800975e:	b299      	uxth	r1, r3
 8009760:	88f8      	ldrh	r0, [r7, #6]
 8009762:	893a      	ldrh	r2, [r7, #8]
 8009764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009768:	9302      	str	r3, [sp, #8]
 800976a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	6a3b      	ldr	r3, [r7, #32]
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	4603      	mov	r3, r0
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f003 fc2d 	bl	800cfd4 <HAL_I2C_Mem_Write>
 800977a:	4603      	mov	r3, r0
 800977c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 800977e:	7dfb      	ldrb	r3, [r7, #23]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d004      	beq.n	800978e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initialize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009784:	7afb      	ldrb	r3, [r7, #11]
 8009786:	4619      	mov	r1, r3
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 f805 	bl	8009798 <I2Cx_Error>
  }
  return status;
 800978e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70fb      	strb	r3, [r7, #3]
  BSP_ErrorHandler();
 80097a4:	f7ff fce7 	bl	8009176 <BSP_ErrorHandler>

  /* De-initialize the I2C communication bus */
  if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a08      	ldr	r2, [pc, #32]	; (80097cc <I2Cx_Error+0x34>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d102      	bne.n	80097b6 <I2Cx_Error+0x1e>
  {
    I2C2_DeInit();
 80097b0:	f7ff fe22 	bl	80093f8 <I2C2_DeInit>
 80097b4:	e002      	b.n	80097bc <I2Cx_Error+0x24>
  }
  else
  {
    HAL_I2C_DeInit(i2c_handler);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f003 f9f3 	bl	800cba2 <HAL_I2C_DeInit>
  }

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff ff43 	bl	8009648 <I2Cx_Init>
}
 80097c2:	bf00      	nop
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20000ffc 	.word	0x20000ffc

080097d0 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 80097d4:	f7ff fd64 	bl	80092a0 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 80097d8:	2104      	movs	r1, #4
 80097da:	2084      	movs	r0, #132	; 0x84
 80097dc:	f7ff fed2 	bl	8009584 <I2C2_isDeviceReady>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 80097e6:	f7ff fcc6 	bl	8009176 <BSP_ErrorHandler>
  }
}
 80097ea:	bf00      	nop
 80097ec:	bd80      	pop	{r7, pc}
	...

080097f0 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b088      	sub	sp, #32
 80097f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80097f6:	4b19      	ldr	r3, [pc, #100]	; (800985c <MFX_IO_DeInit+0x6c>)
 80097f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097fa:	4a18      	ldr	r2, [pc, #96]	; (800985c <MFX_IO_DeInit+0x6c>)
 80097fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009802:	4b16      	ldr	r3, [pc, #88]	; (800985c <MFX_IO_DeInit+0x6c>)
 8009804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800980a:	60bb      	str	r3, [r7, #8]
 800980c:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 800980e:	2340      	movs	r3, #64	; 0x40
 8009810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8009812:	2301      	movs	r3, #1
 8009814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009816:	2300      	movs	r3, #0
 8009818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 800981a:	2302      	movs	r3, #2
 800981c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 800981e:	f107 030c 	add.w	r3, r7, #12
 8009822:	4619      	mov	r1, r3
 8009824:	480e      	ldr	r0, [pc, #56]	; (8009860 <MFX_IO_DeInit+0x70>)
 8009826:	f002 fe79 	bl	800c51c <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800982a:	2017      	movs	r0, #23
 800982c:	f002 fcc9 	bl	800c1c2 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8009830:	4b0a      	ldr	r3, [pc, #40]	; (800985c <MFX_IO_DeInit+0x6c>)
 8009832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009834:	4a09      	ldr	r2, [pc, #36]	; (800985c <MFX_IO_DeInit+0x6c>)
 8009836:	f043 0304 	orr.w	r3, r3, #4
 800983a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800983c:	4b07      	ldr	r3, [pc, #28]	; (800985c <MFX_IO_DeInit+0x6c>)
 800983e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009840:	f003 0304 	and.w	r3, r3, #4
 8009844:	607b      	str	r3, [r7, #4]
 8009846:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8009848:	2120      	movs	r1, #32
 800984a:	4806      	ldr	r0, [pc, #24]	; (8009864 <MFX_IO_DeInit+0x74>)
 800984c:	f002 fff8 	bl	800c840 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8009850:	f7ff fdd2 	bl	80093f8 <I2C2_DeInit>
}
 8009854:	bf00      	nop
 8009856:	3720      	adds	r7, #32
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	40021000 	.word	0x40021000
 8009860:	48001c00 	.word	0x48001c00
 8009864:	48000800 	.word	0x48000800

08009868 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 800986e:	4b13      	ldr	r3, [pc, #76]	; (80098bc <MFX_IO_ITConfig+0x54>)
 8009870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009872:	4a12      	ldr	r2, [pc, #72]	; (80098bc <MFX_IO_ITConfig+0x54>)
 8009874:	f043 0304 	orr.w	r3, r3, #4
 8009878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800987a:	4b10      	ldr	r3, [pc, #64]	; (80098bc <MFX_IO_ITConfig+0x54>)
 800987c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800987e:	f003 0304 	and.w	r3, r3, #4
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8009886:	2320      	movs	r3, #32
 8009888:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800988a:	2300      	movs	r3, #0
 800988c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800988e:	2300      	movs	r3, #0
 8009890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 8009892:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009896:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8009898:	1d3b      	adds	r3, r7, #4
 800989a:	4619      	mov	r1, r3
 800989c:	4808      	ldr	r0, [pc, #32]	; (80098c0 <MFX_IO_ITConfig+0x58>)
 800989e:	f002 fe3d 	bl	800c51c <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 80098a2:	220f      	movs	r2, #15
 80098a4:	210f      	movs	r1, #15
 80098a6:	2017      	movs	r0, #23
 80098a8:	f002 fc61 	bl	800c16e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80098ac:	2017      	movs	r0, #23
 80098ae:	f002 fc7a 	bl	800c1a6 <HAL_NVIC_EnableIRQ>
}
 80098b2:	bf00      	nop
 80098b4:	3718      	adds	r7, #24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	40021000 	.word	0x40021000
 80098c0:	48000800 	.word	0x48000800

080098c4 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80098ca:	4b0e      	ldr	r3, [pc, #56]	; (8009904 <MFX_IO_EnableWakeupPin+0x40>)
 80098cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ce:	4a0d      	ldr	r2, [pc, #52]	; (8009904 <MFX_IO_EnableWakeupPin+0x40>)
 80098d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098d6:	4b0b      	ldr	r3, [pc, #44]	; (8009904 <MFX_IO_EnableWakeupPin+0x40>)
 80098d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098de:	603b      	str	r3, [r7, #0]
 80098e0:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80098e2:	2340      	movs	r3, #64	; 0x40
 80098e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80098e6:	2301      	movs	r3, #1
 80098e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80098ea:	2302      	movs	r3, #2
 80098ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80098ee:	2300      	movs	r3, #0
 80098f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80098f2:	1d3b      	adds	r3, r7, #4
 80098f4:	4619      	mov	r1, r3
 80098f6:	4804      	ldr	r0, [pc, #16]	; (8009908 <MFX_IO_EnableWakeupPin+0x44>)
 80098f8:	f002 fe10 	bl	800c51c <HAL_GPIO_Init>
}
 80098fc:	bf00      	nop
 80098fe:	3718      	adds	r7, #24
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	40021000 	.word	0x40021000
 8009908:	48001c00 	.word	0x48001c00

0800990c <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 8009910:	2201      	movs	r2, #1
 8009912:	2140      	movs	r1, #64	; 0x40
 8009914:	4806      	ldr	r0, [pc, #24]	; (8009930 <MFX_IO_Wakeup+0x24>)
 8009916:	f003 f885 	bl	800ca24 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 800991a:	2001      	movs	r0, #1
 800991c:	f001 fb08 	bl	800af30 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 8009920:	2200      	movs	r2, #0
 8009922:	2140      	movs	r1, #64	; 0x40
 8009924:	4802      	ldr	r0, [pc, #8]	; (8009930 <MFX_IO_Wakeup+0x24>)
 8009926:	f003 f87d 	bl	800ca24 <HAL_GPIO_WritePin>
}
 800992a:	bf00      	nop
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	48001c00 	.word	0x48001c00

08009934 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	4603      	mov	r3, r0
 800993c:	80fb      	strh	r3, [r7, #6]
 800993e:	460b      	mov	r3, r1
 8009940:	717b      	strb	r3, [r7, #5]
 8009942:	4613      	mov	r3, r2
 8009944:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 8009946:	797b      	ldrb	r3, [r7, #5]
 8009948:	b299      	uxth	r1, r3
 800994a:	793b      	ldrb	r3, [r7, #4]
 800994c:	88f8      	ldrh	r0, [r7, #6]
 800994e:	2201      	movs	r2, #1
 8009950:	f7ff fdb2 	bl	80094b8 <I2C2_WriteData>
}
 8009954:	bf00      	nop
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	4603      	mov	r3, r0
 8009964:	460a      	mov	r2, r1
 8009966:	80fb      	strh	r3, [r7, #6]
 8009968:	4613      	mov	r3, r2
 800996a:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 800996c:	797b      	ldrb	r3, [r7, #5]
 800996e:	b299      	uxth	r1, r3
 8009970:	88fb      	ldrh	r3, [r7, #6]
 8009972:	2201      	movs	r2, #1
 8009974:	4618      	mov	r0, r3
 8009976:	f7ff fdd1 	bl	800951c <I2C2_ReadData>
 800997a:	4603      	mov	r3, r0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af02      	add	r7, sp, #8
 800998a:	60ba      	str	r2, [r7, #8]
 800998c:	461a      	mov	r2, r3
 800998e:	4603      	mov	r3, r0
 8009990:	81fb      	strh	r3, [r7, #14]
 8009992:	460b      	mov	r3, r1
 8009994:	737b      	strb	r3, [r7, #13]
 8009996:	4613      	mov	r3, r2
 8009998:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800999a:	7b7b      	ldrb	r3, [r7, #13]
 800999c:	b299      	uxth	r1, r3
 800999e:	89f8      	ldrh	r0, [r7, #14]
 80099a0:	88fb      	ldrh	r3, [r7, #6]
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f7ff fe12 	bl	80095d0 <I2C2_ReadBuffer>
 80099ac:	4603      	mov	r3, r0
 80099ae:	b29b      	uxth	r3, r3
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f001 fab5 	bl	800af30 <HAL_Delay>
}
 80099c6:	bf00      	nop
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
	...

080099d0 <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b08c      	sub	sp, #48	; 0x30
 80099d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80099d6:	4b38      	ldr	r3, [pc, #224]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 80099d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099da:	4a37      	ldr	r2, [pc, #220]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 80099dc:	f043 0301 	orr.w	r3, r3, #1
 80099e0:	6513      	str	r3, [r2, #80]	; 0x50
 80099e2:	4b35      	ldr	r3, [pc, #212]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 80099e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	61bb      	str	r3, [r7, #24]
 80099ec:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80099ee:	4b32      	ldr	r3, [pc, #200]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 80099f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f2:	4a31      	ldr	r2, [pc, #196]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 80099f4:	f043 0308 	orr.w	r3, r3, #8
 80099f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099fa:	4b2f      	ldr	r3, [pc, #188]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 80099fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099fe:	f003 0308 	and.w	r3, r3, #8
 8009a02:	617b      	str	r3, [r7, #20]
 8009a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009a06:	4b2c      	ldr	r3, [pc, #176]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 8009a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a0a:	4a2b      	ldr	r2, [pc, #172]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 8009a0c:	f043 0310 	orr.w	r3, r3, #16
 8009a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a12:	4b29      	ldr	r3, [pc, #164]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 8009a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a16:	f003 0310 	and.w	r3, r3, #16
 8009a1a:	613b      	str	r3, [r7, #16]
 8009a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009a1e:	4b26      	ldr	r3, [pc, #152]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 8009a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a22:	4a25      	ldr	r2, [pc, #148]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 8009a24:	f043 0320 	orr.w	r3, r3, #32
 8009a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a2a:	4b23      	ldr	r3, [pc, #140]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 8009a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2e:	f003 0320 	and.w	r3, r3, #32
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009a36:	4b20      	ldr	r3, [pc, #128]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 8009a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a3a:	4a1f      	ldr	r2, [pc, #124]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 8009a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a42:	4b1d      	ldr	r3, [pc, #116]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 8009a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4a:	60bb      	str	r3, [r7, #8]
 8009a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009a4e:	4b1a      	ldr	r3, [pc, #104]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 8009a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a52:	4a19      	ldr	r2, [pc, #100]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 8009a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a58:	6593      	str	r3, [r2, #88]	; 0x58
 8009a5a:	4b17      	ldr	r3, [pc, #92]	; (8009ab8 <FMC_BANK1_MspInit+0xe8>)
 8009a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a62:	607b      	str	r3, [r7, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8009a66:	f005 fc27 	bl	800f2b8 <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a72:	2303      	movs	r3, #3
 8009a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 8009a76:	230c      	movs	r3, #12
 8009a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 8009a7a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8009a7e:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8009a80:	f107 031c 	add.w	r3, r7, #28
 8009a84:	4619      	mov	r1, r3
 8009a86:	480d      	ldr	r0, [pc, #52]	; (8009abc <FMC_BANK1_MspInit+0xec>)
 8009a88:	f002 fd48 	bl	800c51c <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 8009a8c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8009a90:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8009a92:	f107 031c 	add.w	r3, r7, #28
 8009a96:	4619      	mov	r1, r3
 8009a98:	4809      	ldr	r0, [pc, #36]	; (8009ac0 <FMC_BANK1_MspInit+0xf0>)
 8009a9a:	f002 fd3f 	bl	800c51c <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 8009a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8009aa4:	f107 031c 	add.w	r3, r7, #28
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4804      	ldr	r0, [pc, #16]	; (8009abc <FMC_BANK1_MspInit+0xec>)
 8009aac:	f002 fd36 	bl	800c51c <HAL_GPIO_Init>

}
 8009ab0:	bf00      	nop
 8009ab2:	3730      	adds	r7, #48	; 0x30
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	40021000 	.word	0x40021000
 8009abc:	48000c00 	.word	0x48000c00
 8009ac0:	48001000 	.word	0x48001000

08009ac4 <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b0a4      	sub	sp, #144	; 0x90
 8009ac8:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 8009aca:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8009ace:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 8009ad0:	4b26      	ldr	r3, [pc, #152]	; (8009b6c <FMC_BANK1_Init+0xa8>)
 8009ad2:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 8009adc:	2301      	movs	r3, #1
 8009ade:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 8009ae8:	2302      	movs	r3, #2
 8009aea:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 8009aec:	2300      	movs	r3, #0
 8009aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 8009af0:	2305      	movs	r3, #5
 8009af2:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 8009af4:	2301      	movs	r3, #1
 8009af6:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 8009af8:	2303      	movs	r3, #3
 8009afa:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 8009afc:	2302      	movs	r3, #2
 8009afe:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 8009b00:	2302      	movs	r3, #2
 8009b02:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 8009b04:	2302      	movs	r3, #2
 8009b06:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 8009b10:	2300      	movs	r3, #0
 8009b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 8009b14:	2300      	movs	r3, #0
 8009b16:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8009b18:	2310      	movs	r3, #16
 8009b1a:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8009b20:	2300      	movs	r3, #0
 8009b22:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 8009b24:	2300      	movs	r3, #0
 8009b26:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 8009b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b2c:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 8009b32:	2300      	movs	r3, #0
 8009b34:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8009b36:	2300      	movs	r3, #0
 8009b38:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 8009b44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009b48:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 8009b4e:	f7ff ff3f 	bl	80099d0 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 8009b52:	463a      	mov	r2, r7
 8009b54:	f107 0120 	add.w	r1, r7, #32
 8009b58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f008 fed8 	bl	8012912 <HAL_SRAM_Init>

}
 8009b62:	bf00      	nop
 8009b64:	3790      	adds	r7, #144	; 0x90
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	a0000104 	.word	0xa0000104

08009b70 <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 8009b7a:	4a04      	ldr	r2, [pc, #16]	; (8009b8c <FMC_BANK1_WriteData+0x1c>)
 8009b7c:	88fb      	ldrh	r3, [r7, #6]
 8009b7e:	8013      	strh	r3, [r2, #0]
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	60080000 	.word	0x60080000

08009b90 <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 8009b9a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8009b9e:	79fa      	ldrb	r2, [r7, #7]
 8009ba0:	b292      	uxth	r2, r2
 8009ba2:	801a      	strh	r2, [r3, #0]
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 8009bb4:	4b03      	ldr	r3, [pc, #12]	; (8009bc4 <FMC_BANK1_ReadData+0x14>)
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	b29b      	uxth	r3, r3
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	60080000 	.word	0x60080000

08009bc8 <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 8009bcc:	f7ff ff7a 	bl	8009ac4 <FMC_BANK1_Init>
}
 8009bd0:	bf00      	nop
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 8009bde:	88fb      	ldrh	r3, [r7, #6]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7ff ffc5 	bl	8009b70 <FMC_BANK1_WriteData>
}
 8009be6:	bf00      	nop
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 8009bf8:	79fb      	ldrb	r3, [r7, #7]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7ff ffc8 	bl	8009b90 <FMC_BANK1_WriteReg>
}
 8009c00:	bf00      	nop
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 8009c0c:	f7ff ffd0 	bl	8009bb0 <FMC_BANK1_ReadData>
 8009c10:	4603      	mov	r3, r0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b082      	sub	sp, #8
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f001 f986 	bl	800af30 <HAL_Delay>
}
 8009c24:	bf00      	nop
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cTSHandler);
 8009c30:	4812      	ldr	r0, [pc, #72]	; (8009c7c <TS_IO_Init+0x50>)
 8009c32:	f7ff fd09 	bl	8009648 <I2Cx_Init>

  if (ts_io_init == 0)
 8009c36:	4b12      	ldr	r3, [pc, #72]	; (8009c80 <TS_IO_Init+0x54>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d11b      	bne.n	8009c76 <TS_IO_Init+0x4a>
  {
    if (BSP_LCD_Init() == LCD_ERROR)
 8009c3e:	f000 f8eb 	bl	8009e18 <BSP_LCD_Init>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d101      	bne.n	8009c4c <TS_IO_Init+0x20>
    {
      BSP_ErrorHandler();
 8009c48:	f7ff fa95 	bl	8009176 <BSP_ErrorHandler>
    }

    BSP_IO_ConfigPin(TS_RST_PIN, IO_MODE_OUTPUT);
 8009c4c:	2101      	movs	r1, #1
 8009c4e:	2002      	movs	r0, #2
 8009c50:	f000 f8aa 	bl	8009da8 <BSP_IO_ConfigPin>

    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_RESET);
 8009c54:	2100      	movs	r1, #0
 8009c56:	2002      	movs	r0, #2
 8009c58:	f000 f8c2 	bl	8009de0 <BSP_IO_WritePin>
    HAL_Delay(10);
 8009c5c:	200a      	movs	r0, #10
 8009c5e:	f001 f967 	bl	800af30 <HAL_Delay>
    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_SET);
 8009c62:	2101      	movs	r1, #1
 8009c64:	2002      	movs	r0, #2
 8009c66:	f000 f8bb 	bl	8009de0 <BSP_IO_WritePin>
    HAL_Delay(200);
 8009c6a:	20c8      	movs	r0, #200	; 0xc8
 8009c6c:	f001 f960 	bl	800af30 <HAL_Delay>

    ts_io_init = 1;
 8009c70:	4b03      	ldr	r3, [pc, #12]	; (8009c80 <TS_IO_Init+0x54>)
 8009c72:	2201      	movs	r2, #1
 8009c74:	601a      	str	r2, [r3, #0]
  }
}
 8009c76:	bf00      	nop
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20000ffc 	.word	0x20000ffc
 8009c80:	20000fa4 	.word	0x20000fa4

08009c84 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af02      	add	r7, sp, #8
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	71fb      	strb	r3, [r7, #7]
 8009c8e:	460b      	mov	r3, r1
 8009c90:	71bb      	strb	r3, [r7, #6]
 8009c92:	4613      	mov	r3, r2
 8009c94:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&Value, 1);
 8009c96:	79bb      	ldrb	r3, [r7, #6]
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	79f9      	ldrb	r1, [r7, #7]
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	9301      	str	r3, [sp, #4]
 8009ca0:	1d7b      	adds	r3, r7, #5
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	4803      	ldr	r0, [pc, #12]	; (8009cb4 <TS_IO_Write+0x30>)
 8009ca8:	f7ff fd49 	bl	800973e <I2Cx_WriteMultiple>
}
 8009cac:	bf00      	nop
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	20000ffc 	.word	0x20000ffc

08009cb8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	460a      	mov	r2, r1
 8009cc2:	71fb      	strb	r3, [r7, #7]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	71bb      	strb	r3, [r7, #6]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8009cc8:	79fb      	ldrb	r3, [r7, #7]
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	79ba      	ldrb	r2, [r7, #6]
 8009cce:	b291      	uxth	r1, r2
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7ff fc22 	bl	800951c <I2C2_ReadData>
 8009cd8:	4603      	mov	r3, r0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
	...

08009ce4 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af02      	add	r7, sp, #8
 8009cea:	603a      	str	r2, [r7, #0]
 8009cec:	461a      	mov	r2, r3
 8009cee:	4603      	mov	r3, r0
 8009cf0:	71fb      	strb	r3, [r7, #7]
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	71bb      	strb	r3, [r7, #6]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8009cfa:	79bb      	ldrb	r3, [r7, #6]
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	79f9      	ldrb	r1, [r7, #7]
 8009d00:	88bb      	ldrh	r3, [r7, #4]
 8009d02:	9301      	str	r3, [sp, #4]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	2301      	movs	r3, #1
 8009d0a:	4804      	ldr	r0, [pc, #16]	; (8009d1c <TS_IO_ReadMultiple+0x38>)
 8009d0c:	f7ff fcea 	bl	80096e4 <I2Cx_ReadMultiple>
 8009d10:	4603      	mov	r3, r0
 8009d12:	b29b      	uxth	r3, r3
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	20000ffc 	.word	0x20000ffc

08009d20 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 8009d2e:	4b1a      	ldr	r3, [pc, #104]	; (8009d98 <BSP_IO_Init+0x78>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d128      	bne.n	8009d88 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8009d36:	4b19      	ldr	r3, [pc, #100]	; (8009d9c <BSP_IO_Init+0x7c>)
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	2084      	movs	r0, #132	; 0x84
 8009d3c:	4798      	blx	r3

    HAL_Delay(10);
 8009d3e:	200a      	movs	r0, #10
 8009d40:	f001 f8f6 	bl	800af30 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8009d44:	4b16      	ldr	r3, [pc, #88]	; (8009da0 <BSP_IO_Init+0x80>)
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	2084      	movs	r0, #132	; 0x84
 8009d4a:	4798      	blx	r3
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8009d50:	79bb      	ldrb	r3, [r7, #6]
 8009d52:	2b7b      	cmp	r3, #123	; 0x7b
 8009d54:	d002      	beq.n	8009d5c <BSP_IO_Init+0x3c>
 8009d56:	79bb      	ldrb	r3, [r7, #6]
 8009d58:	2b79      	cmp	r3, #121	; 0x79
 8009d5a:	d117      	bne.n	8009d8c <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 8009d5c:	4b0e      	ldr	r3, [pc, #56]	; (8009d98 <BSP_IO_Init+0x78>)
 8009d5e:	4a10      	ldr	r2, [pc, #64]	; (8009da0 <BSP_IO_Init+0x80>)
 8009d60:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8009d62:	4b0d      	ldr	r3, [pc, #52]	; (8009d98 <BSP_IO_Init+0x78>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00f      	beq.n	8009d8c <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 8009d6c:	4b0a      	ldr	r3, [pc, #40]	; (8009d98 <BSP_IO_Init+0x78>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2084      	movs	r0, #132	; 0x84
 8009d74:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8009d76:	4b08      	ldr	r3, [pc, #32]	; (8009d98 <BSP_IO_Init+0x78>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	4909      	ldr	r1, [pc, #36]	; (8009da4 <BSP_IO_Init+0x84>)
 8009d7e:	2084      	movs	r0, #132	; 0x84
 8009d80:	4798      	blx	r3

        ret = IO_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	71fb      	strb	r3, [r7, #7]
 8009d86:	e001      	b.n	8009d8c <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8009d8c:	79fb      	ldrb	r3, [r7, #7]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	200010f8 	.word	0x200010f8
 8009d9c:	200001e8 	.word	0x200001e8
 8009da0:	200001bc 	.word	0x200001bc
 8009da4:	000301ff 	.word	0x000301ff

08009da8 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	460b      	mov	r3, r1
 8009db2:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8009db4:	2300      	movs	r3, #0
 8009db6:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	4b07      	ldr	r3, [pc, #28]	; (8009dd8 <BSP_IO_ConfigPin+0x30>)
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 8009dc0:	4b06      	ldr	r3, [pc, #24]	; (8009ddc <BSP_IO_ConfigPin+0x34>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	78fa      	ldrb	r2, [r7, #3]
 8009dc8:	68f9      	ldr	r1, [r7, #12]
 8009dca:	2084      	movs	r0, #132	; 0x84
 8009dcc:	4798      	blx	r3

  return IO_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	000301ff 	.word	0x000301ff
 8009ddc:	200010f8 	.word	0x200010f8

08009de0 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8009dec:	2300      	movs	r3, #0
 8009dee:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	4b07      	ldr	r3, [pc, #28]	; (8009e10 <BSP_IO_WritePin+0x30>)
 8009df4:	4013      	ands	r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 8009df8:	4b06      	ldr	r3, [pc, #24]	; (8009e14 <BSP_IO_WritePin+0x34>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	78fa      	ldrb	r2, [r7, #3]
 8009e00:	68f9      	ldr	r1, [r7, #12]
 8009e02:	2084      	movs	r0, #132	; 0x84
 8009e04:	4798      	blx	r3

}
 8009e06:	bf00      	nop
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	000301ff 	.word	0x000301ff
 8009e14:	200010f8 	.word	0x200010f8

08009e18 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8009e1c:	2001      	movs	r0, #1
 8009e1e:	f000 f803 	bl	8009e28 <BSP_LCD_InitEx>
 8009e22:	4603      	mov	r3, r0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 8009e38:	4b33      	ldr	r3, [pc, #204]	; (8009f08 <BSP_LCD_InitEx+0xe0>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d102      	bne.n	8009e46 <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
 8009e44:	e05b      	b.n	8009efe <BSP_LCD_InitEx+0xd6>
  }
  else
  {
    /* Initialize the IO functionalities */
    if (BSP_IO_Init() == IO_ERROR)
 8009e46:	f7ff ff6b 	bl	8009d20 <BSP_IO_Init>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d101      	bne.n	8009e54 <BSP_LCD_InitEx+0x2c>
    {
      BSP_ErrorHandler();
 8009e50:	f7ff f991 	bl	8009176 <BSP_ErrorHandler>
    }

    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 8009e54:	f000 fce4 	bl	800a820 <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 8009e58:	2200      	movs	r2, #0
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	482b      	ldr	r0, [pc, #172]	; (8009f0c <BSP_LCD_InitEx+0xe4>)
 8009e5e:	f002 fde1 	bl	800ca24 <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 8009e62:	4b2b      	ldr	r3, [pc, #172]	; (8009f10 <BSP_LCD_InitEx+0xe8>)
 8009e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e68:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 8009e6a:	4b29      	ldr	r3, [pc, #164]	; (8009f10 <BSP_LCD_InitEx+0xe8>)
 8009e6c:	4a29      	ldr	r2, [pc, #164]	; (8009f14 <BSP_LCD_InitEx+0xec>)
 8009e6e:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 8009e70:	4b27      	ldr	r3, [pc, #156]	; (8009f10 <BSP_LCD_InitEx+0xe8>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 8009e76:	4b28      	ldr	r3, [pc, #160]	; (8009f18 <BSP_LCD_InitEx+0xf0>)
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d108      	bne.n	8009e90 <BSP_LCD_InitEx+0x68>
 8009e7e:	4b27      	ldr	r3, [pc, #156]	; (8009f1c <BSP_LCD_InitEx+0xf4>)
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d104      	bne.n	8009e90 <BSP_LCD_InitEx+0x68>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8009e86:	2201      	movs	r2, #1
 8009e88:	2101      	movs	r1, #1
 8009e8a:	4825      	ldr	r0, [pc, #148]	; (8009f20 <BSP_LCD_InitEx+0xf8>)
 8009e8c:	f002 fdca 	bl	800ca24 <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 8009e90:	f000 f850 	bl	8009f34 <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 8009e94:	4b23      	ldr	r3, [pc, #140]	; (8009f24 <BSP_LCD_InitEx+0xfc>)
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	4798      	blx	r3
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b85      	cmp	r3, #133	; 0x85
 8009e9e:	d12e      	bne.n	8009efe <BSP_LCD_InitEx+0xd6>
    {
      LcdDrv = &ST7789H2_drv;
 8009ea0:	4b21      	ldr	r3, [pc, #132]	; (8009f28 <BSP_LCD_InitEx+0x100>)
 8009ea2:	4a20      	ldr	r2, [pc, #128]	; (8009f24 <BSP_LCD_InitEx+0xfc>)
 8009ea4:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 8009ea6:	4b20      	ldr	r3, [pc, #128]	; (8009f28 <BSP_LCD_InitEx+0x100>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 8009eae:	2200      	movs	r2, #0
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	202c      	movs	r0, #44	; 0x2c
 8009eb4:	f7fa fb81 	bl	80045ba <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8009eb8:	2300      	movs	r3, #0
 8009eba:	60bb      	str	r3, [r7, #8]
 8009ebc:	e006      	b.n	8009ecc <BSP_LCD_InitEx+0xa4>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 8009ebe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009ec2:	f7ff fe87 	bl	8009bd4 <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	60bb      	str	r3, [r7, #8]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8009ed2:	d3f4      	bcc.n	8009ebe <BSP_LCD_InitEx+0x96>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d106      	bne.n	8009ee8 <BSP_LCD_InitEx+0xc0>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 8009eda:	2000      	movs	r0, #0
 8009edc:	f7fa fa6b 	bl	80043b6 <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 8009ee0:	4b12      	ldr	r3, [pc, #72]	; (8009f2c <BSP_LCD_InitEx+0x104>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	701a      	strb	r2, [r3, #0]
 8009ee6:	e002      	b.n	8009eee <BSP_LCD_InitEx+0xc6>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 8009ee8:	4b10      	ldr	r3, [pc, #64]	; (8009f2c <BSP_LCD_InitEx+0x104>)
 8009eea:	2201      	movs	r2, #1
 8009eec:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8009eee:	4810      	ldr	r0, [pc, #64]	; (8009f30 <BSP_LCD_InitEx+0x108>)
 8009ef0:	f000 f868 	bl	8009fc4 <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 8009ef4:	4b04      	ldr	r3, [pc, #16]	; (8009f08 <BSP_LCD_InitEx+0xe0>)
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	200010fc 	.word	0x200010fc
 8009f0c:	48001c00 	.word	0x48001c00
 8009f10:	20001170 	.word	0x20001170
 8009f14:	20000530 	.word	0x20000530
 8009f18:	2000116c 	.word	0x2000116c
 8009f1c:	2000116d 	.word	0x2000116d
 8009f20:	48002000 	.word	0x48002000
 8009f24:	20000234 	.word	0x20000234
 8009f28:	2000117c 	.word	0x2000117c
 8009f2c:	20000540 	.word	0x20000540
 8009f30:	20000538 	.word	0x20000538

08009f34 <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8009f38:	2100      	movs	r1, #0
 8009f3a:	2004      	movs	r0, #4
 8009f3c:	f7ff ff50 	bl	8009de0 <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8009f40:	2005      	movs	r0, #5
 8009f42:	f000 fff5 	bl	800af30 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8009f46:	2101      	movs	r1, #1
 8009f48:	2004      	movs	r0, #4
 8009f4a:	f7ff ff49 	bl	8009de0 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8009f4e:	200a      	movs	r0, #10
 8009f50:	f000 ffee 	bl	800af30 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8009f54:	2100      	movs	r1, #0
 8009f56:	2004      	movs	r0, #4
 8009f58:	f7ff ff42 	bl	8009de0 <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8009f5c:	2014      	movs	r0, #20
 8009f5e:	f000 ffe7 	bl	800af30 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8009f62:	2101      	movs	r1, #1
 8009f64:	2004      	movs	r0, #4
 8009f66:	f7ff ff3b 	bl	8009de0 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8009f6a:	200a      	movs	r0, #10
 8009f6c:	f000 ffe0 	bl	800af30 <HAL_Delay>
}
 8009f70:	bf00      	nop
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelWidth());
 8009f78:	4b03      	ldr	r3, [pc, #12]	; (8009f88 <BSP_LCD_GetXSize+0x14>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7e:	4798      	blx	r3
 8009f80:	4603      	mov	r3, r0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	2000117c 	.word	0x2000117c

08009f8c <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelHeight());
 8009f90:	4b03      	ldr	r3, [pc, #12]	; (8009fa0 <BSP_LCD_GetYSize+0x14>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f96:	4798      	blx	r3
 8009f98:	4603      	mov	r3, r0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	2000117c 	.word	0x2000117c

08009fa4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	4603      	mov	r3, r0
 8009fac:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8009fae:	88fb      	ldrh	r3, [r7, #6]
 8009fb0:	4a03      	ldr	r2, [pc, #12]	; (8009fc0 <BSP_LCD_SetTextColor+0x1c>)
 8009fb2:	6013      	str	r3, [r2, #0]
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	20001170 	.word	0x20001170

08009fc4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8009fcc:	4a04      	ldr	r2, [pc, #16]	; (8009fe0 <BSP_LCD_SetFont+0x1c>)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6093      	str	r3, [r2, #8]
}
 8009fd2:	bf00      	nop
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	20001170 	.word	0x20001170

08009fe4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8009fe4:	b590      	push	{r4, r7, lr}
 8009fe6:	b087      	sub	sp, #28
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	4603      	mov	r3, r0
 8009fec:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor;
 8009ff6:	4b15      	ldr	r3, [pc, #84]	; (800a04c <BSP_LCD_Clear+0x68>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8009ffc:	88fb      	ldrh	r3, [r7, #6]
 8009ffe:	4a13      	ldr	r2, [pc, #76]	; (800a04c <BSP_LCD_Clear+0x68>)
 800a000:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 800a002:	f7ff ffc3 	bl	8009f8c <BSP_LCD_GetYSize>
 800a006:	6138      	str	r0, [r7, #16]

  for (counter = 0; counter < y_size; counter++)
 800a008:	2300      	movs	r3, #0
 800a00a:	617b      	str	r3, [r7, #20]
 800a00c:	e00d      	b.n	800a02a <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	b29c      	uxth	r4, r3
 800a012:	f7ff ffaf 	bl	8009f74 <BSP_LCD_GetXSize>
 800a016:	4603      	mov	r3, r0
 800a018:	b29b      	uxth	r3, r3
 800a01a:	461a      	mov	r2, r3
 800a01c:	4621      	mov	r1, r4
 800a01e:	2000      	movs	r0, #0
 800a020:	f000 f8e8 	bl	800a1f4 <BSP_LCD_DrawHLine>
  for (counter = 0; counter < y_size; counter++)
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	3301      	adds	r3, #1
 800a028:	617b      	str	r3, [r7, #20]
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d3ed      	bcc.n	800a00e <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup;
 800a032:	4a06      	ldr	r2, [pc, #24]	; (800a04c <BSP_LCD_Clear+0x68>)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800a038:	4b04      	ldr	r3, [pc, #16]	; (800a04c <BSP_LCD_Clear+0x68>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	4618      	mov	r0, r3
 800a040:	f7ff ffb0 	bl	8009fa4 <BSP_LCD_SetTextColor>
}
 800a044:	bf00      	nop
 800a046:	371c      	adds	r7, #28
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd90      	pop	{r4, r7, pc}
 800a04c:	20001170 	.word	0x20001170

0800a050 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	4603      	mov	r3, r0
 800a058:	80fb      	strh	r3, [r7, #6]
 800a05a:	460b      	mov	r3, r1
 800a05c:	80bb      	strh	r3, [r7, #4]
 800a05e:	4613      	mov	r3, r2
 800a060:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800a062:	4b0f      	ldr	r3, [pc, #60]	; (800a0a0 <BSP_LCD_DisplayChar+0x50>)
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	78fb      	ldrb	r3, [r7, #3]
 800a06a:	3b20      	subs	r3, #32
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800a06c:	490c      	ldr	r1, [pc, #48]	; (800a0a0 <BSP_LCD_DisplayChar+0x50>)
 800a06e:	6889      	ldr	r1, [r1, #8]
 800a070:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800a072:	fb03 f101 	mul.w	r1, r3, r1
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800a076:	4b0a      	ldr	r3, [pc, #40]	; (800a0a0 <BSP_LCD_DisplayChar+0x50>)
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	889b      	ldrh	r3, [r3, #4]
 800a07c:	3307      	adds	r3, #7
 800a07e:	2b00      	cmp	r3, #0
 800a080:	da00      	bge.n	800a084 <BSP_LCD_DisplayChar+0x34>
 800a082:	3307      	adds	r3, #7
 800a084:	10db      	asrs	r3, r3, #3
 800a086:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800a08a:	441a      	add	r2, r3
 800a08c:	88b9      	ldrh	r1, [r7, #4]
 800a08e:	88fb      	ldrh	r3, [r7, #6]
 800a090:	4618      	mov	r0, r3
 800a092:	f000 fc21 	bl	800a8d8 <DrawChar>
}
 800a096:	bf00      	nop
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20001170 	.word	0x20001170

0800a0a4 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b088      	sub	sp, #32
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60ba      	str	r2, [r7, #8]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	81fb      	strh	r3, [r7, #14]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	81bb      	strh	r3, [r7, #12]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	83fb      	strh	r3, [r7, #30]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	61bb      	str	r3, [r7, #24]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++)
 800a0ce:	e002      	b.n	800a0d6 <BSP_LCD_DisplayStringAt+0x32>
  {
    size ++ ;
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	61bb      	str	r3, [r7, #24]
  while (*ptr++)
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	1c5a      	adds	r2, r3, #1
 800a0da:	617a      	str	r2, [r7, #20]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1f6      	bne.n	800a0d0 <BSP_LCD_DisplayStringAt+0x2c>
  }

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp.pFont->Width);
 800a0e2:	f7ff ff47 	bl	8009f74 <BSP_LCD_GetXSize>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	4b33      	ldr	r3, [pc, #204]	; (800a1b8 <BSP_LCD_DisplayStringAt+0x114>)
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	889b      	ldrh	r3, [r3, #4]
 800a0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f2:	613b      	str	r3, [r7, #16]

  switch (Mode)
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	2b03      	cmp	r3, #3
 800a0f8:	d014      	beq.n	800a124 <BSP_LCD_DisplayStringAt+0x80>
 800a0fa:	2b03      	cmp	r3, #3
 800a0fc:	dc23      	bgt.n	800a146 <BSP_LCD_DisplayStringAt+0xa2>
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d002      	beq.n	800a108 <BSP_LCD_DisplayStringAt+0x64>
 800a102:	2b02      	cmp	r3, #2
 800a104:	d011      	beq.n	800a12a <BSP_LCD_DisplayStringAt+0x86>
 800a106:	e01e      	b.n	800a146 <BSP_LCD_DisplayStringAt+0xa2>
  {
    case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size) * DrawProp.pFont->Width) / 2;
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	4a2a      	ldr	r2, [pc, #168]	; (800a1b8 <BSP_LCD_DisplayStringAt+0x114>)
 800a110:	6892      	ldr	r2, [r2, #8]
 800a112:	8892      	ldrh	r2, [r2, #4]
 800a114:	fb02 f303 	mul.w	r3, r2, r3
 800a118:	085b      	lsrs	r3, r3, #1
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	89fb      	ldrh	r3, [r7, #14]
 800a11e:	4413      	add	r3, r2
 800a120:	83fb      	strh	r3, [r7, #30]
      break;
 800a122:	e013      	b.n	800a14c <BSP_LCD_DisplayStringAt+0xa8>
    }
    case LEFT_MODE:
    {
      refcolumn = Xpos;
 800a124:	89fb      	ldrh	r3, [r7, #14]
 800a126:	83fb      	strh	r3, [r7, #30]
      break;
 800a128:	e010      	b.n	800a14c <BSP_LCD_DisplayStringAt+0xa8>
    }
    case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size) * DrawProp.pFont->Width);
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	b29a      	uxth	r2, r3
 800a132:	4b21      	ldr	r3, [pc, #132]	; (800a1b8 <BSP_LCD_DisplayStringAt+0x114>)
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	889b      	ldrh	r3, [r3, #4]
 800a138:	fb12 f303 	smulbb	r3, r2, r3
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	89fb      	ldrh	r3, [r7, #14]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	83fb      	strh	r3, [r7, #30]
      break;
 800a144:	e002      	b.n	800a14c <BSP_LCD_DisplayStringAt+0xa8>
    }
    default:
    {
      refcolumn = Xpos;
 800a146:	89fb      	ldrh	r3, [r7, #14]
 800a148:	83fb      	strh	r3, [r7, #30]
      break;
 800a14a:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800a14c:	8bfb      	ldrh	r3, [r7, #30]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d003      	beq.n	800a15a <BSP_LCD_DisplayStringAt+0xb6>
 800a152:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a156:	2b00      	cmp	r3, #0
 800a158:	da15      	bge.n	800a186 <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 800a15a:	2301      	movs	r3, #1
 800a15c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800a15e:	e012      	b.n	800a186 <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	781a      	ldrb	r2, [r3, #0]
 800a164:	89b9      	ldrh	r1, [r7, #12]
 800a166:	8bfb      	ldrh	r3, [r7, #30]
 800a168:	4618      	mov	r0, r3
 800a16a:	f7ff ff71 	bl	800a050 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800a16e:	4b12      	ldr	r3, [pc, #72]	; (800a1b8 <BSP_LCD_DisplayStringAt+0x114>)
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	889a      	ldrh	r2, [r3, #4]
 800a174:	8bfb      	ldrh	r3, [r7, #30]
 800a176:	4413      	add	r3, r2
 800a178:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	3301      	adds	r3, #1
 800a17e:	60bb      	str	r3, [r7, #8]
    i++;
 800a180:	8bbb      	ldrh	r3, [r7, #28]
 800a182:	3301      	adds	r3, #1
 800a184:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00f      	beq.n	800a1ae <BSP_LCD_DisplayStringAt+0x10a>
 800a18e:	f7ff fef1 	bl	8009f74 <BSP_LCD_GetXSize>
 800a192:	4601      	mov	r1, r0
 800a194:	8bbb      	ldrh	r3, [r7, #28]
 800a196:	4a08      	ldr	r2, [pc, #32]	; (800a1b8 <BSP_LCD_DisplayStringAt+0x114>)
 800a198:	6892      	ldr	r2, [r2, #8]
 800a19a:	8892      	ldrh	r2, [r2, #4]
 800a19c:	fb02 f303 	mul.w	r3, r2, r3
 800a1a0:	1acb      	subs	r3, r1, r3
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	4a04      	ldr	r2, [pc, #16]	; (800a1b8 <BSP_LCD_DisplayStringAt+0x114>)
 800a1a6:	6892      	ldr	r2, [r2, #8]
 800a1a8:	8892      	ldrh	r2, [r2, #4]
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d2d8      	bcs.n	800a160 <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 800a1ae:	bf00      	nop
 800a1b0:	3720      	adds	r7, #32
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	20001170 	.word	0x20001170

0800a1bc <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	80fb      	strh	r3, [r7, #6]
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	80bb      	strh	r3, [r7, #4]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	807b      	strh	r3, [r7, #2]
  if (LcdDrv->WritePixel != NULL)
 800a1ce:	4b08      	ldr	r3, [pc, #32]	; (800a1f0 <BSP_LCD_DrawPixel+0x34>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	695b      	ldr	r3, [r3, #20]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d006      	beq.n	800a1e6 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 800a1d8:	4b05      	ldr	r3, [pc, #20]	; (800a1f0 <BSP_LCD_DrawPixel+0x34>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	887a      	ldrh	r2, [r7, #2]
 800a1e0:	88b9      	ldrh	r1, [r7, #4]
 800a1e2:	88f8      	ldrh	r0, [r7, #6]
 800a1e4:	4798      	blx	r3
  }
}
 800a1e6:	bf00      	nop
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	2000117c 	.word	0x2000117c

0800a1f4 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800a1f4:	b590      	push	{r4, r7, lr}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	80fb      	strh	r3, [r7, #6]
 800a1fe:	460b      	mov	r3, r1
 800a200:	80bb      	strh	r3, [r7, #4]
 800a202:	4613      	mov	r3, r2
 800a204:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800a206:	2300      	movs	r3, #0
 800a208:	60fb      	str	r3, [r7, #12]

  if (LcdDrv->DrawHLine != NULL)
 800a20a:	4b15      	ldr	r3, [pc, #84]	; (800a260 <BSP_LCD_DrawHLine+0x6c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	6a1b      	ldr	r3, [r3, #32]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00a      	beq.n	800a22a <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800a214:	4b12      	ldr	r3, [pc, #72]	; (800a260 <BSP_LCD_DrawHLine+0x6c>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6a1c      	ldr	r4, [r3, #32]
 800a21a:	4b12      	ldr	r3, [pc, #72]	; (800a264 <BSP_LCD_DrawHLine+0x70>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	b298      	uxth	r0, r3
 800a220:	887b      	ldrh	r3, [r7, #2]
 800a222:	88ba      	ldrh	r2, [r7, #4]
 800a224:	88f9      	ldrh	r1, [r7, #6]
 800a226:	47a0      	blx	r4
    for (index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800a228:	e015      	b.n	800a256 <BSP_LCD_DrawHLine+0x62>
    for (index = 0; index < Length; index++)
 800a22a:	2300      	movs	r3, #0
 800a22c:	60fb      	str	r3, [r7, #12]
 800a22e:	e00e      	b.n	800a24e <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	b29a      	uxth	r2, r3
 800a234:	88fb      	ldrh	r3, [r7, #6]
 800a236:	4413      	add	r3, r2
 800a238:	b29b      	uxth	r3, r3
 800a23a:	4a0a      	ldr	r2, [pc, #40]	; (800a264 <BSP_LCD_DrawHLine+0x70>)
 800a23c:	6812      	ldr	r2, [r2, #0]
 800a23e:	b292      	uxth	r2, r2
 800a240:	88b9      	ldrh	r1, [r7, #4]
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff ffba 	bl	800a1bc <BSP_LCD_DrawPixel>
    for (index = 0; index < Length; index++)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	3301      	adds	r3, #1
 800a24c:	60fb      	str	r3, [r7, #12]
 800a24e:	887b      	ldrh	r3, [r7, #2]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	429a      	cmp	r2, r3
 800a254:	d3ec      	bcc.n	800a230 <BSP_LCD_DrawHLine+0x3c>
}
 800a256:	bf00      	nop
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd90      	pop	{r4, r7, pc}
 800a25e:	bf00      	nop
 800a260:	2000117c 	.word	0x2000117c
 800a264:	20001170 	.word	0x20001170

0800a268 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4603      	mov	r3, r0
 800a270:	80fb      	strh	r3, [r7, #6]
 800a272:	460b      	mov	r3, r1
 800a274:	80bb      	strh	r3, [r7, #4]
 800a276:	4613      	mov	r3, r2
 800a278:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */

  decision = 3 - (Radius << 1);
 800a27a:	887b      	ldrh	r3, [r7, #2]
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	f1c3 0303 	rsb	r3, r3, #3
 800a282:	617b      	str	r3, [r7, #20]
  current_x = 0;
 800a284:	2300      	movs	r3, #0
 800a286:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800a288:	887b      	ldrh	r3, [r7, #2]
 800a28a:	60fb      	str	r3, [r7, #12]

  while (current_x <= current_y)
 800a28c:	e09a      	b.n	800a3c4 <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	b29a      	uxth	r2, r3
 800a292:	88fb      	ldrh	r3, [r7, #6]
 800a294:	4413      	add	r3, r2
 800a296:	b298      	uxth	r0, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	88ba      	ldrh	r2, [r7, #4]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	4a4d      	ldr	r2, [pc, #308]	; (800a3d8 <BSP_LCD_DrawCircle+0x170>)
 800a2a4:	6812      	ldr	r2, [r2, #0]
 800a2a6:	b292      	uxth	r2, r2
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	f7ff ff87 	bl	800a1bc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	88fa      	ldrh	r2, [r7, #6]
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	b298      	uxth	r0, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	88ba      	ldrh	r2, [r7, #4]
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	4a45      	ldr	r2, [pc, #276]	; (800a3d8 <BSP_LCD_DrawCircle+0x170>)
 800a2c4:	6812      	ldr	r2, [r2, #0]
 800a2c6:	b292      	uxth	r2, r2
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	f7ff ff77 	bl	800a1bc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	88fb      	ldrh	r3, [r7, #6]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	b298      	uxth	r0, r3
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	88ba      	ldrh	r2, [r7, #4]
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	4a3d      	ldr	r2, [pc, #244]	; (800a3d8 <BSP_LCD_DrawCircle+0x170>)
 800a2e4:	6812      	ldr	r2, [r2, #0]
 800a2e6:	b292      	uxth	r2, r2
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	f7ff ff67 	bl	800a1bc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	88fa      	ldrh	r2, [r7, #6]
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	b298      	uxth	r0, r3
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	88ba      	ldrh	r2, [r7, #4]
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	b29b      	uxth	r3, r3
 800a302:	4a35      	ldr	r2, [pc, #212]	; (800a3d8 <BSP_LCD_DrawCircle+0x170>)
 800a304:	6812      	ldr	r2, [r2, #0]
 800a306:	b292      	uxth	r2, r2
 800a308:	4619      	mov	r1, r3
 800a30a:	f7ff ff57 	bl	800a1bc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	b29a      	uxth	r2, r3
 800a312:	88fb      	ldrh	r3, [r7, #6]
 800a314:	4413      	add	r3, r2
 800a316:	b298      	uxth	r0, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	88bb      	ldrh	r3, [r7, #4]
 800a31e:	4413      	add	r3, r2
 800a320:	b29b      	uxth	r3, r3
 800a322:	4a2d      	ldr	r2, [pc, #180]	; (800a3d8 <BSP_LCD_DrawCircle+0x170>)
 800a324:	6812      	ldr	r2, [r2, #0]
 800a326:	b292      	uxth	r2, r2
 800a328:	4619      	mov	r1, r3
 800a32a:	f7ff ff47 	bl	800a1bc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	b29b      	uxth	r3, r3
 800a332:	88fa      	ldrh	r2, [r7, #6]
 800a334:	1ad3      	subs	r3, r2, r3
 800a336:	b298      	uxth	r0, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	88bb      	ldrh	r3, [r7, #4]
 800a33e:	4413      	add	r3, r2
 800a340:	b29b      	uxth	r3, r3
 800a342:	4a25      	ldr	r2, [pc, #148]	; (800a3d8 <BSP_LCD_DrawCircle+0x170>)
 800a344:	6812      	ldr	r2, [r2, #0]
 800a346:	b292      	uxth	r2, r2
 800a348:	4619      	mov	r1, r3
 800a34a:	f7ff ff37 	bl	800a1bc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	b29a      	uxth	r2, r3
 800a352:	88fb      	ldrh	r3, [r7, #6]
 800a354:	4413      	add	r3, r2
 800a356:	b298      	uxth	r0, r3
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	88bb      	ldrh	r3, [r7, #4]
 800a35e:	4413      	add	r3, r2
 800a360:	b29b      	uxth	r3, r3
 800a362:	4a1d      	ldr	r2, [pc, #116]	; (800a3d8 <BSP_LCD_DrawCircle+0x170>)
 800a364:	6812      	ldr	r2, [r2, #0]
 800a366:	b292      	uxth	r2, r2
 800a368:	4619      	mov	r1, r3
 800a36a:	f7ff ff27 	bl	800a1bc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	b29b      	uxth	r3, r3
 800a372:	88fa      	ldrh	r2, [r7, #6]
 800a374:	1ad3      	subs	r3, r2, r3
 800a376:	b298      	uxth	r0, r3
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	88bb      	ldrh	r3, [r7, #4]
 800a37e:	4413      	add	r3, r2
 800a380:	b29b      	uxth	r3, r3
 800a382:	4a15      	ldr	r2, [pc, #84]	; (800a3d8 <BSP_LCD_DrawCircle+0x170>)
 800a384:	6812      	ldr	r2, [r2, #0]
 800a386:	b292      	uxth	r2, r2
 800a388:	4619      	mov	r1, r3
 800a38a:	f7ff ff17 	bl	800a1bc <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800a38e:	4813      	ldr	r0, [pc, #76]	; (800a3dc <BSP_LCD_DrawCircle+0x174>)
 800a390:	f7ff fe18 	bl	8009fc4 <BSP_LCD_SetFont>

    if (decision < 0)
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	2b00      	cmp	r3, #0
 800a398:	da06      	bge.n	800a3a8 <BSP_LCD_DrawCircle+0x140>
    {
      decision += (current_x << 2) + 6;
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	009a      	lsls	r2, r3, #2
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	3306      	adds	r3, #6
 800a3a4:	617b      	str	r3, [r7, #20]
 800a3a6:	e00a      	b.n	800a3be <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800a3a8:	693a      	ldr	r2, [r7, #16]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	009a      	lsls	r2, r3, #2
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	330a      	adds	r3, #10
 800a3b6:	617b      	str	r3, [r7, #20]
      current_y--;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	f67f af60 	bls.w	800a28e <BSP_LCD_DrawCircle+0x26>
  }
}
 800a3ce:	bf00      	nop
 800a3d0:	bf00      	nop
 800a3d2:	3718      	adds	r7, #24
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20001170 	.word	0x20001170
 800a3dc:	20000538 	.word	0x20000538

0800a3e0 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	80fb      	strh	r3, [r7, #6]
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	80bb      	strh	r3, [r7, #4]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */

  decision = 3 - (Radius << 1);
 800a3f2:	887b      	ldrh	r3, [r7, #2]
 800a3f4:	005b      	lsls	r3, r3, #1
 800a3f6:	f1c3 0303 	rsb	r3, r3, #3
 800a3fa:	617b      	str	r3, [r7, #20]

  current_x = 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800a400:	887b      	ldrh	r3, [r7, #2]
 800a402:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800a404:	4b3e      	ldr	r3, [pc, #248]	; (800a500 <BSP_LCD_FillCircle+0x120>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	b29b      	uxth	r3, r3
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff fdca 	bl	8009fa4 <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 800a410:	e061      	b.n	800a4d6 <BSP_LCD_FillCircle+0xf6>
  {
    if (current_y > 0)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d021      	beq.n	800a45c <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2 * current_y);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	88fa      	ldrh	r2, [r7, #6]
 800a41e:	1ad3      	subs	r3, r2, r3
 800a420:	b298      	uxth	r0, r3
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	b29a      	uxth	r2, r3
 800a426:	88bb      	ldrh	r3, [r7, #4]
 800a428:	4413      	add	r3, r2
 800a42a:	b299      	uxth	r1, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	005b      	lsls	r3, r3, #1
 800a432:	b29b      	uxth	r3, r3
 800a434:	461a      	mov	r2, r3
 800a436:	f7ff fedd 	bl	800a1f4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2 * current_y);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	88fa      	ldrh	r2, [r7, #6]
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	b298      	uxth	r0, r3
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	b29b      	uxth	r3, r3
 800a448:	88ba      	ldrh	r2, [r7, #4]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	b299      	uxth	r1, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	b29b      	uxth	r3, r3
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	b29b      	uxth	r3, r3
 800a456:	461a      	mov	r2, r3
 800a458:	f7ff fecc 	bl	800a1f4 <BSP_LCD_DrawHLine>
    }

    if (current_x > 0)
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d021      	beq.n	800a4a6 <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2 * current_x);
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	b29b      	uxth	r3, r3
 800a466:	88fa      	ldrh	r2, [r7, #6]
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	b298      	uxth	r0, r3
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	b29b      	uxth	r3, r3
 800a470:	88ba      	ldrh	r2, [r7, #4]
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	b299      	uxth	r1, r3
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	b29b      	uxth	r3, r3
 800a47a:	005b      	lsls	r3, r3, #1
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	461a      	mov	r2, r3
 800a480:	f7ff feb8 	bl	800a1f4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2 * current_x);
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	b29b      	uxth	r3, r3
 800a488:	88fa      	ldrh	r2, [r7, #6]
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	b298      	uxth	r0, r3
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	b29a      	uxth	r2, r3
 800a492:	88bb      	ldrh	r3, [r7, #4]
 800a494:	4413      	add	r3, r2
 800a496:	b299      	uxth	r1, r3
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	005b      	lsls	r3, r3, #1
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	f7ff fea7 	bl	800a1f4 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	da06      	bge.n	800a4ba <BSP_LCD_FillCircle+0xda>
    {
      decision += (current_x << 2) + 6;
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	009a      	lsls	r2, r3, #2
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	3306      	adds	r3, #6
 800a4b6:	617b      	str	r3, [r7, #20]
 800a4b8:	e00a      	b.n	800a4d0 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	009a      	lsls	r2, r3, #2
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	330a      	adds	r3, #10
 800a4c8:	617b      	str	r3, [r7, #20]
      current_y--;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d999      	bls.n	800a412 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800a4de:	4b08      	ldr	r3, [pc, #32]	; (800a500 <BSP_LCD_FillCircle+0x120>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7ff fd5d 	bl	8009fa4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800a4ea:	887a      	ldrh	r2, [r7, #2]
 800a4ec:	88b9      	ldrh	r1, [r7, #4]
 800a4ee:	88fb      	ldrh	r3, [r7, #6]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7ff feb9 	bl	800a268 <BSP_LCD_DrawCircle>
}
 800a4f6:	bf00      	nop
 800a4f8:	3718      	adds	r7, #24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20001170 	.word	0x20001170

0800a504 <BSP_LCD_DisplayOn>:
  * @brief  Enables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	af00      	add	r7, sp, #0
  LcdDrv->DisplayOn();
 800a508:	4b02      	ldr	r3, [pc, #8]	; (800a514 <BSP_LCD_DisplayOn+0x10>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	4798      	blx	r3
}
 800a510:	bf00      	nop
 800a512:	bd80      	pop	{r7, pc}
 800a514:	2000117c 	.word	0x2000117c

0800a518 <BSP_LCD_DisplayOff>:
  * @brief  Disables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	af00      	add	r7, sp, #0
  LcdDrv->DisplayOff();
 800a51c:	4b02      	ldr	r3, [pc, #8]	; (800a528 <BSP_LCD_DisplayOff+0x10>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	4798      	blx	r3
}
 800a524:	bf00      	nop
 800a526:	bd80      	pop	{r7, pc}
 800a528:	2000117c 	.word	0x2000117c

0800a52c <BSP_LCD_ScreenDimmingConfig>:
  * @param  step    : step value in percent
  * @param  delay   : delay in milliseconds between each step
  * @retval None
  */
void BSP_LCD_ScreenDimmingConfig(const uint8_t start, const uint8_t stop, const uint8_t step, const uint8_t delay)
{
 800a52c:	b490      	push	{r4, r7}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	4604      	mov	r4, r0
 800a534:	4608      	mov	r0, r1
 800a536:	4611      	mov	r1, r2
 800a538:	461a      	mov	r2, r3
 800a53a:	4623      	mov	r3, r4
 800a53c:	71fb      	strb	r3, [r7, #7]
 800a53e:	4603      	mov	r3, r0
 800a540:	71bb      	strb	r3, [r7, #6]
 800a542:	460b      	mov	r3, r1
 800a544:	717b      	strb	r3, [r7, #5]
 800a546:	4613      	mov	r3, r2
 800a548:	713b      	strb	r3, [r7, #4]
  if ((dimming_config.ongoing == 0)
 800a54a:	4b10      	ldr	r3, [pc, #64]	; (800a58c <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d117      	bne.n	800a582 <BSP_LCD_ScreenDimmingConfig+0x56>
      && (start <= 100) && (stop <= 100)
 800a552:	79fb      	ldrb	r3, [r7, #7]
 800a554:	2b64      	cmp	r3, #100	; 0x64
 800a556:	d814      	bhi.n	800a582 <BSP_LCD_ScreenDimmingConfig+0x56>
 800a558:	79bb      	ldrb	r3, [r7, #6]
 800a55a:	2b64      	cmp	r3, #100	; 0x64
 800a55c:	d811      	bhi.n	800a582 <BSP_LCD_ScreenDimmingConfig+0x56>
      && (step > 0) && (step < 100))
 800a55e:	797b      	ldrb	r3, [r7, #5]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00e      	beq.n	800a582 <BSP_LCD_ScreenDimmingConfig+0x56>
 800a564:	797b      	ldrb	r3, [r7, #5]
 800a566:	2b63      	cmp	r3, #99	; 0x63
 800a568:	d80b      	bhi.n	800a582 <BSP_LCD_ScreenDimmingConfig+0x56>
  {
    dimming_config.start = start;
 800a56a:	4a08      	ldr	r2, [pc, #32]	; (800a58c <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a56c:	79fb      	ldrb	r3, [r7, #7]
 800a56e:	7053      	strb	r3, [r2, #1]
    dimming_config.stop  = stop;
 800a570:	4a06      	ldr	r2, [pc, #24]	; (800a58c <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a572:	79bb      	ldrb	r3, [r7, #6]
 800a574:	7093      	strb	r3, [r2, #2]
    dimming_config.step  = step;
 800a576:	4a05      	ldr	r2, [pc, #20]	; (800a58c <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a578:	797b      	ldrb	r3, [r7, #5]
 800a57a:	70d3      	strb	r3, [r2, #3]
    dimming_config.delay = delay;
 800a57c:	4a03      	ldr	r2, [pc, #12]	; (800a58c <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a57e:	793b      	ldrb	r3, [r7, #4]
 800a580:	7113      	strb	r3, [r2, #4]
  }
}
 800a582:	bf00      	nop
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bc90      	pop	{r4, r7}
 800a58a:	4770      	bx	lr
 800a58c:	20000544 	.word	0x20000544

0800a590 <BSP_LCD_ScreenDimmingOn>:
  * @note   Screen brightness is gradually decreased
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOn(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
  }


#else
  /* Counter Prescaler value */
  uint32_t uhPrescalerValue = 0;
 800a596:	2300      	movs	r3, #0
 800a598:	603b      	str	r3, [r7, #0]
  int32_t   step;

  /* Reject this while ongoing dimming */
  if (dimming_config.ongoing)
 800a59a:	4b71      	ldr	r3, [pc, #452]	; (800a760 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f040 80d9 	bne.w	800a756 <BSP_LCD_ScreenDimmingOn+0x1c6>
  {
    return;
  }

  /* Set that dim feature is active */
  dimming_on = 1;
 800a5a4:	4b6f      	ldr	r3, [pc, #444]	; (800a764 <BSP_LCD_ScreenDimmingOn+0x1d4>)
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	601a      	str	r2, [r3, #0]
  dimming_config.ongoing = 1;
 800a5aa:	4b6d      	ldr	r3, [pc, #436]	; (800a760 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	701a      	strb	r2, [r3, #0]

  if (dimming_config.stop > dimming_config.start)
 800a5b0:	4b6b      	ldr	r3, [pc, #428]	; (800a760 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a5b2:	789a      	ldrb	r2, [r3, #2]
 800a5b4:	4b6a      	ldr	r3, [pc, #424]	; (800a760 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a5b6:	785b      	ldrb	r3, [r3, #1]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d903      	bls.n	800a5c4 <BSP_LCD_ScreenDimmingOn+0x34>
  {
    step      = dimming_config.step;
 800a5bc:	4b68      	ldr	r3, [pc, #416]	; (800a760 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a5be:	78db      	ldrb	r3, [r3, #3]
 800a5c0:	607b      	str	r3, [r7, #4]
 800a5c2:	e003      	b.n	800a5cc <BSP_LCD_ScreenDimmingOn+0x3c>
  }
  else
  {
    step      = -dimming_config.step;
 800a5c4:	4b66      	ldr	r3, [pc, #408]	; (800a760 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a5c6:	78db      	ldrb	r3, [r3, #3]
 800a5c8:	425b      	negs	r3, r3
 800a5ca:	607b      	str	r3, [r7, #4]

  /* Always redo the full initialization as there is no apriori knowledge
    of IO or timer settings at this point (may have been modified by application) */

  /* Compute the prescaler value to have TIM1 counter clock equal to 16000000 Hz */
  uhPrescalerValue = (uint32_t)(SystemCoreClock / 16000000) - 1;
 800a5cc:	4b66      	ldr	r3, [pc, #408]	; (800a768 <BSP_LCD_ScreenDimmingOn+0x1d8>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a66      	ldr	r2, [pc, #408]	; (800a76c <BSP_LCD_ScreenDimmingOn+0x1dc>)
 800a5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d6:	0d9b      	lsrs	r3, r3, #22
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	603b      	str	r3, [r7, #0]

  LCD_TimHandle.Instance = TIMx;
 800a5dc:	4b64      	ldr	r3, [pc, #400]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a5de:	4a65      	ldr	r2, [pc, #404]	; (800a774 <BSP_LCD_ScreenDimmingOn+0x1e4>)
 800a5e0:	601a      	str	r2, [r3, #0]

  __HAL_TIM_RESET_HANDLE_STATE(&LCD_TimHandle); /* to force MSP call */
 800a5e2:	4b63      	ldr	r3, [pc, #396]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a5ea:	4b61      	ldr	r3, [pc, #388]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5f2:	4b5f      	ldr	r3, [pc, #380]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5fa:	4b5d      	ldr	r3, [pc, #372]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a602:	4b5b      	ldr	r3, [pc, #364]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a60a:	4b59      	ldr	r3, [pc, #356]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a612:	4b57      	ldr	r3, [pc, #348]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a614:	2200      	movs	r2, #0
 800a616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a61a:	4b55      	ldr	r3, [pc, #340]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a622:	4b53      	ldr	r3, [pc, #332]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a624:	2200      	movs	r2, #0
 800a626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a62a:	4b51      	ldr	r3, [pc, #324]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a632:	4b4f      	ldr	r3, [pc, #316]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a634:	2200      	movs	r2, #0
 800a636:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800a63a:	4b4d      	ldr	r3, [pc, #308]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  LCD_TimHandle.Init.Prescaler         = uhPrescalerValue;
 800a642:	4a4b      	ldr	r2, [pc, #300]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	6053      	str	r3, [r2, #4]
  LCD_TimHandle.Init.Period            = PERIOD_VALUE;
 800a648:	4b49      	ldr	r3, [pc, #292]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a64a:	f240 2299 	movw	r2, #665	; 0x299
 800a64e:	60da      	str	r2, [r3, #12]
  LCD_TimHandle.Init.ClockDivision     = 0;
 800a650:	4b47      	ldr	r3, [pc, #284]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a652:	2200      	movs	r2, #0
 800a654:	611a      	str	r2, [r3, #16]
  LCD_TimHandle.Init.CounterMode       = (step > 0 ? TIM_COUNTERMODE_DOWN : TIM_COUNTERMODE_UP);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	dd01      	ble.n	800a660 <BSP_LCD_ScreenDimmingOn+0xd0>
 800a65c:	2310      	movs	r3, #16
 800a65e:	e000      	b.n	800a662 <BSP_LCD_ScreenDimmingOn+0xd2>
 800a660:	2300      	movs	r3, #0
 800a662:	4a43      	ldr	r2, [pc, #268]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a664:	6093      	str	r3, [r2, #8]
  LCD_TimHandle.Init.RepetitionCounter = 0;
 800a666:	4b42      	ldr	r3, [pc, #264]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a668:	2200      	movs	r2, #0
 800a66a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&LCD_TimHandle) != HAL_OK)
 800a66c:	4840      	ldr	r0, [pc, #256]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a66e:	f008 fa5f 	bl	8012b30 <HAL_TIM_PWM_Init>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <BSP_LCD_ScreenDimmingOn+0xec>
  {
    /* Initialization Error */
    BSP_ErrorHandler();
 800a678:	f7fe fd7d 	bl	8009176 <BSP_ErrorHandler>
  }

  /* Common configuration for all channels */
  LCD_sConfig.OCMode       = TIM_OCMODE_PWM1;
 800a67c:	4b3e      	ldr	r3, [pc, #248]	; (800a778 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a67e:	2260      	movs	r2, #96	; 0x60
 800a680:	601a      	str	r2, [r3, #0]
  LCD_sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800a682:	4b3d      	ldr	r3, [pc, #244]	; (800a778 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a684:	2200      	movs	r2, #0
 800a686:	609a      	str	r2, [r3, #8]
  LCD_sConfig.OCFastMode   = TIM_OCFAST_DISABLE;
 800a688:	4b3b      	ldr	r3, [pc, #236]	; (800a778 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a68a:	2200      	movs	r2, #0
 800a68c:	611a      	str	r2, [r3, #16]
  LCD_sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800a68e:	4b3a      	ldr	r3, [pc, #232]	; (800a778 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a690:	2200      	movs	r2, #0
 800a692:	60da      	str	r2, [r3, #12]
  LCD_sConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a694:	4b38      	ldr	r3, [pc, #224]	; (800a778 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a696:	2200      	movs	r2, #0
 800a698:	619a      	str	r2, [r3, #24]

  LCD_sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800a69a:	4b37      	ldr	r3, [pc, #220]	; (800a778 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	615a      	str	r2, [r3, #20]

  /* Set the pulse value for channel */
  LCD_sConfig.Pulse = __DIMMING_CYCLE_VALUE(dimming_config.start);
 800a6a0:	4b2f      	ldr	r3, [pc, #188]	; (800a760 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a6a2:	785b      	ldrb	r3, [r3, #1]
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	f240 2399 	movw	r3, #665	; 0x299
 800a6aa:	fb02 f303 	mul.w	r3, r2, r3
 800a6ae:	4a33      	ldr	r2, [pc, #204]	; (800a77c <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800a6b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b4:	095b      	lsrs	r3, r3, #5
 800a6b6:	4a30      	ldr	r2, [pc, #192]	; (800a778 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a6b8:	6053      	str	r3, [r2, #4]
  if (HAL_TIM_PWM_ConfigChannel(&LCD_TimHandle, &LCD_sConfig, TIMx_CHANNEL) != HAL_OK)
 800a6ba:	220c      	movs	r2, #12
 800a6bc:	492e      	ldr	r1, [pc, #184]	; (800a778 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a6be:	482c      	ldr	r0, [pc, #176]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a6c0:	f008 fc2a 	bl	8012f18 <HAL_TIM_PWM_ConfigChannel>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <BSP_LCD_ScreenDimmingOn+0x13e>
  {
    /* Configuration Error */
    BSP_ErrorHandler();
 800a6ca:	f7fe fd54 	bl	8009176 <BSP_ErrorHandler>
  }

  /* Start Timer channel */
  if (HAL_TIM_PWM_Start(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800a6ce:	210c      	movs	r1, #12
 800a6d0:	4827      	ldr	r0, [pc, #156]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a6d2:	f008 fa85 	bl	8012be0 <HAL_TIM_PWM_Start>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <BSP_LCD_ScreenDimmingOn+0x150>
  {
    /* PWM Generation Error */
    BSP_ErrorHandler();
 800a6dc:	f7fe fd4b 	bl	8009176 <BSP_ErrorHandler>
  }

  /* Set the pulse value for the timer channel */
  i = dimming_config.start;
 800a6e0:	4b1f      	ldr	r3, [pc, #124]	; (800a760 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a6e2:	785b      	ldrb	r3, [r3, #1]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	4b26      	ldr	r3, [pc, #152]	; (800a780 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a6e8:	601a      	str	r2, [r3, #0]
  while (dimming_config.ongoing)
 800a6ea:	e02f      	b.n	800a74c <BSP_LCD_ScreenDimmingOn+0x1bc>
  {
    __HAL_TIM_SET_COMPARE(&LCD_TimHandle, TIMx_CHANNEL, __DIMMING_CYCLE_VALUE(i));
 800a6ec:	4b24      	ldr	r3, [pc, #144]	; (800a780 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f240 2299 	movw	r2, #665	; 0x299
 800a6f4:	fb03 f202 	mul.w	r2, r3, r2
 800a6f8:	4b1d      	ldr	r3, [pc, #116]	; (800a770 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	491f      	ldr	r1, [pc, #124]	; (800a77c <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800a6fe:	fba1 1202 	umull	r1, r2, r1, r2
 800a702:	0952      	lsrs	r2, r2, #5
 800a704:	641a      	str	r2, [r3, #64]	; 0x40

    /* Exit if stop is reached */
    if (((step > 0) && (i >= dimming_config.stop))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	dd06      	ble.n	800a71a <BSP_LCD_ScreenDimmingOn+0x18a>
 800a70c:	4b14      	ldr	r3, [pc, #80]	; (800a760 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a70e:	789b      	ldrb	r3, [r3, #2]
 800a710:	461a      	mov	r2, r3
 800a712:	4b1b      	ldr	r3, [pc, #108]	; (800a780 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	429a      	cmp	r2, r3
 800a718:	d909      	bls.n	800a72e <BSP_LCD_ScreenDimmingOn+0x19e>
        || ((step < 0) && (i <= dimming_config.stop)))
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	da0a      	bge.n	800a736 <BSP_LCD_ScreenDimmingOn+0x1a6>
 800a720:	4b0f      	ldr	r3, [pc, #60]	; (800a760 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a722:	789b      	ldrb	r3, [r3, #2]
 800a724:	461a      	mov	r2, r3
 800a726:	4b16      	ldr	r3, [pc, #88]	; (800a780 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d303      	bcc.n	800a736 <BSP_LCD_ScreenDimmingOn+0x1a6>
    {
      dimming_config.ongoing = 0;
 800a72e:	4b0c      	ldr	r3, [pc, #48]	; (800a760 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a730:	2200      	movs	r2, #0
 800a732:	701a      	strb	r2, [r3, #0]
 800a734:	e00a      	b.n	800a74c <BSP_LCD_ScreenDimmingOn+0x1bc>
    }
    else
    {
      HAL_Delay(dimming_config.delay);
 800a736:	4b0a      	ldr	r3, [pc, #40]	; (800a760 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a738:	791b      	ldrb	r3, [r3, #4]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 fbf8 	bl	800af30 <HAL_Delay>
      i += step;
 800a740:	4b0f      	ldr	r3, [pc, #60]	; (800a780 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4413      	add	r3, r2
 800a748:	4a0d      	ldr	r2, [pc, #52]	; (800a780 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a74a:	6013      	str	r3, [r2, #0]
  while (dimming_config.ongoing)
 800a74c:	4b04      	ldr	r3, [pc, #16]	; (800a760 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d1cb      	bne.n	800a6ec <BSP_LCD_ScreenDimmingOn+0x15c>
 800a754:	e000      	b.n	800a758 <BSP_LCD_ScreenDimmingOn+0x1c8>
    return;
 800a756:	bf00      	nop
    }
  }
#endif
}
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20000544 	.word	0x20000544
 800a764:	20001100 	.word	0x20001100
 800a768:	20000190 	.word	0x20000190
 800a76c:	431bde83 	.word	0x431bde83
 800a770:	20001104 	.word	0x20001104
 800a774:	40000c00 	.word	0x40000c00
 800a778:	20001150 	.word	0x20001150
 800a77c:	51eb851f 	.word	0x51eb851f
 800a780:	20001180 	.word	0x20001180

0800a784 <BSP_LCD_ScreenDimmingOff>:
  * @note   Screen brightness is immediately set to its highest level
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOff(void)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	af00      	add	r7, sp, #0
#if defined(LPTIMER_DIMMING)
  GPIO_InitTypeDef GPIO_InitStructure;
#endif

  if (dimming_on == 1)
 800a788:	4b0d      	ldr	r3, [pc, #52]	; (800a7c0 <BSP_LCD_ScreenDimmingOff+0x3c>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d114      	bne.n	800a7ba <BSP_LCD_ScreenDimmingOff+0x36>
  {
    /* Stop ongoing dimming */
    dimming_config.ongoing = 0;
 800a790:	4b0c      	ldr	r3, [pc, #48]	; (800a7c4 <BSP_LCD_ScreenDimmingOff+0x40>)
 800a792:	2200      	movs	r2, #0
 800a794:	701a      	strb	r2, [r3, #0]

    /* Disable timer clock for power consumption reasons */
    __HAL_RCC_LPTIM1_CLK_DISABLE();
#else
    /* Stop Timer channel */
    if (HAL_TIM_PWM_Stop(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800a796:	210c      	movs	r1, #12
 800a798:	480b      	ldr	r0, [pc, #44]	; (800a7c8 <BSP_LCD_ScreenDimmingOff+0x44>)
 800a79a:	f008 fb27 	bl	8012dec <HAL_TIM_PWM_Stop>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d001      	beq.n	800a7a8 <BSP_LCD_ScreenDimmingOff+0x24>
    {
      /* PWM Generation Error */
      BSP_ErrorHandler();
 800a7a4:	f7fe fce7 	bl	8009176 <BSP_ErrorHandler>
    }

    /* Disable timer clock for power consumption reasons */
    TIMx_CLK_DISABLE();
 800a7a8:	4b08      	ldr	r3, [pc, #32]	; (800a7cc <BSP_LCD_ScreenDimmingOff+0x48>)
 800a7aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ac:	4a07      	ldr	r2, [pc, #28]	; (800a7cc <BSP_LCD_ScreenDimmingOff+0x48>)
 800a7ae:	f023 0308 	bic.w	r3, r3, #8
 800a7b2:	6593      	str	r3, [r2, #88]	; 0x58
#endif

    dimming_on = 0;
 800a7b4:	4b02      	ldr	r3, [pc, #8]	; (800a7c0 <BSP_LCD_ScreenDimmingOff+0x3c>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	601a      	str	r2, [r3, #0]
  }
}
 800a7ba:	bf00      	nop
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	20001100 	.word	0x20001100
 800a7c4:	20000544 	.word	0x20000544
 800a7c8:	20001104 	.word	0x20001104
 800a7cc:	40021000 	.word	0x40021000

0800a7d0 <HAL_TIM_PWM_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b088      	sub	sp, #32
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 800a7d8:	4b0f      	ldr	r3, [pc, #60]	; (800a818 <HAL_TIM_PWM_MspInit+0x48>)
 800a7da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7dc:	4a0e      	ldr	r2, [pc, #56]	; (800a818 <HAL_TIM_PWM_MspInit+0x48>)
 800a7de:	f043 0308 	orr.w	r3, r3, #8
 800a7e2:	6593      	str	r3, [r2, #88]	; 0x58
 800a7e4:	4b0c      	ldr	r3, [pc, #48]	; (800a818 <HAL_TIM_PWM_MspInit+0x48>)
 800a7e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7e8:	f003 0308 	and.w	r3, r3, #8
 800a7ec:	60bb      	str	r3, [r7, #8]
 800a7ee:	68bb      	ldr	r3, [r7, #8]

  /* Timer channel configuration */

  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Alternate = TIMx_CHANNEl_AF;
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a800:	2301      	movs	r3, #1
 800a802:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a804:	f107 030c 	add.w	r3, r7, #12
 800a808:	4619      	mov	r1, r3
 800a80a:	4804      	ldr	r0, [pc, #16]	; (800a81c <HAL_TIM_PWM_MspInit+0x4c>)
 800a80c:	f001 fe86 	bl	800c51c <HAL_GPIO_Init>
}
 800a810:	bf00      	nop
 800a812:	3720      	adds	r7, #32
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	40021000 	.word	0x40021000
 800a81c:	48002000 	.word	0x48002000

0800a820 <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b088      	sub	sp, #32
 800a824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 800a826:	4b29      	ldr	r3, [pc, #164]	; (800a8cc <BSP_LCD_MspInit+0xac>)
 800a828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a82a:	4a28      	ldr	r2, [pc, #160]	; (800a8cc <BSP_LCD_MspInit+0xac>)
 800a82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a830:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a832:	4b26      	ldr	r3, [pc, #152]	; (800a8cc <BSP_LCD_MspInit+0xac>)
 800a834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a83a:	60bb      	str	r3, [r7, #8]
 800a83c:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800a83e:	4b23      	ldr	r3, [pc, #140]	; (800a8cc <BSP_LCD_MspInit+0xac>)
 800a840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a842:	4a22      	ldr	r2, [pc, #136]	; (800a8cc <BSP_LCD_MspInit+0xac>)
 800a844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a84a:	4b20      	ldr	r3, [pc, #128]	; (800a8cc <BSP_LCD_MspInit+0xac>)
 800a84c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a84e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a852:	607b      	str	r3, [r7, #4]
 800a854:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 800a856:	4b1d      	ldr	r3, [pc, #116]	; (800a8cc <BSP_LCD_MspInit+0xac>)
 800a858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a85a:	4a1c      	ldr	r2, [pc, #112]	; (800a8cc <BSP_LCD_MspInit+0xac>)
 800a85c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a860:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a862:	4b1a      	ldr	r3, [pc, #104]	; (800a8cc <BSP_LCD_MspInit+0xac>)
 800a864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a86a:	603b      	str	r3, [r7, #0]
 800a86c:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 800a86e:	f7ff fa57 	bl	8009d20 <BSP_IO_Init>
 800a872:	4603      	mov	r3, r0
 800a874:	2b01      	cmp	r3, #1
 800a876:	d101      	bne.n	800a87c <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 800a878:	f7fe fc7d 	bl	8009176 <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 800a87c:	2101      	movs	r1, #1
 800a87e:	2004      	movs	r0, #4
 800a880:	f7ff fa92 	bl	8009da8 <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 800a884:	2301      	movs	r3, #1
 800a886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 800a888:	2301      	movs	r3, #1
 800a88a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 800a88c:	2300      	movs	r3, #0
 800a88e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800a890:	2300      	movs	r3, #0
 800a892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 800a894:	2300      	movs	r3, #0
 800a896:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800a898:	f107 030c 	add.w	r3, r7, #12
 800a89c:	4619      	mov	r1, r3
 800a89e:	480c      	ldr	r0, [pc, #48]	; (800a8d0 <BSP_LCD_MspInit+0xb0>)
 800a8a0:	f001 fe3c 	bl	800c51c <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800a8b8:	f107 030c 	add.w	r3, r7, #12
 800a8bc:	4619      	mov	r1, r3
 800a8be:	4805      	ldr	r0, [pc, #20]	; (800a8d4 <BSP_LCD_MspInit+0xb4>)
 800a8c0:	f001 fe2c 	bl	800c51c <HAL_GPIO_Init>
}
 800a8c4:	bf00      	nop
 800a8c6:	3720      	adds	r7, #32
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	40021000 	.word	0x40021000
 800a8d0:	48002000 	.word	0x48002000
 800a8d4:	48001c00 	.word	0x48001c00

0800a8d8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b088      	sub	sp, #32
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	4603      	mov	r3, r0
 800a8e0:	603a      	str	r2, [r7, #0]
 800a8e2:	80fb      	strh	r3, [r7, #6]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	61fb      	str	r3, [r7, #28]
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  height = DrawProp.pFont->Height;
 800a8f0:	4b45      	ldr	r3, [pc, #276]	; (800aa08 <DrawChar+0x130>)
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	88db      	ldrh	r3, [r3, #6]
 800a8f6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 800a8f8:	4b43      	ldr	r3, [pc, #268]	; (800aa08 <DrawChar+0x130>)
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	889b      	ldrh	r3, [r3, #4]
 800a8fe:	823b      	strh	r3, [r7, #16]

  offset =  8 * ((width + 7) / 8) -  width ;
 800a900:	8a3b      	ldrh	r3, [r7, #16]
 800a902:	3307      	adds	r3, #7
 800a904:	2b00      	cmp	r3, #0
 800a906:	da00      	bge.n	800a90a <DrawChar+0x32>
 800a908:	3307      	adds	r3, #7
 800a90a:	10db      	asrs	r3, r3, #3
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	00db      	lsls	r3, r3, #3
 800a910:	b2da      	uxtb	r2, r3
 800a912:	8a3b      	ldrh	r3, [r7, #16]
 800a914:	b2db      	uxtb	r3, r3
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 800a91a:	2300      	movs	r3, #0
 800a91c:	61fb      	str	r3, [r7, #28]
 800a91e:	e069      	b.n	800a9f4 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 800a920:	8a3b      	ldrh	r3, [r7, #16]
 800a922:	3307      	adds	r3, #7
 800a924:	2b00      	cmp	r3, #0
 800a926:	da00      	bge.n	800a92a <DrawChar+0x52>
 800a928:	3307      	adds	r3, #7
 800a92a:	10db      	asrs	r3, r3, #3
 800a92c:	461a      	mov	r2, r3
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	fb02 f303 	mul.w	r3, r2, r3
 800a934:	683a      	ldr	r2, [r7, #0]
 800a936:	4413      	add	r3, r2
 800a938:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 800a93a:	8a3b      	ldrh	r3, [r7, #16]
 800a93c:	3307      	adds	r3, #7
 800a93e:	2b00      	cmp	r3, #0
 800a940:	da00      	bge.n	800a944 <DrawChar+0x6c>
 800a942:	3307      	adds	r3, #7
 800a944:	10db      	asrs	r3, r3, #3
 800a946:	2b01      	cmp	r3, #1
 800a948:	d002      	beq.n	800a950 <DrawChar+0x78>
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d004      	beq.n	800a958 <DrawChar+0x80>
 800a94e:	e00c      	b.n	800a96a <DrawChar+0x92>
    {
      case 1:
        line =  pchar[0];
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	617b      	str	r3, [r7, #20]
        break;
 800a956:	e016      	b.n	800a986 <DrawChar+0xae>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	021b      	lsls	r3, r3, #8
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	3201      	adds	r2, #1
 800a962:	7812      	ldrb	r2, [r2, #0]
 800a964:	4313      	orrs	r3, r2
 800a966:	617b      	str	r3, [r7, #20]
        break;
 800a968:	e00d      	b.n	800a986 <DrawChar+0xae>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	041a      	lsls	r2, r3, #16
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	3301      	adds	r3, #1
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	021b      	lsls	r3, r3, #8
 800a978:	4313      	orrs	r3, r2
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	3202      	adds	r2, #2
 800a97e:	7812      	ldrb	r2, [r2, #0]
 800a980:	4313      	orrs	r3, r2
 800a982:	617b      	str	r3, [r7, #20]
        break;
 800a984:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800a986:	2300      	movs	r3, #0
 800a988:	61bb      	str	r3, [r7, #24]
 800a98a:	e029      	b.n	800a9e0 <DrawChar+0x108>
    {
      if ((line & (1 << (width - j + offset - 1))) != 0)
 800a98c:	8a3a      	ldrh	r2, [r7, #16]
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	1ad2      	subs	r2, r2, r3
 800a992:	7bfb      	ldrb	r3, [r7, #15]
 800a994:	4413      	add	r3, r2
 800a996:	3b01      	subs	r3, #1
 800a998:	2201      	movs	r2, #1
 800a99a:	fa02 f303 	lsl.w	r3, r2, r3
 800a99e:	461a      	mov	r2, r3
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	4013      	ands	r3, r2
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00c      	beq.n	800a9c2 <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	88fb      	ldrh	r3, [r7, #6]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	4a15      	ldr	r2, [pc, #84]	; (800aa08 <DrawChar+0x130>)
 800a9b4:	6812      	ldr	r2, [r2, #0]
 800a9b6:	b292      	uxth	r2, r2
 800a9b8:	88b9      	ldrh	r1, [r7, #4]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7ff fbfe 	bl	800a1bc <BSP_LCD_DrawPixel>
 800a9c0:	e00b      	b.n	800a9da <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	88fb      	ldrh	r3, [r7, #6]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	4a0e      	ldr	r2, [pc, #56]	; (800aa08 <DrawChar+0x130>)
 800a9ce:	6852      	ldr	r2, [r2, #4]
 800a9d0:	b292      	uxth	r2, r2
 800a9d2:	88b9      	ldrh	r1, [r7, #4]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7ff fbf1 	bl	800a1bc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	61bb      	str	r3, [r7, #24]
 800a9e0:	8a3b      	ldrh	r3, [r7, #16]
 800a9e2:	69ba      	ldr	r2, [r7, #24]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d3d1      	bcc.n	800a98c <DrawChar+0xb4>
      }
    }
    Ypos++;
 800a9e8:	88bb      	ldrh	r3, [r7, #4]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	61fb      	str	r3, [r7, #28]
 800a9f4:	8a7b      	ldrh	r3, [r7, #18]
 800a9f6:	69fa      	ldr	r2, [r7, #28]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d391      	bcc.n	800a920 <DrawChar+0x48>
  }
}
 800a9fc:	bf00      	nop
 800a9fe:	bf00      	nop
 800aa00:	3720      	adds	r7, #32
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	20001170 	.word	0x20001170

0800aa0c <BSP_TS_InitEx>:
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @param  orientation : TS_ORIENTATION_LANDSCAPE or TS_ORIENTATION_PORTRAIT
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_InitEx(uint16_t ts_SizeX, uint16_t ts_SizeY, uint8_t  orientation)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	4603      	mov	r3, r0
 800aa14:	80fb      	strh	r3, [r7, #6]
 800aa16:	460b      	mov	r3, r1
 800aa18:	80bb      	strh	r3, [r7, #4]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	70fb      	strb	r3, [r7, #3]
  uint8_t ts_status = TS_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	73fb      	strb	r3, [r7, #15]
  uint16_t read_id = 0;
 800aa22:	2300      	movs	r3, #0
 800aa24:	81bb      	strh	r3, [r7, #12]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800aa26:	4b20      	ldr	r3, [pc, #128]	; (800aaa8 <BSP_TS_InitEx+0x9c>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a20      	ldr	r2, [pc, #128]	; (800aaac <BSP_TS_InitEx+0xa0>)
 800aa2c:	7812      	ldrb	r2, [r2, #0]
 800aa2e:	b292      	uxth	r2, r2
 800aa30:	4610      	mov	r0, r2
 800aa32:	4798      	blx	r3

  /* Scan FT6x36 TouchScreen IC controller ID register by I2C Read */
  /* Verify this is a FT6x36, otherwise this is an error case      */

  read_id = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800aa34:	4b1c      	ldr	r3, [pc, #112]	; (800aaa8 <BSP_TS_InitEx+0x9c>)
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	2070      	movs	r0, #112	; 0x70
 800aa3a:	4798      	blx	r3
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	81bb      	strh	r3, [r7, #12]

  if (read_id == FT6x36_ID_VALUE)
 800aa40:	89bb      	ldrh	r3, [r7, #12]
 800aa42:	2bcd      	cmp	r3, #205	; 0xcd
 800aa44:	d12a      	bne.n	800aa9c <BSP_TS_InitEx+0x90>
  {
    /* Found FT6x36 : Initialize the TS driver structure */
    tsDriver = &ft6x06_ts_drv;
 800aa46:	4b1a      	ldr	r3, [pc, #104]	; (800aab0 <BSP_TS_InitEx+0xa4>)
 800aa48:	4a17      	ldr	r2, [pc, #92]	; (800aaa8 <BSP_TS_InitEx+0x9c>)
 800aa4a:	601a      	str	r2, [r3, #0]

    I2C_Address    = TS_I2C_ADDRESS;
 800aa4c:	4b17      	ldr	r3, [pc, #92]	; (800aaac <BSP_TS_InitEx+0xa0>)
 800aa4e:	2270      	movs	r2, #112	; 0x70
 800aa50:	701a      	strb	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if (orientation == TS_ORIENTATION_PORTRAIT)
 800aa52:	78fb      	ldrb	r3, [r7, #3]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d106      	bne.n	800aa66 <BSP_TS_InitEx+0x5a>
    {
      tsOrientation = TS_SWAP_X | TS_SWAP_Y;
 800aa58:	4b16      	ldr	r3, [pc, #88]	; (800aab4 <BSP_TS_InitEx+0xa8>)
 800aa5a:	2206      	movs	r2, #6
 800aa5c:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_PORTRAIT;
 800aa5e:	4b16      	ldr	r3, [pc, #88]	; (800aab8 <BSP_TS_InitEx+0xac>)
 800aa60:	2200      	movs	r2, #0
 800aa62:	701a      	strb	r2, [r3, #0]
 800aa64:	e005      	b.n	800aa72 <BSP_TS_InitEx+0x66>
    }
    else
    {
      tsOrientation = TS_SWAP_XY | TS_SWAP_Y;
 800aa66:	4b13      	ldr	r3, [pc, #76]	; (800aab4 <BSP_TS_InitEx+0xa8>)
 800aa68:	220c      	movs	r2, #12
 800aa6a:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_LANDSCAPE;
 800aa6c:	4b12      	ldr	r3, [pc, #72]	; (800aab8 <BSP_TS_InitEx+0xac>)
 800aa6e:	2201      	movs	r2, #1
 800aa70:	701a      	strb	r2, [r3, #0]
    }

    if (ts_status == TS_OK)
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d111      	bne.n	800aa9c <BSP_TS_InitEx+0x90>
    {
      /* Software reset the TouchScreen */
      tsDriver->Reset(I2C_Address);
 800aa78:	4b0d      	ldr	r3, [pc, #52]	; (800aab0 <BSP_TS_InitEx+0xa4>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	4a0b      	ldr	r2, [pc, #44]	; (800aaac <BSP_TS_InitEx+0xa0>)
 800aa80:	7812      	ldrb	r2, [r2, #0]
 800aa82:	b292      	uxth	r2, r2
 800aa84:	4610      	mov	r0, r2
 800aa86:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      tsDriver->Start(I2C_Address);
 800aa88:	4b09      	ldr	r3, [pc, #36]	; (800aab0 <BSP_TS_InitEx+0xa4>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	4a07      	ldr	r2, [pc, #28]	; (800aaac <BSP_TS_InitEx+0xa0>)
 800aa90:	7812      	ldrb	r2, [r2, #0]
 800aa92:	b292      	uxth	r2, r2
 800aa94:	4610      	mov	r0, r2
 800aa96:	4798      	blx	r3

      return TS_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	e000      	b.n	800aa9e <BSP_TS_InitEx+0x92>

    } /* of if(ts_status == TS_OK) */
  }

  return TS_DEVICE_NOT_FOUND;
 800aa9c:	2303      	movs	r3, #3


}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20000194 	.word	0x20000194
 800aaac:	20001188 	.word	0x20001188
 800aab0:	20001184 	.word	0x20001184
 800aab4:	20000549 	.word	0x20000549
 800aab8:	2000054a 	.word	0x2000054a

0800aabc <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	71fb      	strb	r3, [r7, #7]

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x36 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 800aac6:	f000 f93b 	bl	800ad40 <BSP_TS_INT_MspInit>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  tsDriver->EnableIT(I2C_Address);
 800aaca:	4b06      	ldr	r3, [pc, #24]	; (800aae4 <BSP_TS_ITConfig+0x28>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	4a05      	ldr	r2, [pc, #20]	; (800aae8 <BSP_TS_ITConfig+0x2c>)
 800aad2:	7812      	ldrb	r2, [r2, #0]
 800aad4:	b292      	uxth	r2, r2
 800aad6:	4610      	mov	r0, r2
 800aad8:	4798      	blx	r3

  return (ts_status);
 800aada:	79fb      	ldrb	r3, [r7, #7]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3708      	adds	r7, #8
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	20001184 	.word	0x20001184
 800aae8:	20001188 	.word	0x20001188

0800aaec <BSP_TS_ITDeConfig>:
/**
  * @brief  deConfigures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITDeConfig(void)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	71fb      	strb	r3, [r7, #7]

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x36 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspDeInit();
 800aaf6:	f000 f969 	bl	800adcc <BSP_TS_INT_MspDeInit>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  tsDriver->DisableIT(I2C_Address);
 800aafa:	4b06      	ldr	r3, [pc, #24]	; (800ab14 <BSP_TS_ITDeConfig+0x28>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	4a05      	ldr	r2, [pc, #20]	; (800ab18 <BSP_TS_ITDeConfig+0x2c>)
 800ab02:	7812      	ldrb	r2, [r2, #0]
 800ab04:	b292      	uxth	r2, r2
 800ab06:	4610      	mov	r0, r2
 800ab08:	4798      	blx	r3

  return (ts_status);
 800ab0a:	79fb      	ldrb	r3, [r7, #7]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	20001184 	.word	0x20001184
 800ab18:	20001188 	.word	0x20001188

0800ab1c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800ab1c:	b590      	push	{r4, r7, lr}
 800ab1e:	b089      	sub	sp, #36	; 0x24
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2C_Address);
 800ab28:	4b80      	ldr	r3, [pc, #512]	; (800ad2c <BSP_TS_GetState+0x210>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	4a80      	ldr	r2, [pc, #512]	; (800ad30 <BSP_TS_GetState+0x214>)
 800ab30:	7812      	ldrb	r2, [r2, #0]
 800ab32:	b292      	uxth	r2, r2
 800ab34:	4610      	mov	r0, r2
 800ab36:	4798      	blx	r3
 800ab38:	4603      	mov	r3, r0
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	701a      	strb	r2, [r3, #0]
  if (TS_State->touchDetected)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f000 80ec 	beq.w	800ad22 <BSP_TS_GetState+0x206>
  {
    for (index = 0; index < TS_State->touchDetected; index++)
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	61fb      	str	r3, [r7, #28]
 800ab4e:	e0e1      	b.n	800ad14 <BSP_TS_GetState+0x1f8>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800ab50:	4b76      	ldr	r3, [pc, #472]	; (800ad2c <BSP_TS_GetState+0x210>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	4a76      	ldr	r2, [pc, #472]	; (800ad30 <BSP_TS_GetState+0x214>)
 800ab58:	7812      	ldrb	r2, [r2, #0]
 800ab5a:	b290      	uxth	r0, r2
 800ab5c:	f107 0110 	add.w	r1, r7, #16
 800ab60:	69fa      	ldr	r2, [r7, #28]
 800ab62:	0052      	lsls	r2, r2, #1
 800ab64:	188c      	adds	r4, r1, r2
 800ab66:	f107 010c 	add.w	r1, r7, #12
 800ab6a:	69fa      	ldr	r2, [r7, #28]
 800ab6c:	0052      	lsls	r2, r2, #1
 800ab6e:	440a      	add	r2, r1
 800ab70:	4621      	mov	r1, r4
 800ab72:	4798      	blx	r3

      if (tsOrientation & TS_SWAP_XY)
 800ab74:	4b6f      	ldr	r3, [pc, #444]	; (800ad34 <BSP_TS_GetState+0x218>)
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	f003 0308 	and.w	r3, r3, #8
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d019      	beq.n	800abb4 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	005b      	lsls	r3, r3, #1
 800ab84:	3320      	adds	r3, #32
 800ab86:	443b      	add	r3, r7
 800ab88:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800ab8c:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index];
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	005b      	lsls	r3, r3, #1
 800ab92:	3320      	adds	r3, #32
 800ab94:	443b      	add	r3, r7
 800ab96:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	3320      	adds	r3, #32
 800aba0:	443b      	add	r3, r7
 800aba2:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	005b      	lsls	r3, r3, #1
 800abaa:	3320      	adds	r3, #32
 800abac:	443b      	add	r3, r7
 800abae:	8b3a      	ldrh	r2, [r7, #24]
 800abb0:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      if (tsOrientation & TS_SWAP_X)
 800abb4:	4b5f      	ldr	r3, [pc, #380]	; (800ad34 <BSP_TS_GetState+0x218>)
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	f003 0302 	and.w	r3, r3, #2
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00e      	beq.n	800abde <BSP_TS_GetState+0xc2>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_x[index];
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	005b      	lsls	r3, r3, #1
 800abc4:	3320      	adds	r3, #32
 800abc6:	443b      	add	r3, r7
 800abc8:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800abcc:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	3320      	adds	r3, #32
 800abd8:	443b      	add	r3, r7
 800abda:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if (tsOrientation & TS_SWAP_Y)
 800abde:	4b55      	ldr	r3, [pc, #340]	; (800ad34 <BSP_TS_GetState+0x218>)
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	f003 0304 	and.w	r3, r3, #4
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00e      	beq.n	800ac08 <BSP_TS_GetState+0xec>
      {
        Raw_y[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_y[index];
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	005b      	lsls	r3, r3, #1
 800abee:	3320      	adds	r3, #32
 800abf0:	443b      	add	r3, r7
 800abf2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800abf6:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	005b      	lsls	r3, r3, #1
 800ac00:	3320      	adds	r3, #32
 800ac02:	443b      	add	r3, r7
 800ac04:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	005b      	lsls	r3, r3, #1
 800ac0c:	3320      	adds	r3, #32
 800ac0e:	443b      	add	r3, r7
 800ac10:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800ac14:	4619      	mov	r1, r3
 800ac16:	4a48      	ldr	r2, [pc, #288]	; (800ad38 <BSP_TS_GetState+0x21c>)
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac1e:	4299      	cmp	r1, r3
 800ac20:	d90d      	bls.n	800ac3e <BSP_TS_GetState+0x122>
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	005b      	lsls	r3, r3, #1
 800ac26:	3320      	adds	r3, #32
 800ac28:	443b      	add	r3, r7
 800ac2a:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800ac2e:	4942      	ldr	r1, [pc, #264]	; (800ad38 <BSP_TS_GetState+0x21c>)
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	e00c      	b.n	800ac58 <BSP_TS_GetState+0x13c>
 800ac3e:	4a3e      	ldr	r2, [pc, #248]	; (800ad38 <BSP_TS_GetState+0x21c>)
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	005b      	lsls	r3, r3, #1
 800ac4c:	3320      	adds	r3, #32
 800ac4e:	443b      	add	r3, r7
 800ac50:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	005b      	lsls	r3, r3, #1
 800ac5e:	3320      	adds	r3, #32
 800ac60:	443b      	add	r3, r7
 800ac62:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800ac66:	4619      	mov	r1, r3
 800ac68:	4a34      	ldr	r2, [pc, #208]	; (800ad3c <BSP_TS_GetState+0x220>)
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac70:	4299      	cmp	r1, r3
 800ac72:	d90d      	bls.n	800ac90 <BSP_TS_GetState+0x174>
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	005b      	lsls	r3, r3, #1
 800ac78:	3320      	adds	r3, #32
 800ac7a:	443b      	add	r3, r7
 800ac7c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800ac80:	492e      	ldr	r1, [pc, #184]	; (800ad3c <BSP_TS_GetState+0x220>)
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	e00c      	b.n	800acaa <BSP_TS_GetState+0x18e>
 800ac90:	4a2a      	ldr	r2, [pc, #168]	; (800ad3c <BSP_TS_GetState+0x220>)
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	005b      	lsls	r3, r3, #1
 800ac9e:	3320      	adds	r3, #32
 800aca0:	443b      	add	r3, r7
 800aca2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 800acac:	8afa      	ldrh	r2, [r7, #22]
 800acae:	8abb      	ldrh	r3, [r7, #20]
 800acb0:	4413      	add	r3, r2
 800acb2:	2b05      	cmp	r3, #5
 800acb4:	dd15      	ble.n	800ace2 <BSP_TS_GetState+0x1c6>
      {
        _x[index] = Raw_x[index];
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	3320      	adds	r3, #32
 800acbc:	443b      	add	r3, r7
 800acbe:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800acc2:	4619      	mov	r1, r3
 800acc4:	4a1c      	ldr	r2, [pc, #112]	; (800ad38 <BSP_TS_GetState+0x21c>)
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	3320      	adds	r3, #32
 800acd2:	443b      	add	r3, r7
 800acd4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800acd8:	4619      	mov	r1, r3
 800acda:	4a18      	ldr	r2, [pc, #96]	; (800ad3c <BSP_TS_GetState+0x220>)
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 800ace2:	4a15      	ldr	r2, [pc, #84]	; (800ad38 <BSP_TS_GetState+0x21c>)
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acea:	b299      	uxth	r1, r3
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	4413      	add	r3, r2
 800acf4:	460a      	mov	r2, r1
 800acf6:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 800acf8:	4a10      	ldr	r2, [pc, #64]	; (800ad3c <BSP_TS_GetState+0x220>)
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad00:	b299      	uxth	r1, r3
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	005b      	lsls	r3, r3, #1
 800ad08:	4413      	add	r3, r2
 800ad0a:	460a      	mov	r2, r1
 800ad0c:	80da      	strh	r2, [r3, #6]
    for (index = 0; index < TS_State->touchDetected; index++)
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	3301      	adds	r3, #1
 800ad12:	61fb      	str	r3, [r7, #28]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	f4ff af17 	bcc.w	800ab50 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800ad22:	7efb      	ldrb	r3, [r7, #27]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3724      	adds	r7, #36	; 0x24
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd90      	pop	{r4, r7, pc}
 800ad2c:	20001184 	.word	0x20001184
 800ad30:	20001188 	.word	0x20001188
 800ad34:	20000549 	.word	0x20000549
 800ad38:	2000118c 	.word	0x2000118c
 800ad3c:	20001194 	.word	0x20001194

0800ad40 <BSP_TS_INT_MspInit>:
  * @brief  Initializes the TS_INT pin MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b088      	sub	sp, #32
 800ad44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_PWR_CLK_ENABLE();
 800ad46:	4b1e      	ldr	r3, [pc, #120]	; (800adc0 <BSP_TS_INT_MspInit+0x80>)
 800ad48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad4a:	4a1d      	ldr	r2, [pc, #116]	; (800adc0 <BSP_TS_INT_MspInit+0x80>)
 800ad4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad50:	6593      	str	r3, [r2, #88]	; 0x58
 800ad52:	4b1b      	ldr	r3, [pc, #108]	; (800adc0 <BSP_TS_INT_MspInit+0x80>)
 800ad54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad5a:	60bb      	str	r3, [r7, #8]
 800ad5c:	68bb      	ldr	r3, [r7, #8]
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800ad5e:	4b19      	ldr	r3, [pc, #100]	; (800adc4 <BSP_TS_INT_MspInit+0x84>)
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	4a18      	ldr	r2, [pc, #96]	; (800adc4 <BSP_TS_INT_MspInit+0x84>)
 800ad64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad68:	6053      	str	r3, [r2, #4]

  TS_INT_GPIO_CLK_ENABLE();
 800ad6a:	4b15      	ldr	r3, [pc, #84]	; (800adc0 <BSP_TS_INT_MspInit+0x80>)
 800ad6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad6e:	4a14      	ldr	r2, [pc, #80]	; (800adc0 <BSP_TS_INT_MspInit+0x80>)
 800ad70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad74:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ad76:	4b12      	ldr	r3, [pc, #72]	; (800adc0 <BSP_TS_INT_MspInit+0x80>)
 800ad78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad7e:	607b      	str	r3, [r7, #4]
 800ad80:	687b      	ldr	r3, [r7, #4]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800ad82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ad86:	60fb      	str	r3, [r7, #12]

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 800ad88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ad8c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800ad92:	2302      	movs	r3, #2
 800ad94:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800ad96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800ad9a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 800ad9c:	f107 030c 	add.w	r3, r7, #12
 800ada0:	4619      	mov	r1, r3
 800ada2:	4809      	ldr	r0, [pc, #36]	; (800adc8 <BSP_TS_INT_MspInit+0x88>)
 800ada4:	f001 fbba 	bl	800c51c <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x08, 0x00);
 800ada8:	2200      	movs	r2, #0
 800adaa:	2108      	movs	r1, #8
 800adac:	2028      	movs	r0, #40	; 0x28
 800adae:	f001 f9de 	bl	800c16e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 800adb2:	2028      	movs	r0, #40	; 0x28
 800adb4:	f001 f9f7 	bl	800c1a6 <HAL_NVIC_EnableIRQ>
}
 800adb8:	bf00      	nop
 800adba:	3720      	adds	r7, #32
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	40021000 	.word	0x40021000
 800adc4:	40007000 	.word	0x40007000
 800adc8:	48001800 	.word	0x48001800

0800adcc <BSP_TS_INT_MspDeInit>:
  * @brief  Initializes the TS_INT pin MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_TS_INT_MspDeInit(void)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b088      	sub	sp, #32
 800add0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_PWR_CLK_ENABLE();
 800add2:	4b1a      	ldr	r3, [pc, #104]	; (800ae3c <BSP_TS_INT_MspDeInit+0x70>)
 800add4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add6:	4a19      	ldr	r2, [pc, #100]	; (800ae3c <BSP_TS_INT_MspDeInit+0x70>)
 800add8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800addc:	6593      	str	r3, [r2, #88]	; 0x58
 800adde:	4b17      	ldr	r3, [pc, #92]	; (800ae3c <BSP_TS_INT_MspDeInit+0x70>)
 800ade0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ade2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ade6:	60bb      	str	r3, [r7, #8]
 800ade8:	68bb      	ldr	r3, [r7, #8]
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800adea:	4b15      	ldr	r3, [pc, #84]	; (800ae40 <BSP_TS_INT_MspDeInit+0x74>)
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	4a14      	ldr	r2, [pc, #80]	; (800ae40 <BSP_TS_INT_MspDeInit+0x74>)
 800adf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800adf4:	6053      	str	r3, [r2, #4]

  TS_INT_GPIO_CLK_ENABLE();
 800adf6:	4b11      	ldr	r3, [pc, #68]	; (800ae3c <BSP_TS_INT_MspDeInit+0x70>)
 800adf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adfa:	4a10      	ldr	r2, [pc, #64]	; (800ae3c <BSP_TS_INT_MspDeInit+0x70>)
 800adfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae00:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae02:	4b0e      	ldr	r3, [pc, #56]	; (800ae3c <BSP_TS_INT_MspDeInit+0x70>)
 800ae04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae0a:	607b      	str	r3, [r7, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800ae0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ae12:	60fb      	str	r3, [r7, #12]

  gpio_init_structure.Pin = GPIO_PIN_All;
 800ae14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae18:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_ANALOG;
 800ae1a:	2303      	movs	r3, #3
 800ae1c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 800ae22:	f107 030c 	add.w	r3, r7, #12
 800ae26:	4619      	mov	r1, r3
 800ae28:	4806      	ldr	r0, [pc, #24]	; (800ae44 <BSP_TS_INT_MspDeInit+0x78>)
 800ae2a:	f001 fb77 	bl	800c51c <HAL_GPIO_Init>

  HAL_NVIC_DisableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 800ae2e:	2028      	movs	r0, #40	; 0x28
 800ae30:	f001 f9c7 	bl	800c1c2 <HAL_NVIC_DisableIRQ>
}
 800ae34:	bf00      	nop
 800ae36:	3720      	adds	r7, #32
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	40021000 	.word	0x40021000
 800ae40:	40007000 	.word	0x40007000
 800ae44:	48001800 	.word	0x48001800

0800ae48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ae52:	2003      	movs	r0, #3
 800ae54:	f001 f980 	bl	800c158 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ae58:	2000      	movs	r0, #0
 800ae5a:	f000 f80d 	bl	800ae78 <HAL_InitTick>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	71fb      	strb	r3, [r7, #7]
 800ae68:	e001      	b.n	800ae6e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ae6a:	f7f7 fa77 	bl	800235c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ae6e:	79fb      	ldrb	r3, [r7, #7]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ae80:	2300      	movs	r3, #0
 800ae82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800ae84:	4b17      	ldr	r3, [pc, #92]	; (800aee4 <HAL_InitTick+0x6c>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d023      	beq.n	800aed4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800ae8c:	4b16      	ldr	r3, [pc, #88]	; (800aee8 <HAL_InitTick+0x70>)
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	4b14      	ldr	r3, [pc, #80]	; (800aee4 <HAL_InitTick+0x6c>)
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	4619      	mov	r1, r3
 800ae96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ae9a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aea2:	4618      	mov	r0, r3
 800aea4:	f001 f99b 	bl	800c1de <HAL_SYSTICK_Config>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10f      	bne.n	800aece <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b0f      	cmp	r3, #15
 800aeb2:	d809      	bhi.n	800aec8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	6879      	ldr	r1, [r7, #4]
 800aeb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aebc:	f001 f957 	bl	800c16e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800aec0:	4a0a      	ldr	r2, [pc, #40]	; (800aeec <HAL_InitTick+0x74>)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6013      	str	r3, [r2, #0]
 800aec6:	e007      	b.n	800aed8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	73fb      	strb	r3, [r7, #15]
 800aecc:	e004      	b.n	800aed8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	73fb      	strb	r3, [r7, #15]
 800aed2:	e001      	b.n	800aed8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800aed8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	20000550 	.word	0x20000550
 800aee8:	20000190 	.word	0x20000190
 800aeec:	2000054c 	.word	0x2000054c

0800aef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aef0:	b480      	push	{r7}
 800aef2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800aef4:	4b06      	ldr	r3, [pc, #24]	; (800af10 <HAL_IncTick+0x20>)
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	461a      	mov	r2, r3
 800aefa:	4b06      	ldr	r3, [pc, #24]	; (800af14 <HAL_IncTick+0x24>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4413      	add	r3, r2
 800af00:	4a04      	ldr	r2, [pc, #16]	; (800af14 <HAL_IncTick+0x24>)
 800af02:	6013      	str	r3, [r2, #0]
}
 800af04:	bf00      	nop
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	20000550 	.word	0x20000550
 800af14:	2000119c 	.word	0x2000119c

0800af18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800af18:	b480      	push	{r7}
 800af1a:	af00      	add	r7, sp, #0
  return uwTick;
 800af1c:	4b03      	ldr	r3, [pc, #12]	; (800af2c <HAL_GetTick+0x14>)
 800af1e:	681b      	ldr	r3, [r3, #0]
}
 800af20:	4618      	mov	r0, r3
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	2000119c 	.word	0x2000119c

0800af30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800af38:	f7ff ffee 	bl	800af18 <HAL_GetTick>
 800af3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af48:	d005      	beq.n	800af56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800af4a:	4b0a      	ldr	r3, [pc, #40]	; (800af74 <HAL_Delay+0x44>)
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	4413      	add	r3, r2
 800af54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800af56:	bf00      	nop
 800af58:	f7ff ffde 	bl	800af18 <HAL_GetTick>
 800af5c:	4602      	mov	r2, r0
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	429a      	cmp	r2, r3
 800af66:	d8f7      	bhi.n	800af58 <HAL_Delay+0x28>
  {
  }
}
 800af68:	bf00      	nop
 800af6a:	bf00      	nop
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	20000550 	.word	0x20000550

0800af78 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800af78:	b480      	push	{r7}
 800af7a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800af7c:	4b05      	ldr	r3, [pc, #20]	; (800af94 <HAL_SuspendTick+0x1c>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a04      	ldr	r2, [pc, #16]	; (800af94 <HAL_SuspendTick+0x1c>)
 800af82:	f023 0302 	bic.w	r3, r3, #2
 800af86:	6013      	str	r3, [r2, #0]
}
 800af88:	bf00      	nop
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	e000e010 	.word	0xe000e010

0800af98 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800af98:	b480      	push	{r7}
 800af9a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800af9c:	4b05      	ldr	r3, [pc, #20]	; (800afb4 <HAL_ResumeTick+0x1c>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a04      	ldr	r2, [pc, #16]	; (800afb4 <HAL_ResumeTick+0x1c>)
 800afa2:	f043 0302 	orr.w	r3, r3, #2
 800afa6:	6013      	str	r3, [r2, #0]
}
 800afa8:	bf00      	nop
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	e000e010 	.word	0xe000e010

0800afb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	431a      	orrs	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	609a      	str	r2, [r3, #8]
}
 800afd2:	bf00      	nop
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr

0800afde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800afde:	b480      	push	{r7}
 800afe0:	b083      	sub	sp, #12
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	431a      	orrs	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	609a      	str	r2, [r3, #8]
}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800b014:	4618      	mov	r0, r3
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b020:	b480      	push	{r7}
 800b022:	b087      	sub	sp, #28
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
 800b02c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	3360      	adds	r3, #96	; 0x60
 800b032:	461a      	mov	r2, r3
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4413      	add	r3, r2
 800b03a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	4b08      	ldr	r3, [pc, #32]	; (800b064 <LL_ADC_SetOffset+0x44>)
 800b042:	4013      	ands	r3, r2
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	430a      	orrs	r2, r1
 800b04e:	4313      	orrs	r3, r2
 800b050:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800b058:	bf00      	nop
 800b05a:	371c      	adds	r7, #28
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr
 800b064:	03fff000 	.word	0x03fff000

0800b068 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	3360      	adds	r3, #96	; 0x60
 800b076:	461a      	mov	r2, r3
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	4413      	add	r3, r2
 800b07e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3714      	adds	r7, #20
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800b094:	b480      	push	{r7}
 800b096:	b087      	sub	sp, #28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	3360      	adds	r3, #96	; 0x60
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	431a      	orrs	r2, r3
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800b0be:	bf00      	nop
 800b0c0:	371c      	adds	r7, #28
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800b0ca:	b480      	push	{r7}
 800b0cc:	b083      	sub	sp, #12
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	695b      	ldr	r3, [r3, #20]
 800b0d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	431a      	orrs	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	615a      	str	r2, [r3, #20]
}
 800b0e4:	bf00      	nop
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	3330      	adds	r3, #48	; 0x30
 800b100:	461a      	mov	r2, r3
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	0a1b      	lsrs	r3, r3, #8
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	f003 030c 	and.w	r3, r3, #12
 800b10c:	4413      	add	r3, r2
 800b10e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	f003 031f 	and.w	r3, r3, #31
 800b11a:	211f      	movs	r1, #31
 800b11c:	fa01 f303 	lsl.w	r3, r1, r3
 800b120:	43db      	mvns	r3, r3
 800b122:	401a      	ands	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	0e9b      	lsrs	r3, r3, #26
 800b128:	f003 011f 	and.w	r1, r3, #31
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	f003 031f 	and.w	r3, r3, #31
 800b132:	fa01 f303 	lsl.w	r3, r1, r3
 800b136:	431a      	orrs	r2, r3
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b13c:	bf00      	nop
 800b13e:	371c      	adds	r7, #28
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b148:	b480      	push	{r7}
 800b14a:	b087      	sub	sp, #28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	3314      	adds	r3, #20
 800b158:	461a      	mov	r2, r3
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	0e5b      	lsrs	r3, r3, #25
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	f003 0304 	and.w	r3, r3, #4
 800b164:	4413      	add	r3, r2
 800b166:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	0d1b      	lsrs	r3, r3, #20
 800b170:	f003 031f 	and.w	r3, r3, #31
 800b174:	2107      	movs	r1, #7
 800b176:	fa01 f303 	lsl.w	r3, r1, r3
 800b17a:	43db      	mvns	r3, r3
 800b17c:	401a      	ands	r2, r3
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	0d1b      	lsrs	r3, r3, #20
 800b182:	f003 031f 	and.w	r3, r3, #31
 800b186:	6879      	ldr	r1, [r7, #4]
 800b188:	fa01 f303 	lsl.w	r3, r1, r3
 800b18c:	431a      	orrs	r2, r3
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b192:	bf00      	nop
 800b194:	371c      	adds	r7, #28
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
	...

0800b1a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1b8:	43db      	mvns	r3, r3
 800b1ba:	401a      	ands	r2, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f003 0318 	and.w	r3, r3, #24
 800b1c2:	4908      	ldr	r1, [pc, #32]	; (800b1e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 800b1c4:	40d9      	lsrs	r1, r3
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	400b      	ands	r3, r1
 800b1ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1ce:	431a      	orrs	r2, r3
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800b1d6:	bf00      	nop
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	0007ffff 	.word	0x0007ffff

0800b1e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800b1f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	6093      	str	r3, [r2, #8]
}
 800b200:	bf00      	nop
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b21c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b220:	d101      	bne.n	800b226 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b222:	2301      	movs	r3, #1
 800b224:	e000      	b.n	800b228 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800b244:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b248:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b26c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b270:	d101      	bne.n	800b276 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b272:	2301      	movs	r3, #1
 800b274:	e000      	b.n	800b278 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	f003 0301 	and.w	r3, r3, #1
 800b294:	2b01      	cmp	r3, #1
 800b296:	d101      	bne.n	800b29c <LL_ADC_IsEnabled+0x18>
 800b298:	2301      	movs	r3, #1
 800b29a:	e000      	b.n	800b29e <LL_ADC_IsEnabled+0x1a>
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr

0800b2aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b2aa:	b480      	push	{r7}
 800b2ac:	b083      	sub	sp, #12
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	f003 0304 	and.w	r3, r3, #4
 800b2ba:	2b04      	cmp	r3, #4
 800b2bc:	d101      	bne.n	800b2c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e000      	b.n	800b2c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	f003 0308 	and.w	r3, r3, #8
 800b2e0:	2b08      	cmp	r3, #8
 800b2e2:	d101      	bne.n	800b2e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e000      	b.n	800b2ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	370c      	adds	r7, #12
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
	...

0800b2f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b2f8:	b590      	push	{r4, r7, lr}
 800b2fa:	b089      	sub	sp, #36	; 0x24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b300:	2300      	movs	r3, #0
 800b302:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800b304:	2300      	movs	r3, #0
 800b306:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d101      	bne.n	800b312 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	e139      	b.n	800b586 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d109      	bne.n	800b334 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f7f5 fa75 	bl	8000810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4618      	mov	r0, r3
 800b33a:	f7ff ff67 	bl	800b20c <LL_ADC_IsDeepPowerDownEnabled>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d004      	beq.n	800b34e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4618      	mov	r0, r3
 800b34a:	f7ff ff4d 	bl	800b1e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4618      	mov	r0, r3
 800b354:	f7ff ff82 	bl	800b25c <LL_ADC_IsInternalRegulatorEnabled>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d115      	bne.n	800b38a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4618      	mov	r0, r3
 800b364:	f7ff ff66 	bl	800b234 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b368:	4b89      	ldr	r3, [pc, #548]	; (800b590 <HAL_ADC_Init+0x298>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	099b      	lsrs	r3, r3, #6
 800b36e:	4a89      	ldr	r2, [pc, #548]	; (800b594 <HAL_ADC_Init+0x29c>)
 800b370:	fba2 2303 	umull	r2, r3, r2, r3
 800b374:	099b      	lsrs	r3, r3, #6
 800b376:	3301      	adds	r3, #1
 800b378:	005b      	lsls	r3, r3, #1
 800b37a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b37c:	e002      	b.n	800b384 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	3b01      	subs	r3, #1
 800b382:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1f9      	bne.n	800b37e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4618      	mov	r0, r3
 800b390:	f7ff ff64 	bl	800b25c <LL_ADC_IsInternalRegulatorEnabled>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10d      	bne.n	800b3b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b39e:	f043 0210 	orr.w	r2, r3, #16
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3aa:	f043 0201 	orr.w	r2, r3, #1
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7ff ff75 	bl	800b2aa <LL_ADC_REG_IsConversionOngoing>
 800b3c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3c6:	f003 0310 	and.w	r3, r3, #16
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	f040 80d2 	bne.w	800b574 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f040 80ce 	bne.w	800b574 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b3e0:	f043 0202 	orr.w	r2, r3, #2
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7ff ff49 	bl	800b284 <LL_ADC_IsEnabled>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d115      	bne.n	800b424 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b3f8:	4867      	ldr	r0, [pc, #412]	; (800b598 <HAL_ADC_Init+0x2a0>)
 800b3fa:	f7ff ff43 	bl	800b284 <LL_ADC_IsEnabled>
 800b3fe:	4604      	mov	r4, r0
 800b400:	4866      	ldr	r0, [pc, #408]	; (800b59c <HAL_ADC_Init+0x2a4>)
 800b402:	f7ff ff3f 	bl	800b284 <LL_ADC_IsEnabled>
 800b406:	4603      	mov	r3, r0
 800b408:	431c      	orrs	r4, r3
 800b40a:	4865      	ldr	r0, [pc, #404]	; (800b5a0 <HAL_ADC_Init+0x2a8>)
 800b40c:	f7ff ff3a 	bl	800b284 <LL_ADC_IsEnabled>
 800b410:	4603      	mov	r3, r0
 800b412:	4323      	orrs	r3, r4
 800b414:	2b00      	cmp	r3, #0
 800b416:	d105      	bne.n	800b424 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	4619      	mov	r1, r3
 800b41e:	4861      	ldr	r0, [pc, #388]	; (800b5a4 <HAL_ADC_Init+0x2ac>)
 800b420:	f7ff fdca 	bl	800afb8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	7e5b      	ldrb	r3, [r3, #25]
 800b428:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b42e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800b434:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800b43a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b442:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b444:	4313      	orrs	r3, r2
 800b446:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d106      	bne.n	800b460 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b456:	3b01      	subs	r3, #1
 800b458:	045b      	lsls	r3, r3, #17
 800b45a:	69ba      	ldr	r2, [r7, #24]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b464:	2b00      	cmp	r3, #0
 800b466:	d009      	beq.n	800b47c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b46c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b474:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b476:	69ba      	ldr	r2, [r7, #24]
 800b478:	4313      	orrs	r3, r2
 800b47a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	68da      	ldr	r2, [r3, #12]
 800b482:	4b49      	ldr	r3, [pc, #292]	; (800b5a8 <HAL_ADC_Init+0x2b0>)
 800b484:	4013      	ands	r3, r2
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	6812      	ldr	r2, [r2, #0]
 800b48a:	69b9      	ldr	r1, [r7, #24]
 800b48c:	430b      	orrs	r3, r1
 800b48e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4618      	mov	r0, r3
 800b496:	f7ff ff08 	bl	800b2aa <LL_ADC_REG_IsConversionOngoing>
 800b49a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7ff ff15 	bl	800b2d0 <LL_ADC_INJ_IsConversionOngoing>
 800b4a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d140      	bne.n	800b530 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d13d      	bne.n	800b530 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	7e1b      	ldrb	r3, [r3, #24]
 800b4bc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b4be:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b4c6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4d6:	f023 0306 	bic.w	r3, r3, #6
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	6812      	ldr	r2, [r2, #0]
 800b4de:	69b9      	ldr	r1, [r7, #24]
 800b4e0:	430b      	orrs	r3, r1
 800b4e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d118      	bne.n	800b520 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b4f8:	f023 0304 	bic.w	r3, r3, #4
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b504:	4311      	orrs	r1, r2
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b50a:	4311      	orrs	r1, r2
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b510:	430a      	orrs	r2, r1
 800b512:	431a      	orrs	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f042 0201 	orr.w	r2, r2, #1
 800b51c:	611a      	str	r2, [r3, #16]
 800b51e:	e007      	b.n	800b530 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	691a      	ldr	r2, [r3, #16]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f022 0201 	bic.w	r2, r2, #1
 800b52e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d10c      	bne.n	800b552 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b53e:	f023 010f 	bic.w	r1, r3, #15
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	69db      	ldr	r3, [r3, #28]
 800b546:	1e5a      	subs	r2, r3, #1
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	430a      	orrs	r2, r1
 800b54e:	631a      	str	r2, [r3, #48]	; 0x30
 800b550:	e007      	b.n	800b562 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f022 020f 	bic.w	r2, r2, #15
 800b560:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b566:	f023 0303 	bic.w	r3, r3, #3
 800b56a:	f043 0201 	orr.w	r2, r3, #1
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	659a      	str	r2, [r3, #88]	; 0x58
 800b572:	e007      	b.n	800b584 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b578:	f043 0210 	orr.w	r2, r3, #16
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b584:	7ffb      	ldrb	r3, [r7, #31]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3724      	adds	r7, #36	; 0x24
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd90      	pop	{r4, r7, pc}
 800b58e:	bf00      	nop
 800b590:	20000190 	.word	0x20000190
 800b594:	053e2d63 	.word	0x053e2d63
 800b598:	50040000 	.word	0x50040000
 800b59c:	50040100 	.word	0x50040100
 800b5a0:	50040200 	.word	0x50040200
 800b5a4:	50040300 	.word	0x50040300
 800b5a8:	fff0c007 	.word	0xfff0c007

0800b5ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b0b6      	sub	sp, #216	; 0xd8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d101      	bne.n	800b5ce <HAL_ADC_ConfigChannel+0x22>
 800b5ca:	2302      	movs	r3, #2
 800b5cc:	e3e3      	b.n	800bd96 <HAL_ADC_ConfigChannel+0x7ea>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7ff fe65 	bl	800b2aa <LL_ADC_REG_IsConversionOngoing>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f040 83c4 	bne.w	800bd70 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	2b05      	cmp	r3, #5
 800b5ee:	d824      	bhi.n	800b63a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	3b02      	subs	r3, #2
 800b5f6:	2b03      	cmp	r3, #3
 800b5f8:	d81b      	bhi.n	800b632 <HAL_ADC_ConfigChannel+0x86>
 800b5fa:	a201      	add	r2, pc, #4	; (adr r2, 800b600 <HAL_ADC_ConfigChannel+0x54>)
 800b5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b600:	0800b611 	.word	0x0800b611
 800b604:	0800b619 	.word	0x0800b619
 800b608:	0800b621 	.word	0x0800b621
 800b60c:	0800b629 	.word	0x0800b629
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	220c      	movs	r2, #12
 800b614:	605a      	str	r2, [r3, #4]
          break;
 800b616:	e011      	b.n	800b63c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	2212      	movs	r2, #18
 800b61c:	605a      	str	r2, [r3, #4]
          break;
 800b61e:	e00d      	b.n	800b63c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	2218      	movs	r2, #24
 800b624:	605a      	str	r2, [r3, #4]
          break;
 800b626:	e009      	b.n	800b63c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b62e:	605a      	str	r2, [r3, #4]
          break;
 800b630:	e004      	b.n	800b63c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	2206      	movs	r2, #6
 800b636:	605a      	str	r2, [r3, #4]
          break;
 800b638:	e000      	b.n	800b63c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800b63a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6818      	ldr	r0, [r3, #0]
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	6859      	ldr	r1, [r3, #4]
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	461a      	mov	r2, r3
 800b64a:	f7ff fd51 	bl	800b0f0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4618      	mov	r0, r3
 800b654:	f7ff fe29 	bl	800b2aa <LL_ADC_REG_IsConversionOngoing>
 800b658:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4618      	mov	r0, r3
 800b662:	f7ff fe35 	bl	800b2d0 <LL_ADC_INJ_IsConversionOngoing>
 800b666:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b66a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f040 81c1 	bne.w	800b9f6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b674:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f040 81bc 	bne.w	800b9f6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b686:	d10f      	bne.n	800b6a8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6818      	ldr	r0, [r3, #0]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2200      	movs	r2, #0
 800b692:	4619      	mov	r1, r3
 800b694:	f7ff fd58 	bl	800b148 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7ff fd12 	bl	800b0ca <LL_ADC_SetSamplingTimeCommonConfig>
 800b6a6:	e00e      	b.n	800b6c6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6818      	ldr	r0, [r3, #0]
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	6819      	ldr	r1, [r3, #0]
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	f7ff fd47 	bl	800b148 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2100      	movs	r1, #0
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7ff fd02 	bl	800b0ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	695a      	ldr	r2, [r3, #20]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	08db      	lsrs	r3, r3, #3
 800b6d2:	f003 0303 	and.w	r3, r3, #3
 800b6d6:	005b      	lsls	r3, r3, #1
 800b6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	691b      	ldr	r3, [r3, #16]
 800b6e4:	2b04      	cmp	r3, #4
 800b6e6:	d00a      	beq.n	800b6fe <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6818      	ldr	r0, [r3, #0]
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	6919      	ldr	r1, [r3, #16]
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6f8:	f7ff fc92 	bl	800b020 <LL_ADC_SetOffset>
 800b6fc:	e17b      	b.n	800b9f6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2100      	movs	r1, #0
 800b704:	4618      	mov	r0, r3
 800b706:	f7ff fcaf 	bl	800b068 <LL_ADC_GetOffsetChannel>
 800b70a:	4603      	mov	r3, r0
 800b70c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b710:	2b00      	cmp	r3, #0
 800b712:	d10a      	bne.n	800b72a <HAL_ADC_ConfigChannel+0x17e>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2100      	movs	r1, #0
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7ff fca4 	bl	800b068 <LL_ADC_GetOffsetChannel>
 800b720:	4603      	mov	r3, r0
 800b722:	0e9b      	lsrs	r3, r3, #26
 800b724:	f003 021f 	and.w	r2, r3, #31
 800b728:	e01e      	b.n	800b768 <HAL_ADC_ConfigChannel+0x1bc>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2100      	movs	r1, #0
 800b730:	4618      	mov	r0, r3
 800b732:	f7ff fc99 	bl	800b068 <LL_ADC_GetOffsetChannel>
 800b736:	4603      	mov	r3, r0
 800b738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b73c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b740:	fa93 f3a3 	rbit	r3, r3
 800b744:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b748:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b74c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b750:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d101      	bne.n	800b75c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800b758:	2320      	movs	r3, #32
 800b75a:	e004      	b.n	800b766 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800b75c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b760:	fab3 f383 	clz	r3, r3
 800b764:	b2db      	uxtb	r3, r3
 800b766:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b770:	2b00      	cmp	r3, #0
 800b772:	d105      	bne.n	800b780 <HAL_ADC_ConfigChannel+0x1d4>
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	0e9b      	lsrs	r3, r3, #26
 800b77a:	f003 031f 	and.w	r3, r3, #31
 800b77e:	e018      	b.n	800b7b2 <HAL_ADC_ConfigChannel+0x206>
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b788:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b78c:	fa93 f3a3 	rbit	r3, r3
 800b790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800b794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800b79c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800b7a4:	2320      	movs	r3, #32
 800b7a6:	e004      	b.n	800b7b2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800b7a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b7ac:	fab3 f383 	clz	r3, r3
 800b7b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d106      	bne.n	800b7c4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	2100      	movs	r1, #0
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7ff fc68 	bl	800b094 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7ff fc4c 	bl	800b068 <LL_ADC_GetOffsetChannel>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10a      	bne.n	800b7f0 <HAL_ADC_ConfigChannel+0x244>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2101      	movs	r1, #1
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7ff fc41 	bl	800b068 <LL_ADC_GetOffsetChannel>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	0e9b      	lsrs	r3, r3, #26
 800b7ea:	f003 021f 	and.w	r2, r3, #31
 800b7ee:	e01e      	b.n	800b82e <HAL_ADC_ConfigChannel+0x282>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff fc36 	bl	800b068 <LL_ADC_GetOffsetChannel>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b802:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b806:	fa93 f3a3 	rbit	r3, r3
 800b80a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800b80e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b812:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800b816:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d101      	bne.n	800b822 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800b81e:	2320      	movs	r3, #32
 800b820:	e004      	b.n	800b82c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800b822:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b826:	fab3 f383 	clz	r3, r3
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b836:	2b00      	cmp	r3, #0
 800b838:	d105      	bne.n	800b846 <HAL_ADC_ConfigChannel+0x29a>
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	0e9b      	lsrs	r3, r3, #26
 800b840:	f003 031f 	and.w	r3, r3, #31
 800b844:	e018      	b.n	800b878 <HAL_ADC_ConfigChannel+0x2cc>
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b84e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b852:	fa93 f3a3 	rbit	r3, r3
 800b856:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800b85a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b85e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800b862:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b866:	2b00      	cmp	r3, #0
 800b868:	d101      	bne.n	800b86e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800b86a:	2320      	movs	r3, #32
 800b86c:	e004      	b.n	800b878 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800b86e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b872:	fab3 f383 	clz	r3, r3
 800b876:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b878:	429a      	cmp	r2, r3
 800b87a:	d106      	bne.n	800b88a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2200      	movs	r2, #0
 800b882:	2101      	movs	r1, #1
 800b884:	4618      	mov	r0, r3
 800b886:	f7ff fc05 	bl	800b094 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2102      	movs	r1, #2
 800b890:	4618      	mov	r0, r3
 800b892:	f7ff fbe9 	bl	800b068 <LL_ADC_GetOffsetChannel>
 800b896:	4603      	mov	r3, r0
 800b898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10a      	bne.n	800b8b6 <HAL_ADC_ConfigChannel+0x30a>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2102      	movs	r1, #2
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7ff fbde 	bl	800b068 <LL_ADC_GetOffsetChannel>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	0e9b      	lsrs	r3, r3, #26
 800b8b0:	f003 021f 	and.w	r2, r3, #31
 800b8b4:	e01e      	b.n	800b8f4 <HAL_ADC_ConfigChannel+0x348>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2102      	movs	r1, #2
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7ff fbd3 	bl	800b068 <LL_ADC_GetOffsetChannel>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8cc:	fa93 f3a3 	rbit	r3, r3
 800b8d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800b8d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b8d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800b8dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d101      	bne.n	800b8e8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800b8e4:	2320      	movs	r3, #32
 800b8e6:	e004      	b.n	800b8f2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800b8e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8ec:	fab3 f383 	clz	r3, r3
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d105      	bne.n	800b90c <HAL_ADC_ConfigChannel+0x360>
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	0e9b      	lsrs	r3, r3, #26
 800b906:	f003 031f 	and.w	r3, r3, #31
 800b90a:	e016      	b.n	800b93a <HAL_ADC_ConfigChannel+0x38e>
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b914:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b918:	fa93 f3a3 	rbit	r3, r3
 800b91c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800b91e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800b924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d101      	bne.n	800b930 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800b92c:	2320      	movs	r3, #32
 800b92e:	e004      	b.n	800b93a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800b930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b934:	fab3 f383 	clz	r3, r3
 800b938:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d106      	bne.n	800b94c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2200      	movs	r2, #0
 800b944:	2102      	movs	r1, #2
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff fba4 	bl	800b094 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2103      	movs	r1, #3
 800b952:	4618      	mov	r0, r3
 800b954:	f7ff fb88 	bl	800b068 <LL_ADC_GetOffsetChannel>
 800b958:	4603      	mov	r3, r0
 800b95a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10a      	bne.n	800b978 <HAL_ADC_ConfigChannel+0x3cc>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2103      	movs	r1, #3
 800b968:	4618      	mov	r0, r3
 800b96a:	f7ff fb7d 	bl	800b068 <LL_ADC_GetOffsetChannel>
 800b96e:	4603      	mov	r3, r0
 800b970:	0e9b      	lsrs	r3, r3, #26
 800b972:	f003 021f 	and.w	r2, r3, #31
 800b976:	e017      	b.n	800b9a8 <HAL_ADC_ConfigChannel+0x3fc>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2103      	movs	r1, #3
 800b97e:	4618      	mov	r0, r3
 800b980:	f7ff fb72 	bl	800b068 <LL_ADC_GetOffsetChannel>
 800b984:	4603      	mov	r3, r0
 800b986:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b98a:	fa93 f3a3 	rbit	r3, r3
 800b98e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800b990:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b992:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800b994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b996:	2b00      	cmp	r3, #0
 800b998:	d101      	bne.n	800b99e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800b99a:	2320      	movs	r3, #32
 800b99c:	e003      	b.n	800b9a6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800b99e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9a0:	fab3 f383 	clz	r3, r3
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d105      	bne.n	800b9c0 <HAL_ADC_ConfigChannel+0x414>
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	0e9b      	lsrs	r3, r3, #26
 800b9ba:	f003 031f 	and.w	r3, r3, #31
 800b9be:	e011      	b.n	800b9e4 <HAL_ADC_ConfigChannel+0x438>
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9c8:	fa93 f3a3 	rbit	r3, r3
 800b9cc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800b9ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800b9d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d101      	bne.n	800b9dc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800b9d8:	2320      	movs	r3, #32
 800b9da:	e003      	b.n	800b9e4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800b9dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9de:	fab3 f383 	clz	r3, r3
 800b9e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d106      	bne.n	800b9f6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	2103      	movs	r1, #3
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7ff fb4f 	bl	800b094 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7ff fc42 	bl	800b284 <LL_ADC_IsEnabled>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f040 8140 	bne.w	800bc88 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6818      	ldr	r0, [r3, #0]
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	6819      	ldr	r1, [r3, #0]
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	461a      	mov	r2, r3
 800ba16:	f7ff fbc3 	bl	800b1a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	4a8f      	ldr	r2, [pc, #572]	; (800bc5c <HAL_ADC_ConfigChannel+0x6b0>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	f040 8131 	bne.w	800bc88 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10b      	bne.n	800ba4e <HAL_ADC_ConfigChannel+0x4a2>
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	0e9b      	lsrs	r3, r3, #26
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	f003 031f 	and.w	r3, r3, #31
 800ba42:	2b09      	cmp	r3, #9
 800ba44:	bf94      	ite	ls
 800ba46:	2301      	movls	r3, #1
 800ba48:	2300      	movhi	r3, #0
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	e019      	b.n	800ba82 <HAL_ADC_ConfigChannel+0x4d6>
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba56:	fa93 f3a3 	rbit	r3, r3
 800ba5a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800ba5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba5e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800ba60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d101      	bne.n	800ba6a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800ba66:	2320      	movs	r3, #32
 800ba68:	e003      	b.n	800ba72 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800ba6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba6c:	fab3 f383 	clz	r3, r3
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	3301      	adds	r3, #1
 800ba74:	f003 031f 	and.w	r3, r3, #31
 800ba78:	2b09      	cmp	r3, #9
 800ba7a:	bf94      	ite	ls
 800ba7c:	2301      	movls	r3, #1
 800ba7e:	2300      	movhi	r3, #0
 800ba80:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d079      	beq.n	800bb7a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d107      	bne.n	800baa2 <HAL_ADC_ConfigChannel+0x4f6>
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	0e9b      	lsrs	r3, r3, #26
 800ba98:	3301      	adds	r3, #1
 800ba9a:	069b      	lsls	r3, r3, #26
 800ba9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800baa0:	e015      	b.n	800bace <HAL_ADC_ConfigChannel+0x522>
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800baa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baaa:	fa93 f3a3 	rbit	r3, r3
 800baae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800bab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bab2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800bab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d101      	bne.n	800babe <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800baba:	2320      	movs	r3, #32
 800babc:	e003      	b.n	800bac6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800babe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bac0:	fab3 f383 	clz	r3, r3
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	3301      	adds	r3, #1
 800bac8:	069b      	lsls	r3, r3, #26
 800baca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d109      	bne.n	800baee <HAL_ADC_ConfigChannel+0x542>
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	0e9b      	lsrs	r3, r3, #26
 800bae0:	3301      	adds	r3, #1
 800bae2:	f003 031f 	and.w	r3, r3, #31
 800bae6:	2101      	movs	r1, #1
 800bae8:	fa01 f303 	lsl.w	r3, r1, r3
 800baec:	e017      	b.n	800bb1e <HAL_ADC_ConfigChannel+0x572>
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800baf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baf6:	fa93 f3a3 	rbit	r3, r3
 800bafa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800bafc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bafe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800bb00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d101      	bne.n	800bb0a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800bb06:	2320      	movs	r3, #32
 800bb08:	e003      	b.n	800bb12 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800bb0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb0c:	fab3 f383 	clz	r3, r3
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	3301      	adds	r3, #1
 800bb14:	f003 031f 	and.w	r3, r3, #31
 800bb18:	2101      	movs	r1, #1
 800bb1a:	fa01 f303 	lsl.w	r3, r1, r3
 800bb1e:	ea42 0103 	orr.w	r1, r2, r3
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10a      	bne.n	800bb44 <HAL_ADC_ConfigChannel+0x598>
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	0e9b      	lsrs	r3, r3, #26
 800bb34:	3301      	adds	r3, #1
 800bb36:	f003 021f 	and.w	r2, r3, #31
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	005b      	lsls	r3, r3, #1
 800bb3e:	4413      	add	r3, r2
 800bb40:	051b      	lsls	r3, r3, #20
 800bb42:	e018      	b.n	800bb76 <HAL_ADC_ConfigChannel+0x5ca>
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4c:	fa93 f3a3 	rbit	r3, r3
 800bb50:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800bb52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800bb56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d101      	bne.n	800bb60 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800bb5c:	2320      	movs	r3, #32
 800bb5e:	e003      	b.n	800bb68 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800bb60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb62:	fab3 f383 	clz	r3, r3
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	3301      	adds	r3, #1
 800bb6a:	f003 021f 	and.w	r2, r3, #31
 800bb6e:	4613      	mov	r3, r2
 800bb70:	005b      	lsls	r3, r3, #1
 800bb72:	4413      	add	r3, r2
 800bb74:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bb76:	430b      	orrs	r3, r1
 800bb78:	e081      	b.n	800bc7e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d107      	bne.n	800bb96 <HAL_ADC_ConfigChannel+0x5ea>
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	0e9b      	lsrs	r3, r3, #26
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	069b      	lsls	r3, r3, #26
 800bb90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800bb94:	e015      	b.n	800bbc2 <HAL_ADC_ConfigChannel+0x616>
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9e:	fa93 f3a3 	rbit	r3, r3
 800bba2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800bba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800bba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d101      	bne.n	800bbb2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800bbae:	2320      	movs	r3, #32
 800bbb0:	e003      	b.n	800bbba <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	fab3 f383 	clz	r3, r3
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	3301      	adds	r3, #1
 800bbbc:	069b      	lsls	r3, r3, #26
 800bbbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d109      	bne.n	800bbe2 <HAL_ADC_ConfigChannel+0x636>
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	0e9b      	lsrs	r3, r3, #26
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	f003 031f 	and.w	r3, r3, #31
 800bbda:	2101      	movs	r1, #1
 800bbdc:	fa01 f303 	lsl.w	r3, r1, r3
 800bbe0:	e017      	b.n	800bc12 <HAL_ADC_ConfigChannel+0x666>
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbe8:	6a3b      	ldr	r3, [r7, #32]
 800bbea:	fa93 f3a3 	rbit	r3, r3
 800bbee:	61fb      	str	r3, [r7, #28]
  return result;
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800bbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800bbfa:	2320      	movs	r3, #32
 800bbfc:	e003      	b.n	800bc06 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc00:	fab3 f383 	clz	r3, r3
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	3301      	adds	r3, #1
 800bc08:	f003 031f 	and.w	r3, r3, #31
 800bc0c:	2101      	movs	r1, #1
 800bc0e:	fa01 f303 	lsl.w	r3, r1, r3
 800bc12:	ea42 0103 	orr.w	r1, r2, r3
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10d      	bne.n	800bc3e <HAL_ADC_ConfigChannel+0x692>
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	0e9b      	lsrs	r3, r3, #26
 800bc28:	3301      	adds	r3, #1
 800bc2a:	f003 021f 	and.w	r2, r3, #31
 800bc2e:	4613      	mov	r3, r2
 800bc30:	005b      	lsls	r3, r3, #1
 800bc32:	4413      	add	r3, r2
 800bc34:	3b1e      	subs	r3, #30
 800bc36:	051b      	lsls	r3, r3, #20
 800bc38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bc3c:	e01e      	b.n	800bc7c <HAL_ADC_ConfigChannel+0x6d0>
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	fa93 f3a3 	rbit	r3, r3
 800bc4a:	613b      	str	r3, [r7, #16]
  return result;
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d104      	bne.n	800bc60 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800bc56:	2320      	movs	r3, #32
 800bc58:	e006      	b.n	800bc68 <HAL_ADC_ConfigChannel+0x6bc>
 800bc5a:	bf00      	nop
 800bc5c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	fab3 f383 	clz	r3, r3
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	3301      	adds	r3, #1
 800bc6a:	f003 021f 	and.w	r2, r3, #31
 800bc6e:	4613      	mov	r3, r2
 800bc70:	005b      	lsls	r3, r3, #1
 800bc72:	4413      	add	r3, r2
 800bc74:	3b1e      	subs	r3, #30
 800bc76:	051b      	lsls	r3, r3, #20
 800bc78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bc7c:	430b      	orrs	r3, r1
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	6892      	ldr	r2, [r2, #8]
 800bc82:	4619      	mov	r1, r3
 800bc84:	f7ff fa60 	bl	800b148 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	4b44      	ldr	r3, [pc, #272]	; (800bda0 <HAL_ADC_ConfigChannel+0x7f4>)
 800bc8e:	4013      	ands	r3, r2
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d07a      	beq.n	800bd8a <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800bc94:	4843      	ldr	r0, [pc, #268]	; (800bda4 <HAL_ADC_ConfigChannel+0x7f8>)
 800bc96:	f7ff f9b5 	bl	800b004 <LL_ADC_GetCommonPathInternalCh>
 800bc9a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a41      	ldr	r2, [pc, #260]	; (800bda8 <HAL_ADC_ConfigChannel+0x7fc>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d12c      	bne.n	800bd02 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800bca8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bcac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d126      	bne.n	800bd02 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a3c      	ldr	r2, [pc, #240]	; (800bdac <HAL_ADC_ConfigChannel+0x800>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d004      	beq.n	800bcc8 <HAL_ADC_ConfigChannel+0x71c>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a3b      	ldr	r2, [pc, #236]	; (800bdb0 <HAL_ADC_ConfigChannel+0x804>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d15d      	bne.n	800bd84 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bcc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bccc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	4834      	ldr	r0, [pc, #208]	; (800bda4 <HAL_ADC_ConfigChannel+0x7f8>)
 800bcd4:	f7ff f983 	bl	800afde <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bcd8:	4b36      	ldr	r3, [pc, #216]	; (800bdb4 <HAL_ADC_ConfigChannel+0x808>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	099b      	lsrs	r3, r3, #6
 800bcde:	4a36      	ldr	r2, [pc, #216]	; (800bdb8 <HAL_ADC_ConfigChannel+0x80c>)
 800bce0:	fba2 2303 	umull	r2, r3, r2, r3
 800bce4:	099b      	lsrs	r3, r3, #6
 800bce6:	1c5a      	adds	r2, r3, #1
 800bce8:	4613      	mov	r3, r2
 800bcea:	005b      	lsls	r3, r3, #1
 800bcec:	4413      	add	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800bcf2:	e002      	b.n	800bcfa <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1f9      	bne.n	800bcf4 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bd00:	e040      	b.n	800bd84 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a2d      	ldr	r2, [pc, #180]	; (800bdbc <HAL_ADC_ConfigChannel+0x810>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d118      	bne.n	800bd3e <HAL_ADC_ConfigChannel+0x792>
 800bd0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bd10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d112      	bne.n	800bd3e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a23      	ldr	r2, [pc, #140]	; (800bdac <HAL_ADC_ConfigChannel+0x800>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d004      	beq.n	800bd2c <HAL_ADC_ConfigChannel+0x780>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4a22      	ldr	r2, [pc, #136]	; (800bdb0 <HAL_ADC_ConfigChannel+0x804>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d12d      	bne.n	800bd88 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bd2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bd30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd34:	4619      	mov	r1, r3
 800bd36:	481b      	ldr	r0, [pc, #108]	; (800bda4 <HAL_ADC_ConfigChannel+0x7f8>)
 800bd38:	f7ff f951 	bl	800afde <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bd3c:	e024      	b.n	800bd88 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a1f      	ldr	r2, [pc, #124]	; (800bdc0 <HAL_ADC_ConfigChannel+0x814>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d120      	bne.n	800bd8a <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800bd48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bd4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d11a      	bne.n	800bd8a <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a14      	ldr	r2, [pc, #80]	; (800bdac <HAL_ADC_ConfigChannel+0x800>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d115      	bne.n	800bd8a <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bd5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bd62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bd66:	4619      	mov	r1, r3
 800bd68:	480e      	ldr	r0, [pc, #56]	; (800bda4 <HAL_ADC_ConfigChannel+0x7f8>)
 800bd6a:	f7ff f938 	bl	800afde <LL_ADC_SetCommonPathInternalCh>
 800bd6e:	e00c      	b.n	800bd8a <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd74:	f043 0220 	orr.w	r2, r3, #32
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800bd82:	e002      	b.n	800bd8a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bd84:	bf00      	nop
 800bd86:	e000      	b.n	800bd8a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bd88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800bd92:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	37d8      	adds	r7, #216	; 0xd8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	80080000 	.word	0x80080000
 800bda4:	50040300 	.word	0x50040300
 800bda8:	c7520000 	.word	0xc7520000
 800bdac:	50040000 	.word	0x50040000
 800bdb0:	50040200 	.word	0x50040200
 800bdb4:	20000190 	.word	0x20000190
 800bdb8:	053e2d63 	.word	0x053e2d63
 800bdbc:	cb840000 	.word	0xcb840000
 800bdc0:	80000001 	.word	0x80000001

0800bdc4 <LL_ADC_IsEnabled>:
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	f003 0301 	and.w	r3, r3, #1
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d101      	bne.n	800bddc <LL_ADC_IsEnabled+0x18>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e000      	b.n	800bdde <LL_ADC_IsEnabled+0x1a>
 800bddc:	2300      	movs	r3, #0
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	370c      	adds	r7, #12
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr

0800bdea <LL_ADC_REG_IsConversionOngoing>:
{
 800bdea:	b480      	push	{r7}
 800bdec:	b083      	sub	sp, #12
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	f003 0304 	and.w	r3, r3, #4
 800bdfa:	2b04      	cmp	r3, #4
 800bdfc:	d101      	bne.n	800be02 <LL_ADC_REG_IsConversionOngoing+0x18>
 800bdfe:	2301      	movs	r3, #1
 800be00:	e000      	b.n	800be04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800be10:	b590      	push	{r4, r7, lr}
 800be12:	b0a1      	sub	sp, #132	; 0x84
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800be1a:	2300      	movs	r3, #0
 800be1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800be26:	2b01      	cmp	r3, #1
 800be28:	d101      	bne.n	800be2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800be2a:	2302      	movs	r3, #2
 800be2c:	e093      	b.n	800bf56 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2201      	movs	r2, #1
 800be32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800be36:	2300      	movs	r3, #0
 800be38:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800be3a:	2300      	movs	r3, #0
 800be3c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a47      	ldr	r2, [pc, #284]	; (800bf60 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d102      	bne.n	800be4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800be48:	4b46      	ldr	r3, [pc, #280]	; (800bf64 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800be4a:	60fb      	str	r3, [r7, #12]
 800be4c:	e001      	b.n	800be52 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800be4e:	2300      	movs	r3, #0
 800be50:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d10b      	bne.n	800be70 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be5c:	f043 0220 	orr.w	r2, r3, #32
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800be6c:	2301      	movs	r3, #1
 800be6e:	e072      	b.n	800bf56 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	4618      	mov	r0, r3
 800be74:	f7ff ffb9 	bl	800bdea <LL_ADC_REG_IsConversionOngoing>
 800be78:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4618      	mov	r0, r3
 800be80:	f7ff ffb3 	bl	800bdea <LL_ADC_REG_IsConversionOngoing>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d154      	bne.n	800bf34 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800be8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d151      	bne.n	800bf34 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800be90:	4b35      	ldr	r3, [pc, #212]	; (800bf68 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800be92:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d02c      	beq.n	800bef6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800be9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	6859      	ldr	r1, [r3, #4]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800beae:	035b      	lsls	r3, r3, #13
 800beb0:	430b      	orrs	r3, r1
 800beb2:	431a      	orrs	r2, r3
 800beb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800beb6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800beb8:	4829      	ldr	r0, [pc, #164]	; (800bf60 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800beba:	f7ff ff83 	bl	800bdc4 <LL_ADC_IsEnabled>
 800bebe:	4604      	mov	r4, r0
 800bec0:	4828      	ldr	r0, [pc, #160]	; (800bf64 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800bec2:	f7ff ff7f 	bl	800bdc4 <LL_ADC_IsEnabled>
 800bec6:	4603      	mov	r3, r0
 800bec8:	431c      	orrs	r4, r3
 800beca:	4828      	ldr	r0, [pc, #160]	; (800bf6c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800becc:	f7ff ff7a 	bl	800bdc4 <LL_ADC_IsEnabled>
 800bed0:	4603      	mov	r3, r0
 800bed2:	4323      	orrs	r3, r4
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d137      	bne.n	800bf48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800bed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800bee0:	f023 030f 	bic.w	r3, r3, #15
 800bee4:	683a      	ldr	r2, [r7, #0]
 800bee6:	6811      	ldr	r1, [r2, #0]
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	6892      	ldr	r2, [r2, #8]
 800beec:	430a      	orrs	r2, r1
 800beee:	431a      	orrs	r2, r3
 800bef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bef2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800bef4:	e028      	b.n	800bf48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800bef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bef8:	689b      	ldr	r3, [r3, #8]
 800befa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800befe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf00:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bf02:	4817      	ldr	r0, [pc, #92]	; (800bf60 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800bf04:	f7ff ff5e 	bl	800bdc4 <LL_ADC_IsEnabled>
 800bf08:	4604      	mov	r4, r0
 800bf0a:	4816      	ldr	r0, [pc, #88]	; (800bf64 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800bf0c:	f7ff ff5a 	bl	800bdc4 <LL_ADC_IsEnabled>
 800bf10:	4603      	mov	r3, r0
 800bf12:	431c      	orrs	r4, r3
 800bf14:	4815      	ldr	r0, [pc, #84]	; (800bf6c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800bf16:	f7ff ff55 	bl	800bdc4 <LL_ADC_IsEnabled>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	4323      	orrs	r3, r4
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d112      	bne.n	800bf48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800bf22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800bf2a:	f023 030f 	bic.w	r3, r3, #15
 800bf2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bf30:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800bf32:	e009      	b.n	800bf48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf38:	f043 0220 	orr.w	r2, r3, #32
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800bf40:	2301      	movs	r3, #1
 800bf42:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800bf46:	e000      	b.n	800bf4a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800bf48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800bf52:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3784      	adds	r7, #132	; 0x84
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd90      	pop	{r4, r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	50040000 	.word	0x50040000
 800bf64:	50040100 	.word	0x50040100
 800bf68:	50040300 	.word	0x50040300
 800bf6c:	50040200 	.word	0x50040200

0800bf70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f003 0307 	and.w	r3, r3, #7
 800bf7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bf80:	4b0c      	ldr	r3, [pc, #48]	; (800bfb4 <__NVIC_SetPriorityGrouping+0x44>)
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bf8c:	4013      	ands	r3, r2
 800bf8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bf98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bf9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bfa2:	4a04      	ldr	r2, [pc, #16]	; (800bfb4 <__NVIC_SetPriorityGrouping+0x44>)
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	60d3      	str	r3, [r2, #12]
}
 800bfa8:	bf00      	nop
 800bfaa:	3714      	adds	r7, #20
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr
 800bfb4:	e000ed00 	.word	0xe000ed00

0800bfb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bfbc:	4b04      	ldr	r3, [pc, #16]	; (800bfd0 <__NVIC_GetPriorityGrouping+0x18>)
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	0a1b      	lsrs	r3, r3, #8
 800bfc2:	f003 0307 	and.w	r3, r3, #7
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr
 800bfd0:	e000ed00 	.word	0xe000ed00

0800bfd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	4603      	mov	r3, r0
 800bfdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bfde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	db0b      	blt.n	800bffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bfe6:	79fb      	ldrb	r3, [r7, #7]
 800bfe8:	f003 021f 	and.w	r2, r3, #31
 800bfec:	4907      	ldr	r1, [pc, #28]	; (800c00c <__NVIC_EnableIRQ+0x38>)
 800bfee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bff2:	095b      	lsrs	r3, r3, #5
 800bff4:	2001      	movs	r0, #1
 800bff6:	fa00 f202 	lsl.w	r2, r0, r2
 800bffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800bffe:	bf00      	nop
 800c000:	370c      	adds	r7, #12
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop
 800c00c:	e000e100 	.word	0xe000e100

0800c010 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	4603      	mov	r3, r0
 800c018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c01a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	db12      	blt.n	800c048 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c022:	79fb      	ldrb	r3, [r7, #7]
 800c024:	f003 021f 	and.w	r2, r3, #31
 800c028:	490a      	ldr	r1, [pc, #40]	; (800c054 <__NVIC_DisableIRQ+0x44>)
 800c02a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c02e:	095b      	lsrs	r3, r3, #5
 800c030:	2001      	movs	r0, #1
 800c032:	fa00 f202 	lsl.w	r2, r0, r2
 800c036:	3320      	adds	r3, #32
 800c038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c03c:	f3bf 8f4f 	dsb	sy
}
 800c040:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c042:	f3bf 8f6f 	isb	sy
}
 800c046:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800c048:	bf00      	nop
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr
 800c054:	e000e100 	.word	0xe000e100

0800c058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	4603      	mov	r3, r0
 800c060:	6039      	str	r1, [r7, #0]
 800c062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	db0a      	blt.n	800c082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	490c      	ldr	r1, [pc, #48]	; (800c0a4 <__NVIC_SetPriority+0x4c>)
 800c072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c076:	0112      	lsls	r2, r2, #4
 800c078:	b2d2      	uxtb	r2, r2
 800c07a:	440b      	add	r3, r1
 800c07c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c080:	e00a      	b.n	800c098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	b2da      	uxtb	r2, r3
 800c086:	4908      	ldr	r1, [pc, #32]	; (800c0a8 <__NVIC_SetPriority+0x50>)
 800c088:	79fb      	ldrb	r3, [r7, #7]
 800c08a:	f003 030f 	and.w	r3, r3, #15
 800c08e:	3b04      	subs	r3, #4
 800c090:	0112      	lsls	r2, r2, #4
 800c092:	b2d2      	uxtb	r2, r2
 800c094:	440b      	add	r3, r1
 800c096:	761a      	strb	r2, [r3, #24]
}
 800c098:	bf00      	nop
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr
 800c0a4:	e000e100 	.word	0xe000e100
 800c0a8:	e000ed00 	.word	0xe000ed00

0800c0ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b089      	sub	sp, #36	; 0x24
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f003 0307 	and.w	r3, r3, #7
 800c0be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	f1c3 0307 	rsb	r3, r3, #7
 800c0c6:	2b04      	cmp	r3, #4
 800c0c8:	bf28      	it	cs
 800c0ca:	2304      	movcs	r3, #4
 800c0cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	2b06      	cmp	r3, #6
 800c0d4:	d902      	bls.n	800c0dc <NVIC_EncodePriority+0x30>
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	3b03      	subs	r3, #3
 800c0da:	e000      	b.n	800c0de <NVIC_EncodePriority+0x32>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c0e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ea:	43da      	mvns	r2, r3
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	401a      	ands	r2, r3
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c0f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	fa01 f303 	lsl.w	r3, r1, r3
 800c0fe:	43d9      	mvns	r1, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c104:	4313      	orrs	r3, r2
         );
}
 800c106:	4618      	mov	r0, r3
 800c108:	3724      	adds	r7, #36	; 0x24
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
	...

0800c114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	3b01      	subs	r3, #1
 800c120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c124:	d301      	bcc.n	800c12a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c126:	2301      	movs	r3, #1
 800c128:	e00f      	b.n	800c14a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c12a:	4a0a      	ldr	r2, [pc, #40]	; (800c154 <SysTick_Config+0x40>)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	3b01      	subs	r3, #1
 800c130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c132:	210f      	movs	r1, #15
 800c134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c138:	f7ff ff8e 	bl	800c058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c13c:	4b05      	ldr	r3, [pc, #20]	; (800c154 <SysTick_Config+0x40>)
 800c13e:	2200      	movs	r2, #0
 800c140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c142:	4b04      	ldr	r3, [pc, #16]	; (800c154 <SysTick_Config+0x40>)
 800c144:	2207      	movs	r2, #7
 800c146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c148:	2300      	movs	r3, #0
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	e000e010 	.word	0xe000e010

0800c158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7ff ff05 	bl	800bf70 <__NVIC_SetPriorityGrouping>
}
 800c166:	bf00      	nop
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b086      	sub	sp, #24
 800c172:	af00      	add	r7, sp, #0
 800c174:	4603      	mov	r3, r0
 800c176:	60b9      	str	r1, [r7, #8]
 800c178:	607a      	str	r2, [r7, #4]
 800c17a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c17c:	2300      	movs	r3, #0
 800c17e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c180:	f7ff ff1a 	bl	800bfb8 <__NVIC_GetPriorityGrouping>
 800c184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	68b9      	ldr	r1, [r7, #8]
 800c18a:	6978      	ldr	r0, [r7, #20]
 800c18c:	f7ff ff8e 	bl	800c0ac <NVIC_EncodePriority>
 800c190:	4602      	mov	r2, r0
 800c192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c196:	4611      	mov	r1, r2
 800c198:	4618      	mov	r0, r3
 800c19a:	f7ff ff5d 	bl	800c058 <__NVIC_SetPriority>
}
 800c19e:	bf00      	nop
 800c1a0:	3718      	adds	r7, #24
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b082      	sub	sp, #8
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c1b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7ff ff0d 	bl	800bfd4 <__NVIC_EnableIRQ>
}
 800c1ba:	bf00      	nop
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b082      	sub	sp, #8
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c1cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7ff ff1d 	bl	800c010 <__NVIC_DisableIRQ>
}
 800c1d6:	bf00      	nop
 800c1d8:	3708      	adds	r7, #8
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b082      	sub	sp, #8
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f7ff ff94 	bl	800c114 <SysTick_Config>
 800c1ec:	4603      	mov	r3, r0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3708      	adds	r7, #8
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
	...

0800c1f8 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d101      	bne.n	800c20a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800c206:	2301      	movs	r3, #1
 800c208:	e075      	b.n	800c2f6 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c210:	b2db      	uxtb	r3, r3
 800c212:	2b00      	cmp	r3, #0
 800c214:	d106      	bne.n	800c224 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7f4 fbfa 	bl	8000a18 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2202      	movs	r2, #2
 800c228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c23a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d002      	beq.n	800c24a <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	6819      	ldr	r1, [r3, #0]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	4b2a      	ldr	r3, [pc, #168]	; (800c300 <HAL_DCMI_Init+0x108>)
 800c256:	400b      	ands	r3, r1
 800c258:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	6819      	ldr	r1, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	685a      	ldr	r2, [r3, #4]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	695b      	ldr	r3, [r3, #20]
 800c268:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800c26e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	691b      	ldr	r3, [r3, #16]
 800c274:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800c27a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	699b      	ldr	r3, [r3, #24]
 800c280:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800c286:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800c292:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c298:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800c29e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	430a      	orrs	r2, r1
 800c2a6:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	2b10      	cmp	r3, #16
 800c2ae:	d112      	bne.n	800c2d6 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	7f1b      	ldrb	r3, [r3, #28]
 800c2b4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	7f5b      	ldrb	r3, [r3, #29]
 800c2ba:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800c2bc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	7f9b      	ldrb	r3, [r3, #30]
 800c2c2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800c2c4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	7fdb      	ldrb	r3, [r3, #31]
 800c2cc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800c2d2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800c2d4:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68da      	ldr	r2, [r3, #12]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f042 021f 	orr.w	r2, r2, #31
 800c2e4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3708      	adds	r7, #8
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	ffe0f007 	.word	0xffe0f007

0800c304 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d101      	bne.n	800c316 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	e0ac      	b.n	800c470 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 f8b2 	bl	800c484 <DFSDM_GetChannelFromInstance>
 800c320:	4603      	mov	r3, r0
 800c322:	4a55      	ldr	r2, [pc, #340]	; (800c478 <HAL_DFSDM_ChannelInit+0x174>)
 800c324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d001      	beq.n	800c330 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	e09f      	b.n	800c470 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f7f4 fc5d 	bl	8000bf0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800c336:	4b51      	ldr	r3, [pc, #324]	; (800c47c <HAL_DFSDM_ChannelInit+0x178>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	3301      	adds	r3, #1
 800c33c:	4a4f      	ldr	r2, [pc, #316]	; (800c47c <HAL_DFSDM_ChannelInit+0x178>)
 800c33e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800c340:	4b4e      	ldr	r3, [pc, #312]	; (800c47c <HAL_DFSDM_ChannelInit+0x178>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	2b01      	cmp	r3, #1
 800c346:	d125      	bne.n	800c394 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800c348:	4b4d      	ldr	r3, [pc, #308]	; (800c480 <HAL_DFSDM_ChannelInit+0x17c>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a4c      	ldr	r2, [pc, #304]	; (800c480 <HAL_DFSDM_ChannelInit+0x17c>)
 800c34e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c352:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800c354:	4b4a      	ldr	r3, [pc, #296]	; (800c480 <HAL_DFSDM_ChannelInit+0x17c>)
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	4948      	ldr	r1, [pc, #288]	; (800c480 <HAL_DFSDM_ChannelInit+0x17c>)
 800c35e:	4313      	orrs	r3, r2
 800c360:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800c362:	4b47      	ldr	r3, [pc, #284]	; (800c480 <HAL_DFSDM_ChannelInit+0x17c>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a46      	ldr	r2, [pc, #280]	; (800c480 <HAL_DFSDM_ChannelInit+0x17c>)
 800c368:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800c36c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	791b      	ldrb	r3, [r3, #4]
 800c372:	2b01      	cmp	r3, #1
 800c374:	d108      	bne.n	800c388 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800c376:	4b42      	ldr	r3, [pc, #264]	; (800c480 <HAL_DFSDM_ChannelInit+0x17c>)
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	68db      	ldr	r3, [r3, #12]
 800c37e:	3b01      	subs	r3, #1
 800c380:	041b      	lsls	r3, r3, #16
 800c382:	493f      	ldr	r1, [pc, #252]	; (800c480 <HAL_DFSDM_ChannelInit+0x17c>)
 800c384:	4313      	orrs	r3, r2
 800c386:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800c388:	4b3d      	ldr	r3, [pc, #244]	; (800c480 <HAL_DFSDM_ChannelInit+0x17c>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a3c      	ldr	r2, [pc, #240]	; (800c480 <HAL_DFSDM_ChannelInit+0x17c>)
 800c38e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c392:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800c3a2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	6819      	ldr	r1, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800c3b2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800c3b8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	430a      	orrs	r2, r1
 800c3c0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f022 020f 	bic.w	r2, r2, #15
 800c3d0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	6819      	ldr	r1, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800c3e0:	431a      	orrs	r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	430a      	orrs	r2, r1
 800c3e8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	689a      	ldr	r2, [r3, #8]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800c3f8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	6899      	ldr	r1, [r3, #8]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c408:	3b01      	subs	r3, #1
 800c40a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800c40c:	431a      	orrs	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	430a      	orrs	r2, r1
 800c414:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	685a      	ldr	r2, [r3, #4]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f002 0207 	and.w	r2, r2, #7
 800c424:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	6859      	ldr	r1, [r3, #4]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c430:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c436:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800c438:	431a      	orrs	r2, r3
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	430a      	orrs	r2, r1
 800c440:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c450:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2201      	movs	r2, #1
 800c456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4618      	mov	r0, r3
 800c460:	f000 f810 	bl	800c484 <DFSDM_GetChannelFromInstance>
 800c464:	4602      	mov	r2, r0
 800c466:	4904      	ldr	r1, [pc, #16]	; (800c478 <HAL_DFSDM_ChannelInit+0x174>)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	200011a4 	.word	0x200011a4
 800c47c:	200011a0 	.word	0x200011a0
 800c480:	40016000 	.word	0x40016000

0800c484 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800c484:	b480      	push	{r7}
 800c486:	b085      	sub	sp, #20
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a1c      	ldr	r2, [pc, #112]	; (800c500 <DFSDM_GetChannelFromInstance+0x7c>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d102      	bne.n	800c49a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800c494:	2300      	movs	r3, #0
 800c496:	60fb      	str	r3, [r7, #12]
 800c498:	e02b      	b.n	800c4f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4a19      	ldr	r2, [pc, #100]	; (800c504 <DFSDM_GetChannelFromInstance+0x80>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d102      	bne.n	800c4a8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	60fb      	str	r3, [r7, #12]
 800c4a6:	e024      	b.n	800c4f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4a17      	ldr	r2, [pc, #92]	; (800c508 <DFSDM_GetChannelFromInstance+0x84>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d102      	bne.n	800c4b6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800c4b0:	2302      	movs	r3, #2
 800c4b2:	60fb      	str	r3, [r7, #12]
 800c4b4:	e01d      	b.n	800c4f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4a14      	ldr	r2, [pc, #80]	; (800c50c <DFSDM_GetChannelFromInstance+0x88>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d102      	bne.n	800c4c4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800c4be:	2304      	movs	r3, #4
 800c4c0:	60fb      	str	r3, [r7, #12]
 800c4c2:	e016      	b.n	800c4f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	4a12      	ldr	r2, [pc, #72]	; (800c510 <DFSDM_GetChannelFromInstance+0x8c>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d102      	bne.n	800c4d2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800c4cc:	2305      	movs	r3, #5
 800c4ce:	60fb      	str	r3, [r7, #12]
 800c4d0:	e00f      	b.n	800c4f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4a0f      	ldr	r2, [pc, #60]	; (800c514 <DFSDM_GetChannelFromInstance+0x90>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d102      	bne.n	800c4e0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800c4da:	2306      	movs	r3, #6
 800c4dc:	60fb      	str	r3, [r7, #12]
 800c4de:	e008      	b.n	800c4f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a0d      	ldr	r2, [pc, #52]	; (800c518 <DFSDM_GetChannelFromInstance+0x94>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d102      	bne.n	800c4ee <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800c4e8:	2307      	movs	r3, #7
 800c4ea:	60fb      	str	r3, [r7, #12]
 800c4ec:	e001      	b.n	800c4f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800c4ee:	2303      	movs	r3, #3
 800c4f0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3714      	adds	r7, #20
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr
 800c500:	40016000 	.word	0x40016000
 800c504:	40016020 	.word	0x40016020
 800c508:	40016040 	.word	0x40016040
 800c50c:	40016080 	.word	0x40016080
 800c510:	400160a0 	.word	0x400160a0
 800c514:	400160c0 	.word	0x400160c0
 800c518:	400160e0 	.word	0x400160e0

0800c51c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b087      	sub	sp, #28
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c526:	2300      	movs	r3, #0
 800c528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c52a:	e166      	b.n	800c7fa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	2101      	movs	r1, #1
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	fa01 f303 	lsl.w	r3, r1, r3
 800c538:	4013      	ands	r3, r2
 800c53a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f000 8158 	beq.w	800c7f4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	f003 0303 	and.w	r3, r3, #3
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d005      	beq.n	800c55c <HAL_GPIO_Init+0x40>
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	f003 0303 	and.w	r3, r3, #3
 800c558:	2b02      	cmp	r3, #2
 800c55a:	d130      	bne.n	800c5be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	005b      	lsls	r3, r3, #1
 800c566:	2203      	movs	r2, #3
 800c568:	fa02 f303 	lsl.w	r3, r2, r3
 800c56c:	43db      	mvns	r3, r3
 800c56e:	693a      	ldr	r2, [r7, #16]
 800c570:	4013      	ands	r3, r2
 800c572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	68da      	ldr	r2, [r3, #12]
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	005b      	lsls	r3, r3, #1
 800c57c:	fa02 f303 	lsl.w	r3, r2, r3
 800c580:	693a      	ldr	r2, [r7, #16]
 800c582:	4313      	orrs	r3, r2
 800c584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	693a      	ldr	r2, [r7, #16]
 800c58a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c592:	2201      	movs	r2, #1
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	fa02 f303 	lsl.w	r3, r2, r3
 800c59a:	43db      	mvns	r3, r3
 800c59c:	693a      	ldr	r2, [r7, #16]
 800c59e:	4013      	ands	r3, r2
 800c5a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	091b      	lsrs	r3, r3, #4
 800c5a8:	f003 0201 	and.w	r2, r3, #1
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b2:	693a      	ldr	r2, [r7, #16]
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	693a      	ldr	r2, [r7, #16]
 800c5bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	f003 0303 	and.w	r3, r3, #3
 800c5c6:	2b03      	cmp	r3, #3
 800c5c8:	d017      	beq.n	800c5fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	005b      	lsls	r3, r3, #1
 800c5d4:	2203      	movs	r2, #3
 800c5d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c5da:	43db      	mvns	r3, r3
 800c5dc:	693a      	ldr	r2, [r7, #16]
 800c5de:	4013      	ands	r3, r2
 800c5e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	689a      	ldr	r2, [r3, #8]
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ee:	693a      	ldr	r2, [r7, #16]
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	693a      	ldr	r2, [r7, #16]
 800c5f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	f003 0303 	and.w	r3, r3, #3
 800c602:	2b02      	cmp	r3, #2
 800c604:	d123      	bne.n	800c64e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	08da      	lsrs	r2, r3, #3
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	3208      	adds	r2, #8
 800c60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c612:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	f003 0307 	and.w	r3, r3, #7
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	220f      	movs	r2, #15
 800c61e:	fa02 f303 	lsl.w	r3, r2, r3
 800c622:	43db      	mvns	r3, r3
 800c624:	693a      	ldr	r2, [r7, #16]
 800c626:	4013      	ands	r3, r2
 800c628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	691a      	ldr	r2, [r3, #16]
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	f003 0307 	and.w	r3, r3, #7
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	fa02 f303 	lsl.w	r3, r2, r3
 800c63a:	693a      	ldr	r2, [r7, #16]
 800c63c:	4313      	orrs	r3, r2
 800c63e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	08da      	lsrs	r2, r3, #3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	3208      	adds	r2, #8
 800c648:	6939      	ldr	r1, [r7, #16]
 800c64a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	005b      	lsls	r3, r3, #1
 800c658:	2203      	movs	r2, #3
 800c65a:	fa02 f303 	lsl.w	r3, r2, r3
 800c65e:	43db      	mvns	r3, r3
 800c660:	693a      	ldr	r2, [r7, #16]
 800c662:	4013      	ands	r3, r2
 800c664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	f003 0203 	and.w	r2, r3, #3
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	005b      	lsls	r3, r3, #1
 800c672:	fa02 f303 	lsl.w	r3, r2, r3
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	4313      	orrs	r3, r2
 800c67a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	693a      	ldr	r2, [r7, #16]
 800c680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f000 80b2 	beq.w	800c7f4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c690:	4b61      	ldr	r3, [pc, #388]	; (800c818 <HAL_GPIO_Init+0x2fc>)
 800c692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c694:	4a60      	ldr	r2, [pc, #384]	; (800c818 <HAL_GPIO_Init+0x2fc>)
 800c696:	f043 0301 	orr.w	r3, r3, #1
 800c69a:	6613      	str	r3, [r2, #96]	; 0x60
 800c69c:	4b5e      	ldr	r3, [pc, #376]	; (800c818 <HAL_GPIO_Init+0x2fc>)
 800c69e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6a0:	f003 0301 	and.w	r3, r3, #1
 800c6a4:	60bb      	str	r3, [r7, #8]
 800c6a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800c6a8:	4a5c      	ldr	r2, [pc, #368]	; (800c81c <HAL_GPIO_Init+0x300>)
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	089b      	lsrs	r3, r3, #2
 800c6ae:	3302      	adds	r3, #2
 800c6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f003 0303 	and.w	r3, r3, #3
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	220f      	movs	r2, #15
 800c6c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6c4:	43db      	mvns	r3, r3
 800c6c6:	693a      	ldr	r2, [r7, #16]
 800c6c8:	4013      	ands	r3, r2
 800c6ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c6d2:	d02b      	beq.n	800c72c <HAL_GPIO_Init+0x210>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	4a52      	ldr	r2, [pc, #328]	; (800c820 <HAL_GPIO_Init+0x304>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d025      	beq.n	800c728 <HAL_GPIO_Init+0x20c>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a51      	ldr	r2, [pc, #324]	; (800c824 <HAL_GPIO_Init+0x308>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d01f      	beq.n	800c724 <HAL_GPIO_Init+0x208>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4a50      	ldr	r2, [pc, #320]	; (800c828 <HAL_GPIO_Init+0x30c>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d019      	beq.n	800c720 <HAL_GPIO_Init+0x204>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a4f      	ldr	r2, [pc, #316]	; (800c82c <HAL_GPIO_Init+0x310>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d013      	beq.n	800c71c <HAL_GPIO_Init+0x200>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4a4e      	ldr	r2, [pc, #312]	; (800c830 <HAL_GPIO_Init+0x314>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d00d      	beq.n	800c718 <HAL_GPIO_Init+0x1fc>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	4a4d      	ldr	r2, [pc, #308]	; (800c834 <HAL_GPIO_Init+0x318>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d007      	beq.n	800c714 <HAL_GPIO_Init+0x1f8>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	4a4c      	ldr	r2, [pc, #304]	; (800c838 <HAL_GPIO_Init+0x31c>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d101      	bne.n	800c710 <HAL_GPIO_Init+0x1f4>
 800c70c:	2307      	movs	r3, #7
 800c70e:	e00e      	b.n	800c72e <HAL_GPIO_Init+0x212>
 800c710:	2308      	movs	r3, #8
 800c712:	e00c      	b.n	800c72e <HAL_GPIO_Init+0x212>
 800c714:	2306      	movs	r3, #6
 800c716:	e00a      	b.n	800c72e <HAL_GPIO_Init+0x212>
 800c718:	2305      	movs	r3, #5
 800c71a:	e008      	b.n	800c72e <HAL_GPIO_Init+0x212>
 800c71c:	2304      	movs	r3, #4
 800c71e:	e006      	b.n	800c72e <HAL_GPIO_Init+0x212>
 800c720:	2303      	movs	r3, #3
 800c722:	e004      	b.n	800c72e <HAL_GPIO_Init+0x212>
 800c724:	2302      	movs	r3, #2
 800c726:	e002      	b.n	800c72e <HAL_GPIO_Init+0x212>
 800c728:	2301      	movs	r3, #1
 800c72a:	e000      	b.n	800c72e <HAL_GPIO_Init+0x212>
 800c72c:	2300      	movs	r3, #0
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	f002 0203 	and.w	r2, r2, #3
 800c734:	0092      	lsls	r2, r2, #2
 800c736:	4093      	lsls	r3, r2
 800c738:	693a      	ldr	r2, [r7, #16]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800c73e:	4937      	ldr	r1, [pc, #220]	; (800c81c <HAL_GPIO_Init+0x300>)
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	089b      	lsrs	r3, r3, #2
 800c744:	3302      	adds	r3, #2
 800c746:	693a      	ldr	r2, [r7, #16]
 800c748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c74c:	4b3b      	ldr	r3, [pc, #236]	; (800c83c <HAL_GPIO_Init+0x320>)
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	43db      	mvns	r3, r3
 800c756:	693a      	ldr	r2, [r7, #16]
 800c758:	4013      	ands	r3, r2
 800c75a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c764:	2b00      	cmp	r3, #0
 800c766:	d003      	beq.n	800c770 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800c768:	693a      	ldr	r2, [r7, #16]
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	4313      	orrs	r3, r2
 800c76e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c770:	4a32      	ldr	r2, [pc, #200]	; (800c83c <HAL_GPIO_Init+0x320>)
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c776:	4b31      	ldr	r3, [pc, #196]	; (800c83c <HAL_GPIO_Init+0x320>)
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	43db      	mvns	r3, r3
 800c780:	693a      	ldr	r2, [r7, #16]
 800c782:	4013      	ands	r3, r2
 800c784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d003      	beq.n	800c79a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800c792:	693a      	ldr	r2, [r7, #16]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	4313      	orrs	r3, r2
 800c798:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c79a:	4a28      	ldr	r2, [pc, #160]	; (800c83c <HAL_GPIO_Init+0x320>)
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800c7a0:	4b26      	ldr	r3, [pc, #152]	; (800c83c <HAL_GPIO_Init+0x320>)
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	43db      	mvns	r3, r3
 800c7aa:	693a      	ldr	r2, [r7, #16]
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800c7bc:	693a      	ldr	r2, [r7, #16]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c7c4:	4a1d      	ldr	r2, [pc, #116]	; (800c83c <HAL_GPIO_Init+0x320>)
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800c7ca:	4b1c      	ldr	r3, [pc, #112]	; (800c83c <HAL_GPIO_Init+0x320>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	43db      	mvns	r3, r3
 800c7d4:	693a      	ldr	r2, [r7, #16]
 800c7d6:	4013      	ands	r3, r2
 800c7d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d003      	beq.n	800c7ee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800c7e6:	693a      	ldr	r2, [r7, #16]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c7ee:	4a13      	ldr	r2, [pc, #76]	; (800c83c <HAL_GPIO_Init+0x320>)
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	fa22 f303 	lsr.w	r3, r2, r3
 800c804:	2b00      	cmp	r3, #0
 800c806:	f47f ae91 	bne.w	800c52c <HAL_GPIO_Init+0x10>
  }
}
 800c80a:	bf00      	nop
 800c80c:	bf00      	nop
 800c80e:	371c      	adds	r7, #28
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr
 800c818:	40021000 	.word	0x40021000
 800c81c:	40010000 	.word	0x40010000
 800c820:	48000400 	.word	0x48000400
 800c824:	48000800 	.word	0x48000800
 800c828:	48000c00 	.word	0x48000c00
 800c82c:	48001000 	.word	0x48001000
 800c830:	48001400 	.word	0x48001400
 800c834:	48001800 	.word	0x48001800
 800c838:	48001c00 	.word	0x48001c00
 800c83c:	40010400 	.word	0x40010400

0800c840 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c840:	b480      	push	{r7}
 800c842:	b087      	sub	sp, #28
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c84a:	2300      	movs	r3, #0
 800c84c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800c84e:	e0c9      	b.n	800c9e4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800c850:	2201      	movs	r2, #1
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	fa02 f303 	lsl.w	r3, r2, r3
 800c858:	683a      	ldr	r2, [r7, #0]
 800c85a:	4013      	ands	r3, r2
 800c85c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	2b00      	cmp	r3, #0
 800c862:	f000 80bc 	beq.w	800c9de <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800c866:	4a66      	ldr	r2, [pc, #408]	; (800ca00 <HAL_GPIO_DeInit+0x1c0>)
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	089b      	lsrs	r3, r3, #2
 800c86c:	3302      	adds	r3, #2
 800c86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c872:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	f003 0303 	and.w	r3, r3, #3
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	220f      	movs	r2, #15
 800c87e:	fa02 f303 	lsl.w	r3, r2, r3
 800c882:	68fa      	ldr	r2, [r7, #12]
 800c884:	4013      	ands	r3, r2
 800c886:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c88e:	d02b      	beq.n	800c8e8 <HAL_GPIO_DeInit+0xa8>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a5c      	ldr	r2, [pc, #368]	; (800ca04 <HAL_GPIO_DeInit+0x1c4>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d025      	beq.n	800c8e4 <HAL_GPIO_DeInit+0xa4>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a5b      	ldr	r2, [pc, #364]	; (800ca08 <HAL_GPIO_DeInit+0x1c8>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d01f      	beq.n	800c8e0 <HAL_GPIO_DeInit+0xa0>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4a5a      	ldr	r2, [pc, #360]	; (800ca0c <HAL_GPIO_DeInit+0x1cc>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d019      	beq.n	800c8dc <HAL_GPIO_DeInit+0x9c>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a59      	ldr	r2, [pc, #356]	; (800ca10 <HAL_GPIO_DeInit+0x1d0>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d013      	beq.n	800c8d8 <HAL_GPIO_DeInit+0x98>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	4a58      	ldr	r2, [pc, #352]	; (800ca14 <HAL_GPIO_DeInit+0x1d4>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d00d      	beq.n	800c8d4 <HAL_GPIO_DeInit+0x94>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a57      	ldr	r2, [pc, #348]	; (800ca18 <HAL_GPIO_DeInit+0x1d8>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d007      	beq.n	800c8d0 <HAL_GPIO_DeInit+0x90>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a56      	ldr	r2, [pc, #344]	; (800ca1c <HAL_GPIO_DeInit+0x1dc>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d101      	bne.n	800c8cc <HAL_GPIO_DeInit+0x8c>
 800c8c8:	2307      	movs	r3, #7
 800c8ca:	e00e      	b.n	800c8ea <HAL_GPIO_DeInit+0xaa>
 800c8cc:	2308      	movs	r3, #8
 800c8ce:	e00c      	b.n	800c8ea <HAL_GPIO_DeInit+0xaa>
 800c8d0:	2306      	movs	r3, #6
 800c8d2:	e00a      	b.n	800c8ea <HAL_GPIO_DeInit+0xaa>
 800c8d4:	2305      	movs	r3, #5
 800c8d6:	e008      	b.n	800c8ea <HAL_GPIO_DeInit+0xaa>
 800c8d8:	2304      	movs	r3, #4
 800c8da:	e006      	b.n	800c8ea <HAL_GPIO_DeInit+0xaa>
 800c8dc:	2303      	movs	r3, #3
 800c8de:	e004      	b.n	800c8ea <HAL_GPIO_DeInit+0xaa>
 800c8e0:	2302      	movs	r3, #2
 800c8e2:	e002      	b.n	800c8ea <HAL_GPIO_DeInit+0xaa>
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	e000      	b.n	800c8ea <HAL_GPIO_DeInit+0xaa>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	697a      	ldr	r2, [r7, #20]
 800c8ec:	f002 0203 	and.w	r2, r2, #3
 800c8f0:	0092      	lsls	r2, r2, #2
 800c8f2:	4093      	lsls	r3, r2
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d132      	bne.n	800c960 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c8fa:	4b49      	ldr	r3, [pc, #292]	; (800ca20 <HAL_GPIO_DeInit+0x1e0>)
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	43db      	mvns	r3, r3
 800c902:	4947      	ldr	r1, [pc, #284]	; (800ca20 <HAL_GPIO_DeInit+0x1e0>)
 800c904:	4013      	ands	r3, r2
 800c906:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800c908:	4b45      	ldr	r3, [pc, #276]	; (800ca20 <HAL_GPIO_DeInit+0x1e0>)
 800c90a:	685a      	ldr	r2, [r3, #4]
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	43db      	mvns	r3, r3
 800c910:	4943      	ldr	r1, [pc, #268]	; (800ca20 <HAL_GPIO_DeInit+0x1e0>)
 800c912:	4013      	ands	r3, r2
 800c914:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800c916:	4b42      	ldr	r3, [pc, #264]	; (800ca20 <HAL_GPIO_DeInit+0x1e0>)
 800c918:	68da      	ldr	r2, [r3, #12]
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	43db      	mvns	r3, r3
 800c91e:	4940      	ldr	r1, [pc, #256]	; (800ca20 <HAL_GPIO_DeInit+0x1e0>)
 800c920:	4013      	ands	r3, r2
 800c922:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800c924:	4b3e      	ldr	r3, [pc, #248]	; (800ca20 <HAL_GPIO_DeInit+0x1e0>)
 800c926:	689a      	ldr	r2, [r3, #8]
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	43db      	mvns	r3, r3
 800c92c:	493c      	ldr	r1, [pc, #240]	; (800ca20 <HAL_GPIO_DeInit+0x1e0>)
 800c92e:	4013      	ands	r3, r2
 800c930:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	f003 0303 	and.w	r3, r3, #3
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	220f      	movs	r2, #15
 800c93c:	fa02 f303 	lsl.w	r3, r2, r3
 800c940:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800c942:	4a2f      	ldr	r2, [pc, #188]	; (800ca00 <HAL_GPIO_DeInit+0x1c0>)
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	089b      	lsrs	r3, r3, #2
 800c948:	3302      	adds	r3, #2
 800c94a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	43da      	mvns	r2, r3
 800c952:	482b      	ldr	r0, [pc, #172]	; (800ca00 <HAL_GPIO_DeInit+0x1c0>)
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	089b      	lsrs	r3, r3, #2
 800c958:	400a      	ands	r2, r1
 800c95a:	3302      	adds	r3, #2
 800c95c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	005b      	lsls	r3, r3, #1
 800c968:	2103      	movs	r1, #3
 800c96a:	fa01 f303 	lsl.w	r3, r1, r3
 800c96e:	431a      	orrs	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	08da      	lsrs	r2, r3, #3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	3208      	adds	r2, #8
 800c97c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	f003 0307 	and.w	r3, r3, #7
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	220f      	movs	r2, #15
 800c98a:	fa02 f303 	lsl.w	r3, r2, r3
 800c98e:	43db      	mvns	r3, r3
 800c990:	697a      	ldr	r2, [r7, #20]
 800c992:	08d2      	lsrs	r2, r2, #3
 800c994:	4019      	ands	r1, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	3208      	adds	r2, #8
 800c99a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	689a      	ldr	r2, [r3, #8]
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	2103      	movs	r1, #3
 800c9a8:	fa01 f303 	lsl.w	r3, r1, r3
 800c9ac:	43db      	mvns	r3, r3
 800c9ae:	401a      	ands	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	685a      	ldr	r2, [r3, #4]
 800c9b8:	2101      	movs	r1, #1
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	fa01 f303 	lsl.w	r3, r1, r3
 800c9c0:	43db      	mvns	r3, r3
 800c9c2:	401a      	ands	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	68da      	ldr	r2, [r3, #12]
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	005b      	lsls	r3, r3, #1
 800c9d0:	2103      	movs	r1, #3
 800c9d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c9d6:	43db      	mvns	r3, r3
 800c9d8:	401a      	ands	r2, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800c9e4:	683a      	ldr	r2, [r7, #0]
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	fa22 f303 	lsr.w	r3, r2, r3
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f47f af2f 	bne.w	800c850 <HAL_GPIO_DeInit+0x10>
  }
}
 800c9f2:	bf00      	nop
 800c9f4:	bf00      	nop
 800c9f6:	371c      	adds	r7, #28
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	40010000 	.word	0x40010000
 800ca04:	48000400 	.word	0x48000400
 800ca08:	48000800 	.word	0x48000800
 800ca0c:	48000c00 	.word	0x48000c00
 800ca10:	48001000 	.word	0x48001000
 800ca14:	48001400 	.word	0x48001400
 800ca18:	48001800 	.word	0x48001800
 800ca1c:	48001c00 	.word	0x48001c00
 800ca20:	40010400 	.word	0x40010400

0800ca24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	807b      	strh	r3, [r7, #2]
 800ca30:	4613      	mov	r3, r2
 800ca32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ca34:	787b      	ldrb	r3, [r7, #1]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d003      	beq.n	800ca42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ca3a:	887a      	ldrh	r2, [r7, #2]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ca40:	e002      	b.n	800ca48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ca42:	887a      	ldrh	r2, [r7, #2]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ca48:	bf00      	nop
 800ca4a:	370c      	adds	r7, #12
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800ca5e:	4b08      	ldr	r3, [pc, #32]	; (800ca80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ca60:	695a      	ldr	r2, [r3, #20]
 800ca62:	88fb      	ldrh	r3, [r7, #6]
 800ca64:	4013      	ands	r3, r2
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d006      	beq.n	800ca78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ca6a:	4a05      	ldr	r2, [pc, #20]	; (800ca80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ca6c:	88fb      	ldrh	r3, [r7, #6]
 800ca6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ca70:	88fb      	ldrh	r3, [r7, #6]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7f5 f8e6 	bl	8001c44 <HAL_GPIO_EXTI_Callback>
  }
}
 800ca78:	bf00      	nop
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	40010400 	.word	0x40010400

0800ca84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d101      	bne.n	800ca96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ca92:	2301      	movs	r3, #1
 800ca94:	e081      	b.n	800cb9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d106      	bne.n	800cab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7f4 fc8e 	bl	80013cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2224      	movs	r2, #36	; 0x24
 800cab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f022 0201 	bic.w	r2, r2, #1
 800cac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	685a      	ldr	r2, [r3, #4]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	689a      	ldr	r2, [r3, #8]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	2b01      	cmp	r3, #1
 800caec:	d107      	bne.n	800cafe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	689a      	ldr	r2, [r3, #8]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cafa:	609a      	str	r2, [r3, #8]
 800cafc:	e006      	b.n	800cb0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	689a      	ldr	r2, [r3, #8]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800cb0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d104      	bne.n	800cb1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	6812      	ldr	r2, [r2, #0]
 800cb28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cb2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	68da      	ldr	r2, [r3, #12]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cb40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	691a      	ldr	r2, [r3, #16]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	695b      	ldr	r3, [r3, #20]
 800cb4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	699b      	ldr	r3, [r3, #24]
 800cb52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	430a      	orrs	r2, r1
 800cb5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	69d9      	ldr	r1, [r3, #28]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6a1a      	ldr	r2, [r3, #32]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	430a      	orrs	r2, r1
 800cb6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f042 0201 	orr.w	r2, r2, #1
 800cb7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2220      	movs	r2, #32
 800cb86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b082      	sub	sp, #8
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d101      	bne.n	800cbb4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e021      	b.n	800cbf8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2224      	movs	r2, #36	; 0x24
 800cbb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f022 0201 	bic.w	r2, r2, #1
 800cbca:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f7f4 fcc3 	bl	8001558 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cbf6:	2300      	movs	r3, #0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b088      	sub	sp, #32
 800cc04:	af02      	add	r7, sp, #8
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	607a      	str	r2, [r7, #4]
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	817b      	strh	r3, [r7, #10]
 800cc10:	4613      	mov	r3, r2
 800cc12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	2b20      	cmp	r3, #32
 800cc1e:	f040 80da 	bne.w	800cdd6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d101      	bne.n	800cc30 <HAL_I2C_Master_Transmit+0x30>
 800cc2c:	2302      	movs	r3, #2
 800cc2e:	e0d3      	b.n	800cdd8 <HAL_I2C_Master_Transmit+0x1d8>
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2201      	movs	r2, #1
 800cc34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cc38:	f7fe f96e 	bl	800af18 <HAL_GetTick>
 800cc3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	9300      	str	r3, [sp, #0]
 800cc42:	2319      	movs	r3, #25
 800cc44:	2201      	movs	r2, #1
 800cc46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f000 fdd2 	bl	800d7f4 <I2C_WaitOnFlagUntilTimeout>
 800cc50:	4603      	mov	r3, r0
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d001      	beq.n	800cc5a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800cc56:	2301      	movs	r3, #1
 800cc58:	e0be      	b.n	800cdd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2221      	movs	r2, #33	; 0x21
 800cc5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2210      	movs	r2, #16
 800cc66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	893a      	ldrh	r2, [r7, #8]
 800cc7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	2bff      	cmp	r3, #255	; 0xff
 800cc8a:	d90e      	bls.n	800ccaa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	22ff      	movs	r2, #255	; 0xff
 800cc90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc96:	b2da      	uxtb	r2, r3
 800cc98:	8979      	ldrh	r1, [r7, #10]
 800cc9a:	4b51      	ldr	r3, [pc, #324]	; (800cde0 <HAL_I2C_Master_Transmit+0x1e0>)
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f000 ffc8 	bl	800dc38 <I2C_TransferConfig>
 800cca8:	e06c      	b.n	800cd84 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccb8:	b2da      	uxtb	r2, r3
 800ccba:	8979      	ldrh	r1, [r7, #10]
 800ccbc:	4b48      	ldr	r3, [pc, #288]	; (800cde0 <HAL_I2C_Master_Transmit+0x1e0>)
 800ccbe:	9300      	str	r3, [sp, #0]
 800ccc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f000 ffb7 	bl	800dc38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800ccca:	e05b      	b.n	800cd84 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cccc:	697a      	ldr	r2, [r7, #20]
 800ccce:	6a39      	ldr	r1, [r7, #32]
 800ccd0:	68f8      	ldr	r0, [r7, #12]
 800ccd2:	f000 fdcf 	bl	800d874 <I2C_WaitOnTXISFlagUntilTimeout>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d001      	beq.n	800cce0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e07b      	b.n	800cdd8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce4:	781a      	ldrb	r2, [r3, #0]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf0:	1c5a      	adds	r2, r3, #1
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d034      	beq.n	800cd84 <HAL_I2C_Master_Transmit+0x184>
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d130      	bne.n	800cd84 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	9300      	str	r3, [sp, #0]
 800cd26:	6a3b      	ldr	r3, [r7, #32]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	2180      	movs	r1, #128	; 0x80
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f000 fd61 	bl	800d7f4 <I2C_WaitOnFlagUntilTimeout>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d001      	beq.n	800cd3c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	e04d      	b.n	800cdd8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	2bff      	cmp	r3, #255	; 0xff
 800cd44:	d90e      	bls.n	800cd64 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	22ff      	movs	r2, #255	; 0xff
 800cd4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	8979      	ldrh	r1, [r7, #10]
 800cd54:	2300      	movs	r3, #0
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f000 ff6b 	bl	800dc38 <I2C_TransferConfig>
 800cd62:	e00f      	b.n	800cd84 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd68:	b29a      	uxth	r2, r3
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd72:	b2da      	uxtb	r2, r3
 800cd74:	8979      	ldrh	r1, [r7, #10]
 800cd76:	2300      	movs	r3, #0
 800cd78:	9300      	str	r3, [sp, #0]
 800cd7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cd7e:	68f8      	ldr	r0, [r7, #12]
 800cd80:	f000 ff5a 	bl	800dc38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d19e      	bne.n	800cccc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cd8e:	697a      	ldr	r2, [r7, #20]
 800cd90:	6a39      	ldr	r1, [r7, #32]
 800cd92:	68f8      	ldr	r0, [r7, #12]
 800cd94:	f000 fdae 	bl	800d8f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d001      	beq.n	800cda2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e01a      	b.n	800cdd8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2220      	movs	r2, #32
 800cda8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	6859      	ldr	r1, [r3, #4]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	4b0b      	ldr	r3, [pc, #44]	; (800cde4 <HAL_I2C_Master_Transmit+0x1e4>)
 800cdb6:	400b      	ands	r3, r1
 800cdb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2220      	movs	r2, #32
 800cdbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e000      	b.n	800cdd8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800cdd6:	2302      	movs	r3, #2
  }
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3718      	adds	r7, #24
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	80002000 	.word	0x80002000
 800cde4:	fe00e800 	.word	0xfe00e800

0800cde8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b088      	sub	sp, #32
 800cdec:	af02      	add	r7, sp, #8
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	607a      	str	r2, [r7, #4]
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	817b      	strh	r3, [r7, #10]
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	2b20      	cmp	r3, #32
 800ce06:	f040 80db 	bne.w	800cfc0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d101      	bne.n	800ce18 <HAL_I2C_Master_Receive+0x30>
 800ce14:	2302      	movs	r3, #2
 800ce16:	e0d4      	b.n	800cfc2 <HAL_I2C_Master_Receive+0x1da>
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ce20:	f7fe f87a 	bl	800af18 <HAL_GetTick>
 800ce24:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	2319      	movs	r3, #25
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ce32:	68f8      	ldr	r0, [r7, #12]
 800ce34:	f000 fcde 	bl	800d7f4 <I2C_WaitOnFlagUntilTimeout>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d001      	beq.n	800ce42 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e0bf      	b.n	800cfc2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2222      	movs	r2, #34	; 0x22
 800ce46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2210      	movs	r2, #16
 800ce4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2200      	movs	r2, #0
 800ce56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	893a      	ldrh	r2, [r7, #8]
 800ce62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	2bff      	cmp	r3, #255	; 0xff
 800ce72:	d90e      	bls.n	800ce92 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	22ff      	movs	r2, #255	; 0xff
 800ce78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce7e:	b2da      	uxtb	r2, r3
 800ce80:	8979      	ldrh	r1, [r7, #10]
 800ce82:	4b52      	ldr	r3, [pc, #328]	; (800cfcc <HAL_I2C_Master_Receive+0x1e4>)
 800ce84:	9300      	str	r3, [sp, #0]
 800ce86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	f000 fed4 	bl	800dc38 <I2C_TransferConfig>
 800ce90:	e06d      	b.n	800cf6e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	8979      	ldrh	r1, [r7, #10]
 800cea4:	4b49      	ldr	r3, [pc, #292]	; (800cfcc <HAL_I2C_Master_Receive+0x1e4>)
 800cea6:	9300      	str	r3, [sp, #0]
 800cea8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f000 fec3 	bl	800dc38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800ceb2:	e05c      	b.n	800cf6e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ceb4:	697a      	ldr	r2, [r7, #20]
 800ceb6:	6a39      	ldr	r1, [r7, #32]
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	f000 fd57 	bl	800d96c <I2C_WaitOnRXNEFlagUntilTimeout>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d001      	beq.n	800cec8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800cec4:	2301      	movs	r3, #1
 800cec6:	e07c      	b.n	800cfc2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced2:	b2d2      	uxtb	r2, r2
 800ced4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceda:	1c5a      	adds	r2, r3, #1
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cee4:	3b01      	subs	r3, #1
 800cee6:	b29a      	uxth	r2, r3
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	3b01      	subs	r3, #1
 800cef4:	b29a      	uxth	r2, r3
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d034      	beq.n	800cf6e <HAL_I2C_Master_Receive+0x186>
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d130      	bne.n	800cf6e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	9300      	str	r3, [sp, #0]
 800cf10:	6a3b      	ldr	r3, [r7, #32]
 800cf12:	2200      	movs	r2, #0
 800cf14:	2180      	movs	r1, #128	; 0x80
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f000 fc6c 	bl	800d7f4 <I2C_WaitOnFlagUntilTimeout>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d001      	beq.n	800cf26 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800cf22:	2301      	movs	r3, #1
 800cf24:	e04d      	b.n	800cfc2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	2bff      	cmp	r3, #255	; 0xff
 800cf2e:	d90e      	bls.n	800cf4e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	22ff      	movs	r2, #255	; 0xff
 800cf34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	8979      	ldrh	r1, [r7, #10]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	f000 fe76 	bl	800dc38 <I2C_TransferConfig>
 800cf4c:	e00f      	b.n	800cf6e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf5c:	b2da      	uxtb	r2, r3
 800cf5e:	8979      	ldrh	r1, [r7, #10]
 800cf60:	2300      	movs	r3, #0
 800cf62:	9300      	str	r3, [sp, #0]
 800cf64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf68:	68f8      	ldr	r0, [r7, #12]
 800cf6a:	f000 fe65 	bl	800dc38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d19d      	bne.n	800ceb4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cf78:	697a      	ldr	r2, [r7, #20]
 800cf7a:	6a39      	ldr	r1, [r7, #32]
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	f000 fcb9 	bl	800d8f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e01a      	b.n	800cfc2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2220      	movs	r2, #32
 800cf92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	6859      	ldr	r1, [r3, #4]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	4b0c      	ldr	r3, [pc, #48]	; (800cfd0 <HAL_I2C_Master_Receive+0x1e8>)
 800cfa0:	400b      	ands	r3, r1
 800cfa2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2220      	movs	r2, #32
 800cfa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	e000      	b.n	800cfc2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800cfc0:	2302      	movs	r3, #2
  }
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3718      	adds	r7, #24
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	80002400 	.word	0x80002400
 800cfd0:	fe00e800 	.word	0xfe00e800

0800cfd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b088      	sub	sp, #32
 800cfd8:	af02      	add	r7, sp, #8
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	4608      	mov	r0, r1
 800cfde:	4611      	mov	r1, r2
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	817b      	strh	r3, [r7, #10]
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	813b      	strh	r3, [r7, #8]
 800cfea:	4613      	mov	r3, r2
 800cfec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	2b20      	cmp	r3, #32
 800cff8:	f040 80f9 	bne.w	800d1ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cffc:	6a3b      	ldr	r3, [r7, #32]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d002      	beq.n	800d008 <HAL_I2C_Mem_Write+0x34>
 800d002:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d004:	2b00      	cmp	r3, #0
 800d006:	d105      	bne.n	800d014 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d00e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	e0ed      	b.n	800d1f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d101      	bne.n	800d022 <HAL_I2C_Mem_Write+0x4e>
 800d01e:	2302      	movs	r3, #2
 800d020:	e0e6      	b.n	800d1f0 <HAL_I2C_Mem_Write+0x21c>
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2201      	movs	r2, #1
 800d026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d02a:	f7fd ff75 	bl	800af18 <HAL_GetTick>
 800d02e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	9300      	str	r3, [sp, #0]
 800d034:	2319      	movs	r3, #25
 800d036:	2201      	movs	r2, #1
 800d038:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d03c:	68f8      	ldr	r0, [r7, #12]
 800d03e:	f000 fbd9 	bl	800d7f4 <I2C_WaitOnFlagUntilTimeout>
 800d042:	4603      	mov	r3, r0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d001      	beq.n	800d04c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800d048:	2301      	movs	r3, #1
 800d04a:	e0d1      	b.n	800d1f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2221      	movs	r2, #33	; 0x21
 800d050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2240      	movs	r2, #64	; 0x40
 800d058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2200      	movs	r2, #0
 800d060:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6a3a      	ldr	r2, [r7, #32]
 800d066:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d06c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2200      	movs	r2, #0
 800d072:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d074:	88f8      	ldrh	r0, [r7, #6]
 800d076:	893a      	ldrh	r2, [r7, #8]
 800d078:	8979      	ldrh	r1, [r7, #10]
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	9301      	str	r3, [sp, #4]
 800d07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d080:	9300      	str	r3, [sp, #0]
 800d082:	4603      	mov	r3, r0
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f000 fae9 	bl	800d65c <I2C_RequestMemoryWrite>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d005      	beq.n	800d09c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2200      	movs	r2, #0
 800d094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800d098:	2301      	movs	r3, #1
 800d09a:	e0a9      	b.n	800d1f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	2bff      	cmp	r3, #255	; 0xff
 800d0a4:	d90e      	bls.n	800d0c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	22ff      	movs	r2, #255	; 0xff
 800d0aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	8979      	ldrh	r1, [r7, #10]
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	9300      	str	r3, [sp, #0]
 800d0b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d0bc:	68f8      	ldr	r0, [r7, #12]
 800d0be:	f000 fdbb 	bl	800dc38 <I2C_TransferConfig>
 800d0c2:	e00f      	b.n	800d0e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0d2:	b2da      	uxtb	r2, r3
 800d0d4:	8979      	ldrh	r1, [r7, #10]
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	9300      	str	r3, [sp, #0]
 800d0da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d0de:	68f8      	ldr	r0, [r7, #12]
 800d0e0:	f000 fdaa 	bl	800dc38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0e4:	697a      	ldr	r2, [r7, #20]
 800d0e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f000 fbc3 	bl	800d874 <I2C_WaitOnTXISFlagUntilTimeout>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d001      	beq.n	800d0f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e07b      	b.n	800d1f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fc:	781a      	ldrb	r2, [r3, #0]
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d108:	1c5a      	adds	r2, r3, #1
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d112:	b29b      	uxth	r3, r3
 800d114:	3b01      	subs	r3, #1
 800d116:	b29a      	uxth	r2, r3
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d120:	3b01      	subs	r3, #1
 800d122:	b29a      	uxth	r2, r3
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d034      	beq.n	800d19c <HAL_I2C_Mem_Write+0x1c8>
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d136:	2b00      	cmp	r3, #0
 800d138:	d130      	bne.n	800d19c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d140:	2200      	movs	r2, #0
 800d142:	2180      	movs	r1, #128	; 0x80
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f000 fb55 	bl	800d7f4 <I2C_WaitOnFlagUntilTimeout>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d001      	beq.n	800d154 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	e04d      	b.n	800d1f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d158:	b29b      	uxth	r3, r3
 800d15a:	2bff      	cmp	r3, #255	; 0xff
 800d15c:	d90e      	bls.n	800d17c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	22ff      	movs	r2, #255	; 0xff
 800d162:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d168:	b2da      	uxtb	r2, r3
 800d16a:	8979      	ldrh	r1, [r7, #10]
 800d16c:	2300      	movs	r3, #0
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f000 fd5f 	bl	800dc38 <I2C_TransferConfig>
 800d17a:	e00f      	b.n	800d19c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d180:	b29a      	uxth	r2, r3
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d18a:	b2da      	uxtb	r2, r3
 800d18c:	8979      	ldrh	r1, [r7, #10]
 800d18e:	2300      	movs	r3, #0
 800d190:	9300      	str	r3, [sp, #0]
 800d192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f000 fd4e 	bl	800dc38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d19e      	bne.n	800d0e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d1a6:	697a      	ldr	r2, [r7, #20]
 800d1a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	f000 fba2 	bl	800d8f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d001      	beq.n	800d1ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	e01a      	b.n	800d1f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2220      	movs	r2, #32
 800d1c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	6859      	ldr	r1, [r3, #4]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	4b0a      	ldr	r3, [pc, #40]	; (800d1f8 <HAL_I2C_Mem_Write+0x224>)
 800d1ce:	400b      	ands	r3, r1
 800d1d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2220      	movs	r2, #32
 800d1d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	e000      	b.n	800d1f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800d1ee:	2302      	movs	r3, #2
  }
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3718      	adds	r7, #24
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	fe00e800 	.word	0xfe00e800

0800d1fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b088      	sub	sp, #32
 800d200:	af02      	add	r7, sp, #8
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	4608      	mov	r0, r1
 800d206:	4611      	mov	r1, r2
 800d208:	461a      	mov	r2, r3
 800d20a:	4603      	mov	r3, r0
 800d20c:	817b      	strh	r3, [r7, #10]
 800d20e:	460b      	mov	r3, r1
 800d210:	813b      	strh	r3, [r7, #8]
 800d212:	4613      	mov	r3, r2
 800d214:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	2b20      	cmp	r3, #32
 800d220:	f040 80fd 	bne.w	800d41e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800d224:	6a3b      	ldr	r3, [r7, #32]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d002      	beq.n	800d230 <HAL_I2C_Mem_Read+0x34>
 800d22a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d105      	bne.n	800d23c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d236:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	e0f1      	b.n	800d420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d242:	2b01      	cmp	r3, #1
 800d244:	d101      	bne.n	800d24a <HAL_I2C_Mem_Read+0x4e>
 800d246:	2302      	movs	r3, #2
 800d248:	e0ea      	b.n	800d420 <HAL_I2C_Mem_Read+0x224>
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2201      	movs	r2, #1
 800d24e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d252:	f7fd fe61 	bl	800af18 <HAL_GetTick>
 800d256:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	9300      	str	r3, [sp, #0]
 800d25c:	2319      	movs	r3, #25
 800d25e:	2201      	movs	r2, #1
 800d260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f000 fac5 	bl	800d7f4 <I2C_WaitOnFlagUntilTimeout>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d001      	beq.n	800d274 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800d270:	2301      	movs	r3, #1
 800d272:	e0d5      	b.n	800d420 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2222      	movs	r2, #34	; 0x22
 800d278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2240      	movs	r2, #64	; 0x40
 800d280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2200      	movs	r2, #0
 800d288:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6a3a      	ldr	r2, [r7, #32]
 800d28e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d294:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2200      	movs	r2, #0
 800d29a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d29c:	88f8      	ldrh	r0, [r7, #6]
 800d29e:	893a      	ldrh	r2, [r7, #8]
 800d2a0:	8979      	ldrh	r1, [r7, #10]
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	9301      	str	r3, [sp, #4]
 800d2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a8:	9300      	str	r3, [sp, #0]
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	68f8      	ldr	r0, [r7, #12]
 800d2ae:	f000 fa29 	bl	800d704 <I2C_RequestMemoryRead>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d005      	beq.n	800d2c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	e0ad      	b.n	800d420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	2bff      	cmp	r3, #255	; 0xff
 800d2cc:	d90e      	bls.n	800d2ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	22ff      	movs	r2, #255	; 0xff
 800d2d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2d8:	b2da      	uxtb	r2, r3
 800d2da:	8979      	ldrh	r1, [r7, #10]
 800d2dc:	4b52      	ldr	r3, [pc, #328]	; (800d428 <HAL_I2C_Mem_Read+0x22c>)
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f000 fca7 	bl	800dc38 <I2C_TransferConfig>
 800d2ea:	e00f      	b.n	800d30c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2f0:	b29a      	uxth	r2, r3
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2fa:	b2da      	uxtb	r2, r3
 800d2fc:	8979      	ldrh	r1, [r7, #10]
 800d2fe:	4b4a      	ldr	r3, [pc, #296]	; (800d428 <HAL_I2C_Mem_Read+0x22c>)
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f000 fc96 	bl	800dc38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	9300      	str	r3, [sp, #0]
 800d310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d312:	2200      	movs	r2, #0
 800d314:	2104      	movs	r1, #4
 800d316:	68f8      	ldr	r0, [r7, #12]
 800d318:	f000 fa6c 	bl	800d7f4 <I2C_WaitOnFlagUntilTimeout>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d001      	beq.n	800d326 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800d322:	2301      	movs	r3, #1
 800d324:	e07c      	b.n	800d420 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d330:	b2d2      	uxtb	r2, r2
 800d332:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d338:	1c5a      	adds	r2, r3, #1
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d342:	3b01      	subs	r3, #1
 800d344:	b29a      	uxth	r2, r3
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d34e:	b29b      	uxth	r3, r3
 800d350:	3b01      	subs	r3, #1
 800d352:	b29a      	uxth	r2, r3
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d034      	beq.n	800d3cc <HAL_I2C_Mem_Read+0x1d0>
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d366:	2b00      	cmp	r3, #0
 800d368:	d130      	bne.n	800d3cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d370:	2200      	movs	r2, #0
 800d372:	2180      	movs	r1, #128	; 0x80
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f000 fa3d 	bl	800d7f4 <I2C_WaitOnFlagUntilTimeout>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d001      	beq.n	800d384 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800d380:	2301      	movs	r3, #1
 800d382:	e04d      	b.n	800d420 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d388:	b29b      	uxth	r3, r3
 800d38a:	2bff      	cmp	r3, #255	; 0xff
 800d38c:	d90e      	bls.n	800d3ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	22ff      	movs	r2, #255	; 0xff
 800d392:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d398:	b2da      	uxtb	r2, r3
 800d39a:	8979      	ldrh	r1, [r7, #10]
 800d39c:	2300      	movs	r3, #0
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	f000 fc47 	bl	800dc38 <I2C_TransferConfig>
 800d3aa:	e00f      	b.n	800d3cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3ba:	b2da      	uxtb	r2, r3
 800d3bc:	8979      	ldrh	r1, [r7, #10]
 800d3be:	2300      	movs	r3, #0
 800d3c0:	9300      	str	r3, [sp, #0]
 800d3c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	f000 fc36 	bl	800dc38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3d0:	b29b      	uxth	r3, r3
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d19a      	bne.n	800d30c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3da:	68f8      	ldr	r0, [r7, #12]
 800d3dc:	f000 fa8a 	bl	800d8f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d001      	beq.n	800d3ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	e01a      	b.n	800d420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2220      	movs	r2, #32
 800d3f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	6859      	ldr	r1, [r3, #4]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	4b0b      	ldr	r3, [pc, #44]	; (800d42c <HAL_I2C_Mem_Read+0x230>)
 800d3fe:	400b      	ands	r3, r1
 800d400:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2220      	movs	r2, #32
 800d406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2200      	movs	r2, #0
 800d40e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2200      	movs	r2, #0
 800d416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d41a:	2300      	movs	r3, #0
 800d41c:	e000      	b.n	800d420 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800d41e:	2302      	movs	r3, #2
  }
}
 800d420:	4618      	mov	r0, r3
 800d422:	3718      	adds	r7, #24
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	80002400 	.word	0x80002400
 800d42c:	fe00e800 	.word	0xfe00e800

0800d430 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b08a      	sub	sp, #40	; 0x28
 800d434:	af02      	add	r7, sp, #8
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	607a      	str	r2, [r7, #4]
 800d43a:	603b      	str	r3, [r7, #0]
 800d43c:	460b      	mov	r3, r1
 800d43e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800d440:	2300      	movs	r3, #0
 800d442:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	2b20      	cmp	r3, #32
 800d44e:	f040 80f1 	bne.w	800d634 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	699b      	ldr	r3, [r3, #24]
 800d458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d45c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d460:	d101      	bne.n	800d466 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800d462:	2302      	movs	r3, #2
 800d464:	e0e7      	b.n	800d636 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d101      	bne.n	800d474 <HAL_I2C_IsDeviceReady+0x44>
 800d470:	2302      	movs	r3, #2
 800d472:	e0e0      	b.n	800d636 <HAL_I2C_IsDeviceReady+0x206>
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2201      	movs	r2, #1
 800d478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2224      	movs	r2, #36	; 0x24
 800d480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2200      	movs	r2, #0
 800d488:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d107      	bne.n	800d4a2 <HAL_I2C_IsDeviceReady+0x72>
 800d492:	897b      	ldrh	r3, [r7, #10]
 800d494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d498:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d49c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d4a0:	e004      	b.n	800d4ac <HAL_I2C_IsDeviceReady+0x7c>
 800d4a2:	897b      	ldrh	r3, [r7, #10]
 800d4a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4a8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	6812      	ldr	r2, [r2, #0]
 800d4b0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800d4b2:	f7fd fd31 	bl	800af18 <HAL_GetTick>
 800d4b6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	699b      	ldr	r3, [r3, #24]
 800d4be:	f003 0320 	and.w	r3, r3, #32
 800d4c2:	2b20      	cmp	r3, #32
 800d4c4:	bf0c      	ite	eq
 800d4c6:	2301      	moveq	r3, #1
 800d4c8:	2300      	movne	r3, #0
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	699b      	ldr	r3, [r3, #24]
 800d4d4:	f003 0310 	and.w	r3, r3, #16
 800d4d8:	2b10      	cmp	r3, #16
 800d4da:	bf0c      	ite	eq
 800d4dc:	2301      	moveq	r3, #1
 800d4de:	2300      	movne	r3, #0
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800d4e4:	e034      	b.n	800d550 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4ec:	d01a      	beq.n	800d524 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d4ee:	f7fd fd13 	bl	800af18 <HAL_GetTick>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	1ad3      	subs	r3, r2, r3
 800d4f8:	683a      	ldr	r2, [r7, #0]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d302      	bcc.n	800d504 <HAL_I2C_IsDeviceReady+0xd4>
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d10f      	bne.n	800d524 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2220      	movs	r2, #32
 800d508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d510:	f043 0220 	orr.w	r2, r3, #32
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2200      	movs	r2, #0
 800d51c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800d520:	2301      	movs	r3, #1
 800d522:	e088      	b.n	800d636 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	699b      	ldr	r3, [r3, #24]
 800d52a:	f003 0320 	and.w	r3, r3, #32
 800d52e:	2b20      	cmp	r3, #32
 800d530:	bf0c      	ite	eq
 800d532:	2301      	moveq	r3, #1
 800d534:	2300      	movne	r3, #0
 800d536:	b2db      	uxtb	r3, r3
 800d538:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	699b      	ldr	r3, [r3, #24]
 800d540:	f003 0310 	and.w	r3, r3, #16
 800d544:	2b10      	cmp	r3, #16
 800d546:	bf0c      	ite	eq
 800d548:	2301      	moveq	r3, #1
 800d54a:	2300      	movne	r3, #0
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800d550:	7ffb      	ldrb	r3, [r7, #31]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d102      	bne.n	800d55c <HAL_I2C_IsDeviceReady+0x12c>
 800d556:	7fbb      	ldrb	r3, [r7, #30]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d0c4      	beq.n	800d4e6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	699b      	ldr	r3, [r3, #24]
 800d562:	f003 0310 	and.w	r3, r3, #16
 800d566:	2b10      	cmp	r3, #16
 800d568:	d01a      	beq.n	800d5a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d56a:	69bb      	ldr	r3, [r7, #24]
 800d56c:	9300      	str	r3, [sp, #0]
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	2200      	movs	r2, #0
 800d572:	2120      	movs	r1, #32
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f000 f93d 	bl	800d7f4 <I2C_WaitOnFlagUntilTimeout>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d001      	beq.n	800d584 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	e058      	b.n	800d636 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2220      	movs	r2, #32
 800d58a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2220      	movs	r2, #32
 800d590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2200      	movs	r2, #0
 800d598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800d59c:	2300      	movs	r3, #0
 800d59e:	e04a      	b.n	800d636 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	2120      	movs	r1, #32
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f000 f922 	bl	800d7f4 <I2C_WaitOnFlagUntilTimeout>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d001      	beq.n	800d5ba <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	e03d      	b.n	800d636 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	2210      	movs	r2, #16
 800d5c0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2220      	movs	r2, #32
 800d5c8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d118      	bne.n	800d604 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	685a      	ldr	r2, [r3, #4]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d5e0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	2120      	movs	r1, #32
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f000 f901 	bl	800d7f4 <I2C_WaitOnFlagUntilTimeout>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d001      	beq.n	800d5fc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e01c      	b.n	800d636 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2220      	movs	r2, #32
 800d602:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	3301      	adds	r3, #1
 800d608:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	429a      	cmp	r2, r3
 800d610:	f63f af3b 	bhi.w	800d48a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2220      	movs	r2, #32
 800d618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d620:	f043 0220 	orr.w	r2, r3, #32
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800d630:	2301      	movs	r3, #1
 800d632:	e000      	b.n	800d636 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800d634:	2302      	movs	r3, #2
  }
}
 800d636:	4618      	mov	r0, r3
 800d638:	3720      	adds	r7, #32
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800d63e:	b480      	push	{r7}
 800d640:	b083      	sub	sp, #12
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d64c:	b2db      	uxtb	r3, r3
}
 800d64e:	4618      	mov	r0, r3
 800d650:	370c      	adds	r7, #12
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
	...

0800d65c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b086      	sub	sp, #24
 800d660:	af02      	add	r7, sp, #8
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	4608      	mov	r0, r1
 800d666:	4611      	mov	r1, r2
 800d668:	461a      	mov	r2, r3
 800d66a:	4603      	mov	r3, r0
 800d66c:	817b      	strh	r3, [r7, #10]
 800d66e:	460b      	mov	r3, r1
 800d670:	813b      	strh	r3, [r7, #8]
 800d672:	4613      	mov	r3, r2
 800d674:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d676:	88fb      	ldrh	r3, [r7, #6]
 800d678:	b2da      	uxtb	r2, r3
 800d67a:	8979      	ldrh	r1, [r7, #10]
 800d67c:	4b20      	ldr	r3, [pc, #128]	; (800d700 <I2C_RequestMemoryWrite+0xa4>)
 800d67e:	9300      	str	r3, [sp, #0]
 800d680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d684:	68f8      	ldr	r0, [r7, #12]
 800d686:	f000 fad7 	bl	800dc38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d68a:	69fa      	ldr	r2, [r7, #28]
 800d68c:	69b9      	ldr	r1, [r7, #24]
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	f000 f8f0 	bl	800d874 <I2C_WaitOnTXISFlagUntilTimeout>
 800d694:	4603      	mov	r3, r0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d001      	beq.n	800d69e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800d69a:	2301      	movs	r3, #1
 800d69c:	e02c      	b.n	800d6f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d69e:	88fb      	ldrh	r3, [r7, #6]
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d105      	bne.n	800d6b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d6a4:	893b      	ldrh	r3, [r7, #8]
 800d6a6:	b2da      	uxtb	r2, r3
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	629a      	str	r2, [r3, #40]	; 0x28
 800d6ae:	e015      	b.n	800d6dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d6b0:	893b      	ldrh	r3, [r7, #8]
 800d6b2:	0a1b      	lsrs	r3, r3, #8
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d6be:	69fa      	ldr	r2, [r7, #28]
 800d6c0:	69b9      	ldr	r1, [r7, #24]
 800d6c2:	68f8      	ldr	r0, [r7, #12]
 800d6c4:	f000 f8d6 	bl	800d874 <I2C_WaitOnTXISFlagUntilTimeout>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d001      	beq.n	800d6d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	e012      	b.n	800d6f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d6d2:	893b      	ldrh	r3, [r7, #8]
 800d6d4:	b2da      	uxtb	r2, r3
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	69bb      	ldr	r3, [r7, #24]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	2180      	movs	r1, #128	; 0x80
 800d6e6:	68f8      	ldr	r0, [r7, #12]
 800d6e8:	f000 f884 	bl	800d7f4 <I2C_WaitOnFlagUntilTimeout>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d001      	beq.n	800d6f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e000      	b.n	800d6f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800d6f6:	2300      	movs	r3, #0
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3710      	adds	r7, #16
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	80002000 	.word	0x80002000

0800d704 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b086      	sub	sp, #24
 800d708:	af02      	add	r7, sp, #8
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	4608      	mov	r0, r1
 800d70e:	4611      	mov	r1, r2
 800d710:	461a      	mov	r2, r3
 800d712:	4603      	mov	r3, r0
 800d714:	817b      	strh	r3, [r7, #10]
 800d716:	460b      	mov	r3, r1
 800d718:	813b      	strh	r3, [r7, #8]
 800d71a:	4613      	mov	r3, r2
 800d71c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d71e:	88fb      	ldrh	r3, [r7, #6]
 800d720:	b2da      	uxtb	r2, r3
 800d722:	8979      	ldrh	r1, [r7, #10]
 800d724:	4b20      	ldr	r3, [pc, #128]	; (800d7a8 <I2C_RequestMemoryRead+0xa4>)
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	2300      	movs	r3, #0
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f000 fa84 	bl	800dc38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d730:	69fa      	ldr	r2, [r7, #28]
 800d732:	69b9      	ldr	r1, [r7, #24]
 800d734:	68f8      	ldr	r0, [r7, #12]
 800d736:	f000 f89d 	bl	800d874 <I2C_WaitOnTXISFlagUntilTimeout>
 800d73a:	4603      	mov	r3, r0
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d001      	beq.n	800d744 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800d740:	2301      	movs	r3, #1
 800d742:	e02c      	b.n	800d79e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d744:	88fb      	ldrh	r3, [r7, #6]
 800d746:	2b01      	cmp	r3, #1
 800d748:	d105      	bne.n	800d756 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d74a:	893b      	ldrh	r3, [r7, #8]
 800d74c:	b2da      	uxtb	r2, r3
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	629a      	str	r2, [r3, #40]	; 0x28
 800d754:	e015      	b.n	800d782 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d756:	893b      	ldrh	r3, [r7, #8]
 800d758:	0a1b      	lsrs	r3, r3, #8
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	b2da      	uxtb	r2, r3
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d764:	69fa      	ldr	r2, [r7, #28]
 800d766:	69b9      	ldr	r1, [r7, #24]
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f000 f883 	bl	800d874 <I2C_WaitOnTXISFlagUntilTimeout>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d001      	beq.n	800d778 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800d774:	2301      	movs	r3, #1
 800d776:	e012      	b.n	800d79e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d778:	893b      	ldrh	r3, [r7, #8]
 800d77a:	b2da      	uxtb	r2, r3
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	2200      	movs	r2, #0
 800d78a:	2140      	movs	r1, #64	; 0x40
 800d78c:	68f8      	ldr	r0, [r7, #12]
 800d78e:	f000 f831 	bl	800d7f4 <I2C_WaitOnFlagUntilTimeout>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d001      	beq.n	800d79c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800d798:	2301      	movs	r3, #1
 800d79a:	e000      	b.n	800d79e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800d79c:	2300      	movs	r3, #0
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	80002000 	.word	0x80002000

0800d7ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	699b      	ldr	r3, [r3, #24]
 800d7ba:	f003 0302 	and.w	r3, r3, #2
 800d7be:	2b02      	cmp	r3, #2
 800d7c0:	d103      	bne.n	800d7ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	699b      	ldr	r3, [r3, #24]
 800d7d0:	f003 0301 	and.w	r3, r3, #1
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d007      	beq.n	800d7e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	699a      	ldr	r2, [r3, #24]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f042 0201 	orr.w	r2, r2, #1
 800d7e6:	619a      	str	r2, [r3, #24]
  }
}
 800d7e8:	bf00      	nop
 800d7ea:	370c      	adds	r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	603b      	str	r3, [r7, #0]
 800d800:	4613      	mov	r3, r2
 800d802:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d804:	e022      	b.n	800d84c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d80c:	d01e      	beq.n	800d84c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d80e:	f7fd fb83 	bl	800af18 <HAL_GetTick>
 800d812:	4602      	mov	r2, r0
 800d814:	69bb      	ldr	r3, [r7, #24]
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	683a      	ldr	r2, [r7, #0]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d302      	bcc.n	800d824 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d113      	bne.n	800d84c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d828:	f043 0220 	orr.w	r2, r3, #32
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2220      	movs	r2, #32
 800d834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2200      	movs	r2, #0
 800d83c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2200      	movs	r2, #0
 800d844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800d848:	2301      	movs	r3, #1
 800d84a:	e00f      	b.n	800d86c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	699a      	ldr	r2, [r3, #24]
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	4013      	ands	r3, r2
 800d856:	68ba      	ldr	r2, [r7, #8]
 800d858:	429a      	cmp	r2, r3
 800d85a:	bf0c      	ite	eq
 800d85c:	2301      	moveq	r3, #1
 800d85e:	2300      	movne	r3, #0
 800d860:	b2db      	uxtb	r3, r3
 800d862:	461a      	mov	r2, r3
 800d864:	79fb      	ldrb	r3, [r7, #7]
 800d866:	429a      	cmp	r2, r3
 800d868:	d0cd      	beq.n	800d806 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d86a:	2300      	movs	r3, #0
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3710      	adds	r7, #16
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d880:	e02c      	b.n	800d8dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	68b9      	ldr	r1, [r7, #8]
 800d886:	68f8      	ldr	r0, [r7, #12]
 800d888:	f000 f8ea 	bl	800da60 <I2C_IsErrorOccurred>
 800d88c:	4603      	mov	r3, r0
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d001      	beq.n	800d896 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d892:	2301      	movs	r3, #1
 800d894:	e02a      	b.n	800d8ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d89c:	d01e      	beq.n	800d8dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d89e:	f7fd fb3b 	bl	800af18 <HAL_GetTick>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	1ad3      	subs	r3, r2, r3
 800d8a8:	68ba      	ldr	r2, [r7, #8]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d302      	bcc.n	800d8b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d113      	bne.n	800d8dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8b8:	f043 0220 	orr.w	r2, r3, #32
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2220      	movs	r2, #32
 800d8c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	e007      	b.n	800d8ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	699b      	ldr	r3, [r3, #24]
 800d8e2:	f003 0302 	and.w	r3, r3, #2
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d1cb      	bne.n	800d882 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d8ea:	2300      	movs	r3, #0
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3710      	adds	r7, #16
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d900:	e028      	b.n	800d954 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	68b9      	ldr	r1, [r7, #8]
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	f000 f8aa 	bl	800da60 <I2C_IsErrorOccurred>
 800d90c:	4603      	mov	r3, r0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d001      	beq.n	800d916 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d912:	2301      	movs	r3, #1
 800d914:	e026      	b.n	800d964 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d916:	f7fd faff 	bl	800af18 <HAL_GetTick>
 800d91a:	4602      	mov	r2, r0
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	1ad3      	subs	r3, r2, r3
 800d920:	68ba      	ldr	r2, [r7, #8]
 800d922:	429a      	cmp	r2, r3
 800d924:	d302      	bcc.n	800d92c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d113      	bne.n	800d954 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d930:	f043 0220 	orr.w	r2, r3, #32
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2220      	movs	r2, #32
 800d93c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2200      	movs	r2, #0
 800d944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2200      	movs	r2, #0
 800d94c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d950:	2301      	movs	r3, #1
 800d952:	e007      	b.n	800d964 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	699b      	ldr	r3, [r3, #24]
 800d95a:	f003 0320 	and.w	r3, r3, #32
 800d95e:	2b20      	cmp	r3, #32
 800d960:	d1cf      	bne.n	800d902 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	60f8      	str	r0, [r7, #12]
 800d974:	60b9      	str	r1, [r7, #8]
 800d976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d978:	e064      	b.n	800da44 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	68b9      	ldr	r1, [r7, #8]
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f000 f86e 	bl	800da60 <I2C_IsErrorOccurred>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d001      	beq.n	800d98e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d98a:	2301      	movs	r3, #1
 800d98c:	e062      	b.n	800da54 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	699b      	ldr	r3, [r3, #24]
 800d994:	f003 0320 	and.w	r3, r3, #32
 800d998:	2b20      	cmp	r3, #32
 800d99a:	d138      	bne.n	800da0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	699b      	ldr	r3, [r3, #24]
 800d9a2:	f003 0304 	and.w	r3, r3, #4
 800d9a6:	2b04      	cmp	r3, #4
 800d9a8:	d105      	bne.n	800d9b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d001      	beq.n	800d9b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	e04e      	b.n	800da54 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	699b      	ldr	r3, [r3, #24]
 800d9bc:	f003 0310 	and.w	r3, r3, #16
 800d9c0:	2b10      	cmp	r3, #16
 800d9c2:	d107      	bne.n	800d9d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	2210      	movs	r2, #16
 800d9ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2204      	movs	r2, #4
 800d9d0:	645a      	str	r2, [r3, #68]	; 0x44
 800d9d2:	e002      	b.n	800d9da <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2220      	movs	r2, #32
 800d9e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	6859      	ldr	r1, [r3, #4]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	4b1b      	ldr	r3, [pc, #108]	; (800da5c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800d9ee:	400b      	ands	r3, r1
 800d9f0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2220      	movs	r2, #32
 800d9f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2200      	movs	r2, #0
 800da06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800da0a:	2301      	movs	r3, #1
 800da0c:	e022      	b.n	800da54 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da0e:	f7fd fa83 	bl	800af18 <HAL_GetTick>
 800da12:	4602      	mov	r2, r0
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	1ad3      	subs	r3, r2, r3
 800da18:	68ba      	ldr	r2, [r7, #8]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d302      	bcc.n	800da24 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10f      	bne.n	800da44 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da28:	f043 0220 	orr.w	r2, r3, #32
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2220      	movs	r2, #32
 800da34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800da40:	2301      	movs	r3, #1
 800da42:	e007      	b.n	800da54 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	699b      	ldr	r3, [r3, #24]
 800da4a:	f003 0304 	and.w	r3, r3, #4
 800da4e:	2b04      	cmp	r3, #4
 800da50:	d193      	bne.n	800d97a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800da52:	2300      	movs	r3, #0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	fe00e800 	.word	0xfe00e800

0800da60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b08a      	sub	sp, #40	; 0x28
 800da64:	af00      	add	r7, sp, #0
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800da6c:	2300      	movs	r3, #0
 800da6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	699b      	ldr	r3, [r3, #24]
 800da78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800da7a:	2300      	movs	r3, #0
 800da7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	f003 0310 	and.w	r3, r3, #16
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d075      	beq.n	800db78 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2210      	movs	r2, #16
 800da92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800da94:	e056      	b.n	800db44 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da9c:	d052      	beq.n	800db44 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800da9e:	f7fd fa3b 	bl	800af18 <HAL_GetTick>
 800daa2:	4602      	mov	r2, r0
 800daa4:	69fb      	ldr	r3, [r7, #28]
 800daa6:	1ad3      	subs	r3, r2, r3
 800daa8:	68ba      	ldr	r2, [r7, #8]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d302      	bcc.n	800dab4 <I2C_IsErrorOccurred+0x54>
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d147      	bne.n	800db44 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dabe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dac6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	699b      	ldr	r3, [r3, #24]
 800dace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dad6:	d12e      	bne.n	800db36 <I2C_IsErrorOccurred+0xd6>
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dade:	d02a      	beq.n	800db36 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800dae0:	7cfb      	ldrb	r3, [r7, #19]
 800dae2:	2b20      	cmp	r3, #32
 800dae4:	d027      	beq.n	800db36 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	685a      	ldr	r2, [r3, #4]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800daf4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800daf6:	f7fd fa0f 	bl	800af18 <HAL_GetTick>
 800dafa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dafc:	e01b      	b.n	800db36 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800dafe:	f7fd fa0b 	bl	800af18 <HAL_GetTick>
 800db02:	4602      	mov	r2, r0
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	1ad3      	subs	r3, r2, r3
 800db08:	2b19      	cmp	r3, #25
 800db0a:	d914      	bls.n	800db36 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db10:	f043 0220 	orr.w	r2, r3, #32
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2220      	movs	r2, #32
 800db1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2200      	movs	r2, #0
 800db24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2200      	movs	r2, #0
 800db2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800db30:	2301      	movs	r3, #1
 800db32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	699b      	ldr	r3, [r3, #24]
 800db3c:	f003 0320 	and.w	r3, r3, #32
 800db40:	2b20      	cmp	r3, #32
 800db42:	d1dc      	bne.n	800dafe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	699b      	ldr	r3, [r3, #24]
 800db4a:	f003 0320 	and.w	r3, r3, #32
 800db4e:	2b20      	cmp	r3, #32
 800db50:	d003      	beq.n	800db5a <I2C_IsErrorOccurred+0xfa>
 800db52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db56:	2b00      	cmp	r3, #0
 800db58:	d09d      	beq.n	800da96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800db5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d103      	bne.n	800db6a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	2220      	movs	r2, #32
 800db68:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	f043 0304 	orr.w	r3, r3, #4
 800db70:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800db72:	2301      	movs	r3, #1
 800db74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	699b      	ldr	r3, [r3, #24]
 800db7e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800db80:	69bb      	ldr	r3, [r7, #24]
 800db82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00b      	beq.n	800dba2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800db8a:	6a3b      	ldr	r3, [r7, #32]
 800db8c:	f043 0301 	orr.w	r3, r3, #1
 800db90:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800db9c:	2301      	movs	r3, #1
 800db9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d00b      	beq.n	800dbc4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800dbac:	6a3b      	ldr	r3, [r7, #32]
 800dbae:	f043 0308 	orr.w	r3, r3, #8
 800dbb2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dbbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800dbc4:	69bb      	ldr	r3, [r7, #24]
 800dbc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00b      	beq.n	800dbe6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800dbce:	6a3b      	ldr	r3, [r7, #32]
 800dbd0:	f043 0302 	orr.w	r3, r3, #2
 800dbd4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dbde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800dbe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d01c      	beq.n	800dc28 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f7ff fddc 	bl	800d7ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	6859      	ldr	r1, [r3, #4]
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681a      	ldr	r2, [r3, #0]
 800dbfe:	4b0d      	ldr	r3, [pc, #52]	; (800dc34 <I2C_IsErrorOccurred+0x1d4>)
 800dc00:	400b      	ands	r3, r1
 800dc02:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc08:	6a3b      	ldr	r3, [r7, #32]
 800dc0a:	431a      	orrs	r2, r3
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2220      	movs	r2, #32
 800dc14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2200      	movs	r2, #0
 800dc24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800dc28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3728      	adds	r7, #40	; 0x28
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	fe00e800 	.word	0xfe00e800

0800dc38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b087      	sub	sp, #28
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	60f8      	str	r0, [r7, #12]
 800dc40:	607b      	str	r3, [r7, #4]
 800dc42:	460b      	mov	r3, r1
 800dc44:	817b      	strh	r3, [r7, #10]
 800dc46:	4613      	mov	r3, r2
 800dc48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dc4a:	897b      	ldrh	r3, [r7, #10]
 800dc4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800dc50:	7a7b      	ldrb	r3, [r7, #9]
 800dc52:	041b      	lsls	r3, r3, #16
 800dc54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dc58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dc5e:	6a3b      	ldr	r3, [r7, #32]
 800dc60:	4313      	orrs	r3, r2
 800dc62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	685a      	ldr	r2, [r3, #4]
 800dc6e:	6a3b      	ldr	r3, [r7, #32]
 800dc70:	0d5b      	lsrs	r3, r3, #21
 800dc72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800dc76:	4b08      	ldr	r3, [pc, #32]	; (800dc98 <I2C_TransferConfig+0x60>)
 800dc78:	430b      	orrs	r3, r1
 800dc7a:	43db      	mvns	r3, r3
 800dc7c:	ea02 0103 	and.w	r1, r2, r3
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	697a      	ldr	r2, [r7, #20]
 800dc86:	430a      	orrs	r2, r1
 800dc88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800dc8a:	bf00      	nop
 800dc8c:	371c      	adds	r7, #28
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop
 800dc98:	03ff63ff 	.word	0x03ff63ff

0800dc9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	2b20      	cmp	r3, #32
 800dcb0:	d138      	bne.n	800dd24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d101      	bne.n	800dcc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800dcbc:	2302      	movs	r3, #2
 800dcbe:	e032      	b.n	800dd26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2224      	movs	r2, #36	; 0x24
 800dccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f022 0201 	bic.w	r2, r2, #1
 800dcde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dcee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	6819      	ldr	r1, [r3, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	683a      	ldr	r2, [r7, #0]
 800dcfc:	430a      	orrs	r2, r1
 800dcfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	681a      	ldr	r2, [r3, #0]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f042 0201 	orr.w	r2, r2, #1
 800dd0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2220      	movs	r2, #32
 800dd14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dd20:	2300      	movs	r3, #0
 800dd22:	e000      	b.n	800dd26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dd24:	2302      	movs	r3, #2
  }
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	370c      	adds	r7, #12
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr

0800dd32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800dd32:	b480      	push	{r7}
 800dd34:	b085      	sub	sp, #20
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
 800dd3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	2b20      	cmp	r3, #32
 800dd46:	d139      	bne.n	800ddbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d101      	bne.n	800dd56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800dd52:	2302      	movs	r3, #2
 800dd54:	e033      	b.n	800ddbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2224      	movs	r2, #36	; 0x24
 800dd62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	681a      	ldr	r2, [r3, #0]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f022 0201 	bic.w	r2, r2, #1
 800dd74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800dd84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	021b      	lsls	r3, r3, #8
 800dd8a:	68fa      	ldr	r2, [r7, #12]
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	68fa      	ldr	r2, [r7, #12]
 800dd96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f042 0201 	orr.w	r2, r2, #1
 800dda6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2220      	movs	r2, #32
 800ddac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	e000      	b.n	800ddbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ddbc:	2302      	movs	r3, #2
  }
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3714      	adds	r7, #20
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc8:	4770      	bx	lr

0800ddca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ddca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddcc:	b08f      	sub	sp, #60	; 0x3c
 800ddce:	af0a      	add	r7, sp, #40	; 0x28
 800ddd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d101      	bne.n	800dddc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	e116      	b.n	800e00a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d106      	bne.n	800ddfc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f00a f9e0 	bl	80181bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2203      	movs	r2, #3
 800de00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d102      	bne.n	800de16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2200      	movs	r2, #0
 800de14:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f007 f8ef 	bl	8014ffe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	603b      	str	r3, [r7, #0]
 800de26:	687e      	ldr	r6, [r7, #4]
 800de28:	466d      	mov	r5, sp
 800de2a:	f106 0410 	add.w	r4, r6, #16
 800de2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800de32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800de36:	e894 0003 	ldmia.w	r4, {r0, r1}
 800de3a:	e885 0003 	stmia.w	r5, {r0, r1}
 800de3e:	1d33      	adds	r3, r6, #4
 800de40:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de42:	6838      	ldr	r0, [r7, #0]
 800de44:	f007 f802 	bl	8014e4c <USB_CoreInit>
 800de48:	4603      	mov	r3, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d005      	beq.n	800de5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2202      	movs	r2, #2
 800de52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800de56:	2301      	movs	r3, #1
 800de58:	e0d7      	b.n	800e00a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2100      	movs	r1, #0
 800de60:	4618      	mov	r0, r3
 800de62:	f007 f8dd 	bl	8015020 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800de66:	2300      	movs	r3, #0
 800de68:	73fb      	strb	r3, [r7, #15]
 800de6a:	e04a      	b.n	800df02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800de6c:	7bfa      	ldrb	r2, [r7, #15]
 800de6e:	6879      	ldr	r1, [r7, #4]
 800de70:	4613      	mov	r3, r2
 800de72:	00db      	lsls	r3, r3, #3
 800de74:	4413      	add	r3, r2
 800de76:	009b      	lsls	r3, r3, #2
 800de78:	440b      	add	r3, r1
 800de7a:	333d      	adds	r3, #61	; 0x3d
 800de7c:	2201      	movs	r2, #1
 800de7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800de80:	7bfa      	ldrb	r2, [r7, #15]
 800de82:	6879      	ldr	r1, [r7, #4]
 800de84:	4613      	mov	r3, r2
 800de86:	00db      	lsls	r3, r3, #3
 800de88:	4413      	add	r3, r2
 800de8a:	009b      	lsls	r3, r3, #2
 800de8c:	440b      	add	r3, r1
 800de8e:	333c      	adds	r3, #60	; 0x3c
 800de90:	7bfa      	ldrb	r2, [r7, #15]
 800de92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800de94:	7bfa      	ldrb	r2, [r7, #15]
 800de96:	7bfb      	ldrb	r3, [r7, #15]
 800de98:	b298      	uxth	r0, r3
 800de9a:	6879      	ldr	r1, [r7, #4]
 800de9c:	4613      	mov	r3, r2
 800de9e:	00db      	lsls	r3, r3, #3
 800dea0:	4413      	add	r3, r2
 800dea2:	009b      	lsls	r3, r3, #2
 800dea4:	440b      	add	r3, r1
 800dea6:	3344      	adds	r3, #68	; 0x44
 800dea8:	4602      	mov	r2, r0
 800deaa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800deac:	7bfa      	ldrb	r2, [r7, #15]
 800deae:	6879      	ldr	r1, [r7, #4]
 800deb0:	4613      	mov	r3, r2
 800deb2:	00db      	lsls	r3, r3, #3
 800deb4:	4413      	add	r3, r2
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	440b      	add	r3, r1
 800deba:	3340      	adds	r3, #64	; 0x40
 800debc:	2200      	movs	r2, #0
 800debe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800dec0:	7bfa      	ldrb	r2, [r7, #15]
 800dec2:	6879      	ldr	r1, [r7, #4]
 800dec4:	4613      	mov	r3, r2
 800dec6:	00db      	lsls	r3, r3, #3
 800dec8:	4413      	add	r3, r2
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	440b      	add	r3, r1
 800dece:	3348      	adds	r3, #72	; 0x48
 800ded0:	2200      	movs	r2, #0
 800ded2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ded4:	7bfa      	ldrb	r2, [r7, #15]
 800ded6:	6879      	ldr	r1, [r7, #4]
 800ded8:	4613      	mov	r3, r2
 800deda:	00db      	lsls	r3, r3, #3
 800dedc:	4413      	add	r3, r2
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	440b      	add	r3, r1
 800dee2:	334c      	adds	r3, #76	; 0x4c
 800dee4:	2200      	movs	r2, #0
 800dee6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800dee8:	7bfa      	ldrb	r2, [r7, #15]
 800deea:	6879      	ldr	r1, [r7, #4]
 800deec:	4613      	mov	r3, r2
 800deee:	00db      	lsls	r3, r3, #3
 800def0:	4413      	add	r3, r2
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	440b      	add	r3, r1
 800def6:	3354      	adds	r3, #84	; 0x54
 800def8:	2200      	movs	r2, #0
 800defa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800defc:	7bfb      	ldrb	r3, [r7, #15]
 800defe:	3301      	adds	r3, #1
 800df00:	73fb      	strb	r3, [r7, #15]
 800df02:	7bfa      	ldrb	r2, [r7, #15]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d3af      	bcc.n	800de6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800df0c:	2300      	movs	r3, #0
 800df0e:	73fb      	strb	r3, [r7, #15]
 800df10:	e044      	b.n	800df9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800df12:	7bfa      	ldrb	r2, [r7, #15]
 800df14:	6879      	ldr	r1, [r7, #4]
 800df16:	4613      	mov	r3, r2
 800df18:	00db      	lsls	r3, r3, #3
 800df1a:	4413      	add	r3, r2
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	440b      	add	r3, r1
 800df20:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800df24:	2200      	movs	r2, #0
 800df26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800df28:	7bfa      	ldrb	r2, [r7, #15]
 800df2a:	6879      	ldr	r1, [r7, #4]
 800df2c:	4613      	mov	r3, r2
 800df2e:	00db      	lsls	r3, r3, #3
 800df30:	4413      	add	r3, r2
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	440b      	add	r3, r1
 800df36:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800df3a:	7bfa      	ldrb	r2, [r7, #15]
 800df3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800df3e:	7bfa      	ldrb	r2, [r7, #15]
 800df40:	6879      	ldr	r1, [r7, #4]
 800df42:	4613      	mov	r3, r2
 800df44:	00db      	lsls	r3, r3, #3
 800df46:	4413      	add	r3, r2
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	440b      	add	r3, r1
 800df4c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800df50:	2200      	movs	r2, #0
 800df52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800df54:	7bfa      	ldrb	r2, [r7, #15]
 800df56:	6879      	ldr	r1, [r7, #4]
 800df58:	4613      	mov	r3, r2
 800df5a:	00db      	lsls	r3, r3, #3
 800df5c:	4413      	add	r3, r2
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	440b      	add	r3, r1
 800df62:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800df66:	2200      	movs	r2, #0
 800df68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800df6a:	7bfa      	ldrb	r2, [r7, #15]
 800df6c:	6879      	ldr	r1, [r7, #4]
 800df6e:	4613      	mov	r3, r2
 800df70:	00db      	lsls	r3, r3, #3
 800df72:	4413      	add	r3, r2
 800df74:	009b      	lsls	r3, r3, #2
 800df76:	440b      	add	r3, r1
 800df78:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800df7c:	2200      	movs	r2, #0
 800df7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800df80:	7bfa      	ldrb	r2, [r7, #15]
 800df82:	6879      	ldr	r1, [r7, #4]
 800df84:	4613      	mov	r3, r2
 800df86:	00db      	lsls	r3, r3, #3
 800df88:	4413      	add	r3, r2
 800df8a:	009b      	lsls	r3, r3, #2
 800df8c:	440b      	add	r3, r1
 800df8e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800df92:	2200      	movs	r2, #0
 800df94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800df96:	7bfb      	ldrb	r3, [r7, #15]
 800df98:	3301      	adds	r3, #1
 800df9a:	73fb      	strb	r3, [r7, #15]
 800df9c:	7bfa      	ldrb	r2, [r7, #15]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d3b5      	bcc.n	800df12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	603b      	str	r3, [r7, #0]
 800dfac:	687e      	ldr	r6, [r7, #4]
 800dfae:	466d      	mov	r5, sp
 800dfb0:	f106 0410 	add.w	r4, r6, #16
 800dfb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dfb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dfb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dfba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dfbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dfc0:	e885 0003 	stmia.w	r5, {r0, r1}
 800dfc4:	1d33      	adds	r3, r6, #4
 800dfc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dfc8:	6838      	ldr	r0, [r7, #0]
 800dfca:	f007 f875 	bl	80150b8 <USB_DevInit>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d005      	beq.n	800dfe0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2202      	movs	r2, #2
 800dfd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	e014      	b.n	800e00a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2201      	movs	r2, #1
 800dfec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d102      	bne.n	800dffe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f001 f881 	bl	800f100 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4618      	mov	r0, r3
 800e004:	f008 f8fd 	bl	8016202 <USB_DevDisconnect>

  return HAL_OK;
 800e008:	2300      	movs	r3, #0
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3714      	adds	r7, #20
 800e00e:	46bd      	mov	sp, r7
 800e010:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e012 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800e012:	b580      	push	{r7, lr}
 800e014:	b084      	sub	sp, #16
 800e016:	af00      	add	r7, sp, #0
 800e018:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e026:	2b01      	cmp	r3, #1
 800e028:	d101      	bne.n	800e02e <HAL_PCD_Start+0x1c>
 800e02a:	2302      	movs	r3, #2
 800e02c:	e01c      	b.n	800e068 <HAL_PCD_Start+0x56>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2201      	movs	r2, #1
 800e032:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d105      	bne.n	800e04a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e042:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4618      	mov	r0, r3
 800e050:	f006 ffc4 	bl	8014fdc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4618      	mov	r0, r3
 800e05a:	f008 f8b1 	bl	80161c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2200      	movs	r2, #0
 800e062:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800e066:	2300      	movs	r3, #0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3710      	adds	r7, #16
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800e070:	b590      	push	{r4, r7, lr}
 800e072:	b08d      	sub	sp, #52	; 0x34
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e07e:	6a3b      	ldr	r3, [r7, #32]
 800e080:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4618      	mov	r0, r3
 800e088:	f008 f96f 	bl	801636a <USB_GetMode>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	f040 847e 	bne.w	800e990 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4618      	mov	r0, r3
 800e09a:	f008 f8d3 	bl	8016244 <USB_ReadInterrupts>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	f000 8474 	beq.w	800e98e <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	0a1b      	lsrs	r3, r3, #8
 800e0b0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f008 f8c0 	bl	8016244 <USB_ReadInterrupts>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	f003 0302 	and.w	r3, r3, #2
 800e0ca:	2b02      	cmp	r3, #2
 800e0cc:	d107      	bne.n	800e0de <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	695a      	ldr	r2, [r3, #20]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f002 0202 	and.w	r2, r2, #2
 800e0dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f008 f8ae 	bl	8016244 <USB_ReadInterrupts>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	f003 0310 	and.w	r3, r3, #16
 800e0ee:	2b10      	cmp	r3, #16
 800e0f0:	d161      	bne.n	800e1b6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	699a      	ldr	r2, [r3, #24]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f022 0210 	bic.w	r2, r2, #16
 800e100:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800e102:	6a3b      	ldr	r3, [r7, #32]
 800e104:	6a1b      	ldr	r3, [r3, #32]
 800e106:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800e108:	69bb      	ldr	r3, [r7, #24]
 800e10a:	f003 020f 	and.w	r2, r3, #15
 800e10e:	4613      	mov	r3, r2
 800e110:	00db      	lsls	r3, r3, #3
 800e112:	4413      	add	r3, r2
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	4413      	add	r3, r2
 800e11e:	3304      	adds	r3, #4
 800e120:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	0c5b      	lsrs	r3, r3, #17
 800e126:	f003 030f 	and.w	r3, r3, #15
 800e12a:	2b02      	cmp	r3, #2
 800e12c:	d124      	bne.n	800e178 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800e12e:	69ba      	ldr	r2, [r7, #24]
 800e130:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800e134:	4013      	ands	r3, r2
 800e136:	2b00      	cmp	r3, #0
 800e138:	d035      	beq.n	800e1a6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	091b      	lsrs	r3, r3, #4
 800e142:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e144:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e148:	b29b      	uxth	r3, r3
 800e14a:	461a      	mov	r2, r3
 800e14c:	6a38      	ldr	r0, [r7, #32]
 800e14e:	f007 fee5 	bl	8015f1c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	691a      	ldr	r2, [r3, #16]
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	091b      	lsrs	r3, r3, #4
 800e15a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e15e:	441a      	add	r2, r3
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	6a1a      	ldr	r2, [r3, #32]
 800e168:	69bb      	ldr	r3, [r7, #24]
 800e16a:	091b      	lsrs	r3, r3, #4
 800e16c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e170:	441a      	add	r2, r3
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	621a      	str	r2, [r3, #32]
 800e176:	e016      	b.n	800e1a6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	0c5b      	lsrs	r3, r3, #17
 800e17c:	f003 030f 	and.w	r3, r3, #15
 800e180:	2b06      	cmp	r3, #6
 800e182:	d110      	bne.n	800e1a6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e18a:	2208      	movs	r2, #8
 800e18c:	4619      	mov	r1, r3
 800e18e:	6a38      	ldr	r0, [r7, #32]
 800e190:	f007 fec4 	bl	8015f1c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	6a1a      	ldr	r2, [r3, #32]
 800e198:	69bb      	ldr	r3, [r7, #24]
 800e19a:	091b      	lsrs	r3, r3, #4
 800e19c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1a0:	441a      	add	r2, r3
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	699a      	ldr	r2, [r3, #24]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f042 0210 	orr.w	r2, r2, #16
 800e1b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f008 f842 	bl	8016244 <USB_ReadInterrupts>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e1c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e1ca:	f040 80a7 	bne.w	800e31c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f008 f847 	bl	801626a <USB_ReadDevAllOutEpInterrupt>
 800e1dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800e1de:	e099      	b.n	800e314 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800e1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e2:	f003 0301 	and.w	r3, r3, #1
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	f000 808e 	beq.w	800e308 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1f2:	b2d2      	uxtb	r2, r2
 800e1f4:	4611      	mov	r1, r2
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f008 f86b 	bl	80162d2 <USB_ReadDevOutEPInterrupt>
 800e1fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	f003 0301 	and.w	r3, r3, #1
 800e204:	2b00      	cmp	r3, #0
 800e206:	d00c      	beq.n	800e222 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800e208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20a:	015a      	lsls	r2, r3, #5
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	4413      	add	r3, r2
 800e210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e214:	461a      	mov	r2, r3
 800e216:	2301      	movs	r3, #1
 800e218:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800e21a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f000 fe95 	bl	800ef4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	f003 0308 	and.w	r3, r3, #8
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00c      	beq.n	800e246 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800e22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22e:	015a      	lsls	r2, r3, #5
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	4413      	add	r3, r2
 800e234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e238:	461a      	mov	r2, r3
 800e23a:	2308      	movs	r3, #8
 800e23c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800e23e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 fed1 	bl	800efe8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	f003 0310 	and.w	r3, r3, #16
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d008      	beq.n	800e262 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800e250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e252:	015a      	lsls	r2, r3, #5
 800e254:	69fb      	ldr	r3, [r7, #28]
 800e256:	4413      	add	r3, r2
 800e258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e25c:	461a      	mov	r2, r3
 800e25e:	2310      	movs	r3, #16
 800e260:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	f003 0302 	and.w	r3, r3, #2
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d030      	beq.n	800e2ce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800e26c:	6a3b      	ldr	r3, [r7, #32]
 800e26e:	695b      	ldr	r3, [r3, #20]
 800e270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e274:	2b80      	cmp	r3, #128	; 0x80
 800e276:	d109      	bne.n	800e28c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	69fa      	ldr	r2, [r7, #28]
 800e282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e28a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800e28c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e28e:	4613      	mov	r3, r2
 800e290:	00db      	lsls	r3, r3, #3
 800e292:	4413      	add	r3, r2
 800e294:	009b      	lsls	r3, r3, #2
 800e296:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e29a:	687a      	ldr	r2, [r7, #4]
 800e29c:	4413      	add	r3, r2
 800e29e:	3304      	adds	r3, #4
 800e2a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	78db      	ldrb	r3, [r3, #3]
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	d108      	bne.n	800e2bc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800e2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b2:	b2db      	uxtb	r3, r3
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f00a f8a8 	bl	801840c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800e2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2be:	015a      	lsls	r2, r3, #5
 800e2c0:	69fb      	ldr	r3, [r7, #28]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	2302      	movs	r3, #2
 800e2cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	f003 0320 	and.w	r3, r3, #32
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d008      	beq.n	800e2ea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2da:	015a      	lsls	r2, r3, #5
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	4413      	add	r3, r2
 800e2e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	2320      	movs	r3, #32
 800e2e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d009      	beq.n	800e308 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800e2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f6:	015a      	lsls	r2, r3, #5
 800e2f8:	69fb      	ldr	r3, [r7, #28]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e300:	461a      	mov	r2, r3
 800e302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e306:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800e308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30a:	3301      	adds	r3, #1
 800e30c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e310:	085b      	lsrs	r3, r3, #1
 800e312:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e316:	2b00      	cmp	r3, #0
 800e318:	f47f af62 	bne.w	800e1e0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4618      	mov	r0, r3
 800e322:	f007 ff8f 	bl	8016244 <USB_ReadInterrupts>
 800e326:	4603      	mov	r3, r0
 800e328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e32c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e330:	f040 80a4 	bne.w	800e47c <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4618      	mov	r0, r3
 800e33a:	f007 ffb0 	bl	801629e <USB_ReadDevAllInEpInterrupt>
 800e33e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800e340:	2300      	movs	r3, #0
 800e342:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800e344:	e096      	b.n	800e474 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800e346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e348:	f003 0301 	and.w	r3, r3, #1
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f000 808b 	beq.w	800e468 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e358:	b2d2      	uxtb	r2, r2
 800e35a:	4611      	mov	r1, r2
 800e35c:	4618      	mov	r0, r3
 800e35e:	f007 ffd6 	bl	801630e <USB_ReadDevInEPInterrupt>
 800e362:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	f003 0301 	and.w	r3, r3, #1
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d020      	beq.n	800e3b0 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e370:	f003 030f 	and.w	r3, r3, #15
 800e374:	2201      	movs	r2, #1
 800e376:	fa02 f303 	lsl.w	r3, r2, r3
 800e37a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	43db      	mvns	r3, r3
 800e388:	69f9      	ldr	r1, [r7, #28]
 800e38a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e38e:	4013      	ands	r3, r2
 800e390:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800e392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e394:	015a      	lsls	r2, r3, #5
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	4413      	add	r3, r2
 800e39a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e39e:	461a      	mov	r2, r3
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f009 ff99 	bl	80182e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	f003 0308 	and.w	r3, r3, #8
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d008      	beq.n	800e3cc <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800e3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3bc:	015a      	lsls	r2, r3, #5
 800e3be:	69fb      	ldr	r3, [r7, #28]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	2308      	movs	r3, #8
 800e3ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	f003 0310 	and.w	r3, r3, #16
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d008      	beq.n	800e3e8 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800e3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d8:	015a      	lsls	r2, r3, #5
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	4413      	add	r3, r2
 800e3de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	2310      	movs	r3, #16
 800e3e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d008      	beq.n	800e404 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800e3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f4:	015a      	lsls	r2, r3, #5
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3fe:	461a      	mov	r2, r3
 800e400:	2340      	movs	r3, #64	; 0x40
 800e402:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	f003 0302 	and.w	r3, r3, #2
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d023      	beq.n	800e456 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800e40e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e410:	6a38      	ldr	r0, [r7, #32]
 800e412:	f006 ff9d 	bl	8015350 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800e416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e418:	4613      	mov	r3, r2
 800e41a:	00db      	lsls	r3, r3, #3
 800e41c:	4413      	add	r3, r2
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	3338      	adds	r3, #56	; 0x38
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	4413      	add	r3, r2
 800e426:	3304      	adds	r3, #4
 800e428:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	78db      	ldrb	r3, [r3, #3]
 800e42e:	2b01      	cmp	r3, #1
 800e430:	d108      	bne.n	800e444 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	2200      	movs	r2, #0
 800e436:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800e438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	4619      	mov	r1, r3
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f009 fff6 	bl	8018430 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800e444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e446:	015a      	lsls	r2, r3, #5
 800e448:	69fb      	ldr	r3, [r7, #28]
 800e44a:	4413      	add	r3, r2
 800e44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e450:	461a      	mov	r2, r3
 800e452:	2302      	movs	r3, #2
 800e454:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d003      	beq.n	800e468 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800e460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 fcea 	bl	800ee3c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800e468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46a:	3301      	adds	r3, #1
 800e46c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e470:	085b      	lsrs	r3, r3, #1
 800e472:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e476:	2b00      	cmp	r3, #0
 800e478:	f47f af65 	bne.w	800e346 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4618      	mov	r0, r3
 800e482:	f007 fedf 	bl	8016244 <USB_ReadInterrupts>
 800e486:	4603      	mov	r3, r0
 800e488:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e48c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e490:	d122      	bne.n	800e4d8 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e492:	69fb      	ldr	r3, [r7, #28]
 800e494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	69fa      	ldr	r2, [r7, #28]
 800e49c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e4a0:	f023 0301 	bic.w	r3, r3, #1
 800e4a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d108      	bne.n	800e4c2 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f00a fa2a 	bl	8018914 <HAL_PCDEx_LPM_Callback>
 800e4c0:	e002      	b.n	800e4c8 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f009 ff7a 	bl	80183bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	695a      	ldr	r2, [r3, #20]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e4d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f007 feb1 	bl	8016244 <USB_ReadInterrupts>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e4e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e4ec:	d112      	bne.n	800e514 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4f4:	689b      	ldr	r3, [r3, #8]
 800e4f6:	f003 0301 	and.w	r3, r3, #1
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d102      	bne.n	800e504 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f009 ff36 	bl	8018370 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	695a      	ldr	r2, [r3, #20]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800e512:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	4618      	mov	r0, r3
 800e51a:	f007 fe93 	bl	8016244 <USB_ReadInterrupts>
 800e51e:	4603      	mov	r3, r0
 800e520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e528:	d121      	bne.n	800e56e <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	695a      	ldr	r2, [r3, #20]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800e538:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e540:	2b00      	cmp	r3, #0
 800e542:	d111      	bne.n	800e568 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2201      	movs	r2, #1
 800e548:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e552:	089b      	lsrs	r3, r3, #2
 800e554:	f003 020f 	and.w	r2, r3, #15
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800e55e:	2101      	movs	r1, #1
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f00a f9d7 	bl	8018914 <HAL_PCDEx_LPM_Callback>
 800e566:	e002      	b.n	800e56e <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f009 ff01 	bl	8018370 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4618      	mov	r0, r3
 800e574:	f007 fe66 	bl	8016244 <USB_ReadInterrupts>
 800e578:	4603      	mov	r3, r0
 800e57a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e57e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e582:	f040 80b5 	bne.w	800e6f0 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e586:	69fb      	ldr	r3, [r7, #28]
 800e588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	69fa      	ldr	r2, [r7, #28]
 800e590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e594:	f023 0301 	bic.w	r3, r3, #1
 800e598:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2110      	movs	r1, #16
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f006 fed5 	bl	8015350 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5aa:	e046      	b.n	800e63a <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ae:	015a      	lsls	r2, r3, #5
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e5be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c2:	015a      	lsls	r2, r3, #5
 800e5c4:	69fb      	ldr	r3, [r7, #28]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5d0:	0151      	lsls	r1, r2, #5
 800e5d2:	69fa      	ldr	r2, [r7, #28]
 800e5d4:	440a      	add	r2, r1
 800e5d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e5de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e2:	015a      	lsls	r2, r3, #5
 800e5e4:	69fb      	ldr	r3, [r7, #28]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e5f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f6:	015a      	lsls	r2, r3, #5
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	4413      	add	r3, r2
 800e5fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e604:	0151      	lsls	r1, r2, #5
 800e606:	69fa      	ldr	r2, [r7, #28]
 800e608:	440a      	add	r2, r1
 800e60a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e60e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e612:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e616:	015a      	lsls	r2, r3, #5
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	4413      	add	r3, r2
 800e61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e624:	0151      	lsls	r1, r2, #5
 800e626:	69fa      	ldr	r2, [r7, #28]
 800e628:	440a      	add	r2, r1
 800e62a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e62e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e632:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e636:	3301      	adds	r3, #1
 800e638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e640:	429a      	cmp	r2, r3
 800e642:	d3b3      	bcc.n	800e5ac <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e644:	69fb      	ldr	r3, [r7, #28]
 800e646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e64a:	69db      	ldr	r3, [r3, #28]
 800e64c:	69fa      	ldr	r2, [r7, #28]
 800e64e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e652:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800e656:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d016      	beq.n	800e68e <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e66a:	69fa      	ldr	r2, [r7, #28]
 800e66c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e670:	f043 030b 	orr.w	r3, r3, #11
 800e674:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e67e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e680:	69fa      	ldr	r2, [r7, #28]
 800e682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e686:	f043 030b 	orr.w	r3, r3, #11
 800e68a:	6453      	str	r3, [r2, #68]	; 0x44
 800e68c:	e015      	b.n	800e6ba <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800e68e:	69fb      	ldr	r3, [r7, #28]
 800e690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e694:	695b      	ldr	r3, [r3, #20]
 800e696:	69fa      	ldr	r2, [r7, #28]
 800e698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e69c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e6a0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800e6a4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ac:	691b      	ldr	r3, [r3, #16]
 800e6ae:	69fa      	ldr	r2, [r7, #28]
 800e6b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6b4:	f043 030b 	orr.w	r3, r3, #11
 800e6b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e6ba:	69fb      	ldr	r3, [r7, #28]
 800e6bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	69fa      	ldr	r2, [r7, #28]
 800e6c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e6cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e6d8:	4619      	mov	r1, r3
 800e6da:	4610      	mov	r0, r2
 800e6dc:	f007 fe76 	bl	80163cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	695a      	ldr	r2, [r3, #20]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800e6ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f007 fda5 	bl	8016244 <USB_ReadInterrupts>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e704:	d124      	bne.n	800e750 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4618      	mov	r0, r3
 800e70c:	f007 fe3b 	bl	8016386 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4618      	mov	r0, r3
 800e716:	f006 fe98 	bl	801544a <USB_GetDevSpeed>
 800e71a:	4603      	mov	r3, r0
 800e71c:	461a      	mov	r2, r3
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681c      	ldr	r4, [r3, #0]
 800e726:	f001 fc87 	bl	8010038 <HAL_RCC_GetHCLKFreq>
 800e72a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e730:	b2db      	uxtb	r3, r3
 800e732:	461a      	mov	r2, r3
 800e734:	4620      	mov	r0, r4
 800e736:	f006 fbb5 	bl	8014ea4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f009 fdf9 	bl	8018332 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	695a      	ldr	r2, [r3, #20]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800e74e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4618      	mov	r0, r3
 800e756:	f007 fd75 	bl	8016244 <USB_ReadInterrupts>
 800e75a:	4603      	mov	r3, r0
 800e75c:	f003 0308 	and.w	r3, r3, #8
 800e760:	2b08      	cmp	r3, #8
 800e762:	d10a      	bne.n	800e77a <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f009 fdd6 	bl	8018316 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	695a      	ldr	r2, [r3, #20]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f002 0208 	and.w	r2, r2, #8
 800e778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4618      	mov	r0, r3
 800e780:	f007 fd60 	bl	8016244 <USB_ReadInterrupts>
 800e784:	4603      	mov	r3, r0
 800e786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e78a:	2b80      	cmp	r3, #128	; 0x80
 800e78c:	d122      	bne.n	800e7d4 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800e78e:	6a3b      	ldr	r3, [r7, #32]
 800e790:	699b      	ldr	r3, [r3, #24]
 800e792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e796:	6a3b      	ldr	r3, [r7, #32]
 800e798:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e79a:	2301      	movs	r3, #1
 800e79c:	627b      	str	r3, [r7, #36]	; 0x24
 800e79e:	e014      	b.n	800e7ca <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800e7a0:	6879      	ldr	r1, [r7, #4]
 800e7a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7a4:	4613      	mov	r3, r2
 800e7a6:	00db      	lsls	r3, r3, #3
 800e7a8:	4413      	add	r3, r2
 800e7aa:	009b      	lsls	r3, r3, #2
 800e7ac:	440b      	add	r3, r1
 800e7ae:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800e7b2:	781b      	ldrb	r3, [r3, #0]
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d105      	bne.n	800e7c4 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800e7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	4619      	mov	r1, r3
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 fb0b 	bl	800edda <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d3e5      	bcc.n	800e7a0 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f007 fd33 	bl	8016244 <USB_ReadInterrupts>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e7e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e7e8:	d13b      	bne.n	800e862 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	627b      	str	r3, [r7, #36]	; 0x24
 800e7ee:	e02b      	b.n	800e848 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800e7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f2:	015a      	lsls	r2, r3, #5
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e800:	6879      	ldr	r1, [r7, #4]
 800e802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e804:	4613      	mov	r3, r2
 800e806:	00db      	lsls	r3, r3, #3
 800e808:	4413      	add	r3, r2
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	440b      	add	r3, r1
 800e80e:	3340      	adds	r3, #64	; 0x40
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	2b01      	cmp	r3, #1
 800e814:	d115      	bne.n	800e842 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800e816:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e818:	2b00      	cmp	r3, #0
 800e81a:	da12      	bge.n	800e842 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800e81c:	6879      	ldr	r1, [r7, #4]
 800e81e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e820:	4613      	mov	r3, r2
 800e822:	00db      	lsls	r3, r3, #3
 800e824:	4413      	add	r3, r2
 800e826:	009b      	lsls	r3, r3, #2
 800e828:	440b      	add	r3, r1
 800e82a:	333f      	adds	r3, #63	; 0x3f
 800e82c:	2201      	movs	r2, #1
 800e82e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800e830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e832:	b2db      	uxtb	r3, r3
 800e834:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	4619      	mov	r1, r3
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f000 facc 	bl	800edda <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e844:	3301      	adds	r3, #1
 800e846:	627b      	str	r3, [r7, #36]	; 0x24
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e84e:	429a      	cmp	r2, r3
 800e850:	d3ce      	bcc.n	800e7f0 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	695a      	ldr	r2, [r3, #20]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800e860:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4618      	mov	r0, r3
 800e868:	f007 fcec 	bl	8016244 <USB_ReadInterrupts>
 800e86c:	4603      	mov	r3, r0
 800e86e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e872:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e876:	d155      	bne.n	800e924 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e878:	2301      	movs	r3, #1
 800e87a:	627b      	str	r3, [r7, #36]	; 0x24
 800e87c:	e045      	b.n	800e90a <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800e87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e880:	015a      	lsls	r2, r3, #5
 800e882:	69fb      	ldr	r3, [r7, #28]
 800e884:	4413      	add	r3, r2
 800e886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e88e:	6879      	ldr	r1, [r7, #4]
 800e890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e892:	4613      	mov	r3, r2
 800e894:	00db      	lsls	r3, r3, #3
 800e896:	4413      	add	r3, r2
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	440b      	add	r3, r1
 800e89c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d12e      	bne.n	800e904 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e8a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	da2b      	bge.n	800e904 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800e8b8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d121      	bne.n	800e904 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800e8c0:	6879      	ldr	r1, [r7, #4]
 800e8c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8c4:	4613      	mov	r3, r2
 800e8c6:	00db      	lsls	r3, r3, #3
 800e8c8:	4413      	add	r3, r2
 800e8ca:	009b      	lsls	r3, r3, #2
 800e8cc:	440b      	add	r3, r1
 800e8ce:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800e8d6:	6a3b      	ldr	r3, [r7, #32]
 800e8d8:	699b      	ldr	r3, [r3, #24]
 800e8da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e8de:	6a3b      	ldr	r3, [r7, #32]
 800e8e0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800e8e2:	6a3b      	ldr	r3, [r7, #32]
 800e8e4:	695b      	ldr	r3, [r3, #20]
 800e8e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d10a      	bne.n	800e904 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	69fa      	ldr	r2, [r7, #28]
 800e8f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e8fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e900:	6053      	str	r3, [r2, #4]
            break;
 800e902:	e007      	b.n	800e914 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e906:	3301      	adds	r3, #1
 800e908:	627b      	str	r3, [r7, #36]	; 0x24
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e910:	429a      	cmp	r2, r3
 800e912:	d3b4      	bcc.n	800e87e <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	695a      	ldr	r2, [r3, #20]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800e922:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	4618      	mov	r0, r3
 800e92a:	f007 fc8b 	bl	8016244 <USB_ReadInterrupts>
 800e92e:	4603      	mov	r3, r0
 800e930:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e938:	d10a      	bne.n	800e950 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f009 fd8a 	bl	8018454 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	695a      	ldr	r2, [r3, #20]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800e94e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	4618      	mov	r0, r3
 800e956:	f007 fc75 	bl	8016244 <USB_ReadInterrupts>
 800e95a:	4603      	mov	r3, r0
 800e95c:	f003 0304 	and.w	r3, r3, #4
 800e960:	2b04      	cmp	r3, #4
 800e962:	d115      	bne.n	800e990 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800e96c:	69bb      	ldr	r3, [r7, #24]
 800e96e:	f003 0304 	and.w	r3, r3, #4
 800e972:	2b00      	cmp	r3, #0
 800e974:	d002      	beq.n	800e97c <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f009 fd7a 	bl	8018470 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	6859      	ldr	r1, [r3, #4]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	69ba      	ldr	r2, [r7, #24]
 800e988:	430a      	orrs	r2, r1
 800e98a:	605a      	str	r2, [r3, #4]
 800e98c:	e000      	b.n	800e990 <HAL_PCD_IRQHandler+0x920>
      return;
 800e98e:	bf00      	nop
    }
  }
}
 800e990:	3734      	adds	r7, #52	; 0x34
 800e992:	46bd      	mov	sp, r7
 800e994:	bd90      	pop	{r4, r7, pc}

0800e996 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e996:	b580      	push	{r7, lr}
 800e998:	b082      	sub	sp, #8
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	6078      	str	r0, [r7, #4]
 800e99e:	460b      	mov	r3, r1
 800e9a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d101      	bne.n	800e9b0 <HAL_PCD_SetAddress+0x1a>
 800e9ac:	2302      	movs	r3, #2
 800e9ae:	e013      	b.n	800e9d8 <HAL_PCD_SetAddress+0x42>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	78fa      	ldrb	r2, [r7, #3]
 800e9bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	78fa      	ldrb	r2, [r7, #3]
 800e9c6:	4611      	mov	r1, r2
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f007 fbd3 	bl	8016174 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800e9d6:	2300      	movs	r3, #0
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3708      	adds	r7, #8
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	4608      	mov	r0, r1
 800e9ea:	4611      	mov	r1, r2
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	70fb      	strb	r3, [r7, #3]
 800e9f2:	460b      	mov	r3, r1
 800e9f4:	803b      	strh	r3, [r7, #0]
 800e9f6:	4613      	mov	r3, r2
 800e9f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e9fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	da0f      	bge.n	800ea26 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ea06:	78fb      	ldrb	r3, [r7, #3]
 800ea08:	f003 020f 	and.w	r2, r3, #15
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	00db      	lsls	r3, r3, #3
 800ea10:	4413      	add	r3, r2
 800ea12:	009b      	lsls	r3, r3, #2
 800ea14:	3338      	adds	r3, #56	; 0x38
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	4413      	add	r3, r2
 800ea1a:	3304      	adds	r3, #4
 800ea1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2201      	movs	r2, #1
 800ea22:	705a      	strb	r2, [r3, #1]
 800ea24:	e00f      	b.n	800ea46 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ea26:	78fb      	ldrb	r3, [r7, #3]
 800ea28:	f003 020f 	and.w	r2, r3, #15
 800ea2c:	4613      	mov	r3, r2
 800ea2e:	00db      	lsls	r3, r3, #3
 800ea30:	4413      	add	r3, r2
 800ea32:	009b      	lsls	r3, r3, #2
 800ea34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	4413      	add	r3, r2
 800ea3c:	3304      	adds	r3, #4
 800ea3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2200      	movs	r2, #0
 800ea44:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ea46:	78fb      	ldrb	r3, [r7, #3]
 800ea48:	f003 030f 	and.w	r3, r3, #15
 800ea4c:	b2da      	uxtb	r2, r3
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ea52:	883a      	ldrh	r2, [r7, #0]
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	78ba      	ldrb	r2, [r7, #2]
 800ea5c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	785b      	ldrb	r3, [r3, #1]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d004      	beq.n	800ea70 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ea70:	78bb      	ldrb	r3, [r7, #2]
 800ea72:	2b02      	cmp	r3, #2
 800ea74:	d102      	bne.n	800ea7c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d101      	bne.n	800ea8a <HAL_PCD_EP_Open+0xaa>
 800ea86:	2302      	movs	r3, #2
 800ea88:	e00e      	b.n	800eaa8 <HAL_PCD_EP_Open+0xc8>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	68f9      	ldr	r1, [r7, #12]
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f006 fcf5 	bl	8015488 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800eaa6:	7afb      	ldrb	r3, [r7, #11]
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3710      	adds	r7, #16
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	460b      	mov	r3, r1
 800eaba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800eabc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	da0f      	bge.n	800eae4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800eac4:	78fb      	ldrb	r3, [r7, #3]
 800eac6:	f003 020f 	and.w	r2, r3, #15
 800eaca:	4613      	mov	r3, r2
 800eacc:	00db      	lsls	r3, r3, #3
 800eace:	4413      	add	r3, r2
 800ead0:	009b      	lsls	r3, r3, #2
 800ead2:	3338      	adds	r3, #56	; 0x38
 800ead4:	687a      	ldr	r2, [r7, #4]
 800ead6:	4413      	add	r3, r2
 800ead8:	3304      	adds	r3, #4
 800eada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2201      	movs	r2, #1
 800eae0:	705a      	strb	r2, [r3, #1]
 800eae2:	e00f      	b.n	800eb04 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eae4:	78fb      	ldrb	r3, [r7, #3]
 800eae6:	f003 020f 	and.w	r2, r3, #15
 800eaea:	4613      	mov	r3, r2
 800eaec:	00db      	lsls	r3, r3, #3
 800eaee:	4413      	add	r3, r2
 800eaf0:	009b      	lsls	r3, r3, #2
 800eaf2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	4413      	add	r3, r2
 800eafa:	3304      	adds	r3, #4
 800eafc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2200      	movs	r2, #0
 800eb02:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800eb04:	78fb      	ldrb	r3, [r7, #3]
 800eb06:	f003 030f 	and.w	r3, r3, #15
 800eb0a:	b2da      	uxtb	r2, r3
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800eb16:	2b01      	cmp	r3, #1
 800eb18:	d101      	bne.n	800eb1e <HAL_PCD_EP_Close+0x6e>
 800eb1a:	2302      	movs	r3, #2
 800eb1c:	e00e      	b.n	800eb3c <HAL_PCD_EP_Close+0x8c>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2201      	movs	r2, #1
 800eb22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	68f9      	ldr	r1, [r7, #12]
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f006 fd33 	bl	8015598 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2200      	movs	r2, #0
 800eb36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800eb3a:	2300      	movs	r3, #0
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3710      	adds	r7, #16
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b086      	sub	sp, #24
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	60f8      	str	r0, [r7, #12]
 800eb4c:	607a      	str	r2, [r7, #4]
 800eb4e:	603b      	str	r3, [r7, #0]
 800eb50:	460b      	mov	r3, r1
 800eb52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eb54:	7afb      	ldrb	r3, [r7, #11]
 800eb56:	f003 020f 	and.w	r2, r3, #15
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	00db      	lsls	r3, r3, #3
 800eb5e:	4413      	add	r3, r2
 800eb60:	009b      	lsls	r3, r3, #2
 800eb62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	4413      	add	r3, r2
 800eb6a:	3304      	adds	r3, #4
 800eb6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	687a      	ldr	r2, [r7, #4]
 800eb72:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	683a      	ldr	r2, [r7, #0]
 800eb78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	2200      	movs	r2, #0
 800eb84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800eb86:	7afb      	ldrb	r3, [r7, #11]
 800eb88:	f003 030f 	and.w	r3, r3, #15
 800eb8c:	b2da      	uxtb	r2, r3
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800eb92:	7afb      	ldrb	r3, [r7, #11]
 800eb94:	f003 030f 	and.w	r3, r3, #15
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d106      	bne.n	800ebaa <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	6979      	ldr	r1, [r7, #20]
 800eba2:	4618      	mov	r0, r3
 800eba4:	f006 ffb4 	bl	8015b10 <USB_EP0StartXfer>
 800eba8:	e005      	b.n	800ebb6 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	6979      	ldr	r1, [r7, #20]
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f006 fdcd 	bl	8015750 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ebb6:	2300      	movs	r3, #0
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3718      	adds	r7, #24
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b083      	sub	sp, #12
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	460b      	mov	r3, r1
 800ebca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ebcc:	78fb      	ldrb	r3, [r7, #3]
 800ebce:	f003 020f 	and.w	r2, r3, #15
 800ebd2:	6879      	ldr	r1, [r7, #4]
 800ebd4:	4613      	mov	r3, r2
 800ebd6:	00db      	lsls	r3, r3, #3
 800ebd8:	4413      	add	r3, r2
 800ebda:	009b      	lsls	r3, r3, #2
 800ebdc:	440b      	add	r3, r1
 800ebde:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800ebe2:	681b      	ldr	r3, [r3, #0]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b086      	sub	sp, #24
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	60f8      	str	r0, [r7, #12]
 800ebf8:	607a      	str	r2, [r7, #4]
 800ebfa:	603b      	str	r3, [r7, #0]
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ec00:	7afb      	ldrb	r3, [r7, #11]
 800ec02:	f003 020f 	and.w	r2, r3, #15
 800ec06:	4613      	mov	r3, r2
 800ec08:	00db      	lsls	r3, r3, #3
 800ec0a:	4413      	add	r3, r2
 800ec0c:	009b      	lsls	r3, r3, #2
 800ec0e:	3338      	adds	r3, #56	; 0x38
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	4413      	add	r3, r2
 800ec14:	3304      	adds	r3, #4
 800ec16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	683a      	ldr	r2, [r7, #0]
 800ec22:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	2200      	movs	r2, #0
 800ec28:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	2201      	movs	r2, #1
 800ec2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ec30:	7afb      	ldrb	r3, [r7, #11]
 800ec32:	f003 030f 	and.w	r3, r3, #15
 800ec36:	b2da      	uxtb	r2, r3
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ec3c:	7afb      	ldrb	r3, [r7, #11]
 800ec3e:	f003 030f 	and.w	r3, r3, #15
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d106      	bne.n	800ec54 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	6979      	ldr	r1, [r7, #20]
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f006 ff5f 	bl	8015b10 <USB_EP0StartXfer>
 800ec52:	e005      	b.n	800ec60 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6979      	ldr	r1, [r7, #20]
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f006 fd78 	bl	8015750 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ec60:	2300      	movs	r3, #0
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3718      	adds	r7, #24
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}

0800ec6a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ec6a:	b580      	push	{r7, lr}
 800ec6c:	b084      	sub	sp, #16
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	6078      	str	r0, [r7, #4]
 800ec72:	460b      	mov	r3, r1
 800ec74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ec76:	78fb      	ldrb	r3, [r7, #3]
 800ec78:	f003 020f 	and.w	r2, r3, #15
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d901      	bls.n	800ec88 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ec84:	2301      	movs	r3, #1
 800ec86:	e04e      	b.n	800ed26 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ec88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	da0f      	bge.n	800ecb0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ec90:	78fb      	ldrb	r3, [r7, #3]
 800ec92:	f003 020f 	and.w	r2, r3, #15
 800ec96:	4613      	mov	r3, r2
 800ec98:	00db      	lsls	r3, r3, #3
 800ec9a:	4413      	add	r3, r2
 800ec9c:	009b      	lsls	r3, r3, #2
 800ec9e:	3338      	adds	r3, #56	; 0x38
 800eca0:	687a      	ldr	r2, [r7, #4]
 800eca2:	4413      	add	r3, r2
 800eca4:	3304      	adds	r3, #4
 800eca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2201      	movs	r2, #1
 800ecac:	705a      	strb	r2, [r3, #1]
 800ecae:	e00d      	b.n	800eccc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ecb0:	78fa      	ldrb	r2, [r7, #3]
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	00db      	lsls	r3, r3, #3
 800ecb6:	4413      	add	r3, r2
 800ecb8:	009b      	lsls	r3, r3, #2
 800ecba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ecbe:	687a      	ldr	r2, [r7, #4]
 800ecc0:	4413      	add	r3, r2
 800ecc2:	3304      	adds	r3, #4
 800ecc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2201      	movs	r2, #1
 800ecd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ecd2:	78fb      	ldrb	r3, [r7, #3]
 800ecd4:	f003 030f 	and.w	r3, r3, #15
 800ecd8:	b2da      	uxtb	r2, r3
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d101      	bne.n	800ecec <HAL_PCD_EP_SetStall+0x82>
 800ece8:	2302      	movs	r3, #2
 800ecea:	e01c      	b.n	800ed26 <HAL_PCD_EP_SetStall+0xbc>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	68f9      	ldr	r1, [r7, #12]
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f007 f966 	bl	8015fcc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ed00:	78fb      	ldrb	r3, [r7, #3]
 800ed02:	f003 030f 	and.w	r3, r3, #15
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d108      	bne.n	800ed1c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ed14:	4619      	mov	r1, r3
 800ed16:	4610      	mov	r0, r2
 800ed18:	f007 fb58 	bl	80163cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b084      	sub	sp, #16
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
 800ed36:	460b      	mov	r3, r1
 800ed38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ed3a:	78fb      	ldrb	r3, [r7, #3]
 800ed3c:	f003 020f 	and.w	r2, r3, #15
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d901      	bls.n	800ed4c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ed48:	2301      	movs	r3, #1
 800ed4a:	e042      	b.n	800edd2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ed4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	da0f      	bge.n	800ed74 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ed54:	78fb      	ldrb	r3, [r7, #3]
 800ed56:	f003 020f 	and.w	r2, r3, #15
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	00db      	lsls	r3, r3, #3
 800ed5e:	4413      	add	r3, r2
 800ed60:	009b      	lsls	r3, r3, #2
 800ed62:	3338      	adds	r3, #56	; 0x38
 800ed64:	687a      	ldr	r2, [r7, #4]
 800ed66:	4413      	add	r3, r2
 800ed68:	3304      	adds	r3, #4
 800ed6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2201      	movs	r2, #1
 800ed70:	705a      	strb	r2, [r3, #1]
 800ed72:	e00f      	b.n	800ed94 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ed74:	78fb      	ldrb	r3, [r7, #3]
 800ed76:	f003 020f 	and.w	r2, r3, #15
 800ed7a:	4613      	mov	r3, r2
 800ed7c:	00db      	lsls	r3, r3, #3
 800ed7e:	4413      	add	r3, r2
 800ed80:	009b      	lsls	r3, r3, #2
 800ed82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	4413      	add	r3, r2
 800ed8a:	3304      	adds	r3, #4
 800ed8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2200      	movs	r2, #0
 800ed92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2200      	movs	r2, #0
 800ed98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ed9a:	78fb      	ldrb	r3, [r7, #3]
 800ed9c:	f003 030f 	and.w	r3, r3, #15
 800eda0:	b2da      	uxtb	r2, r3
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800edac:	2b01      	cmp	r3, #1
 800edae:	d101      	bne.n	800edb4 <HAL_PCD_EP_ClrStall+0x86>
 800edb0:	2302      	movs	r3, #2
 800edb2:	e00e      	b.n	800edd2 <HAL_PCD_EP_ClrStall+0xa4>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2201      	movs	r2, #1
 800edb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	68f9      	ldr	r1, [r7, #12]
 800edc2:	4618      	mov	r0, r3
 800edc4:	f007 f970 	bl	80160a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2200      	movs	r2, #0
 800edcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800edd0:	2300      	movs	r3, #0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3710      	adds	r7, #16
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}

0800edda <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800edda:	b580      	push	{r7, lr}
 800eddc:	b084      	sub	sp, #16
 800edde:	af00      	add	r7, sp, #0
 800ede0:	6078      	str	r0, [r7, #4]
 800ede2:	460b      	mov	r3, r1
 800ede4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800ede6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800edea:	2b00      	cmp	r3, #0
 800edec:	da0c      	bge.n	800ee08 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800edee:	78fb      	ldrb	r3, [r7, #3]
 800edf0:	f003 020f 	and.w	r2, r3, #15
 800edf4:	4613      	mov	r3, r2
 800edf6:	00db      	lsls	r3, r3, #3
 800edf8:	4413      	add	r3, r2
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	3338      	adds	r3, #56	; 0x38
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	4413      	add	r3, r2
 800ee02:	3304      	adds	r3, #4
 800ee04:	60fb      	str	r3, [r7, #12]
 800ee06:	e00c      	b.n	800ee22 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ee08:	78fb      	ldrb	r3, [r7, #3]
 800ee0a:	f003 020f 	and.w	r2, r3, #15
 800ee0e:	4613      	mov	r3, r2
 800ee10:	00db      	lsls	r3, r3, #3
 800ee12:	4413      	add	r3, r2
 800ee14:	009b      	lsls	r3, r3, #2
 800ee16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ee1a:	687a      	ldr	r2, [r7, #4]
 800ee1c:	4413      	add	r3, r2
 800ee1e:	3304      	adds	r3, #4
 800ee20:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	68f9      	ldr	r1, [r7, #12]
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f006 ff93 	bl	8015d54 <USB_EPStopXfer>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	72fb      	strb	r3, [r7, #11]

  return ret;
 800ee32:	7afb      	ldrb	r3, [r7, #11]
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3710      	adds	r7, #16
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}

0800ee3c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b088      	sub	sp, #32
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
 800ee44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ee50:	683a      	ldr	r2, [r7, #0]
 800ee52:	4613      	mov	r3, r2
 800ee54:	00db      	lsls	r3, r3, #3
 800ee56:	4413      	add	r3, r2
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	3338      	adds	r3, #56	; 0x38
 800ee5c:	687a      	ldr	r2, [r7, #4]
 800ee5e:	4413      	add	r3, r2
 800ee60:	3304      	adds	r3, #4
 800ee62:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	6a1a      	ldr	r2, [r3, #32]
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	699b      	ldr	r3, [r3, #24]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d901      	bls.n	800ee74 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ee70:	2301      	movs	r3, #1
 800ee72:	e067      	b.n	800ef44 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	699a      	ldr	r2, [r3, #24]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	6a1b      	ldr	r3, [r3, #32]
 800ee7c:	1ad3      	subs	r3, r2, r3
 800ee7e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	68db      	ldr	r3, [r3, #12]
 800ee84:	69fa      	ldr	r2, [r7, #28]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d902      	bls.n	800ee90 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	68db      	ldr	r3, [r3, #12]
 800ee8e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ee90:	69fb      	ldr	r3, [r7, #28]
 800ee92:	3303      	adds	r3, #3
 800ee94:	089b      	lsrs	r3, r3, #2
 800ee96:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ee98:	e026      	b.n	800eee8 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	699a      	ldr	r2, [r3, #24]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	6a1b      	ldr	r3, [r3, #32]
 800eea2:	1ad3      	subs	r3, r2, r3
 800eea4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	68db      	ldr	r3, [r3, #12]
 800eeaa:	69fa      	ldr	r2, [r7, #28]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d902      	bls.n	800eeb6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	68db      	ldr	r3, [r3, #12]
 800eeb4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800eeb6:	69fb      	ldr	r3, [r7, #28]
 800eeb8:	3303      	adds	r3, #3
 800eeba:	089b      	lsrs	r3, r3, #2
 800eebc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	6919      	ldr	r1, [r3, #16]
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	b2da      	uxtb	r2, r3
 800eec6:	69fb      	ldr	r3, [r7, #28]
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	6978      	ldr	r0, [r7, #20]
 800eecc:	f006 ffec 	bl	8015ea8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	691a      	ldr	r2, [r3, #16]
 800eed4:	69fb      	ldr	r3, [r7, #28]
 800eed6:	441a      	add	r2, r3
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	6a1a      	ldr	r2, [r3, #32]
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	441a      	add	r2, r3
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	015a      	lsls	r2, r3, #5
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	4413      	add	r3, r2
 800eef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eef4:	699b      	ldr	r3, [r3, #24]
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	69ba      	ldr	r2, [r7, #24]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d809      	bhi.n	800ef12 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	6a1a      	ldr	r2, [r3, #32]
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d203      	bcs.n	800ef12 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	699b      	ldr	r3, [r3, #24]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1c3      	bne.n	800ee9a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	699a      	ldr	r2, [r3, #24]
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	6a1b      	ldr	r3, [r3, #32]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d811      	bhi.n	800ef42 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	f003 030f 	and.w	r3, r3, #15
 800ef24:	2201      	movs	r2, #1
 800ef26:	fa02 f303 	lsl.w	r3, r2, r3
 800ef2a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	43db      	mvns	r3, r3
 800ef38:	6939      	ldr	r1, [r7, #16]
 800ef3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef3e:	4013      	ands	r3, r2
 800ef40:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800ef42:	2300      	movs	r3, #0
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3720      	adds	r7, #32
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b086      	sub	sp, #24
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	333c      	adds	r3, #60	; 0x3c
 800ef64:	3304      	adds	r3, #4
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	015a      	lsls	r2, r3, #5
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	4413      	add	r3, r2
 800ef72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef76:	689b      	ldr	r3, [r3, #8]
 800ef78:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	4a19      	ldr	r2, [pc, #100]	; (800efe4 <PCD_EP_OutXfrComplete_int+0x98>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d124      	bne.n	800efcc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00a      	beq.n	800efa2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	015a      	lsls	r2, r3, #5
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	4413      	add	r3, r2
 800ef94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef98:	461a      	mov	r2, r3
 800ef9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef9e:	6093      	str	r3, [r2, #8]
 800efa0:	e01a      	b.n	800efd8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	f003 0320 	and.w	r3, r3, #32
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d008      	beq.n	800efbe <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	015a      	lsls	r2, r3, #5
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	4413      	add	r3, r2
 800efb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efb8:	461a      	mov	r2, r3
 800efba:	2320      	movs	r3, #32
 800efbc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	b2db      	uxtb	r3, r3
 800efc2:	4619      	mov	r1, r3
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f009 f971 	bl	80182ac <HAL_PCD_DataOutStageCallback>
 800efca:	e005      	b.n	800efd8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	4619      	mov	r1, r3
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f009 f96a 	bl	80182ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800efd8:	2300      	movs	r3, #0
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3718      	adds	r7, #24
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	4f54310a 	.word	0x4f54310a

0800efe8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b086      	sub	sp, #24
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	333c      	adds	r3, #60	; 0x3c
 800f000:	3304      	adds	r3, #4
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	015a      	lsls	r2, r3, #5
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	4413      	add	r3, r2
 800f00e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f012:	689b      	ldr	r3, [r3, #8]
 800f014:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	4a0c      	ldr	r2, [pc, #48]	; (800f04c <PCD_EP_OutSetupPacket_int+0x64>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d90e      	bls.n	800f03c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f024:	2b00      	cmp	r3, #0
 800f026:	d009      	beq.n	800f03c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	015a      	lsls	r2, r3, #5
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	4413      	add	r3, r2
 800f030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f034:	461a      	mov	r2, r3
 800f036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f03a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f009 f923 	bl	8018288 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800f042:	2300      	movs	r3, #0
}
 800f044:	4618      	mov	r0, r3
 800f046:	3718      	adds	r7, #24
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}
 800f04c:	4f54300a 	.word	0x4f54300a

0800f050 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800f050:	b480      	push	{r7}
 800f052:	b085      	sub	sp, #20
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	460b      	mov	r3, r1
 800f05a:	70fb      	strb	r3, [r7, #3]
 800f05c:	4613      	mov	r3, r2
 800f05e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f066:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800f068:	78fb      	ldrb	r3, [r7, #3]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d107      	bne.n	800f07e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800f06e:	883b      	ldrh	r3, [r7, #0]
 800f070:	0419      	lsls	r1, r3, #16
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	68ba      	ldr	r2, [r7, #8]
 800f078:	430a      	orrs	r2, r1
 800f07a:	629a      	str	r2, [r3, #40]	; 0x28
 800f07c:	e028      	b.n	800f0d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f084:	0c1b      	lsrs	r3, r3, #16
 800f086:	68ba      	ldr	r2, [r7, #8]
 800f088:	4413      	add	r3, r2
 800f08a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f08c:	2300      	movs	r3, #0
 800f08e:	73fb      	strb	r3, [r7, #15]
 800f090:	e00d      	b.n	800f0ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	7bfb      	ldrb	r3, [r7, #15]
 800f098:	3340      	adds	r3, #64	; 0x40
 800f09a:	009b      	lsls	r3, r3, #2
 800f09c:	4413      	add	r3, r2
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	0c1b      	lsrs	r3, r3, #16
 800f0a2:	68ba      	ldr	r2, [r7, #8]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f0a8:	7bfb      	ldrb	r3, [r7, #15]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	73fb      	strb	r3, [r7, #15]
 800f0ae:	7bfa      	ldrb	r2, [r7, #15]
 800f0b0:	78fb      	ldrb	r3, [r7, #3]
 800f0b2:	3b01      	subs	r3, #1
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d3ec      	bcc.n	800f092 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800f0b8:	883b      	ldrh	r3, [r7, #0]
 800f0ba:	0418      	lsls	r0, r3, #16
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6819      	ldr	r1, [r3, #0]
 800f0c0:	78fb      	ldrb	r3, [r7, #3]
 800f0c2:	3b01      	subs	r3, #1
 800f0c4:	68ba      	ldr	r2, [r7, #8]
 800f0c6:	4302      	orrs	r2, r0
 800f0c8:	3340      	adds	r3, #64	; 0x40
 800f0ca:	009b      	lsls	r3, r3, #2
 800f0cc:	440b      	add	r3, r1
 800f0ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f0d0:	2300      	movs	r3, #0
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3714      	adds	r7, #20
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr

0800f0de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800f0de:	b480      	push	{r7}
 800f0e0:	b083      	sub	sp, #12
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
 800f0e6:	460b      	mov	r3, r1
 800f0e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	887a      	ldrh	r2, [r7, #2]
 800f0f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800f0f2:	2300      	movs	r3, #0
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	370c      	adds	r7, #12
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2201      	movs	r2, #1
 800f112:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2200      	movs	r2, #0
 800f11a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	699b      	ldr	r3, [r3, #24]
 800f122:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f12e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f132:	f043 0303 	orr.w	r3, r3, #3
 800f136:	68fa      	ldr	r2, [r7, #12]
 800f138:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800f13a:	2300      	movs	r3, #0
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3714      	adds	r7, #20
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800f148:	b480      	push	{r7}
 800f14a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f14c:	4b05      	ldr	r3, [pc, #20]	; (800f164 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4a04      	ldr	r2, [pc, #16]	; (800f164 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800f152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f156:	6013      	str	r3, [r2, #0]
}
 800f158:	bf00      	nop
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop
 800f164:	40007000 	.word	0x40007000

0800f168 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b082      	sub	sp, #8
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	460b      	mov	r3, r1
 800f172:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d10c      	bne.n	800f194 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800f17a:	4b13      	ldr	r3, [pc, #76]	; (800f1c8 <HAL_PWR_EnterSLEEPMode+0x60>)
 800f17c:	695b      	ldr	r3, [r3, #20]
 800f17e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f186:	d10e      	bne.n	800f1a6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800f188:	f000 f8b6 	bl	800f2f8 <HAL_PWREx_DisableLowPowerRunMode>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d009      	beq.n	800f1a6 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800f192:	e016      	b.n	800f1c2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800f194:	4b0c      	ldr	r3, [pc, #48]	; (800f1c8 <HAL_PWR_EnterSLEEPMode+0x60>)
 800f196:	695b      	ldr	r3, [r3, #20]
 800f198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f19c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1a0:	d001      	beq.n	800f1a6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800f1a2:	f000 f899 	bl	800f2d8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800f1a6:	4b09      	ldr	r3, [pc, #36]	; (800f1cc <HAL_PWR_EnterSLEEPMode+0x64>)
 800f1a8:	691b      	ldr	r3, [r3, #16]
 800f1aa:	4a08      	ldr	r2, [pc, #32]	; (800f1cc <HAL_PWR_EnterSLEEPMode+0x64>)
 800f1ac:	f023 0304 	bic.w	r3, r3, #4
 800f1b0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800f1b2:	78fb      	ldrb	r3, [r7, #3]
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	d101      	bne.n	800f1bc <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800f1b8:	bf30      	wfi
 800f1ba:	e002      	b.n	800f1c2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800f1bc:	bf40      	sev
    __WFE();
 800f1be:	bf20      	wfe
    __WFE();
 800f1c0:	bf20      	wfe
  }

}
 800f1c2:	3708      	adds	r7, #8
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}
 800f1c8:	40007000 	.word	0x40007000
 800f1cc:	e000ed00 	.word	0xe000ed00

0800f1d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800f1d4:	4b04      	ldr	r3, [pc, #16]	; (800f1e8 <HAL_PWREx_GetVoltageRange+0x18>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e4:	4770      	bx	lr
 800f1e6:	bf00      	nop
 800f1e8:	40007000 	.word	0x40007000

0800f1ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b085      	sub	sp, #20
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1fa:	d130      	bne.n	800f25e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800f1fc:	4b23      	ldr	r3, [pc, #140]	; (800f28c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f208:	d038      	beq.n	800f27c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800f20a:	4b20      	ldr	r3, [pc, #128]	; (800f28c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f212:	4a1e      	ldr	r2, [pc, #120]	; (800f28c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f214:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f218:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800f21a:	4b1d      	ldr	r3, [pc, #116]	; (800f290 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	2232      	movs	r2, #50	; 0x32
 800f220:	fb02 f303 	mul.w	r3, r2, r3
 800f224:	4a1b      	ldr	r2, [pc, #108]	; (800f294 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800f226:	fba2 2303 	umull	r2, r3, r2, r3
 800f22a:	0c9b      	lsrs	r3, r3, #18
 800f22c:	3301      	adds	r3, #1
 800f22e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f230:	e002      	b.n	800f238 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	3b01      	subs	r3, #1
 800f236:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f238:	4b14      	ldr	r3, [pc, #80]	; (800f28c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f23a:	695b      	ldr	r3, [r3, #20]
 800f23c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f244:	d102      	bne.n	800f24c <HAL_PWREx_ControlVoltageScaling+0x60>
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d1f2      	bne.n	800f232 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800f24c:	4b0f      	ldr	r3, [pc, #60]	; (800f28c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f24e:	695b      	ldr	r3, [r3, #20]
 800f250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f258:	d110      	bne.n	800f27c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800f25a:	2303      	movs	r3, #3
 800f25c:	e00f      	b.n	800f27e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800f25e:	4b0b      	ldr	r3, [pc, #44]	; (800f28c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f26a:	d007      	beq.n	800f27c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800f26c:	4b07      	ldr	r3, [pc, #28]	; (800f28c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f274:	4a05      	ldr	r2, [pc, #20]	; (800f28c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f27a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3714      	adds	r7, #20
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop
 800f28c:	40007000 	.word	0x40007000
 800f290:	20000190 	.word	0x20000190
 800f294:	431bde83 	.word	0x431bde83

0800f298 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800f298:	b480      	push	{r7}
 800f29a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800f29c:	4b05      	ldr	r3, [pc, #20]	; (800f2b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	4a04      	ldr	r2, [pc, #16]	; (800f2b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800f2a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f2a6:	6053      	str	r3, [r2, #4]
}
 800f2a8:	bf00      	nop
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr
 800f2b2:	bf00      	nop
 800f2b4:	40007000 	.word	0x40007000

0800f2b8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800f2bc:	4b05      	ldr	r3, [pc, #20]	; (800f2d4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800f2be:	685b      	ldr	r3, [r3, #4]
 800f2c0:	4a04      	ldr	r2, [pc, #16]	; (800f2d4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800f2c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f2c6:	6053      	str	r3, [r2, #4]
}
 800f2c8:	bf00      	nop
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr
 800f2d2:	bf00      	nop
 800f2d4:	40007000 	.word	0x40007000

0800f2d8 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800f2dc:	4b05      	ldr	r3, [pc, #20]	; (800f2f4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	4a04      	ldr	r2, [pc, #16]	; (800f2f4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800f2e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f2e6:	6013      	str	r3, [r2, #0]
}
 800f2e8:	bf00      	nop
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f0:	4770      	bx	lr
 800f2f2:	bf00      	nop
 800f2f4:	40007000 	.word	0x40007000

0800f2f8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800f2fe:	4b17      	ldr	r3, [pc, #92]	; (800f35c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	4a16      	ldr	r2, [pc, #88]	; (800f35c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f308:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800f30a:	4b15      	ldr	r3, [pc, #84]	; (800f360 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	2232      	movs	r2, #50	; 0x32
 800f310:	fb02 f303 	mul.w	r3, r2, r3
 800f314:	4a13      	ldr	r2, [pc, #76]	; (800f364 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800f316:	fba2 2303 	umull	r2, r3, r2, r3
 800f31a:	0c9b      	lsrs	r3, r3, #18
 800f31c:	3301      	adds	r3, #1
 800f31e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800f320:	e002      	b.n	800f328 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	3b01      	subs	r3, #1
 800f326:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800f328:	4b0c      	ldr	r3, [pc, #48]	; (800f35c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f32a:	695b      	ldr	r3, [r3, #20]
 800f32c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f334:	d102      	bne.n	800f33c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d1f2      	bne.n	800f322 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800f33c:	4b07      	ldr	r3, [pc, #28]	; (800f35c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f33e:	695b      	ldr	r3, [r3, #20]
 800f340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f348:	d101      	bne.n	800f34e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800f34a:	2303      	movs	r3, #3
 800f34c:	e000      	b.n	800f350 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800f34e:	2300      	movs	r3, #0
}
 800f350:	4618      	mov	r0, r3
 800f352:	370c      	adds	r7, #12
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr
 800f35c:	40007000 	.word	0x40007000
 800f360:	20000190 	.word	0x20000190
 800f364:	431bde83 	.word	0x431bde83

0800f368 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b086      	sub	sp, #24
 800f36c:	af02      	add	r7, sp, #8
 800f36e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f370:	f7fb fdd2 	bl	800af18 <HAL_GetTick>
 800f374:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d101      	bne.n	800f380 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800f37c:	2301      	movs	r3, #1
 800f37e:	e069      	b.n	800f454 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f386:	b2db      	uxtb	r3, r3
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d10b      	bne.n	800f3a4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2200      	movs	r2, #0
 800f390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f7f2 fc9f 	bl	8001cd8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800f39a:	f241 3188 	movw	r1, #5000	; 0x1388
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f000 f85e 	bl	800f460 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	689b      	ldr	r3, [r3, #8]
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	021a      	lsls	r2, r3, #8
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	430a      	orrs	r2, r1
 800f3bc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	2120      	movs	r1, #32
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 f856 	bl	800f47c <QSPI_WaitFlagStateUntilTimeout>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800f3d4:	7afb      	ldrb	r3, [r7, #11]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d137      	bne.n	800f44a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f3e4:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	6852      	ldr	r2, [r2, #4]
 800f3ec:	0611      	lsls	r1, r2, #24
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	68d2      	ldr	r2, [r2, #12]
 800f3f2:	4311      	orrs	r1, r2
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	69d2      	ldr	r2, [r2, #28]
 800f3f8:	4311      	orrs	r1, r2
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	6a12      	ldr	r2, [r2, #32]
 800f3fe:	4311      	orrs	r1, r2
 800f400:	687a      	ldr	r2, [r7, #4]
 800f402:	6812      	ldr	r2, [r2, #0]
 800f404:	430b      	orrs	r3, r1
 800f406:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	685a      	ldr	r2, [r3, #4]
 800f40e:	4b13      	ldr	r3, [pc, #76]	; (800f45c <HAL_QSPI_Init+0xf4>)
 800f410:	4013      	ands	r3, r2
 800f412:	687a      	ldr	r2, [r7, #4]
 800f414:	6912      	ldr	r2, [r2, #16]
 800f416:	0411      	lsls	r1, r2, #16
 800f418:	687a      	ldr	r2, [r7, #4]
 800f41a:	6952      	ldr	r2, [r2, #20]
 800f41c:	4311      	orrs	r1, r2
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	6992      	ldr	r2, [r2, #24]
 800f422:	4311      	orrs	r1, r2
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	6812      	ldr	r2, [r2, #0]
 800f428:	430b      	orrs	r3, r1
 800f42a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	f042 0201 	orr.w	r2, r2, #1
 800f43a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2200      	movs	r2, #0
 800f440:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2201      	movs	r2, #1
 800f446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2200      	movs	r2, #0
 800f44e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800f452:	7afb      	ldrb	r3, [r7, #11]
}
 800f454:	4618      	mov	r0, r3
 800f456:	3710      	adds	r7, #16
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}
 800f45c:	ffe0f8fe 	.word	0xffe0f8fe

0800f460 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800f460:	b480      	push	{r7}
 800f462:	b083      	sub	sp, #12
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	683a      	ldr	r2, [r7, #0]
 800f46e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800f470:	bf00      	nop
 800f472:	370c      	adds	r7, #12
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr

0800f47c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b084      	sub	sp, #16
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	603b      	str	r3, [r7, #0]
 800f488:	4613      	mov	r3, r2
 800f48a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f48c:	e01a      	b.n	800f4c4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f48e:	69bb      	ldr	r3, [r7, #24]
 800f490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f494:	d016      	beq.n	800f4c4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f496:	f7fb fd3f 	bl	800af18 <HAL_GetTick>
 800f49a:	4602      	mov	r2, r0
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	1ad3      	subs	r3, r2, r3
 800f4a0:	69ba      	ldr	r2, [r7, #24]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d302      	bcc.n	800f4ac <QSPI_WaitFlagStateUntilTimeout+0x30>
 800f4a6:	69bb      	ldr	r3, [r7, #24]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d10b      	bne.n	800f4c4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2204      	movs	r2, #4
 800f4b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4b8:	f043 0201 	orr.w	r2, r3, #1
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	e00e      	b.n	800f4e2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	689a      	ldr	r2, [r3, #8]
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	4013      	ands	r3, r2
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	bf14      	ite	ne
 800f4d2:	2301      	movne	r3, #1
 800f4d4:	2300      	moveq	r3, #0
 800f4d6:	b2db      	uxtb	r3, r3
 800f4d8:	461a      	mov	r2, r3
 800f4da:	79fb      	ldrb	r3, [r7, #7]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d1d6      	bne.n	800f48e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f4e0:	2300      	movs	r3, #0
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
	...

0800f4ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b088      	sub	sp, #32
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d102      	bne.n	800f500 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	f000 bc08 	b.w	800fd10 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f500:	4b96      	ldr	r3, [pc, #600]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f502:	689b      	ldr	r3, [r3, #8]
 800f504:	f003 030c 	and.w	r3, r3, #12
 800f508:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f50a:	4b94      	ldr	r3, [pc, #592]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	f003 0303 	and.w	r3, r3, #3
 800f512:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f003 0310 	and.w	r3, r3, #16
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	f000 80e4 	beq.w	800f6ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f522:	69bb      	ldr	r3, [r7, #24]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d007      	beq.n	800f538 <HAL_RCC_OscConfig+0x4c>
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	2b0c      	cmp	r3, #12
 800f52c:	f040 808b 	bne.w	800f646 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	2b01      	cmp	r3, #1
 800f534:	f040 8087 	bne.w	800f646 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f538:	4b88      	ldr	r3, [pc, #544]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f003 0302 	and.w	r3, r3, #2
 800f540:	2b00      	cmp	r3, #0
 800f542:	d005      	beq.n	800f550 <HAL_RCC_OscConfig+0x64>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	699b      	ldr	r3, [r3, #24]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d101      	bne.n	800f550 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800f54c:	2301      	movs	r3, #1
 800f54e:	e3df      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6a1a      	ldr	r2, [r3, #32]
 800f554:	4b81      	ldr	r3, [pc, #516]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	f003 0308 	and.w	r3, r3, #8
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d004      	beq.n	800f56a <HAL_RCC_OscConfig+0x7e>
 800f560:	4b7e      	ldr	r3, [pc, #504]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f568:	e005      	b.n	800f576 <HAL_RCC_OscConfig+0x8a>
 800f56a:	4b7c      	ldr	r3, [pc, #496]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f56c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f570:	091b      	lsrs	r3, r3, #4
 800f572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f576:	4293      	cmp	r3, r2
 800f578:	d223      	bcs.n	800f5c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6a1b      	ldr	r3, [r3, #32]
 800f57e:	4618      	mov	r0, r3
 800f580:	f000 fd92 	bl	80100a8 <RCC_SetFlashLatencyFromMSIRange>
 800f584:	4603      	mov	r3, r0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d001      	beq.n	800f58e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800f58a:	2301      	movs	r3, #1
 800f58c:	e3c0      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f58e:	4b73      	ldr	r3, [pc, #460]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	4a72      	ldr	r2, [pc, #456]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f594:	f043 0308 	orr.w	r3, r3, #8
 800f598:	6013      	str	r3, [r2, #0]
 800f59a:	4b70      	ldr	r3, [pc, #448]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6a1b      	ldr	r3, [r3, #32]
 800f5a6:	496d      	ldr	r1, [pc, #436]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f5ac:	4b6b      	ldr	r3, [pc, #428]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	69db      	ldr	r3, [r3, #28]
 800f5b8:	021b      	lsls	r3, r3, #8
 800f5ba:	4968      	ldr	r1, [pc, #416]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	604b      	str	r3, [r1, #4]
 800f5c0:	e025      	b.n	800f60e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f5c2:	4b66      	ldr	r3, [pc, #408]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	4a65      	ldr	r2, [pc, #404]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f5c8:	f043 0308 	orr.w	r3, r3, #8
 800f5cc:	6013      	str	r3, [r2, #0]
 800f5ce:	4b63      	ldr	r3, [pc, #396]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6a1b      	ldr	r3, [r3, #32]
 800f5da:	4960      	ldr	r1, [pc, #384]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f5e0:	4b5e      	ldr	r3, [pc, #376]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	69db      	ldr	r3, [r3, #28]
 800f5ec:	021b      	lsls	r3, r3, #8
 800f5ee:	495b      	ldr	r1, [pc, #364]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f5f4:	69bb      	ldr	r3, [r7, #24]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d109      	bne.n	800f60e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6a1b      	ldr	r3, [r3, #32]
 800f5fe:	4618      	mov	r0, r3
 800f600:	f000 fd52 	bl	80100a8 <RCC_SetFlashLatencyFromMSIRange>
 800f604:	4603      	mov	r3, r0
 800f606:	2b00      	cmp	r3, #0
 800f608:	d001      	beq.n	800f60e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800f60a:	2301      	movs	r3, #1
 800f60c:	e380      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f60e:	f000 fc87 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 800f612:	4602      	mov	r2, r0
 800f614:	4b51      	ldr	r3, [pc, #324]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f616:	689b      	ldr	r3, [r3, #8]
 800f618:	091b      	lsrs	r3, r3, #4
 800f61a:	f003 030f 	and.w	r3, r3, #15
 800f61e:	4950      	ldr	r1, [pc, #320]	; (800f760 <HAL_RCC_OscConfig+0x274>)
 800f620:	5ccb      	ldrb	r3, [r1, r3]
 800f622:	f003 031f 	and.w	r3, r3, #31
 800f626:	fa22 f303 	lsr.w	r3, r2, r3
 800f62a:	4a4e      	ldr	r2, [pc, #312]	; (800f764 <HAL_RCC_OscConfig+0x278>)
 800f62c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800f62e:	4b4e      	ldr	r3, [pc, #312]	; (800f768 <HAL_RCC_OscConfig+0x27c>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	4618      	mov	r0, r3
 800f634:	f7fb fc20 	bl	800ae78 <HAL_InitTick>
 800f638:	4603      	mov	r3, r0
 800f63a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800f63c:	7bfb      	ldrb	r3, [r7, #15]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d052      	beq.n	800f6e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800f642:	7bfb      	ldrb	r3, [r7, #15]
 800f644:	e364      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	699b      	ldr	r3, [r3, #24]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d032      	beq.n	800f6b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f64e:	4b43      	ldr	r3, [pc, #268]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	4a42      	ldr	r2, [pc, #264]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f654:	f043 0301 	orr.w	r3, r3, #1
 800f658:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f65a:	f7fb fc5d 	bl	800af18 <HAL_GetTick>
 800f65e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f660:	e008      	b.n	800f674 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f662:	f7fb fc59 	bl	800af18 <HAL_GetTick>
 800f666:	4602      	mov	r2, r0
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	1ad3      	subs	r3, r2, r3
 800f66c:	2b02      	cmp	r3, #2
 800f66e:	d901      	bls.n	800f674 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800f670:	2303      	movs	r3, #3
 800f672:	e34d      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f674:	4b39      	ldr	r3, [pc, #228]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f003 0302 	and.w	r3, r3, #2
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d0f0      	beq.n	800f662 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f680:	4b36      	ldr	r3, [pc, #216]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a35      	ldr	r2, [pc, #212]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f686:	f043 0308 	orr.w	r3, r3, #8
 800f68a:	6013      	str	r3, [r2, #0]
 800f68c:	4b33      	ldr	r3, [pc, #204]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6a1b      	ldr	r3, [r3, #32]
 800f698:	4930      	ldr	r1, [pc, #192]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f69a:	4313      	orrs	r3, r2
 800f69c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f69e:	4b2f      	ldr	r3, [pc, #188]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	69db      	ldr	r3, [r3, #28]
 800f6aa:	021b      	lsls	r3, r3, #8
 800f6ac:	492b      	ldr	r1, [pc, #172]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	604b      	str	r3, [r1, #4]
 800f6b2:	e01a      	b.n	800f6ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f6b4:	4b29      	ldr	r3, [pc, #164]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4a28      	ldr	r2, [pc, #160]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f6ba:	f023 0301 	bic.w	r3, r3, #1
 800f6be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f6c0:	f7fb fc2a 	bl	800af18 <HAL_GetTick>
 800f6c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f6c6:	e008      	b.n	800f6da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f6c8:	f7fb fc26 	bl	800af18 <HAL_GetTick>
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	1ad3      	subs	r3, r2, r3
 800f6d2:	2b02      	cmp	r3, #2
 800f6d4:	d901      	bls.n	800f6da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800f6d6:	2303      	movs	r3, #3
 800f6d8:	e31a      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f6da:	4b20      	ldr	r3, [pc, #128]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f003 0302 	and.w	r3, r3, #2
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d1f0      	bne.n	800f6c8 <HAL_RCC_OscConfig+0x1dc>
 800f6e6:	e000      	b.n	800f6ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f6e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f003 0301 	and.w	r3, r3, #1
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d073      	beq.n	800f7de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800f6f6:	69bb      	ldr	r3, [r7, #24]
 800f6f8:	2b08      	cmp	r3, #8
 800f6fa:	d005      	beq.n	800f708 <HAL_RCC_OscConfig+0x21c>
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	2b0c      	cmp	r3, #12
 800f700:	d10e      	bne.n	800f720 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	2b03      	cmp	r3, #3
 800f706:	d10b      	bne.n	800f720 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f708:	4b14      	ldr	r3, [pc, #80]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f710:	2b00      	cmp	r3, #0
 800f712:	d063      	beq.n	800f7dc <HAL_RCC_OscConfig+0x2f0>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d15f      	bne.n	800f7dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800f71c:	2301      	movs	r3, #1
 800f71e:	e2f7      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f728:	d106      	bne.n	800f738 <HAL_RCC_OscConfig+0x24c>
 800f72a:	4b0c      	ldr	r3, [pc, #48]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4a0b      	ldr	r2, [pc, #44]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f734:	6013      	str	r3, [r2, #0]
 800f736:	e025      	b.n	800f784 <HAL_RCC_OscConfig+0x298>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f740:	d114      	bne.n	800f76c <HAL_RCC_OscConfig+0x280>
 800f742:	4b06      	ldr	r3, [pc, #24]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	4a05      	ldr	r2, [pc, #20]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f74c:	6013      	str	r3, [r2, #0]
 800f74e:	4b03      	ldr	r3, [pc, #12]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	4a02      	ldr	r2, [pc, #8]	; (800f75c <HAL_RCC_OscConfig+0x270>)
 800f754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f758:	6013      	str	r3, [r2, #0]
 800f75a:	e013      	b.n	800f784 <HAL_RCC_OscConfig+0x298>
 800f75c:	40021000 	.word	0x40021000
 800f760:	08019bf0 	.word	0x08019bf0
 800f764:	20000190 	.word	0x20000190
 800f768:	2000054c 	.word	0x2000054c
 800f76c:	4ba0      	ldr	r3, [pc, #640]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4a9f      	ldr	r2, [pc, #636]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f776:	6013      	str	r3, [r2, #0]
 800f778:	4b9d      	ldr	r3, [pc, #628]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4a9c      	ldr	r2, [pc, #624]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f77e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d013      	beq.n	800f7b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f78c:	f7fb fbc4 	bl	800af18 <HAL_GetTick>
 800f790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f792:	e008      	b.n	800f7a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f794:	f7fb fbc0 	bl	800af18 <HAL_GetTick>
 800f798:	4602      	mov	r2, r0
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	1ad3      	subs	r3, r2, r3
 800f79e:	2b64      	cmp	r3, #100	; 0x64
 800f7a0:	d901      	bls.n	800f7a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800f7a2:	2303      	movs	r3, #3
 800f7a4:	e2b4      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f7a6:	4b92      	ldr	r3, [pc, #584]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d0f0      	beq.n	800f794 <HAL_RCC_OscConfig+0x2a8>
 800f7b2:	e014      	b.n	800f7de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f7b4:	f7fb fbb0 	bl	800af18 <HAL_GetTick>
 800f7b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f7ba:	e008      	b.n	800f7ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f7bc:	f7fb fbac 	bl	800af18 <HAL_GetTick>
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	1ad3      	subs	r3, r2, r3
 800f7c6:	2b64      	cmp	r3, #100	; 0x64
 800f7c8:	d901      	bls.n	800f7ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800f7ca:	2303      	movs	r3, #3
 800f7cc:	e2a0      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f7ce:	4b88      	ldr	r3, [pc, #544]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d1f0      	bne.n	800f7bc <HAL_RCC_OscConfig+0x2d0>
 800f7da:	e000      	b.n	800f7de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f7dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f003 0302 	and.w	r3, r3, #2
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d060      	beq.n	800f8ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800f7ea:	69bb      	ldr	r3, [r7, #24]
 800f7ec:	2b04      	cmp	r3, #4
 800f7ee:	d005      	beq.n	800f7fc <HAL_RCC_OscConfig+0x310>
 800f7f0:	69bb      	ldr	r3, [r7, #24]
 800f7f2:	2b0c      	cmp	r3, #12
 800f7f4:	d119      	bne.n	800f82a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	2b02      	cmp	r3, #2
 800f7fa:	d116      	bne.n	800f82a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f7fc:	4b7c      	ldr	r3, [pc, #496]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f804:	2b00      	cmp	r3, #0
 800f806:	d005      	beq.n	800f814 <HAL_RCC_OscConfig+0x328>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d101      	bne.n	800f814 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800f810:	2301      	movs	r3, #1
 800f812:	e27d      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f814:	4b76      	ldr	r3, [pc, #472]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	691b      	ldr	r3, [r3, #16]
 800f820:	061b      	lsls	r3, r3, #24
 800f822:	4973      	ldr	r1, [pc, #460]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f824:	4313      	orrs	r3, r2
 800f826:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f828:	e040      	b.n	800f8ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d023      	beq.n	800f87a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f832:	4b6f      	ldr	r3, [pc, #444]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	4a6e      	ldr	r2, [pc, #440]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f83c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f83e:	f7fb fb6b 	bl	800af18 <HAL_GetTick>
 800f842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f844:	e008      	b.n	800f858 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f846:	f7fb fb67 	bl	800af18 <HAL_GetTick>
 800f84a:	4602      	mov	r2, r0
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	1ad3      	subs	r3, r2, r3
 800f850:	2b02      	cmp	r3, #2
 800f852:	d901      	bls.n	800f858 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800f854:	2303      	movs	r3, #3
 800f856:	e25b      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f858:	4b65      	ldr	r3, [pc, #404]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f860:	2b00      	cmp	r3, #0
 800f862:	d0f0      	beq.n	800f846 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f864:	4b62      	ldr	r3, [pc, #392]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	691b      	ldr	r3, [r3, #16]
 800f870:	061b      	lsls	r3, r3, #24
 800f872:	495f      	ldr	r1, [pc, #380]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f874:	4313      	orrs	r3, r2
 800f876:	604b      	str	r3, [r1, #4]
 800f878:	e018      	b.n	800f8ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f87a:	4b5d      	ldr	r3, [pc, #372]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	4a5c      	ldr	r2, [pc, #368]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f886:	f7fb fb47 	bl	800af18 <HAL_GetTick>
 800f88a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f88c:	e008      	b.n	800f8a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f88e:	f7fb fb43 	bl	800af18 <HAL_GetTick>
 800f892:	4602      	mov	r2, r0
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	1ad3      	subs	r3, r2, r3
 800f898:	2b02      	cmp	r3, #2
 800f89a:	d901      	bls.n	800f8a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800f89c:	2303      	movs	r3, #3
 800f89e:	e237      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f8a0:	4b53      	ldr	r3, [pc, #332]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d1f0      	bne.n	800f88e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f003 0308 	and.w	r3, r3, #8
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d03c      	beq.n	800f932 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	695b      	ldr	r3, [r3, #20]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d01c      	beq.n	800f8fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f8c0:	4b4b      	ldr	r3, [pc, #300]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f8c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f8c6:	4a4a      	ldr	r2, [pc, #296]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f8c8:	f043 0301 	orr.w	r3, r3, #1
 800f8cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f8d0:	f7fb fb22 	bl	800af18 <HAL_GetTick>
 800f8d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f8d6:	e008      	b.n	800f8ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f8d8:	f7fb fb1e 	bl	800af18 <HAL_GetTick>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	1ad3      	subs	r3, r2, r3
 800f8e2:	2b02      	cmp	r3, #2
 800f8e4:	d901      	bls.n	800f8ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800f8e6:	2303      	movs	r3, #3
 800f8e8:	e212      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f8ea:	4b41      	ldr	r3, [pc, #260]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f8ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f8f0:	f003 0302 	and.w	r3, r3, #2
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d0ef      	beq.n	800f8d8 <HAL_RCC_OscConfig+0x3ec>
 800f8f8:	e01b      	b.n	800f932 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f8fa:	4b3d      	ldr	r3, [pc, #244]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f8fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f900:	4a3b      	ldr	r2, [pc, #236]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f902:	f023 0301 	bic.w	r3, r3, #1
 800f906:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f90a:	f7fb fb05 	bl	800af18 <HAL_GetTick>
 800f90e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f910:	e008      	b.n	800f924 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f912:	f7fb fb01 	bl	800af18 <HAL_GetTick>
 800f916:	4602      	mov	r2, r0
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	1ad3      	subs	r3, r2, r3
 800f91c:	2b02      	cmp	r3, #2
 800f91e:	d901      	bls.n	800f924 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800f920:	2303      	movs	r3, #3
 800f922:	e1f5      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f924:	4b32      	ldr	r3, [pc, #200]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f92a:	f003 0302 	and.w	r3, r3, #2
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d1ef      	bne.n	800f912 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	f003 0304 	and.w	r3, r3, #4
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	f000 80a6 	beq.w	800fa8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f940:	2300      	movs	r3, #0
 800f942:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800f944:	4b2a      	ldr	r3, [pc, #168]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d10d      	bne.n	800f96c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f950:	4b27      	ldr	r3, [pc, #156]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f954:	4a26      	ldr	r2, [pc, #152]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f95a:	6593      	str	r3, [r2, #88]	; 0x58
 800f95c:	4b24      	ldr	r3, [pc, #144]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f95e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f964:	60bb      	str	r3, [r7, #8]
 800f966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f968:	2301      	movs	r3, #1
 800f96a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f96c:	4b21      	ldr	r3, [pc, #132]	; (800f9f4 <HAL_RCC_OscConfig+0x508>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f974:	2b00      	cmp	r3, #0
 800f976:	d118      	bne.n	800f9aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f978:	4b1e      	ldr	r3, [pc, #120]	; (800f9f4 <HAL_RCC_OscConfig+0x508>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4a1d      	ldr	r2, [pc, #116]	; (800f9f4 <HAL_RCC_OscConfig+0x508>)
 800f97e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f982:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f984:	f7fb fac8 	bl	800af18 <HAL_GetTick>
 800f988:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f98a:	e008      	b.n	800f99e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f98c:	f7fb fac4 	bl	800af18 <HAL_GetTick>
 800f990:	4602      	mov	r2, r0
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	1ad3      	subs	r3, r2, r3
 800f996:	2b02      	cmp	r3, #2
 800f998:	d901      	bls.n	800f99e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800f99a:	2303      	movs	r3, #3
 800f99c:	e1b8      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f99e:	4b15      	ldr	r3, [pc, #84]	; (800f9f4 <HAL_RCC_OscConfig+0x508>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d0f0      	beq.n	800f98c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	689b      	ldr	r3, [r3, #8]
 800f9ae:	2b01      	cmp	r3, #1
 800f9b0:	d108      	bne.n	800f9c4 <HAL_RCC_OscConfig+0x4d8>
 800f9b2:	4b0f      	ldr	r3, [pc, #60]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f9b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9b8:	4a0d      	ldr	r2, [pc, #52]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f9ba:	f043 0301 	orr.w	r3, r3, #1
 800f9be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f9c2:	e029      	b.n	800fa18 <HAL_RCC_OscConfig+0x52c>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	689b      	ldr	r3, [r3, #8]
 800f9c8:	2b05      	cmp	r3, #5
 800f9ca:	d115      	bne.n	800f9f8 <HAL_RCC_OscConfig+0x50c>
 800f9cc:	4b08      	ldr	r3, [pc, #32]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f9ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9d2:	4a07      	ldr	r2, [pc, #28]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f9d4:	f043 0304 	orr.w	r3, r3, #4
 800f9d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f9dc:	4b04      	ldr	r3, [pc, #16]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f9de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9e2:	4a03      	ldr	r2, [pc, #12]	; (800f9f0 <HAL_RCC_OscConfig+0x504>)
 800f9e4:	f043 0301 	orr.w	r3, r3, #1
 800f9e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f9ec:	e014      	b.n	800fa18 <HAL_RCC_OscConfig+0x52c>
 800f9ee:	bf00      	nop
 800f9f0:	40021000 	.word	0x40021000
 800f9f4:	40007000 	.word	0x40007000
 800f9f8:	4b9d      	ldr	r3, [pc, #628]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800f9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9fe:	4a9c      	ldr	r2, [pc, #624]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fa00:	f023 0301 	bic.w	r3, r3, #1
 800fa04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fa08:	4b99      	ldr	r3, [pc, #612]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fa0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa0e:	4a98      	ldr	r2, [pc, #608]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fa10:	f023 0304 	bic.w	r3, r3, #4
 800fa14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	689b      	ldr	r3, [r3, #8]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d016      	beq.n	800fa4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa20:	f7fb fa7a 	bl	800af18 <HAL_GetTick>
 800fa24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fa26:	e00a      	b.n	800fa3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fa28:	f7fb fa76 	bl	800af18 <HAL_GetTick>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	1ad3      	subs	r3, r2, r3
 800fa32:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d901      	bls.n	800fa3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800fa3a:	2303      	movs	r3, #3
 800fa3c:	e168      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fa3e:	4b8c      	ldr	r3, [pc, #560]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fa40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa44:	f003 0302 	and.w	r3, r3, #2
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d0ed      	beq.n	800fa28 <HAL_RCC_OscConfig+0x53c>
 800fa4c:	e015      	b.n	800fa7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa4e:	f7fb fa63 	bl	800af18 <HAL_GetTick>
 800fa52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fa54:	e00a      	b.n	800fa6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fa56:	f7fb fa5f 	bl	800af18 <HAL_GetTick>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d901      	bls.n	800fa6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800fa68:	2303      	movs	r3, #3
 800fa6a:	e151      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fa6c:	4b80      	ldr	r3, [pc, #512]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fa6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa72:	f003 0302 	and.w	r3, r3, #2
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d1ed      	bne.n	800fa56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fa7a:	7ffb      	ldrb	r3, [r7, #31]
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	d105      	bne.n	800fa8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fa80:	4b7b      	ldr	r3, [pc, #492]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fa82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa84:	4a7a      	ldr	r2, [pc, #488]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fa86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fa8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f003 0320 	and.w	r3, r3, #32
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d03c      	beq.n	800fb12 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d01c      	beq.n	800fada <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800faa0:	4b73      	ldr	r3, [pc, #460]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800faa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800faa6:	4a72      	ldr	r2, [pc, #456]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800faa8:	f043 0301 	orr.w	r3, r3, #1
 800faac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fab0:	f7fb fa32 	bl	800af18 <HAL_GetTick>
 800fab4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800fab6:	e008      	b.n	800faca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fab8:	f7fb fa2e 	bl	800af18 <HAL_GetTick>
 800fabc:	4602      	mov	r2, r0
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	1ad3      	subs	r3, r2, r3
 800fac2:	2b02      	cmp	r3, #2
 800fac4:	d901      	bls.n	800faca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800fac6:	2303      	movs	r3, #3
 800fac8:	e122      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800faca:	4b69      	ldr	r3, [pc, #420]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800facc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fad0:	f003 0302 	and.w	r3, r3, #2
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d0ef      	beq.n	800fab8 <HAL_RCC_OscConfig+0x5cc>
 800fad8:	e01b      	b.n	800fb12 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800fada:	4b65      	ldr	r3, [pc, #404]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fadc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fae0:	4a63      	ldr	r2, [pc, #396]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fae2:	f023 0301 	bic.w	r3, r3, #1
 800fae6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800faea:	f7fb fa15 	bl	800af18 <HAL_GetTick>
 800faee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800faf0:	e008      	b.n	800fb04 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800faf2:	f7fb fa11 	bl	800af18 <HAL_GetTick>
 800faf6:	4602      	mov	r2, r0
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	1ad3      	subs	r3, r2, r3
 800fafc:	2b02      	cmp	r3, #2
 800fafe:	d901      	bls.n	800fb04 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800fb00:	2303      	movs	r3, #3
 800fb02:	e105      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800fb04:	4b5a      	ldr	r3, [pc, #360]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fb06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fb0a:	f003 0302 	and.w	r3, r3, #2
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d1ef      	bne.n	800faf2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	f000 80f9 	beq.w	800fd0e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb20:	2b02      	cmp	r3, #2
 800fb22:	f040 80cf 	bne.w	800fcc4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800fb26:	4b52      	ldr	r3, [pc, #328]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fb28:	68db      	ldr	r3, [r3, #12]
 800fb2a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	f003 0203 	and.w	r2, r3, #3
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d12c      	bne.n	800fb94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb44:	3b01      	subs	r3, #1
 800fb46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d123      	bne.n	800fb94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d11b      	bne.n	800fb94 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d113      	bne.n	800fb94 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb76:	085b      	lsrs	r3, r3, #1
 800fb78:	3b01      	subs	r3, #1
 800fb7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d109      	bne.n	800fb94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb8a:	085b      	lsrs	r3, r3, #1
 800fb8c:	3b01      	subs	r3, #1
 800fb8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d071      	beq.n	800fc78 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fb94:	69bb      	ldr	r3, [r7, #24]
 800fb96:	2b0c      	cmp	r3, #12
 800fb98:	d068      	beq.n	800fc6c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800fb9a:	4b35      	ldr	r3, [pc, #212]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d105      	bne.n	800fbb2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800fba6:	4b32      	ldr	r3, [pc, #200]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d001      	beq.n	800fbb6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e0ac      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800fbb6:	4b2e      	ldr	r3, [pc, #184]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	4a2d      	ldr	r2, [pc, #180]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fbbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fbc0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fbc2:	f7fb f9a9 	bl	800af18 <HAL_GetTick>
 800fbc6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fbc8:	e008      	b.n	800fbdc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fbca:	f7fb f9a5 	bl	800af18 <HAL_GetTick>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	1ad3      	subs	r3, r2, r3
 800fbd4:	2b02      	cmp	r3, #2
 800fbd6:	d901      	bls.n	800fbdc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800fbd8:	2303      	movs	r3, #3
 800fbda:	e099      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fbdc:	4b24      	ldr	r3, [pc, #144]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d1f0      	bne.n	800fbca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fbe8:	4b21      	ldr	r3, [pc, #132]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fbea:	68da      	ldr	r2, [r3, #12]
 800fbec:	4b21      	ldr	r3, [pc, #132]	; (800fc74 <HAL_RCC_OscConfig+0x788>)
 800fbee:	4013      	ands	r3, r2
 800fbf0:	687a      	ldr	r2, [r7, #4]
 800fbf2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fbf8:	3a01      	subs	r2, #1
 800fbfa:	0112      	lsls	r2, r2, #4
 800fbfc:	4311      	orrs	r1, r2
 800fbfe:	687a      	ldr	r2, [r7, #4]
 800fc00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800fc02:	0212      	lsls	r2, r2, #8
 800fc04:	4311      	orrs	r1, r2
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800fc0a:	0852      	lsrs	r2, r2, #1
 800fc0c:	3a01      	subs	r2, #1
 800fc0e:	0552      	lsls	r2, r2, #21
 800fc10:	4311      	orrs	r1, r2
 800fc12:	687a      	ldr	r2, [r7, #4]
 800fc14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800fc16:	0852      	lsrs	r2, r2, #1
 800fc18:	3a01      	subs	r2, #1
 800fc1a:	0652      	lsls	r2, r2, #25
 800fc1c:	4311      	orrs	r1, r2
 800fc1e:	687a      	ldr	r2, [r7, #4]
 800fc20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fc22:	06d2      	lsls	r2, r2, #27
 800fc24:	430a      	orrs	r2, r1
 800fc26:	4912      	ldr	r1, [pc, #72]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fc28:	4313      	orrs	r3, r2
 800fc2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800fc2c:	4b10      	ldr	r3, [pc, #64]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4a0f      	ldr	r2, [pc, #60]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fc32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fc36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fc38:	4b0d      	ldr	r3, [pc, #52]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fc3a:	68db      	ldr	r3, [r3, #12]
 800fc3c:	4a0c      	ldr	r2, [pc, #48]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fc3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fc42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fc44:	f7fb f968 	bl	800af18 <HAL_GetTick>
 800fc48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fc4a:	e008      	b.n	800fc5e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fc4c:	f7fb f964 	bl	800af18 <HAL_GetTick>
 800fc50:	4602      	mov	r2, r0
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	1ad3      	subs	r3, r2, r3
 800fc56:	2b02      	cmp	r3, #2
 800fc58:	d901      	bls.n	800fc5e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800fc5a:	2303      	movs	r3, #3
 800fc5c:	e058      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fc5e:	4b04      	ldr	r3, [pc, #16]	; (800fc70 <HAL_RCC_OscConfig+0x784>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d0f0      	beq.n	800fc4c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fc6a:	e050      	b.n	800fd0e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	e04f      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
 800fc70:	40021000 	.word	0x40021000
 800fc74:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fc78:	4b27      	ldr	r3, [pc, #156]	; (800fd18 <HAL_RCC_OscConfig+0x82c>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d144      	bne.n	800fd0e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800fc84:	4b24      	ldr	r3, [pc, #144]	; (800fd18 <HAL_RCC_OscConfig+0x82c>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4a23      	ldr	r2, [pc, #140]	; (800fd18 <HAL_RCC_OscConfig+0x82c>)
 800fc8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fc8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fc90:	4b21      	ldr	r3, [pc, #132]	; (800fd18 <HAL_RCC_OscConfig+0x82c>)
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	4a20      	ldr	r2, [pc, #128]	; (800fd18 <HAL_RCC_OscConfig+0x82c>)
 800fc96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fc9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800fc9c:	f7fb f93c 	bl	800af18 <HAL_GetTick>
 800fca0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fca2:	e008      	b.n	800fcb6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fca4:	f7fb f938 	bl	800af18 <HAL_GetTick>
 800fca8:	4602      	mov	r2, r0
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	1ad3      	subs	r3, r2, r3
 800fcae:	2b02      	cmp	r3, #2
 800fcb0:	d901      	bls.n	800fcb6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800fcb2:	2303      	movs	r3, #3
 800fcb4:	e02c      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fcb6:	4b18      	ldr	r3, [pc, #96]	; (800fd18 <HAL_RCC_OscConfig+0x82c>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d0f0      	beq.n	800fca4 <HAL_RCC_OscConfig+0x7b8>
 800fcc2:	e024      	b.n	800fd0e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	2b0c      	cmp	r3, #12
 800fcc8:	d01f      	beq.n	800fd0a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fcca:	4b13      	ldr	r3, [pc, #76]	; (800fd18 <HAL_RCC_OscConfig+0x82c>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	4a12      	ldr	r2, [pc, #72]	; (800fd18 <HAL_RCC_OscConfig+0x82c>)
 800fcd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fcd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fcd6:	f7fb f91f 	bl	800af18 <HAL_GetTick>
 800fcda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fcdc:	e008      	b.n	800fcf0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fcde:	f7fb f91b 	bl	800af18 <HAL_GetTick>
 800fce2:	4602      	mov	r2, r0
 800fce4:	693b      	ldr	r3, [r7, #16]
 800fce6:	1ad3      	subs	r3, r2, r3
 800fce8:	2b02      	cmp	r3, #2
 800fcea:	d901      	bls.n	800fcf0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800fcec:	2303      	movs	r3, #3
 800fcee:	e00f      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fcf0:	4b09      	ldr	r3, [pc, #36]	; (800fd18 <HAL_RCC_OscConfig+0x82c>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d1f0      	bne.n	800fcde <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800fcfc:	4b06      	ldr	r3, [pc, #24]	; (800fd18 <HAL_RCC_OscConfig+0x82c>)
 800fcfe:	68da      	ldr	r2, [r3, #12]
 800fd00:	4905      	ldr	r1, [pc, #20]	; (800fd18 <HAL_RCC_OscConfig+0x82c>)
 800fd02:	4b06      	ldr	r3, [pc, #24]	; (800fd1c <HAL_RCC_OscConfig+0x830>)
 800fd04:	4013      	ands	r3, r2
 800fd06:	60cb      	str	r3, [r1, #12]
 800fd08:	e001      	b.n	800fd0e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	e000      	b.n	800fd10 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800fd0e:	2300      	movs	r3, #0
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3720      	adds	r7, #32
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	40021000 	.word	0x40021000
 800fd1c:	feeefffc 	.word	0xfeeefffc

0800fd20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d101      	bne.n	800fd34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fd30:	2301      	movs	r3, #1
 800fd32:	e0e7      	b.n	800ff04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fd34:	4b75      	ldr	r3, [pc, #468]	; (800ff0c <HAL_RCC_ClockConfig+0x1ec>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f003 0307 	and.w	r3, r3, #7
 800fd3c:	683a      	ldr	r2, [r7, #0]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d910      	bls.n	800fd64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fd42:	4b72      	ldr	r3, [pc, #456]	; (800ff0c <HAL_RCC_ClockConfig+0x1ec>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f023 0207 	bic.w	r2, r3, #7
 800fd4a:	4970      	ldr	r1, [pc, #448]	; (800ff0c <HAL_RCC_ClockConfig+0x1ec>)
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	4313      	orrs	r3, r2
 800fd50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fd52:	4b6e      	ldr	r3, [pc, #440]	; (800ff0c <HAL_RCC_ClockConfig+0x1ec>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	f003 0307 	and.w	r3, r3, #7
 800fd5a:	683a      	ldr	r2, [r7, #0]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d001      	beq.n	800fd64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800fd60:	2301      	movs	r3, #1
 800fd62:	e0cf      	b.n	800ff04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f003 0302 	and.w	r3, r3, #2
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d010      	beq.n	800fd92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	689a      	ldr	r2, [r3, #8]
 800fd74:	4b66      	ldr	r3, [pc, #408]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fd76:	689b      	ldr	r3, [r3, #8]
 800fd78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d908      	bls.n	800fd92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fd80:	4b63      	ldr	r3, [pc, #396]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fd82:	689b      	ldr	r3, [r3, #8]
 800fd84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	689b      	ldr	r3, [r3, #8]
 800fd8c:	4960      	ldr	r1, [pc, #384]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	f003 0301 	and.w	r3, r3, #1
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d04c      	beq.n	800fe38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	2b03      	cmp	r3, #3
 800fda4:	d107      	bne.n	800fdb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fda6:	4b5a      	ldr	r3, [pc, #360]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d121      	bne.n	800fdf6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	e0a6      	b.n	800ff04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	685b      	ldr	r3, [r3, #4]
 800fdba:	2b02      	cmp	r3, #2
 800fdbc:	d107      	bne.n	800fdce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fdbe:	4b54      	ldr	r3, [pc, #336]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d115      	bne.n	800fdf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800fdca:	2301      	movs	r3, #1
 800fdcc:	e09a      	b.n	800ff04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d107      	bne.n	800fde6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fdd6:	4b4e      	ldr	r3, [pc, #312]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f003 0302 	and.w	r3, r3, #2
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d109      	bne.n	800fdf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800fde2:	2301      	movs	r3, #1
 800fde4:	e08e      	b.n	800ff04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fde6:	4b4a      	ldr	r3, [pc, #296]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d101      	bne.n	800fdf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	e086      	b.n	800ff04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fdf6:	4b46      	ldr	r3, [pc, #280]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fdf8:	689b      	ldr	r3, [r3, #8]
 800fdfa:	f023 0203 	bic.w	r2, r3, #3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	685b      	ldr	r3, [r3, #4]
 800fe02:	4943      	ldr	r1, [pc, #268]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fe04:	4313      	orrs	r3, r2
 800fe06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe08:	f7fb f886 	bl	800af18 <HAL_GetTick>
 800fe0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fe0e:	e00a      	b.n	800fe26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fe10:	f7fb f882 	bl	800af18 <HAL_GetTick>
 800fe14:	4602      	mov	r2, r0
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	1ad3      	subs	r3, r2, r3
 800fe1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d901      	bls.n	800fe26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800fe22:	2303      	movs	r3, #3
 800fe24:	e06e      	b.n	800ff04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fe26:	4b3a      	ldr	r3, [pc, #232]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fe28:	689b      	ldr	r3, [r3, #8]
 800fe2a:	f003 020c 	and.w	r2, r3, #12
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	009b      	lsls	r3, r3, #2
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d1eb      	bne.n	800fe10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	f003 0302 	and.w	r3, r3, #2
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d010      	beq.n	800fe66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	689a      	ldr	r2, [r3, #8]
 800fe48:	4b31      	ldr	r3, [pc, #196]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe50:	429a      	cmp	r2, r3
 800fe52:	d208      	bcs.n	800fe66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fe54:	4b2e      	ldr	r3, [pc, #184]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fe56:	689b      	ldr	r3, [r3, #8]
 800fe58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	689b      	ldr	r3, [r3, #8]
 800fe60:	492b      	ldr	r1, [pc, #172]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fe62:	4313      	orrs	r3, r2
 800fe64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800fe66:	4b29      	ldr	r3, [pc, #164]	; (800ff0c <HAL_RCC_ClockConfig+0x1ec>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	f003 0307 	and.w	r3, r3, #7
 800fe6e:	683a      	ldr	r2, [r7, #0]
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d210      	bcs.n	800fe96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fe74:	4b25      	ldr	r3, [pc, #148]	; (800ff0c <HAL_RCC_ClockConfig+0x1ec>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	f023 0207 	bic.w	r2, r3, #7
 800fe7c:	4923      	ldr	r1, [pc, #140]	; (800ff0c <HAL_RCC_ClockConfig+0x1ec>)
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	4313      	orrs	r3, r2
 800fe82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fe84:	4b21      	ldr	r3, [pc, #132]	; (800ff0c <HAL_RCC_ClockConfig+0x1ec>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	f003 0307 	and.w	r3, r3, #7
 800fe8c:	683a      	ldr	r2, [r7, #0]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d001      	beq.n	800fe96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800fe92:	2301      	movs	r3, #1
 800fe94:	e036      	b.n	800ff04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f003 0304 	and.w	r3, r3, #4
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d008      	beq.n	800feb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fea2:	4b1b      	ldr	r3, [pc, #108]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fea4:	689b      	ldr	r3, [r3, #8]
 800fea6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	4918      	ldr	r1, [pc, #96]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800feb0:	4313      	orrs	r3, r2
 800feb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f003 0308 	and.w	r3, r3, #8
 800febc:	2b00      	cmp	r3, #0
 800febe:	d009      	beq.n	800fed4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800fec0:	4b13      	ldr	r3, [pc, #76]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fec2:	689b      	ldr	r3, [r3, #8]
 800fec4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	691b      	ldr	r3, [r3, #16]
 800fecc:	00db      	lsls	r3, r3, #3
 800fece:	4910      	ldr	r1, [pc, #64]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fed0:	4313      	orrs	r3, r2
 800fed2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800fed4:	f000 f824 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 800fed8:	4602      	mov	r2, r0
 800feda:	4b0d      	ldr	r3, [pc, #52]	; (800ff10 <HAL_RCC_ClockConfig+0x1f0>)
 800fedc:	689b      	ldr	r3, [r3, #8]
 800fede:	091b      	lsrs	r3, r3, #4
 800fee0:	f003 030f 	and.w	r3, r3, #15
 800fee4:	490b      	ldr	r1, [pc, #44]	; (800ff14 <HAL_RCC_ClockConfig+0x1f4>)
 800fee6:	5ccb      	ldrb	r3, [r1, r3]
 800fee8:	f003 031f 	and.w	r3, r3, #31
 800feec:	fa22 f303 	lsr.w	r3, r2, r3
 800fef0:	4a09      	ldr	r2, [pc, #36]	; (800ff18 <HAL_RCC_ClockConfig+0x1f8>)
 800fef2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800fef4:	4b09      	ldr	r3, [pc, #36]	; (800ff1c <HAL_RCC_ClockConfig+0x1fc>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7fa ffbd 	bl	800ae78 <HAL_InitTick>
 800fefe:	4603      	mov	r3, r0
 800ff00:	72fb      	strb	r3, [r7, #11]

  return status;
 800ff02:	7afb      	ldrb	r3, [r7, #11]
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3710      	adds	r7, #16
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}
 800ff0c:	40022000 	.word	0x40022000
 800ff10:	40021000 	.word	0x40021000
 800ff14:	08019bf0 	.word	0x08019bf0
 800ff18:	20000190 	.word	0x20000190
 800ff1c:	2000054c 	.word	0x2000054c

0800ff20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b089      	sub	sp, #36	; 0x24
 800ff24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ff26:	2300      	movs	r3, #0
 800ff28:	61fb      	str	r3, [r7, #28]
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ff2e:	4b3e      	ldr	r3, [pc, #248]	; (8010028 <HAL_RCC_GetSysClockFreq+0x108>)
 800ff30:	689b      	ldr	r3, [r3, #8]
 800ff32:	f003 030c 	and.w	r3, r3, #12
 800ff36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ff38:	4b3b      	ldr	r3, [pc, #236]	; (8010028 <HAL_RCC_GetSysClockFreq+0x108>)
 800ff3a:	68db      	ldr	r3, [r3, #12]
 800ff3c:	f003 0303 	and.w	r3, r3, #3
 800ff40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d005      	beq.n	800ff54 <HAL_RCC_GetSysClockFreq+0x34>
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	2b0c      	cmp	r3, #12
 800ff4c:	d121      	bne.n	800ff92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2b01      	cmp	r3, #1
 800ff52:	d11e      	bne.n	800ff92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ff54:	4b34      	ldr	r3, [pc, #208]	; (8010028 <HAL_RCC_GetSysClockFreq+0x108>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	f003 0308 	and.w	r3, r3, #8
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d107      	bne.n	800ff70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ff60:	4b31      	ldr	r3, [pc, #196]	; (8010028 <HAL_RCC_GetSysClockFreq+0x108>)
 800ff62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff66:	0a1b      	lsrs	r3, r3, #8
 800ff68:	f003 030f 	and.w	r3, r3, #15
 800ff6c:	61fb      	str	r3, [r7, #28]
 800ff6e:	e005      	b.n	800ff7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ff70:	4b2d      	ldr	r3, [pc, #180]	; (8010028 <HAL_RCC_GetSysClockFreq+0x108>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	091b      	lsrs	r3, r3, #4
 800ff76:	f003 030f 	and.w	r3, r3, #15
 800ff7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ff7c:	4a2b      	ldr	r2, [pc, #172]	; (801002c <HAL_RCC_GetSysClockFreq+0x10c>)
 800ff7e:	69fb      	ldr	r3, [r7, #28]
 800ff80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d10d      	bne.n	800ffa8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ff8c:	69fb      	ldr	r3, [r7, #28]
 800ff8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ff90:	e00a      	b.n	800ffa8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	2b04      	cmp	r3, #4
 800ff96:	d102      	bne.n	800ff9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ff98:	4b25      	ldr	r3, [pc, #148]	; (8010030 <HAL_RCC_GetSysClockFreq+0x110>)
 800ff9a:	61bb      	str	r3, [r7, #24]
 800ff9c:	e004      	b.n	800ffa8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	2b08      	cmp	r3, #8
 800ffa2:	d101      	bne.n	800ffa8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ffa4:	4b23      	ldr	r3, [pc, #140]	; (8010034 <HAL_RCC_GetSysClockFreq+0x114>)
 800ffa6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	2b0c      	cmp	r3, #12
 800ffac:	d134      	bne.n	8010018 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ffae:	4b1e      	ldr	r3, [pc, #120]	; (8010028 <HAL_RCC_GetSysClockFreq+0x108>)
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	f003 0303 	and.w	r3, r3, #3
 800ffb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	2b02      	cmp	r3, #2
 800ffbc:	d003      	beq.n	800ffc6 <HAL_RCC_GetSysClockFreq+0xa6>
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	2b03      	cmp	r3, #3
 800ffc2:	d003      	beq.n	800ffcc <HAL_RCC_GetSysClockFreq+0xac>
 800ffc4:	e005      	b.n	800ffd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ffc6:	4b1a      	ldr	r3, [pc, #104]	; (8010030 <HAL_RCC_GetSysClockFreq+0x110>)
 800ffc8:	617b      	str	r3, [r7, #20]
      break;
 800ffca:	e005      	b.n	800ffd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ffcc:	4b19      	ldr	r3, [pc, #100]	; (8010034 <HAL_RCC_GetSysClockFreq+0x114>)
 800ffce:	617b      	str	r3, [r7, #20]
      break;
 800ffd0:	e002      	b.n	800ffd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ffd2:	69fb      	ldr	r3, [r7, #28]
 800ffd4:	617b      	str	r3, [r7, #20]
      break;
 800ffd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ffd8:	4b13      	ldr	r3, [pc, #76]	; (8010028 <HAL_RCC_GetSysClockFreq+0x108>)
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	091b      	lsrs	r3, r3, #4
 800ffde:	f003 0307 	and.w	r3, r3, #7
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ffe6:	4b10      	ldr	r3, [pc, #64]	; (8010028 <HAL_RCC_GetSysClockFreq+0x108>)
 800ffe8:	68db      	ldr	r3, [r3, #12]
 800ffea:	0a1b      	lsrs	r3, r3, #8
 800ffec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fff0:	697a      	ldr	r2, [r7, #20]
 800fff2:	fb03 f202 	mul.w	r2, r3, r2
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	fbb2 f3f3 	udiv	r3, r2, r3
 800fffc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800fffe:	4b0a      	ldr	r3, [pc, #40]	; (8010028 <HAL_RCC_GetSysClockFreq+0x108>)
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	0e5b      	lsrs	r3, r3, #25
 8010004:	f003 0303 	and.w	r3, r3, #3
 8010008:	3301      	adds	r3, #1
 801000a:	005b      	lsls	r3, r3, #1
 801000c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801000e:	697a      	ldr	r2, [r7, #20]
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	fbb2 f3f3 	udiv	r3, r2, r3
 8010016:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8010018:	69bb      	ldr	r3, [r7, #24]
}
 801001a:	4618      	mov	r0, r3
 801001c:	3724      	adds	r7, #36	; 0x24
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr
 8010026:	bf00      	nop
 8010028:	40021000 	.word	0x40021000
 801002c:	08019c08 	.word	0x08019c08
 8010030:	00f42400 	.word	0x00f42400
 8010034:	007a1200 	.word	0x007a1200

08010038 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010038:	b480      	push	{r7}
 801003a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801003c:	4b03      	ldr	r3, [pc, #12]	; (801004c <HAL_RCC_GetHCLKFreq+0x14>)
 801003e:	681b      	ldr	r3, [r3, #0]
}
 8010040:	4618      	mov	r0, r3
 8010042:	46bd      	mov	sp, r7
 8010044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010048:	4770      	bx	lr
 801004a:	bf00      	nop
 801004c:	20000190 	.word	0x20000190

08010050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8010054:	f7ff fff0 	bl	8010038 <HAL_RCC_GetHCLKFreq>
 8010058:	4602      	mov	r2, r0
 801005a:	4b06      	ldr	r3, [pc, #24]	; (8010074 <HAL_RCC_GetPCLK1Freq+0x24>)
 801005c:	689b      	ldr	r3, [r3, #8]
 801005e:	0a1b      	lsrs	r3, r3, #8
 8010060:	f003 0307 	and.w	r3, r3, #7
 8010064:	4904      	ldr	r1, [pc, #16]	; (8010078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010066:	5ccb      	ldrb	r3, [r1, r3]
 8010068:	f003 031f 	and.w	r3, r3, #31
 801006c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010070:	4618      	mov	r0, r3
 8010072:	bd80      	pop	{r7, pc}
 8010074:	40021000 	.word	0x40021000
 8010078:	08019c00 	.word	0x08019c00

0801007c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8010080:	f7ff ffda 	bl	8010038 <HAL_RCC_GetHCLKFreq>
 8010084:	4602      	mov	r2, r0
 8010086:	4b06      	ldr	r3, [pc, #24]	; (80100a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010088:	689b      	ldr	r3, [r3, #8]
 801008a:	0adb      	lsrs	r3, r3, #11
 801008c:	f003 0307 	and.w	r3, r3, #7
 8010090:	4904      	ldr	r1, [pc, #16]	; (80100a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010092:	5ccb      	ldrb	r3, [r1, r3]
 8010094:	f003 031f 	and.w	r3, r3, #31
 8010098:	fa22 f303 	lsr.w	r3, r2, r3
}
 801009c:	4618      	mov	r0, r3
 801009e:	bd80      	pop	{r7, pc}
 80100a0:	40021000 	.word	0x40021000
 80100a4:	08019c00 	.word	0x08019c00

080100a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b086      	sub	sp, #24
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80100b0:	2300      	movs	r3, #0
 80100b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80100b4:	4b2a      	ldr	r3, [pc, #168]	; (8010160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80100b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d003      	beq.n	80100c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80100c0:	f7ff f886 	bl	800f1d0 <HAL_PWREx_GetVoltageRange>
 80100c4:	6178      	str	r0, [r7, #20]
 80100c6:	e014      	b.n	80100f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80100c8:	4b25      	ldr	r3, [pc, #148]	; (8010160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80100ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100cc:	4a24      	ldr	r2, [pc, #144]	; (8010160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80100ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100d2:	6593      	str	r3, [r2, #88]	; 0x58
 80100d4:	4b22      	ldr	r3, [pc, #136]	; (8010160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80100d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80100dc:	60fb      	str	r3, [r7, #12]
 80100de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80100e0:	f7ff f876 	bl	800f1d0 <HAL_PWREx_GetVoltageRange>
 80100e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80100e6:	4b1e      	ldr	r3, [pc, #120]	; (8010160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80100e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100ea:	4a1d      	ldr	r2, [pc, #116]	; (8010160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80100ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80100f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100f8:	d10b      	bne.n	8010112 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2b80      	cmp	r3, #128	; 0x80
 80100fe:	d919      	bls.n	8010134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2ba0      	cmp	r3, #160	; 0xa0
 8010104:	d902      	bls.n	801010c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010106:	2302      	movs	r3, #2
 8010108:	613b      	str	r3, [r7, #16]
 801010a:	e013      	b.n	8010134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801010c:	2301      	movs	r3, #1
 801010e:	613b      	str	r3, [r7, #16]
 8010110:	e010      	b.n	8010134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2b80      	cmp	r3, #128	; 0x80
 8010116:	d902      	bls.n	801011e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8010118:	2303      	movs	r3, #3
 801011a:	613b      	str	r3, [r7, #16]
 801011c:	e00a      	b.n	8010134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2b80      	cmp	r3, #128	; 0x80
 8010122:	d102      	bne.n	801012a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010124:	2302      	movs	r3, #2
 8010126:	613b      	str	r3, [r7, #16]
 8010128:	e004      	b.n	8010134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2b70      	cmp	r3, #112	; 0x70
 801012e:	d101      	bne.n	8010134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010130:	2301      	movs	r3, #1
 8010132:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010134:	4b0b      	ldr	r3, [pc, #44]	; (8010164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	f023 0207 	bic.w	r2, r3, #7
 801013c:	4909      	ldr	r1, [pc, #36]	; (8010164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	4313      	orrs	r3, r2
 8010142:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8010144:	4b07      	ldr	r3, [pc, #28]	; (8010164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f003 0307 	and.w	r3, r3, #7
 801014c:	693a      	ldr	r2, [r7, #16]
 801014e:	429a      	cmp	r2, r3
 8010150:	d001      	beq.n	8010156 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8010152:	2301      	movs	r3, #1
 8010154:	e000      	b.n	8010158 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8010156:	2300      	movs	r3, #0
}
 8010158:	4618      	mov	r0, r3
 801015a:	3718      	adds	r7, #24
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	40021000 	.word	0x40021000
 8010164:	40022000 	.word	0x40022000

08010168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b086      	sub	sp, #24
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010170:	2300      	movs	r3, #0
 8010172:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010174:	2300      	movs	r3, #0
 8010176:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010180:	2b00      	cmp	r3, #0
 8010182:	d041      	beq.n	8010208 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010188:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801018c:	d02a      	beq.n	80101e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801018e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010192:	d824      	bhi.n	80101de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010194:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010198:	d008      	beq.n	80101ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 801019a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801019e:	d81e      	bhi.n	80101de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d00a      	beq.n	80101ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80101a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80101a8:	d010      	beq.n	80101cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80101aa:	e018      	b.n	80101de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80101ac:	4b86      	ldr	r3, [pc, #536]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80101ae:	68db      	ldr	r3, [r3, #12]
 80101b0:	4a85      	ldr	r2, [pc, #532]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80101b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80101b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80101b8:	e015      	b.n	80101e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	3304      	adds	r3, #4
 80101be:	2100      	movs	r1, #0
 80101c0:	4618      	mov	r0, r3
 80101c2:	f001 f895 	bl	80112f0 <RCCEx_PLLSAI1_Config>
 80101c6:	4603      	mov	r3, r0
 80101c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80101ca:	e00c      	b.n	80101e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	3320      	adds	r3, #32
 80101d0:	2100      	movs	r1, #0
 80101d2:	4618      	mov	r0, r3
 80101d4:	f001 f97e 	bl	80114d4 <RCCEx_PLLSAI2_Config>
 80101d8:	4603      	mov	r3, r0
 80101da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80101dc:	e003      	b.n	80101e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80101de:	2301      	movs	r3, #1
 80101e0:	74fb      	strb	r3, [r7, #19]
      break;
 80101e2:	e000      	b.n	80101e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80101e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80101e6:	7cfb      	ldrb	r3, [r7, #19]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d10b      	bne.n	8010204 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80101ec:	4b76      	ldr	r3, [pc, #472]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80101ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101fa:	4973      	ldr	r1, [pc, #460]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80101fc:	4313      	orrs	r3, r2
 80101fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8010202:	e001      	b.n	8010208 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010204:	7cfb      	ldrb	r3, [r7, #19]
 8010206:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010210:	2b00      	cmp	r3, #0
 8010212:	d041      	beq.n	8010298 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010218:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801021c:	d02a      	beq.n	8010274 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 801021e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010222:	d824      	bhi.n	801026e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010224:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010228:	d008      	beq.n	801023c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801022a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801022e:	d81e      	bhi.n	801026e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010230:	2b00      	cmp	r3, #0
 8010232:	d00a      	beq.n	801024a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8010234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010238:	d010      	beq.n	801025c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 801023a:	e018      	b.n	801026e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801023c:	4b62      	ldr	r3, [pc, #392]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	4a61      	ldr	r2, [pc, #388]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010246:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010248:	e015      	b.n	8010276 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	3304      	adds	r3, #4
 801024e:	2100      	movs	r1, #0
 8010250:	4618      	mov	r0, r3
 8010252:	f001 f84d 	bl	80112f0 <RCCEx_PLLSAI1_Config>
 8010256:	4603      	mov	r3, r0
 8010258:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801025a:	e00c      	b.n	8010276 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	3320      	adds	r3, #32
 8010260:	2100      	movs	r1, #0
 8010262:	4618      	mov	r0, r3
 8010264:	f001 f936 	bl	80114d4 <RCCEx_PLLSAI2_Config>
 8010268:	4603      	mov	r3, r0
 801026a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801026c:	e003      	b.n	8010276 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801026e:	2301      	movs	r3, #1
 8010270:	74fb      	strb	r3, [r7, #19]
      break;
 8010272:	e000      	b.n	8010276 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8010274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010276:	7cfb      	ldrb	r3, [r7, #19]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d10b      	bne.n	8010294 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801027c:	4b52      	ldr	r3, [pc, #328]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801027e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010282:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801028a:	494f      	ldr	r1, [pc, #316]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801028c:	4313      	orrs	r3, r2
 801028e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8010292:	e001      	b.n	8010298 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010294:	7cfb      	ldrb	r3, [r7, #19]
 8010296:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f000 80a0 	beq.w	80103e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80102a6:	2300      	movs	r3, #0
 80102a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80102aa:	4b47      	ldr	r3, [pc, #284]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d101      	bne.n	80102ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80102b6:	2301      	movs	r3, #1
 80102b8:	e000      	b.n	80102bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80102ba:	2300      	movs	r3, #0
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d00d      	beq.n	80102dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80102c0:	4b41      	ldr	r3, [pc, #260]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102c4:	4a40      	ldr	r2, [pc, #256]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80102ca:	6593      	str	r3, [r2, #88]	; 0x58
 80102cc:	4b3e      	ldr	r3, [pc, #248]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80102d4:	60bb      	str	r3, [r7, #8]
 80102d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80102d8:	2301      	movs	r3, #1
 80102da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80102dc:	4b3b      	ldr	r3, [pc, #236]	; (80103cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4a3a      	ldr	r2, [pc, #232]	; (80103cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80102e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80102e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80102e8:	f7fa fe16 	bl	800af18 <HAL_GetTick>
 80102ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80102ee:	e009      	b.n	8010304 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80102f0:	f7fa fe12 	bl	800af18 <HAL_GetTick>
 80102f4:	4602      	mov	r2, r0
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	1ad3      	subs	r3, r2, r3
 80102fa:	2b02      	cmp	r3, #2
 80102fc:	d902      	bls.n	8010304 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80102fe:	2303      	movs	r3, #3
 8010300:	74fb      	strb	r3, [r7, #19]
        break;
 8010302:	e005      	b.n	8010310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010304:	4b31      	ldr	r3, [pc, #196]	; (80103cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801030c:	2b00      	cmp	r3, #0
 801030e:	d0ef      	beq.n	80102f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8010310:	7cfb      	ldrb	r3, [r7, #19]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d15c      	bne.n	80103d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8010316:	4b2c      	ldr	r3, [pc, #176]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801031c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010320:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d01f      	beq.n	8010368 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801032e:	697a      	ldr	r2, [r7, #20]
 8010330:	429a      	cmp	r2, r3
 8010332:	d019      	beq.n	8010368 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010334:	4b24      	ldr	r3, [pc, #144]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801033a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801033e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010340:	4b21      	ldr	r3, [pc, #132]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010346:	4a20      	ldr	r2, [pc, #128]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801034c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010350:	4b1d      	ldr	r3, [pc, #116]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010356:	4a1c      	ldr	r2, [pc, #112]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801035c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010360:	4a19      	ldr	r2, [pc, #100]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	f003 0301 	and.w	r3, r3, #1
 801036e:	2b00      	cmp	r3, #0
 8010370:	d016      	beq.n	80103a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010372:	f7fa fdd1 	bl	800af18 <HAL_GetTick>
 8010376:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010378:	e00b      	b.n	8010392 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801037a:	f7fa fdcd 	bl	800af18 <HAL_GetTick>
 801037e:	4602      	mov	r2, r0
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	1ad3      	subs	r3, r2, r3
 8010384:	f241 3288 	movw	r2, #5000	; 0x1388
 8010388:	4293      	cmp	r3, r2
 801038a:	d902      	bls.n	8010392 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 801038c:	2303      	movs	r3, #3
 801038e:	74fb      	strb	r3, [r7, #19]
            break;
 8010390:	e006      	b.n	80103a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010392:	4b0d      	ldr	r3, [pc, #52]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010398:	f003 0302 	and.w	r3, r3, #2
 801039c:	2b00      	cmp	r3, #0
 801039e:	d0ec      	beq.n	801037a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80103a0:	7cfb      	ldrb	r3, [r7, #19]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d10c      	bne.n	80103c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80103a6:	4b08      	ldr	r3, [pc, #32]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80103a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103b6:	4904      	ldr	r1, [pc, #16]	; (80103c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80103b8:	4313      	orrs	r3, r2
 80103ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80103be:	e009      	b.n	80103d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80103c0:	7cfb      	ldrb	r3, [r7, #19]
 80103c2:	74bb      	strb	r3, [r7, #18]
 80103c4:	e006      	b.n	80103d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80103c6:	bf00      	nop
 80103c8:	40021000 	.word	0x40021000
 80103cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103d0:	7cfb      	ldrb	r3, [r7, #19]
 80103d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80103d4:	7c7b      	ldrb	r3, [r7, #17]
 80103d6:	2b01      	cmp	r3, #1
 80103d8:	d105      	bne.n	80103e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80103da:	4ba6      	ldr	r3, [pc, #664]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80103dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103de:	4aa5      	ldr	r2, [pc, #660]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80103e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80103e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	f003 0301 	and.w	r3, r3, #1
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d00a      	beq.n	8010408 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80103f2:	4ba0      	ldr	r3, [pc, #640]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80103f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103f8:	f023 0203 	bic.w	r2, r3, #3
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010400:	499c      	ldr	r1, [pc, #624]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010402:	4313      	orrs	r3, r2
 8010404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	f003 0302 	and.w	r3, r3, #2
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00a      	beq.n	801042a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010414:	4b97      	ldr	r3, [pc, #604]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801041a:	f023 020c 	bic.w	r2, r3, #12
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010422:	4994      	ldr	r1, [pc, #592]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010424:	4313      	orrs	r3, r2
 8010426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	f003 0304 	and.w	r3, r3, #4
 8010432:	2b00      	cmp	r3, #0
 8010434:	d00a      	beq.n	801044c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010436:	4b8f      	ldr	r3, [pc, #572]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801043c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010444:	498b      	ldr	r1, [pc, #556]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010446:	4313      	orrs	r3, r2
 8010448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	f003 0308 	and.w	r3, r3, #8
 8010454:	2b00      	cmp	r3, #0
 8010456:	d00a      	beq.n	801046e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8010458:	4b86      	ldr	r3, [pc, #536]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801045a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801045e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010466:	4983      	ldr	r1, [pc, #524]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010468:	4313      	orrs	r3, r2
 801046a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f003 0310 	and.w	r3, r3, #16
 8010476:	2b00      	cmp	r3, #0
 8010478:	d00a      	beq.n	8010490 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801047a:	4b7e      	ldr	r3, [pc, #504]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801047c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010480:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010488:	497a      	ldr	r1, [pc, #488]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801048a:	4313      	orrs	r3, r2
 801048c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f003 0320 	and.w	r3, r3, #32
 8010498:	2b00      	cmp	r3, #0
 801049a:	d00a      	beq.n	80104b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801049c:	4b75      	ldr	r3, [pc, #468]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801049e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104aa:	4972      	ldr	r1, [pc, #456]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80104ac:	4313      	orrs	r3, r2
 80104ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d00a      	beq.n	80104d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80104be:	4b6d      	ldr	r3, [pc, #436]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80104c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80104cc:	4969      	ldr	r1, [pc, #420]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80104ce:	4313      	orrs	r3, r2
 80104d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d00a      	beq.n	80104f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80104e0:	4b64      	ldr	r3, [pc, #400]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80104e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80104ee:	4961      	ldr	r1, [pc, #388]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80104f0:	4313      	orrs	r3, r2
 80104f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d00a      	beq.n	8010518 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010502:	4b5c      	ldr	r3, [pc, #368]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010508:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010510:	4958      	ldr	r1, [pc, #352]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010512:	4313      	orrs	r3, r2
 8010514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010520:	2b00      	cmp	r3, #0
 8010522:	d00a      	beq.n	801053a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8010524:	4b53      	ldr	r3, [pc, #332]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801052a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010532:	4950      	ldr	r1, [pc, #320]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010534:	4313      	orrs	r3, r2
 8010536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010542:	2b00      	cmp	r3, #0
 8010544:	d00a      	beq.n	801055c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010546:	4b4b      	ldr	r3, [pc, #300]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801054c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010554:	4947      	ldr	r1, [pc, #284]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010556:	4313      	orrs	r3, r2
 8010558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010564:	2b00      	cmp	r3, #0
 8010566:	d00a      	beq.n	801057e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010568:	4b42      	ldr	r3, [pc, #264]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801056a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801056e:	f023 0203 	bic.w	r2, r3, #3
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010576:	493f      	ldr	r1, [pc, #252]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010578:	4313      	orrs	r3, r2
 801057a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010586:	2b00      	cmp	r3, #0
 8010588:	d028      	beq.n	80105dc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801058a:	4b3a      	ldr	r3, [pc, #232]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801058c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010590:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010598:	4936      	ldr	r1, [pc, #216]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801059a:	4313      	orrs	r3, r2
 801059c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80105a8:	d106      	bne.n	80105b8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80105aa:	4b32      	ldr	r3, [pc, #200]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	4a31      	ldr	r2, [pc, #196]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80105b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105b4:	60d3      	str	r3, [r2, #12]
 80105b6:	e011      	b.n	80105dc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80105c0:	d10c      	bne.n	80105dc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	3304      	adds	r3, #4
 80105c6:	2101      	movs	r1, #1
 80105c8:	4618      	mov	r0, r3
 80105ca:	f000 fe91 	bl	80112f0 <RCCEx_PLLSAI1_Config>
 80105ce:	4603      	mov	r3, r0
 80105d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80105d2:	7cfb      	ldrb	r3, [r7, #19]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d001      	beq.n	80105dc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80105d8:	7cfb      	ldrb	r3, [r7, #19]
 80105da:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d028      	beq.n	801063a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80105e8:	4b22      	ldr	r3, [pc, #136]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80105ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105f6:	491f      	ldr	r1, [pc, #124]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80105f8:	4313      	orrs	r3, r2
 80105fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010606:	d106      	bne.n	8010616 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010608:	4b1a      	ldr	r3, [pc, #104]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801060a:	68db      	ldr	r3, [r3, #12]
 801060c:	4a19      	ldr	r2, [pc, #100]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801060e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010612:	60d3      	str	r3, [r2, #12]
 8010614:	e011      	b.n	801063a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801061a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801061e:	d10c      	bne.n	801063a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	3304      	adds	r3, #4
 8010624:	2101      	movs	r1, #1
 8010626:	4618      	mov	r0, r3
 8010628:	f000 fe62 	bl	80112f0 <RCCEx_PLLSAI1_Config>
 801062c:	4603      	mov	r3, r0
 801062e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010630:	7cfb      	ldrb	r3, [r7, #19]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d001      	beq.n	801063a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8010636:	7cfb      	ldrb	r3, [r7, #19]
 8010638:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010642:	2b00      	cmp	r3, #0
 8010644:	d02a      	beq.n	801069c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010646:	4b0b      	ldr	r3, [pc, #44]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801064c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010654:	4907      	ldr	r1, [pc, #28]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010656:	4313      	orrs	r3, r2
 8010658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010664:	d108      	bne.n	8010678 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010666:	4b03      	ldr	r3, [pc, #12]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010668:	68db      	ldr	r3, [r3, #12]
 801066a:	4a02      	ldr	r2, [pc, #8]	; (8010674 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010670:	60d3      	str	r3, [r2, #12]
 8010672:	e013      	b.n	801069c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8010674:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801067c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010680:	d10c      	bne.n	801069c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	3304      	adds	r3, #4
 8010686:	2101      	movs	r1, #1
 8010688:	4618      	mov	r0, r3
 801068a:	f000 fe31 	bl	80112f0 <RCCEx_PLLSAI1_Config>
 801068e:	4603      	mov	r3, r0
 8010690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010692:	7cfb      	ldrb	r3, [r7, #19]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d001      	beq.n	801069c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8010698:	7cfb      	ldrb	r3, [r7, #19]
 801069a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d02f      	beq.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80106a8:	4b2c      	ldr	r3, [pc, #176]	; (801075c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80106aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80106ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106b6:	4929      	ldr	r1, [pc, #164]	; (801075c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80106b8:	4313      	orrs	r3, r2
 80106ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80106c6:	d10d      	bne.n	80106e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	3304      	adds	r3, #4
 80106cc:	2102      	movs	r1, #2
 80106ce:	4618      	mov	r0, r3
 80106d0:	f000 fe0e 	bl	80112f0 <RCCEx_PLLSAI1_Config>
 80106d4:	4603      	mov	r3, r0
 80106d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80106d8:	7cfb      	ldrb	r3, [r7, #19]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d014      	beq.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80106de:	7cfb      	ldrb	r3, [r7, #19]
 80106e0:	74bb      	strb	r3, [r7, #18]
 80106e2:	e011      	b.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106ec:	d10c      	bne.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	3320      	adds	r3, #32
 80106f2:	2102      	movs	r1, #2
 80106f4:	4618      	mov	r0, r3
 80106f6:	f000 feed 	bl	80114d4 <RCCEx_PLLSAI2_Config>
 80106fa:	4603      	mov	r3, r0
 80106fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80106fe:	7cfb      	ldrb	r3, [r7, #19]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d001      	beq.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8010704:	7cfb      	ldrb	r3, [r7, #19]
 8010706:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010710:	2b00      	cmp	r3, #0
 8010712:	d00b      	beq.n	801072c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010714:	4b11      	ldr	r3, [pc, #68]	; (801075c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801071a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010724:	490d      	ldr	r1, [pc, #52]	; (801075c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010726:	4313      	orrs	r3, r2
 8010728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010734:	2b00      	cmp	r3, #0
 8010736:	d00b      	beq.n	8010750 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010738:	4b08      	ldr	r3, [pc, #32]	; (801075c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 801073a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801073e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010748:	4904      	ldr	r1, [pc, #16]	; (801075c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 801074a:	4313      	orrs	r3, r2
 801074c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8010750:	7cbb      	ldrb	r3, [r7, #18]
}
 8010752:	4618      	mov	r0, r3
 8010754:	3718      	adds	r7, #24
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
 801075a:	bf00      	nop
 801075c:	40021000 	.word	0x40021000

08010760 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b088      	sub	sp, #32
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8010768:	2300      	movs	r3, #0
 801076a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010772:	d13e      	bne.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8010774:	4bb4      	ldr	r3, [pc, #720]	; (8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801077a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801077e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010786:	d028      	beq.n	80107da <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801078e:	f200 858c 	bhi.w	80112aa <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010798:	d005      	beq.n	80107a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107a0:	d00e      	beq.n	80107c0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80107a2:	f000 bd82 	b.w	80112aa <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80107a6:	4ba8      	ldr	r3, [pc, #672]	; (8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80107a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107ac:	f003 0302 	and.w	r3, r3, #2
 80107b0:	2b02      	cmp	r3, #2
 80107b2:	f040 857c 	bne.w	80112ae <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 80107b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80107ba:	61fb      	str	r3, [r7, #28]
      break;
 80107bc:	f000 bd77 	b.w	80112ae <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80107c0:	4ba1      	ldr	r3, [pc, #644]	; (8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80107c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80107c6:	f003 0302 	and.w	r3, r3, #2
 80107ca:	2b02      	cmp	r3, #2
 80107cc:	f040 8571 	bne.w	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 80107d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80107d4:	61fb      	str	r3, [r7, #28]
      break;
 80107d6:	f000 bd6c 	b.w	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80107da:	4b9b      	ldr	r3, [pc, #620]	; (8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107e6:	f040 8566 	bne.w	80112b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 80107ea:	4b98      	ldr	r3, [pc, #608]	; (8010a4c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80107ec:	61fb      	str	r3, [r7, #28]
      break;
 80107ee:	f000 bd62 	b.w	80112b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80107f2:	4b95      	ldr	r3, [pc, #596]	; (8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80107f4:	68db      	ldr	r3, [r3, #12]
 80107f6:	f003 0303 	and.w	r3, r3, #3
 80107fa:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	2b03      	cmp	r3, #3
 8010800:	d036      	beq.n	8010870 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	2b03      	cmp	r3, #3
 8010806:	d840      	bhi.n	801088a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	2b01      	cmp	r3, #1
 801080c:	d003      	beq.n	8010816 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	2b02      	cmp	r3, #2
 8010812:	d020      	beq.n	8010856 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8010814:	e039      	b.n	801088a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8010816:	4b8c      	ldr	r3, [pc, #560]	; (8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f003 0302 	and.w	r3, r3, #2
 801081e:	2b02      	cmp	r3, #2
 8010820:	d116      	bne.n	8010850 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8010822:	4b89      	ldr	r3, [pc, #548]	; (8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f003 0308 	and.w	r3, r3, #8
 801082a:	2b00      	cmp	r3, #0
 801082c:	d005      	beq.n	801083a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 801082e:	4b86      	ldr	r3, [pc, #536]	; (8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	091b      	lsrs	r3, r3, #4
 8010834:	f003 030f 	and.w	r3, r3, #15
 8010838:	e005      	b.n	8010846 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 801083a:	4b83      	ldr	r3, [pc, #524]	; (8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 801083c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010840:	0a1b      	lsrs	r3, r3, #8
 8010842:	f003 030f 	and.w	r3, r3, #15
 8010846:	4a82      	ldr	r2, [pc, #520]	; (8010a50 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8010848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801084c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 801084e:	e01f      	b.n	8010890 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8010850:	2300      	movs	r3, #0
 8010852:	61bb      	str	r3, [r7, #24]
      break;
 8010854:	e01c      	b.n	8010890 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010856:	4b7c      	ldr	r3, [pc, #496]	; (8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801085e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010862:	d102      	bne.n	801086a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8010864:	4b7b      	ldr	r3, [pc, #492]	; (8010a54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8010866:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8010868:	e012      	b.n	8010890 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 801086a:	2300      	movs	r3, #0
 801086c:	61bb      	str	r3, [r7, #24]
      break;
 801086e:	e00f      	b.n	8010890 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010870:	4b75      	ldr	r3, [pc, #468]	; (8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801087c:	d102      	bne.n	8010884 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 801087e:	4b76      	ldr	r3, [pc, #472]	; (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8010880:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8010882:	e005      	b.n	8010890 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8010884:	2300      	movs	r3, #0
 8010886:	61bb      	str	r3, [r7, #24]
      break;
 8010888:	e002      	b.n	8010890 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 801088a:	2300      	movs	r3, #0
 801088c:	61bb      	str	r3, [r7, #24]
      break;
 801088e:	bf00      	nop
    }

    switch(PeriphClk)
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010896:	f000 842a 	beq.w	80110ee <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80108a0:	f200 850b 	bhi.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80108aa:	f000 80df 	beq.w	8010a6c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80108b4:	f200 8501 	bhi.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80108be:	f000 80d5 	beq.w	8010a6c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80108c8:	f200 84f7 	bhi.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108d2:	f000 8377 	beq.w	8010fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108dc:	f200 84ed 	bhi.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80108e6:	f000 84c3 	beq.w	8011270 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80108f0:	f200 84e3 	bhi.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80108fa:	f000 82e6 	beq.w	8010eca <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010904:	f200 84d9 	bhi.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801090e:	f000 80ad 	beq.w	8010a6c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010918:	f200 84cf 	bhi.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010922:	f000 809b 	beq.w	8010a5c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801092c:	f200 84c5 	bhi.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010936:	d07f      	beq.n	8010a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801093e:	f200 84bc 	bhi.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010948:	f000 8448 	beq.w	80111dc <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010952:	f200 84b2 	bhi.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801095c:	f000 83f0 	beq.w	8011140 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010966:	f200 84a8 	bhi.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010970:	f000 8391 	beq.w	8011096 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801097a:	f200 849e 	bhi.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2b80      	cmp	r3, #128	; 0x80
 8010982:	f000 835c 	beq.w	801103e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	2b80      	cmp	r3, #128	; 0x80
 801098a:	f200 8496 	bhi.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2b20      	cmp	r3, #32
 8010992:	d84b      	bhi.n	8010a2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2b00      	cmp	r3, #0
 8010998:	f000 848f 	beq.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	3b01      	subs	r3, #1
 80109a0:	2b1f      	cmp	r3, #31
 80109a2:	f200 848a 	bhi.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80109a6:	a201      	add	r2, pc, #4	; (adr r2, 80109ac <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 80109a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109ac:	08010bc3 	.word	0x08010bc3
 80109b0:	08010c33 	.word	0x08010c33
 80109b4:	080112bb 	.word	0x080112bb
 80109b8:	08010cc7 	.word	0x08010cc7
 80109bc:	080112bb 	.word	0x080112bb
 80109c0:	080112bb 	.word	0x080112bb
 80109c4:	080112bb 	.word	0x080112bb
 80109c8:	08010d4f 	.word	0x08010d4f
 80109cc:	080112bb 	.word	0x080112bb
 80109d0:	080112bb 	.word	0x080112bb
 80109d4:	080112bb 	.word	0x080112bb
 80109d8:	080112bb 	.word	0x080112bb
 80109dc:	080112bb 	.word	0x080112bb
 80109e0:	080112bb 	.word	0x080112bb
 80109e4:	080112bb 	.word	0x080112bb
 80109e8:	08010dc7 	.word	0x08010dc7
 80109ec:	080112bb 	.word	0x080112bb
 80109f0:	080112bb 	.word	0x080112bb
 80109f4:	080112bb 	.word	0x080112bb
 80109f8:	080112bb 	.word	0x080112bb
 80109fc:	080112bb 	.word	0x080112bb
 8010a00:	080112bb 	.word	0x080112bb
 8010a04:	080112bb 	.word	0x080112bb
 8010a08:	080112bb 	.word	0x080112bb
 8010a0c:	080112bb 	.word	0x080112bb
 8010a10:	080112bb 	.word	0x080112bb
 8010a14:	080112bb 	.word	0x080112bb
 8010a18:	080112bb 	.word	0x080112bb
 8010a1c:	080112bb 	.word	0x080112bb
 8010a20:	080112bb 	.word	0x080112bb
 8010a24:	080112bb 	.word	0x080112bb
 8010a28:	08010e49 	.word	0x08010e49
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2b40      	cmp	r3, #64	; 0x40
 8010a30:	f000 82d9 	beq.w	8010fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8010a34:	f000 bc41 	b.w	80112ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8010a38:	69b9      	ldr	r1, [r7, #24]
 8010a3a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010a3e:	f000 fe25 	bl	801168c <RCCEx_GetSAIxPeriphCLKFreq>
 8010a42:	61f8      	str	r0, [r7, #28]
      break;
 8010a44:	f000 bc3a 	b.w	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8010a48:	40021000 	.word	0x40021000
 8010a4c:	0003d090 	.word	0x0003d090
 8010a50:	08019c08 	.word	0x08019c08
 8010a54:	00f42400 	.word	0x00f42400
 8010a58:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8010a5c:	69b9      	ldr	r1, [r7, #24]
 8010a5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8010a62:	f000 fe13 	bl	801168c <RCCEx_GetSAIxPeriphCLKFreq>
 8010a66:	61f8      	str	r0, [r7, #28]
      break;
 8010a68:	f000 bc28 	b.w	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8010a6c:	4ba6      	ldr	r3, [pc, #664]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a72:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8010a76:	613b      	str	r3, [r7, #16]
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010a7e:	d015      	beq.n	8010aac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8010a80:	693b      	ldr	r3, [r7, #16]
 8010a82:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010a86:	f200 8092 	bhi.w	8010bae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010a8a:	693b      	ldr	r3, [r7, #16]
 8010a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010a90:	d029      	beq.n	8010ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010a98:	f200 8089 	bhi.w	8010bae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010a9c:	693b      	ldr	r3, [r7, #16]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d07b      	beq.n	8010b9a <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010aa8:	d04a      	beq.n	8010b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 8010aaa:	e080      	b.n	8010bae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8010aac:	4b96      	ldr	r3, [pc, #600]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f003 0302 	and.w	r3, r3, #2
 8010ab4:	2b02      	cmp	r3, #2
 8010ab6:	d17c      	bne.n	8010bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8010ab8:	4b93      	ldr	r3, [pc, #588]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f003 0308 	and.w	r3, r3, #8
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d005      	beq.n	8010ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8010ac4:	4b90      	ldr	r3, [pc, #576]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	091b      	lsrs	r3, r3, #4
 8010aca:	f003 030f 	and.w	r3, r3, #15
 8010ace:	e005      	b.n	8010adc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8010ad0:	4b8d      	ldr	r3, [pc, #564]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010ad6:	0a1b      	lsrs	r3, r3, #8
 8010ad8:	f003 030f 	and.w	r3, r3, #15
 8010adc:	4a8b      	ldr	r2, [pc, #556]	; (8010d0c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8010ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ae2:	61fb      	str	r3, [r7, #28]
          break;
 8010ae4:	e065      	b.n	8010bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8010ae6:	4b88      	ldr	r3, [pc, #544]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010aee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010af2:	d160      	bne.n	8010bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8010af4:	4b84      	ldr	r3, [pc, #528]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010af6:	68db      	ldr	r3, [r3, #12]
 8010af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010afc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b00:	d159      	bne.n	8010bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8010b02:	4b81      	ldr	r3, [pc, #516]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010b04:	68db      	ldr	r3, [r3, #12]
 8010b06:	0a1b      	lsrs	r3, r3, #8
 8010b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b0c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8010b0e:	69bb      	ldr	r3, [r7, #24]
 8010b10:	68fa      	ldr	r2, [r7, #12]
 8010b12:	fb03 f202 	mul.w	r2, r3, r2
 8010b16:	4b7c      	ldr	r3, [pc, #496]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010b18:	68db      	ldr	r3, [r3, #12]
 8010b1a:	091b      	lsrs	r3, r3, #4
 8010b1c:	f003 0307 	and.w	r3, r3, #7
 8010b20:	3301      	adds	r3, #1
 8010b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b26:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8010b28:	4b77      	ldr	r3, [pc, #476]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010b2a:	68db      	ldr	r3, [r3, #12]
 8010b2c:	0d5b      	lsrs	r3, r3, #21
 8010b2e:	f003 0303 	and.w	r3, r3, #3
 8010b32:	3301      	adds	r3, #1
 8010b34:	005b      	lsls	r3, r3, #1
 8010b36:	69ba      	ldr	r2, [r7, #24]
 8010b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b3c:	61fb      	str	r3, [r7, #28]
          break;
 8010b3e:	e03a      	b.n	8010bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8010b40:	4b71      	ldr	r3, [pc, #452]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010b4c:	d135      	bne.n	8010bba <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8010b4e:	4b6e      	ldr	r3, [pc, #440]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010b50:	691b      	ldr	r3, [r3, #16]
 8010b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b5a:	d12e      	bne.n	8010bba <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8010b5c:	4b6a      	ldr	r3, [pc, #424]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010b5e:	691b      	ldr	r3, [r3, #16]
 8010b60:	0a1b      	lsrs	r3, r3, #8
 8010b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b66:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8010b68:	69bb      	ldr	r3, [r7, #24]
 8010b6a:	68fa      	ldr	r2, [r7, #12]
 8010b6c:	fb03 f202 	mul.w	r2, r3, r2
 8010b70:	4b65      	ldr	r3, [pc, #404]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010b72:	68db      	ldr	r3, [r3, #12]
 8010b74:	091b      	lsrs	r3, r3, #4
 8010b76:	f003 0307 	and.w	r3, r3, #7
 8010b7a:	3301      	adds	r3, #1
 8010b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b80:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8010b82:	4b61      	ldr	r3, [pc, #388]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010b84:	691b      	ldr	r3, [r3, #16]
 8010b86:	0d5b      	lsrs	r3, r3, #21
 8010b88:	f003 0303 	and.w	r3, r3, #3
 8010b8c:	3301      	adds	r3, #1
 8010b8e:	005b      	lsls	r3, r3, #1
 8010b90:	69ba      	ldr	r2, [r7, #24]
 8010b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b96:	61fb      	str	r3, [r7, #28]
          break;
 8010b98:	e00f      	b.n	8010bba <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8010b9a:	4b5b      	ldr	r3, [pc, #364]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010ba0:	f003 0302 	and.w	r3, r3, #2
 8010ba4:	2b02      	cmp	r3, #2
 8010ba6:	d10a      	bne.n	8010bbe <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8010ba8:	4b59      	ldr	r3, [pc, #356]	; (8010d10 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8010baa:	61fb      	str	r3, [r7, #28]
          break;
 8010bac:	e007      	b.n	8010bbe <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 8010bae:	bf00      	nop
 8010bb0:	e384      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010bb2:	bf00      	nop
 8010bb4:	e382      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010bb6:	bf00      	nop
 8010bb8:	e380      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010bba:	bf00      	nop
 8010bbc:	e37e      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010bbe:	bf00      	nop
        break;
 8010bc0:	e37c      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8010bc2:	4b51      	ldr	r3, [pc, #324]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bc8:	f003 0303 	and.w	r3, r3, #3
 8010bcc:	613b      	str	r3, [r7, #16]
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	2b03      	cmp	r3, #3
 8010bd2:	d828      	bhi.n	8010c26 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8010bd4:	a201      	add	r2, pc, #4	; (adr r2, 8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8010bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bda:	bf00      	nop
 8010bdc:	08010bed 	.word	0x08010bed
 8010be0:	08010bf5 	.word	0x08010bf5
 8010be4:	08010bfd 	.word	0x08010bfd
 8010be8:	08010c11 	.word	0x08010c11
          frequency = HAL_RCC_GetPCLK2Freq();
 8010bec:	f7ff fa46 	bl	801007c <HAL_RCC_GetPCLK2Freq>
 8010bf0:	61f8      	str	r0, [r7, #28]
          break;
 8010bf2:	e01d      	b.n	8010c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8010bf4:	f7ff f994 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 8010bf8:	61f8      	str	r0, [r7, #28]
          break;
 8010bfa:	e019      	b.n	8010c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010bfc:	4b42      	ldr	r3, [pc, #264]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c08:	d10f      	bne.n	8010c2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 8010c0a:	4b42      	ldr	r3, [pc, #264]	; (8010d14 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8010c0c:	61fb      	str	r3, [r7, #28]
          break;
 8010c0e:	e00c      	b.n	8010c2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010c10:	4b3d      	ldr	r3, [pc, #244]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c16:	f003 0302 	and.w	r3, r3, #2
 8010c1a:	2b02      	cmp	r3, #2
 8010c1c:	d107      	bne.n	8010c2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 8010c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c22:	61fb      	str	r3, [r7, #28]
          break;
 8010c24:	e003      	b.n	8010c2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8010c26:	bf00      	nop
 8010c28:	e348      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010c2a:	bf00      	nop
 8010c2c:	e346      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010c2e:	bf00      	nop
        break;
 8010c30:	e344      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8010c32:	4b35      	ldr	r3, [pc, #212]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c38:	f003 030c 	and.w	r3, r3, #12
 8010c3c:	613b      	str	r3, [r7, #16]
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	2b0c      	cmp	r3, #12
 8010c42:	d83a      	bhi.n	8010cba <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8010c44:	a201      	add	r2, pc, #4	; (adr r2, 8010c4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8010c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c4a:	bf00      	nop
 8010c4c:	08010c81 	.word	0x08010c81
 8010c50:	08010cbb 	.word	0x08010cbb
 8010c54:	08010cbb 	.word	0x08010cbb
 8010c58:	08010cbb 	.word	0x08010cbb
 8010c5c:	08010c89 	.word	0x08010c89
 8010c60:	08010cbb 	.word	0x08010cbb
 8010c64:	08010cbb 	.word	0x08010cbb
 8010c68:	08010cbb 	.word	0x08010cbb
 8010c6c:	08010c91 	.word	0x08010c91
 8010c70:	08010cbb 	.word	0x08010cbb
 8010c74:	08010cbb 	.word	0x08010cbb
 8010c78:	08010cbb 	.word	0x08010cbb
 8010c7c:	08010ca5 	.word	0x08010ca5
          frequency = HAL_RCC_GetPCLK1Freq();
 8010c80:	f7ff f9e6 	bl	8010050 <HAL_RCC_GetPCLK1Freq>
 8010c84:	61f8      	str	r0, [r7, #28]
          break;
 8010c86:	e01d      	b.n	8010cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8010c88:	f7ff f94a 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 8010c8c:	61f8      	str	r0, [r7, #28]
          break;
 8010c8e:	e019      	b.n	8010cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010c90:	4b1d      	ldr	r3, [pc, #116]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c9c:	d10f      	bne.n	8010cbe <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 8010c9e:	4b1d      	ldr	r3, [pc, #116]	; (8010d14 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8010ca0:	61fb      	str	r3, [r7, #28]
          break;
 8010ca2:	e00c      	b.n	8010cbe <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010ca4:	4b18      	ldr	r3, [pc, #96]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010caa:	f003 0302 	and.w	r3, r3, #2
 8010cae:	2b02      	cmp	r3, #2
 8010cb0:	d107      	bne.n	8010cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 8010cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010cb6:	61fb      	str	r3, [r7, #28]
          break;
 8010cb8:	e003      	b.n	8010cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 8010cba:	bf00      	nop
 8010cbc:	e2fe      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010cbe:	bf00      	nop
 8010cc0:	e2fc      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010cc2:	bf00      	nop
        break;
 8010cc4:	e2fa      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8010cc6:	4b10      	ldr	r3, [pc, #64]	; (8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ccc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010cd0:	613b      	str	r3, [r7, #16]
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	2b30      	cmp	r3, #48	; 0x30
 8010cd6:	d029      	beq.n	8010d2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8010cd8:	693b      	ldr	r3, [r7, #16]
 8010cda:	2b30      	cmp	r3, #48	; 0x30
 8010cdc:	d831      	bhi.n	8010d42 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	2b20      	cmp	r3, #32
 8010ce2:	d019      	beq.n	8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	2b20      	cmp	r3, #32
 8010ce8:	d82b      	bhi.n	8010d42 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8010cea:	693b      	ldr	r3, [r7, #16]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d003      	beq.n	8010cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	2b10      	cmp	r3, #16
 8010cf4:	d004      	beq.n	8010d00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8010cf6:	e024      	b.n	8010d42 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8010cf8:	f7ff f9aa 	bl	8010050 <HAL_RCC_GetPCLK1Freq>
 8010cfc:	61f8      	str	r0, [r7, #28]
          break;
 8010cfe:	e025      	b.n	8010d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8010d00:	f7ff f90e 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 8010d04:	61f8      	str	r0, [r7, #28]
          break;
 8010d06:	e021      	b.n	8010d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8010d08:	40021000 	.word	0x40021000
 8010d0c:	08019c08 	.word	0x08019c08
 8010d10:	02dc6c00 	.word	0x02dc6c00
 8010d14:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010d18:	4b8f      	ldr	r3, [pc, #572]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010d24:	d10f      	bne.n	8010d46 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 8010d26:	4b8d      	ldr	r3, [pc, #564]	; (8010f5c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8010d28:	61fb      	str	r3, [r7, #28]
          break;
 8010d2a:	e00c      	b.n	8010d46 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010d2c:	4b8a      	ldr	r3, [pc, #552]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d32:	f003 0302 	and.w	r3, r3, #2
 8010d36:	2b02      	cmp	r3, #2
 8010d38:	d107      	bne.n	8010d4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 8010d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d3e:	61fb      	str	r3, [r7, #28]
          break;
 8010d40:	e003      	b.n	8010d4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 8010d42:	bf00      	nop
 8010d44:	e2ba      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010d46:	bf00      	nop
 8010d48:	e2b8      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010d4a:	bf00      	nop
        break;
 8010d4c:	e2b6      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8010d4e:	4b82      	ldr	r3, [pc, #520]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010d58:	613b      	str	r3, [r7, #16]
 8010d5a:	693b      	ldr	r3, [r7, #16]
 8010d5c:	2bc0      	cmp	r3, #192	; 0xc0
 8010d5e:	d021      	beq.n	8010da4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010d60:	693b      	ldr	r3, [r7, #16]
 8010d62:	2bc0      	cmp	r3, #192	; 0xc0
 8010d64:	d829      	bhi.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8010d66:	693b      	ldr	r3, [r7, #16]
 8010d68:	2b80      	cmp	r3, #128	; 0x80
 8010d6a:	d011      	beq.n	8010d90 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	2b80      	cmp	r3, #128	; 0x80
 8010d70:	d823      	bhi.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d003      	beq.n	8010d80 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8010d78:	693b      	ldr	r3, [r7, #16]
 8010d7a:	2b40      	cmp	r3, #64	; 0x40
 8010d7c:	d004      	beq.n	8010d88 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 8010d7e:	e01c      	b.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8010d80:	f7ff f966 	bl	8010050 <HAL_RCC_GetPCLK1Freq>
 8010d84:	61f8      	str	r0, [r7, #28]
          break;
 8010d86:	e01d      	b.n	8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8010d88:	f7ff f8ca 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 8010d8c:	61f8      	str	r0, [r7, #28]
          break;
 8010d8e:	e019      	b.n	8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010d90:	4b71      	ldr	r3, [pc, #452]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010d9c:	d10f      	bne.n	8010dbe <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 8010d9e:	4b6f      	ldr	r3, [pc, #444]	; (8010f5c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8010da0:	61fb      	str	r3, [r7, #28]
          break;
 8010da2:	e00c      	b.n	8010dbe <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010da4:	4b6c      	ldr	r3, [pc, #432]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010daa:	f003 0302 	and.w	r3, r3, #2
 8010dae:	2b02      	cmp	r3, #2
 8010db0:	d107      	bne.n	8010dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 8010db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010db6:	61fb      	str	r3, [r7, #28]
          break;
 8010db8:	e003      	b.n	8010dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 8010dba:	bf00      	nop
 8010dbc:	e27e      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010dbe:	bf00      	nop
 8010dc0:	e27c      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010dc2:	bf00      	nop
        break;
 8010dc4:	e27a      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8010dc6:	4b64      	ldr	r3, [pc, #400]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010dd0:	613b      	str	r3, [r7, #16]
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010dd8:	d025      	beq.n	8010e26 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010de0:	d82c      	bhi.n	8010e3c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010de8:	d013      	beq.n	8010e12 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010df0:	d824      	bhi.n	8010e3c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d004      	beq.n	8010e02 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010dfe:	d004      	beq.n	8010e0a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 8010e00:	e01c      	b.n	8010e3c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8010e02:	f7ff f925 	bl	8010050 <HAL_RCC_GetPCLK1Freq>
 8010e06:	61f8      	str	r0, [r7, #28]
          break;
 8010e08:	e01d      	b.n	8010e46 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 8010e0a:	f7ff f889 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 8010e0e:	61f8      	str	r0, [r7, #28]
          break;
 8010e10:	e019      	b.n	8010e46 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010e12:	4b51      	ldr	r3, [pc, #324]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e1e:	d10f      	bne.n	8010e40 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 8010e20:	4b4e      	ldr	r3, [pc, #312]	; (8010f5c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8010e22:	61fb      	str	r3, [r7, #28]
          break;
 8010e24:	e00c      	b.n	8010e40 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010e26:	4b4c      	ldr	r3, [pc, #304]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e2c:	f003 0302 	and.w	r3, r3, #2
 8010e30:	2b02      	cmp	r3, #2
 8010e32:	d107      	bne.n	8010e44 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 8010e34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e38:	61fb      	str	r3, [r7, #28]
          break;
 8010e3a:	e003      	b.n	8010e44 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 8010e3c:	bf00      	nop
 8010e3e:	e23d      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010e40:	bf00      	nop
 8010e42:	e23b      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010e44:	bf00      	nop
        break;
 8010e46:	e239      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8010e48:	4b43      	ldr	r3, [pc, #268]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e4e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010e52:	613b      	str	r3, [r7, #16]
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010e5a:	d025      	beq.n	8010ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010e62:	d82c      	bhi.n	8010ebe <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8010e64:	693b      	ldr	r3, [r7, #16]
 8010e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010e6a:	d013      	beq.n	8010e94 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010e72:	d824      	bhi.n	8010ebe <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d004      	beq.n	8010e84 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e80:	d004      	beq.n	8010e8c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 8010e82:	e01c      	b.n	8010ebe <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8010e84:	f7ff f8e4 	bl	8010050 <HAL_RCC_GetPCLK1Freq>
 8010e88:	61f8      	str	r0, [r7, #28]
          break;
 8010e8a:	e01d      	b.n	8010ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 8010e8c:	f7ff f848 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 8010e90:	61f8      	str	r0, [r7, #28]
          break;
 8010e92:	e019      	b.n	8010ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010e94:	4b30      	ldr	r3, [pc, #192]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ea0:	d10f      	bne.n	8010ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 8010ea2:	4b2e      	ldr	r3, [pc, #184]	; (8010f5c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8010ea4:	61fb      	str	r3, [r7, #28]
          break;
 8010ea6:	e00c      	b.n	8010ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010ea8:	4b2b      	ldr	r3, [pc, #172]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010eae:	f003 0302 	and.w	r3, r3, #2
 8010eb2:	2b02      	cmp	r3, #2
 8010eb4:	d107      	bne.n	8010ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 8010eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010eba:	61fb      	str	r3, [r7, #28]
          break;
 8010ebc:	e003      	b.n	8010ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 8010ebe:	bf00      	nop
 8010ec0:	e1fc      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010ec2:	bf00      	nop
 8010ec4:	e1fa      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010ec6:	bf00      	nop
        break;
 8010ec8:	e1f8      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010eca:	4b23      	ldr	r3, [pc, #140]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010ed4:	613b      	str	r3, [r7, #16]
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010edc:	d00c      	beq.n	8010ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010ee4:	d868      	bhi.n	8010fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010eec:	d008      	beq.n	8010f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010ef4:	d034      	beq.n	8010f60 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 8010ef6:	e05f      	b.n	8010fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 8010ef8:	f7ff f812 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 8010efc:	61f8      	str	r0, [r7, #28]
          break;
 8010efe:	e060      	b.n	8010fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8010f00:	4b15      	ldr	r3, [pc, #84]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010f0c:	d156      	bne.n	8010fbc <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8010f0e:	4b12      	ldr	r3, [pc, #72]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010f10:	691b      	ldr	r3, [r3, #16]
 8010f12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d050      	beq.n	8010fbc <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8010f1a:	4b0f      	ldr	r3, [pc, #60]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010f1c:	691b      	ldr	r3, [r3, #16]
 8010f1e:	0a1b      	lsrs	r3, r3, #8
 8010f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f24:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8010f26:	69bb      	ldr	r3, [r7, #24]
 8010f28:	68fa      	ldr	r2, [r7, #12]
 8010f2a:	fb03 f202 	mul.w	r2, r3, r2
 8010f2e:	4b0a      	ldr	r3, [pc, #40]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010f30:	68db      	ldr	r3, [r3, #12]
 8010f32:	091b      	lsrs	r3, r3, #4
 8010f34:	f003 0307 	and.w	r3, r3, #7
 8010f38:	3301      	adds	r3, #1
 8010f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f3e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8010f40:	4b05      	ldr	r3, [pc, #20]	; (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010f42:	691b      	ldr	r3, [r3, #16]
 8010f44:	0e5b      	lsrs	r3, r3, #25
 8010f46:	f003 0303 	and.w	r3, r3, #3
 8010f4a:	3301      	adds	r3, #1
 8010f4c:	005b      	lsls	r3, r3, #1
 8010f4e:	69ba      	ldr	r2, [r7, #24]
 8010f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f54:	61fb      	str	r3, [r7, #28]
          break;
 8010f56:	e031      	b.n	8010fbc <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8010f58:	40021000 	.word	0x40021000
 8010f5c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8010f60:	4b9c      	ldr	r3, [pc, #624]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010f6c:	d128      	bne.n	8010fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 8010f6e:	4b99      	ldr	r3, [pc, #612]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010f70:	695b      	ldr	r3, [r3, #20]
 8010f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d022      	beq.n	8010fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8010f7a:	4b96      	ldr	r3, [pc, #600]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010f7c:	695b      	ldr	r3, [r3, #20]
 8010f7e:	0a1b      	lsrs	r3, r3, #8
 8010f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f84:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8010f86:	69bb      	ldr	r3, [r7, #24]
 8010f88:	68fa      	ldr	r2, [r7, #12]
 8010f8a:	fb03 f202 	mul.w	r2, r3, r2
 8010f8e:	4b91      	ldr	r3, [pc, #580]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010f90:	68db      	ldr	r3, [r3, #12]
 8010f92:	091b      	lsrs	r3, r3, #4
 8010f94:	f003 0307 	and.w	r3, r3, #7
 8010f98:	3301      	adds	r3, #1
 8010f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f9e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8010fa0:	4b8c      	ldr	r3, [pc, #560]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010fa2:	695b      	ldr	r3, [r3, #20]
 8010fa4:	0e5b      	lsrs	r3, r3, #25
 8010fa6:	f003 0303 	and.w	r3, r3, #3
 8010faa:	3301      	adds	r3, #1
 8010fac:	005b      	lsls	r3, r3, #1
 8010fae:	69ba      	ldr	r2, [r7, #24]
 8010fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8010fb4:	61fb      	str	r3, [r7, #28]
          break;
 8010fb6:	e003      	b.n	8010fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8010fb8:	bf00      	nop
 8010fba:	e17f      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010fbc:	bf00      	nop
 8010fbe:	e17d      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010fc0:	bf00      	nop
        break;
 8010fc2:	e17b      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8010fc4:	4b83      	ldr	r3, [pc, #524]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010fca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010fce:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d103      	bne.n	8010fde <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 8010fd6:	f7ff f851 	bl	801007c <HAL_RCC_GetPCLK2Freq>
 8010fda:	61f8      	str	r0, [r7, #28]
        break;
 8010fdc:	e16e      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 8010fde:	f7fe ff9f 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 8010fe2:	61f8      	str	r0, [r7, #28]
        break;
 8010fe4:	e16a      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8010fe6:	4b7b      	ldr	r3, [pc, #492]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010fec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010ff0:	613b      	str	r3, [r7, #16]
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010ff8:	d013      	beq.n	8011022 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8010ffa:	693b      	ldr	r3, [r7, #16]
 8010ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011000:	d819      	bhi.n	8011036 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d004      	beq.n	8011012 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801100e:	d004      	beq.n	801101a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8011010:	e011      	b.n	8011036 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011012:	f7ff f81d 	bl	8010050 <HAL_RCC_GetPCLK1Freq>
 8011016:	61f8      	str	r0, [r7, #28]
          break;
 8011018:	e010      	b.n	801103c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 801101a:	f7fe ff81 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 801101e:	61f8      	str	r0, [r7, #28]
          break;
 8011020:	e00c      	b.n	801103c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011022:	4b6c      	ldr	r3, [pc, #432]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801102a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801102e:	d104      	bne.n	801103a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 8011030:	4b69      	ldr	r3, [pc, #420]	; (80111d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8011032:	61fb      	str	r3, [r7, #28]
          break;
 8011034:	e001      	b.n	801103a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 8011036:	bf00      	nop
 8011038:	e140      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801103a:	bf00      	nop
        break;
 801103c:	e13e      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 801103e:	4b65      	ldr	r3, [pc, #404]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011044:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011048:	613b      	str	r3, [r7, #16]
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011050:	d013      	beq.n	801107a <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011058:	d819      	bhi.n	801108e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d004      	beq.n	801106a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011066:	d004      	beq.n	8011072 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8011068:	e011      	b.n	801108e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 801106a:	f7fe fff1 	bl	8010050 <HAL_RCC_GetPCLK1Freq>
 801106e:	61f8      	str	r0, [r7, #28]
          break;
 8011070:	e010      	b.n	8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 8011072:	f7fe ff55 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 8011076:	61f8      	str	r0, [r7, #28]
          break;
 8011078:	e00c      	b.n	8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801107a:	4b56      	ldr	r3, [pc, #344]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011086:	d104      	bne.n	8011092 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 8011088:	4b53      	ldr	r3, [pc, #332]	; (80111d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 801108a:	61fb      	str	r3, [r7, #28]
          break;
 801108c:	e001      	b.n	8011092 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 801108e:	bf00      	nop
 8011090:	e114      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011092:	bf00      	nop
        break;
 8011094:	e112      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8011096:	4b4f      	ldr	r3, [pc, #316]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801109c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80110a0:	613b      	str	r3, [r7, #16]
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80110a8:	d013      	beq.n	80110d2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80110b0:	d819      	bhi.n	80110e6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d004      	beq.n	80110c2 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110be:	d004      	beq.n	80110ca <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 80110c0:	e011      	b.n	80110e6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 80110c2:	f7fe ffc5 	bl	8010050 <HAL_RCC_GetPCLK1Freq>
 80110c6:	61f8      	str	r0, [r7, #28]
          break;
 80110c8:	e010      	b.n	80110ec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 80110ca:	f7fe ff29 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 80110ce:	61f8      	str	r0, [r7, #28]
          break;
 80110d0:	e00c      	b.n	80110ec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80110d2:	4b40      	ldr	r3, [pc, #256]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80110da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80110de:	d104      	bne.n	80110ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 80110e0:	4b3d      	ldr	r3, [pc, #244]	; (80111d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80110e2:	61fb      	str	r3, [r7, #28]
          break;
 80110e4:	e001      	b.n	80110ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 80110e6:	bf00      	nop
 80110e8:	e0e8      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80110ea:	bf00      	nop
        break;
 80110ec:	e0e6      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80110ee:	4b39      	ldr	r3, [pc, #228]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80110f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80110f4:	f003 0303 	and.w	r3, r3, #3
 80110f8:	613b      	str	r3, [r7, #16]
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	2b02      	cmp	r3, #2
 80110fe:	d011      	beq.n	8011124 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8011100:	693b      	ldr	r3, [r7, #16]
 8011102:	2b02      	cmp	r3, #2
 8011104:	d818      	bhi.n	8011138 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d003      	beq.n	8011114 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	2b01      	cmp	r3, #1
 8011110:	d004      	beq.n	801111c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 8011112:	e011      	b.n	8011138 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011114:	f7fe ff9c 	bl	8010050 <HAL_RCC_GetPCLK1Freq>
 8011118:	61f8      	str	r0, [r7, #28]
          break;
 801111a:	e010      	b.n	801113e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 801111c:	f7fe ff00 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 8011120:	61f8      	str	r0, [r7, #28]
          break;
 8011122:	e00c      	b.n	801113e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011124:	4b2b      	ldr	r3, [pc, #172]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801112c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011130:	d104      	bne.n	801113c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 8011132:	4b29      	ldr	r3, [pc, #164]	; (80111d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8011134:	61fb      	str	r3, [r7, #28]
          break;
 8011136:	e001      	b.n	801113c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8011138:	bf00      	nop
 801113a:	e0bf      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801113c:	bf00      	nop
        break;
 801113e:	e0bd      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8011140:	4b24      	ldr	r3, [pc, #144]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011146:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 801114a:	613b      	str	r3, [r7, #16]
 801114c:	693b      	ldr	r3, [r7, #16]
 801114e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8011152:	d02c      	beq.n	80111ae <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 801115a:	d833      	bhi.n	80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011162:	d01a      	beq.n	801119a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801116a:	d82b      	bhi.n	80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d004      	beq.n	801117c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8011172:	693b      	ldr	r3, [r7, #16]
 8011174:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011178:	d004      	beq.n	8011184 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 801117a:	e023      	b.n	80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 801117c:	f7fe ff68 	bl	8010050 <HAL_RCC_GetPCLK1Freq>
 8011180:	61f8      	str	r0, [r7, #28]
          break;
 8011182:	e026      	b.n	80111d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8011184:	4b13      	ldr	r3, [pc, #76]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801118a:	f003 0302 	and.w	r3, r3, #2
 801118e:	2b02      	cmp	r3, #2
 8011190:	d11a      	bne.n	80111c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 8011192:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8011196:	61fb      	str	r3, [r7, #28]
          break;
 8011198:	e016      	b.n	80111c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801119a:	4b0e      	ldr	r3, [pc, #56]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80111a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80111a6:	d111      	bne.n	80111cc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 80111a8:	4b0b      	ldr	r3, [pc, #44]	; (80111d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80111aa:	61fb      	str	r3, [r7, #28]
          break;
 80111ac:	e00e      	b.n	80111cc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80111ae:	4b09      	ldr	r3, [pc, #36]	; (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80111b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80111b4:	f003 0302 	and.w	r3, r3, #2
 80111b8:	2b02      	cmp	r3, #2
 80111ba:	d109      	bne.n	80111d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 80111bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80111c0:	61fb      	str	r3, [r7, #28]
          break;
 80111c2:	e005      	b.n	80111d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 80111c4:	bf00      	nop
 80111c6:	e079      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80111c8:	bf00      	nop
 80111ca:	e077      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80111cc:	bf00      	nop
 80111ce:	e075      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80111d0:	bf00      	nop
        break;
 80111d2:	e073      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80111d4:	40021000 	.word	0x40021000
 80111d8:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80111dc:	4b3a      	ldr	r3, [pc, #232]	; (80112c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80111de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80111e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80111e6:	613b      	str	r3, [r7, #16]
 80111e8:	693b      	ldr	r3, [r7, #16]
 80111ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80111ee:	d02c      	beq.n	801124a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80111f6:	d833      	bhi.n	8011260 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80111fe:	d01a      	beq.n	8011236 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8011200:	693b      	ldr	r3, [r7, #16]
 8011202:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011206:	d82b      	bhi.n	8011260 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d004      	beq.n	8011218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 801120e:	693b      	ldr	r3, [r7, #16]
 8011210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011214:	d004      	beq.n	8011220 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8011216:	e023      	b.n	8011260 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011218:	f7fe ff1a 	bl	8010050 <HAL_RCC_GetPCLK1Freq>
 801121c:	61f8      	str	r0, [r7, #28]
          break;
 801121e:	e026      	b.n	801126e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8011220:	4b29      	ldr	r3, [pc, #164]	; (80112c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8011222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011226:	f003 0302 	and.w	r3, r3, #2
 801122a:	2b02      	cmp	r3, #2
 801122c:	d11a      	bne.n	8011264 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 801122e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8011232:	61fb      	str	r3, [r7, #28]
          break;
 8011234:	e016      	b.n	8011264 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011236:	4b24      	ldr	r3, [pc, #144]	; (80112c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801123e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011242:	d111      	bne.n	8011268 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 8011244:	4b21      	ldr	r3, [pc, #132]	; (80112cc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8011246:	61fb      	str	r3, [r7, #28]
          break;
 8011248:	e00e      	b.n	8011268 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801124a:	4b1f      	ldr	r3, [pc, #124]	; (80112c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 801124c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011250:	f003 0302 	and.w	r3, r3, #2
 8011254:	2b02      	cmp	r3, #2
 8011256:	d109      	bne.n	801126c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 8011258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801125c:	61fb      	str	r3, [r7, #28]
          break;
 801125e:	e005      	b.n	801126c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8011260:	bf00      	nop
 8011262:	e02b      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011264:	bf00      	nop
 8011266:	e029      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011268:	bf00      	nop
 801126a:	e027      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801126c:	bf00      	nop
        break;
 801126e:	e025      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8011270:	4b15      	ldr	r3, [pc, #84]	; (80112c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8011272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011276:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801127a:	613b      	str	r3, [r7, #16]
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d004      	beq.n	801128c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011288:	d004      	beq.n	8011294 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 801128a:	e00d      	b.n	80112a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 801128c:	f7fe fee0 	bl	8010050 <HAL_RCC_GetPCLK1Freq>
 8011290:	61f8      	str	r0, [r7, #28]
          break;
 8011292:	e009      	b.n	80112a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011294:	4b0c      	ldr	r3, [pc, #48]	; (80112c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801129c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80112a0:	d101      	bne.n	80112a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 80112a2:	4b0a      	ldr	r3, [pc, #40]	; (80112cc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 80112a4:	61fb      	str	r3, [r7, #28]
          break;
 80112a6:	bf00      	nop
        break;
 80112a8:	e008      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 80112aa:	bf00      	nop
 80112ac:	e006      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 80112ae:	bf00      	nop
 80112b0:	e004      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 80112b2:	bf00      	nop
 80112b4:	e002      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 80112b6:	bf00      	nop
 80112b8:	e000      	b.n	80112bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 80112ba:	bf00      	nop
    }
  }

  return(frequency);
 80112bc:	69fb      	ldr	r3, [r7, #28]
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3720      	adds	r7, #32
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	40021000 	.word	0x40021000
 80112cc:	00f42400 	.word	0x00f42400

080112d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80112d0:	b480      	push	{r7}
 80112d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80112d4:	4b05      	ldr	r3, [pc, #20]	; (80112ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	4a04      	ldr	r2, [pc, #16]	; (80112ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80112da:	f043 0304 	orr.w	r3, r3, #4
 80112de:	6013      	str	r3, [r2, #0]
}
 80112e0:	bf00      	nop
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr
 80112ea:	bf00      	nop
 80112ec:	40021000 	.word	0x40021000

080112f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b084      	sub	sp, #16
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80112fa:	2300      	movs	r3, #0
 80112fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80112fe:	4b74      	ldr	r3, [pc, #464]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	f003 0303 	and.w	r3, r3, #3
 8011306:	2b00      	cmp	r3, #0
 8011308:	d018      	beq.n	801133c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801130a:	4b71      	ldr	r3, [pc, #452]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	f003 0203 	and.w	r2, r3, #3
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	429a      	cmp	r2, r3
 8011318:	d10d      	bne.n	8011336 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
       ||
 801131e:	2b00      	cmp	r3, #0
 8011320:	d009      	beq.n	8011336 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8011322:	4b6b      	ldr	r3, [pc, #428]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011324:	68db      	ldr	r3, [r3, #12]
 8011326:	091b      	lsrs	r3, r3, #4
 8011328:	f003 0307 	and.w	r3, r3, #7
 801132c:	1c5a      	adds	r2, r3, #1
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	685b      	ldr	r3, [r3, #4]
       ||
 8011332:	429a      	cmp	r2, r3
 8011334:	d047      	beq.n	80113c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8011336:	2301      	movs	r3, #1
 8011338:	73fb      	strb	r3, [r7, #15]
 801133a:	e044      	b.n	80113c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	2b03      	cmp	r3, #3
 8011342:	d018      	beq.n	8011376 <RCCEx_PLLSAI1_Config+0x86>
 8011344:	2b03      	cmp	r3, #3
 8011346:	d825      	bhi.n	8011394 <RCCEx_PLLSAI1_Config+0xa4>
 8011348:	2b01      	cmp	r3, #1
 801134a:	d002      	beq.n	8011352 <RCCEx_PLLSAI1_Config+0x62>
 801134c:	2b02      	cmp	r3, #2
 801134e:	d009      	beq.n	8011364 <RCCEx_PLLSAI1_Config+0x74>
 8011350:	e020      	b.n	8011394 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8011352:	4b5f      	ldr	r3, [pc, #380]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f003 0302 	and.w	r3, r3, #2
 801135a:	2b00      	cmp	r3, #0
 801135c:	d11d      	bne.n	801139a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 801135e:	2301      	movs	r3, #1
 8011360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011362:	e01a      	b.n	801139a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8011364:	4b5a      	ldr	r3, [pc, #360]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801136c:	2b00      	cmp	r3, #0
 801136e:	d116      	bne.n	801139e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8011370:	2301      	movs	r3, #1
 8011372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011374:	e013      	b.n	801139e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8011376:	4b56      	ldr	r3, [pc, #344]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801137e:	2b00      	cmp	r3, #0
 8011380:	d10f      	bne.n	80113a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8011382:	4b53      	ldr	r3, [pc, #332]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801138a:	2b00      	cmp	r3, #0
 801138c:	d109      	bne.n	80113a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 801138e:	2301      	movs	r3, #1
 8011390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011392:	e006      	b.n	80113a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8011394:	2301      	movs	r3, #1
 8011396:	73fb      	strb	r3, [r7, #15]
      break;
 8011398:	e004      	b.n	80113a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801139a:	bf00      	nop
 801139c:	e002      	b.n	80113a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801139e:	bf00      	nop
 80113a0:	e000      	b.n	80113a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80113a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80113a4:	7bfb      	ldrb	r3, [r7, #15]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d10d      	bne.n	80113c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80113aa:	4b49      	ldr	r3, [pc, #292]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80113ac:	68db      	ldr	r3, [r3, #12]
 80113ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6819      	ldr	r1, [r3, #0]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	685b      	ldr	r3, [r3, #4]
 80113ba:	3b01      	subs	r3, #1
 80113bc:	011b      	lsls	r3, r3, #4
 80113be:	430b      	orrs	r3, r1
 80113c0:	4943      	ldr	r1, [pc, #268]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80113c2:	4313      	orrs	r3, r2
 80113c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80113c6:	7bfb      	ldrb	r3, [r7, #15]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d17c      	bne.n	80114c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80113cc:	4b40      	ldr	r3, [pc, #256]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	4a3f      	ldr	r2, [pc, #252]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80113d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80113d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80113d8:	f7f9 fd9e 	bl	800af18 <HAL_GetTick>
 80113dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80113de:	e009      	b.n	80113f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80113e0:	f7f9 fd9a 	bl	800af18 <HAL_GetTick>
 80113e4:	4602      	mov	r2, r0
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	1ad3      	subs	r3, r2, r3
 80113ea:	2b02      	cmp	r3, #2
 80113ec:	d902      	bls.n	80113f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80113ee:	2303      	movs	r3, #3
 80113f0:	73fb      	strb	r3, [r7, #15]
        break;
 80113f2:	e005      	b.n	8011400 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80113f4:	4b36      	ldr	r3, [pc, #216]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d1ef      	bne.n	80113e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8011400:	7bfb      	ldrb	r3, [r7, #15]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d15f      	bne.n	80114c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d110      	bne.n	801142e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801140c:	4b30      	ldr	r3, [pc, #192]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 801140e:	691b      	ldr	r3, [r3, #16]
 8011410:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8011414:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8011418:	687a      	ldr	r2, [r7, #4]
 801141a:	6892      	ldr	r2, [r2, #8]
 801141c:	0211      	lsls	r1, r2, #8
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	68d2      	ldr	r2, [r2, #12]
 8011422:	06d2      	lsls	r2, r2, #27
 8011424:	430a      	orrs	r2, r1
 8011426:	492a      	ldr	r1, [pc, #168]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011428:	4313      	orrs	r3, r2
 801142a:	610b      	str	r3, [r1, #16]
 801142c:	e027      	b.n	801147e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	2b01      	cmp	r3, #1
 8011432:	d112      	bne.n	801145a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8011434:	4b26      	ldr	r3, [pc, #152]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011436:	691b      	ldr	r3, [r3, #16]
 8011438:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 801143c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8011440:	687a      	ldr	r2, [r7, #4]
 8011442:	6892      	ldr	r2, [r2, #8]
 8011444:	0211      	lsls	r1, r2, #8
 8011446:	687a      	ldr	r2, [r7, #4]
 8011448:	6912      	ldr	r2, [r2, #16]
 801144a:	0852      	lsrs	r2, r2, #1
 801144c:	3a01      	subs	r2, #1
 801144e:	0552      	lsls	r2, r2, #21
 8011450:	430a      	orrs	r2, r1
 8011452:	491f      	ldr	r1, [pc, #124]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011454:	4313      	orrs	r3, r2
 8011456:	610b      	str	r3, [r1, #16]
 8011458:	e011      	b.n	801147e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801145a:	4b1d      	ldr	r3, [pc, #116]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 801145c:	691b      	ldr	r3, [r3, #16]
 801145e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8011462:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	6892      	ldr	r2, [r2, #8]
 801146a:	0211      	lsls	r1, r2, #8
 801146c:	687a      	ldr	r2, [r7, #4]
 801146e:	6952      	ldr	r2, [r2, #20]
 8011470:	0852      	lsrs	r2, r2, #1
 8011472:	3a01      	subs	r2, #1
 8011474:	0652      	lsls	r2, r2, #25
 8011476:	430a      	orrs	r2, r1
 8011478:	4915      	ldr	r1, [pc, #84]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 801147a:	4313      	orrs	r3, r2
 801147c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 801147e:	4b14      	ldr	r3, [pc, #80]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	4a13      	ldr	r2, [pc, #76]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011484:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011488:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801148a:	f7f9 fd45 	bl	800af18 <HAL_GetTick>
 801148e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8011490:	e009      	b.n	80114a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8011492:	f7f9 fd41 	bl	800af18 <HAL_GetTick>
 8011496:	4602      	mov	r2, r0
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	1ad3      	subs	r3, r2, r3
 801149c:	2b02      	cmp	r3, #2
 801149e:	d902      	bls.n	80114a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80114a0:	2303      	movs	r3, #3
 80114a2:	73fb      	strb	r3, [r7, #15]
          break;
 80114a4:	e005      	b.n	80114b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80114a6:	4b0a      	ldr	r3, [pc, #40]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d0ef      	beq.n	8011492 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80114b2:	7bfb      	ldrb	r3, [r7, #15]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d106      	bne.n	80114c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80114b8:	4b05      	ldr	r3, [pc, #20]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80114ba:	691a      	ldr	r2, [r3, #16]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	699b      	ldr	r3, [r3, #24]
 80114c0:	4903      	ldr	r1, [pc, #12]	; (80114d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80114c2:	4313      	orrs	r3, r2
 80114c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80114c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	3710      	adds	r7, #16
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}
 80114d0:	40021000 	.word	0x40021000

080114d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b084      	sub	sp, #16
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80114de:	2300      	movs	r3, #0
 80114e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80114e2:	4b69      	ldr	r3, [pc, #420]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	f003 0303 	and.w	r3, r3, #3
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d018      	beq.n	8011520 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80114ee:	4b66      	ldr	r3, [pc, #408]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 80114f0:	68db      	ldr	r3, [r3, #12]
 80114f2:	f003 0203 	and.w	r2, r3, #3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d10d      	bne.n	801151a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
       ||
 8011502:	2b00      	cmp	r3, #0
 8011504:	d009      	beq.n	801151a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8011506:	4b60      	ldr	r3, [pc, #384]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	091b      	lsrs	r3, r3, #4
 801150c:	f003 0307 	and.w	r3, r3, #7
 8011510:	1c5a      	adds	r2, r3, #1
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	685b      	ldr	r3, [r3, #4]
       ||
 8011516:	429a      	cmp	r2, r3
 8011518:	d047      	beq.n	80115aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801151a:	2301      	movs	r3, #1
 801151c:	73fb      	strb	r3, [r7, #15]
 801151e:	e044      	b.n	80115aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	2b03      	cmp	r3, #3
 8011526:	d018      	beq.n	801155a <RCCEx_PLLSAI2_Config+0x86>
 8011528:	2b03      	cmp	r3, #3
 801152a:	d825      	bhi.n	8011578 <RCCEx_PLLSAI2_Config+0xa4>
 801152c:	2b01      	cmp	r3, #1
 801152e:	d002      	beq.n	8011536 <RCCEx_PLLSAI2_Config+0x62>
 8011530:	2b02      	cmp	r3, #2
 8011532:	d009      	beq.n	8011548 <RCCEx_PLLSAI2_Config+0x74>
 8011534:	e020      	b.n	8011578 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8011536:	4b54      	ldr	r3, [pc, #336]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	f003 0302 	and.w	r3, r3, #2
 801153e:	2b00      	cmp	r3, #0
 8011540:	d11d      	bne.n	801157e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8011542:	2301      	movs	r3, #1
 8011544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011546:	e01a      	b.n	801157e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8011548:	4b4f      	ldr	r3, [pc, #316]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011550:	2b00      	cmp	r3, #0
 8011552:	d116      	bne.n	8011582 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8011554:	2301      	movs	r3, #1
 8011556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011558:	e013      	b.n	8011582 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801155a:	4b4b      	ldr	r3, [pc, #300]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011562:	2b00      	cmp	r3, #0
 8011564:	d10f      	bne.n	8011586 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8011566:	4b48      	ldr	r3, [pc, #288]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801156e:	2b00      	cmp	r3, #0
 8011570:	d109      	bne.n	8011586 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8011572:	2301      	movs	r3, #1
 8011574:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011576:	e006      	b.n	8011586 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8011578:	2301      	movs	r3, #1
 801157a:	73fb      	strb	r3, [r7, #15]
      break;
 801157c:	e004      	b.n	8011588 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801157e:	bf00      	nop
 8011580:	e002      	b.n	8011588 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8011582:	bf00      	nop
 8011584:	e000      	b.n	8011588 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8011586:	bf00      	nop
    }

    if(status == HAL_OK)
 8011588:	7bfb      	ldrb	r3, [r7, #15]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d10d      	bne.n	80115aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801158e:	4b3e      	ldr	r3, [pc, #248]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011590:	68db      	ldr	r3, [r3, #12]
 8011592:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6819      	ldr	r1, [r3, #0]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	3b01      	subs	r3, #1
 80115a0:	011b      	lsls	r3, r3, #4
 80115a2:	430b      	orrs	r3, r1
 80115a4:	4938      	ldr	r1, [pc, #224]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 80115a6:	4313      	orrs	r3, r2
 80115a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80115aa:	7bfb      	ldrb	r3, [r7, #15]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d166      	bne.n	801167e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80115b0:	4b35      	ldr	r3, [pc, #212]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	4a34      	ldr	r2, [pc, #208]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 80115b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80115ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80115bc:	f7f9 fcac 	bl	800af18 <HAL_GetTick>
 80115c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80115c2:	e009      	b.n	80115d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80115c4:	f7f9 fca8 	bl	800af18 <HAL_GetTick>
 80115c8:	4602      	mov	r2, r0
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	1ad3      	subs	r3, r2, r3
 80115ce:	2b02      	cmp	r3, #2
 80115d0:	d902      	bls.n	80115d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80115d2:	2303      	movs	r3, #3
 80115d4:	73fb      	strb	r3, [r7, #15]
        break;
 80115d6:	e005      	b.n	80115e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80115d8:	4b2b      	ldr	r3, [pc, #172]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d1ef      	bne.n	80115c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80115e4:	7bfb      	ldrb	r3, [r7, #15]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d149      	bne.n	801167e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d110      	bne.n	8011612 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80115f0:	4b25      	ldr	r3, [pc, #148]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 80115f2:	695b      	ldr	r3, [r3, #20]
 80115f4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80115f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80115fc:	687a      	ldr	r2, [r7, #4]
 80115fe:	6892      	ldr	r2, [r2, #8]
 8011600:	0211      	lsls	r1, r2, #8
 8011602:	687a      	ldr	r2, [r7, #4]
 8011604:	68d2      	ldr	r2, [r2, #12]
 8011606:	06d2      	lsls	r2, r2, #27
 8011608:	430a      	orrs	r2, r1
 801160a:	491f      	ldr	r1, [pc, #124]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 801160c:	4313      	orrs	r3, r2
 801160e:	614b      	str	r3, [r1, #20]
 8011610:	e011      	b.n	8011636 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8011612:	4b1d      	ldr	r3, [pc, #116]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011614:	695b      	ldr	r3, [r3, #20]
 8011616:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 801161a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801161e:	687a      	ldr	r2, [r7, #4]
 8011620:	6892      	ldr	r2, [r2, #8]
 8011622:	0211      	lsls	r1, r2, #8
 8011624:	687a      	ldr	r2, [r7, #4]
 8011626:	6912      	ldr	r2, [r2, #16]
 8011628:	0852      	lsrs	r2, r2, #1
 801162a:	3a01      	subs	r2, #1
 801162c:	0652      	lsls	r2, r2, #25
 801162e:	430a      	orrs	r2, r1
 8011630:	4915      	ldr	r1, [pc, #84]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011632:	4313      	orrs	r3, r2
 8011634:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8011636:	4b14      	ldr	r3, [pc, #80]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	4a13      	ldr	r2, [pc, #76]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 801163c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011640:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011642:	f7f9 fc69 	bl	800af18 <HAL_GetTick>
 8011646:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8011648:	e009      	b.n	801165e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801164a:	f7f9 fc65 	bl	800af18 <HAL_GetTick>
 801164e:	4602      	mov	r2, r0
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	1ad3      	subs	r3, r2, r3
 8011654:	2b02      	cmp	r3, #2
 8011656:	d902      	bls.n	801165e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8011658:	2303      	movs	r3, #3
 801165a:	73fb      	strb	r3, [r7, #15]
          break;
 801165c:	e005      	b.n	801166a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801165e:	4b0a      	ldr	r3, [pc, #40]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011666:	2b00      	cmp	r3, #0
 8011668:	d0ef      	beq.n	801164a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 801166a:	7bfb      	ldrb	r3, [r7, #15]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d106      	bne.n	801167e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8011670:	4b05      	ldr	r3, [pc, #20]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011672:	695a      	ldr	r2, [r3, #20]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	695b      	ldr	r3, [r3, #20]
 8011678:	4903      	ldr	r1, [pc, #12]	; (8011688 <RCCEx_PLLSAI2_Config+0x1b4>)
 801167a:	4313      	orrs	r3, r2
 801167c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 801167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011680:	4618      	mov	r0, r3
 8011682:	3710      	adds	r7, #16
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	40021000 	.word	0x40021000

0801168c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 801168c:	b480      	push	{r7}
 801168e:	b089      	sub	sp, #36	; 0x24
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8011696:	2300      	movs	r3, #0
 8011698:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 801169a:	2300      	movs	r3, #0
 801169c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 801169e:	2300      	movs	r3, #0
 80116a0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80116a8:	d10c      	bne.n	80116c4 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80116aa:	4b77      	ldr	r3, [pc, #476]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80116ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80116b0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80116b4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80116b6:	69bb      	ldr	r3, [r7, #24]
 80116b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80116bc:	d112      	bne.n	80116e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80116be:	4b73      	ldr	r3, [pc, #460]	; (801188c <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 80116c0:	61fb      	str	r3, [r7, #28]
 80116c2:	e00f      	b.n	80116e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80116ca:	d10b      	bne.n	80116e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80116cc:	4b6e      	ldr	r3, [pc, #440]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80116ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80116d2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80116d6:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80116d8:	69bb      	ldr	r3, [r7, #24]
 80116da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80116de:	d101      	bne.n	80116e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80116e0:	4b6a      	ldr	r3, [pc, #424]	; (801188c <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 80116e2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80116e4:	69fb      	ldr	r3, [r7, #28]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	f040 80c6 	bne.w	8011878 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80116f0:	69bb      	ldr	r3, [r7, #24]
 80116f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80116f6:	d003      	beq.n	8011700 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80116f8:	69bb      	ldr	r3, [r7, #24]
 80116fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80116fe:	d13b      	bne.n	8011778 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8011700:	4b61      	ldr	r3, [pc, #388]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801170c:	f040 80b3 	bne.w	8011876 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8011710:	4b5d      	ldr	r3, [pc, #372]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011712:	68db      	ldr	r3, [r3, #12]
 8011714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011718:	2b00      	cmp	r3, #0
 801171a:	f000 80ac 	beq.w	8011876 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 801171e:	4b5a      	ldr	r3, [pc, #360]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011720:	68db      	ldr	r3, [r3, #12]
 8011722:	091b      	lsrs	r3, r3, #4
 8011724:	f003 0307 	and.w	r3, r3, #7
 8011728:	3301      	adds	r3, #1
 801172a:	693a      	ldr	r2, [r7, #16]
 801172c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011730:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8011732:	4b55      	ldr	r3, [pc, #340]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011734:	68db      	ldr	r3, [r3, #12]
 8011736:	0a1b      	lsrs	r3, r3, #8
 8011738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801173c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 801173e:	4b52      	ldr	r3, [pc, #328]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011740:	68db      	ldr	r3, [r3, #12]
 8011742:	0edb      	lsrs	r3, r3, #27
 8011744:	f003 031f 	and.w	r3, r3, #31
 8011748:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d10a      	bne.n	8011766 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8011750:	4b4d      	ldr	r3, [pc, #308]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011752:	68db      	ldr	r3, [r3, #12]
 8011754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011758:	2b00      	cmp	r3, #0
 801175a:	d002      	beq.n	8011762 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 801175c:	2311      	movs	r3, #17
 801175e:	617b      	str	r3, [r7, #20]
 8011760:	e001      	b.n	8011766 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8011762:	2307      	movs	r3, #7
 8011764:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	68fa      	ldr	r2, [r7, #12]
 801176a:	fb03 f202 	mul.w	r2, r3, r2
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	fbb2 f3f3 	udiv	r3, r2, r3
 8011774:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8011776:	e07e      	b.n	8011876 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8011778:	69bb      	ldr	r3, [r7, #24]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d139      	bne.n	80117f2 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 801177e:	4b42      	ldr	r3, [pc, #264]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801178a:	d175      	bne.n	8011878 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 801178c:	4b3e      	ldr	r3, [pc, #248]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 801178e:	691b      	ldr	r3, [r3, #16]
 8011790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011794:	2b00      	cmp	r3, #0
 8011796:	d06f      	beq.n	8011878 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8011798:	4b3b      	ldr	r3, [pc, #236]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	091b      	lsrs	r3, r3, #4
 801179e:	f003 0307 	and.w	r3, r3, #7
 80117a2:	3301      	adds	r3, #1
 80117a4:	693a      	ldr	r2, [r7, #16]
 80117a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80117aa:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80117ac:	4b36      	ldr	r3, [pc, #216]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80117ae:	691b      	ldr	r3, [r3, #16]
 80117b0:	0a1b      	lsrs	r3, r3, #8
 80117b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117b6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80117b8:	4b33      	ldr	r3, [pc, #204]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80117ba:	691b      	ldr	r3, [r3, #16]
 80117bc:	0edb      	lsrs	r3, r3, #27
 80117be:	f003 031f 	and.w	r3, r3, #31
 80117c2:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d10a      	bne.n	80117e0 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80117ca:	4b2f      	ldr	r3, [pc, #188]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80117cc:	691b      	ldr	r3, [r3, #16]
 80117ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d002      	beq.n	80117dc <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 80117d6:	2311      	movs	r3, #17
 80117d8:	617b      	str	r3, [r7, #20]
 80117da:	e001      	b.n	80117e0 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 80117dc:	2307      	movs	r3, #7
 80117de:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80117e0:	693b      	ldr	r3, [r7, #16]
 80117e2:	68fa      	ldr	r2, [r7, #12]
 80117e4:	fb03 f202 	mul.w	r2, r3, r2
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80117ee:	61fb      	str	r3, [r7, #28]
 80117f0:	e042      	b.n	8011878 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80117f2:	69bb      	ldr	r3, [r7, #24]
 80117f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80117f8:	d003      	beq.n	8011802 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 80117fa:	69bb      	ldr	r3, [r7, #24]
 80117fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011800:	d13a      	bne.n	8011878 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8011802:	4b21      	ldr	r3, [pc, #132]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801180a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801180e:	d133      	bne.n	8011878 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8011810:	4b1d      	ldr	r3, [pc, #116]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011812:	695b      	ldr	r3, [r3, #20]
 8011814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011818:	2b00      	cmp	r3, #0
 801181a:	d02d      	beq.n	8011878 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 801181c:	4b1a      	ldr	r3, [pc, #104]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	091b      	lsrs	r3, r3, #4
 8011822:	f003 0307 	and.w	r3, r3, #7
 8011826:	3301      	adds	r3, #1
 8011828:	693a      	ldr	r2, [r7, #16]
 801182a:	fbb2 f3f3 	udiv	r3, r2, r3
 801182e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8011830:	4b15      	ldr	r3, [pc, #84]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011832:	695b      	ldr	r3, [r3, #20]
 8011834:	0a1b      	lsrs	r3, r3, #8
 8011836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801183a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 801183c:	4b12      	ldr	r3, [pc, #72]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 801183e:	695b      	ldr	r3, [r3, #20]
 8011840:	0edb      	lsrs	r3, r3, #27
 8011842:	f003 031f 	and.w	r3, r3, #31
 8011846:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d10a      	bne.n	8011864 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 801184e:	4b0e      	ldr	r3, [pc, #56]	; (8011888 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011850:	695b      	ldr	r3, [r3, #20]
 8011852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011856:	2b00      	cmp	r3, #0
 8011858:	d002      	beq.n	8011860 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 801185a:	2311      	movs	r3, #17
 801185c:	617b      	str	r3, [r7, #20]
 801185e:	e001      	b.n	8011864 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8011860:	2307      	movs	r3, #7
 8011862:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	68fa      	ldr	r2, [r7, #12]
 8011868:	fb03 f202 	mul.w	r2, r3, r2
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011872:	61fb      	str	r3, [r7, #28]
 8011874:	e000      	b.n	8011878 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8011876:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8011878:	69fb      	ldr	r3, [r7, #28]
}
 801187a:	4618      	mov	r0, r3
 801187c:	3724      	adds	r7, #36	; 0x24
 801187e:	46bd      	mov	sp, r7
 8011880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011884:	4770      	bx	lr
 8011886:	bf00      	nop
 8011888:	40021000 	.word	0x40021000
 801188c:	001fff68 	.word	0x001fff68

08011890 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b088      	sub	sp, #32
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d101      	bne.n	80118a2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 801189e:	2301      	movs	r3, #1
 80118a0:	e155      	b.n	8011b4e <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80118a8:	b2db      	uxtb	r3, r3
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d106      	bne.n	80118bc <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2200      	movs	r2, #0
 80118b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f7f0 fb18 	bl	8001eec <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f000 f959 	bl	8011b74 <SAI_Disable>
 80118c2:	4603      	mov	r3, r0
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d001      	beq.n	80118cc <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80118c8:	2301      	movs	r3, #1
 80118ca:	e140      	b.n	8011b4e <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2202      	movs	r2, #2
 80118d0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	68db      	ldr	r3, [r3, #12]
 80118d8:	2b02      	cmp	r3, #2
 80118da:	d00c      	beq.n	80118f6 <HAL_SAI_Init+0x66>
 80118dc:	2b02      	cmp	r3, #2
 80118de:	d80d      	bhi.n	80118fc <HAL_SAI_Init+0x6c>
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d002      	beq.n	80118ea <HAL_SAI_Init+0x5a>
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d003      	beq.n	80118f0 <HAL_SAI_Init+0x60>
 80118e8:	e008      	b.n	80118fc <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80118ea:	2300      	movs	r3, #0
 80118ec:	61fb      	str	r3, [r7, #28]
      break;
 80118ee:	e008      	b.n	8011902 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80118f0:	2310      	movs	r3, #16
 80118f2:	61fb      	str	r3, [r7, #28]
      break;
 80118f4:	e005      	b.n	8011902 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80118f6:	2320      	movs	r3, #32
 80118f8:	61fb      	str	r3, [r7, #28]
      break;
 80118fa:	e002      	b.n	8011902 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 80118fc:	2300      	movs	r3, #0
 80118fe:	61fb      	str	r3, [r7, #28]
      break;
 8011900:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	689b      	ldr	r3, [r3, #8]
 8011906:	2b03      	cmp	r3, #3
 8011908:	d81d      	bhi.n	8011946 <HAL_SAI_Init+0xb6>
 801190a:	a201      	add	r2, pc, #4	; (adr r2, 8011910 <HAL_SAI_Init+0x80>)
 801190c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011910:	08011921 	.word	0x08011921
 8011914:	08011927 	.word	0x08011927
 8011918:	0801192f 	.word	0x0801192f
 801191c:	08011937 	.word	0x08011937
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8011920:	2300      	movs	r3, #0
 8011922:	617b      	str	r3, [r7, #20]
      break;
 8011924:	e012      	b.n	801194c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8011926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801192a:	617b      	str	r3, [r7, #20]
      break;
 801192c:	e00e      	b.n	801194c <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 801192e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011932:	617b      	str	r3, [r7, #20]
      break;
 8011934:	e00a      	b.n	801194c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8011936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801193a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 801193c:	69fb      	ldr	r3, [r7, #28]
 801193e:	f043 0301 	orr.w	r3, r3, #1
 8011942:	61fb      	str	r3, [r7, #28]
      break;
 8011944:	e002      	b.n	801194c <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8011946:	2300      	movs	r3, #0
 8011948:	617b      	str	r3, [r7, #20]
      break;
 801194a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	4a81      	ldr	r2, [pc, #516]	; (8011b58 <HAL_SAI_Init+0x2c8>)
 8011952:	4293      	cmp	r3, r2
 8011954:	d004      	beq.n	8011960 <HAL_SAI_Init+0xd0>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	4a80      	ldr	r2, [pc, #512]	; (8011b5c <HAL_SAI_Init+0x2cc>)
 801195c:	4293      	cmp	r3, r2
 801195e:	d103      	bne.n	8011968 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8011960:	4a7f      	ldr	r2, [pc, #508]	; (8011b60 <HAL_SAI_Init+0x2d0>)
 8011962:	69fb      	ldr	r3, [r7, #28]
 8011964:	6013      	str	r3, [r2, #0]
 8011966:	e002      	b.n	801196e <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8011968:	4a7e      	ldr	r2, [pc, #504]	; (8011b64 <HAL_SAI_Init+0x2d4>)
 801196a:	69fb      	ldr	r3, [r7, #28]
 801196c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	69db      	ldr	r3, [r3, #28]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d041      	beq.n	80119fa <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	4a77      	ldr	r2, [pc, #476]	; (8011b58 <HAL_SAI_Init+0x2c8>)
 801197c:	4293      	cmp	r3, r2
 801197e:	d004      	beq.n	801198a <HAL_SAI_Init+0xfa>
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	4a75      	ldr	r2, [pc, #468]	; (8011b5c <HAL_SAI_Init+0x2cc>)
 8011986:	4293      	cmp	r3, r2
 8011988:	d105      	bne.n	8011996 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 801198a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801198e:	f7fe fee7 	bl	8010760 <HAL_RCCEx_GetPeriphCLKFreq>
 8011992:	6138      	str	r0, [r7, #16]
 8011994:	e004      	b.n	80119a0 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8011996:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801199a:	f7fe fee1 	bl	8010760 <HAL_RCCEx_GetPeriphCLKFreq>
 801199e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80119a0:	693a      	ldr	r2, [r7, #16]
 80119a2:	4613      	mov	r3, r2
 80119a4:	009b      	lsls	r3, r3, #2
 80119a6:	4413      	add	r3, r2
 80119a8:	005b      	lsls	r3, r3, #1
 80119aa:	461a      	mov	r2, r3
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	69db      	ldr	r3, [r3, #28]
 80119b0:	025b      	lsls	r3, r3, #9
 80119b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80119b6:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	4a6b      	ldr	r2, [pc, #428]	; (8011b68 <HAL_SAI_Init+0x2d8>)
 80119bc:	fba2 2303 	umull	r2, r3, r2, r3
 80119c0:	08da      	lsrs	r2, r3, #3
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80119c6:	68f9      	ldr	r1, [r7, #12]
 80119c8:	4b67      	ldr	r3, [pc, #412]	; (8011b68 <HAL_SAI_Init+0x2d8>)
 80119ca:	fba3 2301 	umull	r2, r3, r3, r1
 80119ce:	08da      	lsrs	r2, r3, #3
 80119d0:	4613      	mov	r3, r2
 80119d2:	009b      	lsls	r3, r3, #2
 80119d4:	4413      	add	r3, r2
 80119d6:	005b      	lsls	r3, r3, #1
 80119d8:	1aca      	subs	r2, r1, r3
 80119da:	2a08      	cmp	r2, #8
 80119dc:	d904      	bls.n	80119e8 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6a1b      	ldr	r3, [r3, #32]
 80119e2:	1c5a      	adds	r2, r3, #1
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119ec:	2b04      	cmp	r3, #4
 80119ee:	d104      	bne.n	80119fa <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6a1b      	ldr	r3, [r3, #32]
 80119f4:	085a      	lsrs	r2, r3, #1
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d003      	beq.n	8011a0a <HAL_SAI_Init+0x17a>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	685b      	ldr	r3, [r3, #4]
 8011a06:	2b02      	cmp	r3, #2
 8011a08:	d109      	bne.n	8011a1e <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a0e:	2b01      	cmp	r3, #1
 8011a10:	d101      	bne.n	8011a16 <HAL_SAI_Init+0x186>
 8011a12:	2300      	movs	r3, #0
 8011a14:	e001      	b.n	8011a1a <HAL_SAI_Init+0x18a>
 8011a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a1a:	61bb      	str	r3, [r7, #24]
 8011a1c:	e008      	b.n	8011a30 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a22:	2b01      	cmp	r3, #1
 8011a24:	d102      	bne.n	8011a2c <HAL_SAI_Init+0x19c>
 8011a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a2a:	e000      	b.n	8011a2e <HAL_SAI_Init+0x19e>
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	6819      	ldr	r1, [r3, #0]
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681a      	ldr	r2, [r3, #0]
 8011a3a:	4b4c      	ldr	r3, [pc, #304]	; (8011b6c <HAL_SAI_Init+0x2dc>)
 8011a3c:	400b      	ands	r3, r1
 8011a3e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	6819      	ldr	r1, [r3, #0]
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	685a      	ldr	r2, [r3, #4]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a4e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8011a54:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a5a:	431a      	orrs	r2, r3
 8011a5c:	69bb      	ldr	r3, [r7, #24]
 8011a5e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8011a68:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	691b      	ldr	r3, [r3, #16]
 8011a6e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011a74:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6a1b      	ldr	r3, [r3, #32]
 8011a7a:	051b      	lsls	r3, r3, #20
 8011a7c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	430a      	orrs	r2, r1
 8011a84:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	687a      	ldr	r2, [r7, #4]
 8011a8e:	6812      	ldr	r2, [r2, #0]
 8011a90:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8011a94:	f023 030f 	bic.w	r3, r3, #15
 8011a98:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	6859      	ldr	r1, [r3, #4]
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	699a      	ldr	r2, [r3, #24]
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011aa8:	431a      	orrs	r2, r3
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aae:	431a      	orrs	r2, r3
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	430a      	orrs	r2, r1
 8011ab6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	6899      	ldr	r1, [r3, #8]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681a      	ldr	r2, [r3, #0]
 8011ac2:	4b2b      	ldr	r3, [pc, #172]	; (8011b70 <HAL_SAI_Init+0x2e0>)
 8011ac4:	400b      	ands	r3, r1
 8011ac6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	6899      	ldr	r1, [r3, #8]
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ad2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8011ad8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8011ade:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8011ae4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011aea:	3b01      	subs	r3, #1
 8011aec:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8011aee:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	430a      	orrs	r2, r1
 8011af6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	68d9      	ldr	r1, [r3, #12]
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681a      	ldr	r2, [r3, #0]
 8011b02:	f24f 0320 	movw	r3, #61472	; 0xf020
 8011b06:	400b      	ands	r3, r1
 8011b08:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	68d9      	ldr	r1, [r3, #12]
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b18:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011b1e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8011b20:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b26:	3b01      	subs	r3, #1
 8011b28:	021b      	lsls	r3, r3, #8
 8011b2a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	430a      	orrs	r2, r1
 8011b32:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	2200      	movs	r2, #0
 8011b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2201      	movs	r2, #1
 8011b40:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	2200      	movs	r2, #0
 8011b48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8011b4c:	2300      	movs	r3, #0
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3720      	adds	r7, #32
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd80      	pop	{r7, pc}
 8011b56:	bf00      	nop
 8011b58:	40015404 	.word	0x40015404
 8011b5c:	40015424 	.word	0x40015424
 8011b60:	40015400 	.word	0x40015400
 8011b64:	40015800 	.word	0x40015800
 8011b68:	cccccccd 	.word	0xcccccccd
 8011b6c:	ff05c010 	.word	0xff05c010
 8011b70:	fff88000 	.word	0xfff88000

08011b74 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8011b74:	b480      	push	{r7}
 8011b76:	b085      	sub	sp, #20
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8011b7c:	4b18      	ldr	r3, [pc, #96]	; (8011be0 <SAI_Disable+0x6c>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	4a18      	ldr	r2, [pc, #96]	; (8011be4 <SAI_Disable+0x70>)
 8011b82:	fba2 2303 	umull	r2, r3, r2, r3
 8011b86:	0b1b      	lsrs	r3, r3, #12
 8011b88:	009b      	lsls	r3, r3, #2
 8011b8a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	681a      	ldr	r2, [r3, #0]
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011b9e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d10a      	bne.n	8011bbc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011bac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8011bb6:	2303      	movs	r3, #3
 8011bb8:	72fb      	strb	r3, [r7, #11]
      break;
 8011bba:	e009      	b.n	8011bd0 <SAI_Disable+0x5c>
    }
    count--;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	3b01      	subs	r3, #1
 8011bc0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d1e7      	bne.n	8011ba0 <SAI_Disable+0x2c>

  return status;
 8011bd0:	7afb      	ldrb	r3, [r7, #11]
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3714      	adds	r7, #20
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bdc:	4770      	bx	lr
 8011bde:	bf00      	nop
 8011be0:	20000190 	.word	0x20000190
 8011be4:	95cbec1b 	.word	0x95cbec1b

08011be8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d101      	bne.n	8011bfa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	e022      	b.n	8011c40 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011c00:	b2db      	uxtb	r3, r3
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d105      	bne.n	8011c12 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f7f0 fa17 	bl	8002040 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2203      	movs	r2, #3
 8011c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f000 f814 	bl	8011c48 <HAL_SD_InitCard>
 8011c20:	4603      	mov	r3, r0
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d001      	beq.n	8011c2a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8011c26:	2301      	movs	r3, #1
 8011c28:	e00a      	b.n	8011c40 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	2200      	movs	r2, #0
 8011c34:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2201      	movs	r2, #1
 8011c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8011c3e:	2300      	movs	r3, #0
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3708      	adds	r7, #8
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}

08011c48 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8011c48:	b5b0      	push	{r4, r5, r7, lr}
 8011c4a:	b08e      	sub	sp, #56	; 0x38
 8011c4c:	af04      	add	r7, sp, #16
 8011c4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8011c50:	2300      	movs	r3, #0
 8011c52:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8011c54:	2300      	movs	r3, #0
 8011c56:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8011c60:	2300      	movs	r3, #0
 8011c62:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8011c64:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8011c68:	f7fe fd7a 	bl	8010760 <HAL_RCCEx_GetPeriphCLKFreq>
 8011c6c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8011c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d109      	bne.n	8011c88 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2201      	movs	r2, #1
 8011c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011c82:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8011c84:	2301      	movs	r3, #1
 8011c86:	e07b      	b.n	8011d80 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8011c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c8a:	09db      	lsrs	r3, r3, #7
 8011c8c:	4a3e      	ldr	r2, [pc, #248]	; (8011d88 <HAL_SD_InitCard+0x140>)
 8011c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8011c92:	091b      	lsrs	r3, r3, #4
 8011c94:	3b02      	subs	r3, #2
 8011c96:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681d      	ldr	r5, [r3, #0]
 8011c9c:	466c      	mov	r4, sp
 8011c9e:	f107 0314 	add.w	r3, r7, #20
 8011ca2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011ca6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011caa:	f107 0308 	add.w	r3, r7, #8
 8011cae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011cb0:	4628      	mov	r0, r5
 8011cb2:	f002 fc31 	bl	8014518 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	685a      	ldr	r2, [r3, #4]
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011cc4:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f002 fc5e 	bl	801458c <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	685a      	ldr	r2, [r3, #4]
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011cde:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8011ce0:	69fb      	ldr	r3, [r7, #28]
 8011ce2:	3302      	adds	r3, #2
 8011ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cea:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8011cec:	4a27      	ldr	r2, [pc, #156]	; (8011d8c <HAL_SD_InitCard+0x144>)
 8011cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cf4:	3301      	adds	r3, #1
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f7f9 f91a 	bl	800af30 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f000 fb77 	bl	80123f0 <SD_PowerON>
 8011d02:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011d04:	6a3b      	ldr	r3, [r7, #32]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d00b      	beq.n	8011d22 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d16:	6a3b      	ldr	r3, [r7, #32]
 8011d18:	431a      	orrs	r2, r3
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8011d1e:	2301      	movs	r3, #1
 8011d20:	e02e      	b.n	8011d80 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f000 fa96 	bl	8012254 <SD_InitCard>
 8011d28:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011d2a:	6a3b      	ldr	r3, [r7, #32]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d00b      	beq.n	8011d48 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2201      	movs	r2, #1
 8011d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d3c:	6a3b      	ldr	r3, [r7, #32]
 8011d3e:	431a      	orrs	r2, r3
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8011d44:	2301      	movs	r3, #1
 8011d46:	e01b      	b.n	8011d80 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011d50:	4618      	mov	r0, r3
 8011d52:	f002 fcae 	bl	80146b2 <SDMMC_CmdBlockLength>
 8011d56:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011d58:	6a3b      	ldr	r3, [r7, #32]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d00f      	beq.n	8011d7e <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	4a0b      	ldr	r2, [pc, #44]	; (8011d90 <HAL_SD_InitCard+0x148>)
 8011d64:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d6a:	6a3b      	ldr	r3, [r7, #32]
 8011d6c:	431a      	orrs	r2, r3
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2201      	movs	r2, #1
 8011d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	e000      	b.n	8011d80 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8011d7e:	2300      	movs	r3, #0
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	3728      	adds	r7, #40	; 0x28
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bdb0      	pop	{r4, r5, r7, pc}
 8011d88:	014f8b59 	.word	0x014f8b59
 8011d8c:	00012110 	.word	0x00012110
 8011d90:	004005ff 	.word	0x004005ff

08011d94 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b083      	sub	sp, #12
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011da2:	0f9b      	lsrs	r3, r3, #30
 8011da4:	b2da      	uxtb	r2, r3
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011dae:	0e9b      	lsrs	r3, r3, #26
 8011db0:	b2db      	uxtb	r3, r3
 8011db2:	f003 030f 	and.w	r3, r3, #15
 8011db6:	b2da      	uxtb	r2, r3
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011dc0:	0e1b      	lsrs	r3, r3, #24
 8011dc2:	b2db      	uxtb	r3, r3
 8011dc4:	f003 0303 	and.w	r3, r3, #3
 8011dc8:	b2da      	uxtb	r2, r3
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011dd2:	0c1b      	lsrs	r3, r3, #16
 8011dd4:	b2da      	uxtb	r2, r3
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011dde:	0a1b      	lsrs	r3, r3, #8
 8011de0:	b2da      	uxtb	r2, r3
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011dea:	b2da      	uxtb	r2, r3
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011df4:	0d1b      	lsrs	r3, r3, #20
 8011df6:	b29a      	uxth	r2, r3
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e00:	0c1b      	lsrs	r3, r3, #16
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	f003 030f 	and.w	r3, r3, #15
 8011e08:	b2da      	uxtb	r2, r3
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e12:	0bdb      	lsrs	r3, r3, #15
 8011e14:	b2db      	uxtb	r3, r3
 8011e16:	f003 0301 	and.w	r3, r3, #1
 8011e1a:	b2da      	uxtb	r2, r3
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e24:	0b9b      	lsrs	r3, r3, #14
 8011e26:	b2db      	uxtb	r3, r3
 8011e28:	f003 0301 	and.w	r3, r3, #1
 8011e2c:	b2da      	uxtb	r2, r3
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e36:	0b5b      	lsrs	r3, r3, #13
 8011e38:	b2db      	uxtb	r3, r3
 8011e3a:	f003 0301 	and.w	r3, r3, #1
 8011e3e:	b2da      	uxtb	r2, r3
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e48:	0b1b      	lsrs	r3, r3, #12
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	f003 0301 	and.w	r3, r3, #1
 8011e50:	b2da      	uxtb	r2, r3
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d163      	bne.n	8011f2c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e68:	009a      	lsls	r2, r3, #2
 8011e6a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8011e6e:	4013      	ands	r3, r2
 8011e70:	687a      	ldr	r2, [r7, #4]
 8011e72:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8011e74:	0f92      	lsrs	r2, r2, #30
 8011e76:	431a      	orrs	r2, r3
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e80:	0edb      	lsrs	r3, r3, #27
 8011e82:	b2db      	uxtb	r3, r3
 8011e84:	f003 0307 	and.w	r3, r3, #7
 8011e88:	b2da      	uxtb	r2, r3
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e92:	0e1b      	lsrs	r3, r3, #24
 8011e94:	b2db      	uxtb	r3, r3
 8011e96:	f003 0307 	and.w	r3, r3, #7
 8011e9a:	b2da      	uxtb	r2, r3
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ea4:	0d5b      	lsrs	r3, r3, #21
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	f003 0307 	and.w	r3, r3, #7
 8011eac:	b2da      	uxtb	r2, r3
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011eb6:	0c9b      	lsrs	r3, r3, #18
 8011eb8:	b2db      	uxtb	r3, r3
 8011eba:	f003 0307 	and.w	r3, r3, #7
 8011ebe:	b2da      	uxtb	r2, r3
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ec8:	0bdb      	lsrs	r3, r3, #15
 8011eca:	b2db      	uxtb	r3, r3
 8011ecc:	f003 0307 	and.w	r3, r3, #7
 8011ed0:	b2da      	uxtb	r2, r3
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	691b      	ldr	r3, [r3, #16]
 8011eda:	1c5a      	adds	r2, r3, #1
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	7e1b      	ldrb	r3, [r3, #24]
 8011ee4:	b2db      	uxtb	r3, r3
 8011ee6:	f003 0307 	and.w	r3, r3, #7
 8011eea:	3302      	adds	r3, #2
 8011eec:	2201      	movs	r2, #1
 8011eee:	fa02 f303 	lsl.w	r3, r2, r3
 8011ef2:	687a      	ldr	r2, [r7, #4]
 8011ef4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011ef6:	fb03 f202 	mul.w	r2, r3, r2
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	7a1b      	ldrb	r3, [r3, #8]
 8011f02:	b2db      	uxtb	r3, r3
 8011f04:	f003 030f 	and.w	r3, r3, #15
 8011f08:	2201      	movs	r2, #1
 8011f0a:	409a      	lsls	r2, r3
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f14:	687a      	ldr	r2, [r7, #4]
 8011f16:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8011f18:	0a52      	lsrs	r2, r2, #9
 8011f1a:	fb03 f202 	mul.w	r2, r3, r2
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011f28:	661a      	str	r2, [r3, #96]	; 0x60
 8011f2a:	e031      	b.n	8011f90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f30:	2b01      	cmp	r3, #1
 8011f32:	d11d      	bne.n	8011f70 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f38:	041b      	lsls	r3, r3, #16
 8011f3a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f42:	0c1b      	lsrs	r3, r3, #16
 8011f44:	431a      	orrs	r2, r3
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	691b      	ldr	r3, [r3, #16]
 8011f4e:	3301      	adds	r3, #1
 8011f50:	029a      	lsls	r2, r3, #10
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011f64:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	661a      	str	r2, [r3, #96]	; 0x60
 8011f6e:	e00f      	b.n	8011f90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	4a58      	ldr	r2, [pc, #352]	; (80120d8 <HAL_SD_GetCardCSD+0x344>)
 8011f76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2201      	movs	r2, #1
 8011f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	e09d      	b.n	80120cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f94:	0b9b      	lsrs	r3, r3, #14
 8011f96:	b2db      	uxtb	r3, r3
 8011f98:	f003 0301 	and.w	r3, r3, #1
 8011f9c:	b2da      	uxtb	r2, r3
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fa6:	09db      	lsrs	r3, r3, #7
 8011fa8:	b2db      	uxtb	r3, r3
 8011faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011fae:	b2da      	uxtb	r2, r3
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fb8:	b2db      	uxtb	r3, r3
 8011fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011fbe:	b2da      	uxtb	r2, r3
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fc8:	0fdb      	lsrs	r3, r3, #31
 8011fca:	b2da      	uxtb	r2, r3
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fd4:	0f5b      	lsrs	r3, r3, #29
 8011fd6:	b2db      	uxtb	r3, r3
 8011fd8:	f003 0303 	and.w	r3, r3, #3
 8011fdc:	b2da      	uxtb	r2, r3
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fe6:	0e9b      	lsrs	r3, r3, #26
 8011fe8:	b2db      	uxtb	r3, r3
 8011fea:	f003 0307 	and.w	r3, r3, #7
 8011fee:	b2da      	uxtb	r2, r3
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ff8:	0d9b      	lsrs	r3, r3, #22
 8011ffa:	b2db      	uxtb	r3, r3
 8011ffc:	f003 030f 	and.w	r3, r3, #15
 8012000:	b2da      	uxtb	r2, r3
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801200a:	0d5b      	lsrs	r3, r3, #21
 801200c:	b2db      	uxtb	r3, r3
 801200e:	f003 0301 	and.w	r3, r3, #1
 8012012:	b2da      	uxtb	r2, r3
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	2200      	movs	r2, #0
 801201e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012026:	0c1b      	lsrs	r3, r3, #16
 8012028:	b2db      	uxtb	r3, r3
 801202a:	f003 0301 	and.w	r3, r3, #1
 801202e:	b2da      	uxtb	r2, r3
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801203a:	0bdb      	lsrs	r3, r3, #15
 801203c:	b2db      	uxtb	r3, r3
 801203e:	f003 0301 	and.w	r3, r3, #1
 8012042:	b2da      	uxtb	r2, r3
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801204e:	0b9b      	lsrs	r3, r3, #14
 8012050:	b2db      	uxtb	r3, r3
 8012052:	f003 0301 	and.w	r3, r3, #1
 8012056:	b2da      	uxtb	r2, r3
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012062:	0b5b      	lsrs	r3, r3, #13
 8012064:	b2db      	uxtb	r3, r3
 8012066:	f003 0301 	and.w	r3, r3, #1
 801206a:	b2da      	uxtb	r2, r3
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012076:	0b1b      	lsrs	r3, r3, #12
 8012078:	b2db      	uxtb	r3, r3
 801207a:	f003 0301 	and.w	r3, r3, #1
 801207e:	b2da      	uxtb	r2, r3
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801208a:	0a9b      	lsrs	r3, r3, #10
 801208c:	b2db      	uxtb	r3, r3
 801208e:	f003 0303 	and.w	r3, r3, #3
 8012092:	b2da      	uxtb	r2, r3
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801209e:	0a1b      	lsrs	r3, r3, #8
 80120a0:	b2db      	uxtb	r3, r3
 80120a2:	f003 0303 	and.w	r3, r3, #3
 80120a6:	b2da      	uxtb	r2, r3
 80120a8:	683b      	ldr	r3, [r7, #0]
 80120aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120b2:	085b      	lsrs	r3, r3, #1
 80120b4:	b2db      	uxtb	r3, r3
 80120b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120ba:	b2da      	uxtb	r2, r3
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	2201      	movs	r2, #1
 80120c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80120ca:	2300      	movs	r3, #0
}
 80120cc:	4618      	mov	r0, r3
 80120ce:	370c      	adds	r7, #12
 80120d0:	46bd      	mov	sp, r7
 80120d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d6:	4770      	bx	lr
 80120d8:	004005ff 	.word	0x004005ff

080120dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80120dc:	b5b0      	push	{r4, r5, r7, lr}
 80120de:	b090      	sub	sp, #64	; 0x40
 80120e0:	af04      	add	r7, sp, #16
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80120e6:	2300      	movs	r3, #0
 80120e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2203      	movs	r2, #3
 80120f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120f8:	2b03      	cmp	r3, #3
 80120fa:	d02e      	beq.n	801215a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012102:	d106      	bne.n	8012112 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012108:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	639a      	str	r2, [r3, #56]	; 0x38
 8012110:	e029      	b.n	8012166 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012118:	d10a      	bne.n	8012130 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f000 f9f6 	bl	801250c <SD_WideBus_Enable>
 8012120:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012128:	431a      	orrs	r2, r3
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	639a      	str	r2, [r3, #56]	; 0x38
 801212e:	e01a      	b.n	8012166 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d10a      	bne.n	801214c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f000 fa33 	bl	80125a2 <SD_WideBus_Disable>
 801213c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012144:	431a      	orrs	r2, r3
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	639a      	str	r2, [r3, #56]	; 0x38
 801214a:	e00c      	b.n	8012166 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012150:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	639a      	str	r2, [r3, #56]	; 0x38
 8012158:	e005      	b.n	8012166 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801215e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801216a:	2b00      	cmp	r3, #0
 801216c:	d007      	beq.n	801217e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	4a35      	ldr	r2, [pc, #212]	; (8012248 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8012174:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8012176:	2301      	movs	r3, #1
 8012178:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801217c:	e042      	b.n	8012204 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 801217e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8012182:	f7fe faed 	bl	8010760 <HAL_RCCEx_GetPeriphCLKFreq>
 8012186:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8012188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218a:	2b00      	cmp	r3, #0
 801218c:	d031      	beq.n	80121f2 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	689b      	ldr	r3, [r3, #8]
 8012198:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	68db      	ldr	r3, [r3, #12]
 801219e:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	695b      	ldr	r3, [r3, #20]
 80121a8:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	699b      	ldr	r3, [r3, #24]
 80121ae:	3302      	adds	r3, #2
 80121b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80121b6:	4a25      	ldr	r2, [pc, #148]	; (801224c <HAL_SD_ConfigWideBusOperation+0x170>)
 80121b8:	4293      	cmp	r3, r2
 80121ba:	d907      	bls.n	80121cc <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 80121bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121be:	4a24      	ldr	r2, [pc, #144]	; (8012250 <HAL_SD_ConfigWideBusOperation+0x174>)
 80121c0:	fba2 2303 	umull	r2, r3, r2, r3
 80121c4:	0ddb      	lsrs	r3, r3, #23
 80121c6:	3b02      	subs	r3, #2
 80121c8:	623b      	str	r3, [r7, #32]
 80121ca:	e002      	b.n	80121d2 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	699b      	ldr	r3, [r3, #24]
 80121d0:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681d      	ldr	r5, [r3, #0]
 80121d6:	466c      	mov	r4, sp
 80121d8:	f107 0318 	add.w	r3, r7, #24
 80121dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80121e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80121e4:	f107 030c 	add.w	r3, r7, #12
 80121e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121ea:	4628      	mov	r0, r5
 80121ec:	f002 f994 	bl	8014518 <SDMMC_Init>
 80121f0:	e008      	b.n	8012204 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80121fe:	2301      	movs	r3, #1
 8012200:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	f44f 7100 	mov.w	r1, #512	; 0x200
 801220c:	4618      	mov	r0, r3
 801220e:	f002 fa50 	bl	80146b2 <SDMMC_CmdBlockLength>
 8012212:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8012214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012216:	2b00      	cmp	r3, #0
 8012218:	d00c      	beq.n	8012234 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	4a0a      	ldr	r2, [pc, #40]	; (8012248 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8012220:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012228:	431a      	orrs	r2, r3
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 801222e:	2301      	movs	r3, #1
 8012230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2201      	movs	r2, #1
 8012238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 801223c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012240:	4618      	mov	r0, r3
 8012242:	3730      	adds	r7, #48	; 0x30
 8012244:	46bd      	mov	sp, r7
 8012246:	bdb0      	pop	{r4, r5, r7, pc}
 8012248:	004005ff 	.word	0x004005ff
 801224c:	017d7840 	.word	0x017d7840
 8012250:	55e63b89 	.word	0x55e63b89

08012254 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8012254:	b5b0      	push	{r4, r5, r7, lr}
 8012256:	b094      	sub	sp, #80	; 0x50
 8012258:	af04      	add	r7, sp, #16
 801225a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 801225c:	2301      	movs	r3, #1
 801225e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	4618      	mov	r0, r3
 8012266:	f002 f9a0 	bl	80145aa <SDMMC_GetPowerState>
 801226a:	4603      	mov	r3, r0
 801226c:	2b00      	cmp	r3, #0
 801226e:	d102      	bne.n	8012276 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8012270:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8012274:	e0b8      	b.n	80123e8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801227a:	2b03      	cmp	r3, #3
 801227c:	d02f      	beq.n	80122de <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	4618      	mov	r0, r3
 8012284:	f002 fb1f 	bl	80148c6 <SDMMC_CmdSendCID>
 8012288:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801228a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801228c:	2b00      	cmp	r3, #0
 801228e:	d001      	beq.n	8012294 <SD_InitCard+0x40>
    {
      return errorstate;
 8012290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012292:	e0a9      	b.n	80123e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	2100      	movs	r1, #0
 801229a:	4618      	mov	r0, r3
 801229c:	f002 f9ca 	bl	8014634 <SDMMC_GetResponse>
 80122a0:	4602      	mov	r2, r0
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2104      	movs	r1, #4
 80122ac:	4618      	mov	r0, r3
 80122ae:	f002 f9c1 	bl	8014634 <SDMMC_GetResponse>
 80122b2:	4602      	mov	r2, r0
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2108      	movs	r1, #8
 80122be:	4618      	mov	r0, r3
 80122c0:	f002 f9b8 	bl	8014634 <SDMMC_GetResponse>
 80122c4:	4602      	mov	r2, r0
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	210c      	movs	r1, #12
 80122d0:	4618      	mov	r0, r3
 80122d2:	f002 f9af 	bl	8014634 <SDMMC_GetResponse>
 80122d6:	4602      	mov	r2, r0
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122e2:	2b03      	cmp	r3, #3
 80122e4:	d00d      	beq.n	8012302 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	f107 020e 	add.w	r2, r7, #14
 80122ee:	4611      	mov	r1, r2
 80122f0:	4618      	mov	r0, r3
 80122f2:	f002 fb25 	bl	8014940 <SDMMC_CmdSetRelAdd>
 80122f6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80122f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d001      	beq.n	8012302 <SD_InitCard+0xae>
    {
      return errorstate;
 80122fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012300:	e072      	b.n	80123e8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012306:	2b03      	cmp	r3, #3
 8012308:	d036      	beq.n	8012378 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801230a:	89fb      	ldrh	r3, [r7, #14]
 801230c:	461a      	mov	r2, r3
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681a      	ldr	r2, [r3, #0]
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801231a:	041b      	lsls	r3, r3, #16
 801231c:	4619      	mov	r1, r3
 801231e:	4610      	mov	r0, r2
 8012320:	f002 faef 	bl	8014902 <SDMMC_CmdSendCSD>
 8012324:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8012326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012328:	2b00      	cmp	r3, #0
 801232a:	d001      	beq.n	8012330 <SD_InitCard+0xdc>
    {
      return errorstate;
 801232c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801232e:	e05b      	b.n	80123e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	2100      	movs	r1, #0
 8012336:	4618      	mov	r0, r3
 8012338:	f002 f97c 	bl	8014634 <SDMMC_GetResponse>
 801233c:	4602      	mov	r2, r0
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	2104      	movs	r1, #4
 8012348:	4618      	mov	r0, r3
 801234a:	f002 f973 	bl	8014634 <SDMMC_GetResponse>
 801234e:	4602      	mov	r2, r0
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	2108      	movs	r1, #8
 801235a:	4618      	mov	r0, r3
 801235c:	f002 f96a 	bl	8014634 <SDMMC_GetResponse>
 8012360:	4602      	mov	r2, r0
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	210c      	movs	r1, #12
 801236c:	4618      	mov	r0, r3
 801236e:	f002 f961 	bl	8014634 <SDMMC_GetResponse>
 8012372:	4602      	mov	r2, r0
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	2104      	movs	r1, #4
 801237e:	4618      	mov	r0, r3
 8012380:	f002 f958 	bl	8014634 <SDMMC_GetResponse>
 8012384:	4603      	mov	r3, r0
 8012386:	0d1a      	lsrs	r2, r3, #20
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 801238c:	f107 0310 	add.w	r3, r7, #16
 8012390:	4619      	mov	r1, r3
 8012392:	6878      	ldr	r0, [r7, #4]
 8012394:	f7ff fcfe 	bl	8011d94 <HAL_SD_GetCardCSD>
 8012398:	4603      	mov	r3, r0
 801239a:	2b00      	cmp	r3, #0
 801239c:	d002      	beq.n	80123a4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801239e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80123a2:	e021      	b.n	80123e8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6819      	ldr	r1, [r3, #0]
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123ac:	041b      	lsls	r3, r3, #16
 80123ae:	2200      	movs	r2, #0
 80123b0:	461c      	mov	r4, r3
 80123b2:	4615      	mov	r5, r2
 80123b4:	4622      	mov	r2, r4
 80123b6:	462b      	mov	r3, r5
 80123b8:	4608      	mov	r0, r1
 80123ba:	f002 f99c 	bl	80146f6 <SDMMC_CmdSelDesel>
 80123be:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80123c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d001      	beq.n	80123ca <SD_InitCard+0x176>
  {
    return errorstate;
 80123c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123c8:	e00e      	b.n	80123e8 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	681d      	ldr	r5, [r3, #0]
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	466c      	mov	r4, sp
 80123d2:	f103 0210 	add.w	r2, r3, #16
 80123d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80123d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80123dc:	3304      	adds	r3, #4
 80123de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80123e0:	4628      	mov	r0, r5
 80123e2:	f002 f899 	bl	8014518 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80123e6:	2300      	movs	r3, #0
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3740      	adds	r7, #64	; 0x40
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bdb0      	pop	{r4, r5, r7, pc}

080123f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b086      	sub	sp, #24
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80123f8:	2300      	movs	r3, #0
 80123fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80123fc:	2300      	movs	r3, #0
 80123fe:	617b      	str	r3, [r7, #20]
 8012400:	2300      	movs	r3, #0
 8012402:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	4618      	mov	r0, r3
 801240a:	f002 f997 	bl	801473c <SDMMC_CmdGoIdleState>
 801240e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d001      	beq.n	801241a <SD_PowerON+0x2a>
  {
    return errorstate;
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	e072      	b.n	8012500 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	4618      	mov	r0, r3
 8012420:	f002 f9aa 	bl	8014778 <SDMMC_CmdOperCond>
 8012424:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d00d      	beq.n	8012448 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2200      	movs	r2, #0
 8012430:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	4618      	mov	r0, r3
 8012438:	f002 f980 	bl	801473c <SDMMC_CmdGoIdleState>
 801243c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d004      	beq.n	801244e <SD_PowerON+0x5e>
    {
      return errorstate;
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	e05b      	b.n	8012500 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2201      	movs	r2, #1
 801244c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012452:	2b01      	cmp	r3, #1
 8012454:	d137      	bne.n	80124c6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	2100      	movs	r1, #0
 801245c:	4618      	mov	r0, r3
 801245e:	f002 f9aa 	bl	80147b6 <SDMMC_CmdAppCommand>
 8012462:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d02d      	beq.n	80124c6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801246a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801246e:	e047      	b.n	8012500 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	2100      	movs	r1, #0
 8012476:	4618      	mov	r0, r3
 8012478:	f002 f99d 	bl	80147b6 <SDMMC_CmdAppCommand>
 801247c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d001      	beq.n	8012488 <SD_PowerON+0x98>
    {
      return errorstate;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	e03b      	b.n	8012500 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	491e      	ldr	r1, [pc, #120]	; (8012508 <SD_PowerON+0x118>)
 801248e:	4618      	mov	r0, r3
 8012490:	f002 f9b3 	bl	80147fa <SDMMC_CmdAppOperCommand>
 8012494:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d002      	beq.n	80124a2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801249c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80124a0:	e02e      	b.n	8012500 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	2100      	movs	r1, #0
 80124a8:	4618      	mov	r0, r3
 80124aa:	f002 f8c3 	bl	8014634 <SDMMC_GetResponse>
 80124ae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80124b0:	697b      	ldr	r3, [r7, #20]
 80124b2:	0fdb      	lsrs	r3, r3, #31
 80124b4:	2b01      	cmp	r3, #1
 80124b6:	d101      	bne.n	80124bc <SD_PowerON+0xcc>
 80124b8:	2301      	movs	r3, #1
 80124ba:	e000      	b.n	80124be <SD_PowerON+0xce>
 80124bc:	2300      	movs	r3, #0
 80124be:	613b      	str	r3, [r7, #16]

    count++;
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	3301      	adds	r3, #1
 80124c4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80124c6:	68bb      	ldr	r3, [r7, #8]
 80124c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80124cc:	4293      	cmp	r3, r2
 80124ce:	d802      	bhi.n	80124d6 <SD_PowerON+0xe6>
 80124d0:	693b      	ldr	r3, [r7, #16]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d0cc      	beq.n	8012470 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80124dc:	4293      	cmp	r3, r2
 80124de:	d902      	bls.n	80124e6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80124e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80124e4:	e00c      	b.n	8012500 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d003      	beq.n	80124f8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2201      	movs	r2, #1
 80124f4:	645a      	str	r2, [r3, #68]	; 0x44
 80124f6:	e002      	b.n	80124fe <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2200      	movs	r2, #0
 80124fc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80124fe:	2300      	movs	r3, #0
}
 8012500:	4618      	mov	r0, r3
 8012502:	3718      	adds	r7, #24
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}
 8012508:	c1100000 	.word	0xc1100000

0801250c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b086      	sub	sp, #24
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8012514:	2300      	movs	r3, #0
 8012516:	60fb      	str	r3, [r7, #12]
 8012518:	2300      	movs	r3, #0
 801251a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	2100      	movs	r1, #0
 8012522:	4618      	mov	r0, r3
 8012524:	f002 f886 	bl	8014634 <SDMMC_GetResponse>
 8012528:	4603      	mov	r3, r0
 801252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801252e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012532:	d102      	bne.n	801253a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8012534:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012538:	e02f      	b.n	801259a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801253a:	f107 030c 	add.w	r3, r7, #12
 801253e:	4619      	mov	r1, r3
 8012540:	6878      	ldr	r0, [r7, #4]
 8012542:	f000 f879 	bl	8012638 <SD_FindSCR>
 8012546:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d001      	beq.n	8012552 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	e023      	b.n	801259a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8012552:	693b      	ldr	r3, [r7, #16]
 8012554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012558:	2b00      	cmp	r3, #0
 801255a:	d01c      	beq.n	8012596 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681a      	ldr	r2, [r3, #0]
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012564:	041b      	lsls	r3, r3, #16
 8012566:	4619      	mov	r1, r3
 8012568:	4610      	mov	r0, r2
 801256a:	f002 f924 	bl	80147b6 <SDMMC_CmdAppCommand>
 801256e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d001      	beq.n	801257a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	e00f      	b.n	801259a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	2102      	movs	r1, #2
 8012580:	4618      	mov	r0, r3
 8012582:	f002 f95d 	bl	8014840 <SDMMC_CmdBusWidth>
 8012586:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d001      	beq.n	8012592 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	e003      	b.n	801259a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8012592:	2300      	movs	r3, #0
 8012594:	e001      	b.n	801259a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8012596:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801259a:	4618      	mov	r0, r3
 801259c:	3718      	adds	r7, #24
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}

080125a2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80125a2:	b580      	push	{r7, lr}
 80125a4:	b086      	sub	sp, #24
 80125a6:	af00      	add	r7, sp, #0
 80125a8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80125aa:	2300      	movs	r3, #0
 80125ac:	60fb      	str	r3, [r7, #12]
 80125ae:	2300      	movs	r3, #0
 80125b0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	2100      	movs	r1, #0
 80125b8:	4618      	mov	r0, r3
 80125ba:	f002 f83b 	bl	8014634 <SDMMC_GetResponse>
 80125be:	4603      	mov	r3, r0
 80125c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80125c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80125c8:	d102      	bne.n	80125d0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80125ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80125ce:	e02f      	b.n	8012630 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80125d0:	f107 030c 	add.w	r3, r7, #12
 80125d4:	4619      	mov	r1, r3
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f000 f82e 	bl	8012638 <SD_FindSCR>
 80125dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d001      	beq.n	80125e8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	e023      	b.n	8012630 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80125e8:	693b      	ldr	r3, [r7, #16]
 80125ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d01c      	beq.n	801262c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681a      	ldr	r2, [r3, #0]
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125fa:	041b      	lsls	r3, r3, #16
 80125fc:	4619      	mov	r1, r3
 80125fe:	4610      	mov	r0, r2
 8012600:	f002 f8d9 	bl	80147b6 <SDMMC_CmdAppCommand>
 8012604:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d001      	beq.n	8012610 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	e00f      	b.n	8012630 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	2100      	movs	r1, #0
 8012616:	4618      	mov	r0, r3
 8012618:	f002 f912 	bl	8014840 <SDMMC_CmdBusWidth>
 801261c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801261e:	697b      	ldr	r3, [r7, #20]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d001      	beq.n	8012628 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	e003      	b.n	8012630 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8012628:	2300      	movs	r3, #0
 801262a:	e001      	b.n	8012630 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801262c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8012630:	4618      	mov	r0, r3
 8012632:	3718      	adds	r7, #24
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}

08012638 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8012638:	b590      	push	{r4, r7, lr}
 801263a:	b08f      	sub	sp, #60	; 0x3c
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8012642:	f7f8 fc69 	bl	800af18 <HAL_GetTick>
 8012646:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8012648:	2300      	movs	r3, #0
 801264a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 801264c:	2300      	movs	r3, #0
 801264e:	60bb      	str	r3, [r7, #8]
 8012650:	2300      	movs	r3, #0
 8012652:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	2108      	movs	r1, #8
 801265e:	4618      	mov	r0, r3
 8012660:	f002 f827 	bl	80146b2 <SDMMC_CmdBlockLength>
 8012664:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8012666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012668:	2b00      	cmp	r3, #0
 801266a:	d001      	beq.n	8012670 <SD_FindSCR+0x38>
  {
    return errorstate;
 801266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801266e:	e0a9      	b.n	80127c4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681a      	ldr	r2, [r3, #0]
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012678:	041b      	lsls	r3, r3, #16
 801267a:	4619      	mov	r1, r3
 801267c:	4610      	mov	r0, r2
 801267e:	f002 f89a 	bl	80147b6 <SDMMC_CmdAppCommand>
 8012682:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8012684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012686:	2b00      	cmp	r3, #0
 8012688:	d001      	beq.n	801268e <SD_FindSCR+0x56>
  {
    return errorstate;
 801268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801268c:	e09a      	b.n	80127c4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801268e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012692:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8012694:	2308      	movs	r3, #8
 8012696:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8012698:	2330      	movs	r3, #48	; 0x30
 801269a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801269c:	2302      	movs	r3, #2
 801269e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80126a0:	2300      	movs	r3, #0
 80126a2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80126a4:	2301      	movs	r3, #1
 80126a6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	f107 0210 	add.w	r2, r7, #16
 80126b0:	4611      	mov	r1, r2
 80126b2:	4618      	mov	r0, r3
 80126b4:	f001 ffd1 	bl	801465a <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	4618      	mov	r0, r3
 80126be:	f002 f8e1 	bl	8014884 <SDMMC_CmdSendSCR>
 80126c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80126c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d022      	beq.n	8012710 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80126ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126cc:	e07a      	b.n	80127c4 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d00e      	beq.n	80126fa <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6819      	ldr	r1, [r3, #0]
 80126e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126e2:	009b      	lsls	r3, r3, #2
 80126e4:	f107 0208 	add.w	r2, r7, #8
 80126e8:	18d4      	adds	r4, r2, r3
 80126ea:	4608      	mov	r0, r1
 80126ec:	f001 ff41 	bl	8014572 <SDMMC_ReadFIFO>
 80126f0:	4603      	mov	r3, r0
 80126f2:	6023      	str	r3, [r4, #0]
      index++;
 80126f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126f6:	3301      	adds	r3, #1
 80126f8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80126fa:	f7f8 fc0d 	bl	800af18 <HAL_GetTick>
 80126fe:	4602      	mov	r2, r0
 8012700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012702:	1ad3      	subs	r3, r2, r3
 8012704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012708:	d102      	bne.n	8012710 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801270a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801270e:	e059      	b.n	80127c4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012716:	f240 432a 	movw	r3, #1066	; 0x42a
 801271a:	4013      	ands	r3, r2
 801271c:	2b00      	cmp	r3, #0
 801271e:	d0d6      	beq.n	80126ce <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012726:	f003 0308 	and.w	r3, r3, #8
 801272a:	2b00      	cmp	r3, #0
 801272c:	d005      	beq.n	801273a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	2208      	movs	r2, #8
 8012734:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8012736:	2308      	movs	r3, #8
 8012738:	e044      	b.n	80127c4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012740:	f003 0302 	and.w	r3, r3, #2
 8012744:	2b00      	cmp	r3, #0
 8012746:	d005      	beq.n	8012754 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	2202      	movs	r2, #2
 801274e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8012750:	2302      	movs	r3, #2
 8012752:	e037      	b.n	80127c4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801275a:	f003 0320 	and.w	r3, r3, #32
 801275e:	2b00      	cmp	r3, #0
 8012760:	d005      	beq.n	801276e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	2220      	movs	r2, #32
 8012768:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 801276a:	2320      	movs	r3, #32
 801276c:	e02a      	b.n	80127c4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	f240 523a 	movw	r2, #1338	; 0x53a
 8012776:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	061a      	lsls	r2, r3, #24
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	021b      	lsls	r3, r3, #8
 8012780:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012784:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	0a1b      	lsrs	r3, r3, #8
 801278a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801278e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	0e1b      	lsrs	r3, r3, #24
 8012794:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8012796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012798:	601a      	str	r2, [r3, #0]
    scr++;
 801279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279c:	3304      	adds	r3, #4
 801279e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	061a      	lsls	r2, r3, #24
 80127a4:	68bb      	ldr	r3, [r7, #8]
 80127a6:	021b      	lsls	r3, r3, #8
 80127a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80127ac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	0a1b      	lsrs	r3, r3, #8
 80127b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80127b6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80127b8:	68bb      	ldr	r3, [r7, #8]
 80127ba:	0e1b      	lsrs	r3, r3, #24
 80127bc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80127be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80127c2:	2300      	movs	r3, #0
}
 80127c4:	4618      	mov	r0, r3
 80127c6:	373c      	adds	r7, #60	; 0x3c
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd90      	pop	{r4, r7, pc}

080127cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d101      	bne.n	80127de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80127da:	2301      	movs	r3, #1
 80127dc:	e095      	b.n	801290a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d108      	bne.n	80127f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	685b      	ldr	r3, [r3, #4]
 80127ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80127ee:	d009      	beq.n	8012804 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2200      	movs	r2, #0
 80127f4:	61da      	str	r2, [r3, #28]
 80127f6:	e005      	b.n	8012804 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2200      	movs	r2, #0
 80127fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2200      	movs	r2, #0
 8012802:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2200      	movs	r2, #0
 8012808:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012810:	b2db      	uxtb	r3, r3
 8012812:	2b00      	cmp	r3, #0
 8012814:	d106      	bne.n	8012824 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	2200      	movs	r2, #0
 801281a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f7ef fcec 	bl	80021fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2202      	movs	r2, #2
 8012828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	681a      	ldr	r2, [r3, #0]
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801283a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	68db      	ldr	r3, [r3, #12]
 8012840:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012844:	d902      	bls.n	801284c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8012846:	2300      	movs	r3, #0
 8012848:	60fb      	str	r3, [r7, #12]
 801284a:	e002      	b.n	8012852 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801284c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012850:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	68db      	ldr	r3, [r3, #12]
 8012856:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801285a:	d007      	beq.n	801286c <HAL_SPI_Init+0xa0>
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	68db      	ldr	r3, [r3, #12]
 8012860:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012864:	d002      	beq.n	801286c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	2200      	movs	r2, #0
 801286a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	689b      	ldr	r3, [r3, #8]
 8012878:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801287c:	431a      	orrs	r2, r3
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	691b      	ldr	r3, [r3, #16]
 8012882:	f003 0302 	and.w	r3, r3, #2
 8012886:	431a      	orrs	r2, r3
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	695b      	ldr	r3, [r3, #20]
 801288c:	f003 0301 	and.w	r3, r3, #1
 8012890:	431a      	orrs	r2, r3
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	699b      	ldr	r3, [r3, #24]
 8012896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801289a:	431a      	orrs	r2, r3
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	69db      	ldr	r3, [r3, #28]
 80128a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80128a4:	431a      	orrs	r2, r3
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	6a1b      	ldr	r3, [r3, #32]
 80128aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128ae:	ea42 0103 	orr.w	r1, r2, r3
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	430a      	orrs	r2, r1
 80128c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	699b      	ldr	r3, [r3, #24]
 80128c6:	0c1b      	lsrs	r3, r3, #16
 80128c8:	f003 0204 	and.w	r2, r3, #4
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128d0:	f003 0310 	and.w	r3, r3, #16
 80128d4:	431a      	orrs	r2, r3
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128da:	f003 0308 	and.w	r3, r3, #8
 80128de:	431a      	orrs	r2, r3
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	68db      	ldr	r3, [r3, #12]
 80128e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80128e8:	ea42 0103 	orr.w	r1, r2, r3
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	430a      	orrs	r2, r1
 80128f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2200      	movs	r2, #0
 80128fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2201      	movs	r2, #1
 8012904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8012908:	2300      	movs	r3, #0
}
 801290a:	4618      	mov	r0, r3
 801290c:	3710      	adds	r7, #16
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}

08012912 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8012912:	b580      	push	{r7, lr}
 8012914:	b084      	sub	sp, #16
 8012916:	af00      	add	r7, sp, #0
 8012918:	60f8      	str	r0, [r7, #12]
 801291a:	60b9      	str	r1, [r7, #8]
 801291c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d101      	bne.n	8012928 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8012924:	2301      	movs	r3, #1
 8012926:	e038      	b.n	801299a <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801292e:	b2db      	uxtb	r3, r3
 8012930:	2b00      	cmp	r3, #0
 8012932:	d106      	bne.n	8012942 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	2200      	movs	r2, #0
 8012938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 801293c:	68f8      	ldr	r0, [r7, #12]
 801293e:	f7ee fafb 	bl	8000f38 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	681a      	ldr	r2, [r3, #0]
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	3308      	adds	r3, #8
 801294a:	4619      	mov	r1, r3
 801294c:	4610      	mov	r0, r2
 801294e:	f001 fccb 	bl	80142e8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	6818      	ldr	r0, [r3, #0]
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	689b      	ldr	r3, [r3, #8]
 801295a:	461a      	mov	r2, r3
 801295c:	68b9      	ldr	r1, [r7, #8]
 801295e:	f001 fd53 	bl	8014408 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	6858      	ldr	r0, [r3, #4]
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	689a      	ldr	r2, [r3, #8]
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801296e:	6879      	ldr	r1, [r7, #4]
 8012970:	f001 fd9a 	bl	80144a8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	68fa      	ldr	r2, [r7, #12]
 801297a:	6892      	ldr	r2, [r2, #8]
 801297c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	68fa      	ldr	r2, [r7, #12]
 8012986:	6892      	ldr	r2, [r2, #8]
 8012988:	f041 0101 	orr.w	r1, r1, #1
 801298c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	2201      	movs	r2, #1
 8012994:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8012998:	2300      	movs	r3, #0
}
 801299a:	4618      	mov	r0, r3
 801299c:	3710      	adds	r7, #16
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}

080129a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80129a2:	b580      	push	{r7, lr}
 80129a4:	b082      	sub	sp, #8
 80129a6:	af00      	add	r7, sp, #0
 80129a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d101      	bne.n	80129b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80129b0:	2301      	movs	r3, #1
 80129b2:	e049      	b.n	8012a48 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d106      	bne.n	80129ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2200      	movs	r2, #0
 80129c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f7ef fe23 	bl	8002614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2202      	movs	r2, #2
 80129d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681a      	ldr	r2, [r3, #0]
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	3304      	adds	r3, #4
 80129de:	4619      	mov	r1, r3
 80129e0:	4610      	mov	r0, r2
 80129e2:	f000 fbad 	bl	8013140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2201      	movs	r2, #1
 80129ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2201      	movs	r2, #1
 80129f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2201      	movs	r2, #1
 80129fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2201      	movs	r2, #1
 8012a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2201      	movs	r2, #1
 8012a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2201      	movs	r2, #1
 8012a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2201      	movs	r2, #1
 8012a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	2201      	movs	r2, #1
 8012a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2201      	movs	r2, #1
 8012a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2201      	movs	r2, #1
 8012a32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2201      	movs	r2, #1
 8012a3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2201      	movs	r2, #1
 8012a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012a46:	2300      	movs	r3, #0
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3708      	adds	r7, #8
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}

08012a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012a50:	b480      	push	{r7}
 8012a52:	b085      	sub	sp, #20
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	2b01      	cmp	r3, #1
 8012a62:	d001      	beq.n	8012a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012a64:	2301      	movs	r3, #1
 8012a66:	e04f      	b.n	8012b08 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2202      	movs	r2, #2
 8012a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	68da      	ldr	r2, [r3, #12]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	f042 0201 	orr.w	r2, r2, #1
 8012a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	4a23      	ldr	r2, [pc, #140]	; (8012b14 <HAL_TIM_Base_Start_IT+0xc4>)
 8012a86:	4293      	cmp	r3, r2
 8012a88:	d01d      	beq.n	8012ac6 <HAL_TIM_Base_Start_IT+0x76>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a92:	d018      	beq.n	8012ac6 <HAL_TIM_Base_Start_IT+0x76>
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	4a1f      	ldr	r2, [pc, #124]	; (8012b18 <HAL_TIM_Base_Start_IT+0xc8>)
 8012a9a:	4293      	cmp	r3, r2
 8012a9c:	d013      	beq.n	8012ac6 <HAL_TIM_Base_Start_IT+0x76>
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	4a1e      	ldr	r2, [pc, #120]	; (8012b1c <HAL_TIM_Base_Start_IT+0xcc>)
 8012aa4:	4293      	cmp	r3, r2
 8012aa6:	d00e      	beq.n	8012ac6 <HAL_TIM_Base_Start_IT+0x76>
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	4a1c      	ldr	r2, [pc, #112]	; (8012b20 <HAL_TIM_Base_Start_IT+0xd0>)
 8012aae:	4293      	cmp	r3, r2
 8012ab0:	d009      	beq.n	8012ac6 <HAL_TIM_Base_Start_IT+0x76>
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	4a1b      	ldr	r2, [pc, #108]	; (8012b24 <HAL_TIM_Base_Start_IT+0xd4>)
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	d004      	beq.n	8012ac6 <HAL_TIM_Base_Start_IT+0x76>
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	4a19      	ldr	r2, [pc, #100]	; (8012b28 <HAL_TIM_Base_Start_IT+0xd8>)
 8012ac2:	4293      	cmp	r3, r2
 8012ac4:	d115      	bne.n	8012af2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	689a      	ldr	r2, [r3, #8]
 8012acc:	4b17      	ldr	r3, [pc, #92]	; (8012b2c <HAL_TIM_Base_Start_IT+0xdc>)
 8012ace:	4013      	ands	r3, r2
 8012ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	2b06      	cmp	r3, #6
 8012ad6:	d015      	beq.n	8012b04 <HAL_TIM_Base_Start_IT+0xb4>
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ade:	d011      	beq.n	8012b04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	681a      	ldr	r2, [r3, #0]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	f042 0201 	orr.w	r2, r2, #1
 8012aee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012af0:	e008      	b.n	8012b04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	681a      	ldr	r2, [r3, #0]
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	f042 0201 	orr.w	r2, r2, #1
 8012b00:	601a      	str	r2, [r3, #0]
 8012b02:	e000      	b.n	8012b06 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012b06:	2300      	movs	r3, #0
}
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3714      	adds	r7, #20
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b12:	4770      	bx	lr
 8012b14:	40012c00 	.word	0x40012c00
 8012b18:	40000400 	.word	0x40000400
 8012b1c:	40000800 	.word	0x40000800
 8012b20:	40000c00 	.word	0x40000c00
 8012b24:	40013400 	.word	0x40013400
 8012b28:	40014000 	.word	0x40014000
 8012b2c:	00010007 	.word	0x00010007

08012b30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d101      	bne.n	8012b42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012b3e:	2301      	movs	r3, #1
 8012b40:	e049      	b.n	8012bd6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012b48:	b2db      	uxtb	r3, r3
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d106      	bne.n	8012b5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	2200      	movs	r2, #0
 8012b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f7f7 fe3a 	bl	800a7d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2202      	movs	r2, #2
 8012b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681a      	ldr	r2, [r3, #0]
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	3304      	adds	r3, #4
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	4610      	mov	r0, r2
 8012b70:	f000 fae6 	bl	8013140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2201      	movs	r2, #1
 8012b78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2201      	movs	r2, #1
 8012b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2201      	movs	r2, #1
 8012b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	2201      	movs	r2, #1
 8012b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2201      	movs	r2, #1
 8012b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2201      	movs	r2, #1
 8012ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2201      	movs	r2, #1
 8012bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2201      	movs	r2, #1
 8012bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2201      	movs	r2, #1
 8012bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2201      	movs	r2, #1
 8012bc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2201      	movs	r2, #1
 8012bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012bd4:	2300      	movs	r3, #0
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3708      	adds	r7, #8
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}
	...

08012be0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b084      	sub	sp, #16
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d109      	bne.n	8012c04 <HAL_TIM_PWM_Start+0x24>
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012bf6:	b2db      	uxtb	r3, r3
 8012bf8:	2b01      	cmp	r3, #1
 8012bfa:	bf14      	ite	ne
 8012bfc:	2301      	movne	r3, #1
 8012bfe:	2300      	moveq	r3, #0
 8012c00:	b2db      	uxtb	r3, r3
 8012c02:	e03c      	b.n	8012c7e <HAL_TIM_PWM_Start+0x9e>
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	2b04      	cmp	r3, #4
 8012c08:	d109      	bne.n	8012c1e <HAL_TIM_PWM_Start+0x3e>
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012c10:	b2db      	uxtb	r3, r3
 8012c12:	2b01      	cmp	r3, #1
 8012c14:	bf14      	ite	ne
 8012c16:	2301      	movne	r3, #1
 8012c18:	2300      	moveq	r3, #0
 8012c1a:	b2db      	uxtb	r3, r3
 8012c1c:	e02f      	b.n	8012c7e <HAL_TIM_PWM_Start+0x9e>
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	2b08      	cmp	r3, #8
 8012c22:	d109      	bne.n	8012c38 <HAL_TIM_PWM_Start+0x58>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c2a:	b2db      	uxtb	r3, r3
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	bf14      	ite	ne
 8012c30:	2301      	movne	r3, #1
 8012c32:	2300      	moveq	r3, #0
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	e022      	b.n	8012c7e <HAL_TIM_PWM_Start+0x9e>
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	2b0c      	cmp	r3, #12
 8012c3c:	d109      	bne.n	8012c52 <HAL_TIM_PWM_Start+0x72>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012c44:	b2db      	uxtb	r3, r3
 8012c46:	2b01      	cmp	r3, #1
 8012c48:	bf14      	ite	ne
 8012c4a:	2301      	movne	r3, #1
 8012c4c:	2300      	moveq	r3, #0
 8012c4e:	b2db      	uxtb	r3, r3
 8012c50:	e015      	b.n	8012c7e <HAL_TIM_PWM_Start+0x9e>
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	2b10      	cmp	r3, #16
 8012c56:	d109      	bne.n	8012c6c <HAL_TIM_PWM_Start+0x8c>
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c5e:	b2db      	uxtb	r3, r3
 8012c60:	2b01      	cmp	r3, #1
 8012c62:	bf14      	ite	ne
 8012c64:	2301      	movne	r3, #1
 8012c66:	2300      	moveq	r3, #0
 8012c68:	b2db      	uxtb	r3, r3
 8012c6a:	e008      	b.n	8012c7e <HAL_TIM_PWM_Start+0x9e>
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012c72:	b2db      	uxtb	r3, r3
 8012c74:	2b01      	cmp	r3, #1
 8012c76:	bf14      	ite	ne
 8012c78:	2301      	movne	r3, #1
 8012c7a:	2300      	moveq	r3, #0
 8012c7c:	b2db      	uxtb	r3, r3
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d001      	beq.n	8012c86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8012c82:	2301      	movs	r3, #1
 8012c84:	e09c      	b.n	8012dc0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d104      	bne.n	8012c96 <HAL_TIM_PWM_Start+0xb6>
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	2202      	movs	r2, #2
 8012c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012c94:	e023      	b.n	8012cde <HAL_TIM_PWM_Start+0xfe>
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	2b04      	cmp	r3, #4
 8012c9a:	d104      	bne.n	8012ca6 <HAL_TIM_PWM_Start+0xc6>
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2202      	movs	r2, #2
 8012ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012ca4:	e01b      	b.n	8012cde <HAL_TIM_PWM_Start+0xfe>
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	2b08      	cmp	r3, #8
 8012caa:	d104      	bne.n	8012cb6 <HAL_TIM_PWM_Start+0xd6>
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2202      	movs	r2, #2
 8012cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012cb4:	e013      	b.n	8012cde <HAL_TIM_PWM_Start+0xfe>
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	2b0c      	cmp	r3, #12
 8012cba:	d104      	bne.n	8012cc6 <HAL_TIM_PWM_Start+0xe6>
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2202      	movs	r2, #2
 8012cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012cc4:	e00b      	b.n	8012cde <HAL_TIM_PWM_Start+0xfe>
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	2b10      	cmp	r3, #16
 8012cca:	d104      	bne.n	8012cd6 <HAL_TIM_PWM_Start+0xf6>
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	2202      	movs	r2, #2
 8012cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012cd4:	e003      	b.n	8012cde <HAL_TIM_PWM_Start+0xfe>
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2202      	movs	r2, #2
 8012cda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	6839      	ldr	r1, [r7, #0]
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f000 fd9a 	bl	8013820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	4a35      	ldr	r2, [pc, #212]	; (8012dc8 <HAL_TIM_PWM_Start+0x1e8>)
 8012cf2:	4293      	cmp	r3, r2
 8012cf4:	d013      	beq.n	8012d1e <HAL_TIM_PWM_Start+0x13e>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	4a34      	ldr	r2, [pc, #208]	; (8012dcc <HAL_TIM_PWM_Start+0x1ec>)
 8012cfc:	4293      	cmp	r3, r2
 8012cfe:	d00e      	beq.n	8012d1e <HAL_TIM_PWM_Start+0x13e>
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	4a32      	ldr	r2, [pc, #200]	; (8012dd0 <HAL_TIM_PWM_Start+0x1f0>)
 8012d06:	4293      	cmp	r3, r2
 8012d08:	d009      	beq.n	8012d1e <HAL_TIM_PWM_Start+0x13e>
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	4a31      	ldr	r2, [pc, #196]	; (8012dd4 <HAL_TIM_PWM_Start+0x1f4>)
 8012d10:	4293      	cmp	r3, r2
 8012d12:	d004      	beq.n	8012d1e <HAL_TIM_PWM_Start+0x13e>
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	4a2f      	ldr	r2, [pc, #188]	; (8012dd8 <HAL_TIM_PWM_Start+0x1f8>)
 8012d1a:	4293      	cmp	r3, r2
 8012d1c:	d101      	bne.n	8012d22 <HAL_TIM_PWM_Start+0x142>
 8012d1e:	2301      	movs	r3, #1
 8012d20:	e000      	b.n	8012d24 <HAL_TIM_PWM_Start+0x144>
 8012d22:	2300      	movs	r3, #0
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d007      	beq.n	8012d38 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012d36:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	4a22      	ldr	r2, [pc, #136]	; (8012dc8 <HAL_TIM_PWM_Start+0x1e8>)
 8012d3e:	4293      	cmp	r3, r2
 8012d40:	d01d      	beq.n	8012d7e <HAL_TIM_PWM_Start+0x19e>
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d4a:	d018      	beq.n	8012d7e <HAL_TIM_PWM_Start+0x19e>
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	4a22      	ldr	r2, [pc, #136]	; (8012ddc <HAL_TIM_PWM_Start+0x1fc>)
 8012d52:	4293      	cmp	r3, r2
 8012d54:	d013      	beq.n	8012d7e <HAL_TIM_PWM_Start+0x19e>
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	4a21      	ldr	r2, [pc, #132]	; (8012de0 <HAL_TIM_PWM_Start+0x200>)
 8012d5c:	4293      	cmp	r3, r2
 8012d5e:	d00e      	beq.n	8012d7e <HAL_TIM_PWM_Start+0x19e>
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	4a1f      	ldr	r2, [pc, #124]	; (8012de4 <HAL_TIM_PWM_Start+0x204>)
 8012d66:	4293      	cmp	r3, r2
 8012d68:	d009      	beq.n	8012d7e <HAL_TIM_PWM_Start+0x19e>
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	4a17      	ldr	r2, [pc, #92]	; (8012dcc <HAL_TIM_PWM_Start+0x1ec>)
 8012d70:	4293      	cmp	r3, r2
 8012d72:	d004      	beq.n	8012d7e <HAL_TIM_PWM_Start+0x19e>
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	4a15      	ldr	r2, [pc, #84]	; (8012dd0 <HAL_TIM_PWM_Start+0x1f0>)
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	d115      	bne.n	8012daa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	689a      	ldr	r2, [r3, #8]
 8012d84:	4b18      	ldr	r3, [pc, #96]	; (8012de8 <HAL_TIM_PWM_Start+0x208>)
 8012d86:	4013      	ands	r3, r2
 8012d88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	2b06      	cmp	r3, #6
 8012d8e:	d015      	beq.n	8012dbc <HAL_TIM_PWM_Start+0x1dc>
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d96:	d011      	beq.n	8012dbc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	681a      	ldr	r2, [r3, #0]
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	f042 0201 	orr.w	r2, r2, #1
 8012da6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012da8:	e008      	b.n	8012dbc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	681a      	ldr	r2, [r3, #0]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	f042 0201 	orr.w	r2, r2, #1
 8012db8:	601a      	str	r2, [r3, #0]
 8012dba:	e000      	b.n	8012dbe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012dbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012dbe:	2300      	movs	r3, #0
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3710      	adds	r7, #16
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}
 8012dc8:	40012c00 	.word	0x40012c00
 8012dcc:	40013400 	.word	0x40013400
 8012dd0:	40014000 	.word	0x40014000
 8012dd4:	40014400 	.word	0x40014400
 8012dd8:	40014800 	.word	0x40014800
 8012ddc:	40000400 	.word	0x40000400
 8012de0:	40000800 	.word	0x40000800
 8012de4:	40000c00 	.word	0x40000c00
 8012de8:	00010007 	.word	0x00010007

08012dec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b082      	sub	sp, #8
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
 8012df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	6839      	ldr	r1, [r7, #0]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f000 fd0e 	bl	8013820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	4a3e      	ldr	r2, [pc, #248]	; (8012f04 <HAL_TIM_PWM_Stop+0x118>)
 8012e0a:	4293      	cmp	r3, r2
 8012e0c:	d013      	beq.n	8012e36 <HAL_TIM_PWM_Stop+0x4a>
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	4a3d      	ldr	r2, [pc, #244]	; (8012f08 <HAL_TIM_PWM_Stop+0x11c>)
 8012e14:	4293      	cmp	r3, r2
 8012e16:	d00e      	beq.n	8012e36 <HAL_TIM_PWM_Stop+0x4a>
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	4a3b      	ldr	r2, [pc, #236]	; (8012f0c <HAL_TIM_PWM_Stop+0x120>)
 8012e1e:	4293      	cmp	r3, r2
 8012e20:	d009      	beq.n	8012e36 <HAL_TIM_PWM_Stop+0x4a>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	4a3a      	ldr	r2, [pc, #232]	; (8012f10 <HAL_TIM_PWM_Stop+0x124>)
 8012e28:	4293      	cmp	r3, r2
 8012e2a:	d004      	beq.n	8012e36 <HAL_TIM_PWM_Stop+0x4a>
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	4a38      	ldr	r2, [pc, #224]	; (8012f14 <HAL_TIM_PWM_Stop+0x128>)
 8012e32:	4293      	cmp	r3, r2
 8012e34:	d101      	bne.n	8012e3a <HAL_TIM_PWM_Stop+0x4e>
 8012e36:	2301      	movs	r3, #1
 8012e38:	e000      	b.n	8012e3c <HAL_TIM_PWM_Stop+0x50>
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d017      	beq.n	8012e70 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	6a1a      	ldr	r2, [r3, #32]
 8012e46:	f241 1311 	movw	r3, #4369	; 0x1111
 8012e4a:	4013      	ands	r3, r2
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d10f      	bne.n	8012e70 <HAL_TIM_PWM_Stop+0x84>
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	6a1a      	ldr	r2, [r3, #32]
 8012e56:	f240 4344 	movw	r3, #1092	; 0x444
 8012e5a:	4013      	ands	r3, r2
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d107      	bne.n	8012e70 <HAL_TIM_PWM_Stop+0x84>
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012e6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	6a1a      	ldr	r2, [r3, #32]
 8012e76:	f241 1311 	movw	r3, #4369	; 0x1111
 8012e7a:	4013      	ands	r3, r2
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d10f      	bne.n	8012ea0 <HAL_TIM_PWM_Stop+0xb4>
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	6a1a      	ldr	r2, [r3, #32]
 8012e86:	f240 4344 	movw	r3, #1092	; 0x444
 8012e8a:	4013      	ands	r3, r2
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d107      	bne.n	8012ea0 <HAL_TIM_PWM_Stop+0xb4>
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	681a      	ldr	r2, [r3, #0]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	f022 0201 	bic.w	r2, r2, #1
 8012e9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d104      	bne.n	8012eb0 <HAL_TIM_PWM_Stop+0xc4>
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	2201      	movs	r2, #1
 8012eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012eae:	e023      	b.n	8012ef8 <HAL_TIM_PWM_Stop+0x10c>
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	2b04      	cmp	r3, #4
 8012eb4:	d104      	bne.n	8012ec0 <HAL_TIM_PWM_Stop+0xd4>
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	2201      	movs	r2, #1
 8012eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012ebe:	e01b      	b.n	8012ef8 <HAL_TIM_PWM_Stop+0x10c>
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	2b08      	cmp	r3, #8
 8012ec4:	d104      	bne.n	8012ed0 <HAL_TIM_PWM_Stop+0xe4>
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	2201      	movs	r2, #1
 8012eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012ece:	e013      	b.n	8012ef8 <HAL_TIM_PWM_Stop+0x10c>
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	2b0c      	cmp	r3, #12
 8012ed4:	d104      	bne.n	8012ee0 <HAL_TIM_PWM_Stop+0xf4>
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	2201      	movs	r2, #1
 8012eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012ede:	e00b      	b.n	8012ef8 <HAL_TIM_PWM_Stop+0x10c>
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	2b10      	cmp	r3, #16
 8012ee4:	d104      	bne.n	8012ef0 <HAL_TIM_PWM_Stop+0x104>
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2201      	movs	r2, #1
 8012eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012eee:	e003      	b.n	8012ef8 <HAL_TIM_PWM_Stop+0x10c>
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2201      	movs	r2, #1
 8012ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8012ef8:	2300      	movs	r3, #0
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	3708      	adds	r7, #8
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}
 8012f02:	bf00      	nop
 8012f04:	40012c00 	.word	0x40012c00
 8012f08:	40013400 	.word	0x40013400
 8012f0c:	40014000 	.word	0x40014000
 8012f10:	40014400 	.word	0x40014400
 8012f14:	40014800 	.word	0x40014800

08012f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b086      	sub	sp, #24
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	60f8      	str	r0, [r7, #12]
 8012f20:	60b9      	str	r1, [r7, #8]
 8012f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012f24:	2300      	movs	r3, #0
 8012f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012f2e:	2b01      	cmp	r3, #1
 8012f30:	d101      	bne.n	8012f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012f32:	2302      	movs	r3, #2
 8012f34:	e0ff      	b.n	8013136 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	2201      	movs	r2, #1
 8012f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2b14      	cmp	r3, #20
 8012f42:	f200 80f0 	bhi.w	8013126 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012f46:	a201      	add	r2, pc, #4	; (adr r2, 8012f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f4c:	08012fa1 	.word	0x08012fa1
 8012f50:	08013127 	.word	0x08013127
 8012f54:	08013127 	.word	0x08013127
 8012f58:	08013127 	.word	0x08013127
 8012f5c:	08012fe1 	.word	0x08012fe1
 8012f60:	08013127 	.word	0x08013127
 8012f64:	08013127 	.word	0x08013127
 8012f68:	08013127 	.word	0x08013127
 8012f6c:	08013023 	.word	0x08013023
 8012f70:	08013127 	.word	0x08013127
 8012f74:	08013127 	.word	0x08013127
 8012f78:	08013127 	.word	0x08013127
 8012f7c:	08013063 	.word	0x08013063
 8012f80:	08013127 	.word	0x08013127
 8012f84:	08013127 	.word	0x08013127
 8012f88:	08013127 	.word	0x08013127
 8012f8c:	080130a5 	.word	0x080130a5
 8012f90:	08013127 	.word	0x08013127
 8012f94:	08013127 	.word	0x08013127
 8012f98:	08013127 	.word	0x08013127
 8012f9c:	080130e5 	.word	0x080130e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	68b9      	ldr	r1, [r7, #8]
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f000 f964 	bl	8013274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	699a      	ldr	r2, [r3, #24]
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	f042 0208 	orr.w	r2, r2, #8
 8012fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	699a      	ldr	r2, [r3, #24]
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	f022 0204 	bic.w	r2, r2, #4
 8012fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	6999      	ldr	r1, [r3, #24]
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	691a      	ldr	r2, [r3, #16]
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	430a      	orrs	r2, r1
 8012fdc:	619a      	str	r2, [r3, #24]
      break;
 8012fde:	e0a5      	b.n	801312c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	68b9      	ldr	r1, [r7, #8]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f000 f9d4 	bl	8013394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	699a      	ldr	r2, [r3, #24]
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	699a      	ldr	r2, [r3, #24]
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801300a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	6999      	ldr	r1, [r3, #24]
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	691b      	ldr	r3, [r3, #16]
 8013016:	021a      	lsls	r2, r3, #8
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	430a      	orrs	r2, r1
 801301e:	619a      	str	r2, [r3, #24]
      break;
 8013020:	e084      	b.n	801312c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	68b9      	ldr	r1, [r7, #8]
 8013028:	4618      	mov	r0, r3
 801302a:	f000 fa3d 	bl	80134a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	69da      	ldr	r2, [r3, #28]
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	f042 0208 	orr.w	r2, r2, #8
 801303c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	69da      	ldr	r2, [r3, #28]
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	f022 0204 	bic.w	r2, r2, #4
 801304c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	69d9      	ldr	r1, [r3, #28]
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	691a      	ldr	r2, [r3, #16]
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	430a      	orrs	r2, r1
 801305e:	61da      	str	r2, [r3, #28]
      break;
 8013060:	e064      	b.n	801312c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	68b9      	ldr	r1, [r7, #8]
 8013068:	4618      	mov	r0, r3
 801306a:	f000 faa5 	bl	80135b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	69da      	ldr	r2, [r3, #28]
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801307c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	69da      	ldr	r2, [r3, #28]
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801308c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	69d9      	ldr	r1, [r3, #28]
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	691b      	ldr	r3, [r3, #16]
 8013098:	021a      	lsls	r2, r3, #8
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	430a      	orrs	r2, r1
 80130a0:	61da      	str	r2, [r3, #28]
      break;
 80130a2:	e043      	b.n	801312c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	68b9      	ldr	r1, [r7, #8]
 80130aa:	4618      	mov	r0, r3
 80130ac:	f000 faee 	bl	801368c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	f042 0208 	orr.w	r2, r2, #8
 80130be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	f022 0204 	bic.w	r2, r2, #4
 80130ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	691a      	ldr	r2, [r3, #16]
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	430a      	orrs	r2, r1
 80130e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80130e2:	e023      	b.n	801312c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	68b9      	ldr	r1, [r7, #8]
 80130ea:	4618      	mov	r0, r3
 80130ec:	f000 fb32 	bl	8013754 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80130fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801310e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	691b      	ldr	r3, [r3, #16]
 801311a:	021a      	lsls	r2, r3, #8
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	430a      	orrs	r2, r1
 8013122:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013124:	e002      	b.n	801312c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8013126:	2301      	movs	r3, #1
 8013128:	75fb      	strb	r3, [r7, #23]
      break;
 801312a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	2200      	movs	r2, #0
 8013130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013134:	7dfb      	ldrb	r3, [r7, #23]
}
 8013136:	4618      	mov	r0, r3
 8013138:	3718      	adds	r7, #24
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}
 801313e:	bf00      	nop

08013140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013140:	b480      	push	{r7}
 8013142:	b085      	sub	sp, #20
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	4a40      	ldr	r2, [pc, #256]	; (8013254 <TIM_Base_SetConfig+0x114>)
 8013154:	4293      	cmp	r3, r2
 8013156:	d013      	beq.n	8013180 <TIM_Base_SetConfig+0x40>
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801315e:	d00f      	beq.n	8013180 <TIM_Base_SetConfig+0x40>
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	4a3d      	ldr	r2, [pc, #244]	; (8013258 <TIM_Base_SetConfig+0x118>)
 8013164:	4293      	cmp	r3, r2
 8013166:	d00b      	beq.n	8013180 <TIM_Base_SetConfig+0x40>
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	4a3c      	ldr	r2, [pc, #240]	; (801325c <TIM_Base_SetConfig+0x11c>)
 801316c:	4293      	cmp	r3, r2
 801316e:	d007      	beq.n	8013180 <TIM_Base_SetConfig+0x40>
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	4a3b      	ldr	r2, [pc, #236]	; (8013260 <TIM_Base_SetConfig+0x120>)
 8013174:	4293      	cmp	r3, r2
 8013176:	d003      	beq.n	8013180 <TIM_Base_SetConfig+0x40>
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	4a3a      	ldr	r2, [pc, #232]	; (8013264 <TIM_Base_SetConfig+0x124>)
 801317c:	4293      	cmp	r3, r2
 801317e:	d108      	bne.n	8013192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	685b      	ldr	r3, [r3, #4]
 801318c:	68fa      	ldr	r2, [r7, #12]
 801318e:	4313      	orrs	r3, r2
 8013190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	4a2f      	ldr	r2, [pc, #188]	; (8013254 <TIM_Base_SetConfig+0x114>)
 8013196:	4293      	cmp	r3, r2
 8013198:	d01f      	beq.n	80131da <TIM_Base_SetConfig+0x9a>
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80131a0:	d01b      	beq.n	80131da <TIM_Base_SetConfig+0x9a>
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	4a2c      	ldr	r2, [pc, #176]	; (8013258 <TIM_Base_SetConfig+0x118>)
 80131a6:	4293      	cmp	r3, r2
 80131a8:	d017      	beq.n	80131da <TIM_Base_SetConfig+0x9a>
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	4a2b      	ldr	r2, [pc, #172]	; (801325c <TIM_Base_SetConfig+0x11c>)
 80131ae:	4293      	cmp	r3, r2
 80131b0:	d013      	beq.n	80131da <TIM_Base_SetConfig+0x9a>
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	4a2a      	ldr	r2, [pc, #168]	; (8013260 <TIM_Base_SetConfig+0x120>)
 80131b6:	4293      	cmp	r3, r2
 80131b8:	d00f      	beq.n	80131da <TIM_Base_SetConfig+0x9a>
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	4a29      	ldr	r2, [pc, #164]	; (8013264 <TIM_Base_SetConfig+0x124>)
 80131be:	4293      	cmp	r3, r2
 80131c0:	d00b      	beq.n	80131da <TIM_Base_SetConfig+0x9a>
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	4a28      	ldr	r2, [pc, #160]	; (8013268 <TIM_Base_SetConfig+0x128>)
 80131c6:	4293      	cmp	r3, r2
 80131c8:	d007      	beq.n	80131da <TIM_Base_SetConfig+0x9a>
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	4a27      	ldr	r2, [pc, #156]	; (801326c <TIM_Base_SetConfig+0x12c>)
 80131ce:	4293      	cmp	r3, r2
 80131d0:	d003      	beq.n	80131da <TIM_Base_SetConfig+0x9a>
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	4a26      	ldr	r2, [pc, #152]	; (8013270 <TIM_Base_SetConfig+0x130>)
 80131d6:	4293      	cmp	r3, r2
 80131d8:	d108      	bne.n	80131ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80131e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	68db      	ldr	r3, [r3, #12]
 80131e6:	68fa      	ldr	r2, [r7, #12]
 80131e8:	4313      	orrs	r3, r2
 80131ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80131f2:	683b      	ldr	r3, [r7, #0]
 80131f4:	695b      	ldr	r3, [r3, #20]
 80131f6:	4313      	orrs	r3, r2
 80131f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	68fa      	ldr	r2, [r7, #12]
 80131fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	689a      	ldr	r2, [r3, #8]
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013208:	683b      	ldr	r3, [r7, #0]
 801320a:	681a      	ldr	r2, [r3, #0]
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	4a10      	ldr	r2, [pc, #64]	; (8013254 <TIM_Base_SetConfig+0x114>)
 8013214:	4293      	cmp	r3, r2
 8013216:	d00f      	beq.n	8013238 <TIM_Base_SetConfig+0xf8>
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	4a12      	ldr	r2, [pc, #72]	; (8013264 <TIM_Base_SetConfig+0x124>)
 801321c:	4293      	cmp	r3, r2
 801321e:	d00b      	beq.n	8013238 <TIM_Base_SetConfig+0xf8>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	4a11      	ldr	r2, [pc, #68]	; (8013268 <TIM_Base_SetConfig+0x128>)
 8013224:	4293      	cmp	r3, r2
 8013226:	d007      	beq.n	8013238 <TIM_Base_SetConfig+0xf8>
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	4a10      	ldr	r2, [pc, #64]	; (801326c <TIM_Base_SetConfig+0x12c>)
 801322c:	4293      	cmp	r3, r2
 801322e:	d003      	beq.n	8013238 <TIM_Base_SetConfig+0xf8>
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	4a0f      	ldr	r2, [pc, #60]	; (8013270 <TIM_Base_SetConfig+0x130>)
 8013234:	4293      	cmp	r3, r2
 8013236:	d103      	bne.n	8013240 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	691a      	ldr	r2, [r3, #16]
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2201      	movs	r2, #1
 8013244:	615a      	str	r2, [r3, #20]
}
 8013246:	bf00      	nop
 8013248:	3714      	adds	r7, #20
 801324a:	46bd      	mov	sp, r7
 801324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013250:	4770      	bx	lr
 8013252:	bf00      	nop
 8013254:	40012c00 	.word	0x40012c00
 8013258:	40000400 	.word	0x40000400
 801325c:	40000800 	.word	0x40000800
 8013260:	40000c00 	.word	0x40000c00
 8013264:	40013400 	.word	0x40013400
 8013268:	40014000 	.word	0x40014000
 801326c:	40014400 	.word	0x40014400
 8013270:	40014800 	.word	0x40014800

08013274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013274:	b480      	push	{r7}
 8013276:	b087      	sub	sp, #28
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
 801327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6a1b      	ldr	r3, [r3, #32]
 8013282:	f023 0201 	bic.w	r2, r3, #1
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6a1b      	ldr	r3, [r3, #32]
 801328e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	685b      	ldr	r3, [r3, #4]
 8013294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	699b      	ldr	r3, [r3, #24]
 801329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80132a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80132a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	f023 0303 	bic.w	r3, r3, #3
 80132ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	68fa      	ldr	r2, [r7, #12]
 80132b6:	4313      	orrs	r3, r2
 80132b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80132ba:	697b      	ldr	r3, [r7, #20]
 80132bc:	f023 0302 	bic.w	r3, r3, #2
 80132c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	689b      	ldr	r3, [r3, #8]
 80132c6:	697a      	ldr	r2, [r7, #20]
 80132c8:	4313      	orrs	r3, r2
 80132ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	4a2c      	ldr	r2, [pc, #176]	; (8013380 <TIM_OC1_SetConfig+0x10c>)
 80132d0:	4293      	cmp	r3, r2
 80132d2:	d00f      	beq.n	80132f4 <TIM_OC1_SetConfig+0x80>
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	4a2b      	ldr	r2, [pc, #172]	; (8013384 <TIM_OC1_SetConfig+0x110>)
 80132d8:	4293      	cmp	r3, r2
 80132da:	d00b      	beq.n	80132f4 <TIM_OC1_SetConfig+0x80>
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	4a2a      	ldr	r2, [pc, #168]	; (8013388 <TIM_OC1_SetConfig+0x114>)
 80132e0:	4293      	cmp	r3, r2
 80132e2:	d007      	beq.n	80132f4 <TIM_OC1_SetConfig+0x80>
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	4a29      	ldr	r2, [pc, #164]	; (801338c <TIM_OC1_SetConfig+0x118>)
 80132e8:	4293      	cmp	r3, r2
 80132ea:	d003      	beq.n	80132f4 <TIM_OC1_SetConfig+0x80>
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	4a28      	ldr	r2, [pc, #160]	; (8013390 <TIM_OC1_SetConfig+0x11c>)
 80132f0:	4293      	cmp	r3, r2
 80132f2:	d10c      	bne.n	801330e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	f023 0308 	bic.w	r3, r3, #8
 80132fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	68db      	ldr	r3, [r3, #12]
 8013300:	697a      	ldr	r2, [r7, #20]
 8013302:	4313      	orrs	r3, r2
 8013304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	f023 0304 	bic.w	r3, r3, #4
 801330c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	4a1b      	ldr	r2, [pc, #108]	; (8013380 <TIM_OC1_SetConfig+0x10c>)
 8013312:	4293      	cmp	r3, r2
 8013314:	d00f      	beq.n	8013336 <TIM_OC1_SetConfig+0xc2>
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	4a1a      	ldr	r2, [pc, #104]	; (8013384 <TIM_OC1_SetConfig+0x110>)
 801331a:	4293      	cmp	r3, r2
 801331c:	d00b      	beq.n	8013336 <TIM_OC1_SetConfig+0xc2>
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	4a19      	ldr	r2, [pc, #100]	; (8013388 <TIM_OC1_SetConfig+0x114>)
 8013322:	4293      	cmp	r3, r2
 8013324:	d007      	beq.n	8013336 <TIM_OC1_SetConfig+0xc2>
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	4a18      	ldr	r2, [pc, #96]	; (801338c <TIM_OC1_SetConfig+0x118>)
 801332a:	4293      	cmp	r3, r2
 801332c:	d003      	beq.n	8013336 <TIM_OC1_SetConfig+0xc2>
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	4a17      	ldr	r2, [pc, #92]	; (8013390 <TIM_OC1_SetConfig+0x11c>)
 8013332:	4293      	cmp	r3, r2
 8013334:	d111      	bne.n	801335a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801333c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801333e:	693b      	ldr	r3, [r7, #16]
 8013340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	695b      	ldr	r3, [r3, #20]
 801334a:	693a      	ldr	r2, [r7, #16]
 801334c:	4313      	orrs	r3, r2
 801334e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	699b      	ldr	r3, [r3, #24]
 8013354:	693a      	ldr	r2, [r7, #16]
 8013356:	4313      	orrs	r3, r2
 8013358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	693a      	ldr	r2, [r7, #16]
 801335e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	68fa      	ldr	r2, [r7, #12]
 8013364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	685a      	ldr	r2, [r3, #4]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	697a      	ldr	r2, [r7, #20]
 8013372:	621a      	str	r2, [r3, #32]
}
 8013374:	bf00      	nop
 8013376:	371c      	adds	r7, #28
 8013378:	46bd      	mov	sp, r7
 801337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337e:	4770      	bx	lr
 8013380:	40012c00 	.word	0x40012c00
 8013384:	40013400 	.word	0x40013400
 8013388:	40014000 	.word	0x40014000
 801338c:	40014400 	.word	0x40014400
 8013390:	40014800 	.word	0x40014800

08013394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013394:	b480      	push	{r7}
 8013396:	b087      	sub	sp, #28
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
 801339c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	6a1b      	ldr	r3, [r3, #32]
 80133a2:	f023 0210 	bic.w	r2, r3, #16
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6a1b      	ldr	r3, [r3, #32]
 80133ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	699b      	ldr	r3, [r3, #24]
 80133ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80133c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80133c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80133ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	021b      	lsls	r3, r3, #8
 80133d6:	68fa      	ldr	r2, [r7, #12]
 80133d8:	4313      	orrs	r3, r2
 80133da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	f023 0320 	bic.w	r3, r3, #32
 80133e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	689b      	ldr	r3, [r3, #8]
 80133e8:	011b      	lsls	r3, r3, #4
 80133ea:	697a      	ldr	r2, [r7, #20]
 80133ec:	4313      	orrs	r3, r2
 80133ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	4a28      	ldr	r2, [pc, #160]	; (8013494 <TIM_OC2_SetConfig+0x100>)
 80133f4:	4293      	cmp	r3, r2
 80133f6:	d003      	beq.n	8013400 <TIM_OC2_SetConfig+0x6c>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	4a27      	ldr	r2, [pc, #156]	; (8013498 <TIM_OC2_SetConfig+0x104>)
 80133fc:	4293      	cmp	r3, r2
 80133fe:	d10d      	bne.n	801341c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013400:	697b      	ldr	r3, [r7, #20]
 8013402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013408:	683b      	ldr	r3, [r7, #0]
 801340a:	68db      	ldr	r3, [r3, #12]
 801340c:	011b      	lsls	r3, r3, #4
 801340e:	697a      	ldr	r2, [r7, #20]
 8013410:	4313      	orrs	r3, r2
 8013412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801341a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	4a1d      	ldr	r2, [pc, #116]	; (8013494 <TIM_OC2_SetConfig+0x100>)
 8013420:	4293      	cmp	r3, r2
 8013422:	d00f      	beq.n	8013444 <TIM_OC2_SetConfig+0xb0>
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	4a1c      	ldr	r2, [pc, #112]	; (8013498 <TIM_OC2_SetConfig+0x104>)
 8013428:	4293      	cmp	r3, r2
 801342a:	d00b      	beq.n	8013444 <TIM_OC2_SetConfig+0xb0>
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	4a1b      	ldr	r2, [pc, #108]	; (801349c <TIM_OC2_SetConfig+0x108>)
 8013430:	4293      	cmp	r3, r2
 8013432:	d007      	beq.n	8013444 <TIM_OC2_SetConfig+0xb0>
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	4a1a      	ldr	r2, [pc, #104]	; (80134a0 <TIM_OC2_SetConfig+0x10c>)
 8013438:	4293      	cmp	r3, r2
 801343a:	d003      	beq.n	8013444 <TIM_OC2_SetConfig+0xb0>
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	4a19      	ldr	r2, [pc, #100]	; (80134a4 <TIM_OC2_SetConfig+0x110>)
 8013440:	4293      	cmp	r3, r2
 8013442:	d113      	bne.n	801346c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013444:	693b      	ldr	r3, [r7, #16]
 8013446:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801344a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801344c:	693b      	ldr	r3, [r7, #16]
 801344e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013452:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	695b      	ldr	r3, [r3, #20]
 8013458:	009b      	lsls	r3, r3, #2
 801345a:	693a      	ldr	r2, [r7, #16]
 801345c:	4313      	orrs	r3, r2
 801345e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	699b      	ldr	r3, [r3, #24]
 8013464:	009b      	lsls	r3, r3, #2
 8013466:	693a      	ldr	r2, [r7, #16]
 8013468:	4313      	orrs	r3, r2
 801346a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	693a      	ldr	r2, [r7, #16]
 8013470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	68fa      	ldr	r2, [r7, #12]
 8013476:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	685a      	ldr	r2, [r3, #4]
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	697a      	ldr	r2, [r7, #20]
 8013484:	621a      	str	r2, [r3, #32]
}
 8013486:	bf00      	nop
 8013488:	371c      	adds	r7, #28
 801348a:	46bd      	mov	sp, r7
 801348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013490:	4770      	bx	lr
 8013492:	bf00      	nop
 8013494:	40012c00 	.word	0x40012c00
 8013498:	40013400 	.word	0x40013400
 801349c:	40014000 	.word	0x40014000
 80134a0:	40014400 	.word	0x40014400
 80134a4:	40014800 	.word	0x40014800

080134a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80134a8:	b480      	push	{r7}
 80134aa:	b087      	sub	sp, #28
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
 80134b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	6a1b      	ldr	r3, [r3, #32]
 80134b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	6a1b      	ldr	r3, [r3, #32]
 80134c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	685b      	ldr	r3, [r3, #4]
 80134c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	69db      	ldr	r3, [r3, #28]
 80134ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80134d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80134da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	f023 0303 	bic.w	r3, r3, #3
 80134e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	68fa      	ldr	r2, [r7, #12]
 80134ea:	4313      	orrs	r3, r2
 80134ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80134f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	689b      	ldr	r3, [r3, #8]
 80134fa:	021b      	lsls	r3, r3, #8
 80134fc:	697a      	ldr	r2, [r7, #20]
 80134fe:	4313      	orrs	r3, r2
 8013500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	4a27      	ldr	r2, [pc, #156]	; (80135a4 <TIM_OC3_SetConfig+0xfc>)
 8013506:	4293      	cmp	r3, r2
 8013508:	d003      	beq.n	8013512 <TIM_OC3_SetConfig+0x6a>
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	4a26      	ldr	r2, [pc, #152]	; (80135a8 <TIM_OC3_SetConfig+0x100>)
 801350e:	4293      	cmp	r3, r2
 8013510:	d10d      	bne.n	801352e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013512:	697b      	ldr	r3, [r7, #20]
 8013514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	68db      	ldr	r3, [r3, #12]
 801351e:	021b      	lsls	r3, r3, #8
 8013520:	697a      	ldr	r2, [r7, #20]
 8013522:	4313      	orrs	r3, r2
 8013524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801352c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	4a1c      	ldr	r2, [pc, #112]	; (80135a4 <TIM_OC3_SetConfig+0xfc>)
 8013532:	4293      	cmp	r3, r2
 8013534:	d00f      	beq.n	8013556 <TIM_OC3_SetConfig+0xae>
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	4a1b      	ldr	r2, [pc, #108]	; (80135a8 <TIM_OC3_SetConfig+0x100>)
 801353a:	4293      	cmp	r3, r2
 801353c:	d00b      	beq.n	8013556 <TIM_OC3_SetConfig+0xae>
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	4a1a      	ldr	r2, [pc, #104]	; (80135ac <TIM_OC3_SetConfig+0x104>)
 8013542:	4293      	cmp	r3, r2
 8013544:	d007      	beq.n	8013556 <TIM_OC3_SetConfig+0xae>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	4a19      	ldr	r2, [pc, #100]	; (80135b0 <TIM_OC3_SetConfig+0x108>)
 801354a:	4293      	cmp	r3, r2
 801354c:	d003      	beq.n	8013556 <TIM_OC3_SetConfig+0xae>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	4a18      	ldr	r2, [pc, #96]	; (80135b4 <TIM_OC3_SetConfig+0x10c>)
 8013552:	4293      	cmp	r3, r2
 8013554:	d113      	bne.n	801357e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013556:	693b      	ldr	r3, [r7, #16]
 8013558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801355c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	695b      	ldr	r3, [r3, #20]
 801356a:	011b      	lsls	r3, r3, #4
 801356c:	693a      	ldr	r2, [r7, #16]
 801356e:	4313      	orrs	r3, r2
 8013570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	699b      	ldr	r3, [r3, #24]
 8013576:	011b      	lsls	r3, r3, #4
 8013578:	693a      	ldr	r2, [r7, #16]
 801357a:	4313      	orrs	r3, r2
 801357c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	693a      	ldr	r2, [r7, #16]
 8013582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	68fa      	ldr	r2, [r7, #12]
 8013588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	685a      	ldr	r2, [r3, #4]
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	697a      	ldr	r2, [r7, #20]
 8013596:	621a      	str	r2, [r3, #32]
}
 8013598:	bf00      	nop
 801359a:	371c      	adds	r7, #28
 801359c:	46bd      	mov	sp, r7
 801359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a2:	4770      	bx	lr
 80135a4:	40012c00 	.word	0x40012c00
 80135a8:	40013400 	.word	0x40013400
 80135ac:	40014000 	.word	0x40014000
 80135b0:	40014400 	.word	0x40014400
 80135b4:	40014800 	.word	0x40014800

080135b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80135b8:	b480      	push	{r7}
 80135ba:	b087      	sub	sp, #28
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
 80135c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	6a1b      	ldr	r3, [r3, #32]
 80135c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	6a1b      	ldr	r3, [r3, #32]
 80135d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	685b      	ldr	r3, [r3, #4]
 80135d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	69db      	ldr	r3, [r3, #28]
 80135de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80135e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80135ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80135f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	021b      	lsls	r3, r3, #8
 80135fa:	68fa      	ldr	r2, [r7, #12]
 80135fc:	4313      	orrs	r3, r2
 80135fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	689b      	ldr	r3, [r3, #8]
 801360c:	031b      	lsls	r3, r3, #12
 801360e:	693a      	ldr	r2, [r7, #16]
 8013610:	4313      	orrs	r3, r2
 8013612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	4a18      	ldr	r2, [pc, #96]	; (8013678 <TIM_OC4_SetConfig+0xc0>)
 8013618:	4293      	cmp	r3, r2
 801361a:	d00f      	beq.n	801363c <TIM_OC4_SetConfig+0x84>
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	4a17      	ldr	r2, [pc, #92]	; (801367c <TIM_OC4_SetConfig+0xc4>)
 8013620:	4293      	cmp	r3, r2
 8013622:	d00b      	beq.n	801363c <TIM_OC4_SetConfig+0x84>
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	4a16      	ldr	r2, [pc, #88]	; (8013680 <TIM_OC4_SetConfig+0xc8>)
 8013628:	4293      	cmp	r3, r2
 801362a:	d007      	beq.n	801363c <TIM_OC4_SetConfig+0x84>
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	4a15      	ldr	r2, [pc, #84]	; (8013684 <TIM_OC4_SetConfig+0xcc>)
 8013630:	4293      	cmp	r3, r2
 8013632:	d003      	beq.n	801363c <TIM_OC4_SetConfig+0x84>
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	4a14      	ldr	r2, [pc, #80]	; (8013688 <TIM_OC4_SetConfig+0xd0>)
 8013638:	4293      	cmp	r3, r2
 801363a:	d109      	bne.n	8013650 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801363c:	697b      	ldr	r3, [r7, #20]
 801363e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	695b      	ldr	r3, [r3, #20]
 8013648:	019b      	lsls	r3, r3, #6
 801364a:	697a      	ldr	r2, [r7, #20]
 801364c:	4313      	orrs	r3, r2
 801364e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	697a      	ldr	r2, [r7, #20]
 8013654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	68fa      	ldr	r2, [r7, #12]
 801365a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	685a      	ldr	r2, [r3, #4]
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	693a      	ldr	r2, [r7, #16]
 8013668:	621a      	str	r2, [r3, #32]
}
 801366a:	bf00      	nop
 801366c:	371c      	adds	r7, #28
 801366e:	46bd      	mov	sp, r7
 8013670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013674:	4770      	bx	lr
 8013676:	bf00      	nop
 8013678:	40012c00 	.word	0x40012c00
 801367c:	40013400 	.word	0x40013400
 8013680:	40014000 	.word	0x40014000
 8013684:	40014400 	.word	0x40014400
 8013688:	40014800 	.word	0x40014800

0801368c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801368c:	b480      	push	{r7}
 801368e:	b087      	sub	sp, #28
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6a1b      	ldr	r3, [r3, #32]
 801369a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	6a1b      	ldr	r3, [r3, #32]
 80136a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	685b      	ldr	r3, [r3, #4]
 80136ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80136ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80136be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80136c0:	683b      	ldr	r3, [r7, #0]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	68fa      	ldr	r2, [r7, #12]
 80136c6:	4313      	orrs	r3, r2
 80136c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80136ca:	693b      	ldr	r3, [r7, #16]
 80136cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80136d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	689b      	ldr	r3, [r3, #8]
 80136d6:	041b      	lsls	r3, r3, #16
 80136d8:	693a      	ldr	r2, [r7, #16]
 80136da:	4313      	orrs	r3, r2
 80136dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	4a17      	ldr	r2, [pc, #92]	; (8013740 <TIM_OC5_SetConfig+0xb4>)
 80136e2:	4293      	cmp	r3, r2
 80136e4:	d00f      	beq.n	8013706 <TIM_OC5_SetConfig+0x7a>
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	4a16      	ldr	r2, [pc, #88]	; (8013744 <TIM_OC5_SetConfig+0xb8>)
 80136ea:	4293      	cmp	r3, r2
 80136ec:	d00b      	beq.n	8013706 <TIM_OC5_SetConfig+0x7a>
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	4a15      	ldr	r2, [pc, #84]	; (8013748 <TIM_OC5_SetConfig+0xbc>)
 80136f2:	4293      	cmp	r3, r2
 80136f4:	d007      	beq.n	8013706 <TIM_OC5_SetConfig+0x7a>
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	4a14      	ldr	r2, [pc, #80]	; (801374c <TIM_OC5_SetConfig+0xc0>)
 80136fa:	4293      	cmp	r3, r2
 80136fc:	d003      	beq.n	8013706 <TIM_OC5_SetConfig+0x7a>
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	4a13      	ldr	r2, [pc, #76]	; (8013750 <TIM_OC5_SetConfig+0xc4>)
 8013702:	4293      	cmp	r3, r2
 8013704:	d109      	bne.n	801371a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801370c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	695b      	ldr	r3, [r3, #20]
 8013712:	021b      	lsls	r3, r3, #8
 8013714:	697a      	ldr	r2, [r7, #20]
 8013716:	4313      	orrs	r3, r2
 8013718:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	697a      	ldr	r2, [r7, #20]
 801371e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	68fa      	ldr	r2, [r7, #12]
 8013724:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	685a      	ldr	r2, [r3, #4]
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	693a      	ldr	r2, [r7, #16]
 8013732:	621a      	str	r2, [r3, #32]
}
 8013734:	bf00      	nop
 8013736:	371c      	adds	r7, #28
 8013738:	46bd      	mov	sp, r7
 801373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373e:	4770      	bx	lr
 8013740:	40012c00 	.word	0x40012c00
 8013744:	40013400 	.word	0x40013400
 8013748:	40014000 	.word	0x40014000
 801374c:	40014400 	.word	0x40014400
 8013750:	40014800 	.word	0x40014800

08013754 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013754:	b480      	push	{r7}
 8013756:	b087      	sub	sp, #28
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
 801375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	6a1b      	ldr	r3, [r3, #32]
 8013762:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	6a1b      	ldr	r3, [r3, #32]
 801376e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	685b      	ldr	r3, [r3, #4]
 8013774:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801377a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	021b      	lsls	r3, r3, #8
 801378e:	68fa      	ldr	r2, [r7, #12]
 8013790:	4313      	orrs	r3, r2
 8013792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013794:	693b      	ldr	r3, [r7, #16]
 8013796:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801379a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	689b      	ldr	r3, [r3, #8]
 80137a0:	051b      	lsls	r3, r3, #20
 80137a2:	693a      	ldr	r2, [r7, #16]
 80137a4:	4313      	orrs	r3, r2
 80137a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	4a18      	ldr	r2, [pc, #96]	; (801380c <TIM_OC6_SetConfig+0xb8>)
 80137ac:	4293      	cmp	r3, r2
 80137ae:	d00f      	beq.n	80137d0 <TIM_OC6_SetConfig+0x7c>
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	4a17      	ldr	r2, [pc, #92]	; (8013810 <TIM_OC6_SetConfig+0xbc>)
 80137b4:	4293      	cmp	r3, r2
 80137b6:	d00b      	beq.n	80137d0 <TIM_OC6_SetConfig+0x7c>
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	4a16      	ldr	r2, [pc, #88]	; (8013814 <TIM_OC6_SetConfig+0xc0>)
 80137bc:	4293      	cmp	r3, r2
 80137be:	d007      	beq.n	80137d0 <TIM_OC6_SetConfig+0x7c>
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	4a15      	ldr	r2, [pc, #84]	; (8013818 <TIM_OC6_SetConfig+0xc4>)
 80137c4:	4293      	cmp	r3, r2
 80137c6:	d003      	beq.n	80137d0 <TIM_OC6_SetConfig+0x7c>
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	4a14      	ldr	r2, [pc, #80]	; (801381c <TIM_OC6_SetConfig+0xc8>)
 80137cc:	4293      	cmp	r3, r2
 80137ce:	d109      	bne.n	80137e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80137d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	695b      	ldr	r3, [r3, #20]
 80137dc:	029b      	lsls	r3, r3, #10
 80137de:	697a      	ldr	r2, [r7, #20]
 80137e0:	4313      	orrs	r3, r2
 80137e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	697a      	ldr	r2, [r7, #20]
 80137e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	68fa      	ldr	r2, [r7, #12]
 80137ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	685a      	ldr	r2, [r3, #4]
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	693a      	ldr	r2, [r7, #16]
 80137fc:	621a      	str	r2, [r3, #32]
}
 80137fe:	bf00      	nop
 8013800:	371c      	adds	r7, #28
 8013802:	46bd      	mov	sp, r7
 8013804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013808:	4770      	bx	lr
 801380a:	bf00      	nop
 801380c:	40012c00 	.word	0x40012c00
 8013810:	40013400 	.word	0x40013400
 8013814:	40014000 	.word	0x40014000
 8013818:	40014400 	.word	0x40014400
 801381c:	40014800 	.word	0x40014800

08013820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013820:	b480      	push	{r7}
 8013822:	b087      	sub	sp, #28
 8013824:	af00      	add	r7, sp, #0
 8013826:	60f8      	str	r0, [r7, #12]
 8013828:	60b9      	str	r1, [r7, #8]
 801382a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	f003 031f 	and.w	r3, r3, #31
 8013832:	2201      	movs	r2, #1
 8013834:	fa02 f303 	lsl.w	r3, r2, r3
 8013838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	6a1a      	ldr	r2, [r3, #32]
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	43db      	mvns	r3, r3
 8013842:	401a      	ands	r2, r3
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	6a1a      	ldr	r2, [r3, #32]
 801384c:	68bb      	ldr	r3, [r7, #8]
 801384e:	f003 031f 	and.w	r3, r3, #31
 8013852:	6879      	ldr	r1, [r7, #4]
 8013854:	fa01 f303 	lsl.w	r3, r1, r3
 8013858:	431a      	orrs	r2, r3
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	621a      	str	r2, [r3, #32]
}
 801385e:	bf00      	nop
 8013860:	371c      	adds	r7, #28
 8013862:	46bd      	mov	sp, r7
 8013864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013868:	4770      	bx	lr
	...

0801386c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801386c:	b480      	push	{r7}
 801386e:	b085      	sub	sp, #20
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
 8013874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801387c:	2b01      	cmp	r3, #1
 801387e:	d101      	bne.n	8013884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013880:	2302      	movs	r3, #2
 8013882:	e068      	b.n	8013956 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2201      	movs	r2, #1
 8013888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2202      	movs	r2, #2
 8013890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	685b      	ldr	r3, [r3, #4]
 801389a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	689b      	ldr	r3, [r3, #8]
 80138a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	4a2e      	ldr	r2, [pc, #184]	; (8013964 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80138aa:	4293      	cmp	r3, r2
 80138ac:	d004      	beq.n	80138b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	4a2d      	ldr	r2, [pc, #180]	; (8013968 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80138b4:	4293      	cmp	r3, r2
 80138b6:	d108      	bne.n	80138ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80138be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	685b      	ldr	r3, [r3, #4]
 80138c4:	68fa      	ldr	r2, [r7, #12]
 80138c6:	4313      	orrs	r3, r2
 80138c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80138d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	68fa      	ldr	r2, [r7, #12]
 80138d8:	4313      	orrs	r3, r2
 80138da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	68fa      	ldr	r2, [r7, #12]
 80138e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	4a1e      	ldr	r2, [pc, #120]	; (8013964 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80138ea:	4293      	cmp	r3, r2
 80138ec:	d01d      	beq.n	801392a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80138f6:	d018      	beq.n	801392a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	4a1b      	ldr	r2, [pc, #108]	; (801396c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80138fe:	4293      	cmp	r3, r2
 8013900:	d013      	beq.n	801392a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	4a1a      	ldr	r2, [pc, #104]	; (8013970 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013908:	4293      	cmp	r3, r2
 801390a:	d00e      	beq.n	801392a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	4a18      	ldr	r2, [pc, #96]	; (8013974 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013912:	4293      	cmp	r3, r2
 8013914:	d009      	beq.n	801392a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	4a13      	ldr	r2, [pc, #76]	; (8013968 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801391c:	4293      	cmp	r3, r2
 801391e:	d004      	beq.n	801392a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	4a14      	ldr	r2, [pc, #80]	; (8013978 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013926:	4293      	cmp	r3, r2
 8013928:	d10c      	bne.n	8013944 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013930:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	689b      	ldr	r3, [r3, #8]
 8013936:	68ba      	ldr	r2, [r7, #8]
 8013938:	4313      	orrs	r3, r2
 801393a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	68ba      	ldr	r2, [r7, #8]
 8013942:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2201      	movs	r2, #1
 8013948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2200      	movs	r2, #0
 8013950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013954:	2300      	movs	r3, #0
}
 8013956:	4618      	mov	r0, r3
 8013958:	3714      	adds	r7, #20
 801395a:	46bd      	mov	sp, r7
 801395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013960:	4770      	bx	lr
 8013962:	bf00      	nop
 8013964:	40012c00 	.word	0x40012c00
 8013968:	40013400 	.word	0x40013400
 801396c:	40000400 	.word	0x40000400
 8013970:	40000800 	.word	0x40000800
 8013974:	40000c00 	.word	0x40000c00
 8013978:	40014000 	.word	0x40014000

0801397c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b082      	sub	sp, #8
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d101      	bne.n	801398e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801398a:	2301      	movs	r3, #1
 801398c:	e040      	b.n	8013a10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013992:	2b00      	cmp	r3, #0
 8013994:	d106      	bne.n	80139a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2200      	movs	r2, #0
 801399a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	f7ee fee6 	bl	8002770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	2224      	movs	r2, #36	; 0x24
 80139a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	681a      	ldr	r2, [r3, #0]
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	f022 0201 	bic.w	r2, r2, #1
 80139b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f000 f82c 	bl	8013a18 <UART_SetConfig>
 80139c0:	4603      	mov	r3, r0
 80139c2:	2b01      	cmp	r3, #1
 80139c4:	d101      	bne.n	80139ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80139c6:	2301      	movs	r3, #1
 80139c8:	e022      	b.n	8013a10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d002      	beq.n	80139d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f000 fad8 	bl	8013f88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	685a      	ldr	r2, [r3, #4]
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80139e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	689a      	ldr	r2, [r3, #8]
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80139f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	f042 0201 	orr.w	r2, r2, #1
 8013a06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	f000 fb5f 	bl	80140cc <UART_CheckIdleState>
 8013a0e:	4603      	mov	r3, r0
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3708      	adds	r7, #8
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013a1c:	b08a      	sub	sp, #40	; 0x28
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013a22:	2300      	movs	r3, #0
 8013a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	689a      	ldr	r2, [r3, #8]
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	691b      	ldr	r3, [r3, #16]
 8013a30:	431a      	orrs	r2, r3
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	695b      	ldr	r3, [r3, #20]
 8013a36:	431a      	orrs	r2, r3
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	69db      	ldr	r3, [r3, #28]
 8013a3c:	4313      	orrs	r3, r2
 8013a3e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	681a      	ldr	r2, [r3, #0]
 8013a46:	4ba4      	ldr	r3, [pc, #656]	; (8013cd8 <UART_SetConfig+0x2c0>)
 8013a48:	4013      	ands	r3, r2
 8013a4a:	68fa      	ldr	r2, [r7, #12]
 8013a4c:	6812      	ldr	r2, [r2, #0]
 8013a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013a50:	430b      	orrs	r3, r1
 8013a52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	68da      	ldr	r2, [r3, #12]
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	430a      	orrs	r2, r1
 8013a68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	699b      	ldr	r3, [r3, #24]
 8013a6e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	4a99      	ldr	r2, [pc, #612]	; (8013cdc <UART_SetConfig+0x2c4>)
 8013a76:	4293      	cmp	r3, r2
 8013a78:	d004      	beq.n	8013a84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	6a1b      	ldr	r3, [r3, #32]
 8013a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a80:	4313      	orrs	r3, r2
 8013a82:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	689b      	ldr	r3, [r3, #8]
 8013a8a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a94:	430a      	orrs	r2, r1
 8013a96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	4a90      	ldr	r2, [pc, #576]	; (8013ce0 <UART_SetConfig+0x2c8>)
 8013a9e:	4293      	cmp	r3, r2
 8013aa0:	d126      	bne.n	8013af0 <UART_SetConfig+0xd8>
 8013aa2:	4b90      	ldr	r3, [pc, #576]	; (8013ce4 <UART_SetConfig+0x2cc>)
 8013aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013aa8:	f003 0303 	and.w	r3, r3, #3
 8013aac:	2b03      	cmp	r3, #3
 8013aae:	d81b      	bhi.n	8013ae8 <UART_SetConfig+0xd0>
 8013ab0:	a201      	add	r2, pc, #4	; (adr r2, 8013ab8 <UART_SetConfig+0xa0>)
 8013ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ab6:	bf00      	nop
 8013ab8:	08013ac9 	.word	0x08013ac9
 8013abc:	08013ad9 	.word	0x08013ad9
 8013ac0:	08013ad1 	.word	0x08013ad1
 8013ac4:	08013ae1 	.word	0x08013ae1
 8013ac8:	2301      	movs	r3, #1
 8013aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013ace:	e116      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013ad0:	2302      	movs	r3, #2
 8013ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013ad6:	e112      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013ad8:	2304      	movs	r3, #4
 8013ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013ade:	e10e      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013ae0:	2308      	movs	r3, #8
 8013ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013ae6:	e10a      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013ae8:	2310      	movs	r3, #16
 8013aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013aee:	e106      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	4a7c      	ldr	r2, [pc, #496]	; (8013ce8 <UART_SetConfig+0x2d0>)
 8013af6:	4293      	cmp	r3, r2
 8013af8:	d138      	bne.n	8013b6c <UART_SetConfig+0x154>
 8013afa:	4b7a      	ldr	r3, [pc, #488]	; (8013ce4 <UART_SetConfig+0x2cc>)
 8013afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013b00:	f003 030c 	and.w	r3, r3, #12
 8013b04:	2b0c      	cmp	r3, #12
 8013b06:	d82d      	bhi.n	8013b64 <UART_SetConfig+0x14c>
 8013b08:	a201      	add	r2, pc, #4	; (adr r2, 8013b10 <UART_SetConfig+0xf8>)
 8013b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b0e:	bf00      	nop
 8013b10:	08013b45 	.word	0x08013b45
 8013b14:	08013b65 	.word	0x08013b65
 8013b18:	08013b65 	.word	0x08013b65
 8013b1c:	08013b65 	.word	0x08013b65
 8013b20:	08013b55 	.word	0x08013b55
 8013b24:	08013b65 	.word	0x08013b65
 8013b28:	08013b65 	.word	0x08013b65
 8013b2c:	08013b65 	.word	0x08013b65
 8013b30:	08013b4d 	.word	0x08013b4d
 8013b34:	08013b65 	.word	0x08013b65
 8013b38:	08013b65 	.word	0x08013b65
 8013b3c:	08013b65 	.word	0x08013b65
 8013b40:	08013b5d 	.word	0x08013b5d
 8013b44:	2300      	movs	r3, #0
 8013b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013b4a:	e0d8      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013b4c:	2302      	movs	r3, #2
 8013b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013b52:	e0d4      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013b54:	2304      	movs	r3, #4
 8013b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013b5a:	e0d0      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013b5c:	2308      	movs	r3, #8
 8013b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013b62:	e0cc      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013b64:	2310      	movs	r3, #16
 8013b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013b6a:	e0c8      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	4a5e      	ldr	r2, [pc, #376]	; (8013cec <UART_SetConfig+0x2d4>)
 8013b72:	4293      	cmp	r3, r2
 8013b74:	d125      	bne.n	8013bc2 <UART_SetConfig+0x1aa>
 8013b76:	4b5b      	ldr	r3, [pc, #364]	; (8013ce4 <UART_SetConfig+0x2cc>)
 8013b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013b7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013b80:	2b30      	cmp	r3, #48	; 0x30
 8013b82:	d016      	beq.n	8013bb2 <UART_SetConfig+0x19a>
 8013b84:	2b30      	cmp	r3, #48	; 0x30
 8013b86:	d818      	bhi.n	8013bba <UART_SetConfig+0x1a2>
 8013b88:	2b20      	cmp	r3, #32
 8013b8a:	d00a      	beq.n	8013ba2 <UART_SetConfig+0x18a>
 8013b8c:	2b20      	cmp	r3, #32
 8013b8e:	d814      	bhi.n	8013bba <UART_SetConfig+0x1a2>
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d002      	beq.n	8013b9a <UART_SetConfig+0x182>
 8013b94:	2b10      	cmp	r3, #16
 8013b96:	d008      	beq.n	8013baa <UART_SetConfig+0x192>
 8013b98:	e00f      	b.n	8013bba <UART_SetConfig+0x1a2>
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013ba0:	e0ad      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013ba2:	2302      	movs	r3, #2
 8013ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013ba8:	e0a9      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013baa:	2304      	movs	r3, #4
 8013bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013bb0:	e0a5      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013bb2:	2308      	movs	r3, #8
 8013bb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013bb8:	e0a1      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013bba:	2310      	movs	r3, #16
 8013bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013bc0:	e09d      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	4a4a      	ldr	r2, [pc, #296]	; (8013cf0 <UART_SetConfig+0x2d8>)
 8013bc8:	4293      	cmp	r3, r2
 8013bca:	d125      	bne.n	8013c18 <UART_SetConfig+0x200>
 8013bcc:	4b45      	ldr	r3, [pc, #276]	; (8013ce4 <UART_SetConfig+0x2cc>)
 8013bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013bd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013bd6:	2bc0      	cmp	r3, #192	; 0xc0
 8013bd8:	d016      	beq.n	8013c08 <UART_SetConfig+0x1f0>
 8013bda:	2bc0      	cmp	r3, #192	; 0xc0
 8013bdc:	d818      	bhi.n	8013c10 <UART_SetConfig+0x1f8>
 8013bde:	2b80      	cmp	r3, #128	; 0x80
 8013be0:	d00a      	beq.n	8013bf8 <UART_SetConfig+0x1e0>
 8013be2:	2b80      	cmp	r3, #128	; 0x80
 8013be4:	d814      	bhi.n	8013c10 <UART_SetConfig+0x1f8>
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d002      	beq.n	8013bf0 <UART_SetConfig+0x1d8>
 8013bea:	2b40      	cmp	r3, #64	; 0x40
 8013bec:	d008      	beq.n	8013c00 <UART_SetConfig+0x1e8>
 8013bee:	e00f      	b.n	8013c10 <UART_SetConfig+0x1f8>
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013bf6:	e082      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013bf8:	2302      	movs	r3, #2
 8013bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013bfe:	e07e      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013c00:	2304      	movs	r3, #4
 8013c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013c06:	e07a      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013c08:	2308      	movs	r3, #8
 8013c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013c0e:	e076      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013c10:	2310      	movs	r3, #16
 8013c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013c16:	e072      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	4a35      	ldr	r2, [pc, #212]	; (8013cf4 <UART_SetConfig+0x2dc>)
 8013c1e:	4293      	cmp	r3, r2
 8013c20:	d12a      	bne.n	8013c78 <UART_SetConfig+0x260>
 8013c22:	4b30      	ldr	r3, [pc, #192]	; (8013ce4 <UART_SetConfig+0x2cc>)
 8013c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013c30:	d01a      	beq.n	8013c68 <UART_SetConfig+0x250>
 8013c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013c36:	d81b      	bhi.n	8013c70 <UART_SetConfig+0x258>
 8013c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c3c:	d00c      	beq.n	8013c58 <UART_SetConfig+0x240>
 8013c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c42:	d815      	bhi.n	8013c70 <UART_SetConfig+0x258>
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d003      	beq.n	8013c50 <UART_SetConfig+0x238>
 8013c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c4c:	d008      	beq.n	8013c60 <UART_SetConfig+0x248>
 8013c4e:	e00f      	b.n	8013c70 <UART_SetConfig+0x258>
 8013c50:	2300      	movs	r3, #0
 8013c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013c56:	e052      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013c58:	2302      	movs	r3, #2
 8013c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013c5e:	e04e      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013c60:	2304      	movs	r3, #4
 8013c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013c66:	e04a      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013c68:	2308      	movs	r3, #8
 8013c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013c6e:	e046      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013c70:	2310      	movs	r3, #16
 8013c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013c76:	e042      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	4a17      	ldr	r2, [pc, #92]	; (8013cdc <UART_SetConfig+0x2c4>)
 8013c7e:	4293      	cmp	r3, r2
 8013c80:	d13a      	bne.n	8013cf8 <UART_SetConfig+0x2e0>
 8013c82:	4b18      	ldr	r3, [pc, #96]	; (8013ce4 <UART_SetConfig+0x2cc>)
 8013c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8013c8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013c90:	d01a      	beq.n	8013cc8 <UART_SetConfig+0x2b0>
 8013c92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013c96:	d81b      	bhi.n	8013cd0 <UART_SetConfig+0x2b8>
 8013c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013c9c:	d00c      	beq.n	8013cb8 <UART_SetConfig+0x2a0>
 8013c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013ca2:	d815      	bhi.n	8013cd0 <UART_SetConfig+0x2b8>
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d003      	beq.n	8013cb0 <UART_SetConfig+0x298>
 8013ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013cac:	d008      	beq.n	8013cc0 <UART_SetConfig+0x2a8>
 8013cae:	e00f      	b.n	8013cd0 <UART_SetConfig+0x2b8>
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013cb6:	e022      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013cb8:	2302      	movs	r3, #2
 8013cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013cbe:	e01e      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013cc0:	2304      	movs	r3, #4
 8013cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013cc6:	e01a      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013cc8:	2308      	movs	r3, #8
 8013cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013cce:	e016      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013cd0:	2310      	movs	r3, #16
 8013cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013cd6:	e012      	b.n	8013cfe <UART_SetConfig+0x2e6>
 8013cd8:	efff69f3 	.word	0xefff69f3
 8013cdc:	40008000 	.word	0x40008000
 8013ce0:	40013800 	.word	0x40013800
 8013ce4:	40021000 	.word	0x40021000
 8013ce8:	40004400 	.word	0x40004400
 8013cec:	40004800 	.word	0x40004800
 8013cf0:	40004c00 	.word	0x40004c00
 8013cf4:	40005000 	.word	0x40005000
 8013cf8:	2310      	movs	r3, #16
 8013cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	4a9f      	ldr	r2, [pc, #636]	; (8013f80 <UART_SetConfig+0x568>)
 8013d04:	4293      	cmp	r3, r2
 8013d06:	d17a      	bne.n	8013dfe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013d08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013d0c:	2b08      	cmp	r3, #8
 8013d0e:	d824      	bhi.n	8013d5a <UART_SetConfig+0x342>
 8013d10:	a201      	add	r2, pc, #4	; (adr r2, 8013d18 <UART_SetConfig+0x300>)
 8013d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d16:	bf00      	nop
 8013d18:	08013d3d 	.word	0x08013d3d
 8013d1c:	08013d5b 	.word	0x08013d5b
 8013d20:	08013d45 	.word	0x08013d45
 8013d24:	08013d5b 	.word	0x08013d5b
 8013d28:	08013d4b 	.word	0x08013d4b
 8013d2c:	08013d5b 	.word	0x08013d5b
 8013d30:	08013d5b 	.word	0x08013d5b
 8013d34:	08013d5b 	.word	0x08013d5b
 8013d38:	08013d53 	.word	0x08013d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013d3c:	f7fc f988 	bl	8010050 <HAL_RCC_GetPCLK1Freq>
 8013d40:	61f8      	str	r0, [r7, #28]
        break;
 8013d42:	e010      	b.n	8013d66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013d44:	4b8f      	ldr	r3, [pc, #572]	; (8013f84 <UART_SetConfig+0x56c>)
 8013d46:	61fb      	str	r3, [r7, #28]
        break;
 8013d48:	e00d      	b.n	8013d66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013d4a:	f7fc f8e9 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 8013d4e:	61f8      	str	r0, [r7, #28]
        break;
 8013d50:	e009      	b.n	8013d66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013d56:	61fb      	str	r3, [r7, #28]
        break;
 8013d58:	e005      	b.n	8013d66 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8013d5e:	2301      	movs	r3, #1
 8013d60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8013d64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013d66:	69fb      	ldr	r3, [r7, #28]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	f000 80fb 	beq.w	8013f64 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	685a      	ldr	r2, [r3, #4]
 8013d72:	4613      	mov	r3, r2
 8013d74:	005b      	lsls	r3, r3, #1
 8013d76:	4413      	add	r3, r2
 8013d78:	69fa      	ldr	r2, [r7, #28]
 8013d7a:	429a      	cmp	r2, r3
 8013d7c:	d305      	bcc.n	8013d8a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8013d84:	69fa      	ldr	r2, [r7, #28]
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d903      	bls.n	8013d92 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013d90:	e0e8      	b.n	8013f64 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8013d92:	69fb      	ldr	r3, [r7, #28]
 8013d94:	2200      	movs	r2, #0
 8013d96:	461c      	mov	r4, r3
 8013d98:	4615      	mov	r5, r2
 8013d9a:	f04f 0200 	mov.w	r2, #0
 8013d9e:	f04f 0300 	mov.w	r3, #0
 8013da2:	022b      	lsls	r3, r5, #8
 8013da4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8013da8:	0222      	lsls	r2, r4, #8
 8013daa:	68f9      	ldr	r1, [r7, #12]
 8013dac:	6849      	ldr	r1, [r1, #4]
 8013dae:	0849      	lsrs	r1, r1, #1
 8013db0:	2000      	movs	r0, #0
 8013db2:	4688      	mov	r8, r1
 8013db4:	4681      	mov	r9, r0
 8013db6:	eb12 0a08 	adds.w	sl, r2, r8
 8013dba:	eb43 0b09 	adc.w	fp, r3, r9
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	685b      	ldr	r3, [r3, #4]
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	603b      	str	r3, [r7, #0]
 8013dc6:	607a      	str	r2, [r7, #4]
 8013dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013dcc:	4650      	mov	r0, sl
 8013dce:	4659      	mov	r1, fp
 8013dd0:	f7ec fa5e 	bl	8000290 <__aeabi_uldivmod>
 8013dd4:	4602      	mov	r2, r0
 8013dd6:	460b      	mov	r3, r1
 8013dd8:	4613      	mov	r3, r2
 8013dda:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013ddc:	69bb      	ldr	r3, [r7, #24]
 8013dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013de2:	d308      	bcc.n	8013df6 <UART_SetConfig+0x3de>
 8013de4:	69bb      	ldr	r3, [r7, #24]
 8013de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013dea:	d204      	bcs.n	8013df6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	69ba      	ldr	r2, [r7, #24]
 8013df2:	60da      	str	r2, [r3, #12]
 8013df4:	e0b6      	b.n	8013f64 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8013df6:	2301      	movs	r3, #1
 8013df8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013dfc:	e0b2      	b.n	8013f64 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	69db      	ldr	r3, [r3, #28]
 8013e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013e06:	d15e      	bne.n	8013ec6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8013e08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e0c:	2b08      	cmp	r3, #8
 8013e0e:	d828      	bhi.n	8013e62 <UART_SetConfig+0x44a>
 8013e10:	a201      	add	r2, pc, #4	; (adr r2, 8013e18 <UART_SetConfig+0x400>)
 8013e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e16:	bf00      	nop
 8013e18:	08013e3d 	.word	0x08013e3d
 8013e1c:	08013e45 	.word	0x08013e45
 8013e20:	08013e4d 	.word	0x08013e4d
 8013e24:	08013e63 	.word	0x08013e63
 8013e28:	08013e53 	.word	0x08013e53
 8013e2c:	08013e63 	.word	0x08013e63
 8013e30:	08013e63 	.word	0x08013e63
 8013e34:	08013e63 	.word	0x08013e63
 8013e38:	08013e5b 	.word	0x08013e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013e3c:	f7fc f908 	bl	8010050 <HAL_RCC_GetPCLK1Freq>
 8013e40:	61f8      	str	r0, [r7, #28]
        break;
 8013e42:	e014      	b.n	8013e6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013e44:	f7fc f91a 	bl	801007c <HAL_RCC_GetPCLK2Freq>
 8013e48:	61f8      	str	r0, [r7, #28]
        break;
 8013e4a:	e010      	b.n	8013e6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013e4c:	4b4d      	ldr	r3, [pc, #308]	; (8013f84 <UART_SetConfig+0x56c>)
 8013e4e:	61fb      	str	r3, [r7, #28]
        break;
 8013e50:	e00d      	b.n	8013e6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013e52:	f7fc f865 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 8013e56:	61f8      	str	r0, [r7, #28]
        break;
 8013e58:	e009      	b.n	8013e6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013e5e:	61fb      	str	r3, [r7, #28]
        break;
 8013e60:	e005      	b.n	8013e6e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8013e62:	2300      	movs	r3, #0
 8013e64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8013e66:	2301      	movs	r3, #1
 8013e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8013e6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013e6e:	69fb      	ldr	r3, [r7, #28]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d077      	beq.n	8013f64 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013e74:	69fb      	ldr	r3, [r7, #28]
 8013e76:	005a      	lsls	r2, r3, #1
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	685b      	ldr	r3, [r3, #4]
 8013e7c:	085b      	lsrs	r3, r3, #1
 8013e7e:	441a      	add	r2, r3
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	685b      	ldr	r3, [r3, #4]
 8013e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013e8a:	69bb      	ldr	r3, [r7, #24]
 8013e8c:	2b0f      	cmp	r3, #15
 8013e8e:	d916      	bls.n	8013ebe <UART_SetConfig+0x4a6>
 8013e90:	69bb      	ldr	r3, [r7, #24]
 8013e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013e96:	d212      	bcs.n	8013ebe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013e98:	69bb      	ldr	r3, [r7, #24]
 8013e9a:	b29b      	uxth	r3, r3
 8013e9c:	f023 030f 	bic.w	r3, r3, #15
 8013ea0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013ea2:	69bb      	ldr	r3, [r7, #24]
 8013ea4:	085b      	lsrs	r3, r3, #1
 8013ea6:	b29b      	uxth	r3, r3
 8013ea8:	f003 0307 	and.w	r3, r3, #7
 8013eac:	b29a      	uxth	r2, r3
 8013eae:	8afb      	ldrh	r3, [r7, #22]
 8013eb0:	4313      	orrs	r3, r2
 8013eb2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	8afa      	ldrh	r2, [r7, #22]
 8013eba:	60da      	str	r2, [r3, #12]
 8013ebc:	e052      	b.n	8013f64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013ec4:	e04e      	b.n	8013f64 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013ec6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013eca:	2b08      	cmp	r3, #8
 8013ecc:	d827      	bhi.n	8013f1e <UART_SetConfig+0x506>
 8013ece:	a201      	add	r2, pc, #4	; (adr r2, 8013ed4 <UART_SetConfig+0x4bc>)
 8013ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ed4:	08013ef9 	.word	0x08013ef9
 8013ed8:	08013f01 	.word	0x08013f01
 8013edc:	08013f09 	.word	0x08013f09
 8013ee0:	08013f1f 	.word	0x08013f1f
 8013ee4:	08013f0f 	.word	0x08013f0f
 8013ee8:	08013f1f 	.word	0x08013f1f
 8013eec:	08013f1f 	.word	0x08013f1f
 8013ef0:	08013f1f 	.word	0x08013f1f
 8013ef4:	08013f17 	.word	0x08013f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013ef8:	f7fc f8aa 	bl	8010050 <HAL_RCC_GetPCLK1Freq>
 8013efc:	61f8      	str	r0, [r7, #28]
        break;
 8013efe:	e014      	b.n	8013f2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013f00:	f7fc f8bc 	bl	801007c <HAL_RCC_GetPCLK2Freq>
 8013f04:	61f8      	str	r0, [r7, #28]
        break;
 8013f06:	e010      	b.n	8013f2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013f08:	4b1e      	ldr	r3, [pc, #120]	; (8013f84 <UART_SetConfig+0x56c>)
 8013f0a:	61fb      	str	r3, [r7, #28]
        break;
 8013f0c:	e00d      	b.n	8013f2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013f0e:	f7fc f807 	bl	800ff20 <HAL_RCC_GetSysClockFreq>
 8013f12:	61f8      	str	r0, [r7, #28]
        break;
 8013f14:	e009      	b.n	8013f2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013f1a:	61fb      	str	r3, [r7, #28]
        break;
 8013f1c:	e005      	b.n	8013f2a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8013f22:	2301      	movs	r3, #1
 8013f24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8013f28:	bf00      	nop
    }

    if (pclk != 0U)
 8013f2a:	69fb      	ldr	r3, [r7, #28]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d019      	beq.n	8013f64 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	685b      	ldr	r3, [r3, #4]
 8013f34:	085a      	lsrs	r2, r3, #1
 8013f36:	69fb      	ldr	r3, [r7, #28]
 8013f38:	441a      	add	r2, r3
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	685b      	ldr	r3, [r3, #4]
 8013f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013f42:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013f44:	69bb      	ldr	r3, [r7, #24]
 8013f46:	2b0f      	cmp	r3, #15
 8013f48:	d909      	bls.n	8013f5e <UART_SetConfig+0x546>
 8013f4a:	69bb      	ldr	r3, [r7, #24]
 8013f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013f50:	d205      	bcs.n	8013f5e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013f52:	69bb      	ldr	r3, [r7, #24]
 8013f54:	b29a      	uxth	r2, r3
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	60da      	str	r2, [r3, #12]
 8013f5c:	e002      	b.n	8013f64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8013f5e:	2301      	movs	r3, #1
 8013f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2200      	movs	r2, #0
 8013f68:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8013f70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8013f74:	4618      	mov	r0, r3
 8013f76:	3728      	adds	r7, #40	; 0x28
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013f7e:	bf00      	nop
 8013f80:	40008000 	.word	0x40008000
 8013f84:	00f42400 	.word	0x00f42400

08013f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013f88:	b480      	push	{r7}
 8013f8a:	b083      	sub	sp, #12
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f94:	f003 0301 	and.w	r3, r3, #1
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d00a      	beq.n	8013fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	685b      	ldr	r3, [r3, #4]
 8013fa2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	430a      	orrs	r2, r1
 8013fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fb6:	f003 0302 	and.w	r3, r3, #2
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d00a      	beq.n	8013fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	685b      	ldr	r3, [r3, #4]
 8013fc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	430a      	orrs	r2, r1
 8013fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fd8:	f003 0304 	and.w	r3, r3, #4
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d00a      	beq.n	8013ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	685b      	ldr	r3, [r3, #4]
 8013fe6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	430a      	orrs	r2, r1
 8013ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ffa:	f003 0308 	and.w	r3, r3, #8
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d00a      	beq.n	8014018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	685b      	ldr	r3, [r3, #4]
 8014008:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	430a      	orrs	r2, r1
 8014016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801401c:	f003 0310 	and.w	r3, r3, #16
 8014020:	2b00      	cmp	r3, #0
 8014022:	d00a      	beq.n	801403a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	689b      	ldr	r3, [r3, #8]
 801402a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	430a      	orrs	r2, r1
 8014038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801403e:	f003 0320 	and.w	r3, r3, #32
 8014042:	2b00      	cmp	r3, #0
 8014044:	d00a      	beq.n	801405c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	689b      	ldr	r3, [r3, #8]
 801404c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	430a      	orrs	r2, r1
 801405a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014064:	2b00      	cmp	r3, #0
 8014066:	d01a      	beq.n	801409e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	685b      	ldr	r3, [r3, #4]
 801406e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	430a      	orrs	r2, r1
 801407c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014086:	d10a      	bne.n	801409e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	685b      	ldr	r3, [r3, #4]
 801408e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	430a      	orrs	r2, r1
 801409c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d00a      	beq.n	80140c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	685b      	ldr	r3, [r3, #4]
 80140b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	430a      	orrs	r2, r1
 80140be:	605a      	str	r2, [r3, #4]
  }
}
 80140c0:	bf00      	nop
 80140c2:	370c      	adds	r7, #12
 80140c4:	46bd      	mov	sp, r7
 80140c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ca:	4770      	bx	lr

080140cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b086      	sub	sp, #24
 80140d0:	af02      	add	r7, sp, #8
 80140d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	2200      	movs	r2, #0
 80140d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80140dc:	f7f6 ff1c 	bl	800af18 <HAL_GetTick>
 80140e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	f003 0308 	and.w	r3, r3, #8
 80140ec:	2b08      	cmp	r3, #8
 80140ee:	d10e      	bne.n	801410e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80140f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80140f4:	9300      	str	r3, [sp, #0]
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	2200      	movs	r2, #0
 80140fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80140fe:	6878      	ldr	r0, [r7, #4]
 8014100:	f000 f82d 	bl	801415e <UART_WaitOnFlagUntilTimeout>
 8014104:	4603      	mov	r3, r0
 8014106:	2b00      	cmp	r3, #0
 8014108:	d001      	beq.n	801410e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801410a:	2303      	movs	r3, #3
 801410c:	e023      	b.n	8014156 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	f003 0304 	and.w	r3, r3, #4
 8014118:	2b04      	cmp	r3, #4
 801411a:	d10e      	bne.n	801413a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801411c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014120:	9300      	str	r3, [sp, #0]
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	2200      	movs	r2, #0
 8014126:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f000 f817 	bl	801415e <UART_WaitOnFlagUntilTimeout>
 8014130:	4603      	mov	r3, r0
 8014132:	2b00      	cmp	r3, #0
 8014134:	d001      	beq.n	801413a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014136:	2303      	movs	r3, #3
 8014138:	e00d      	b.n	8014156 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	2220      	movs	r2, #32
 801413e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	2220      	movs	r2, #32
 8014144:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	2200      	movs	r2, #0
 801414a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2200      	movs	r2, #0
 8014150:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8014154:	2300      	movs	r3, #0
}
 8014156:	4618      	mov	r0, r3
 8014158:	3710      	adds	r7, #16
 801415a:	46bd      	mov	sp, r7
 801415c:	bd80      	pop	{r7, pc}

0801415e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801415e:	b580      	push	{r7, lr}
 8014160:	b09c      	sub	sp, #112	; 0x70
 8014162:	af00      	add	r7, sp, #0
 8014164:	60f8      	str	r0, [r7, #12]
 8014166:	60b9      	str	r1, [r7, #8]
 8014168:	603b      	str	r3, [r7, #0]
 801416a:	4613      	mov	r3, r2
 801416c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801416e:	e0a5      	b.n	80142bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014176:	f000 80a1 	beq.w	80142bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801417a:	f7f6 fecd 	bl	800af18 <HAL_GetTick>
 801417e:	4602      	mov	r2, r0
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	1ad3      	subs	r3, r2, r3
 8014184:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014186:	429a      	cmp	r2, r3
 8014188:	d302      	bcc.n	8014190 <UART_WaitOnFlagUntilTimeout+0x32>
 801418a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801418c:	2b00      	cmp	r3, #0
 801418e:	d13e      	bne.n	801420e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014198:	e853 3f00 	ldrex	r3, [r3]
 801419c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801419e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80141a4:	667b      	str	r3, [r7, #100]	; 0x64
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	461a      	mov	r2, r3
 80141ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80141ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80141b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80141b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80141b6:	e841 2300 	strex	r3, r2, [r1]
 80141ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80141bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d1e6      	bne.n	8014190 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	3308      	adds	r3, #8
 80141c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141cc:	e853 3f00 	ldrex	r3, [r3]
 80141d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80141d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d4:	f023 0301 	bic.w	r3, r3, #1
 80141d8:	663b      	str	r3, [r7, #96]	; 0x60
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	3308      	adds	r3, #8
 80141e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80141e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80141e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80141e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80141ea:	e841 2300 	strex	r3, r2, [r1]
 80141ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80141f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d1e5      	bne.n	80141c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	2220      	movs	r2, #32
 80141fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	2220      	movs	r2, #32
 8014200:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	2200      	movs	r2, #0
 8014206:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 801420a:	2303      	movs	r3, #3
 801420c:	e067      	b.n	80142de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	f003 0304 	and.w	r3, r3, #4
 8014218:	2b00      	cmp	r3, #0
 801421a:	d04f      	beq.n	80142bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	69db      	ldr	r3, [r3, #28]
 8014222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801422a:	d147      	bne.n	80142bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014234:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801423e:	e853 3f00 	ldrex	r3, [r3]
 8014242:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014246:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801424a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	461a      	mov	r2, r3
 8014252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014254:	637b      	str	r3, [r7, #52]	; 0x34
 8014256:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801425a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801425c:	e841 2300 	strex	r3, r2, [r1]
 8014260:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014264:	2b00      	cmp	r3, #0
 8014266:	d1e6      	bne.n	8014236 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	3308      	adds	r3, #8
 801426e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	e853 3f00 	ldrex	r3, [r3]
 8014276:	613b      	str	r3, [r7, #16]
   return(result);
 8014278:	693b      	ldr	r3, [r7, #16]
 801427a:	f023 0301 	bic.w	r3, r3, #1
 801427e:	66bb      	str	r3, [r7, #104]	; 0x68
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	3308      	adds	r3, #8
 8014286:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014288:	623a      	str	r2, [r7, #32]
 801428a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801428c:	69f9      	ldr	r1, [r7, #28]
 801428e:	6a3a      	ldr	r2, [r7, #32]
 8014290:	e841 2300 	strex	r3, r2, [r1]
 8014294:	61bb      	str	r3, [r7, #24]
   return(result);
 8014296:	69bb      	ldr	r3, [r7, #24]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d1e5      	bne.n	8014268 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	2220      	movs	r2, #32
 80142a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	2220      	movs	r2, #32
 80142a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	2220      	movs	r2, #32
 80142ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	2200      	movs	r2, #0
 80142b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80142b8:	2303      	movs	r3, #3
 80142ba:	e010      	b.n	80142de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	69da      	ldr	r2, [r3, #28]
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	4013      	ands	r3, r2
 80142c6:	68ba      	ldr	r2, [r7, #8]
 80142c8:	429a      	cmp	r2, r3
 80142ca:	bf0c      	ite	eq
 80142cc:	2301      	moveq	r3, #1
 80142ce:	2300      	movne	r3, #0
 80142d0:	b2db      	uxtb	r3, r3
 80142d2:	461a      	mov	r2, r3
 80142d4:	79fb      	ldrb	r3, [r7, #7]
 80142d6:	429a      	cmp	r2, r3
 80142d8:	f43f af4a 	beq.w	8014170 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80142dc:	2300      	movs	r3, #0
}
 80142de:	4618      	mov	r0, r3
 80142e0:	3770      	adds	r7, #112	; 0x70
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}
	...

080142e8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80142e8:	b480      	push	{r7}
 80142ea:	b087      	sub	sp, #28
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
 80142f0:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	681a      	ldr	r2, [r3, #0]
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142fc:	683a      	ldr	r2, [r7, #0]
 80142fe:	6812      	ldr	r2, [r2, #0]
 8014300:	f023 0101 	bic.w	r1, r3, #1
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	689b      	ldr	r3, [r3, #8]
 801430e:	2b08      	cmp	r3, #8
 8014310:	d102      	bne.n	8014318 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8014312:	2340      	movs	r3, #64	; 0x40
 8014314:	617b      	str	r3, [r7, #20]
 8014316:	e001      	b.n	801431c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8014318:	2300      	movs	r3, #0
 801431a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8014320:	697b      	ldr	r3, [r7, #20]
 8014322:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8014328:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 801432e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8014330:	683b      	ldr	r3, [r7, #0]
 8014332:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8014334:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 801433a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8014340:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8014342:	683b      	ldr	r3, [r7, #0]
 8014344:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8014346:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 801434c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8014352:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8014358:	431a      	orrs	r2, r3
              Init->WriteBurst);
 801435a:	683b      	ldr	r3, [r7, #0]
 801435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 801435e:	4313      	orrs	r3, r2
 8014360:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8014362:	683b      	ldr	r3, [r7, #0]
 8014364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014366:	693a      	ldr	r2, [r7, #16]
 8014368:	4313      	orrs	r3, r2
 801436a:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 801436c:	683b      	ldr	r3, [r7, #0]
 801436e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014370:	693a      	ldr	r2, [r7, #16]
 8014372:	4313      	orrs	r3, r2
 8014374:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8014376:	683b      	ldr	r3, [r7, #0]
 8014378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801437a:	693a      	ldr	r2, [r7, #16]
 801437c:	4313      	orrs	r3, r2
 801437e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8014380:	4b20      	ldr	r3, [pc, #128]	; (8014404 <FMC_NORSRAM_Init+0x11c>)
 8014382:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801438a:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014392:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 801439a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	681a      	ldr	r2, [r3, #0]
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	43db      	mvns	r3, r3
 80143aa:	ea02 0103 	and.w	r1, r2, r3
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	681a      	ldr	r2, [r3, #0]
 80143b2:	693b      	ldr	r3, [r7, #16]
 80143b4:	4319      	orrs	r1, r3
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80143c4:	d10c      	bne.n	80143e0 <FMC_NORSRAM_Init+0xf8>
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d008      	beq.n	80143e0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143da:	431a      	orrs	r2, r3
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d006      	beq.n	80143f6 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	681a      	ldr	r2, [r3, #0]
 80143ec:	683b      	ldr	r3, [r7, #0]
 80143ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143f0:	431a      	orrs	r2, r3
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 80143f6:	2300      	movs	r3, #0
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	371c      	adds	r7, #28
 80143fc:	46bd      	mov	sp, r7
 80143fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014402:	4770      	bx	lr
 8014404:	0008fb7f 	.word	0x0008fb7f

08014408 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8014408:	b480      	push	{r7}
 801440a:	b087      	sub	sp, #28
 801440c:	af00      	add	r7, sp, #0
 801440e:	60f8      	str	r0, [r7, #12]
 8014410:	60b9      	str	r1, [r7, #8]
 8014412:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	1c5a      	adds	r2, r3, #1
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801441e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	681a      	ldr	r2, [r3, #0]
 8014426:	68bb      	ldr	r3, [r7, #8]
 8014428:	685b      	ldr	r3, [r3, #4]
 801442a:	011b      	lsls	r3, r3, #4
 801442c:	431a      	orrs	r2, r3
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	689b      	ldr	r3, [r3, #8]
 8014432:	021b      	lsls	r3, r3, #8
 8014434:	431a      	orrs	r2, r3
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	691b      	ldr	r3, [r3, #16]
 801443a:	041b      	lsls	r3, r3, #16
 801443c:	431a      	orrs	r2, r3
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	695b      	ldr	r3, [r3, #20]
 8014442:	3b01      	subs	r3, #1
 8014444:	051b      	lsls	r3, r3, #20
 8014446:	431a      	orrs	r2, r3
 8014448:	68bb      	ldr	r3, [r7, #8]
 801444a:	699b      	ldr	r3, [r3, #24]
 801444c:	3b02      	subs	r3, #2
 801444e:	061b      	lsls	r3, r3, #24
 8014450:	431a      	orrs	r2, r3
 8014452:	68bb      	ldr	r3, [r7, #8]
 8014454:	69db      	ldr	r3, [r3, #28]
 8014456:	4313      	orrs	r3, r2
 8014458:	687a      	ldr	r2, [r7, #4]
 801445a:	3201      	adds	r2, #1
 801445c:	4319      	orrs	r1, r3
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801446c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014470:	d113      	bne.n	801449a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	685b      	ldr	r3, [r3, #4]
 8014476:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801447a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	695b      	ldr	r3, [r3, #20]
 8014480:	3b01      	subs	r3, #1
 8014482:	051b      	lsls	r3, r3, #20
 8014484:	697a      	ldr	r2, [r7, #20]
 8014486:	4313      	orrs	r3, r2
 8014488:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	685b      	ldr	r3, [r3, #4]
 801448e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8014492:	697b      	ldr	r3, [r7, #20]
 8014494:	431a      	orrs	r2, r3
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801449a:	2300      	movs	r3, #0
}
 801449c:	4618      	mov	r0, r3
 801449e:	371c      	adds	r7, #28
 80144a0:	46bd      	mov	sp, r7
 80144a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a6:	4770      	bx	lr

080144a8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80144a8:	b480      	push	{r7}
 80144aa:	b085      	sub	sp, #20
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	60f8      	str	r0, [r7, #12]
 80144b0:	60b9      	str	r1, [r7, #8]
 80144b2:	607a      	str	r2, [r7, #4]
 80144b4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80144bc:	d11d      	bne.n	80144fa <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	687a      	ldr	r2, [r7, #4]
 80144c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80144c6:	4b13      	ldr	r3, [pc, #76]	; (8014514 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80144c8:	4013      	ands	r3, r2
 80144ca:	68ba      	ldr	r2, [r7, #8]
 80144cc:	6811      	ldr	r1, [r2, #0]
 80144ce:	68ba      	ldr	r2, [r7, #8]
 80144d0:	6852      	ldr	r2, [r2, #4]
 80144d2:	0112      	lsls	r2, r2, #4
 80144d4:	4311      	orrs	r1, r2
 80144d6:	68ba      	ldr	r2, [r7, #8]
 80144d8:	6892      	ldr	r2, [r2, #8]
 80144da:	0212      	lsls	r2, r2, #8
 80144dc:	4311      	orrs	r1, r2
 80144de:	68ba      	ldr	r2, [r7, #8]
 80144e0:	69d2      	ldr	r2, [r2, #28]
 80144e2:	4311      	orrs	r1, r2
 80144e4:	68ba      	ldr	r2, [r7, #8]
 80144e6:	6912      	ldr	r2, [r2, #16]
 80144e8:	0412      	lsls	r2, r2, #16
 80144ea:	430a      	orrs	r2, r1
 80144ec:	ea43 0102 	orr.w	r1, r3, r2
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	687a      	ldr	r2, [r7, #4]
 80144f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80144f8:	e005      	b.n	8014506 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	687a      	ldr	r2, [r7, #4]
 80144fe:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8014502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8014506:	2300      	movs	r3, #0
}
 8014508:	4618      	mov	r0, r3
 801450a:	3714      	adds	r7, #20
 801450c:	46bd      	mov	sp, r7
 801450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014512:	4770      	bx	lr
 8014514:	cff00000 	.word	0xcff00000

08014518 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8014518:	b084      	sub	sp, #16
 801451a:	b480      	push	{r7}
 801451c:	b085      	sub	sp, #20
 801451e:	af00      	add	r7, sp, #0
 8014520:	6078      	str	r0, [r7, #4]
 8014522:	f107 001c 	add.w	r0, r7, #28
 8014526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801452a:	2300      	movs	r3, #0
 801452c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 801452e:	6a3b      	ldr	r3, [r7, #32]
 8014530:	68fa      	ldr	r2, [r7, #12]
 8014532:	4313      	orrs	r3, r2
 8014534:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8014536:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8014538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 801453a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 801453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801453e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8014540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8014542:	431a      	orrs	r2, r3
             Init.ClockDiv
 8014544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8014546:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8014548:	68fa      	ldr	r2, [r7, #12]
 801454a:	4313      	orrs	r3, r2
 801454c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8014556:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801455a:	68fa      	ldr	r2, [r7, #12]
 801455c:	431a      	orrs	r2, r3
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8014562:	2300      	movs	r3, #0
}
 8014564:	4618      	mov	r0, r3
 8014566:	3714      	adds	r7, #20
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	b004      	add	sp, #16
 8014570:	4770      	bx	lr

08014572 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8014572:	b480      	push	{r7}
 8014574:	b083      	sub	sp, #12
 8014576:	af00      	add	r7, sp, #0
 8014578:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8014580:	4618      	mov	r0, r3
 8014582:	370c      	adds	r7, #12
 8014584:	46bd      	mov	sp, r7
 8014586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458a:	4770      	bx	lr

0801458c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b082      	sub	sp, #8
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	2203      	movs	r2, #3
 8014598:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 801459a:	2002      	movs	r0, #2
 801459c:	f7f6 fcc8 	bl	800af30 <HAL_Delay>

  return HAL_OK;
 80145a0:	2300      	movs	r3, #0
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	3708      	adds	r7, #8
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}

080145aa <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80145aa:	b480      	push	{r7}
 80145ac:	b083      	sub	sp, #12
 80145ae:	af00      	add	r7, sp, #0
 80145b0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	f003 0303 	and.w	r3, r3, #3
}
 80145ba:	4618      	mov	r0, r3
 80145bc:	370c      	adds	r7, #12
 80145be:	46bd      	mov	sp, r7
 80145c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c4:	4770      	bx	lr

080145c6 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80145c6:	b480      	push	{r7}
 80145c8:	b085      	sub	sp, #20
 80145ca:	af00      	add	r7, sp, #0
 80145cc:	6078      	str	r0, [r7, #4]
 80145ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80145d0:	2300      	movs	r3, #0
 80145d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	681a      	ldr	r2, [r3, #0]
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80145e4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80145ea:	431a      	orrs	r2, r3
                       Command->CPSM);
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80145f0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80145f2:	68fa      	ldr	r2, [r7, #12]
 80145f4:	4313      	orrs	r3, r2
 80145f6:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	68db      	ldr	r3, [r3, #12]
 80145fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014600:	f023 030f 	bic.w	r3, r3, #15
 8014604:	68fa      	ldr	r2, [r7, #12]
 8014606:	431a      	orrs	r2, r3
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801460c:	2300      	movs	r3, #0
}
 801460e:	4618      	mov	r0, r3
 8014610:	3714      	adds	r7, #20
 8014612:	46bd      	mov	sp, r7
 8014614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014618:	4770      	bx	lr

0801461a <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801461a:	b480      	push	{r7}
 801461c:	b083      	sub	sp, #12
 801461e:	af00      	add	r7, sp, #0
 8014620:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	691b      	ldr	r3, [r3, #16]
 8014626:	b2db      	uxtb	r3, r3
}
 8014628:	4618      	mov	r0, r3
 801462a:	370c      	adds	r7, #12
 801462c:	46bd      	mov	sp, r7
 801462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014632:	4770      	bx	lr

08014634 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8014634:	b480      	push	{r7}
 8014636:	b085      	sub	sp, #20
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
 801463c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	3314      	adds	r3, #20
 8014642:	461a      	mov	r2, r3
 8014644:	683b      	ldr	r3, [r7, #0]
 8014646:	4413      	add	r3, r2
 8014648:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	681b      	ldr	r3, [r3, #0]
}
 801464e:	4618      	mov	r0, r3
 8014650:	3714      	adds	r7, #20
 8014652:	46bd      	mov	sp, r7
 8014654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014658:	4770      	bx	lr

0801465a <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 801465a:	b480      	push	{r7}
 801465c:	b085      	sub	sp, #20
 801465e:	af00      	add	r7, sp, #0
 8014660:	6078      	str	r0, [r7, #4]
 8014662:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8014664:	2300      	movs	r3, #0
 8014666:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	681a      	ldr	r2, [r3, #0]
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	685a      	ldr	r2, [r3, #4]
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8014680:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8014682:	683b      	ldr	r3, [r7, #0]
 8014684:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8014686:	431a      	orrs	r2, r3
                       Data->DPSM);
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801468c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801468e:	68fa      	ldr	r2, [r7, #12]
 8014690:	4313      	orrs	r3, r2
 8014692:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014698:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	431a      	orrs	r2, r3
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80146a4:	2300      	movs	r3, #0

}
 80146a6:	4618      	mov	r0, r3
 80146a8:	3714      	adds	r7, #20
 80146aa:	46bd      	mov	sp, r7
 80146ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b0:	4770      	bx	lr

080146b2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80146b2:	b580      	push	{r7, lr}
 80146b4:	b088      	sub	sp, #32
 80146b6:	af00      	add	r7, sp, #0
 80146b8:	6078      	str	r0, [r7, #4]
 80146ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80146c0:	2310      	movs	r3, #16
 80146c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80146c4:	2340      	movs	r3, #64	; 0x40
 80146c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80146c8:	2300      	movs	r3, #0
 80146ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80146cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80146d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80146d2:	f107 0308 	add.w	r3, r7, #8
 80146d6:	4619      	mov	r1, r3
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f7ff ff74 	bl	80145c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80146de:	f241 3288 	movw	r2, #5000	; 0x1388
 80146e2:	2110      	movs	r1, #16
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f000 f94d 	bl	8014984 <SDMMC_GetCmdResp1>
 80146ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80146ec:	69fb      	ldr	r3, [r7, #28]
}
 80146ee:	4618      	mov	r0, r3
 80146f0:	3720      	adds	r7, #32
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}

080146f6 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80146f6:	b580      	push	{r7, lr}
 80146f8:	b08a      	sub	sp, #40	; 0x28
 80146fa:	af00      	add	r7, sp, #0
 80146fc:	60f8      	str	r0, [r7, #12]
 80146fe:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8014706:	2307      	movs	r3, #7
 8014708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801470a:	2340      	movs	r3, #64	; 0x40
 801470c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801470e:	2300      	movs	r3, #0
 8014710:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014716:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014718:	f107 0310 	add.w	r3, r7, #16
 801471c:	4619      	mov	r1, r3
 801471e:	68f8      	ldr	r0, [r7, #12]
 8014720:	f7ff ff51 	bl	80145c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8014724:	f241 3288 	movw	r2, #5000	; 0x1388
 8014728:	2107      	movs	r1, #7
 801472a:	68f8      	ldr	r0, [r7, #12]
 801472c:	f000 f92a 	bl	8014984 <SDMMC_GetCmdResp1>
 8014730:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8014732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014734:	4618      	mov	r0, r3
 8014736:	3728      	adds	r7, #40	; 0x28
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}

0801473c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b088      	sub	sp, #32
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8014744:	2300      	movs	r3, #0
 8014746:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8014748:	2300      	movs	r3, #0
 801474a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801474c:	2300      	movs	r3, #0
 801474e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014750:	2300      	movs	r3, #0
 8014752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014758:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801475a:	f107 0308 	add.w	r3, r7, #8
 801475e:	4619      	mov	r1, r3
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f7ff ff30 	bl	80145c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8014766:	6878      	ldr	r0, [r7, #4]
 8014768:	f000 fb44 	bl	8014df4 <SDMMC_GetCmdError>
 801476c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801476e:	69fb      	ldr	r3, [r7, #28]
}
 8014770:	4618      	mov	r0, r3
 8014772:	3720      	adds	r7, #32
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}

08014778 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b088      	sub	sp, #32
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8014780:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8014784:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8014786:	2308      	movs	r3, #8
 8014788:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801478a:	2340      	movs	r3, #64	; 0x40
 801478c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801478e:	2300      	movs	r3, #0
 8014790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014796:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014798:	f107 0308 	add.w	r3, r7, #8
 801479c:	4619      	mov	r1, r3
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f7ff ff11 	bl	80145c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f000 fad7 	bl	8014d58 <SDMMC_GetCmdResp7>
 80147aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80147ac:	69fb      	ldr	r3, [r7, #28]
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3720      	adds	r7, #32
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}

080147b6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80147b6:	b580      	push	{r7, lr}
 80147b8:	b088      	sub	sp, #32
 80147ba:	af00      	add	r7, sp, #0
 80147bc:	6078      	str	r0, [r7, #4]
 80147be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80147c4:	2337      	movs	r3, #55	; 0x37
 80147c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80147c8:	2340      	movs	r3, #64	; 0x40
 80147ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80147cc:	2300      	movs	r3, #0
 80147ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80147d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80147d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80147d6:	f107 0308 	add.w	r3, r7, #8
 80147da:	4619      	mov	r1, r3
 80147dc:	6878      	ldr	r0, [r7, #4]
 80147de:	f7ff fef2 	bl	80145c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80147e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80147e6:	2137      	movs	r1, #55	; 0x37
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f000 f8cb 	bl	8014984 <SDMMC_GetCmdResp1>
 80147ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80147f0:	69fb      	ldr	r3, [r7, #28]
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	3720      	adds	r7, #32
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd80      	pop	{r7, pc}

080147fa <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80147fa:	b580      	push	{r7, lr}
 80147fc:	b088      	sub	sp, #32
 80147fe:	af00      	add	r7, sp, #0
 8014800:	6078      	str	r0, [r7, #4]
 8014802:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8014804:	683b      	ldr	r3, [r7, #0]
 8014806:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801480a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801480e:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8014810:	2329      	movs	r3, #41	; 0x29
 8014812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014814:	2340      	movs	r3, #64	; 0x40
 8014816:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014818:	2300      	movs	r3, #0
 801481a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801481c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014820:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014822:	f107 0308 	add.w	r3, r7, #8
 8014826:	4619      	mov	r1, r3
 8014828:	6878      	ldr	r0, [r7, #4]
 801482a:	f7ff fecc 	bl	80145c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801482e:	6878      	ldr	r0, [r7, #4]
 8014830:	f000 f9de 	bl	8014bf0 <SDMMC_GetCmdResp3>
 8014834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014836:	69fb      	ldr	r3, [r7, #28]
}
 8014838:	4618      	mov	r0, r3
 801483a:	3720      	adds	r7, #32
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}

08014840 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b088      	sub	sp, #32
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
 8014848:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801484e:	2306      	movs	r3, #6
 8014850:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014852:	2340      	movs	r3, #64	; 0x40
 8014854:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014856:	2300      	movs	r3, #0
 8014858:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801485a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801485e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014860:	f107 0308 	add.w	r3, r7, #8
 8014864:	4619      	mov	r1, r3
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f7ff fead 	bl	80145c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801486c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014870:	2106      	movs	r1, #6
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f000 f886 	bl	8014984 <SDMMC_GetCmdResp1>
 8014878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801487a:	69fb      	ldr	r3, [r7, #28]
}
 801487c:	4618      	mov	r0, r3
 801487e:	3720      	adds	r7, #32
 8014880:	46bd      	mov	sp, r7
 8014882:	bd80      	pop	{r7, pc}

08014884 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b088      	sub	sp, #32
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801488c:	2300      	movs	r3, #0
 801488e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8014890:	2333      	movs	r3, #51	; 0x33
 8014892:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014894:	2340      	movs	r3, #64	; 0x40
 8014896:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014898:	2300      	movs	r3, #0
 801489a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801489c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80148a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80148a2:	f107 0308 	add.w	r3, r7, #8
 80148a6:	4619      	mov	r1, r3
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f7ff fe8c 	bl	80145c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80148ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80148b2:	2133      	movs	r1, #51	; 0x33
 80148b4:	6878      	ldr	r0, [r7, #4]
 80148b6:	f000 f865 	bl	8014984 <SDMMC_GetCmdResp1>
 80148ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80148bc:	69fb      	ldr	r3, [r7, #28]
}
 80148be:	4618      	mov	r0, r3
 80148c0:	3720      	adds	r7, #32
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}

080148c6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80148c6:	b580      	push	{r7, lr}
 80148c8:	b088      	sub	sp, #32
 80148ca:	af00      	add	r7, sp, #0
 80148cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80148ce:	2300      	movs	r3, #0
 80148d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80148d2:	2302      	movs	r3, #2
 80148d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80148d6:	23c0      	movs	r3, #192	; 0xc0
 80148d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80148da:	2300      	movs	r3, #0
 80148dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80148de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80148e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80148e4:	f107 0308 	add.w	r3, r7, #8
 80148e8:	4619      	mov	r1, r3
 80148ea:	6878      	ldr	r0, [r7, #4]
 80148ec:	f7ff fe6b 	bl	80145c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80148f0:	6878      	ldr	r0, [r7, #4]
 80148f2:	f000 f935 	bl	8014b60 <SDMMC_GetCmdResp2>
 80148f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80148f8:	69fb      	ldr	r3, [r7, #28]
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	3720      	adds	r7, #32
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}

08014902 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014902:	b580      	push	{r7, lr}
 8014904:	b088      	sub	sp, #32
 8014906:	af00      	add	r7, sp, #0
 8014908:	6078      	str	r0, [r7, #4]
 801490a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8014910:	2309      	movs	r3, #9
 8014912:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8014914:	23c0      	movs	r3, #192	; 0xc0
 8014916:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014918:	2300      	movs	r3, #0
 801491a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801491c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014920:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014922:	f107 0308 	add.w	r3, r7, #8
 8014926:	4619      	mov	r1, r3
 8014928:	6878      	ldr	r0, [r7, #4]
 801492a:	f7ff fe4c 	bl	80145c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	f000 f916 	bl	8014b60 <SDMMC_GetCmdResp2>
 8014934:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014936:	69fb      	ldr	r3, [r7, #28]
}
 8014938:	4618      	mov	r0, r3
 801493a:	3720      	adds	r7, #32
 801493c:	46bd      	mov	sp, r7
 801493e:	bd80      	pop	{r7, pc}

08014940 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b088      	sub	sp, #32
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
 8014948:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801494a:	2300      	movs	r3, #0
 801494c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801494e:	2303      	movs	r3, #3
 8014950:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014952:	2340      	movs	r3, #64	; 0x40
 8014954:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014956:	2300      	movs	r3, #0
 8014958:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801495a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801495e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014960:	f107 0308 	add.w	r3, r7, #8
 8014964:	4619      	mov	r1, r3
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	f7ff fe2d 	bl	80145c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801496c:	683a      	ldr	r2, [r7, #0]
 801496e:	2103      	movs	r1, #3
 8014970:	6878      	ldr	r0, [r7, #4]
 8014972:	f000 f97b 	bl	8014c6c <SDMMC_GetCmdResp6>
 8014976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014978:	69fb      	ldr	r3, [r7, #28]
}
 801497a:	4618      	mov	r0, r3
 801497c:	3720      	adds	r7, #32
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}
	...

08014984 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b088      	sub	sp, #32
 8014988:	af00      	add	r7, sp, #0
 801498a:	60f8      	str	r0, [r7, #12]
 801498c:	460b      	mov	r3, r1
 801498e:	607a      	str	r2, [r7, #4]
 8014990:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014992:	4b70      	ldr	r3, [pc, #448]	; (8014b54 <SDMMC_GetCmdResp1+0x1d0>)
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	4a70      	ldr	r2, [pc, #448]	; (8014b58 <SDMMC_GetCmdResp1+0x1d4>)
 8014998:	fba2 2303 	umull	r2, r3, r2, r3
 801499c:	0a5a      	lsrs	r2, r3, #9
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	fb02 f303 	mul.w	r3, r2, r3
 80149a4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80149a6:	69fb      	ldr	r3, [r7, #28]
 80149a8:	1e5a      	subs	r2, r3, #1
 80149aa:	61fa      	str	r2, [r7, #28]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d102      	bne.n	80149b6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80149b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80149b4:	e0c9      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149ba:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80149bc:	69bb      	ldr	r3, [r7, #24]
 80149be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d0ef      	beq.n	80149a6 <SDMMC_GetCmdResp1+0x22>
 80149c6:	69bb      	ldr	r3, [r7, #24]
 80149c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d1ea      	bne.n	80149a6 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149d4:	f003 0304 	and.w	r3, r3, #4
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d004      	beq.n	80149e6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	2204      	movs	r2, #4
 80149e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80149e2:	2304      	movs	r3, #4
 80149e4:	e0b1      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149ea:	f003 0301 	and.w	r3, r3, #1
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d004      	beq.n	80149fc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	2201      	movs	r2, #1
 80149f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80149f8:	2301      	movs	r3, #1
 80149fa:	e0a6      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	22c5      	movs	r2, #197	; 0xc5
 8014a00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014a02:	68f8      	ldr	r0, [r7, #12]
 8014a04:	f7ff fe09 	bl	801461a <SDMMC_GetCommandResponse>
 8014a08:	4603      	mov	r3, r0
 8014a0a:	461a      	mov	r2, r3
 8014a0c:	7afb      	ldrb	r3, [r7, #11]
 8014a0e:	4293      	cmp	r3, r2
 8014a10:	d001      	beq.n	8014a16 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014a12:	2301      	movs	r3, #1
 8014a14:	e099      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014a16:	2100      	movs	r1, #0
 8014a18:	68f8      	ldr	r0, [r7, #12]
 8014a1a:	f7ff fe0b 	bl	8014634 <SDMMC_GetResponse>
 8014a1e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014a20:	697a      	ldr	r2, [r7, #20]
 8014a22:	4b4e      	ldr	r3, [pc, #312]	; (8014b5c <SDMMC_GetCmdResp1+0x1d8>)
 8014a24:	4013      	ands	r3, r2
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d101      	bne.n	8014a2e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	e08d      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014a2e:	697b      	ldr	r3, [r7, #20]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	da02      	bge.n	8014a3a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014a34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014a38:	e087      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d001      	beq.n	8014a48 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014a44:	2340      	movs	r3, #64	; 0x40
 8014a46:	e080      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d001      	beq.n	8014a56 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8014a52:	2380      	movs	r3, #128	; 0x80
 8014a54:	e079      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d002      	beq.n	8014a66 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014a64:	e071      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d002      	beq.n	8014a76 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a74:	e069      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d002      	beq.n	8014a86 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a84:	e061      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014a86:	697b      	ldr	r3, [r7, #20]
 8014a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d002      	beq.n	8014a96 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014a90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014a94:	e059      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014a96:	697b      	ldr	r3, [r7, #20]
 8014a98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d002      	beq.n	8014aa6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014aa4:	e051      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d002      	beq.n	8014ab6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014ab4:	e049      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014ab6:	697b      	ldr	r3, [r7, #20]
 8014ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d002      	beq.n	8014ac6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014ac0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014ac4:	e041      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014ac6:	697b      	ldr	r3, [r7, #20]
 8014ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d002      	beq.n	8014ad6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8014ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014ad4:	e039      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014ad6:	697b      	ldr	r3, [r7, #20]
 8014ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d002      	beq.n	8014ae6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014ae4:	e031      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014ae6:	697b      	ldr	r3, [r7, #20]
 8014ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d002      	beq.n	8014af6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014af0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014af4:	e029      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014af6:	697b      	ldr	r3, [r7, #20]
 8014af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d002      	beq.n	8014b06 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014b00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014b04:	e021      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014b06:	697b      	ldr	r3, [r7, #20]
 8014b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d002      	beq.n	8014b16 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014b10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014b14:	e019      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d002      	beq.n	8014b26 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014b20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014b24:	e011      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014b26:	697b      	ldr	r3, [r7, #20]
 8014b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d002      	beq.n	8014b36 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8014b30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014b34:	e009      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8014b36:	697b      	ldr	r3, [r7, #20]
 8014b38:	f003 0308 	and.w	r3, r3, #8
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d002      	beq.n	8014b46 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8014b40:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014b44:	e001      	b.n	8014b4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	3720      	adds	r7, #32
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}
 8014b52:	bf00      	nop
 8014b54:	20000190 	.word	0x20000190
 8014b58:	10624dd3 	.word	0x10624dd3
 8014b5c:	fdffe008 	.word	0xfdffe008

08014b60 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8014b60:	b480      	push	{r7}
 8014b62:	b085      	sub	sp, #20
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014b68:	4b1f      	ldr	r3, [pc, #124]	; (8014be8 <SDMMC_GetCmdResp2+0x88>)
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	4a1f      	ldr	r2, [pc, #124]	; (8014bec <SDMMC_GetCmdResp2+0x8c>)
 8014b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8014b72:	0a5b      	lsrs	r3, r3, #9
 8014b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8014b78:	fb02 f303 	mul.w	r3, r2, r3
 8014b7c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	1e5a      	subs	r2, r3, #1
 8014b82:	60fa      	str	r2, [r7, #12]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d102      	bne.n	8014b8e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014b88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014b8c:	e026      	b.n	8014bdc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014b94:	68bb      	ldr	r3, [r7, #8]
 8014b96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d0ef      	beq.n	8014b7e <SDMMC_GetCmdResp2+0x1e>
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d1ea      	bne.n	8014b7e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bac:	f003 0304 	and.w	r3, r3, #4
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d004      	beq.n	8014bbe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2204      	movs	r2, #4
 8014bb8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014bba:	2304      	movs	r3, #4
 8014bbc:	e00e      	b.n	8014bdc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bc2:	f003 0301 	and.w	r3, r3, #1
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d004      	beq.n	8014bd4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	2201      	movs	r2, #1
 8014bce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014bd0:	2301      	movs	r3, #1
 8014bd2:	e003      	b.n	8014bdc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	22c5      	movs	r2, #197	; 0xc5
 8014bd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014bda:	2300      	movs	r3, #0
}
 8014bdc:	4618      	mov	r0, r3
 8014bde:	3714      	adds	r7, #20
 8014be0:	46bd      	mov	sp, r7
 8014be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be6:	4770      	bx	lr
 8014be8:	20000190 	.word	0x20000190
 8014bec:	10624dd3 	.word	0x10624dd3

08014bf0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8014bf0:	b480      	push	{r7}
 8014bf2:	b085      	sub	sp, #20
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014bf8:	4b1a      	ldr	r3, [pc, #104]	; (8014c64 <SDMMC_GetCmdResp3+0x74>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	4a1a      	ldr	r2, [pc, #104]	; (8014c68 <SDMMC_GetCmdResp3+0x78>)
 8014bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8014c02:	0a5b      	lsrs	r3, r3, #9
 8014c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8014c08:	fb02 f303 	mul.w	r3, r2, r3
 8014c0c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	1e5a      	subs	r2, r3, #1
 8014c12:	60fa      	str	r2, [r7, #12]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d102      	bne.n	8014c1e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014c18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014c1c:	e01b      	b.n	8014c56 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c22:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014c24:	68bb      	ldr	r3, [r7, #8]
 8014c26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d0ef      	beq.n	8014c0e <SDMMC_GetCmdResp3+0x1e>
 8014c2e:	68bb      	ldr	r3, [r7, #8]
 8014c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d1ea      	bne.n	8014c0e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c3c:	f003 0304 	and.w	r3, r3, #4
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d004      	beq.n	8014c4e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2204      	movs	r2, #4
 8014c48:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014c4a:	2304      	movs	r3, #4
 8014c4c:	e003      	b.n	8014c56 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	22c5      	movs	r2, #197	; 0xc5
 8014c52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014c54:	2300      	movs	r3, #0
}
 8014c56:	4618      	mov	r0, r3
 8014c58:	3714      	adds	r7, #20
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c60:	4770      	bx	lr
 8014c62:	bf00      	nop
 8014c64:	20000190 	.word	0x20000190
 8014c68:	10624dd3 	.word	0x10624dd3

08014c6c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b088      	sub	sp, #32
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	60f8      	str	r0, [r7, #12]
 8014c74:	460b      	mov	r3, r1
 8014c76:	607a      	str	r2, [r7, #4]
 8014c78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014c7a:	4b35      	ldr	r3, [pc, #212]	; (8014d50 <SDMMC_GetCmdResp6+0xe4>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	4a35      	ldr	r2, [pc, #212]	; (8014d54 <SDMMC_GetCmdResp6+0xe8>)
 8014c80:	fba2 2303 	umull	r2, r3, r2, r3
 8014c84:	0a5b      	lsrs	r3, r3, #9
 8014c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8014c8a:	fb02 f303 	mul.w	r3, r2, r3
 8014c8e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8014c90:	69fb      	ldr	r3, [r7, #28]
 8014c92:	1e5a      	subs	r2, r3, #1
 8014c94:	61fa      	str	r2, [r7, #28]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d102      	bne.n	8014ca0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014c9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014c9e:	e052      	b.n	8014d46 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ca4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014ca6:	69bb      	ldr	r3, [r7, #24]
 8014ca8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d0ef      	beq.n	8014c90 <SDMMC_GetCmdResp6+0x24>
 8014cb0:	69bb      	ldr	r3, [r7, #24]
 8014cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d1ea      	bne.n	8014c90 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014cbe:	f003 0304 	and.w	r3, r3, #4
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d004      	beq.n	8014cd0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	2204      	movs	r2, #4
 8014cca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014ccc:	2304      	movs	r3, #4
 8014cce:	e03a      	b.n	8014d46 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014cd4:	f003 0301 	and.w	r3, r3, #1
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d004      	beq.n	8014ce6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	2201      	movs	r2, #1
 8014ce0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014ce2:	2301      	movs	r3, #1
 8014ce4:	e02f      	b.n	8014d46 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014ce6:	68f8      	ldr	r0, [r7, #12]
 8014ce8:	f7ff fc97 	bl	801461a <SDMMC_GetCommandResponse>
 8014cec:	4603      	mov	r3, r0
 8014cee:	461a      	mov	r2, r3
 8014cf0:	7afb      	ldrb	r3, [r7, #11]
 8014cf2:	4293      	cmp	r3, r2
 8014cf4:	d001      	beq.n	8014cfa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014cf6:	2301      	movs	r3, #1
 8014cf8:	e025      	b.n	8014d46 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	22c5      	movs	r2, #197	; 0xc5
 8014cfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014d00:	2100      	movs	r1, #0
 8014d02:	68f8      	ldr	r0, [r7, #12]
 8014d04:	f7ff fc96 	bl	8014634 <SDMMC_GetResponse>
 8014d08:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8014d0a:	697b      	ldr	r3, [r7, #20]
 8014d0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d106      	bne.n	8014d22 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8014d14:	697b      	ldr	r3, [r7, #20]
 8014d16:	0c1b      	lsrs	r3, r3, #16
 8014d18:	b29a      	uxth	r2, r3
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8014d1e:	2300      	movs	r3, #0
 8014d20:	e011      	b.n	8014d46 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8014d22:	697b      	ldr	r3, [r7, #20]
 8014d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d002      	beq.n	8014d32 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014d30:	e009      	b.n	8014d46 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8014d32:	697b      	ldr	r3, [r7, #20]
 8014d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d002      	beq.n	8014d42 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014d40:	e001      	b.n	8014d46 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014d42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014d46:	4618      	mov	r0, r3
 8014d48:	3720      	adds	r7, #32
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd80      	pop	{r7, pc}
 8014d4e:	bf00      	nop
 8014d50:	20000190 	.word	0x20000190
 8014d54:	10624dd3 	.word	0x10624dd3

08014d58 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8014d58:	b480      	push	{r7}
 8014d5a:	b085      	sub	sp, #20
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014d60:	4b22      	ldr	r3, [pc, #136]	; (8014dec <SDMMC_GetCmdResp7+0x94>)
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	4a22      	ldr	r2, [pc, #136]	; (8014df0 <SDMMC_GetCmdResp7+0x98>)
 8014d66:	fba2 2303 	umull	r2, r3, r2, r3
 8014d6a:	0a5b      	lsrs	r3, r3, #9
 8014d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014d70:	fb02 f303 	mul.w	r3, r2, r3
 8014d74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	1e5a      	subs	r2, r3, #1
 8014d7a:	60fa      	str	r2, [r7, #12]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d102      	bne.n	8014d86 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014d80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014d84:	e02c      	b.n	8014de0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d0ef      	beq.n	8014d76 <SDMMC_GetCmdResp7+0x1e>
 8014d96:	68bb      	ldr	r3, [r7, #8]
 8014d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d1ea      	bne.n	8014d76 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014da4:	f003 0304 	and.w	r3, r3, #4
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d004      	beq.n	8014db6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	2204      	movs	r2, #4
 8014db0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014db2:	2304      	movs	r3, #4
 8014db4:	e014      	b.n	8014de0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dba:	f003 0301 	and.w	r3, r3, #1
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d004      	beq.n	8014dcc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	2201      	movs	r2, #1
 8014dc6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014dc8:	2301      	movs	r3, #1
 8014dca:	e009      	b.n	8014de0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d002      	beq.n	8014dde <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	2240      	movs	r2, #64	; 0x40
 8014ddc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014dde:	2300      	movs	r3, #0

}
 8014de0:	4618      	mov	r0, r3
 8014de2:	3714      	adds	r7, #20
 8014de4:	46bd      	mov	sp, r7
 8014de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dea:	4770      	bx	lr
 8014dec:	20000190 	.word	0x20000190
 8014df0:	10624dd3 	.word	0x10624dd3

08014df4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8014df4:	b480      	push	{r7}
 8014df6:	b085      	sub	sp, #20
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014dfc:	4b11      	ldr	r3, [pc, #68]	; (8014e44 <SDMMC_GetCmdError+0x50>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	4a11      	ldr	r2, [pc, #68]	; (8014e48 <SDMMC_GetCmdError+0x54>)
 8014e02:	fba2 2303 	umull	r2, r3, r2, r3
 8014e06:	0a5b      	lsrs	r3, r3, #9
 8014e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8014e0c:	fb02 f303 	mul.w	r3, r2, r3
 8014e10:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	1e5a      	subs	r2, r3, #1
 8014e16:	60fa      	str	r2, [r7, #12]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d102      	bne.n	8014e22 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014e1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014e20:	e009      	b.n	8014e36 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d0f1      	beq.n	8014e12 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	22c5      	movs	r2, #197	; 0xc5
 8014e32:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8014e34:	2300      	movs	r3, #0
}
 8014e36:	4618      	mov	r0, r3
 8014e38:	3714      	adds	r7, #20
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e40:	4770      	bx	lr
 8014e42:	bf00      	nop
 8014e44:	20000190 	.word	0x20000190
 8014e48:	10624dd3 	.word	0x10624dd3

08014e4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014e4c:	b084      	sub	sp, #16
 8014e4e:	b580      	push	{r7, lr}
 8014e50:	b084      	sub	sp, #16
 8014e52:	af00      	add	r7, sp, #0
 8014e54:	6078      	str	r0, [r7, #4]
 8014e56:	f107 001c 	add.w	r0, r7, #28
 8014e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	68db      	ldr	r3, [r3, #12]
 8014e62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8014e6a:	6878      	ldr	r0, [r7, #4]
 8014e6c:	f001 faf6 	bl	801645c <USB_CoreReset>
 8014e70:	4603      	mov	r3, r0
 8014e72:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8014e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d106      	bne.n	8014e88 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	639a      	str	r2, [r3, #56]	; 0x38
 8014e86:	e005      	b.n	8014e94 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8014e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3710      	adds	r7, #16
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014ea0:	b004      	add	sp, #16
 8014ea2:	4770      	bx	lr

08014ea4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	b087      	sub	sp, #28
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	60f8      	str	r0, [r7, #12]
 8014eac:	60b9      	str	r1, [r7, #8]
 8014eae:	4613      	mov	r3, r2
 8014eb0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8014eb2:	79fb      	ldrb	r3, [r7, #7]
 8014eb4:	2b02      	cmp	r3, #2
 8014eb6:	d165      	bne.n	8014f84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014eb8:	68bb      	ldr	r3, [r7, #8]
 8014eba:	4a3e      	ldr	r2, [pc, #248]	; (8014fb4 <USB_SetTurnaroundTime+0x110>)
 8014ebc:	4293      	cmp	r3, r2
 8014ebe:	d906      	bls.n	8014ece <USB_SetTurnaroundTime+0x2a>
 8014ec0:	68bb      	ldr	r3, [r7, #8]
 8014ec2:	4a3d      	ldr	r2, [pc, #244]	; (8014fb8 <USB_SetTurnaroundTime+0x114>)
 8014ec4:	4293      	cmp	r3, r2
 8014ec6:	d202      	bcs.n	8014ece <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014ec8:	230f      	movs	r3, #15
 8014eca:	617b      	str	r3, [r7, #20]
 8014ecc:	e05c      	b.n	8014f88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014ece:	68bb      	ldr	r3, [r7, #8]
 8014ed0:	4a39      	ldr	r2, [pc, #228]	; (8014fb8 <USB_SetTurnaroundTime+0x114>)
 8014ed2:	4293      	cmp	r3, r2
 8014ed4:	d306      	bcc.n	8014ee4 <USB_SetTurnaroundTime+0x40>
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	4a38      	ldr	r2, [pc, #224]	; (8014fbc <USB_SetTurnaroundTime+0x118>)
 8014eda:	4293      	cmp	r3, r2
 8014edc:	d202      	bcs.n	8014ee4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014ede:	230e      	movs	r3, #14
 8014ee0:	617b      	str	r3, [r7, #20]
 8014ee2:	e051      	b.n	8014f88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	4a35      	ldr	r2, [pc, #212]	; (8014fbc <USB_SetTurnaroundTime+0x118>)
 8014ee8:	4293      	cmp	r3, r2
 8014eea:	d306      	bcc.n	8014efa <USB_SetTurnaroundTime+0x56>
 8014eec:	68bb      	ldr	r3, [r7, #8]
 8014eee:	4a34      	ldr	r2, [pc, #208]	; (8014fc0 <USB_SetTurnaroundTime+0x11c>)
 8014ef0:	4293      	cmp	r3, r2
 8014ef2:	d202      	bcs.n	8014efa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8014ef4:	230d      	movs	r3, #13
 8014ef6:	617b      	str	r3, [r7, #20]
 8014ef8:	e046      	b.n	8014f88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014efa:	68bb      	ldr	r3, [r7, #8]
 8014efc:	4a30      	ldr	r2, [pc, #192]	; (8014fc0 <USB_SetTurnaroundTime+0x11c>)
 8014efe:	4293      	cmp	r3, r2
 8014f00:	d306      	bcc.n	8014f10 <USB_SetTurnaroundTime+0x6c>
 8014f02:	68bb      	ldr	r3, [r7, #8]
 8014f04:	4a2f      	ldr	r2, [pc, #188]	; (8014fc4 <USB_SetTurnaroundTime+0x120>)
 8014f06:	4293      	cmp	r3, r2
 8014f08:	d802      	bhi.n	8014f10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8014f0a:	230c      	movs	r3, #12
 8014f0c:	617b      	str	r3, [r7, #20]
 8014f0e:	e03b      	b.n	8014f88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014f10:	68bb      	ldr	r3, [r7, #8]
 8014f12:	4a2c      	ldr	r2, [pc, #176]	; (8014fc4 <USB_SetTurnaroundTime+0x120>)
 8014f14:	4293      	cmp	r3, r2
 8014f16:	d906      	bls.n	8014f26 <USB_SetTurnaroundTime+0x82>
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	4a2b      	ldr	r2, [pc, #172]	; (8014fc8 <USB_SetTurnaroundTime+0x124>)
 8014f1c:	4293      	cmp	r3, r2
 8014f1e:	d802      	bhi.n	8014f26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014f20:	230b      	movs	r3, #11
 8014f22:	617b      	str	r3, [r7, #20]
 8014f24:	e030      	b.n	8014f88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8014f26:	68bb      	ldr	r3, [r7, #8]
 8014f28:	4a27      	ldr	r2, [pc, #156]	; (8014fc8 <USB_SetTurnaroundTime+0x124>)
 8014f2a:	4293      	cmp	r3, r2
 8014f2c:	d906      	bls.n	8014f3c <USB_SetTurnaroundTime+0x98>
 8014f2e:	68bb      	ldr	r3, [r7, #8]
 8014f30:	4a26      	ldr	r2, [pc, #152]	; (8014fcc <USB_SetTurnaroundTime+0x128>)
 8014f32:	4293      	cmp	r3, r2
 8014f34:	d802      	bhi.n	8014f3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8014f36:	230a      	movs	r3, #10
 8014f38:	617b      	str	r3, [r7, #20]
 8014f3a:	e025      	b.n	8014f88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8014f3c:	68bb      	ldr	r3, [r7, #8]
 8014f3e:	4a23      	ldr	r2, [pc, #140]	; (8014fcc <USB_SetTurnaroundTime+0x128>)
 8014f40:	4293      	cmp	r3, r2
 8014f42:	d906      	bls.n	8014f52 <USB_SetTurnaroundTime+0xae>
 8014f44:	68bb      	ldr	r3, [r7, #8]
 8014f46:	4a22      	ldr	r2, [pc, #136]	; (8014fd0 <USB_SetTurnaroundTime+0x12c>)
 8014f48:	4293      	cmp	r3, r2
 8014f4a:	d202      	bcs.n	8014f52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014f4c:	2309      	movs	r3, #9
 8014f4e:	617b      	str	r3, [r7, #20]
 8014f50:	e01a      	b.n	8014f88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014f52:	68bb      	ldr	r3, [r7, #8]
 8014f54:	4a1e      	ldr	r2, [pc, #120]	; (8014fd0 <USB_SetTurnaroundTime+0x12c>)
 8014f56:	4293      	cmp	r3, r2
 8014f58:	d306      	bcc.n	8014f68 <USB_SetTurnaroundTime+0xc4>
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	4a1d      	ldr	r2, [pc, #116]	; (8014fd4 <USB_SetTurnaroundTime+0x130>)
 8014f5e:	4293      	cmp	r3, r2
 8014f60:	d802      	bhi.n	8014f68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8014f62:	2308      	movs	r3, #8
 8014f64:	617b      	str	r3, [r7, #20]
 8014f66:	e00f      	b.n	8014f88 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014f68:	68bb      	ldr	r3, [r7, #8]
 8014f6a:	4a1a      	ldr	r2, [pc, #104]	; (8014fd4 <USB_SetTurnaroundTime+0x130>)
 8014f6c:	4293      	cmp	r3, r2
 8014f6e:	d906      	bls.n	8014f7e <USB_SetTurnaroundTime+0xda>
 8014f70:	68bb      	ldr	r3, [r7, #8]
 8014f72:	4a19      	ldr	r2, [pc, #100]	; (8014fd8 <USB_SetTurnaroundTime+0x134>)
 8014f74:	4293      	cmp	r3, r2
 8014f76:	d202      	bcs.n	8014f7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014f78:	2307      	movs	r3, #7
 8014f7a:	617b      	str	r3, [r7, #20]
 8014f7c:	e004      	b.n	8014f88 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014f7e:	2306      	movs	r3, #6
 8014f80:	617b      	str	r3, [r7, #20]
 8014f82:	e001      	b.n	8014f88 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014f84:	2309      	movs	r3, #9
 8014f86:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	68db      	ldr	r3, [r3, #12]
 8014f8c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	68da      	ldr	r2, [r3, #12]
 8014f98:	697b      	ldr	r3, [r7, #20]
 8014f9a:	029b      	lsls	r3, r3, #10
 8014f9c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8014fa0:	431a      	orrs	r2, r3
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014fa6:	2300      	movs	r3, #0
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	371c      	adds	r7, #28
 8014fac:	46bd      	mov	sp, r7
 8014fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb2:	4770      	bx	lr
 8014fb4:	00d8acbf 	.word	0x00d8acbf
 8014fb8:	00e4e1c0 	.word	0x00e4e1c0
 8014fbc:	00f42400 	.word	0x00f42400
 8014fc0:	01067380 	.word	0x01067380
 8014fc4:	011a499f 	.word	0x011a499f
 8014fc8:	01312cff 	.word	0x01312cff
 8014fcc:	014ca43f 	.word	0x014ca43f
 8014fd0:	016e3600 	.word	0x016e3600
 8014fd4:	01a6ab1f 	.word	0x01a6ab1f
 8014fd8:	01e84800 	.word	0x01e84800

08014fdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014fdc:	b480      	push	{r7}
 8014fde:	b083      	sub	sp, #12
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	689b      	ldr	r3, [r3, #8]
 8014fe8:	f043 0201 	orr.w	r2, r3, #1
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014ff0:	2300      	movs	r3, #0
}
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	370c      	adds	r7, #12
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffc:	4770      	bx	lr

08014ffe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014ffe:	b480      	push	{r7}
 8015000:	b083      	sub	sp, #12
 8015002:	af00      	add	r7, sp, #0
 8015004:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	689b      	ldr	r3, [r3, #8]
 801500a:	f023 0201 	bic.w	r2, r3, #1
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015012:	2300      	movs	r3, #0
}
 8015014:	4618      	mov	r0, r3
 8015016:	370c      	adds	r7, #12
 8015018:	46bd      	mov	sp, r7
 801501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501e:	4770      	bx	lr

08015020 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b084      	sub	sp, #16
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
 8015028:	460b      	mov	r3, r1
 801502a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801502c:	2300      	movs	r3, #0
 801502e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	68db      	ldr	r3, [r3, #12]
 8015034:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801503c:	78fb      	ldrb	r3, [r7, #3]
 801503e:	2b01      	cmp	r3, #1
 8015040:	d115      	bne.n	801506e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	68db      	ldr	r3, [r3, #12]
 8015046:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801504e:	2001      	movs	r0, #1
 8015050:	f7f5 ff6e 	bl	800af30 <HAL_Delay>
      ms++;
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	3301      	adds	r3, #1
 8015058:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801505a:	6878      	ldr	r0, [r7, #4]
 801505c:	f001 f985 	bl	801636a <USB_GetMode>
 8015060:	4603      	mov	r3, r0
 8015062:	2b01      	cmp	r3, #1
 8015064:	d01e      	beq.n	80150a4 <USB_SetCurrentMode+0x84>
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	2b31      	cmp	r3, #49	; 0x31
 801506a:	d9f0      	bls.n	801504e <USB_SetCurrentMode+0x2e>
 801506c:	e01a      	b.n	80150a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801506e:	78fb      	ldrb	r3, [r7, #3]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d115      	bne.n	80150a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	68db      	ldr	r3, [r3, #12]
 8015078:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8015080:	2001      	movs	r0, #1
 8015082:	f7f5 ff55 	bl	800af30 <HAL_Delay>
      ms++;
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	3301      	adds	r3, #1
 801508a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801508c:	6878      	ldr	r0, [r7, #4]
 801508e:	f001 f96c 	bl	801636a <USB_GetMode>
 8015092:	4603      	mov	r3, r0
 8015094:	2b00      	cmp	r3, #0
 8015096:	d005      	beq.n	80150a4 <USB_SetCurrentMode+0x84>
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	2b31      	cmp	r3, #49	; 0x31
 801509c:	d9f0      	bls.n	8015080 <USB_SetCurrentMode+0x60>
 801509e:	e001      	b.n	80150a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80150a0:	2301      	movs	r3, #1
 80150a2:	e005      	b.n	80150b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	2b32      	cmp	r3, #50	; 0x32
 80150a8:	d101      	bne.n	80150ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80150aa:	2301      	movs	r3, #1
 80150ac:	e000      	b.n	80150b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80150ae:	2300      	movs	r3, #0
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3710      	adds	r7, #16
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}

080150b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80150b8:	b084      	sub	sp, #16
 80150ba:	b580      	push	{r7, lr}
 80150bc:	b086      	sub	sp, #24
 80150be:	af00      	add	r7, sp, #0
 80150c0:	6078      	str	r0, [r7, #4]
 80150c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80150c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80150ca:	2300      	movs	r3, #0
 80150cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80150d2:	2300      	movs	r3, #0
 80150d4:	613b      	str	r3, [r7, #16]
 80150d6:	e009      	b.n	80150ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80150d8:	687a      	ldr	r2, [r7, #4]
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	3340      	adds	r3, #64	; 0x40
 80150de:	009b      	lsls	r3, r3, #2
 80150e0:	4413      	add	r3, r2
 80150e2:	2200      	movs	r2, #0
 80150e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80150e6:	693b      	ldr	r3, [r7, #16]
 80150e8:	3301      	adds	r3, #1
 80150ea:	613b      	str	r3, [r7, #16]
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	2b0e      	cmp	r3, #14
 80150f0:	d9f2      	bls.n	80150d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80150f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d11c      	bne.n	8015132 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80150fe:	685b      	ldr	r3, [r3, #4]
 8015100:	68fa      	ldr	r2, [r7, #12]
 8015102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015106:	f043 0302 	orr.w	r3, r3, #2
 801510a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015110:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	601a      	str	r2, [r3, #0]
 8015130:	e005      	b.n	801513e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015136:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015144:	461a      	mov	r2, r3
 8015146:	2300      	movs	r3, #0
 8015148:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015150:	4619      	mov	r1, r3
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015158:	461a      	mov	r2, r3
 801515a:	680b      	ldr	r3, [r1, #0]
 801515c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801515e:	2103      	movs	r1, #3
 8015160:	6878      	ldr	r0, [r7, #4]
 8015162:	f000 f959 	bl	8015418 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015166:	2110      	movs	r1, #16
 8015168:	6878      	ldr	r0, [r7, #4]
 801516a:	f000 f8f1 	bl	8015350 <USB_FlushTxFifo>
 801516e:	4603      	mov	r3, r0
 8015170:	2b00      	cmp	r3, #0
 8015172:	d001      	beq.n	8015178 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8015174:	2301      	movs	r3, #1
 8015176:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015178:	6878      	ldr	r0, [r7, #4]
 801517a:	f000 f91d 	bl	80153b8 <USB_FlushRxFifo>
 801517e:	4603      	mov	r3, r0
 8015180:	2b00      	cmp	r3, #0
 8015182:	d001      	beq.n	8015188 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8015184:	2301      	movs	r3, #1
 8015186:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801518e:	461a      	mov	r2, r3
 8015190:	2300      	movs	r3, #0
 8015192:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801519a:	461a      	mov	r2, r3
 801519c:	2300      	movs	r3, #0
 801519e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80151a6:	461a      	mov	r2, r3
 80151a8:	2300      	movs	r3, #0
 80151aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80151ac:	2300      	movs	r3, #0
 80151ae:	613b      	str	r3, [r7, #16]
 80151b0:	e043      	b.n	801523a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	015a      	lsls	r2, r3, #5
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	4413      	add	r3, r2
 80151ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80151c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80151c8:	d118      	bne.n	80151fc <USB_DevInit+0x144>
    {
      if (i == 0U)
 80151ca:	693b      	ldr	r3, [r7, #16]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d10a      	bne.n	80151e6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	015a      	lsls	r2, r3, #5
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	4413      	add	r3, r2
 80151d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151dc:	461a      	mov	r2, r3
 80151de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80151e2:	6013      	str	r3, [r2, #0]
 80151e4:	e013      	b.n	801520e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80151e6:	693b      	ldr	r3, [r7, #16]
 80151e8:	015a      	lsls	r2, r3, #5
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	4413      	add	r3, r2
 80151ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151f2:	461a      	mov	r2, r3
 80151f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80151f8:	6013      	str	r3, [r2, #0]
 80151fa:	e008      	b.n	801520e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80151fc:	693b      	ldr	r3, [r7, #16]
 80151fe:	015a      	lsls	r2, r3, #5
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	4413      	add	r3, r2
 8015204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015208:	461a      	mov	r2, r3
 801520a:	2300      	movs	r3, #0
 801520c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801520e:	693b      	ldr	r3, [r7, #16]
 8015210:	015a      	lsls	r2, r3, #5
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	4413      	add	r3, r2
 8015216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801521a:	461a      	mov	r2, r3
 801521c:	2300      	movs	r3, #0
 801521e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8015220:	693b      	ldr	r3, [r7, #16]
 8015222:	015a      	lsls	r2, r3, #5
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	4413      	add	r3, r2
 8015228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801522c:	461a      	mov	r2, r3
 801522e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8015232:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015234:	693b      	ldr	r3, [r7, #16]
 8015236:	3301      	adds	r3, #1
 8015238:	613b      	str	r3, [r7, #16]
 801523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801523c:	693a      	ldr	r2, [r7, #16]
 801523e:	429a      	cmp	r2, r3
 8015240:	d3b7      	bcc.n	80151b2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015242:	2300      	movs	r3, #0
 8015244:	613b      	str	r3, [r7, #16]
 8015246:	e043      	b.n	80152d0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015248:	693b      	ldr	r3, [r7, #16]
 801524a:	015a      	lsls	r2, r3, #5
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	4413      	add	r3, r2
 8015250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801525a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801525e:	d118      	bne.n	8015292 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8015260:	693b      	ldr	r3, [r7, #16]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d10a      	bne.n	801527c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8015266:	693b      	ldr	r3, [r7, #16]
 8015268:	015a      	lsls	r2, r3, #5
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	4413      	add	r3, r2
 801526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015272:	461a      	mov	r2, r3
 8015274:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015278:	6013      	str	r3, [r2, #0]
 801527a:	e013      	b.n	80152a4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801527c:	693b      	ldr	r3, [r7, #16]
 801527e:	015a      	lsls	r2, r3, #5
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	4413      	add	r3, r2
 8015284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015288:	461a      	mov	r2, r3
 801528a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801528e:	6013      	str	r3, [r2, #0]
 8015290:	e008      	b.n	80152a4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8015292:	693b      	ldr	r3, [r7, #16]
 8015294:	015a      	lsls	r2, r3, #5
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	4413      	add	r3, r2
 801529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801529e:	461a      	mov	r2, r3
 80152a0:	2300      	movs	r3, #0
 80152a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	015a      	lsls	r2, r3, #5
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	4413      	add	r3, r2
 80152ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80152b0:	461a      	mov	r2, r3
 80152b2:	2300      	movs	r3, #0
 80152b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80152b6:	693b      	ldr	r3, [r7, #16]
 80152b8:	015a      	lsls	r2, r3, #5
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	4413      	add	r3, r2
 80152be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80152c2:	461a      	mov	r2, r3
 80152c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80152c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80152ca:	693b      	ldr	r3, [r7, #16]
 80152cc:	3301      	adds	r3, #1
 80152ce:	613b      	str	r3, [r7, #16]
 80152d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152d2:	693a      	ldr	r2, [r7, #16]
 80152d4:	429a      	cmp	r2, r3
 80152d6:	d3b7      	bcc.n	8015248 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152de:	691b      	ldr	r3, [r3, #16]
 80152e0:	68fa      	ldr	r2, [r7, #12]
 80152e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80152e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80152ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	2200      	movs	r2, #0
 80152f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80152f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	699b      	ldr	r3, [r3, #24]
 80152fe:	f043 0210 	orr.w	r2, r3, #16
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	699a      	ldr	r2, [r3, #24]
 801530a:	4b10      	ldr	r3, [pc, #64]	; (801534c <USB_DevInit+0x294>)
 801530c:	4313      	orrs	r3, r2
 801530e:	687a      	ldr	r2, [r7, #4]
 8015310:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8015312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015314:	2b00      	cmp	r3, #0
 8015316:	d005      	beq.n	8015324 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	699b      	ldr	r3, [r3, #24]
 801531c:	f043 0208 	orr.w	r2, r3, #8
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8015324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015326:	2b01      	cmp	r3, #1
 8015328:	d107      	bne.n	801533a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	699b      	ldr	r3, [r3, #24]
 801532e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015332:	f043 0304 	orr.w	r3, r3, #4
 8015336:	687a      	ldr	r2, [r7, #4]
 8015338:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801533a:	7dfb      	ldrb	r3, [r7, #23]
}
 801533c:	4618      	mov	r0, r3
 801533e:	3718      	adds	r7, #24
 8015340:	46bd      	mov	sp, r7
 8015342:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015346:	b004      	add	sp, #16
 8015348:	4770      	bx	lr
 801534a:	bf00      	nop
 801534c:	803c3800 	.word	0x803c3800

08015350 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8015350:	b480      	push	{r7}
 8015352:	b085      	sub	sp, #20
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
 8015358:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801535a:	2300      	movs	r3, #0
 801535c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	3301      	adds	r3, #1
 8015362:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	4a13      	ldr	r2, [pc, #76]	; (80153b4 <USB_FlushTxFifo+0x64>)
 8015368:	4293      	cmp	r3, r2
 801536a:	d901      	bls.n	8015370 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801536c:	2303      	movs	r3, #3
 801536e:	e01b      	b.n	80153a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	691b      	ldr	r3, [r3, #16]
 8015374:	2b00      	cmp	r3, #0
 8015376:	daf2      	bge.n	801535e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8015378:	2300      	movs	r3, #0
 801537a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	019b      	lsls	r3, r3, #6
 8015380:	f043 0220 	orr.w	r2, r3, #32
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	3301      	adds	r3, #1
 801538c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	4a08      	ldr	r2, [pc, #32]	; (80153b4 <USB_FlushTxFifo+0x64>)
 8015392:	4293      	cmp	r3, r2
 8015394:	d901      	bls.n	801539a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8015396:	2303      	movs	r3, #3
 8015398:	e006      	b.n	80153a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	691b      	ldr	r3, [r3, #16]
 801539e:	f003 0320 	and.w	r3, r3, #32
 80153a2:	2b20      	cmp	r3, #32
 80153a4:	d0f0      	beq.n	8015388 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80153a6:	2300      	movs	r3, #0
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	3714      	adds	r7, #20
 80153ac:	46bd      	mov	sp, r7
 80153ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b2:	4770      	bx	lr
 80153b4:	00030d40 	.word	0x00030d40

080153b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80153b8:	b480      	push	{r7}
 80153ba:	b085      	sub	sp, #20
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80153c0:	2300      	movs	r3, #0
 80153c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	3301      	adds	r3, #1
 80153c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	4a11      	ldr	r2, [pc, #68]	; (8015414 <USB_FlushRxFifo+0x5c>)
 80153ce:	4293      	cmp	r3, r2
 80153d0:	d901      	bls.n	80153d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80153d2:	2303      	movs	r3, #3
 80153d4:	e018      	b.n	8015408 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	691b      	ldr	r3, [r3, #16]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	daf2      	bge.n	80153c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80153de:	2300      	movs	r3, #0
 80153e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2210      	movs	r2, #16
 80153e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	3301      	adds	r3, #1
 80153ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	4a08      	ldr	r2, [pc, #32]	; (8015414 <USB_FlushRxFifo+0x5c>)
 80153f2:	4293      	cmp	r3, r2
 80153f4:	d901      	bls.n	80153fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80153f6:	2303      	movs	r3, #3
 80153f8:	e006      	b.n	8015408 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	691b      	ldr	r3, [r3, #16]
 80153fe:	f003 0310 	and.w	r3, r3, #16
 8015402:	2b10      	cmp	r3, #16
 8015404:	d0f0      	beq.n	80153e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8015406:	2300      	movs	r3, #0
}
 8015408:	4618      	mov	r0, r3
 801540a:	3714      	adds	r7, #20
 801540c:	46bd      	mov	sp, r7
 801540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015412:	4770      	bx	lr
 8015414:	00030d40 	.word	0x00030d40

08015418 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8015418:	b480      	push	{r7}
 801541a:	b085      	sub	sp, #20
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	460b      	mov	r3, r1
 8015422:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801542e:	681a      	ldr	r2, [r3, #0]
 8015430:	78fb      	ldrb	r3, [r7, #3]
 8015432:	68f9      	ldr	r1, [r7, #12]
 8015434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015438:	4313      	orrs	r3, r2
 801543a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801543c:	2300      	movs	r3, #0
}
 801543e:	4618      	mov	r0, r3
 8015440:	3714      	adds	r7, #20
 8015442:	46bd      	mov	sp, r7
 8015444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015448:	4770      	bx	lr

0801544a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801544a:	b480      	push	{r7}
 801544c:	b087      	sub	sp, #28
 801544e:	af00      	add	r7, sp, #0
 8015450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801545c:	689b      	ldr	r3, [r3, #8]
 801545e:	f003 0306 	and.w	r3, r3, #6
 8015462:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	2b02      	cmp	r3, #2
 8015468:	d002      	beq.n	8015470 <USB_GetDevSpeed+0x26>
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	2b06      	cmp	r3, #6
 801546e:	d102      	bne.n	8015476 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8015470:	2302      	movs	r3, #2
 8015472:	75fb      	strb	r3, [r7, #23]
 8015474:	e001      	b.n	801547a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8015476:	230f      	movs	r3, #15
 8015478:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801547a:	7dfb      	ldrb	r3, [r7, #23]
}
 801547c:	4618      	mov	r0, r3
 801547e:	371c      	adds	r7, #28
 8015480:	46bd      	mov	sp, r7
 8015482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015486:	4770      	bx	lr

08015488 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015488:	b480      	push	{r7}
 801548a:	b085      	sub	sp, #20
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
 8015490:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015496:	683b      	ldr	r3, [r7, #0]
 8015498:	781b      	ldrb	r3, [r3, #0]
 801549a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	785b      	ldrb	r3, [r3, #1]
 80154a0:	2b01      	cmp	r3, #1
 80154a2:	d13a      	bne.n	801551a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80154aa:	69da      	ldr	r2, [r3, #28]
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	f003 030f 	and.w	r3, r3, #15
 80154b4:	2101      	movs	r1, #1
 80154b6:	fa01 f303 	lsl.w	r3, r1, r3
 80154ba:	b29b      	uxth	r3, r3
 80154bc:	68f9      	ldr	r1, [r7, #12]
 80154be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80154c2:	4313      	orrs	r3, r2
 80154c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80154c6:	68bb      	ldr	r3, [r7, #8]
 80154c8:	015a      	lsls	r2, r3, #5
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	4413      	add	r3, r2
 80154ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d155      	bne.n	8015588 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80154dc:	68bb      	ldr	r3, [r7, #8]
 80154de:	015a      	lsls	r2, r3, #5
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	4413      	add	r3, r2
 80154e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80154e8:	681a      	ldr	r2, [r3, #0]
 80154ea:	683b      	ldr	r3, [r7, #0]
 80154ec:	68db      	ldr	r3, [r3, #12]
 80154ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	791b      	ldrb	r3, [r3, #4]
 80154f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80154f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	059b      	lsls	r3, r3, #22
 80154fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015500:	4313      	orrs	r3, r2
 8015502:	68ba      	ldr	r2, [r7, #8]
 8015504:	0151      	lsls	r1, r2, #5
 8015506:	68fa      	ldr	r2, [r7, #12]
 8015508:	440a      	add	r2, r1
 801550a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801550e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015516:	6013      	str	r3, [r2, #0]
 8015518:	e036      	b.n	8015588 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015520:	69da      	ldr	r2, [r3, #28]
 8015522:	683b      	ldr	r3, [r7, #0]
 8015524:	781b      	ldrb	r3, [r3, #0]
 8015526:	f003 030f 	and.w	r3, r3, #15
 801552a:	2101      	movs	r1, #1
 801552c:	fa01 f303 	lsl.w	r3, r1, r3
 8015530:	041b      	lsls	r3, r3, #16
 8015532:	68f9      	ldr	r1, [r7, #12]
 8015534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015538:	4313      	orrs	r3, r2
 801553a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801553c:	68bb      	ldr	r3, [r7, #8]
 801553e:	015a      	lsls	r2, r3, #5
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	4413      	add	r3, r2
 8015544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801554e:	2b00      	cmp	r3, #0
 8015550:	d11a      	bne.n	8015588 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015552:	68bb      	ldr	r3, [r7, #8]
 8015554:	015a      	lsls	r2, r3, #5
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	4413      	add	r3, r2
 801555a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801555e:	681a      	ldr	r2, [r3, #0]
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	68db      	ldr	r3, [r3, #12]
 8015564:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8015568:	683b      	ldr	r3, [r7, #0]
 801556a:	791b      	ldrb	r3, [r3, #4]
 801556c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801556e:	430b      	orrs	r3, r1
 8015570:	4313      	orrs	r3, r2
 8015572:	68ba      	ldr	r2, [r7, #8]
 8015574:	0151      	lsls	r1, r2, #5
 8015576:	68fa      	ldr	r2, [r7, #12]
 8015578:	440a      	add	r2, r1
 801557a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801557e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015586:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8015588:	2300      	movs	r3, #0
}
 801558a:	4618      	mov	r0, r3
 801558c:	3714      	adds	r7, #20
 801558e:	46bd      	mov	sp, r7
 8015590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015594:	4770      	bx	lr
	...

08015598 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015598:	b480      	push	{r7}
 801559a:	b085      	sub	sp, #20
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
 80155a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	781b      	ldrb	r3, [r3, #0]
 80155aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80155ac:	683b      	ldr	r3, [r7, #0]
 80155ae:	785b      	ldrb	r3, [r3, #1]
 80155b0:	2b01      	cmp	r3, #1
 80155b2:	d161      	bne.n	8015678 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80155b4:	68bb      	ldr	r3, [r7, #8]
 80155b6:	015a      	lsls	r2, r3, #5
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	4413      	add	r3, r2
 80155bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80155c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80155ca:	d11f      	bne.n	801560c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80155cc:	68bb      	ldr	r3, [r7, #8]
 80155ce:	015a      	lsls	r2, r3, #5
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	4413      	add	r3, r2
 80155d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	68ba      	ldr	r2, [r7, #8]
 80155dc:	0151      	lsls	r1, r2, #5
 80155de:	68fa      	ldr	r2, [r7, #12]
 80155e0:	440a      	add	r2, r1
 80155e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80155e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80155ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80155ec:	68bb      	ldr	r3, [r7, #8]
 80155ee:	015a      	lsls	r2, r3, #5
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	4413      	add	r3, r2
 80155f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	68ba      	ldr	r2, [r7, #8]
 80155fc:	0151      	lsls	r1, r2, #5
 80155fe:	68fa      	ldr	r2, [r7, #12]
 8015600:	440a      	add	r2, r1
 8015602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015606:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801560a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015614:	683b      	ldr	r3, [r7, #0]
 8015616:	781b      	ldrb	r3, [r3, #0]
 8015618:	f003 030f 	and.w	r3, r3, #15
 801561c:	2101      	movs	r1, #1
 801561e:	fa01 f303 	lsl.w	r3, r1, r3
 8015622:	b29b      	uxth	r3, r3
 8015624:	43db      	mvns	r3, r3
 8015626:	68f9      	ldr	r1, [r7, #12]
 8015628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801562c:	4013      	ands	r3, r2
 801562e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015636:	69da      	ldr	r2, [r3, #28]
 8015638:	683b      	ldr	r3, [r7, #0]
 801563a:	781b      	ldrb	r3, [r3, #0]
 801563c:	f003 030f 	and.w	r3, r3, #15
 8015640:	2101      	movs	r1, #1
 8015642:	fa01 f303 	lsl.w	r3, r1, r3
 8015646:	b29b      	uxth	r3, r3
 8015648:	43db      	mvns	r3, r3
 801564a:	68f9      	ldr	r1, [r7, #12]
 801564c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015650:	4013      	ands	r3, r2
 8015652:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	015a      	lsls	r2, r3, #5
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	4413      	add	r3, r2
 801565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015660:	681a      	ldr	r2, [r3, #0]
 8015662:	68bb      	ldr	r3, [r7, #8]
 8015664:	0159      	lsls	r1, r3, #5
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	440b      	add	r3, r1
 801566a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801566e:	4619      	mov	r1, r3
 8015670:	4b35      	ldr	r3, [pc, #212]	; (8015748 <USB_DeactivateEndpoint+0x1b0>)
 8015672:	4013      	ands	r3, r2
 8015674:	600b      	str	r3, [r1, #0]
 8015676:	e060      	b.n	801573a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015678:	68bb      	ldr	r3, [r7, #8]
 801567a:	015a      	lsls	r2, r3, #5
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	4413      	add	r3, r2
 8015680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801568a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801568e:	d11f      	bne.n	80156d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	015a      	lsls	r2, r3, #5
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	4413      	add	r3, r2
 8015698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	68ba      	ldr	r2, [r7, #8]
 80156a0:	0151      	lsls	r1, r2, #5
 80156a2:	68fa      	ldr	r2, [r7, #12]
 80156a4:	440a      	add	r2, r1
 80156a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80156aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80156ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	015a      	lsls	r2, r3, #5
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	4413      	add	r3, r2
 80156b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	68ba      	ldr	r2, [r7, #8]
 80156c0:	0151      	lsls	r1, r2, #5
 80156c2:	68fa      	ldr	r2, [r7, #12]
 80156c4:	440a      	add	r2, r1
 80156c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80156ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80156ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80156d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	781b      	ldrb	r3, [r3, #0]
 80156dc:	f003 030f 	and.w	r3, r3, #15
 80156e0:	2101      	movs	r1, #1
 80156e2:	fa01 f303 	lsl.w	r3, r1, r3
 80156e6:	041b      	lsls	r3, r3, #16
 80156e8:	43db      	mvns	r3, r3
 80156ea:	68f9      	ldr	r1, [r7, #12]
 80156ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80156f0:	4013      	ands	r3, r2
 80156f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80156fa:	69da      	ldr	r2, [r3, #28]
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	781b      	ldrb	r3, [r3, #0]
 8015700:	f003 030f 	and.w	r3, r3, #15
 8015704:	2101      	movs	r1, #1
 8015706:	fa01 f303 	lsl.w	r3, r1, r3
 801570a:	041b      	lsls	r3, r3, #16
 801570c:	43db      	mvns	r3, r3
 801570e:	68f9      	ldr	r1, [r7, #12]
 8015710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015714:	4013      	ands	r3, r2
 8015716:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	015a      	lsls	r2, r3, #5
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	4413      	add	r3, r2
 8015720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015724:	681a      	ldr	r2, [r3, #0]
 8015726:	68bb      	ldr	r3, [r7, #8]
 8015728:	0159      	lsls	r1, r3, #5
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	440b      	add	r3, r1
 801572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015732:	4619      	mov	r1, r3
 8015734:	4b05      	ldr	r3, [pc, #20]	; (801574c <USB_DeactivateEndpoint+0x1b4>)
 8015736:	4013      	ands	r3, r2
 8015738:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801573a:	2300      	movs	r3, #0
}
 801573c:	4618      	mov	r0, r3
 801573e:	3714      	adds	r7, #20
 8015740:	46bd      	mov	sp, r7
 8015742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015746:	4770      	bx	lr
 8015748:	ec337800 	.word	0xec337800
 801574c:	eff37800 	.word	0xeff37800

08015750 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b086      	sub	sp, #24
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
 8015758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801575e:	683b      	ldr	r3, [r7, #0]
 8015760:	781b      	ldrb	r3, [r3, #0]
 8015762:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015764:	683b      	ldr	r3, [r7, #0]
 8015766:	785b      	ldrb	r3, [r3, #1]
 8015768:	2b01      	cmp	r3, #1
 801576a:	f040 810a 	bne.w	8015982 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801576e:	683b      	ldr	r3, [r7, #0]
 8015770:	699b      	ldr	r3, [r3, #24]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d132      	bne.n	80157dc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015776:	693b      	ldr	r3, [r7, #16]
 8015778:	015a      	lsls	r2, r3, #5
 801577a:	697b      	ldr	r3, [r7, #20]
 801577c:	4413      	add	r3, r2
 801577e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015782:	691b      	ldr	r3, [r3, #16]
 8015784:	693a      	ldr	r2, [r7, #16]
 8015786:	0151      	lsls	r1, r2, #5
 8015788:	697a      	ldr	r2, [r7, #20]
 801578a:	440a      	add	r2, r1
 801578c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015790:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015794:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015798:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801579a:	693b      	ldr	r3, [r7, #16]
 801579c:	015a      	lsls	r2, r3, #5
 801579e:	697b      	ldr	r3, [r7, #20]
 80157a0:	4413      	add	r3, r2
 80157a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80157a6:	691b      	ldr	r3, [r3, #16]
 80157a8:	693a      	ldr	r2, [r7, #16]
 80157aa:	0151      	lsls	r1, r2, #5
 80157ac:	697a      	ldr	r2, [r7, #20]
 80157ae:	440a      	add	r2, r1
 80157b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80157b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80157b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80157ba:	693b      	ldr	r3, [r7, #16]
 80157bc:	015a      	lsls	r2, r3, #5
 80157be:	697b      	ldr	r3, [r7, #20]
 80157c0:	4413      	add	r3, r2
 80157c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80157c6:	691b      	ldr	r3, [r3, #16]
 80157c8:	693a      	ldr	r2, [r7, #16]
 80157ca:	0151      	lsls	r1, r2, #5
 80157cc:	697a      	ldr	r2, [r7, #20]
 80157ce:	440a      	add	r2, r1
 80157d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80157d4:	0cdb      	lsrs	r3, r3, #19
 80157d6:	04db      	lsls	r3, r3, #19
 80157d8:	6113      	str	r3, [r2, #16]
 80157da:	e074      	b.n	80158c6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80157dc:	693b      	ldr	r3, [r7, #16]
 80157de:	015a      	lsls	r2, r3, #5
 80157e0:	697b      	ldr	r3, [r7, #20]
 80157e2:	4413      	add	r3, r2
 80157e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80157e8:	691b      	ldr	r3, [r3, #16]
 80157ea:	693a      	ldr	r2, [r7, #16]
 80157ec:	0151      	lsls	r1, r2, #5
 80157ee:	697a      	ldr	r2, [r7, #20]
 80157f0:	440a      	add	r2, r1
 80157f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80157f6:	0cdb      	lsrs	r3, r3, #19
 80157f8:	04db      	lsls	r3, r3, #19
 80157fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80157fc:	693b      	ldr	r3, [r7, #16]
 80157fe:	015a      	lsls	r2, r3, #5
 8015800:	697b      	ldr	r3, [r7, #20]
 8015802:	4413      	add	r3, r2
 8015804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015808:	691b      	ldr	r3, [r3, #16]
 801580a:	693a      	ldr	r2, [r7, #16]
 801580c:	0151      	lsls	r1, r2, #5
 801580e:	697a      	ldr	r2, [r7, #20]
 8015810:	440a      	add	r2, r1
 8015812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015816:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801581a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801581e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015820:	693b      	ldr	r3, [r7, #16]
 8015822:	015a      	lsls	r2, r3, #5
 8015824:	697b      	ldr	r3, [r7, #20]
 8015826:	4413      	add	r3, r2
 8015828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801582c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	6999      	ldr	r1, [r3, #24]
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	68db      	ldr	r3, [r3, #12]
 8015836:	440b      	add	r3, r1
 8015838:	1e59      	subs	r1, r3, #1
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	68db      	ldr	r3, [r3, #12]
 801583e:	fbb1 f3f3 	udiv	r3, r1, r3
 8015842:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015844:	4b9e      	ldr	r3, [pc, #632]	; (8015ac0 <USB_EPStartXfer+0x370>)
 8015846:	400b      	ands	r3, r1
 8015848:	6939      	ldr	r1, [r7, #16]
 801584a:	0148      	lsls	r0, r1, #5
 801584c:	6979      	ldr	r1, [r7, #20]
 801584e:	4401      	add	r1, r0
 8015850:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8015854:	4313      	orrs	r3, r2
 8015856:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015858:	693b      	ldr	r3, [r7, #16]
 801585a:	015a      	lsls	r2, r3, #5
 801585c:	697b      	ldr	r3, [r7, #20]
 801585e:	4413      	add	r3, r2
 8015860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015864:	691a      	ldr	r2, [r3, #16]
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	699b      	ldr	r3, [r3, #24]
 801586a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801586e:	6939      	ldr	r1, [r7, #16]
 8015870:	0148      	lsls	r0, r1, #5
 8015872:	6979      	ldr	r1, [r7, #20]
 8015874:	4401      	add	r1, r0
 8015876:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801587a:	4313      	orrs	r3, r2
 801587c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801587e:	683b      	ldr	r3, [r7, #0]
 8015880:	791b      	ldrb	r3, [r3, #4]
 8015882:	2b01      	cmp	r3, #1
 8015884:	d11f      	bne.n	80158c6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8015886:	693b      	ldr	r3, [r7, #16]
 8015888:	015a      	lsls	r2, r3, #5
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	4413      	add	r3, r2
 801588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015892:	691b      	ldr	r3, [r3, #16]
 8015894:	693a      	ldr	r2, [r7, #16]
 8015896:	0151      	lsls	r1, r2, #5
 8015898:	697a      	ldr	r2, [r7, #20]
 801589a:	440a      	add	r2, r1
 801589c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80158a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80158a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80158a6:	693b      	ldr	r3, [r7, #16]
 80158a8:	015a      	lsls	r2, r3, #5
 80158aa:	697b      	ldr	r3, [r7, #20]
 80158ac:	4413      	add	r3, r2
 80158ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80158b2:	691b      	ldr	r3, [r3, #16]
 80158b4:	693a      	ldr	r2, [r7, #16]
 80158b6:	0151      	lsls	r1, r2, #5
 80158b8:	697a      	ldr	r2, [r7, #20]
 80158ba:	440a      	add	r2, r1
 80158bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80158c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80158c4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80158c6:	693b      	ldr	r3, [r7, #16]
 80158c8:	015a      	lsls	r2, r3, #5
 80158ca:	697b      	ldr	r3, [r7, #20]
 80158cc:	4413      	add	r3, r2
 80158ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	693a      	ldr	r2, [r7, #16]
 80158d6:	0151      	lsls	r1, r2, #5
 80158d8:	697a      	ldr	r2, [r7, #20]
 80158da:	440a      	add	r2, r1
 80158dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80158e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80158e4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80158e6:	683b      	ldr	r3, [r7, #0]
 80158e8:	791b      	ldrb	r3, [r3, #4]
 80158ea:	2b01      	cmp	r3, #1
 80158ec:	d015      	beq.n	801591a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80158ee:	683b      	ldr	r3, [r7, #0]
 80158f0:	699b      	ldr	r3, [r3, #24]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	f000 8106 	beq.w	8015b04 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80158f8:	697b      	ldr	r3, [r7, #20]
 80158fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80158fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	781b      	ldrb	r3, [r3, #0]
 8015904:	f003 030f 	and.w	r3, r3, #15
 8015908:	2101      	movs	r1, #1
 801590a:	fa01 f303 	lsl.w	r3, r1, r3
 801590e:	6979      	ldr	r1, [r7, #20]
 8015910:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015914:	4313      	orrs	r3, r2
 8015916:	634b      	str	r3, [r1, #52]	; 0x34
 8015918:	e0f4      	b.n	8015b04 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801591a:	697b      	ldr	r3, [r7, #20]
 801591c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015920:	689b      	ldr	r3, [r3, #8]
 8015922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015926:	2b00      	cmp	r3, #0
 8015928:	d110      	bne.n	801594c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801592a:	693b      	ldr	r3, [r7, #16]
 801592c:	015a      	lsls	r2, r3, #5
 801592e:	697b      	ldr	r3, [r7, #20]
 8015930:	4413      	add	r3, r2
 8015932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	693a      	ldr	r2, [r7, #16]
 801593a:	0151      	lsls	r1, r2, #5
 801593c:	697a      	ldr	r2, [r7, #20]
 801593e:	440a      	add	r2, r1
 8015940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015944:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015948:	6013      	str	r3, [r2, #0]
 801594a:	e00f      	b.n	801596c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801594c:	693b      	ldr	r3, [r7, #16]
 801594e:	015a      	lsls	r2, r3, #5
 8015950:	697b      	ldr	r3, [r7, #20]
 8015952:	4413      	add	r3, r2
 8015954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	693a      	ldr	r2, [r7, #16]
 801595c:	0151      	lsls	r1, r2, #5
 801595e:	697a      	ldr	r2, [r7, #20]
 8015960:	440a      	add	r2, r1
 8015962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801596a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 801596c:	683b      	ldr	r3, [r7, #0]
 801596e:	6919      	ldr	r1, [r3, #16]
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	781a      	ldrb	r2, [r3, #0]
 8015974:	683b      	ldr	r3, [r7, #0]
 8015976:	699b      	ldr	r3, [r3, #24]
 8015978:	b29b      	uxth	r3, r3
 801597a:	6878      	ldr	r0, [r7, #4]
 801597c:	f000 fa94 	bl	8015ea8 <USB_WritePacket>
 8015980:	e0c0      	b.n	8015b04 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015982:	693b      	ldr	r3, [r7, #16]
 8015984:	015a      	lsls	r2, r3, #5
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	4413      	add	r3, r2
 801598a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801598e:	691b      	ldr	r3, [r3, #16]
 8015990:	693a      	ldr	r2, [r7, #16]
 8015992:	0151      	lsls	r1, r2, #5
 8015994:	697a      	ldr	r2, [r7, #20]
 8015996:	440a      	add	r2, r1
 8015998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801599c:	0cdb      	lsrs	r3, r3, #19
 801599e:	04db      	lsls	r3, r3, #19
 80159a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80159a2:	693b      	ldr	r3, [r7, #16]
 80159a4:	015a      	lsls	r2, r3, #5
 80159a6:	697b      	ldr	r3, [r7, #20]
 80159a8:	4413      	add	r3, r2
 80159aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80159ae:	691b      	ldr	r3, [r3, #16]
 80159b0:	693a      	ldr	r2, [r7, #16]
 80159b2:	0151      	lsls	r1, r2, #5
 80159b4:	697a      	ldr	r2, [r7, #20]
 80159b6:	440a      	add	r2, r1
 80159b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80159bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80159c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80159c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80159c6:	683b      	ldr	r3, [r7, #0]
 80159c8:	699b      	ldr	r3, [r3, #24]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d123      	bne.n	8015a16 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80159ce:	693b      	ldr	r3, [r7, #16]
 80159d0:	015a      	lsls	r2, r3, #5
 80159d2:	697b      	ldr	r3, [r7, #20]
 80159d4:	4413      	add	r3, r2
 80159d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80159da:	691a      	ldr	r2, [r3, #16]
 80159dc:	683b      	ldr	r3, [r7, #0]
 80159de:	68db      	ldr	r3, [r3, #12]
 80159e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80159e4:	6939      	ldr	r1, [r7, #16]
 80159e6:	0148      	lsls	r0, r1, #5
 80159e8:	6979      	ldr	r1, [r7, #20]
 80159ea:	4401      	add	r1, r0
 80159ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80159f0:	4313      	orrs	r3, r2
 80159f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80159f4:	693b      	ldr	r3, [r7, #16]
 80159f6:	015a      	lsls	r2, r3, #5
 80159f8:	697b      	ldr	r3, [r7, #20]
 80159fa:	4413      	add	r3, r2
 80159fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a00:	691b      	ldr	r3, [r3, #16]
 8015a02:	693a      	ldr	r2, [r7, #16]
 8015a04:	0151      	lsls	r1, r2, #5
 8015a06:	697a      	ldr	r2, [r7, #20]
 8015a08:	440a      	add	r2, r1
 8015a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015a0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015a12:	6113      	str	r3, [r2, #16]
 8015a14:	e037      	b.n	8015a86 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8015a16:	683b      	ldr	r3, [r7, #0]
 8015a18:	699a      	ldr	r2, [r3, #24]
 8015a1a:	683b      	ldr	r3, [r7, #0]
 8015a1c:	68db      	ldr	r3, [r3, #12]
 8015a1e:	4413      	add	r3, r2
 8015a20:	1e5a      	subs	r2, r3, #1
 8015a22:	683b      	ldr	r3, [r7, #0]
 8015a24:	68db      	ldr	r3, [r3, #12]
 8015a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8015a2a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	68db      	ldr	r3, [r3, #12]
 8015a30:	89fa      	ldrh	r2, [r7, #14]
 8015a32:	fb03 f202 	mul.w	r2, r3, r2
 8015a36:	683b      	ldr	r3, [r7, #0]
 8015a38:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8015a3a:	693b      	ldr	r3, [r7, #16]
 8015a3c:	015a      	lsls	r2, r3, #5
 8015a3e:	697b      	ldr	r3, [r7, #20]
 8015a40:	4413      	add	r3, r2
 8015a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a46:	691a      	ldr	r2, [r3, #16]
 8015a48:	89fb      	ldrh	r3, [r7, #14]
 8015a4a:	04d9      	lsls	r1, r3, #19
 8015a4c:	4b1c      	ldr	r3, [pc, #112]	; (8015ac0 <USB_EPStartXfer+0x370>)
 8015a4e:	400b      	ands	r3, r1
 8015a50:	6939      	ldr	r1, [r7, #16]
 8015a52:	0148      	lsls	r0, r1, #5
 8015a54:	6979      	ldr	r1, [r7, #20]
 8015a56:	4401      	add	r1, r0
 8015a58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015a5c:	4313      	orrs	r3, r2
 8015a5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8015a60:	693b      	ldr	r3, [r7, #16]
 8015a62:	015a      	lsls	r2, r3, #5
 8015a64:	697b      	ldr	r3, [r7, #20]
 8015a66:	4413      	add	r3, r2
 8015a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a6c:	691a      	ldr	r2, [r3, #16]
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	69db      	ldr	r3, [r3, #28]
 8015a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015a76:	6939      	ldr	r1, [r7, #16]
 8015a78:	0148      	lsls	r0, r1, #5
 8015a7a:	6979      	ldr	r1, [r7, #20]
 8015a7c:	4401      	add	r1, r0
 8015a7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015a82:	4313      	orrs	r3, r2
 8015a84:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8015a86:	683b      	ldr	r3, [r7, #0]
 8015a88:	791b      	ldrb	r3, [r3, #4]
 8015a8a:	2b01      	cmp	r3, #1
 8015a8c:	d12a      	bne.n	8015ae4 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015a8e:	697b      	ldr	r3, [r7, #20]
 8015a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015a94:	689b      	ldr	r3, [r3, #8]
 8015a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d112      	bne.n	8015ac4 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8015a9e:	693b      	ldr	r3, [r7, #16]
 8015aa0:	015a      	lsls	r2, r3, #5
 8015aa2:	697b      	ldr	r3, [r7, #20]
 8015aa4:	4413      	add	r3, r2
 8015aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	693a      	ldr	r2, [r7, #16]
 8015aae:	0151      	lsls	r1, r2, #5
 8015ab0:	697a      	ldr	r2, [r7, #20]
 8015ab2:	440a      	add	r2, r1
 8015ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015ab8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015abc:	6013      	str	r3, [r2, #0]
 8015abe:	e011      	b.n	8015ae4 <USB_EPStartXfer+0x394>
 8015ac0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8015ac4:	693b      	ldr	r3, [r7, #16]
 8015ac6:	015a      	lsls	r2, r3, #5
 8015ac8:	697b      	ldr	r3, [r7, #20]
 8015aca:	4413      	add	r3, r2
 8015acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	693a      	ldr	r2, [r7, #16]
 8015ad4:	0151      	lsls	r1, r2, #5
 8015ad6:	697a      	ldr	r2, [r7, #20]
 8015ad8:	440a      	add	r2, r1
 8015ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015ae2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015ae4:	693b      	ldr	r3, [r7, #16]
 8015ae6:	015a      	lsls	r2, r3, #5
 8015ae8:	697b      	ldr	r3, [r7, #20]
 8015aea:	4413      	add	r3, r2
 8015aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	693a      	ldr	r2, [r7, #16]
 8015af4:	0151      	lsls	r1, r2, #5
 8015af6:	697a      	ldr	r2, [r7, #20]
 8015af8:	440a      	add	r2, r1
 8015afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015afe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015b02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015b04:	2300      	movs	r3, #0
}
 8015b06:	4618      	mov	r0, r3
 8015b08:	3718      	adds	r7, #24
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}
 8015b0e:	bf00      	nop

08015b10 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015b10:	b480      	push	{r7}
 8015b12:	b085      	sub	sp, #20
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
 8015b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015b1e:	683b      	ldr	r3, [r7, #0]
 8015b20:	781b      	ldrb	r3, [r3, #0]
 8015b22:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015b24:	683b      	ldr	r3, [r7, #0]
 8015b26:	785b      	ldrb	r3, [r3, #1]
 8015b28:	2b01      	cmp	r3, #1
 8015b2a:	f040 80ab 	bne.w	8015c84 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	699b      	ldr	r3, [r3, #24]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d132      	bne.n	8015b9c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015b36:	68bb      	ldr	r3, [r7, #8]
 8015b38:	015a      	lsls	r2, r3, #5
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	4413      	add	r3, r2
 8015b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b42:	691b      	ldr	r3, [r3, #16]
 8015b44:	68ba      	ldr	r2, [r7, #8]
 8015b46:	0151      	lsls	r1, r2, #5
 8015b48:	68fa      	ldr	r2, [r7, #12]
 8015b4a:	440a      	add	r2, r1
 8015b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015b50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015b54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015b58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	015a      	lsls	r2, r3, #5
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	4413      	add	r3, r2
 8015b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b66:	691b      	ldr	r3, [r3, #16]
 8015b68:	68ba      	ldr	r2, [r7, #8]
 8015b6a:	0151      	lsls	r1, r2, #5
 8015b6c:	68fa      	ldr	r2, [r7, #12]
 8015b6e:	440a      	add	r2, r1
 8015b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015b74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015b78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015b7a:	68bb      	ldr	r3, [r7, #8]
 8015b7c:	015a      	lsls	r2, r3, #5
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	4413      	add	r3, r2
 8015b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b86:	691b      	ldr	r3, [r3, #16]
 8015b88:	68ba      	ldr	r2, [r7, #8]
 8015b8a:	0151      	lsls	r1, r2, #5
 8015b8c:	68fa      	ldr	r2, [r7, #12]
 8015b8e:	440a      	add	r2, r1
 8015b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015b94:	0cdb      	lsrs	r3, r3, #19
 8015b96:	04db      	lsls	r3, r3, #19
 8015b98:	6113      	str	r3, [r2, #16]
 8015b9a:	e04e      	b.n	8015c3a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015b9c:	68bb      	ldr	r3, [r7, #8]
 8015b9e:	015a      	lsls	r2, r3, #5
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	4413      	add	r3, r2
 8015ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015ba8:	691b      	ldr	r3, [r3, #16]
 8015baa:	68ba      	ldr	r2, [r7, #8]
 8015bac:	0151      	lsls	r1, r2, #5
 8015bae:	68fa      	ldr	r2, [r7, #12]
 8015bb0:	440a      	add	r2, r1
 8015bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015bb6:	0cdb      	lsrs	r3, r3, #19
 8015bb8:	04db      	lsls	r3, r3, #19
 8015bba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015bbc:	68bb      	ldr	r3, [r7, #8]
 8015bbe:	015a      	lsls	r2, r3, #5
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	4413      	add	r3, r2
 8015bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015bc8:	691b      	ldr	r3, [r3, #16]
 8015bca:	68ba      	ldr	r2, [r7, #8]
 8015bcc:	0151      	lsls	r1, r2, #5
 8015bce:	68fa      	ldr	r2, [r7, #12]
 8015bd0:	440a      	add	r2, r1
 8015bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015bd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015bda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015bde:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8015be0:	683b      	ldr	r3, [r7, #0]
 8015be2:	699a      	ldr	r2, [r3, #24]
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	68db      	ldr	r3, [r3, #12]
 8015be8:	429a      	cmp	r2, r3
 8015bea:	d903      	bls.n	8015bf4 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8015bec:	683b      	ldr	r3, [r7, #0]
 8015bee:	68da      	ldr	r2, [r3, #12]
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015bf4:	68bb      	ldr	r3, [r7, #8]
 8015bf6:	015a      	lsls	r2, r3, #5
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	4413      	add	r3, r2
 8015bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c00:	691b      	ldr	r3, [r3, #16]
 8015c02:	68ba      	ldr	r2, [r7, #8]
 8015c04:	0151      	lsls	r1, r2, #5
 8015c06:	68fa      	ldr	r2, [r7, #12]
 8015c08:	440a      	add	r2, r1
 8015c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015c12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015c14:	68bb      	ldr	r3, [r7, #8]
 8015c16:	015a      	lsls	r2, r3, #5
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	4413      	add	r3, r2
 8015c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c20:	691a      	ldr	r2, [r3, #16]
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	699b      	ldr	r3, [r3, #24]
 8015c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015c2a:	68b9      	ldr	r1, [r7, #8]
 8015c2c:	0148      	lsls	r0, r1, #5
 8015c2e:	68f9      	ldr	r1, [r7, #12]
 8015c30:	4401      	add	r1, r0
 8015c32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8015c36:	4313      	orrs	r3, r2
 8015c38:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015c3a:	68bb      	ldr	r3, [r7, #8]
 8015c3c:	015a      	lsls	r2, r3, #5
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	4413      	add	r3, r2
 8015c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	68ba      	ldr	r2, [r7, #8]
 8015c4a:	0151      	lsls	r1, r2, #5
 8015c4c:	68fa      	ldr	r2, [r7, #12]
 8015c4e:	440a      	add	r2, r1
 8015c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015c58:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	699b      	ldr	r3, [r3, #24]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d071      	beq.n	8015d46 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015c6a:	683b      	ldr	r3, [r7, #0]
 8015c6c:	781b      	ldrb	r3, [r3, #0]
 8015c6e:	f003 030f 	and.w	r3, r3, #15
 8015c72:	2101      	movs	r1, #1
 8015c74:	fa01 f303 	lsl.w	r3, r1, r3
 8015c78:	68f9      	ldr	r1, [r7, #12]
 8015c7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015c7e:	4313      	orrs	r3, r2
 8015c80:	634b      	str	r3, [r1, #52]	; 0x34
 8015c82:	e060      	b.n	8015d46 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015c84:	68bb      	ldr	r3, [r7, #8]
 8015c86:	015a      	lsls	r2, r3, #5
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	4413      	add	r3, r2
 8015c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015c90:	691b      	ldr	r3, [r3, #16]
 8015c92:	68ba      	ldr	r2, [r7, #8]
 8015c94:	0151      	lsls	r1, r2, #5
 8015c96:	68fa      	ldr	r2, [r7, #12]
 8015c98:	440a      	add	r2, r1
 8015c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015c9e:	0cdb      	lsrs	r3, r3, #19
 8015ca0:	04db      	lsls	r3, r3, #19
 8015ca2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8015ca4:	68bb      	ldr	r3, [r7, #8]
 8015ca6:	015a      	lsls	r2, r3, #5
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	4413      	add	r3, r2
 8015cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015cb0:	691b      	ldr	r3, [r3, #16]
 8015cb2:	68ba      	ldr	r2, [r7, #8]
 8015cb4:	0151      	lsls	r1, r2, #5
 8015cb6:	68fa      	ldr	r2, [r7, #12]
 8015cb8:	440a      	add	r2, r1
 8015cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015cbe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015cc2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015cc6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8015cc8:	683b      	ldr	r3, [r7, #0]
 8015cca:	699b      	ldr	r3, [r3, #24]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d003      	beq.n	8015cd8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8015cd0:	683b      	ldr	r3, [r7, #0]
 8015cd2:	68da      	ldr	r2, [r3, #12]
 8015cd4:	683b      	ldr	r3, [r7, #0]
 8015cd6:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	68da      	ldr	r2, [r3, #12]
 8015cdc:	683b      	ldr	r3, [r7, #0]
 8015cde:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	015a      	lsls	r2, r3, #5
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	4413      	add	r3, r2
 8015ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015cec:	691b      	ldr	r3, [r3, #16]
 8015cee:	68ba      	ldr	r2, [r7, #8]
 8015cf0:	0151      	lsls	r1, r2, #5
 8015cf2:	68fa      	ldr	r2, [r7, #12]
 8015cf4:	440a      	add	r2, r1
 8015cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015cfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015cfe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8015d00:	68bb      	ldr	r3, [r7, #8]
 8015d02:	015a      	lsls	r2, r3, #5
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	4413      	add	r3, r2
 8015d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015d0c:	691a      	ldr	r2, [r3, #16]
 8015d0e:	683b      	ldr	r3, [r7, #0]
 8015d10:	69db      	ldr	r3, [r3, #28]
 8015d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015d16:	68b9      	ldr	r1, [r7, #8]
 8015d18:	0148      	lsls	r0, r1, #5
 8015d1a:	68f9      	ldr	r1, [r7, #12]
 8015d1c:	4401      	add	r1, r0
 8015d1e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015d22:	4313      	orrs	r3, r2
 8015d24:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015d26:	68bb      	ldr	r3, [r7, #8]
 8015d28:	015a      	lsls	r2, r3, #5
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	4413      	add	r3, r2
 8015d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	68ba      	ldr	r2, [r7, #8]
 8015d36:	0151      	lsls	r1, r2, #5
 8015d38:	68fa      	ldr	r2, [r7, #12]
 8015d3a:	440a      	add	r2, r1
 8015d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015d40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015d44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015d46:	2300      	movs	r3, #0
}
 8015d48:	4618      	mov	r0, r3
 8015d4a:	3714      	adds	r7, #20
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d52:	4770      	bx	lr

08015d54 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015d54:	b480      	push	{r7}
 8015d56:	b087      	sub	sp, #28
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
 8015d5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8015d5e:	2300      	movs	r3, #0
 8015d60:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8015d62:	2300      	movs	r3, #0
 8015d64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015d6a:	683b      	ldr	r3, [r7, #0]
 8015d6c:	785b      	ldrb	r3, [r3, #1]
 8015d6e:	2b01      	cmp	r3, #1
 8015d70:	d14a      	bne.n	8015e08 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015d72:	683b      	ldr	r3, [r7, #0]
 8015d74:	781b      	ldrb	r3, [r3, #0]
 8015d76:	015a      	lsls	r2, r3, #5
 8015d78:	693b      	ldr	r3, [r7, #16]
 8015d7a:	4413      	add	r3, r2
 8015d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015d86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015d8a:	f040 8086 	bne.w	8015e9a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8015d8e:	683b      	ldr	r3, [r7, #0]
 8015d90:	781b      	ldrb	r3, [r3, #0]
 8015d92:	015a      	lsls	r2, r3, #5
 8015d94:	693b      	ldr	r3, [r7, #16]
 8015d96:	4413      	add	r3, r2
 8015d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	683a      	ldr	r2, [r7, #0]
 8015da0:	7812      	ldrb	r2, [r2, #0]
 8015da2:	0151      	lsls	r1, r2, #5
 8015da4:	693a      	ldr	r2, [r7, #16]
 8015da6:	440a      	add	r2, r1
 8015da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015dac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015db0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8015db2:	683b      	ldr	r3, [r7, #0]
 8015db4:	781b      	ldrb	r3, [r3, #0]
 8015db6:	015a      	lsls	r2, r3, #5
 8015db8:	693b      	ldr	r3, [r7, #16]
 8015dba:	4413      	add	r3, r2
 8015dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	683a      	ldr	r2, [r7, #0]
 8015dc4:	7812      	ldrb	r2, [r2, #0]
 8015dc6:	0151      	lsls	r1, r2, #5
 8015dc8:	693a      	ldr	r2, [r7, #16]
 8015dca:	440a      	add	r2, r1
 8015dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015dd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015dd4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	3301      	adds	r3, #1
 8015dda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	f242 7210 	movw	r2, #10000	; 0x2710
 8015de2:	4293      	cmp	r3, r2
 8015de4:	d902      	bls.n	8015dec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8015de6:	2301      	movs	r3, #1
 8015de8:	75fb      	strb	r3, [r7, #23]
          break;
 8015dea:	e056      	b.n	8015e9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8015dec:	683b      	ldr	r3, [r7, #0]
 8015dee:	781b      	ldrb	r3, [r3, #0]
 8015df0:	015a      	lsls	r2, r3, #5
 8015df2:	693b      	ldr	r3, [r7, #16]
 8015df4:	4413      	add	r3, r2
 8015df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015e00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015e04:	d0e7      	beq.n	8015dd6 <USB_EPStopXfer+0x82>
 8015e06:	e048      	b.n	8015e9a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	781b      	ldrb	r3, [r3, #0]
 8015e0c:	015a      	lsls	r2, r3, #5
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	4413      	add	r3, r2
 8015e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015e20:	d13b      	bne.n	8015e9a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8015e22:	683b      	ldr	r3, [r7, #0]
 8015e24:	781b      	ldrb	r3, [r3, #0]
 8015e26:	015a      	lsls	r2, r3, #5
 8015e28:	693b      	ldr	r3, [r7, #16]
 8015e2a:	4413      	add	r3, r2
 8015e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	683a      	ldr	r2, [r7, #0]
 8015e34:	7812      	ldrb	r2, [r2, #0]
 8015e36:	0151      	lsls	r1, r2, #5
 8015e38:	693a      	ldr	r2, [r7, #16]
 8015e3a:	440a      	add	r2, r1
 8015e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015e40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015e44:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8015e46:	683b      	ldr	r3, [r7, #0]
 8015e48:	781b      	ldrb	r3, [r3, #0]
 8015e4a:	015a      	lsls	r2, r3, #5
 8015e4c:	693b      	ldr	r3, [r7, #16]
 8015e4e:	4413      	add	r3, r2
 8015e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	683a      	ldr	r2, [r7, #0]
 8015e58:	7812      	ldrb	r2, [r2, #0]
 8015e5a:	0151      	lsls	r1, r2, #5
 8015e5c:	693a      	ldr	r2, [r7, #16]
 8015e5e:	440a      	add	r2, r1
 8015e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015e64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015e68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	3301      	adds	r3, #1
 8015e6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	f242 7210 	movw	r2, #10000	; 0x2710
 8015e76:	4293      	cmp	r3, r2
 8015e78:	d902      	bls.n	8015e80 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8015e7a:	2301      	movs	r3, #1
 8015e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8015e7e:	e00c      	b.n	8015e9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8015e80:	683b      	ldr	r3, [r7, #0]
 8015e82:	781b      	ldrb	r3, [r3, #0]
 8015e84:	015a      	lsls	r2, r3, #5
 8015e86:	693b      	ldr	r3, [r7, #16]
 8015e88:	4413      	add	r3, r2
 8015e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015e98:	d0e7      	beq.n	8015e6a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8015e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	371c      	adds	r7, #28
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea6:	4770      	bx	lr

08015ea8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8015ea8:	b480      	push	{r7}
 8015eaa:	b089      	sub	sp, #36	; 0x24
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	60f8      	str	r0, [r7, #12]
 8015eb0:	60b9      	str	r1, [r7, #8]
 8015eb2:	4611      	mov	r1, r2
 8015eb4:	461a      	mov	r2, r3
 8015eb6:	460b      	mov	r3, r1
 8015eb8:	71fb      	strb	r3, [r7, #7]
 8015eba:	4613      	mov	r3, r2
 8015ebc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8015ec2:	68bb      	ldr	r3, [r7, #8]
 8015ec4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8015ec6:	88bb      	ldrh	r3, [r7, #4]
 8015ec8:	3303      	adds	r3, #3
 8015eca:	089b      	lsrs	r3, r3, #2
 8015ecc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8015ece:	2300      	movs	r3, #0
 8015ed0:	61bb      	str	r3, [r7, #24]
 8015ed2:	e018      	b.n	8015f06 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015ed4:	79fb      	ldrb	r3, [r7, #7]
 8015ed6:	031a      	lsls	r2, r3, #12
 8015ed8:	697b      	ldr	r3, [r7, #20]
 8015eda:	4413      	add	r3, r2
 8015edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ee0:	461a      	mov	r2, r3
 8015ee2:	69fb      	ldr	r3, [r7, #28]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	6013      	str	r3, [r2, #0]
    pSrc++;
 8015ee8:	69fb      	ldr	r3, [r7, #28]
 8015eea:	3301      	adds	r3, #1
 8015eec:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8015eee:	69fb      	ldr	r3, [r7, #28]
 8015ef0:	3301      	adds	r3, #1
 8015ef2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8015ef4:	69fb      	ldr	r3, [r7, #28]
 8015ef6:	3301      	adds	r3, #1
 8015ef8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8015efa:	69fb      	ldr	r3, [r7, #28]
 8015efc:	3301      	adds	r3, #1
 8015efe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8015f00:	69bb      	ldr	r3, [r7, #24]
 8015f02:	3301      	adds	r3, #1
 8015f04:	61bb      	str	r3, [r7, #24]
 8015f06:	69ba      	ldr	r2, [r7, #24]
 8015f08:	693b      	ldr	r3, [r7, #16]
 8015f0a:	429a      	cmp	r2, r3
 8015f0c:	d3e2      	bcc.n	8015ed4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8015f0e:	2300      	movs	r3, #0
}
 8015f10:	4618      	mov	r0, r3
 8015f12:	3724      	adds	r7, #36	; 0x24
 8015f14:	46bd      	mov	sp, r7
 8015f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1a:	4770      	bx	lr

08015f1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015f1c:	b480      	push	{r7}
 8015f1e:	b08b      	sub	sp, #44	; 0x2c
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	60f8      	str	r0, [r7, #12]
 8015f24:	60b9      	str	r1, [r7, #8]
 8015f26:	4613      	mov	r3, r2
 8015f28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015f2e:	68bb      	ldr	r3, [r7, #8]
 8015f30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8015f32:	88fb      	ldrh	r3, [r7, #6]
 8015f34:	089b      	lsrs	r3, r3, #2
 8015f36:	b29b      	uxth	r3, r3
 8015f38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015f3a:	88fb      	ldrh	r3, [r7, #6]
 8015f3c:	f003 0303 	and.w	r3, r3, #3
 8015f40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8015f42:	2300      	movs	r3, #0
 8015f44:	623b      	str	r3, [r7, #32]
 8015f46:	e014      	b.n	8015f72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015f48:	69bb      	ldr	r3, [r7, #24]
 8015f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015f4e:	681a      	ldr	r2, [r3, #0]
 8015f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f52:	601a      	str	r2, [r3, #0]
    pDest++;
 8015f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f56:	3301      	adds	r3, #1
 8015f58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5c:	3301      	adds	r3, #1
 8015f5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f62:	3301      	adds	r3, #1
 8015f64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f68:	3301      	adds	r3, #1
 8015f6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8015f6c:	6a3b      	ldr	r3, [r7, #32]
 8015f6e:	3301      	adds	r3, #1
 8015f70:	623b      	str	r3, [r7, #32]
 8015f72:	6a3a      	ldr	r2, [r7, #32]
 8015f74:	697b      	ldr	r3, [r7, #20]
 8015f76:	429a      	cmp	r2, r3
 8015f78:	d3e6      	bcc.n	8015f48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015f7a:	8bfb      	ldrh	r3, [r7, #30]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d01e      	beq.n	8015fbe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015f80:	2300      	movs	r3, #0
 8015f82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8015f84:	69bb      	ldr	r3, [r7, #24]
 8015f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015f8a:	461a      	mov	r2, r3
 8015f8c:	f107 0310 	add.w	r3, r7, #16
 8015f90:	6812      	ldr	r2, [r2, #0]
 8015f92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8015f94:	693a      	ldr	r2, [r7, #16]
 8015f96:	6a3b      	ldr	r3, [r7, #32]
 8015f98:	b2db      	uxtb	r3, r3
 8015f9a:	00db      	lsls	r3, r3, #3
 8015f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8015fa0:	b2da      	uxtb	r2, r3
 8015fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fa4:	701a      	strb	r2, [r3, #0]
      i++;
 8015fa6:	6a3b      	ldr	r3, [r7, #32]
 8015fa8:	3301      	adds	r3, #1
 8015faa:	623b      	str	r3, [r7, #32]
      pDest++;
 8015fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fae:	3301      	adds	r3, #1
 8015fb0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8015fb2:	8bfb      	ldrh	r3, [r7, #30]
 8015fb4:	3b01      	subs	r3, #1
 8015fb6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015fb8:	8bfb      	ldrh	r3, [r7, #30]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d1ea      	bne.n	8015f94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8015fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	372c      	adds	r7, #44	; 0x2c
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fca:	4770      	bx	lr

08015fcc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015fcc:	b480      	push	{r7}
 8015fce:	b085      	sub	sp, #20
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
 8015fd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015fda:	683b      	ldr	r3, [r7, #0]
 8015fdc:	781b      	ldrb	r3, [r3, #0]
 8015fde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015fe0:	683b      	ldr	r3, [r7, #0]
 8015fe2:	785b      	ldrb	r3, [r3, #1]
 8015fe4:	2b01      	cmp	r3, #1
 8015fe6:	d12c      	bne.n	8016042 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015fe8:	68bb      	ldr	r3, [r7, #8]
 8015fea:	015a      	lsls	r2, r3, #5
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	4413      	add	r3, r2
 8015ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	db12      	blt.n	8016020 <USB_EPSetStall+0x54>
 8015ffa:	68bb      	ldr	r3, [r7, #8]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d00f      	beq.n	8016020 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8016000:	68bb      	ldr	r3, [r7, #8]
 8016002:	015a      	lsls	r2, r3, #5
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	4413      	add	r3, r2
 8016008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	68ba      	ldr	r2, [r7, #8]
 8016010:	0151      	lsls	r1, r2, #5
 8016012:	68fa      	ldr	r2, [r7, #12]
 8016014:	440a      	add	r2, r1
 8016016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801601a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801601e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8016020:	68bb      	ldr	r3, [r7, #8]
 8016022:	015a      	lsls	r2, r3, #5
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	4413      	add	r3, r2
 8016028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	68ba      	ldr	r2, [r7, #8]
 8016030:	0151      	lsls	r1, r2, #5
 8016032:	68fa      	ldr	r2, [r7, #12]
 8016034:	440a      	add	r2, r1
 8016036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801603a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801603e:	6013      	str	r3, [r2, #0]
 8016040:	e02b      	b.n	801609a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016042:	68bb      	ldr	r3, [r7, #8]
 8016044:	015a      	lsls	r2, r3, #5
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	4413      	add	r3, r2
 801604a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	2b00      	cmp	r3, #0
 8016052:	db12      	blt.n	801607a <USB_EPSetStall+0xae>
 8016054:	68bb      	ldr	r3, [r7, #8]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d00f      	beq.n	801607a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	015a      	lsls	r2, r3, #5
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	4413      	add	r3, r2
 8016062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	68ba      	ldr	r2, [r7, #8]
 801606a:	0151      	lsls	r1, r2, #5
 801606c:	68fa      	ldr	r2, [r7, #12]
 801606e:	440a      	add	r2, r1
 8016070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016074:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8016078:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	015a      	lsls	r2, r3, #5
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	4413      	add	r3, r2
 8016082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	68ba      	ldr	r2, [r7, #8]
 801608a:	0151      	lsls	r1, r2, #5
 801608c:	68fa      	ldr	r2, [r7, #12]
 801608e:	440a      	add	r2, r1
 8016090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016094:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016098:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801609a:	2300      	movs	r3, #0
}
 801609c:	4618      	mov	r0, r3
 801609e:	3714      	adds	r7, #20
 80160a0:	46bd      	mov	sp, r7
 80160a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a6:	4770      	bx	lr

080160a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80160a8:	b480      	push	{r7}
 80160aa:	b085      	sub	sp, #20
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
 80160b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80160b6:	683b      	ldr	r3, [r7, #0]
 80160b8:	781b      	ldrb	r3, [r3, #0]
 80160ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80160bc:	683b      	ldr	r3, [r7, #0]
 80160be:	785b      	ldrb	r3, [r3, #1]
 80160c0:	2b01      	cmp	r3, #1
 80160c2:	d128      	bne.n	8016116 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80160c4:	68bb      	ldr	r3, [r7, #8]
 80160c6:	015a      	lsls	r2, r3, #5
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	4413      	add	r3, r2
 80160cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	68ba      	ldr	r2, [r7, #8]
 80160d4:	0151      	lsls	r1, r2, #5
 80160d6:	68fa      	ldr	r2, [r7, #12]
 80160d8:	440a      	add	r2, r1
 80160da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80160de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80160e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80160e4:	683b      	ldr	r3, [r7, #0]
 80160e6:	791b      	ldrb	r3, [r3, #4]
 80160e8:	2b03      	cmp	r3, #3
 80160ea:	d003      	beq.n	80160f4 <USB_EPClearStall+0x4c>
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	791b      	ldrb	r3, [r3, #4]
 80160f0:	2b02      	cmp	r3, #2
 80160f2:	d138      	bne.n	8016166 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80160f4:	68bb      	ldr	r3, [r7, #8]
 80160f6:	015a      	lsls	r2, r3, #5
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	4413      	add	r3, r2
 80160fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	68ba      	ldr	r2, [r7, #8]
 8016104:	0151      	lsls	r1, r2, #5
 8016106:	68fa      	ldr	r2, [r7, #12]
 8016108:	440a      	add	r2, r1
 801610a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801610e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016112:	6013      	str	r3, [r2, #0]
 8016114:	e027      	b.n	8016166 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8016116:	68bb      	ldr	r3, [r7, #8]
 8016118:	015a      	lsls	r2, r3, #5
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	4413      	add	r3, r2
 801611e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	68ba      	ldr	r2, [r7, #8]
 8016126:	0151      	lsls	r1, r2, #5
 8016128:	68fa      	ldr	r2, [r7, #12]
 801612a:	440a      	add	r2, r1
 801612c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016130:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8016134:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	791b      	ldrb	r3, [r3, #4]
 801613a:	2b03      	cmp	r3, #3
 801613c:	d003      	beq.n	8016146 <USB_EPClearStall+0x9e>
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	791b      	ldrb	r3, [r3, #4]
 8016142:	2b02      	cmp	r3, #2
 8016144:	d10f      	bne.n	8016166 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016146:	68bb      	ldr	r3, [r7, #8]
 8016148:	015a      	lsls	r2, r3, #5
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	4413      	add	r3, r2
 801614e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	68ba      	ldr	r2, [r7, #8]
 8016156:	0151      	lsls	r1, r2, #5
 8016158:	68fa      	ldr	r2, [r7, #12]
 801615a:	440a      	add	r2, r1
 801615c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016164:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8016166:	2300      	movs	r3, #0
}
 8016168:	4618      	mov	r0, r3
 801616a:	3714      	adds	r7, #20
 801616c:	46bd      	mov	sp, r7
 801616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016172:	4770      	bx	lr

08016174 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8016174:	b480      	push	{r7}
 8016176:	b085      	sub	sp, #20
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
 801617c:	460b      	mov	r3, r1
 801617e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	68fa      	ldr	r2, [r7, #12]
 801618e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016192:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8016196:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801619e:	681a      	ldr	r2, [r3, #0]
 80161a0:	78fb      	ldrb	r3, [r7, #3]
 80161a2:	011b      	lsls	r3, r3, #4
 80161a4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80161a8:	68f9      	ldr	r1, [r7, #12]
 80161aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80161ae:	4313      	orrs	r3, r2
 80161b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80161b2:	2300      	movs	r3, #0
}
 80161b4:	4618      	mov	r0, r3
 80161b6:	3714      	adds	r7, #20
 80161b8:	46bd      	mov	sp, r7
 80161ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161be:	4770      	bx	lr

080161c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80161c0:	b480      	push	{r7}
 80161c2:	b085      	sub	sp, #20
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	68fa      	ldr	r2, [r7, #12]
 80161d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80161da:	f023 0303 	bic.w	r3, r3, #3
 80161de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80161e6:	685b      	ldr	r3, [r3, #4]
 80161e8:	68fa      	ldr	r2, [r7, #12]
 80161ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80161ee:	f023 0302 	bic.w	r3, r3, #2
 80161f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80161f4:	2300      	movs	r3, #0
}
 80161f6:	4618      	mov	r0, r3
 80161f8:	3714      	adds	r7, #20
 80161fa:	46bd      	mov	sp, r7
 80161fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016200:	4770      	bx	lr

08016202 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016202:	b480      	push	{r7}
 8016204:	b085      	sub	sp, #20
 8016206:	af00      	add	r7, sp, #0
 8016208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	68fa      	ldr	r2, [r7, #12]
 8016218:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801621c:	f023 0303 	bic.w	r3, r3, #3
 8016220:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016228:	685b      	ldr	r3, [r3, #4]
 801622a:	68fa      	ldr	r2, [r7, #12]
 801622c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016230:	f043 0302 	orr.w	r3, r3, #2
 8016234:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016236:	2300      	movs	r3, #0
}
 8016238:	4618      	mov	r0, r3
 801623a:	3714      	adds	r7, #20
 801623c:	46bd      	mov	sp, r7
 801623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016242:	4770      	bx	lr

08016244 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8016244:	b480      	push	{r7}
 8016246:	b085      	sub	sp, #20
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	695b      	ldr	r3, [r3, #20]
 8016250:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	699b      	ldr	r3, [r3, #24]
 8016256:	68fa      	ldr	r2, [r7, #12]
 8016258:	4013      	ands	r3, r2
 801625a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801625c:	68fb      	ldr	r3, [r7, #12]
}
 801625e:	4618      	mov	r0, r3
 8016260:	3714      	adds	r7, #20
 8016262:	46bd      	mov	sp, r7
 8016264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016268:	4770      	bx	lr

0801626a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801626a:	b480      	push	{r7}
 801626c:	b085      	sub	sp, #20
 801626e:	af00      	add	r7, sp, #0
 8016270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801627c:	699b      	ldr	r3, [r3, #24]
 801627e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016286:	69db      	ldr	r3, [r3, #28]
 8016288:	68ba      	ldr	r2, [r7, #8]
 801628a:	4013      	ands	r3, r2
 801628c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801628e:	68bb      	ldr	r3, [r7, #8]
 8016290:	0c1b      	lsrs	r3, r3, #16
}
 8016292:	4618      	mov	r0, r3
 8016294:	3714      	adds	r7, #20
 8016296:	46bd      	mov	sp, r7
 8016298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629c:	4770      	bx	lr

0801629e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801629e:	b480      	push	{r7}
 80162a0:	b085      	sub	sp, #20
 80162a2:	af00      	add	r7, sp, #0
 80162a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80162b0:	699b      	ldr	r3, [r3, #24]
 80162b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80162ba:	69db      	ldr	r3, [r3, #28]
 80162bc:	68ba      	ldr	r2, [r7, #8]
 80162be:	4013      	ands	r3, r2
 80162c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80162c2:	68bb      	ldr	r3, [r7, #8]
 80162c4:	b29b      	uxth	r3, r3
}
 80162c6:	4618      	mov	r0, r3
 80162c8:	3714      	adds	r7, #20
 80162ca:	46bd      	mov	sp, r7
 80162cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d0:	4770      	bx	lr

080162d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80162d2:	b480      	push	{r7}
 80162d4:	b085      	sub	sp, #20
 80162d6:	af00      	add	r7, sp, #0
 80162d8:	6078      	str	r0, [r7, #4]
 80162da:	460b      	mov	r3, r1
 80162dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80162e2:	78fb      	ldrb	r3, [r7, #3]
 80162e4:	015a      	lsls	r2, r3, #5
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	4413      	add	r3, r2
 80162ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80162ee:	689b      	ldr	r3, [r3, #8]
 80162f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80162f8:	695b      	ldr	r3, [r3, #20]
 80162fa:	68ba      	ldr	r2, [r7, #8]
 80162fc:	4013      	ands	r3, r2
 80162fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016300:	68bb      	ldr	r3, [r7, #8]
}
 8016302:	4618      	mov	r0, r3
 8016304:	3714      	adds	r7, #20
 8016306:	46bd      	mov	sp, r7
 8016308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630c:	4770      	bx	lr

0801630e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801630e:	b480      	push	{r7}
 8016310:	b087      	sub	sp, #28
 8016312:	af00      	add	r7, sp, #0
 8016314:	6078      	str	r0, [r7, #4]
 8016316:	460b      	mov	r3, r1
 8016318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801631e:	697b      	ldr	r3, [r7, #20]
 8016320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016324:	691b      	ldr	r3, [r3, #16]
 8016326:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8016328:	697b      	ldr	r3, [r7, #20]
 801632a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801632e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016330:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8016332:	78fb      	ldrb	r3, [r7, #3]
 8016334:	f003 030f 	and.w	r3, r3, #15
 8016338:	68fa      	ldr	r2, [r7, #12]
 801633a:	fa22 f303 	lsr.w	r3, r2, r3
 801633e:	01db      	lsls	r3, r3, #7
 8016340:	b2db      	uxtb	r3, r3
 8016342:	693a      	ldr	r2, [r7, #16]
 8016344:	4313      	orrs	r3, r2
 8016346:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8016348:	78fb      	ldrb	r3, [r7, #3]
 801634a:	015a      	lsls	r2, r3, #5
 801634c:	697b      	ldr	r3, [r7, #20]
 801634e:	4413      	add	r3, r2
 8016350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016354:	689b      	ldr	r3, [r3, #8]
 8016356:	693a      	ldr	r2, [r7, #16]
 8016358:	4013      	ands	r3, r2
 801635a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801635c:	68bb      	ldr	r3, [r7, #8]
}
 801635e:	4618      	mov	r0, r3
 8016360:	371c      	adds	r7, #28
 8016362:	46bd      	mov	sp, r7
 8016364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016368:	4770      	bx	lr

0801636a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801636a:	b480      	push	{r7}
 801636c:	b083      	sub	sp, #12
 801636e:	af00      	add	r7, sp, #0
 8016370:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	695b      	ldr	r3, [r3, #20]
 8016376:	f003 0301 	and.w	r3, r3, #1
}
 801637a:	4618      	mov	r0, r3
 801637c:	370c      	adds	r7, #12
 801637e:	46bd      	mov	sp, r7
 8016380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016384:	4770      	bx	lr

08016386 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8016386:	b480      	push	{r7}
 8016388:	b085      	sub	sp, #20
 801638a:	af00      	add	r7, sp, #0
 801638c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	68fa      	ldr	r2, [r7, #12]
 801639c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80163a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80163a4:	f023 0307 	bic.w	r3, r3, #7
 80163a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80163b0:	685b      	ldr	r3, [r3, #4]
 80163b2:	68fa      	ldr	r2, [r7, #12]
 80163b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80163b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80163bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80163be:	2300      	movs	r3, #0
}
 80163c0:	4618      	mov	r0, r3
 80163c2:	3714      	adds	r7, #20
 80163c4:	46bd      	mov	sp, r7
 80163c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ca:	4770      	bx	lr

080163cc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80163cc:	b480      	push	{r7}
 80163ce:	b085      	sub	sp, #20
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
 80163d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	333c      	adds	r3, #60	; 0x3c
 80163de:	3304      	adds	r3, #4
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80163e4:	68bb      	ldr	r3, [r7, #8]
 80163e6:	4a1c      	ldr	r2, [pc, #112]	; (8016458 <USB_EP0_OutStart+0x8c>)
 80163e8:	4293      	cmp	r3, r2
 80163ea:	d90a      	bls.n	8016402 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80163f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80163fc:	d101      	bne.n	8016402 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80163fe:	2300      	movs	r3, #0
 8016400:	e024      	b.n	801644c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016408:	461a      	mov	r2, r3
 801640a:	2300      	movs	r3, #0
 801640c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016414:	691b      	ldr	r3, [r3, #16]
 8016416:	68fa      	ldr	r2, [r7, #12]
 8016418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801641c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016420:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016428:	691b      	ldr	r3, [r3, #16]
 801642a:	68fa      	ldr	r2, [r7, #12]
 801642c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016430:	f043 0318 	orr.w	r3, r3, #24
 8016434:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801643c:	691b      	ldr	r3, [r3, #16]
 801643e:	68fa      	ldr	r2, [r7, #12]
 8016440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016444:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8016448:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 801644a:	2300      	movs	r3, #0
}
 801644c:	4618      	mov	r0, r3
 801644e:	3714      	adds	r7, #20
 8016450:	46bd      	mov	sp, r7
 8016452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016456:	4770      	bx	lr
 8016458:	4f54300a 	.word	0x4f54300a

0801645c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801645c:	b480      	push	{r7}
 801645e:	b085      	sub	sp, #20
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016464:	2300      	movs	r3, #0
 8016466:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	3301      	adds	r3, #1
 801646c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	4a13      	ldr	r2, [pc, #76]	; (80164c0 <USB_CoreReset+0x64>)
 8016472:	4293      	cmp	r3, r2
 8016474:	d901      	bls.n	801647a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8016476:	2303      	movs	r3, #3
 8016478:	e01b      	b.n	80164b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	691b      	ldr	r3, [r3, #16]
 801647e:	2b00      	cmp	r3, #0
 8016480:	daf2      	bge.n	8016468 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8016482:	2300      	movs	r3, #0
 8016484:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	691b      	ldr	r3, [r3, #16]
 801648a:	f043 0201 	orr.w	r2, r3, #1
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	3301      	adds	r3, #1
 8016496:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	4a09      	ldr	r2, [pc, #36]	; (80164c0 <USB_CoreReset+0x64>)
 801649c:	4293      	cmp	r3, r2
 801649e:	d901      	bls.n	80164a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80164a0:	2303      	movs	r3, #3
 80164a2:	e006      	b.n	80164b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	691b      	ldr	r3, [r3, #16]
 80164a8:	f003 0301 	and.w	r3, r3, #1
 80164ac:	2b01      	cmp	r3, #1
 80164ae:	d0f0      	beq.n	8016492 <USB_CoreReset+0x36>

  return HAL_OK;
 80164b0:	2300      	movs	r3, #0
}
 80164b2:	4618      	mov	r0, r3
 80164b4:	3714      	adds	r7, #20
 80164b6:	46bd      	mov	sp, r7
 80164b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164bc:	4770      	bx	lr
 80164be:	bf00      	nop
 80164c0:	00030d40 	.word	0x00030d40

080164c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b084      	sub	sp, #16
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
 80164cc:	460b      	mov	r3, r1
 80164ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80164d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80164d4:	f002 fa6c 	bl	80189b0 <USBD_static_malloc>
 80164d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d105      	bne.n	80164ec <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	2200      	movs	r2, #0
 80164e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80164e8:	2302      	movs	r3, #2
 80164ea:	e066      	b.n	80165ba <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	68fa      	ldr	r2, [r7, #12]
 80164f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	7c1b      	ldrb	r3, [r3, #16]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d119      	bne.n	8016530 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80164fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016500:	2202      	movs	r2, #2
 8016502:	2181      	movs	r1, #129	; 0x81
 8016504:	6878      	ldr	r0, [r7, #4]
 8016506:	f002 f83f 	bl	8018588 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	2201      	movs	r2, #1
 801650e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8016510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016514:	2202      	movs	r2, #2
 8016516:	2101      	movs	r1, #1
 8016518:	6878      	ldr	r0, [r7, #4]
 801651a:	f002 f835 	bl	8018588 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	2201      	movs	r2, #1
 8016522:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	2210      	movs	r2, #16
 801652a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801652e:	e016      	b.n	801655e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016530:	2340      	movs	r3, #64	; 0x40
 8016532:	2202      	movs	r2, #2
 8016534:	2181      	movs	r1, #129	; 0x81
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f002 f826 	bl	8018588 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	2201      	movs	r2, #1
 8016540:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8016542:	2340      	movs	r3, #64	; 0x40
 8016544:	2202      	movs	r2, #2
 8016546:	2101      	movs	r1, #1
 8016548:	6878      	ldr	r0, [r7, #4]
 801654a:	f002 f81d 	bl	8018588 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	2201      	movs	r2, #1
 8016552:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	2210      	movs	r2, #16
 801655a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801655e:	2308      	movs	r3, #8
 8016560:	2203      	movs	r2, #3
 8016562:	2182      	movs	r1, #130	; 0x82
 8016564:	6878      	ldr	r0, [r7, #4]
 8016566:	f002 f80f 	bl	8018588 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2201      	movs	r2, #1
 801656e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	2200      	movs	r2, #0
 8016580:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	2200      	movs	r2, #0
 8016588:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	7c1b      	ldrb	r3, [r3, #16]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d109      	bne.n	80165a8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801659a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801659e:	2101      	movs	r1, #1
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f002 f96b 	bl	801887c <USBD_LL_PrepareReceive>
 80165a6:	e007      	b.n	80165b8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80165ae:	2340      	movs	r3, #64	; 0x40
 80165b0:	2101      	movs	r1, #1
 80165b2:	6878      	ldr	r0, [r7, #4]
 80165b4:	f002 f962 	bl	801887c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80165b8:	2300      	movs	r3, #0
}
 80165ba:	4618      	mov	r0, r3
 80165bc:	3710      	adds	r7, #16
 80165be:	46bd      	mov	sp, r7
 80165c0:	bd80      	pop	{r7, pc}

080165c2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80165c2:	b580      	push	{r7, lr}
 80165c4:	b082      	sub	sp, #8
 80165c6:	af00      	add	r7, sp, #0
 80165c8:	6078      	str	r0, [r7, #4]
 80165ca:	460b      	mov	r3, r1
 80165cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80165ce:	2181      	movs	r1, #129	; 0x81
 80165d0:	6878      	ldr	r0, [r7, #4]
 80165d2:	f002 f817 	bl	8018604 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	2200      	movs	r2, #0
 80165da:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80165dc:	2101      	movs	r1, #1
 80165de:	6878      	ldr	r0, [r7, #4]
 80165e0:	f002 f810 	bl	8018604 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2200      	movs	r2, #0
 80165e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80165ec:	2182      	movs	r1, #130	; 0x82
 80165ee:	6878      	ldr	r0, [r7, #4]
 80165f0:	f002 f808 	bl	8018604 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	2200      	movs	r2, #0
 80165f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	2200      	movs	r2, #0
 8016600:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801660a:	2b00      	cmp	r3, #0
 801660c:	d00e      	beq.n	801662c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016614:	685b      	ldr	r3, [r3, #4]
 8016616:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801661e:	4618      	mov	r0, r3
 8016620:	f002 f9d4 	bl	80189cc <USBD_static_free>
    pdev->pClassData = NULL;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2200      	movs	r2, #0
 8016628:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801662c:	2300      	movs	r3, #0
}
 801662e:	4618      	mov	r0, r3
 8016630:	3708      	adds	r7, #8
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
	...

08016638 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b086      	sub	sp, #24
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
 8016640:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016648:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801664a:	2300      	movs	r3, #0
 801664c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801664e:	2300      	movs	r3, #0
 8016650:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8016652:	2300      	movs	r3, #0
 8016654:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8016656:	693b      	ldr	r3, [r7, #16]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d101      	bne.n	8016660 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801665c:	2303      	movs	r3, #3
 801665e:	e0af      	b.n	80167c0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016660:	683b      	ldr	r3, [r7, #0]
 8016662:	781b      	ldrb	r3, [r3, #0]
 8016664:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016668:	2b00      	cmp	r3, #0
 801666a:	d03f      	beq.n	80166ec <USBD_CDC_Setup+0xb4>
 801666c:	2b20      	cmp	r3, #32
 801666e:	f040 809f 	bne.w	80167b0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8016672:	683b      	ldr	r3, [r7, #0]
 8016674:	88db      	ldrh	r3, [r3, #6]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d02e      	beq.n	80166d8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801667a:	683b      	ldr	r3, [r7, #0]
 801667c:	781b      	ldrb	r3, [r3, #0]
 801667e:	b25b      	sxtb	r3, r3
 8016680:	2b00      	cmp	r3, #0
 8016682:	da16      	bge.n	80166b2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801668a:	689b      	ldr	r3, [r3, #8]
 801668c:	683a      	ldr	r2, [r7, #0]
 801668e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8016690:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016692:	683a      	ldr	r2, [r7, #0]
 8016694:	88d2      	ldrh	r2, [r2, #6]
 8016696:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8016698:	683b      	ldr	r3, [r7, #0]
 801669a:	88db      	ldrh	r3, [r3, #6]
 801669c:	2b07      	cmp	r3, #7
 801669e:	bf28      	it	cs
 80166a0:	2307      	movcs	r3, #7
 80166a2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80166a4:	693b      	ldr	r3, [r7, #16]
 80166a6:	89fa      	ldrh	r2, [r7, #14]
 80166a8:	4619      	mov	r1, r3
 80166aa:	6878      	ldr	r0, [r7, #4]
 80166ac:	f001 fb13 	bl	8017cd6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80166b0:	e085      	b.n	80167be <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80166b2:	683b      	ldr	r3, [r7, #0]
 80166b4:	785a      	ldrb	r2, [r3, #1]
 80166b6:	693b      	ldr	r3, [r7, #16]
 80166b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80166bc:	683b      	ldr	r3, [r7, #0]
 80166be:	88db      	ldrh	r3, [r3, #6]
 80166c0:	b2da      	uxtb	r2, r3
 80166c2:	693b      	ldr	r3, [r7, #16]
 80166c4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80166c8:	6939      	ldr	r1, [r7, #16]
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	88db      	ldrh	r3, [r3, #6]
 80166ce:	461a      	mov	r2, r3
 80166d0:	6878      	ldr	r0, [r7, #4]
 80166d2:	f001 fb2c 	bl	8017d2e <USBD_CtlPrepareRx>
      break;
 80166d6:	e072      	b.n	80167be <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80166de:	689b      	ldr	r3, [r3, #8]
 80166e0:	683a      	ldr	r2, [r7, #0]
 80166e2:	7850      	ldrb	r0, [r2, #1]
 80166e4:	2200      	movs	r2, #0
 80166e6:	6839      	ldr	r1, [r7, #0]
 80166e8:	4798      	blx	r3
      break;
 80166ea:	e068      	b.n	80167be <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80166ec:	683b      	ldr	r3, [r7, #0]
 80166ee:	785b      	ldrb	r3, [r3, #1]
 80166f0:	2b0b      	cmp	r3, #11
 80166f2:	d852      	bhi.n	801679a <USBD_CDC_Setup+0x162>
 80166f4:	a201      	add	r2, pc, #4	; (adr r2, 80166fc <USBD_CDC_Setup+0xc4>)
 80166f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166fa:	bf00      	nop
 80166fc:	0801672d 	.word	0x0801672d
 8016700:	080167a9 	.word	0x080167a9
 8016704:	0801679b 	.word	0x0801679b
 8016708:	0801679b 	.word	0x0801679b
 801670c:	0801679b 	.word	0x0801679b
 8016710:	0801679b 	.word	0x0801679b
 8016714:	0801679b 	.word	0x0801679b
 8016718:	0801679b 	.word	0x0801679b
 801671c:	0801679b 	.word	0x0801679b
 8016720:	0801679b 	.word	0x0801679b
 8016724:	08016757 	.word	0x08016757
 8016728:	08016781 	.word	0x08016781
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016732:	b2db      	uxtb	r3, r3
 8016734:	2b03      	cmp	r3, #3
 8016736:	d107      	bne.n	8016748 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8016738:	f107 030a 	add.w	r3, r7, #10
 801673c:	2202      	movs	r2, #2
 801673e:	4619      	mov	r1, r3
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	f001 fac8 	bl	8017cd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016746:	e032      	b.n	80167ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016748:	6839      	ldr	r1, [r7, #0]
 801674a:	6878      	ldr	r0, [r7, #4]
 801674c:	f001 fa52 	bl	8017bf4 <USBD_CtlError>
            ret = USBD_FAIL;
 8016750:	2303      	movs	r3, #3
 8016752:	75fb      	strb	r3, [r7, #23]
          break;
 8016754:	e02b      	b.n	80167ae <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801675c:	b2db      	uxtb	r3, r3
 801675e:	2b03      	cmp	r3, #3
 8016760:	d107      	bne.n	8016772 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8016762:	f107 030d 	add.w	r3, r7, #13
 8016766:	2201      	movs	r2, #1
 8016768:	4619      	mov	r1, r3
 801676a:	6878      	ldr	r0, [r7, #4]
 801676c:	f001 fab3 	bl	8017cd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016770:	e01d      	b.n	80167ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016772:	6839      	ldr	r1, [r7, #0]
 8016774:	6878      	ldr	r0, [r7, #4]
 8016776:	f001 fa3d 	bl	8017bf4 <USBD_CtlError>
            ret = USBD_FAIL;
 801677a:	2303      	movs	r3, #3
 801677c:	75fb      	strb	r3, [r7, #23]
          break;
 801677e:	e016      	b.n	80167ae <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016786:	b2db      	uxtb	r3, r3
 8016788:	2b03      	cmp	r3, #3
 801678a:	d00f      	beq.n	80167ac <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801678c:	6839      	ldr	r1, [r7, #0]
 801678e:	6878      	ldr	r0, [r7, #4]
 8016790:	f001 fa30 	bl	8017bf4 <USBD_CtlError>
            ret = USBD_FAIL;
 8016794:	2303      	movs	r3, #3
 8016796:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016798:	e008      	b.n	80167ac <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801679a:	6839      	ldr	r1, [r7, #0]
 801679c:	6878      	ldr	r0, [r7, #4]
 801679e:	f001 fa29 	bl	8017bf4 <USBD_CtlError>
          ret = USBD_FAIL;
 80167a2:	2303      	movs	r3, #3
 80167a4:	75fb      	strb	r3, [r7, #23]
          break;
 80167a6:	e002      	b.n	80167ae <USBD_CDC_Setup+0x176>
          break;
 80167a8:	bf00      	nop
 80167aa:	e008      	b.n	80167be <USBD_CDC_Setup+0x186>
          break;
 80167ac:	bf00      	nop
      }
      break;
 80167ae:	e006      	b.n	80167be <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80167b0:	6839      	ldr	r1, [r7, #0]
 80167b2:	6878      	ldr	r0, [r7, #4]
 80167b4:	f001 fa1e 	bl	8017bf4 <USBD_CtlError>
      ret = USBD_FAIL;
 80167b8:	2303      	movs	r3, #3
 80167ba:	75fb      	strb	r3, [r7, #23]
      break;
 80167bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80167be:	7dfb      	ldrb	r3, [r7, #23]
}
 80167c0:	4618      	mov	r0, r3
 80167c2:	3718      	adds	r7, #24
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bd80      	pop	{r7, pc}

080167c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b084      	sub	sp, #16
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
 80167d0:	460b      	mov	r3, r1
 80167d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80167da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d101      	bne.n	80167ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80167e6:	2303      	movs	r3, #3
 80167e8:	e04f      	b.n	801688a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80167f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80167f2:	78fa      	ldrb	r2, [r7, #3]
 80167f4:	6879      	ldr	r1, [r7, #4]
 80167f6:	4613      	mov	r3, r2
 80167f8:	009b      	lsls	r3, r3, #2
 80167fa:	4413      	add	r3, r2
 80167fc:	009b      	lsls	r3, r3, #2
 80167fe:	440b      	add	r3, r1
 8016800:	3318      	adds	r3, #24
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d029      	beq.n	801685c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8016808:	78fa      	ldrb	r2, [r7, #3]
 801680a:	6879      	ldr	r1, [r7, #4]
 801680c:	4613      	mov	r3, r2
 801680e:	009b      	lsls	r3, r3, #2
 8016810:	4413      	add	r3, r2
 8016812:	009b      	lsls	r3, r3, #2
 8016814:	440b      	add	r3, r1
 8016816:	3318      	adds	r3, #24
 8016818:	681a      	ldr	r2, [r3, #0]
 801681a:	78f9      	ldrb	r1, [r7, #3]
 801681c:	68f8      	ldr	r0, [r7, #12]
 801681e:	460b      	mov	r3, r1
 8016820:	00db      	lsls	r3, r3, #3
 8016822:	440b      	add	r3, r1
 8016824:	009b      	lsls	r3, r3, #2
 8016826:	4403      	add	r3, r0
 8016828:	3348      	adds	r3, #72	; 0x48
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	fbb2 f1f3 	udiv	r1, r2, r3
 8016830:	fb01 f303 	mul.w	r3, r1, r3
 8016834:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8016836:	2b00      	cmp	r3, #0
 8016838:	d110      	bne.n	801685c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801683a:	78fa      	ldrb	r2, [r7, #3]
 801683c:	6879      	ldr	r1, [r7, #4]
 801683e:	4613      	mov	r3, r2
 8016840:	009b      	lsls	r3, r3, #2
 8016842:	4413      	add	r3, r2
 8016844:	009b      	lsls	r3, r3, #2
 8016846:	440b      	add	r3, r1
 8016848:	3318      	adds	r3, #24
 801684a:	2200      	movs	r2, #0
 801684c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801684e:	78f9      	ldrb	r1, [r7, #3]
 8016850:	2300      	movs	r3, #0
 8016852:	2200      	movs	r2, #0
 8016854:	6878      	ldr	r0, [r7, #4]
 8016856:	f001 ffd9 	bl	801880c <USBD_LL_Transmit>
 801685a:	e015      	b.n	8016888 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801685c:	68bb      	ldr	r3, [r7, #8]
 801685e:	2200      	movs	r2, #0
 8016860:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801686a:	691b      	ldr	r3, [r3, #16]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d00b      	beq.n	8016888 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016876:	691b      	ldr	r3, [r3, #16]
 8016878:	68ba      	ldr	r2, [r7, #8]
 801687a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801687e:	68ba      	ldr	r2, [r7, #8]
 8016880:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8016884:	78fa      	ldrb	r2, [r7, #3]
 8016886:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016888:	2300      	movs	r3, #0
}
 801688a:	4618      	mov	r0, r3
 801688c:	3710      	adds	r7, #16
 801688e:	46bd      	mov	sp, r7
 8016890:	bd80      	pop	{r7, pc}

08016892 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016892:	b580      	push	{r7, lr}
 8016894:	b084      	sub	sp, #16
 8016896:	af00      	add	r7, sp, #0
 8016898:	6078      	str	r0, [r7, #4]
 801689a:	460b      	mov	r3, r1
 801689c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80168a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d101      	bne.n	80168b4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80168b0:	2303      	movs	r3, #3
 80168b2:	e015      	b.n	80168e0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80168b4:	78fb      	ldrb	r3, [r7, #3]
 80168b6:	4619      	mov	r1, r3
 80168b8:	6878      	ldr	r0, [r7, #4]
 80168ba:	f002 f817 	bl	80188ec <USBD_LL_GetRxDataSize>
 80168be:	4602      	mov	r2, r0
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80168cc:	68db      	ldr	r3, [r3, #12]
 80168ce:	68fa      	ldr	r2, [r7, #12]
 80168d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80168d4:	68fa      	ldr	r2, [r7, #12]
 80168d6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80168da:	4611      	mov	r1, r2
 80168dc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80168de:	2300      	movs	r3, #0
}
 80168e0:	4618      	mov	r0, r3
 80168e2:	3710      	adds	r7, #16
 80168e4:	46bd      	mov	sp, r7
 80168e6:	bd80      	pop	{r7, pc}

080168e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b084      	sub	sp, #16
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80168f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d101      	bne.n	8016902 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80168fe:	2303      	movs	r3, #3
 8016900:	e01b      	b.n	801693a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016908:	2b00      	cmp	r3, #0
 801690a:	d015      	beq.n	8016938 <USBD_CDC_EP0_RxReady+0x50>
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8016912:	2bff      	cmp	r3, #255	; 0xff
 8016914:	d010      	beq.n	8016938 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801691c:	689b      	ldr	r3, [r3, #8]
 801691e:	68fa      	ldr	r2, [r7, #12]
 8016920:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8016924:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8016926:	68fa      	ldr	r2, [r7, #12]
 8016928:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801692c:	b292      	uxth	r2, r2
 801692e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	22ff      	movs	r2, #255	; 0xff
 8016934:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8016938:	2300      	movs	r3, #0
}
 801693a:	4618      	mov	r0, r3
 801693c:	3710      	adds	r7, #16
 801693e:	46bd      	mov	sp, r7
 8016940:	bd80      	pop	{r7, pc}
	...

08016944 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016944:	b480      	push	{r7}
 8016946:	b083      	sub	sp, #12
 8016948:	af00      	add	r7, sp, #0
 801694a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	2243      	movs	r2, #67	; 0x43
 8016950:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8016952:	4b03      	ldr	r3, [pc, #12]	; (8016960 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8016954:	4618      	mov	r0, r3
 8016956:	370c      	adds	r7, #12
 8016958:	46bd      	mov	sp, r7
 801695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695e:	4770      	bx	lr
 8016960:	200005dc 	.word	0x200005dc

08016964 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016964:	b480      	push	{r7}
 8016966:	b083      	sub	sp, #12
 8016968:	af00      	add	r7, sp, #0
 801696a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	2243      	movs	r2, #67	; 0x43
 8016970:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8016972:	4b03      	ldr	r3, [pc, #12]	; (8016980 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8016974:	4618      	mov	r0, r3
 8016976:	370c      	adds	r7, #12
 8016978:	46bd      	mov	sp, r7
 801697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801697e:	4770      	bx	lr
 8016980:	20000598 	.word	0x20000598

08016984 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016984:	b480      	push	{r7}
 8016986:	b083      	sub	sp, #12
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	2243      	movs	r2, #67	; 0x43
 8016990:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8016992:	4b03      	ldr	r3, [pc, #12]	; (80169a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8016994:	4618      	mov	r0, r3
 8016996:	370c      	adds	r7, #12
 8016998:	46bd      	mov	sp, r7
 801699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801699e:	4770      	bx	lr
 80169a0:	20000620 	.word	0x20000620

080169a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80169a4:	b480      	push	{r7}
 80169a6:	b083      	sub	sp, #12
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	220a      	movs	r2, #10
 80169b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80169b2:	4b03      	ldr	r3, [pc, #12]	; (80169c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80169b4:	4618      	mov	r0, r3
 80169b6:	370c      	adds	r7, #12
 80169b8:	46bd      	mov	sp, r7
 80169ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169be:	4770      	bx	lr
 80169c0:	20000554 	.word	0x20000554

080169c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80169c4:	b480      	push	{r7}
 80169c6:	b083      	sub	sp, #12
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
 80169cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80169ce:	683b      	ldr	r3, [r7, #0]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d101      	bne.n	80169d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80169d4:	2303      	movs	r3, #3
 80169d6:	e004      	b.n	80169e2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	683a      	ldr	r2, [r7, #0]
 80169dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80169e0:	2300      	movs	r3, #0
}
 80169e2:	4618      	mov	r0, r3
 80169e4:	370c      	adds	r7, #12
 80169e6:	46bd      	mov	sp, r7
 80169e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ec:	4770      	bx	lr

080169ee <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80169ee:	b480      	push	{r7}
 80169f0:	b087      	sub	sp, #28
 80169f2:	af00      	add	r7, sp, #0
 80169f4:	60f8      	str	r0, [r7, #12]
 80169f6:	60b9      	str	r1, [r7, #8]
 80169f8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016a00:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8016a02:	697b      	ldr	r3, [r7, #20]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d101      	bne.n	8016a0c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016a08:	2303      	movs	r3, #3
 8016a0a:	e008      	b.n	8016a1e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8016a0c:	697b      	ldr	r3, [r7, #20]
 8016a0e:	68ba      	ldr	r2, [r7, #8]
 8016a10:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8016a14:	697b      	ldr	r3, [r7, #20]
 8016a16:	687a      	ldr	r2, [r7, #4]
 8016a18:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8016a1c:	2300      	movs	r3, #0
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	371c      	adds	r7, #28
 8016a22:	46bd      	mov	sp, r7
 8016a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a28:	4770      	bx	lr

08016a2a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8016a2a:	b480      	push	{r7}
 8016a2c:	b085      	sub	sp, #20
 8016a2e:	af00      	add	r7, sp, #0
 8016a30:	6078      	str	r0, [r7, #4]
 8016a32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016a3a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d101      	bne.n	8016a46 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8016a42:	2303      	movs	r3, #3
 8016a44:	e004      	b.n	8016a50 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	683a      	ldr	r2, [r7, #0]
 8016a4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8016a4e:	2300      	movs	r3, #0
}
 8016a50:	4618      	mov	r0, r3
 8016a52:	3714      	adds	r7, #20
 8016a54:	46bd      	mov	sp, r7
 8016a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a5a:	4770      	bx	lr

08016a5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b084      	sub	sp, #16
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016a6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d101      	bne.n	8016a7a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016a76:	2303      	movs	r3, #3
 8016a78:	e016      	b.n	8016aa8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	7c1b      	ldrb	r3, [r3, #16]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d109      	bne.n	8016a96 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016a8c:	2101      	movs	r1, #1
 8016a8e:	6878      	ldr	r0, [r7, #4]
 8016a90:	f001 fef4 	bl	801887c <USBD_LL_PrepareReceive>
 8016a94:	e007      	b.n	8016aa6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016a9c:	2340      	movs	r3, #64	; 0x40
 8016a9e:	2101      	movs	r1, #1
 8016aa0:	6878      	ldr	r0, [r7, #4]
 8016aa2:	f001 feeb 	bl	801887c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016aa6:	2300      	movs	r3, #0
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	3710      	adds	r7, #16
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}

08016ab0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b086      	sub	sp, #24
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	60f8      	str	r0, [r7, #12]
 8016ab8:	60b9      	str	r1, [r7, #8]
 8016aba:	4613      	mov	r3, r2
 8016abc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d101      	bne.n	8016ac8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8016ac4:	2303      	movs	r3, #3
 8016ac6:	e01f      	b.n	8016b08 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	2200      	movs	r2, #0
 8016acc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	2200      	movs	r2, #0
 8016ad4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	2200      	movs	r2, #0
 8016adc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016ae0:	68bb      	ldr	r3, [r7, #8]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d003      	beq.n	8016aee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	68ba      	ldr	r2, [r7, #8]
 8016aea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	2201      	movs	r2, #1
 8016af2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	79fa      	ldrb	r2, [r7, #7]
 8016afa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016afc:	68f8      	ldr	r0, [r7, #12]
 8016afe:	f001 fcc5 	bl	801848c <USBD_LL_Init>
 8016b02:	4603      	mov	r3, r0
 8016b04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8016b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b08:	4618      	mov	r0, r3
 8016b0a:	3718      	adds	r7, #24
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	bd80      	pop	{r7, pc}

08016b10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b084      	sub	sp, #16
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
 8016b18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d101      	bne.n	8016b28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8016b24:	2303      	movs	r3, #3
 8016b26:	e016      	b.n	8016b56 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	683a      	ldr	r2, [r7, #0]
 8016b2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d00b      	beq.n	8016b54 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b44:	f107 020e 	add.w	r2, r7, #14
 8016b48:	4610      	mov	r0, r2
 8016b4a:	4798      	blx	r3
 8016b4c:	4602      	mov	r2, r0
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8016b54:	2300      	movs	r3, #0
}
 8016b56:	4618      	mov	r0, r3
 8016b58:	3710      	adds	r7, #16
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bd80      	pop	{r7, pc}

08016b5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016b5e:	b580      	push	{r7, lr}
 8016b60:	b082      	sub	sp, #8
 8016b62:	af00      	add	r7, sp, #0
 8016b64:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016b66:	6878      	ldr	r0, [r7, #4]
 8016b68:	f001 fcdc 	bl	8018524 <USBD_LL_Start>
 8016b6c:	4603      	mov	r3, r0
}
 8016b6e:	4618      	mov	r0, r3
 8016b70:	3708      	adds	r7, #8
 8016b72:	46bd      	mov	sp, r7
 8016b74:	bd80      	pop	{r7, pc}

08016b76 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8016b76:	b480      	push	{r7}
 8016b78:	b083      	sub	sp, #12
 8016b7a:	af00      	add	r7, sp, #0
 8016b7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016b7e:	2300      	movs	r3, #0
}
 8016b80:	4618      	mov	r0, r3
 8016b82:	370c      	adds	r7, #12
 8016b84:	46bd      	mov	sp, r7
 8016b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b8a:	4770      	bx	lr

08016b8c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b084      	sub	sp, #16
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
 8016b94:	460b      	mov	r3, r1
 8016b96:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8016b98:	2303      	movs	r3, #3
 8016b9a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d009      	beq.n	8016bba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	78fa      	ldrb	r2, [r7, #3]
 8016bb0:	4611      	mov	r1, r2
 8016bb2:	6878      	ldr	r0, [r7, #4]
 8016bb4:	4798      	blx	r3
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8016bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	3710      	adds	r7, #16
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd80      	pop	{r7, pc}

08016bc4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b082      	sub	sp, #8
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
 8016bcc:	460b      	mov	r3, r1
 8016bce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d007      	beq.n	8016bea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016be0:	685b      	ldr	r3, [r3, #4]
 8016be2:	78fa      	ldrb	r2, [r7, #3]
 8016be4:	4611      	mov	r1, r2
 8016be6:	6878      	ldr	r0, [r7, #4]
 8016be8:	4798      	blx	r3
  }

  return USBD_OK;
 8016bea:	2300      	movs	r3, #0
}
 8016bec:	4618      	mov	r0, r3
 8016bee:	3708      	adds	r7, #8
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}

08016bf4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b084      	sub	sp, #16
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
 8016bfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016c04:	6839      	ldr	r1, [r7, #0]
 8016c06:	4618      	mov	r0, r3
 8016c08:	f000 ffba 	bl	8017b80 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	2201      	movs	r2, #1
 8016c10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8016c1a:	461a      	mov	r2, r3
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016c28:	f003 031f 	and.w	r3, r3, #31
 8016c2c:	2b02      	cmp	r3, #2
 8016c2e:	d01a      	beq.n	8016c66 <USBD_LL_SetupStage+0x72>
 8016c30:	2b02      	cmp	r3, #2
 8016c32:	d822      	bhi.n	8016c7a <USBD_LL_SetupStage+0x86>
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d002      	beq.n	8016c3e <USBD_LL_SetupStage+0x4a>
 8016c38:	2b01      	cmp	r3, #1
 8016c3a:	d00a      	beq.n	8016c52 <USBD_LL_SetupStage+0x5e>
 8016c3c:	e01d      	b.n	8016c7a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016c44:	4619      	mov	r1, r3
 8016c46:	6878      	ldr	r0, [r7, #4]
 8016c48:	f000 fa62 	bl	8017110 <USBD_StdDevReq>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8016c50:	e020      	b.n	8016c94 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016c58:	4619      	mov	r1, r3
 8016c5a:	6878      	ldr	r0, [r7, #4]
 8016c5c:	f000 fac6 	bl	80171ec <USBD_StdItfReq>
 8016c60:	4603      	mov	r3, r0
 8016c62:	73fb      	strb	r3, [r7, #15]
      break;
 8016c64:	e016      	b.n	8016c94 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016c6c:	4619      	mov	r1, r3
 8016c6e:	6878      	ldr	r0, [r7, #4]
 8016c70:	f000 fb05 	bl	801727e <USBD_StdEPReq>
 8016c74:	4603      	mov	r3, r0
 8016c76:	73fb      	strb	r3, [r7, #15]
      break;
 8016c78:	e00c      	b.n	8016c94 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016c80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016c84:	b2db      	uxtb	r3, r3
 8016c86:	4619      	mov	r1, r3
 8016c88:	6878      	ldr	r0, [r7, #4]
 8016c8a:	f001 fcf1 	bl	8018670 <USBD_LL_StallEP>
 8016c8e:	4603      	mov	r3, r0
 8016c90:	73fb      	strb	r3, [r7, #15]
      break;
 8016c92:	bf00      	nop
  }

  return ret;
 8016c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c96:	4618      	mov	r0, r3
 8016c98:	3710      	adds	r7, #16
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	bd80      	pop	{r7, pc}

08016c9e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016c9e:	b580      	push	{r7, lr}
 8016ca0:	b086      	sub	sp, #24
 8016ca2:	af00      	add	r7, sp, #0
 8016ca4:	60f8      	str	r0, [r7, #12]
 8016ca6:	460b      	mov	r3, r1
 8016ca8:	607a      	str	r2, [r7, #4]
 8016caa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8016cac:	7afb      	ldrb	r3, [r7, #11]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d138      	bne.n	8016d24 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016cb8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016cc0:	2b03      	cmp	r3, #3
 8016cc2:	d14a      	bne.n	8016d5a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8016cc4:	693b      	ldr	r3, [r7, #16]
 8016cc6:	689a      	ldr	r2, [r3, #8]
 8016cc8:	693b      	ldr	r3, [r7, #16]
 8016cca:	68db      	ldr	r3, [r3, #12]
 8016ccc:	429a      	cmp	r2, r3
 8016cce:	d913      	bls.n	8016cf8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016cd0:	693b      	ldr	r3, [r7, #16]
 8016cd2:	689a      	ldr	r2, [r3, #8]
 8016cd4:	693b      	ldr	r3, [r7, #16]
 8016cd6:	68db      	ldr	r3, [r3, #12]
 8016cd8:	1ad2      	subs	r2, r2, r3
 8016cda:	693b      	ldr	r3, [r7, #16]
 8016cdc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016cde:	693b      	ldr	r3, [r7, #16]
 8016ce0:	68da      	ldr	r2, [r3, #12]
 8016ce2:	693b      	ldr	r3, [r7, #16]
 8016ce4:	689b      	ldr	r3, [r3, #8]
 8016ce6:	4293      	cmp	r3, r2
 8016ce8:	bf28      	it	cs
 8016cea:	4613      	movcs	r3, r2
 8016cec:	461a      	mov	r2, r3
 8016cee:	6879      	ldr	r1, [r7, #4]
 8016cf0:	68f8      	ldr	r0, [r7, #12]
 8016cf2:	f001 f839 	bl	8017d68 <USBD_CtlContinueRx>
 8016cf6:	e030      	b.n	8016d5a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016cfe:	b2db      	uxtb	r3, r3
 8016d00:	2b03      	cmp	r3, #3
 8016d02:	d10b      	bne.n	8016d1c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d0a:	691b      	ldr	r3, [r3, #16]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d005      	beq.n	8016d1c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d16:	691b      	ldr	r3, [r3, #16]
 8016d18:	68f8      	ldr	r0, [r7, #12]
 8016d1a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016d1c:	68f8      	ldr	r0, [r7, #12]
 8016d1e:	f001 f834 	bl	8017d8a <USBD_CtlSendStatus>
 8016d22:	e01a      	b.n	8016d5a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016d2a:	b2db      	uxtb	r3, r3
 8016d2c:	2b03      	cmp	r3, #3
 8016d2e:	d114      	bne.n	8016d5a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d36:	699b      	ldr	r3, [r3, #24]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d00e      	beq.n	8016d5a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d42:	699b      	ldr	r3, [r3, #24]
 8016d44:	7afa      	ldrb	r2, [r7, #11]
 8016d46:	4611      	mov	r1, r2
 8016d48:	68f8      	ldr	r0, [r7, #12]
 8016d4a:	4798      	blx	r3
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8016d50:	7dfb      	ldrb	r3, [r7, #23]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d001      	beq.n	8016d5a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8016d56:	7dfb      	ldrb	r3, [r7, #23]
 8016d58:	e000      	b.n	8016d5c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8016d5a:	2300      	movs	r3, #0
}
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	3718      	adds	r7, #24
 8016d60:	46bd      	mov	sp, r7
 8016d62:	bd80      	pop	{r7, pc}

08016d64 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016d64:	b580      	push	{r7, lr}
 8016d66:	b086      	sub	sp, #24
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	60f8      	str	r0, [r7, #12]
 8016d6c:	460b      	mov	r3, r1
 8016d6e:	607a      	str	r2, [r7, #4]
 8016d70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8016d72:	7afb      	ldrb	r3, [r7, #11]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d16b      	bne.n	8016e50 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	3314      	adds	r3, #20
 8016d7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016d84:	2b02      	cmp	r3, #2
 8016d86:	d156      	bne.n	8016e36 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8016d88:	693b      	ldr	r3, [r7, #16]
 8016d8a:	689a      	ldr	r2, [r3, #8]
 8016d8c:	693b      	ldr	r3, [r7, #16]
 8016d8e:	68db      	ldr	r3, [r3, #12]
 8016d90:	429a      	cmp	r2, r3
 8016d92:	d914      	bls.n	8016dbe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016d94:	693b      	ldr	r3, [r7, #16]
 8016d96:	689a      	ldr	r2, [r3, #8]
 8016d98:	693b      	ldr	r3, [r7, #16]
 8016d9a:	68db      	ldr	r3, [r3, #12]
 8016d9c:	1ad2      	subs	r2, r2, r3
 8016d9e:	693b      	ldr	r3, [r7, #16]
 8016da0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016da2:	693b      	ldr	r3, [r7, #16]
 8016da4:	689b      	ldr	r3, [r3, #8]
 8016da6:	461a      	mov	r2, r3
 8016da8:	6879      	ldr	r1, [r7, #4]
 8016daa:	68f8      	ldr	r0, [r7, #12]
 8016dac:	f000 ffae 	bl	8017d0c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016db0:	2300      	movs	r3, #0
 8016db2:	2200      	movs	r2, #0
 8016db4:	2100      	movs	r1, #0
 8016db6:	68f8      	ldr	r0, [r7, #12]
 8016db8:	f001 fd60 	bl	801887c <USBD_LL_PrepareReceive>
 8016dbc:	e03b      	b.n	8016e36 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016dbe:	693b      	ldr	r3, [r7, #16]
 8016dc0:	68da      	ldr	r2, [r3, #12]
 8016dc2:	693b      	ldr	r3, [r7, #16]
 8016dc4:	689b      	ldr	r3, [r3, #8]
 8016dc6:	429a      	cmp	r2, r3
 8016dc8:	d11c      	bne.n	8016e04 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016dca:	693b      	ldr	r3, [r7, #16]
 8016dcc:	685a      	ldr	r2, [r3, #4]
 8016dce:	693b      	ldr	r3, [r7, #16]
 8016dd0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	d316      	bcc.n	8016e04 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016dd6:	693b      	ldr	r3, [r7, #16]
 8016dd8:	685a      	ldr	r2, [r3, #4]
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016de0:	429a      	cmp	r2, r3
 8016de2:	d20f      	bcs.n	8016e04 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016de4:	2200      	movs	r2, #0
 8016de6:	2100      	movs	r1, #0
 8016de8:	68f8      	ldr	r0, [r7, #12]
 8016dea:	f000 ff8f 	bl	8017d0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	2200      	movs	r2, #0
 8016df2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016df6:	2300      	movs	r3, #0
 8016df8:	2200      	movs	r2, #0
 8016dfa:	2100      	movs	r1, #0
 8016dfc:	68f8      	ldr	r0, [r7, #12]
 8016dfe:	f001 fd3d 	bl	801887c <USBD_LL_PrepareReceive>
 8016e02:	e018      	b.n	8016e36 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e0a:	b2db      	uxtb	r3, r3
 8016e0c:	2b03      	cmp	r3, #3
 8016e0e:	d10b      	bne.n	8016e28 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e16:	68db      	ldr	r3, [r3, #12]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d005      	beq.n	8016e28 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e22:	68db      	ldr	r3, [r3, #12]
 8016e24:	68f8      	ldr	r0, [r7, #12]
 8016e26:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016e28:	2180      	movs	r1, #128	; 0x80
 8016e2a:	68f8      	ldr	r0, [r7, #12]
 8016e2c:	f001 fc20 	bl	8018670 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016e30:	68f8      	ldr	r0, [r7, #12]
 8016e32:	f000 ffbd 	bl	8017db0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8016e3c:	2b01      	cmp	r3, #1
 8016e3e:	d122      	bne.n	8016e86 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8016e40:	68f8      	ldr	r0, [r7, #12]
 8016e42:	f7ff fe98 	bl	8016b76 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	2200      	movs	r2, #0
 8016e4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016e4e:	e01a      	b.n	8016e86 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e56:	b2db      	uxtb	r3, r3
 8016e58:	2b03      	cmp	r3, #3
 8016e5a:	d114      	bne.n	8016e86 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e62:	695b      	ldr	r3, [r3, #20]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d00e      	beq.n	8016e86 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e6e:	695b      	ldr	r3, [r3, #20]
 8016e70:	7afa      	ldrb	r2, [r7, #11]
 8016e72:	4611      	mov	r1, r2
 8016e74:	68f8      	ldr	r0, [r7, #12]
 8016e76:	4798      	blx	r3
 8016e78:	4603      	mov	r3, r0
 8016e7a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8016e7c:	7dfb      	ldrb	r3, [r7, #23]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d001      	beq.n	8016e86 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8016e82:	7dfb      	ldrb	r3, [r7, #23]
 8016e84:	e000      	b.n	8016e88 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8016e86:	2300      	movs	r3, #0
}
 8016e88:	4618      	mov	r0, r3
 8016e8a:	3718      	adds	r7, #24
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}

08016e90 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b082      	sub	sp, #8
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	2201      	movs	r2, #1
 8016e9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	2200      	movs	r2, #0
 8016eac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d101      	bne.n	8016ec4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8016ec0:	2303      	movs	r3, #3
 8016ec2:	e02f      	b.n	8016f24 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d00f      	beq.n	8016eee <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ed4:	685b      	ldr	r3, [r3, #4]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d009      	beq.n	8016eee <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ee0:	685b      	ldr	r3, [r3, #4]
 8016ee2:	687a      	ldr	r2, [r7, #4]
 8016ee4:	6852      	ldr	r2, [r2, #4]
 8016ee6:	b2d2      	uxtb	r2, r2
 8016ee8:	4611      	mov	r1, r2
 8016eea:	6878      	ldr	r0, [r7, #4]
 8016eec:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016eee:	2340      	movs	r3, #64	; 0x40
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	2100      	movs	r1, #0
 8016ef4:	6878      	ldr	r0, [r7, #4]
 8016ef6:	f001 fb47 	bl	8018588 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	2201      	movs	r2, #1
 8016efe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	2240      	movs	r2, #64	; 0x40
 8016f06:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016f0a:	2340      	movs	r3, #64	; 0x40
 8016f0c:	2200      	movs	r2, #0
 8016f0e:	2180      	movs	r1, #128	; 0x80
 8016f10:	6878      	ldr	r0, [r7, #4]
 8016f12:	f001 fb39 	bl	8018588 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	2201      	movs	r2, #1
 8016f1a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	2240      	movs	r2, #64	; 0x40
 8016f20:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8016f22:	2300      	movs	r3, #0
}
 8016f24:	4618      	mov	r0, r3
 8016f26:	3708      	adds	r7, #8
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}

08016f2c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016f2c:	b480      	push	{r7}
 8016f2e:	b083      	sub	sp, #12
 8016f30:	af00      	add	r7, sp, #0
 8016f32:	6078      	str	r0, [r7, #4]
 8016f34:	460b      	mov	r3, r1
 8016f36:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	78fa      	ldrb	r2, [r7, #3]
 8016f3c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016f3e:	2300      	movs	r3, #0
}
 8016f40:	4618      	mov	r0, r3
 8016f42:	370c      	adds	r7, #12
 8016f44:	46bd      	mov	sp, r7
 8016f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4a:	4770      	bx	lr

08016f4c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016f4c:	b480      	push	{r7}
 8016f4e:	b083      	sub	sp, #12
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f5a:	b2da      	uxtb	r2, r3
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	2204      	movs	r2, #4
 8016f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016f6a:	2300      	movs	r3, #0
}
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	370c      	adds	r7, #12
 8016f70:	46bd      	mov	sp, r7
 8016f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f76:	4770      	bx	lr

08016f78 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016f78:	b480      	push	{r7}
 8016f7a:	b083      	sub	sp, #12
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f86:	b2db      	uxtb	r3, r3
 8016f88:	2b04      	cmp	r3, #4
 8016f8a:	d106      	bne.n	8016f9a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8016f92:	b2da      	uxtb	r2, r3
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8016f9a:	2300      	movs	r3, #0
}
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	370c      	adds	r7, #12
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa6:	4770      	bx	lr

08016fa8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b082      	sub	sp, #8
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d101      	bne.n	8016fbe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8016fba:	2303      	movs	r3, #3
 8016fbc:	e012      	b.n	8016fe4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016fc4:	b2db      	uxtb	r3, r3
 8016fc6:	2b03      	cmp	r3, #3
 8016fc8:	d10b      	bne.n	8016fe2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fd0:	69db      	ldr	r3, [r3, #28]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d005      	beq.n	8016fe2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fdc:	69db      	ldr	r3, [r3, #28]
 8016fde:	6878      	ldr	r0, [r7, #4]
 8016fe0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016fe2:	2300      	movs	r3, #0
}
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	3708      	adds	r7, #8
 8016fe8:	46bd      	mov	sp, r7
 8016fea:	bd80      	pop	{r7, pc}

08016fec <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b082      	sub	sp, #8
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
 8016ff4:	460b      	mov	r3, r1
 8016ff6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d101      	bne.n	8017006 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8017002:	2303      	movs	r3, #3
 8017004:	e014      	b.n	8017030 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801700c:	b2db      	uxtb	r3, r3
 801700e:	2b03      	cmp	r3, #3
 8017010:	d10d      	bne.n	801702e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017018:	6a1b      	ldr	r3, [r3, #32]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d007      	beq.n	801702e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017024:	6a1b      	ldr	r3, [r3, #32]
 8017026:	78fa      	ldrb	r2, [r7, #3]
 8017028:	4611      	mov	r1, r2
 801702a:	6878      	ldr	r0, [r7, #4]
 801702c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801702e:	2300      	movs	r3, #0
}
 8017030:	4618      	mov	r0, r3
 8017032:	3708      	adds	r7, #8
 8017034:	46bd      	mov	sp, r7
 8017036:	bd80      	pop	{r7, pc}

08017038 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b082      	sub	sp, #8
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
 8017040:	460b      	mov	r3, r1
 8017042:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801704a:	2b00      	cmp	r3, #0
 801704c:	d101      	bne.n	8017052 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801704e:	2303      	movs	r3, #3
 8017050:	e014      	b.n	801707c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017058:	b2db      	uxtb	r3, r3
 801705a:	2b03      	cmp	r3, #3
 801705c:	d10d      	bne.n	801707a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017066:	2b00      	cmp	r3, #0
 8017068:	d007      	beq.n	801707a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017072:	78fa      	ldrb	r2, [r7, #3]
 8017074:	4611      	mov	r1, r2
 8017076:	6878      	ldr	r0, [r7, #4]
 8017078:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801707a:	2300      	movs	r3, #0
}
 801707c:	4618      	mov	r0, r3
 801707e:	3708      	adds	r7, #8
 8017080:	46bd      	mov	sp, r7
 8017082:	bd80      	pop	{r7, pc}

08017084 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8017084:	b480      	push	{r7}
 8017086:	b083      	sub	sp, #12
 8017088:	af00      	add	r7, sp, #0
 801708a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801708c:	2300      	movs	r3, #0
}
 801708e:	4618      	mov	r0, r3
 8017090:	370c      	adds	r7, #12
 8017092:	46bd      	mov	sp, r7
 8017094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017098:	4770      	bx	lr

0801709a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801709a:	b580      	push	{r7, lr}
 801709c:	b082      	sub	sp, #8
 801709e:	af00      	add	r7, sp, #0
 80170a0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	2201      	movs	r2, #1
 80170a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d009      	beq.n	80170c8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170ba:	685b      	ldr	r3, [r3, #4]
 80170bc:	687a      	ldr	r2, [r7, #4]
 80170be:	6852      	ldr	r2, [r2, #4]
 80170c0:	b2d2      	uxtb	r2, r2
 80170c2:	4611      	mov	r1, r2
 80170c4:	6878      	ldr	r0, [r7, #4]
 80170c6:	4798      	blx	r3
  }

  return USBD_OK;
 80170c8:	2300      	movs	r3, #0
}
 80170ca:	4618      	mov	r0, r3
 80170cc:	3708      	adds	r7, #8
 80170ce:	46bd      	mov	sp, r7
 80170d0:	bd80      	pop	{r7, pc}

080170d2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80170d2:	b480      	push	{r7}
 80170d4:	b087      	sub	sp, #28
 80170d6:	af00      	add	r7, sp, #0
 80170d8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80170de:	697b      	ldr	r3, [r7, #20]
 80170e0:	781b      	ldrb	r3, [r3, #0]
 80170e2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80170e4:	697b      	ldr	r3, [r7, #20]
 80170e6:	3301      	adds	r3, #1
 80170e8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	781b      	ldrb	r3, [r3, #0]
 80170ee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80170f0:	8a3b      	ldrh	r3, [r7, #16]
 80170f2:	021b      	lsls	r3, r3, #8
 80170f4:	b21a      	sxth	r2, r3
 80170f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80170fa:	4313      	orrs	r3, r2
 80170fc:	b21b      	sxth	r3, r3
 80170fe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8017100:	89fb      	ldrh	r3, [r7, #14]
}
 8017102:	4618      	mov	r0, r3
 8017104:	371c      	adds	r7, #28
 8017106:	46bd      	mov	sp, r7
 8017108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801710c:	4770      	bx	lr
	...

08017110 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017110:	b580      	push	{r7, lr}
 8017112:	b084      	sub	sp, #16
 8017114:	af00      	add	r7, sp, #0
 8017116:	6078      	str	r0, [r7, #4]
 8017118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801711a:	2300      	movs	r3, #0
 801711c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801711e:	683b      	ldr	r3, [r7, #0]
 8017120:	781b      	ldrb	r3, [r3, #0]
 8017122:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017126:	2b40      	cmp	r3, #64	; 0x40
 8017128:	d005      	beq.n	8017136 <USBD_StdDevReq+0x26>
 801712a:	2b40      	cmp	r3, #64	; 0x40
 801712c:	d853      	bhi.n	80171d6 <USBD_StdDevReq+0xc6>
 801712e:	2b00      	cmp	r3, #0
 8017130:	d00b      	beq.n	801714a <USBD_StdDevReq+0x3a>
 8017132:	2b20      	cmp	r3, #32
 8017134:	d14f      	bne.n	80171d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801713c:	689b      	ldr	r3, [r3, #8]
 801713e:	6839      	ldr	r1, [r7, #0]
 8017140:	6878      	ldr	r0, [r7, #4]
 8017142:	4798      	blx	r3
 8017144:	4603      	mov	r3, r0
 8017146:	73fb      	strb	r3, [r7, #15]
      break;
 8017148:	e04a      	b.n	80171e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801714a:	683b      	ldr	r3, [r7, #0]
 801714c:	785b      	ldrb	r3, [r3, #1]
 801714e:	2b09      	cmp	r3, #9
 8017150:	d83b      	bhi.n	80171ca <USBD_StdDevReq+0xba>
 8017152:	a201      	add	r2, pc, #4	; (adr r2, 8017158 <USBD_StdDevReq+0x48>)
 8017154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017158:	080171ad 	.word	0x080171ad
 801715c:	080171c1 	.word	0x080171c1
 8017160:	080171cb 	.word	0x080171cb
 8017164:	080171b7 	.word	0x080171b7
 8017168:	080171cb 	.word	0x080171cb
 801716c:	0801718b 	.word	0x0801718b
 8017170:	08017181 	.word	0x08017181
 8017174:	080171cb 	.word	0x080171cb
 8017178:	080171a3 	.word	0x080171a3
 801717c:	08017195 	.word	0x08017195
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017180:	6839      	ldr	r1, [r7, #0]
 8017182:	6878      	ldr	r0, [r7, #4]
 8017184:	f000 f9de 	bl	8017544 <USBD_GetDescriptor>
          break;
 8017188:	e024      	b.n	80171d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801718a:	6839      	ldr	r1, [r7, #0]
 801718c:	6878      	ldr	r0, [r7, #4]
 801718e:	f000 fb6d 	bl	801786c <USBD_SetAddress>
          break;
 8017192:	e01f      	b.n	80171d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8017194:	6839      	ldr	r1, [r7, #0]
 8017196:	6878      	ldr	r0, [r7, #4]
 8017198:	f000 fbac 	bl	80178f4 <USBD_SetConfig>
 801719c:	4603      	mov	r3, r0
 801719e:	73fb      	strb	r3, [r7, #15]
          break;
 80171a0:	e018      	b.n	80171d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80171a2:	6839      	ldr	r1, [r7, #0]
 80171a4:	6878      	ldr	r0, [r7, #4]
 80171a6:	f000 fc4b 	bl	8017a40 <USBD_GetConfig>
          break;
 80171aa:	e013      	b.n	80171d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80171ac:	6839      	ldr	r1, [r7, #0]
 80171ae:	6878      	ldr	r0, [r7, #4]
 80171b0:	f000 fc7c 	bl	8017aac <USBD_GetStatus>
          break;
 80171b4:	e00e      	b.n	80171d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80171b6:	6839      	ldr	r1, [r7, #0]
 80171b8:	6878      	ldr	r0, [r7, #4]
 80171ba:	f000 fcab 	bl	8017b14 <USBD_SetFeature>
          break;
 80171be:	e009      	b.n	80171d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80171c0:	6839      	ldr	r1, [r7, #0]
 80171c2:	6878      	ldr	r0, [r7, #4]
 80171c4:	f000 fcba 	bl	8017b3c <USBD_ClrFeature>
          break;
 80171c8:	e004      	b.n	80171d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80171ca:	6839      	ldr	r1, [r7, #0]
 80171cc:	6878      	ldr	r0, [r7, #4]
 80171ce:	f000 fd11 	bl	8017bf4 <USBD_CtlError>
          break;
 80171d2:	bf00      	nop
      }
      break;
 80171d4:	e004      	b.n	80171e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80171d6:	6839      	ldr	r1, [r7, #0]
 80171d8:	6878      	ldr	r0, [r7, #4]
 80171da:	f000 fd0b 	bl	8017bf4 <USBD_CtlError>
      break;
 80171de:	bf00      	nop
  }

  return ret;
 80171e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80171e2:	4618      	mov	r0, r3
 80171e4:	3710      	adds	r7, #16
 80171e6:	46bd      	mov	sp, r7
 80171e8:	bd80      	pop	{r7, pc}
 80171ea:	bf00      	nop

080171ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b084      	sub	sp, #16
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
 80171f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80171f6:	2300      	movs	r3, #0
 80171f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80171fa:	683b      	ldr	r3, [r7, #0]
 80171fc:	781b      	ldrb	r3, [r3, #0]
 80171fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017202:	2b40      	cmp	r3, #64	; 0x40
 8017204:	d005      	beq.n	8017212 <USBD_StdItfReq+0x26>
 8017206:	2b40      	cmp	r3, #64	; 0x40
 8017208:	d82f      	bhi.n	801726a <USBD_StdItfReq+0x7e>
 801720a:	2b00      	cmp	r3, #0
 801720c:	d001      	beq.n	8017212 <USBD_StdItfReq+0x26>
 801720e:	2b20      	cmp	r3, #32
 8017210:	d12b      	bne.n	801726a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017218:	b2db      	uxtb	r3, r3
 801721a:	3b01      	subs	r3, #1
 801721c:	2b02      	cmp	r3, #2
 801721e:	d81d      	bhi.n	801725c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8017220:	683b      	ldr	r3, [r7, #0]
 8017222:	889b      	ldrh	r3, [r3, #4]
 8017224:	b2db      	uxtb	r3, r3
 8017226:	2b01      	cmp	r3, #1
 8017228:	d813      	bhi.n	8017252 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017230:	689b      	ldr	r3, [r3, #8]
 8017232:	6839      	ldr	r1, [r7, #0]
 8017234:	6878      	ldr	r0, [r7, #4]
 8017236:	4798      	blx	r3
 8017238:	4603      	mov	r3, r0
 801723a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801723c:	683b      	ldr	r3, [r7, #0]
 801723e:	88db      	ldrh	r3, [r3, #6]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d110      	bne.n	8017266 <USBD_StdItfReq+0x7a>
 8017244:	7bfb      	ldrb	r3, [r7, #15]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d10d      	bne.n	8017266 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801724a:	6878      	ldr	r0, [r7, #4]
 801724c:	f000 fd9d 	bl	8017d8a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017250:	e009      	b.n	8017266 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8017252:	6839      	ldr	r1, [r7, #0]
 8017254:	6878      	ldr	r0, [r7, #4]
 8017256:	f000 fccd 	bl	8017bf4 <USBD_CtlError>
          break;
 801725a:	e004      	b.n	8017266 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801725c:	6839      	ldr	r1, [r7, #0]
 801725e:	6878      	ldr	r0, [r7, #4]
 8017260:	f000 fcc8 	bl	8017bf4 <USBD_CtlError>
          break;
 8017264:	e000      	b.n	8017268 <USBD_StdItfReq+0x7c>
          break;
 8017266:	bf00      	nop
      }
      break;
 8017268:	e004      	b.n	8017274 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801726a:	6839      	ldr	r1, [r7, #0]
 801726c:	6878      	ldr	r0, [r7, #4]
 801726e:	f000 fcc1 	bl	8017bf4 <USBD_CtlError>
      break;
 8017272:	bf00      	nop
  }

  return ret;
 8017274:	7bfb      	ldrb	r3, [r7, #15]
}
 8017276:	4618      	mov	r0, r3
 8017278:	3710      	adds	r7, #16
 801727a:	46bd      	mov	sp, r7
 801727c:	bd80      	pop	{r7, pc}

0801727e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801727e:	b580      	push	{r7, lr}
 8017280:	b084      	sub	sp, #16
 8017282:	af00      	add	r7, sp, #0
 8017284:	6078      	str	r0, [r7, #4]
 8017286:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8017288:	2300      	movs	r3, #0
 801728a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801728c:	683b      	ldr	r3, [r7, #0]
 801728e:	889b      	ldrh	r3, [r3, #4]
 8017290:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017292:	683b      	ldr	r3, [r7, #0]
 8017294:	781b      	ldrb	r3, [r3, #0]
 8017296:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801729a:	2b40      	cmp	r3, #64	; 0x40
 801729c:	d007      	beq.n	80172ae <USBD_StdEPReq+0x30>
 801729e:	2b40      	cmp	r3, #64	; 0x40
 80172a0:	f200 8145 	bhi.w	801752e <USBD_StdEPReq+0x2b0>
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d00c      	beq.n	80172c2 <USBD_StdEPReq+0x44>
 80172a8:	2b20      	cmp	r3, #32
 80172aa:	f040 8140 	bne.w	801752e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80172b4:	689b      	ldr	r3, [r3, #8]
 80172b6:	6839      	ldr	r1, [r7, #0]
 80172b8:	6878      	ldr	r0, [r7, #4]
 80172ba:	4798      	blx	r3
 80172bc:	4603      	mov	r3, r0
 80172be:	73fb      	strb	r3, [r7, #15]
      break;
 80172c0:	e13a      	b.n	8017538 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	785b      	ldrb	r3, [r3, #1]
 80172c6:	2b03      	cmp	r3, #3
 80172c8:	d007      	beq.n	80172da <USBD_StdEPReq+0x5c>
 80172ca:	2b03      	cmp	r3, #3
 80172cc:	f300 8129 	bgt.w	8017522 <USBD_StdEPReq+0x2a4>
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d07f      	beq.n	80173d4 <USBD_StdEPReq+0x156>
 80172d4:	2b01      	cmp	r3, #1
 80172d6:	d03c      	beq.n	8017352 <USBD_StdEPReq+0xd4>
 80172d8:	e123      	b.n	8017522 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80172e0:	b2db      	uxtb	r3, r3
 80172e2:	2b02      	cmp	r3, #2
 80172e4:	d002      	beq.n	80172ec <USBD_StdEPReq+0x6e>
 80172e6:	2b03      	cmp	r3, #3
 80172e8:	d016      	beq.n	8017318 <USBD_StdEPReq+0x9a>
 80172ea:	e02c      	b.n	8017346 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80172ec:	7bbb      	ldrb	r3, [r7, #14]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d00d      	beq.n	801730e <USBD_StdEPReq+0x90>
 80172f2:	7bbb      	ldrb	r3, [r7, #14]
 80172f4:	2b80      	cmp	r3, #128	; 0x80
 80172f6:	d00a      	beq.n	801730e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80172f8:	7bbb      	ldrb	r3, [r7, #14]
 80172fa:	4619      	mov	r1, r3
 80172fc:	6878      	ldr	r0, [r7, #4]
 80172fe:	f001 f9b7 	bl	8018670 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017302:	2180      	movs	r1, #128	; 0x80
 8017304:	6878      	ldr	r0, [r7, #4]
 8017306:	f001 f9b3 	bl	8018670 <USBD_LL_StallEP>
 801730a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801730c:	e020      	b.n	8017350 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801730e:	6839      	ldr	r1, [r7, #0]
 8017310:	6878      	ldr	r0, [r7, #4]
 8017312:	f000 fc6f 	bl	8017bf4 <USBD_CtlError>
              break;
 8017316:	e01b      	b.n	8017350 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017318:	683b      	ldr	r3, [r7, #0]
 801731a:	885b      	ldrh	r3, [r3, #2]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d10e      	bne.n	801733e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017320:	7bbb      	ldrb	r3, [r7, #14]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d00b      	beq.n	801733e <USBD_StdEPReq+0xc0>
 8017326:	7bbb      	ldrb	r3, [r7, #14]
 8017328:	2b80      	cmp	r3, #128	; 0x80
 801732a:	d008      	beq.n	801733e <USBD_StdEPReq+0xc0>
 801732c:	683b      	ldr	r3, [r7, #0]
 801732e:	88db      	ldrh	r3, [r3, #6]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d104      	bne.n	801733e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8017334:	7bbb      	ldrb	r3, [r7, #14]
 8017336:	4619      	mov	r1, r3
 8017338:	6878      	ldr	r0, [r7, #4]
 801733a:	f001 f999 	bl	8018670 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	f000 fd23 	bl	8017d8a <USBD_CtlSendStatus>

              break;
 8017344:	e004      	b.n	8017350 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8017346:	6839      	ldr	r1, [r7, #0]
 8017348:	6878      	ldr	r0, [r7, #4]
 801734a:	f000 fc53 	bl	8017bf4 <USBD_CtlError>
              break;
 801734e:	bf00      	nop
          }
          break;
 8017350:	e0ec      	b.n	801752c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017358:	b2db      	uxtb	r3, r3
 801735a:	2b02      	cmp	r3, #2
 801735c:	d002      	beq.n	8017364 <USBD_StdEPReq+0xe6>
 801735e:	2b03      	cmp	r3, #3
 8017360:	d016      	beq.n	8017390 <USBD_StdEPReq+0x112>
 8017362:	e030      	b.n	80173c6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017364:	7bbb      	ldrb	r3, [r7, #14]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d00d      	beq.n	8017386 <USBD_StdEPReq+0x108>
 801736a:	7bbb      	ldrb	r3, [r7, #14]
 801736c:	2b80      	cmp	r3, #128	; 0x80
 801736e:	d00a      	beq.n	8017386 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017370:	7bbb      	ldrb	r3, [r7, #14]
 8017372:	4619      	mov	r1, r3
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f001 f97b 	bl	8018670 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801737a:	2180      	movs	r1, #128	; 0x80
 801737c:	6878      	ldr	r0, [r7, #4]
 801737e:	f001 f977 	bl	8018670 <USBD_LL_StallEP>
 8017382:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017384:	e025      	b.n	80173d2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8017386:	6839      	ldr	r1, [r7, #0]
 8017388:	6878      	ldr	r0, [r7, #4]
 801738a:	f000 fc33 	bl	8017bf4 <USBD_CtlError>
              break;
 801738e:	e020      	b.n	80173d2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	885b      	ldrh	r3, [r3, #2]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d11b      	bne.n	80173d0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017398:	7bbb      	ldrb	r3, [r7, #14]
 801739a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d004      	beq.n	80173ac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80173a2:	7bbb      	ldrb	r3, [r7, #14]
 80173a4:	4619      	mov	r1, r3
 80173a6:	6878      	ldr	r0, [r7, #4]
 80173a8:	f001 f998 	bl	80186dc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80173ac:	6878      	ldr	r0, [r7, #4]
 80173ae:	f000 fcec 	bl	8017d8a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80173b8:	689b      	ldr	r3, [r3, #8]
 80173ba:	6839      	ldr	r1, [r7, #0]
 80173bc:	6878      	ldr	r0, [r7, #4]
 80173be:	4798      	blx	r3
 80173c0:	4603      	mov	r3, r0
 80173c2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80173c4:	e004      	b.n	80173d0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80173c6:	6839      	ldr	r1, [r7, #0]
 80173c8:	6878      	ldr	r0, [r7, #4]
 80173ca:	f000 fc13 	bl	8017bf4 <USBD_CtlError>
              break;
 80173ce:	e000      	b.n	80173d2 <USBD_StdEPReq+0x154>
              break;
 80173d0:	bf00      	nop
          }
          break;
 80173d2:	e0ab      	b.n	801752c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80173da:	b2db      	uxtb	r3, r3
 80173dc:	2b02      	cmp	r3, #2
 80173de:	d002      	beq.n	80173e6 <USBD_StdEPReq+0x168>
 80173e0:	2b03      	cmp	r3, #3
 80173e2:	d032      	beq.n	801744a <USBD_StdEPReq+0x1cc>
 80173e4:	e097      	b.n	8017516 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80173e6:	7bbb      	ldrb	r3, [r7, #14]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d007      	beq.n	80173fc <USBD_StdEPReq+0x17e>
 80173ec:	7bbb      	ldrb	r3, [r7, #14]
 80173ee:	2b80      	cmp	r3, #128	; 0x80
 80173f0:	d004      	beq.n	80173fc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80173f2:	6839      	ldr	r1, [r7, #0]
 80173f4:	6878      	ldr	r0, [r7, #4]
 80173f6:	f000 fbfd 	bl	8017bf4 <USBD_CtlError>
                break;
 80173fa:	e091      	b.n	8017520 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80173fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017400:	2b00      	cmp	r3, #0
 8017402:	da0b      	bge.n	801741c <USBD_StdEPReq+0x19e>
 8017404:	7bbb      	ldrb	r3, [r7, #14]
 8017406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801740a:	4613      	mov	r3, r2
 801740c:	009b      	lsls	r3, r3, #2
 801740e:	4413      	add	r3, r2
 8017410:	009b      	lsls	r3, r3, #2
 8017412:	3310      	adds	r3, #16
 8017414:	687a      	ldr	r2, [r7, #4]
 8017416:	4413      	add	r3, r2
 8017418:	3304      	adds	r3, #4
 801741a:	e00b      	b.n	8017434 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801741c:	7bbb      	ldrb	r3, [r7, #14]
 801741e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017422:	4613      	mov	r3, r2
 8017424:	009b      	lsls	r3, r3, #2
 8017426:	4413      	add	r3, r2
 8017428:	009b      	lsls	r3, r3, #2
 801742a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801742e:	687a      	ldr	r2, [r7, #4]
 8017430:	4413      	add	r3, r2
 8017432:	3304      	adds	r3, #4
 8017434:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017436:	68bb      	ldr	r3, [r7, #8]
 8017438:	2200      	movs	r2, #0
 801743a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801743c:	68bb      	ldr	r3, [r7, #8]
 801743e:	2202      	movs	r2, #2
 8017440:	4619      	mov	r1, r3
 8017442:	6878      	ldr	r0, [r7, #4]
 8017444:	f000 fc47 	bl	8017cd6 <USBD_CtlSendData>
              break;
 8017448:	e06a      	b.n	8017520 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801744a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801744e:	2b00      	cmp	r3, #0
 8017450:	da11      	bge.n	8017476 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017452:	7bbb      	ldrb	r3, [r7, #14]
 8017454:	f003 020f 	and.w	r2, r3, #15
 8017458:	6879      	ldr	r1, [r7, #4]
 801745a:	4613      	mov	r3, r2
 801745c:	009b      	lsls	r3, r3, #2
 801745e:	4413      	add	r3, r2
 8017460:	009b      	lsls	r3, r3, #2
 8017462:	440b      	add	r3, r1
 8017464:	3324      	adds	r3, #36	; 0x24
 8017466:	881b      	ldrh	r3, [r3, #0]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d117      	bne.n	801749c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801746c:	6839      	ldr	r1, [r7, #0]
 801746e:	6878      	ldr	r0, [r7, #4]
 8017470:	f000 fbc0 	bl	8017bf4 <USBD_CtlError>
                  break;
 8017474:	e054      	b.n	8017520 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017476:	7bbb      	ldrb	r3, [r7, #14]
 8017478:	f003 020f 	and.w	r2, r3, #15
 801747c:	6879      	ldr	r1, [r7, #4]
 801747e:	4613      	mov	r3, r2
 8017480:	009b      	lsls	r3, r3, #2
 8017482:	4413      	add	r3, r2
 8017484:	009b      	lsls	r3, r3, #2
 8017486:	440b      	add	r3, r1
 8017488:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801748c:	881b      	ldrh	r3, [r3, #0]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d104      	bne.n	801749c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8017492:	6839      	ldr	r1, [r7, #0]
 8017494:	6878      	ldr	r0, [r7, #4]
 8017496:	f000 fbad 	bl	8017bf4 <USBD_CtlError>
                  break;
 801749a:	e041      	b.n	8017520 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801749c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	da0b      	bge.n	80174bc <USBD_StdEPReq+0x23e>
 80174a4:	7bbb      	ldrb	r3, [r7, #14]
 80174a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80174aa:	4613      	mov	r3, r2
 80174ac:	009b      	lsls	r3, r3, #2
 80174ae:	4413      	add	r3, r2
 80174b0:	009b      	lsls	r3, r3, #2
 80174b2:	3310      	adds	r3, #16
 80174b4:	687a      	ldr	r2, [r7, #4]
 80174b6:	4413      	add	r3, r2
 80174b8:	3304      	adds	r3, #4
 80174ba:	e00b      	b.n	80174d4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80174bc:	7bbb      	ldrb	r3, [r7, #14]
 80174be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80174c2:	4613      	mov	r3, r2
 80174c4:	009b      	lsls	r3, r3, #2
 80174c6:	4413      	add	r3, r2
 80174c8:	009b      	lsls	r3, r3, #2
 80174ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80174ce:	687a      	ldr	r2, [r7, #4]
 80174d0:	4413      	add	r3, r2
 80174d2:	3304      	adds	r3, #4
 80174d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80174d6:	7bbb      	ldrb	r3, [r7, #14]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d002      	beq.n	80174e2 <USBD_StdEPReq+0x264>
 80174dc:	7bbb      	ldrb	r3, [r7, #14]
 80174de:	2b80      	cmp	r3, #128	; 0x80
 80174e0:	d103      	bne.n	80174ea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80174e2:	68bb      	ldr	r3, [r7, #8]
 80174e4:	2200      	movs	r2, #0
 80174e6:	601a      	str	r2, [r3, #0]
 80174e8:	e00e      	b.n	8017508 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80174ea:	7bbb      	ldrb	r3, [r7, #14]
 80174ec:	4619      	mov	r1, r3
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	f001 f92a 	bl	8018748 <USBD_LL_IsStallEP>
 80174f4:	4603      	mov	r3, r0
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d003      	beq.n	8017502 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80174fa:	68bb      	ldr	r3, [r7, #8]
 80174fc:	2201      	movs	r2, #1
 80174fe:	601a      	str	r2, [r3, #0]
 8017500:	e002      	b.n	8017508 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8017502:	68bb      	ldr	r3, [r7, #8]
 8017504:	2200      	movs	r2, #0
 8017506:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017508:	68bb      	ldr	r3, [r7, #8]
 801750a:	2202      	movs	r2, #2
 801750c:	4619      	mov	r1, r3
 801750e:	6878      	ldr	r0, [r7, #4]
 8017510:	f000 fbe1 	bl	8017cd6 <USBD_CtlSendData>
              break;
 8017514:	e004      	b.n	8017520 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8017516:	6839      	ldr	r1, [r7, #0]
 8017518:	6878      	ldr	r0, [r7, #4]
 801751a:	f000 fb6b 	bl	8017bf4 <USBD_CtlError>
              break;
 801751e:	bf00      	nop
          }
          break;
 8017520:	e004      	b.n	801752c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8017522:	6839      	ldr	r1, [r7, #0]
 8017524:	6878      	ldr	r0, [r7, #4]
 8017526:	f000 fb65 	bl	8017bf4 <USBD_CtlError>
          break;
 801752a:	bf00      	nop
      }
      break;
 801752c:	e004      	b.n	8017538 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801752e:	6839      	ldr	r1, [r7, #0]
 8017530:	6878      	ldr	r0, [r7, #4]
 8017532:	f000 fb5f 	bl	8017bf4 <USBD_CtlError>
      break;
 8017536:	bf00      	nop
  }

  return ret;
 8017538:	7bfb      	ldrb	r3, [r7, #15]
}
 801753a:	4618      	mov	r0, r3
 801753c:	3710      	adds	r7, #16
 801753e:	46bd      	mov	sp, r7
 8017540:	bd80      	pop	{r7, pc}
	...

08017544 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b084      	sub	sp, #16
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
 801754c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801754e:	2300      	movs	r3, #0
 8017550:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017552:	2300      	movs	r3, #0
 8017554:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017556:	2300      	movs	r3, #0
 8017558:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	885b      	ldrh	r3, [r3, #2]
 801755e:	0a1b      	lsrs	r3, r3, #8
 8017560:	b29b      	uxth	r3, r3
 8017562:	3b01      	subs	r3, #1
 8017564:	2b0e      	cmp	r3, #14
 8017566:	f200 8152 	bhi.w	801780e <USBD_GetDescriptor+0x2ca>
 801756a:	a201      	add	r2, pc, #4	; (adr r2, 8017570 <USBD_GetDescriptor+0x2c>)
 801756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017570:	080175e1 	.word	0x080175e1
 8017574:	080175f9 	.word	0x080175f9
 8017578:	08017639 	.word	0x08017639
 801757c:	0801780f 	.word	0x0801780f
 8017580:	0801780f 	.word	0x0801780f
 8017584:	080177af 	.word	0x080177af
 8017588:	080177db 	.word	0x080177db
 801758c:	0801780f 	.word	0x0801780f
 8017590:	0801780f 	.word	0x0801780f
 8017594:	0801780f 	.word	0x0801780f
 8017598:	0801780f 	.word	0x0801780f
 801759c:	0801780f 	.word	0x0801780f
 80175a0:	0801780f 	.word	0x0801780f
 80175a4:	0801780f 	.word	0x0801780f
 80175a8:	080175ad 	.word	0x080175ad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80175b2:	69db      	ldr	r3, [r3, #28]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d00b      	beq.n	80175d0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80175be:	69db      	ldr	r3, [r3, #28]
 80175c0:	687a      	ldr	r2, [r7, #4]
 80175c2:	7c12      	ldrb	r2, [r2, #16]
 80175c4:	f107 0108 	add.w	r1, r7, #8
 80175c8:	4610      	mov	r0, r2
 80175ca:	4798      	blx	r3
 80175cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80175ce:	e126      	b.n	801781e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80175d0:	6839      	ldr	r1, [r7, #0]
 80175d2:	6878      	ldr	r0, [r7, #4]
 80175d4:	f000 fb0e 	bl	8017bf4 <USBD_CtlError>
        err++;
 80175d8:	7afb      	ldrb	r3, [r7, #11]
 80175da:	3301      	adds	r3, #1
 80175dc:	72fb      	strb	r3, [r7, #11]
      break;
 80175de:	e11e      	b.n	801781e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	687a      	ldr	r2, [r7, #4]
 80175ea:	7c12      	ldrb	r2, [r2, #16]
 80175ec:	f107 0108 	add.w	r1, r7, #8
 80175f0:	4610      	mov	r0, r2
 80175f2:	4798      	blx	r3
 80175f4:	60f8      	str	r0, [r7, #12]
      break;
 80175f6:	e112      	b.n	801781e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	7c1b      	ldrb	r3, [r3, #16]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d10d      	bne.n	801761c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017608:	f107 0208 	add.w	r2, r7, #8
 801760c:	4610      	mov	r0, r2
 801760e:	4798      	blx	r3
 8017610:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	3301      	adds	r3, #1
 8017616:	2202      	movs	r2, #2
 8017618:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801761a:	e100      	b.n	801781e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017624:	f107 0208 	add.w	r2, r7, #8
 8017628:	4610      	mov	r0, r2
 801762a:	4798      	blx	r3
 801762c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	3301      	adds	r3, #1
 8017632:	2202      	movs	r2, #2
 8017634:	701a      	strb	r2, [r3, #0]
      break;
 8017636:	e0f2      	b.n	801781e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017638:	683b      	ldr	r3, [r7, #0]
 801763a:	885b      	ldrh	r3, [r3, #2]
 801763c:	b2db      	uxtb	r3, r3
 801763e:	2b05      	cmp	r3, #5
 8017640:	f200 80ac 	bhi.w	801779c <USBD_GetDescriptor+0x258>
 8017644:	a201      	add	r2, pc, #4	; (adr r2, 801764c <USBD_GetDescriptor+0x108>)
 8017646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801764a:	bf00      	nop
 801764c:	08017665 	.word	0x08017665
 8017650:	08017699 	.word	0x08017699
 8017654:	080176cd 	.word	0x080176cd
 8017658:	08017701 	.word	0x08017701
 801765c:	08017735 	.word	0x08017735
 8017660:	08017769 	.word	0x08017769
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801766a:	685b      	ldr	r3, [r3, #4]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d00b      	beq.n	8017688 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017676:	685b      	ldr	r3, [r3, #4]
 8017678:	687a      	ldr	r2, [r7, #4]
 801767a:	7c12      	ldrb	r2, [r2, #16]
 801767c:	f107 0108 	add.w	r1, r7, #8
 8017680:	4610      	mov	r0, r2
 8017682:	4798      	blx	r3
 8017684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017686:	e091      	b.n	80177ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017688:	6839      	ldr	r1, [r7, #0]
 801768a:	6878      	ldr	r0, [r7, #4]
 801768c:	f000 fab2 	bl	8017bf4 <USBD_CtlError>
            err++;
 8017690:	7afb      	ldrb	r3, [r7, #11]
 8017692:	3301      	adds	r3, #1
 8017694:	72fb      	strb	r3, [r7, #11]
          break;
 8017696:	e089      	b.n	80177ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801769e:	689b      	ldr	r3, [r3, #8]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d00b      	beq.n	80176bc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176aa:	689b      	ldr	r3, [r3, #8]
 80176ac:	687a      	ldr	r2, [r7, #4]
 80176ae:	7c12      	ldrb	r2, [r2, #16]
 80176b0:	f107 0108 	add.w	r1, r7, #8
 80176b4:	4610      	mov	r0, r2
 80176b6:	4798      	blx	r3
 80176b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80176ba:	e077      	b.n	80177ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80176bc:	6839      	ldr	r1, [r7, #0]
 80176be:	6878      	ldr	r0, [r7, #4]
 80176c0:	f000 fa98 	bl	8017bf4 <USBD_CtlError>
            err++;
 80176c4:	7afb      	ldrb	r3, [r7, #11]
 80176c6:	3301      	adds	r3, #1
 80176c8:	72fb      	strb	r3, [r7, #11]
          break;
 80176ca:	e06f      	b.n	80177ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176d2:	68db      	ldr	r3, [r3, #12]
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d00b      	beq.n	80176f0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80176de:	68db      	ldr	r3, [r3, #12]
 80176e0:	687a      	ldr	r2, [r7, #4]
 80176e2:	7c12      	ldrb	r2, [r2, #16]
 80176e4:	f107 0108 	add.w	r1, r7, #8
 80176e8:	4610      	mov	r0, r2
 80176ea:	4798      	blx	r3
 80176ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80176ee:	e05d      	b.n	80177ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80176f0:	6839      	ldr	r1, [r7, #0]
 80176f2:	6878      	ldr	r0, [r7, #4]
 80176f4:	f000 fa7e 	bl	8017bf4 <USBD_CtlError>
            err++;
 80176f8:	7afb      	ldrb	r3, [r7, #11]
 80176fa:	3301      	adds	r3, #1
 80176fc:	72fb      	strb	r3, [r7, #11]
          break;
 80176fe:	e055      	b.n	80177ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017706:	691b      	ldr	r3, [r3, #16]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d00b      	beq.n	8017724 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017712:	691b      	ldr	r3, [r3, #16]
 8017714:	687a      	ldr	r2, [r7, #4]
 8017716:	7c12      	ldrb	r2, [r2, #16]
 8017718:	f107 0108 	add.w	r1, r7, #8
 801771c:	4610      	mov	r0, r2
 801771e:	4798      	blx	r3
 8017720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017722:	e043      	b.n	80177ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017724:	6839      	ldr	r1, [r7, #0]
 8017726:	6878      	ldr	r0, [r7, #4]
 8017728:	f000 fa64 	bl	8017bf4 <USBD_CtlError>
            err++;
 801772c:	7afb      	ldrb	r3, [r7, #11]
 801772e:	3301      	adds	r3, #1
 8017730:	72fb      	strb	r3, [r7, #11]
          break;
 8017732:	e03b      	b.n	80177ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801773a:	695b      	ldr	r3, [r3, #20]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d00b      	beq.n	8017758 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017746:	695b      	ldr	r3, [r3, #20]
 8017748:	687a      	ldr	r2, [r7, #4]
 801774a:	7c12      	ldrb	r2, [r2, #16]
 801774c:	f107 0108 	add.w	r1, r7, #8
 8017750:	4610      	mov	r0, r2
 8017752:	4798      	blx	r3
 8017754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017756:	e029      	b.n	80177ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017758:	6839      	ldr	r1, [r7, #0]
 801775a:	6878      	ldr	r0, [r7, #4]
 801775c:	f000 fa4a 	bl	8017bf4 <USBD_CtlError>
            err++;
 8017760:	7afb      	ldrb	r3, [r7, #11]
 8017762:	3301      	adds	r3, #1
 8017764:	72fb      	strb	r3, [r7, #11]
          break;
 8017766:	e021      	b.n	80177ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801776e:	699b      	ldr	r3, [r3, #24]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d00b      	beq.n	801778c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801777a:	699b      	ldr	r3, [r3, #24]
 801777c:	687a      	ldr	r2, [r7, #4]
 801777e:	7c12      	ldrb	r2, [r2, #16]
 8017780:	f107 0108 	add.w	r1, r7, #8
 8017784:	4610      	mov	r0, r2
 8017786:	4798      	blx	r3
 8017788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801778a:	e00f      	b.n	80177ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801778c:	6839      	ldr	r1, [r7, #0]
 801778e:	6878      	ldr	r0, [r7, #4]
 8017790:	f000 fa30 	bl	8017bf4 <USBD_CtlError>
            err++;
 8017794:	7afb      	ldrb	r3, [r7, #11]
 8017796:	3301      	adds	r3, #1
 8017798:	72fb      	strb	r3, [r7, #11]
          break;
 801779a:	e007      	b.n	80177ac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801779c:	6839      	ldr	r1, [r7, #0]
 801779e:	6878      	ldr	r0, [r7, #4]
 80177a0:	f000 fa28 	bl	8017bf4 <USBD_CtlError>
          err++;
 80177a4:	7afb      	ldrb	r3, [r7, #11]
 80177a6:	3301      	adds	r3, #1
 80177a8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80177aa:	bf00      	nop
      }
      break;
 80177ac:	e037      	b.n	801781e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	7c1b      	ldrb	r3, [r3, #16]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d109      	bne.n	80177ca <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80177bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80177be:	f107 0208 	add.w	r2, r7, #8
 80177c2:	4610      	mov	r0, r2
 80177c4:	4798      	blx	r3
 80177c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80177c8:	e029      	b.n	801781e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80177ca:	6839      	ldr	r1, [r7, #0]
 80177cc:	6878      	ldr	r0, [r7, #4]
 80177ce:	f000 fa11 	bl	8017bf4 <USBD_CtlError>
        err++;
 80177d2:	7afb      	ldrb	r3, [r7, #11]
 80177d4:	3301      	adds	r3, #1
 80177d6:	72fb      	strb	r3, [r7, #11]
      break;
 80177d8:	e021      	b.n	801781e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	7c1b      	ldrb	r3, [r3, #16]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d10d      	bne.n	80177fe <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80177e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177ea:	f107 0208 	add.w	r2, r7, #8
 80177ee:	4610      	mov	r0, r2
 80177f0:	4798      	blx	r3
 80177f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	3301      	adds	r3, #1
 80177f8:	2207      	movs	r2, #7
 80177fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80177fc:	e00f      	b.n	801781e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80177fe:	6839      	ldr	r1, [r7, #0]
 8017800:	6878      	ldr	r0, [r7, #4]
 8017802:	f000 f9f7 	bl	8017bf4 <USBD_CtlError>
        err++;
 8017806:	7afb      	ldrb	r3, [r7, #11]
 8017808:	3301      	adds	r3, #1
 801780a:	72fb      	strb	r3, [r7, #11]
      break;
 801780c:	e007      	b.n	801781e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801780e:	6839      	ldr	r1, [r7, #0]
 8017810:	6878      	ldr	r0, [r7, #4]
 8017812:	f000 f9ef 	bl	8017bf4 <USBD_CtlError>
      err++;
 8017816:	7afb      	ldrb	r3, [r7, #11]
 8017818:	3301      	adds	r3, #1
 801781a:	72fb      	strb	r3, [r7, #11]
      break;
 801781c:	bf00      	nop
  }

  if (err != 0U)
 801781e:	7afb      	ldrb	r3, [r7, #11]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d11e      	bne.n	8017862 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8017824:	683b      	ldr	r3, [r7, #0]
 8017826:	88db      	ldrh	r3, [r3, #6]
 8017828:	2b00      	cmp	r3, #0
 801782a:	d016      	beq.n	801785a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801782c:	893b      	ldrh	r3, [r7, #8]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d00e      	beq.n	8017850 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8017832:	683b      	ldr	r3, [r7, #0]
 8017834:	88da      	ldrh	r2, [r3, #6]
 8017836:	893b      	ldrh	r3, [r7, #8]
 8017838:	4293      	cmp	r3, r2
 801783a:	bf28      	it	cs
 801783c:	4613      	movcs	r3, r2
 801783e:	b29b      	uxth	r3, r3
 8017840:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017842:	893b      	ldrh	r3, [r7, #8]
 8017844:	461a      	mov	r2, r3
 8017846:	68f9      	ldr	r1, [r7, #12]
 8017848:	6878      	ldr	r0, [r7, #4]
 801784a:	f000 fa44 	bl	8017cd6 <USBD_CtlSendData>
 801784e:	e009      	b.n	8017864 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017850:	6839      	ldr	r1, [r7, #0]
 8017852:	6878      	ldr	r0, [r7, #4]
 8017854:	f000 f9ce 	bl	8017bf4 <USBD_CtlError>
 8017858:	e004      	b.n	8017864 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801785a:	6878      	ldr	r0, [r7, #4]
 801785c:	f000 fa95 	bl	8017d8a <USBD_CtlSendStatus>
 8017860:	e000      	b.n	8017864 <USBD_GetDescriptor+0x320>
    return;
 8017862:	bf00      	nop
  }
}
 8017864:	3710      	adds	r7, #16
 8017866:	46bd      	mov	sp, r7
 8017868:	bd80      	pop	{r7, pc}
 801786a:	bf00      	nop

0801786c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b084      	sub	sp, #16
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
 8017874:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017876:	683b      	ldr	r3, [r7, #0]
 8017878:	889b      	ldrh	r3, [r3, #4]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d131      	bne.n	80178e2 <USBD_SetAddress+0x76>
 801787e:	683b      	ldr	r3, [r7, #0]
 8017880:	88db      	ldrh	r3, [r3, #6]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d12d      	bne.n	80178e2 <USBD_SetAddress+0x76>
 8017886:	683b      	ldr	r3, [r7, #0]
 8017888:	885b      	ldrh	r3, [r3, #2]
 801788a:	2b7f      	cmp	r3, #127	; 0x7f
 801788c:	d829      	bhi.n	80178e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	885b      	ldrh	r3, [r3, #2]
 8017892:	b2db      	uxtb	r3, r3
 8017894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017898:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80178a0:	b2db      	uxtb	r3, r3
 80178a2:	2b03      	cmp	r3, #3
 80178a4:	d104      	bne.n	80178b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80178a6:	6839      	ldr	r1, [r7, #0]
 80178a8:	6878      	ldr	r0, [r7, #4]
 80178aa:	f000 f9a3 	bl	8017bf4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80178ae:	e01d      	b.n	80178ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	7bfa      	ldrb	r2, [r7, #15]
 80178b4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80178b8:	7bfb      	ldrb	r3, [r7, #15]
 80178ba:	4619      	mov	r1, r3
 80178bc:	6878      	ldr	r0, [r7, #4]
 80178be:	f000 ff6f 	bl	80187a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80178c2:	6878      	ldr	r0, [r7, #4]
 80178c4:	f000 fa61 	bl	8017d8a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80178c8:	7bfb      	ldrb	r3, [r7, #15]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d004      	beq.n	80178d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	2202      	movs	r2, #2
 80178d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80178d6:	e009      	b.n	80178ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	2201      	movs	r2, #1
 80178dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80178e0:	e004      	b.n	80178ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80178e2:	6839      	ldr	r1, [r7, #0]
 80178e4:	6878      	ldr	r0, [r7, #4]
 80178e6:	f000 f985 	bl	8017bf4 <USBD_CtlError>
  }
}
 80178ea:	bf00      	nop
 80178ec:	bf00      	nop
 80178ee:	3710      	adds	r7, #16
 80178f0:	46bd      	mov	sp, r7
 80178f2:	bd80      	pop	{r7, pc}

080178f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178f4:	b580      	push	{r7, lr}
 80178f6:	b084      	sub	sp, #16
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
 80178fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80178fe:	2300      	movs	r3, #0
 8017900:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017902:	683b      	ldr	r3, [r7, #0]
 8017904:	885b      	ldrh	r3, [r3, #2]
 8017906:	b2da      	uxtb	r2, r3
 8017908:	4b4c      	ldr	r3, [pc, #304]	; (8017a3c <USBD_SetConfig+0x148>)
 801790a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801790c:	4b4b      	ldr	r3, [pc, #300]	; (8017a3c <USBD_SetConfig+0x148>)
 801790e:	781b      	ldrb	r3, [r3, #0]
 8017910:	2b01      	cmp	r3, #1
 8017912:	d905      	bls.n	8017920 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017914:	6839      	ldr	r1, [r7, #0]
 8017916:	6878      	ldr	r0, [r7, #4]
 8017918:	f000 f96c 	bl	8017bf4 <USBD_CtlError>
    return USBD_FAIL;
 801791c:	2303      	movs	r3, #3
 801791e:	e088      	b.n	8017a32 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017926:	b2db      	uxtb	r3, r3
 8017928:	2b02      	cmp	r3, #2
 801792a:	d002      	beq.n	8017932 <USBD_SetConfig+0x3e>
 801792c:	2b03      	cmp	r3, #3
 801792e:	d025      	beq.n	801797c <USBD_SetConfig+0x88>
 8017930:	e071      	b.n	8017a16 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017932:	4b42      	ldr	r3, [pc, #264]	; (8017a3c <USBD_SetConfig+0x148>)
 8017934:	781b      	ldrb	r3, [r3, #0]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d01c      	beq.n	8017974 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801793a:	4b40      	ldr	r3, [pc, #256]	; (8017a3c <USBD_SetConfig+0x148>)
 801793c:	781b      	ldrb	r3, [r3, #0]
 801793e:	461a      	mov	r2, r3
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017944:	4b3d      	ldr	r3, [pc, #244]	; (8017a3c <USBD_SetConfig+0x148>)
 8017946:	781b      	ldrb	r3, [r3, #0]
 8017948:	4619      	mov	r1, r3
 801794a:	6878      	ldr	r0, [r7, #4]
 801794c:	f7ff f91e 	bl	8016b8c <USBD_SetClassConfig>
 8017950:	4603      	mov	r3, r0
 8017952:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017954:	7bfb      	ldrb	r3, [r7, #15]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d004      	beq.n	8017964 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801795a:	6839      	ldr	r1, [r7, #0]
 801795c:	6878      	ldr	r0, [r7, #4]
 801795e:	f000 f949 	bl	8017bf4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017962:	e065      	b.n	8017a30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8017964:	6878      	ldr	r0, [r7, #4]
 8017966:	f000 fa10 	bl	8017d8a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	2203      	movs	r2, #3
 801796e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017972:	e05d      	b.n	8017a30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8017974:	6878      	ldr	r0, [r7, #4]
 8017976:	f000 fa08 	bl	8017d8a <USBD_CtlSendStatus>
      break;
 801797a:	e059      	b.n	8017a30 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801797c:	4b2f      	ldr	r3, [pc, #188]	; (8017a3c <USBD_SetConfig+0x148>)
 801797e:	781b      	ldrb	r3, [r3, #0]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d112      	bne.n	80179aa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	2202      	movs	r2, #2
 8017988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801798c:	4b2b      	ldr	r3, [pc, #172]	; (8017a3c <USBD_SetConfig+0x148>)
 801798e:	781b      	ldrb	r3, [r3, #0]
 8017990:	461a      	mov	r2, r3
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017996:	4b29      	ldr	r3, [pc, #164]	; (8017a3c <USBD_SetConfig+0x148>)
 8017998:	781b      	ldrb	r3, [r3, #0]
 801799a:	4619      	mov	r1, r3
 801799c:	6878      	ldr	r0, [r7, #4]
 801799e:	f7ff f911 	bl	8016bc4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80179a2:	6878      	ldr	r0, [r7, #4]
 80179a4:	f000 f9f1 	bl	8017d8a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80179a8:	e042      	b.n	8017a30 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80179aa:	4b24      	ldr	r3, [pc, #144]	; (8017a3c <USBD_SetConfig+0x148>)
 80179ac:	781b      	ldrb	r3, [r3, #0]
 80179ae:	461a      	mov	r2, r3
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	685b      	ldr	r3, [r3, #4]
 80179b4:	429a      	cmp	r2, r3
 80179b6:	d02a      	beq.n	8017a0e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	685b      	ldr	r3, [r3, #4]
 80179bc:	b2db      	uxtb	r3, r3
 80179be:	4619      	mov	r1, r3
 80179c0:	6878      	ldr	r0, [r7, #4]
 80179c2:	f7ff f8ff 	bl	8016bc4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80179c6:	4b1d      	ldr	r3, [pc, #116]	; (8017a3c <USBD_SetConfig+0x148>)
 80179c8:	781b      	ldrb	r3, [r3, #0]
 80179ca:	461a      	mov	r2, r3
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80179d0:	4b1a      	ldr	r3, [pc, #104]	; (8017a3c <USBD_SetConfig+0x148>)
 80179d2:	781b      	ldrb	r3, [r3, #0]
 80179d4:	4619      	mov	r1, r3
 80179d6:	6878      	ldr	r0, [r7, #4]
 80179d8:	f7ff f8d8 	bl	8016b8c <USBD_SetClassConfig>
 80179dc:	4603      	mov	r3, r0
 80179de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80179e0:	7bfb      	ldrb	r3, [r7, #15]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d00f      	beq.n	8017a06 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80179e6:	6839      	ldr	r1, [r7, #0]
 80179e8:	6878      	ldr	r0, [r7, #4]
 80179ea:	f000 f903 	bl	8017bf4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	685b      	ldr	r3, [r3, #4]
 80179f2:	b2db      	uxtb	r3, r3
 80179f4:	4619      	mov	r1, r3
 80179f6:	6878      	ldr	r0, [r7, #4]
 80179f8:	f7ff f8e4 	bl	8016bc4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	2202      	movs	r2, #2
 8017a00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017a04:	e014      	b.n	8017a30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8017a06:	6878      	ldr	r0, [r7, #4]
 8017a08:	f000 f9bf 	bl	8017d8a <USBD_CtlSendStatus>
      break;
 8017a0c:	e010      	b.n	8017a30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8017a0e:	6878      	ldr	r0, [r7, #4]
 8017a10:	f000 f9bb 	bl	8017d8a <USBD_CtlSendStatus>
      break;
 8017a14:	e00c      	b.n	8017a30 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8017a16:	6839      	ldr	r1, [r7, #0]
 8017a18:	6878      	ldr	r0, [r7, #4]
 8017a1a:	f000 f8eb 	bl	8017bf4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017a1e:	4b07      	ldr	r3, [pc, #28]	; (8017a3c <USBD_SetConfig+0x148>)
 8017a20:	781b      	ldrb	r3, [r3, #0]
 8017a22:	4619      	mov	r1, r3
 8017a24:	6878      	ldr	r0, [r7, #4]
 8017a26:	f7ff f8cd 	bl	8016bc4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017a2a:	2303      	movs	r3, #3
 8017a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8017a2e:	bf00      	nop
  }

  return ret;
 8017a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a32:	4618      	mov	r0, r3
 8017a34:	3710      	adds	r7, #16
 8017a36:	46bd      	mov	sp, r7
 8017a38:	bd80      	pop	{r7, pc}
 8017a3a:	bf00      	nop
 8017a3c:	200011c4 	.word	0x200011c4

08017a40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b082      	sub	sp, #8
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
 8017a48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017a4a:	683b      	ldr	r3, [r7, #0]
 8017a4c:	88db      	ldrh	r3, [r3, #6]
 8017a4e:	2b01      	cmp	r3, #1
 8017a50:	d004      	beq.n	8017a5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017a52:	6839      	ldr	r1, [r7, #0]
 8017a54:	6878      	ldr	r0, [r7, #4]
 8017a56:	f000 f8cd 	bl	8017bf4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017a5a:	e023      	b.n	8017aa4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017a62:	b2db      	uxtb	r3, r3
 8017a64:	2b02      	cmp	r3, #2
 8017a66:	dc02      	bgt.n	8017a6e <USBD_GetConfig+0x2e>
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	dc03      	bgt.n	8017a74 <USBD_GetConfig+0x34>
 8017a6c:	e015      	b.n	8017a9a <USBD_GetConfig+0x5a>
 8017a6e:	2b03      	cmp	r3, #3
 8017a70:	d00b      	beq.n	8017a8a <USBD_GetConfig+0x4a>
 8017a72:	e012      	b.n	8017a9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	2200      	movs	r2, #0
 8017a78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	3308      	adds	r3, #8
 8017a7e:	2201      	movs	r2, #1
 8017a80:	4619      	mov	r1, r3
 8017a82:	6878      	ldr	r0, [r7, #4]
 8017a84:	f000 f927 	bl	8017cd6 <USBD_CtlSendData>
        break;
 8017a88:	e00c      	b.n	8017aa4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	3304      	adds	r3, #4
 8017a8e:	2201      	movs	r2, #1
 8017a90:	4619      	mov	r1, r3
 8017a92:	6878      	ldr	r0, [r7, #4]
 8017a94:	f000 f91f 	bl	8017cd6 <USBD_CtlSendData>
        break;
 8017a98:	e004      	b.n	8017aa4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017a9a:	6839      	ldr	r1, [r7, #0]
 8017a9c:	6878      	ldr	r0, [r7, #4]
 8017a9e:	f000 f8a9 	bl	8017bf4 <USBD_CtlError>
        break;
 8017aa2:	bf00      	nop
}
 8017aa4:	bf00      	nop
 8017aa6:	3708      	adds	r7, #8
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	bd80      	pop	{r7, pc}

08017aac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b082      	sub	sp, #8
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
 8017ab4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017abc:	b2db      	uxtb	r3, r3
 8017abe:	3b01      	subs	r3, #1
 8017ac0:	2b02      	cmp	r3, #2
 8017ac2:	d81e      	bhi.n	8017b02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017ac4:	683b      	ldr	r3, [r7, #0]
 8017ac6:	88db      	ldrh	r3, [r3, #6]
 8017ac8:	2b02      	cmp	r3, #2
 8017aca:	d004      	beq.n	8017ad6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017acc:	6839      	ldr	r1, [r7, #0]
 8017ace:	6878      	ldr	r0, [r7, #4]
 8017ad0:	f000 f890 	bl	8017bf4 <USBD_CtlError>
        break;
 8017ad4:	e01a      	b.n	8017b0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	2201      	movs	r2, #1
 8017ada:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d005      	beq.n	8017af2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	68db      	ldr	r3, [r3, #12]
 8017aea:	f043 0202 	orr.w	r2, r3, #2
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	330c      	adds	r3, #12
 8017af6:	2202      	movs	r2, #2
 8017af8:	4619      	mov	r1, r3
 8017afa:	6878      	ldr	r0, [r7, #4]
 8017afc:	f000 f8eb 	bl	8017cd6 <USBD_CtlSendData>
      break;
 8017b00:	e004      	b.n	8017b0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017b02:	6839      	ldr	r1, [r7, #0]
 8017b04:	6878      	ldr	r0, [r7, #4]
 8017b06:	f000 f875 	bl	8017bf4 <USBD_CtlError>
      break;
 8017b0a:	bf00      	nop
  }
}
 8017b0c:	bf00      	nop
 8017b0e:	3708      	adds	r7, #8
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}

08017b14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b082      	sub	sp, #8
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	6078      	str	r0, [r7, #4]
 8017b1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017b1e:	683b      	ldr	r3, [r7, #0]
 8017b20:	885b      	ldrh	r3, [r3, #2]
 8017b22:	2b01      	cmp	r3, #1
 8017b24:	d106      	bne.n	8017b34 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	2201      	movs	r2, #1
 8017b2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017b2e:	6878      	ldr	r0, [r7, #4]
 8017b30:	f000 f92b 	bl	8017d8a <USBD_CtlSendStatus>
  }
}
 8017b34:	bf00      	nop
 8017b36:	3708      	adds	r7, #8
 8017b38:	46bd      	mov	sp, r7
 8017b3a:	bd80      	pop	{r7, pc}

08017b3c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b082      	sub	sp, #8
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	6078      	str	r0, [r7, #4]
 8017b44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017b4c:	b2db      	uxtb	r3, r3
 8017b4e:	3b01      	subs	r3, #1
 8017b50:	2b02      	cmp	r3, #2
 8017b52:	d80b      	bhi.n	8017b6c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017b54:	683b      	ldr	r3, [r7, #0]
 8017b56:	885b      	ldrh	r3, [r3, #2]
 8017b58:	2b01      	cmp	r3, #1
 8017b5a:	d10c      	bne.n	8017b76 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	2200      	movs	r2, #0
 8017b60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017b64:	6878      	ldr	r0, [r7, #4]
 8017b66:	f000 f910 	bl	8017d8a <USBD_CtlSendStatus>
      }
      break;
 8017b6a:	e004      	b.n	8017b76 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017b6c:	6839      	ldr	r1, [r7, #0]
 8017b6e:	6878      	ldr	r0, [r7, #4]
 8017b70:	f000 f840 	bl	8017bf4 <USBD_CtlError>
      break;
 8017b74:	e000      	b.n	8017b78 <USBD_ClrFeature+0x3c>
      break;
 8017b76:	bf00      	nop
  }
}
 8017b78:	bf00      	nop
 8017b7a:	3708      	adds	r7, #8
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	bd80      	pop	{r7, pc}

08017b80 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b084      	sub	sp, #16
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]
 8017b88:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017b8a:	683b      	ldr	r3, [r7, #0]
 8017b8c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	781a      	ldrb	r2, [r3, #0]
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	3301      	adds	r3, #1
 8017b9a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	781a      	ldrb	r2, [r3, #0]
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	3301      	adds	r3, #1
 8017ba8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017baa:	68f8      	ldr	r0, [r7, #12]
 8017bac:	f7ff fa91 	bl	80170d2 <SWAPBYTE>
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	461a      	mov	r2, r3
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	3301      	adds	r3, #1
 8017bbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	3301      	adds	r3, #1
 8017bc2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017bc4:	68f8      	ldr	r0, [r7, #12]
 8017bc6:	f7ff fa84 	bl	80170d2 <SWAPBYTE>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	461a      	mov	r2, r3
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	3301      	adds	r3, #1
 8017bd6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	3301      	adds	r3, #1
 8017bdc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017bde:	68f8      	ldr	r0, [r7, #12]
 8017be0:	f7ff fa77 	bl	80170d2 <SWAPBYTE>
 8017be4:	4603      	mov	r3, r0
 8017be6:	461a      	mov	r2, r3
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	80da      	strh	r2, [r3, #6]
}
 8017bec:	bf00      	nop
 8017bee:	3710      	adds	r7, #16
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	bd80      	pop	{r7, pc}

08017bf4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b082      	sub	sp, #8
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
 8017bfc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017bfe:	2180      	movs	r1, #128	; 0x80
 8017c00:	6878      	ldr	r0, [r7, #4]
 8017c02:	f000 fd35 	bl	8018670 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017c06:	2100      	movs	r1, #0
 8017c08:	6878      	ldr	r0, [r7, #4]
 8017c0a:	f000 fd31 	bl	8018670 <USBD_LL_StallEP>
}
 8017c0e:	bf00      	nop
 8017c10:	3708      	adds	r7, #8
 8017c12:	46bd      	mov	sp, r7
 8017c14:	bd80      	pop	{r7, pc}

08017c16 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017c16:	b580      	push	{r7, lr}
 8017c18:	b086      	sub	sp, #24
 8017c1a:	af00      	add	r7, sp, #0
 8017c1c:	60f8      	str	r0, [r7, #12]
 8017c1e:	60b9      	str	r1, [r7, #8]
 8017c20:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017c22:	2300      	movs	r3, #0
 8017c24:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d036      	beq.n	8017c9a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017c30:	6938      	ldr	r0, [r7, #16]
 8017c32:	f000 f836 	bl	8017ca2 <USBD_GetLen>
 8017c36:	4603      	mov	r3, r0
 8017c38:	3301      	adds	r3, #1
 8017c3a:	b29b      	uxth	r3, r3
 8017c3c:	005b      	lsls	r3, r3, #1
 8017c3e:	b29a      	uxth	r2, r3
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017c44:	7dfb      	ldrb	r3, [r7, #23]
 8017c46:	68ba      	ldr	r2, [r7, #8]
 8017c48:	4413      	add	r3, r2
 8017c4a:	687a      	ldr	r2, [r7, #4]
 8017c4c:	7812      	ldrb	r2, [r2, #0]
 8017c4e:	701a      	strb	r2, [r3, #0]
  idx++;
 8017c50:	7dfb      	ldrb	r3, [r7, #23]
 8017c52:	3301      	adds	r3, #1
 8017c54:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017c56:	7dfb      	ldrb	r3, [r7, #23]
 8017c58:	68ba      	ldr	r2, [r7, #8]
 8017c5a:	4413      	add	r3, r2
 8017c5c:	2203      	movs	r2, #3
 8017c5e:	701a      	strb	r2, [r3, #0]
  idx++;
 8017c60:	7dfb      	ldrb	r3, [r7, #23]
 8017c62:	3301      	adds	r3, #1
 8017c64:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017c66:	e013      	b.n	8017c90 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017c68:	7dfb      	ldrb	r3, [r7, #23]
 8017c6a:	68ba      	ldr	r2, [r7, #8]
 8017c6c:	4413      	add	r3, r2
 8017c6e:	693a      	ldr	r2, [r7, #16]
 8017c70:	7812      	ldrb	r2, [r2, #0]
 8017c72:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017c74:	693b      	ldr	r3, [r7, #16]
 8017c76:	3301      	adds	r3, #1
 8017c78:	613b      	str	r3, [r7, #16]
    idx++;
 8017c7a:	7dfb      	ldrb	r3, [r7, #23]
 8017c7c:	3301      	adds	r3, #1
 8017c7e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017c80:	7dfb      	ldrb	r3, [r7, #23]
 8017c82:	68ba      	ldr	r2, [r7, #8]
 8017c84:	4413      	add	r3, r2
 8017c86:	2200      	movs	r2, #0
 8017c88:	701a      	strb	r2, [r3, #0]
    idx++;
 8017c8a:	7dfb      	ldrb	r3, [r7, #23]
 8017c8c:	3301      	adds	r3, #1
 8017c8e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017c90:	693b      	ldr	r3, [r7, #16]
 8017c92:	781b      	ldrb	r3, [r3, #0]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d1e7      	bne.n	8017c68 <USBD_GetString+0x52>
 8017c98:	e000      	b.n	8017c9c <USBD_GetString+0x86>
    return;
 8017c9a:	bf00      	nop
  }
}
 8017c9c:	3718      	adds	r7, #24
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	bd80      	pop	{r7, pc}

08017ca2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017ca2:	b480      	push	{r7}
 8017ca4:	b085      	sub	sp, #20
 8017ca6:	af00      	add	r7, sp, #0
 8017ca8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017caa:	2300      	movs	r3, #0
 8017cac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017cb2:	e005      	b.n	8017cc0 <USBD_GetLen+0x1e>
  {
    len++;
 8017cb4:	7bfb      	ldrb	r3, [r7, #15]
 8017cb6:	3301      	adds	r3, #1
 8017cb8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017cba:	68bb      	ldr	r3, [r7, #8]
 8017cbc:	3301      	adds	r3, #1
 8017cbe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017cc0:	68bb      	ldr	r3, [r7, #8]
 8017cc2:	781b      	ldrb	r3, [r3, #0]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d1f5      	bne.n	8017cb4 <USBD_GetLen+0x12>
  }

  return len;
 8017cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cca:	4618      	mov	r0, r3
 8017ccc:	3714      	adds	r7, #20
 8017cce:	46bd      	mov	sp, r7
 8017cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd4:	4770      	bx	lr

08017cd6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017cd6:	b580      	push	{r7, lr}
 8017cd8:	b084      	sub	sp, #16
 8017cda:	af00      	add	r7, sp, #0
 8017cdc:	60f8      	str	r0, [r7, #12]
 8017cde:	60b9      	str	r1, [r7, #8]
 8017ce0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	2202      	movs	r2, #2
 8017ce6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	687a      	ldr	r2, [r7, #4]
 8017cee:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	687a      	ldr	r2, [r7, #4]
 8017cf4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	68ba      	ldr	r2, [r7, #8]
 8017cfa:	2100      	movs	r1, #0
 8017cfc:	68f8      	ldr	r0, [r7, #12]
 8017cfe:	f000 fd85 	bl	801880c <USBD_LL_Transmit>

  return USBD_OK;
 8017d02:	2300      	movs	r3, #0
}
 8017d04:	4618      	mov	r0, r3
 8017d06:	3710      	adds	r7, #16
 8017d08:	46bd      	mov	sp, r7
 8017d0a:	bd80      	pop	{r7, pc}

08017d0c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b084      	sub	sp, #16
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	60f8      	str	r0, [r7, #12]
 8017d14:	60b9      	str	r1, [r7, #8]
 8017d16:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	68ba      	ldr	r2, [r7, #8]
 8017d1c:	2100      	movs	r1, #0
 8017d1e:	68f8      	ldr	r0, [r7, #12]
 8017d20:	f000 fd74 	bl	801880c <USBD_LL_Transmit>

  return USBD_OK;
 8017d24:	2300      	movs	r3, #0
}
 8017d26:	4618      	mov	r0, r3
 8017d28:	3710      	adds	r7, #16
 8017d2a:	46bd      	mov	sp, r7
 8017d2c:	bd80      	pop	{r7, pc}

08017d2e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017d2e:	b580      	push	{r7, lr}
 8017d30:	b084      	sub	sp, #16
 8017d32:	af00      	add	r7, sp, #0
 8017d34:	60f8      	str	r0, [r7, #12]
 8017d36:	60b9      	str	r1, [r7, #8]
 8017d38:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	2203      	movs	r2, #3
 8017d3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	687a      	ldr	r2, [r7, #4]
 8017d46:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	687a      	ldr	r2, [r7, #4]
 8017d4e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	68ba      	ldr	r2, [r7, #8]
 8017d56:	2100      	movs	r1, #0
 8017d58:	68f8      	ldr	r0, [r7, #12]
 8017d5a:	f000 fd8f 	bl	801887c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017d5e:	2300      	movs	r3, #0
}
 8017d60:	4618      	mov	r0, r3
 8017d62:	3710      	adds	r7, #16
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd80      	pop	{r7, pc}

08017d68 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b084      	sub	sp, #16
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	60f8      	str	r0, [r7, #12]
 8017d70:	60b9      	str	r1, [r7, #8]
 8017d72:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	68ba      	ldr	r2, [r7, #8]
 8017d78:	2100      	movs	r1, #0
 8017d7a:	68f8      	ldr	r0, [r7, #12]
 8017d7c:	f000 fd7e 	bl	801887c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017d80:	2300      	movs	r3, #0
}
 8017d82:	4618      	mov	r0, r3
 8017d84:	3710      	adds	r7, #16
 8017d86:	46bd      	mov	sp, r7
 8017d88:	bd80      	pop	{r7, pc}

08017d8a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017d8a:	b580      	push	{r7, lr}
 8017d8c:	b082      	sub	sp, #8
 8017d8e:	af00      	add	r7, sp, #0
 8017d90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	2204      	movs	r2, #4
 8017d96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	2200      	movs	r2, #0
 8017d9e:	2100      	movs	r1, #0
 8017da0:	6878      	ldr	r0, [r7, #4]
 8017da2:	f000 fd33 	bl	801880c <USBD_LL_Transmit>

  return USBD_OK;
 8017da6:	2300      	movs	r3, #0
}
 8017da8:	4618      	mov	r0, r3
 8017daa:	3708      	adds	r7, #8
 8017dac:	46bd      	mov	sp, r7
 8017dae:	bd80      	pop	{r7, pc}

08017db0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b082      	sub	sp, #8
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	2205      	movs	r2, #5
 8017dbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	2200      	movs	r2, #0
 8017dc4:	2100      	movs	r1, #0
 8017dc6:	6878      	ldr	r0, [r7, #4]
 8017dc8:	f000 fd58 	bl	801887c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017dcc:	2300      	movs	r3, #0
}
 8017dce:	4618      	mov	r0, r3
 8017dd0:	3708      	adds	r7, #8
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	bd80      	pop	{r7, pc}
	...

08017dd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017ddc:	2200      	movs	r2, #0
 8017dde:	4912      	ldr	r1, [pc, #72]	; (8017e28 <MX_USB_DEVICE_Init+0x50>)
 8017de0:	4812      	ldr	r0, [pc, #72]	; (8017e2c <MX_USB_DEVICE_Init+0x54>)
 8017de2:	f7fe fe65 	bl	8016ab0 <USBD_Init>
 8017de6:	4603      	mov	r3, r0
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d001      	beq.n	8017df0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017dec:	f7e9 ff42 	bl	8001c74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017df0:	490f      	ldr	r1, [pc, #60]	; (8017e30 <MX_USB_DEVICE_Init+0x58>)
 8017df2:	480e      	ldr	r0, [pc, #56]	; (8017e2c <MX_USB_DEVICE_Init+0x54>)
 8017df4:	f7fe fe8c 	bl	8016b10 <USBD_RegisterClass>
 8017df8:	4603      	mov	r3, r0
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d001      	beq.n	8017e02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017dfe:	f7e9 ff39 	bl	8001c74 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017e02:	490c      	ldr	r1, [pc, #48]	; (8017e34 <MX_USB_DEVICE_Init+0x5c>)
 8017e04:	4809      	ldr	r0, [pc, #36]	; (8017e2c <MX_USB_DEVICE_Init+0x54>)
 8017e06:	f7fe fddd 	bl	80169c4 <USBD_CDC_RegisterInterface>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d001      	beq.n	8017e14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017e10:	f7e9 ff30 	bl	8001c74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017e14:	4805      	ldr	r0, [pc, #20]	; (8017e2c <MX_USB_DEVICE_Init+0x54>)
 8017e16:	f7fe fea2 	bl	8016b5e <USBD_Start>
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d001      	beq.n	8017e24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017e20:	f7e9 ff28 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017e24:	bf00      	nop
 8017e26:	bd80      	pop	{r7, pc}
 8017e28:	20000678 	.word	0x20000678
 8017e2c:	200011c8 	.word	0x200011c8
 8017e30:	20000560 	.word	0x20000560
 8017e34:	20000664 	.word	0x20000664

08017e38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017e38:	b580      	push	{r7, lr}
 8017e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	4905      	ldr	r1, [pc, #20]	; (8017e54 <CDC_Init_FS+0x1c>)
 8017e40:	4805      	ldr	r0, [pc, #20]	; (8017e58 <CDC_Init_FS+0x20>)
 8017e42:	f7fe fdd4 	bl	80169ee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017e46:	4905      	ldr	r1, [pc, #20]	; (8017e5c <CDC_Init_FS+0x24>)
 8017e48:	4803      	ldr	r0, [pc, #12]	; (8017e58 <CDC_Init_FS+0x20>)
 8017e4a:	f7fe fdee 	bl	8016a2a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017e4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017e50:	4618      	mov	r0, r3
 8017e52:	bd80      	pop	{r7, pc}
 8017e54:	20001c98 	.word	0x20001c98
 8017e58:	200011c8 	.word	0x200011c8
 8017e5c:	20001498 	.word	0x20001498

08017e60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017e60:	b480      	push	{r7}
 8017e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017e64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017e66:	4618      	mov	r0, r3
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6e:	4770      	bx	lr

08017e70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017e70:	b480      	push	{r7}
 8017e72:	b083      	sub	sp, #12
 8017e74:	af00      	add	r7, sp, #0
 8017e76:	4603      	mov	r3, r0
 8017e78:	6039      	str	r1, [r7, #0]
 8017e7a:	71fb      	strb	r3, [r7, #7]
 8017e7c:	4613      	mov	r3, r2
 8017e7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017e80:	79fb      	ldrb	r3, [r7, #7]
 8017e82:	2b23      	cmp	r3, #35	; 0x23
 8017e84:	d84a      	bhi.n	8017f1c <CDC_Control_FS+0xac>
 8017e86:	a201      	add	r2, pc, #4	; (adr r2, 8017e8c <CDC_Control_FS+0x1c>)
 8017e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e8c:	08017f1d 	.word	0x08017f1d
 8017e90:	08017f1d 	.word	0x08017f1d
 8017e94:	08017f1d 	.word	0x08017f1d
 8017e98:	08017f1d 	.word	0x08017f1d
 8017e9c:	08017f1d 	.word	0x08017f1d
 8017ea0:	08017f1d 	.word	0x08017f1d
 8017ea4:	08017f1d 	.word	0x08017f1d
 8017ea8:	08017f1d 	.word	0x08017f1d
 8017eac:	08017f1d 	.word	0x08017f1d
 8017eb0:	08017f1d 	.word	0x08017f1d
 8017eb4:	08017f1d 	.word	0x08017f1d
 8017eb8:	08017f1d 	.word	0x08017f1d
 8017ebc:	08017f1d 	.word	0x08017f1d
 8017ec0:	08017f1d 	.word	0x08017f1d
 8017ec4:	08017f1d 	.word	0x08017f1d
 8017ec8:	08017f1d 	.word	0x08017f1d
 8017ecc:	08017f1d 	.word	0x08017f1d
 8017ed0:	08017f1d 	.word	0x08017f1d
 8017ed4:	08017f1d 	.word	0x08017f1d
 8017ed8:	08017f1d 	.word	0x08017f1d
 8017edc:	08017f1d 	.word	0x08017f1d
 8017ee0:	08017f1d 	.word	0x08017f1d
 8017ee4:	08017f1d 	.word	0x08017f1d
 8017ee8:	08017f1d 	.word	0x08017f1d
 8017eec:	08017f1d 	.word	0x08017f1d
 8017ef0:	08017f1d 	.word	0x08017f1d
 8017ef4:	08017f1d 	.word	0x08017f1d
 8017ef8:	08017f1d 	.word	0x08017f1d
 8017efc:	08017f1d 	.word	0x08017f1d
 8017f00:	08017f1d 	.word	0x08017f1d
 8017f04:	08017f1d 	.word	0x08017f1d
 8017f08:	08017f1d 	.word	0x08017f1d
 8017f0c:	08017f1d 	.word	0x08017f1d
 8017f10:	08017f1d 	.word	0x08017f1d
 8017f14:	08017f1d 	.word	0x08017f1d
 8017f18:	08017f1d 	.word	0x08017f1d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017f1c:	bf00      	nop
  }

  return (USBD_OK);
 8017f1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017f20:	4618      	mov	r0, r3
 8017f22:	370c      	adds	r7, #12
 8017f24:	46bd      	mov	sp, r7
 8017f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f2a:	4770      	bx	lr

08017f2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b082      	sub	sp, #8
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]
 8017f34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017f36:	6879      	ldr	r1, [r7, #4]
 8017f38:	4805      	ldr	r0, [pc, #20]	; (8017f50 <CDC_Receive_FS+0x24>)
 8017f3a:	f7fe fd76 	bl	8016a2a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017f3e:	4804      	ldr	r0, [pc, #16]	; (8017f50 <CDC_Receive_FS+0x24>)
 8017f40:	f7fe fd8c 	bl	8016a5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017f44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017f46:	4618      	mov	r0, r3
 8017f48:	3708      	adds	r7, #8
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	bd80      	pop	{r7, pc}
 8017f4e:	bf00      	nop
 8017f50:	200011c8 	.word	0x200011c8

08017f54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017f54:	b480      	push	{r7}
 8017f56:	b087      	sub	sp, #28
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	60f8      	str	r0, [r7, #12]
 8017f5c:	60b9      	str	r1, [r7, #8]
 8017f5e:	4613      	mov	r3, r2
 8017f60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017f62:	2300      	movs	r3, #0
 8017f64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	371c      	adds	r7, #28
 8017f6e:	46bd      	mov	sp, r7
 8017f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f74:	4770      	bx	lr
	...

08017f78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017f78:	b480      	push	{r7}
 8017f7a:	b083      	sub	sp, #12
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	4603      	mov	r3, r0
 8017f80:	6039      	str	r1, [r7, #0]
 8017f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017f84:	683b      	ldr	r3, [r7, #0]
 8017f86:	2212      	movs	r2, #18
 8017f88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017f8a:	4b03      	ldr	r3, [pc, #12]	; (8017f98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	370c      	adds	r7, #12
 8017f90:	46bd      	mov	sp, r7
 8017f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f96:	4770      	bx	lr
 8017f98:	20000698 	.word	0x20000698

08017f9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017f9c:	b480      	push	{r7}
 8017f9e:	b083      	sub	sp, #12
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	6039      	str	r1, [r7, #0]
 8017fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017fa8:	683b      	ldr	r3, [r7, #0]
 8017faa:	2204      	movs	r2, #4
 8017fac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017fae:	4b03      	ldr	r3, [pc, #12]	; (8017fbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	370c      	adds	r7, #12
 8017fb4:	46bd      	mov	sp, r7
 8017fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fba:	4770      	bx	lr
 8017fbc:	200006b8 	.word	0x200006b8

08017fc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b082      	sub	sp, #8
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	6039      	str	r1, [r7, #0]
 8017fca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017fcc:	79fb      	ldrb	r3, [r7, #7]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d105      	bne.n	8017fde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017fd2:	683a      	ldr	r2, [r7, #0]
 8017fd4:	4907      	ldr	r1, [pc, #28]	; (8017ff4 <USBD_FS_ProductStrDescriptor+0x34>)
 8017fd6:	4808      	ldr	r0, [pc, #32]	; (8017ff8 <USBD_FS_ProductStrDescriptor+0x38>)
 8017fd8:	f7ff fe1d 	bl	8017c16 <USBD_GetString>
 8017fdc:	e004      	b.n	8017fe8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017fde:	683a      	ldr	r2, [r7, #0]
 8017fe0:	4904      	ldr	r1, [pc, #16]	; (8017ff4 <USBD_FS_ProductStrDescriptor+0x34>)
 8017fe2:	4805      	ldr	r0, [pc, #20]	; (8017ff8 <USBD_FS_ProductStrDescriptor+0x38>)
 8017fe4:	f7ff fe17 	bl	8017c16 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017fe8:	4b02      	ldr	r3, [pc, #8]	; (8017ff4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017fea:	4618      	mov	r0, r3
 8017fec:	3708      	adds	r7, #8
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	bd80      	pop	{r7, pc}
 8017ff2:	bf00      	nop
 8017ff4:	20002498 	.word	0x20002498
 8017ff8:	08019ba8 	.word	0x08019ba8

08017ffc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	b082      	sub	sp, #8
 8018000:	af00      	add	r7, sp, #0
 8018002:	4603      	mov	r3, r0
 8018004:	6039      	str	r1, [r7, #0]
 8018006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018008:	683a      	ldr	r2, [r7, #0]
 801800a:	4904      	ldr	r1, [pc, #16]	; (801801c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801800c:	4804      	ldr	r0, [pc, #16]	; (8018020 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801800e:	f7ff fe02 	bl	8017c16 <USBD_GetString>
  return USBD_StrDesc;
 8018012:	4b02      	ldr	r3, [pc, #8]	; (801801c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018014:	4618      	mov	r0, r3
 8018016:	3708      	adds	r7, #8
 8018018:	46bd      	mov	sp, r7
 801801a:	bd80      	pop	{r7, pc}
 801801c:	20002498 	.word	0x20002498
 8018020:	08019bc0 	.word	0x08019bc0

08018024 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018024:	b580      	push	{r7, lr}
 8018026:	b082      	sub	sp, #8
 8018028:	af00      	add	r7, sp, #0
 801802a:	4603      	mov	r3, r0
 801802c:	6039      	str	r1, [r7, #0]
 801802e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018030:	683b      	ldr	r3, [r7, #0]
 8018032:	221a      	movs	r2, #26
 8018034:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018036:	f000 f855 	bl	80180e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801803a:	4b02      	ldr	r3, [pc, #8]	; (8018044 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801803c:	4618      	mov	r0, r3
 801803e:	3708      	adds	r7, #8
 8018040:	46bd      	mov	sp, r7
 8018042:	bd80      	pop	{r7, pc}
 8018044:	200006bc 	.word	0x200006bc

08018048 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018048:	b580      	push	{r7, lr}
 801804a:	b082      	sub	sp, #8
 801804c:	af00      	add	r7, sp, #0
 801804e:	4603      	mov	r3, r0
 8018050:	6039      	str	r1, [r7, #0]
 8018052:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018054:	79fb      	ldrb	r3, [r7, #7]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d105      	bne.n	8018066 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801805a:	683a      	ldr	r2, [r7, #0]
 801805c:	4907      	ldr	r1, [pc, #28]	; (801807c <USBD_FS_ConfigStrDescriptor+0x34>)
 801805e:	4808      	ldr	r0, [pc, #32]	; (8018080 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018060:	f7ff fdd9 	bl	8017c16 <USBD_GetString>
 8018064:	e004      	b.n	8018070 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018066:	683a      	ldr	r2, [r7, #0]
 8018068:	4904      	ldr	r1, [pc, #16]	; (801807c <USBD_FS_ConfigStrDescriptor+0x34>)
 801806a:	4805      	ldr	r0, [pc, #20]	; (8018080 <USBD_FS_ConfigStrDescriptor+0x38>)
 801806c:	f7ff fdd3 	bl	8017c16 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018070:	4b02      	ldr	r3, [pc, #8]	; (801807c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018072:	4618      	mov	r0, r3
 8018074:	3708      	adds	r7, #8
 8018076:	46bd      	mov	sp, r7
 8018078:	bd80      	pop	{r7, pc}
 801807a:	bf00      	nop
 801807c:	20002498 	.word	0x20002498
 8018080:	08019bd4 	.word	0x08019bd4

08018084 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018084:	b580      	push	{r7, lr}
 8018086:	b082      	sub	sp, #8
 8018088:	af00      	add	r7, sp, #0
 801808a:	4603      	mov	r3, r0
 801808c:	6039      	str	r1, [r7, #0]
 801808e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018090:	79fb      	ldrb	r3, [r7, #7]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d105      	bne.n	80180a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018096:	683a      	ldr	r2, [r7, #0]
 8018098:	4907      	ldr	r1, [pc, #28]	; (80180b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801809a:	4808      	ldr	r0, [pc, #32]	; (80180bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801809c:	f7ff fdbb 	bl	8017c16 <USBD_GetString>
 80180a0:	e004      	b.n	80180ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80180a2:	683a      	ldr	r2, [r7, #0]
 80180a4:	4904      	ldr	r1, [pc, #16]	; (80180b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80180a6:	4805      	ldr	r0, [pc, #20]	; (80180bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80180a8:	f7ff fdb5 	bl	8017c16 <USBD_GetString>
  }
  return USBD_StrDesc;
 80180ac:	4b02      	ldr	r3, [pc, #8]	; (80180b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80180ae:	4618      	mov	r0, r3
 80180b0:	3708      	adds	r7, #8
 80180b2:	46bd      	mov	sp, r7
 80180b4:	bd80      	pop	{r7, pc}
 80180b6:	bf00      	nop
 80180b8:	20002498 	.word	0x20002498
 80180bc:	08019be0 	.word	0x08019be0

080180c0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180c0:	b480      	push	{r7}
 80180c2:	b083      	sub	sp, #12
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	4603      	mov	r3, r0
 80180c8:	6039      	str	r1, [r7, #0]
 80180ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80180cc:	683b      	ldr	r3, [r7, #0]
 80180ce:	220c      	movs	r2, #12
 80180d0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80180d2:	4b03      	ldr	r3, [pc, #12]	; (80180e0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80180d4:	4618      	mov	r0, r3
 80180d6:	370c      	adds	r7, #12
 80180d8:	46bd      	mov	sp, r7
 80180da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180de:	4770      	bx	lr
 80180e0:	200006ac 	.word	0x200006ac

080180e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b084      	sub	sp, #16
 80180e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80180ea:	4b0f      	ldr	r3, [pc, #60]	; (8018128 <Get_SerialNum+0x44>)
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80180f0:	4b0e      	ldr	r3, [pc, #56]	; (801812c <Get_SerialNum+0x48>)
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80180f6:	4b0e      	ldr	r3, [pc, #56]	; (8018130 <Get_SerialNum+0x4c>)
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80180fc:	68fa      	ldr	r2, [r7, #12]
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	4413      	add	r3, r2
 8018102:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	2b00      	cmp	r3, #0
 8018108:	d009      	beq.n	801811e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801810a:	2208      	movs	r2, #8
 801810c:	4909      	ldr	r1, [pc, #36]	; (8018134 <Get_SerialNum+0x50>)
 801810e:	68f8      	ldr	r0, [r7, #12]
 8018110:	f000 f814 	bl	801813c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018114:	2204      	movs	r2, #4
 8018116:	4908      	ldr	r1, [pc, #32]	; (8018138 <Get_SerialNum+0x54>)
 8018118:	68b8      	ldr	r0, [r7, #8]
 801811a:	f000 f80f 	bl	801813c <IntToUnicode>
  }
}
 801811e:	bf00      	nop
 8018120:	3710      	adds	r7, #16
 8018122:	46bd      	mov	sp, r7
 8018124:	bd80      	pop	{r7, pc}
 8018126:	bf00      	nop
 8018128:	1fff7590 	.word	0x1fff7590
 801812c:	1fff7594 	.word	0x1fff7594
 8018130:	1fff7598 	.word	0x1fff7598
 8018134:	200006be 	.word	0x200006be
 8018138:	200006ce 	.word	0x200006ce

0801813c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801813c:	b480      	push	{r7}
 801813e:	b087      	sub	sp, #28
 8018140:	af00      	add	r7, sp, #0
 8018142:	60f8      	str	r0, [r7, #12]
 8018144:	60b9      	str	r1, [r7, #8]
 8018146:	4613      	mov	r3, r2
 8018148:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801814a:	2300      	movs	r3, #0
 801814c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801814e:	2300      	movs	r3, #0
 8018150:	75fb      	strb	r3, [r7, #23]
 8018152:	e027      	b.n	80181a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	0f1b      	lsrs	r3, r3, #28
 8018158:	2b09      	cmp	r3, #9
 801815a:	d80b      	bhi.n	8018174 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	0f1b      	lsrs	r3, r3, #28
 8018160:	b2da      	uxtb	r2, r3
 8018162:	7dfb      	ldrb	r3, [r7, #23]
 8018164:	005b      	lsls	r3, r3, #1
 8018166:	4619      	mov	r1, r3
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	440b      	add	r3, r1
 801816c:	3230      	adds	r2, #48	; 0x30
 801816e:	b2d2      	uxtb	r2, r2
 8018170:	701a      	strb	r2, [r3, #0]
 8018172:	e00a      	b.n	801818a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	0f1b      	lsrs	r3, r3, #28
 8018178:	b2da      	uxtb	r2, r3
 801817a:	7dfb      	ldrb	r3, [r7, #23]
 801817c:	005b      	lsls	r3, r3, #1
 801817e:	4619      	mov	r1, r3
 8018180:	68bb      	ldr	r3, [r7, #8]
 8018182:	440b      	add	r3, r1
 8018184:	3237      	adds	r2, #55	; 0x37
 8018186:	b2d2      	uxtb	r2, r2
 8018188:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	011b      	lsls	r3, r3, #4
 801818e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018190:	7dfb      	ldrb	r3, [r7, #23]
 8018192:	005b      	lsls	r3, r3, #1
 8018194:	3301      	adds	r3, #1
 8018196:	68ba      	ldr	r2, [r7, #8]
 8018198:	4413      	add	r3, r2
 801819a:	2200      	movs	r2, #0
 801819c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801819e:	7dfb      	ldrb	r3, [r7, #23]
 80181a0:	3301      	adds	r3, #1
 80181a2:	75fb      	strb	r3, [r7, #23]
 80181a4:	7dfa      	ldrb	r2, [r7, #23]
 80181a6:	79fb      	ldrb	r3, [r7, #7]
 80181a8:	429a      	cmp	r2, r3
 80181aa:	d3d3      	bcc.n	8018154 <IntToUnicode+0x18>
  }
}
 80181ac:	bf00      	nop
 80181ae:	bf00      	nop
 80181b0:	371c      	adds	r7, #28
 80181b2:	46bd      	mov	sp, r7
 80181b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181b8:	4770      	bx	lr
	...

080181bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80181bc:	b580      	push	{r7, lr}
 80181be:	b08a      	sub	sp, #40	; 0x28
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80181c4:	f107 0314 	add.w	r3, r7, #20
 80181c8:	2200      	movs	r2, #0
 80181ca:	601a      	str	r2, [r3, #0]
 80181cc:	605a      	str	r2, [r3, #4]
 80181ce:	609a      	str	r2, [r3, #8]
 80181d0:	60da      	str	r2, [r3, #12]
 80181d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80181dc:	d14e      	bne.n	801827c <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80181de:	4b29      	ldr	r3, [pc, #164]	; (8018284 <HAL_PCD_MspInit+0xc8>)
 80181e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80181e2:	4a28      	ldr	r2, [pc, #160]	; (8018284 <HAL_PCD_MspInit+0xc8>)
 80181e4:	f043 0301 	orr.w	r3, r3, #1
 80181e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80181ea:	4b26      	ldr	r3, [pc, #152]	; (8018284 <HAL_PCD_MspInit+0xc8>)
 80181ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80181ee:	f003 0301 	and.w	r3, r3, #1
 80181f2:	613b      	str	r3, [r7, #16]
 80181f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 80181f6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80181fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80181fc:	2302      	movs	r3, #2
 80181fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018200:	2300      	movs	r3, #0
 8018202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018204:	2303      	movs	r3, #3
 8018206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018208:	230a      	movs	r3, #10
 801820a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801820c:	f107 0314 	add.w	r3, r7, #20
 8018210:	4619      	mov	r1, r3
 8018212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018216:	f7f4 f981 	bl	800c51c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801821a:	4b1a      	ldr	r3, [pc, #104]	; (8018284 <HAL_PCD_MspInit+0xc8>)
 801821c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801821e:	4a19      	ldr	r2, [pc, #100]	; (8018284 <HAL_PCD_MspInit+0xc8>)
 8018220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8018224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018226:	4b17      	ldr	r3, [pc, #92]	; (8018284 <HAL_PCD_MspInit+0xc8>)
 8018228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801822a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801822e:	60fb      	str	r3, [r7, #12]
 8018230:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018232:	4b14      	ldr	r3, [pc, #80]	; (8018284 <HAL_PCD_MspInit+0xc8>)
 8018234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801823a:	2b00      	cmp	r3, #0
 801823c:	d114      	bne.n	8018268 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801823e:	4b11      	ldr	r3, [pc, #68]	; (8018284 <HAL_PCD_MspInit+0xc8>)
 8018240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018242:	4a10      	ldr	r2, [pc, #64]	; (8018284 <HAL_PCD_MspInit+0xc8>)
 8018244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018248:	6593      	str	r3, [r2, #88]	; 0x58
 801824a:	4b0e      	ldr	r3, [pc, #56]	; (8018284 <HAL_PCD_MspInit+0xc8>)
 801824c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801824e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018252:	60bb      	str	r3, [r7, #8]
 8018254:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8018256:	f7f7 f81f 	bl	800f298 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801825a:	4b0a      	ldr	r3, [pc, #40]	; (8018284 <HAL_PCD_MspInit+0xc8>)
 801825c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801825e:	4a09      	ldr	r2, [pc, #36]	; (8018284 <HAL_PCD_MspInit+0xc8>)
 8018260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018264:	6593      	str	r3, [r2, #88]	; 0x58
 8018266:	e001      	b.n	801826c <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8018268:	f7f7 f816 	bl	800f298 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801826c:	2200      	movs	r2, #0
 801826e:	2100      	movs	r1, #0
 8018270:	2043      	movs	r0, #67	; 0x43
 8018272:	f7f3 ff7c 	bl	800c16e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018276:	2043      	movs	r0, #67	; 0x43
 8018278:	f7f3 ff95 	bl	800c1a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801827c:	bf00      	nop
 801827e:	3728      	adds	r7, #40	; 0x28
 8018280:	46bd      	mov	sp, r7
 8018282:	bd80      	pop	{r7, pc}
 8018284:	40021000 	.word	0x40021000

08018288 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018288:	b580      	push	{r7, lr}
 801828a:	b082      	sub	sp, #8
 801828c:	af00      	add	r7, sp, #0
 801828e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801829c:	4619      	mov	r1, r3
 801829e:	4610      	mov	r0, r2
 80182a0:	f7fe fca8 	bl	8016bf4 <USBD_LL_SetupStage>
}
 80182a4:	bf00      	nop
 80182a6:	3708      	adds	r7, #8
 80182a8:	46bd      	mov	sp, r7
 80182aa:	bd80      	pop	{r7, pc}

080182ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182ac:	b580      	push	{r7, lr}
 80182ae:	b082      	sub	sp, #8
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	6078      	str	r0, [r7, #4]
 80182b4:	460b      	mov	r3, r1
 80182b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80182be:	78fa      	ldrb	r2, [r7, #3]
 80182c0:	6879      	ldr	r1, [r7, #4]
 80182c2:	4613      	mov	r3, r2
 80182c4:	00db      	lsls	r3, r3, #3
 80182c6:	4413      	add	r3, r2
 80182c8:	009b      	lsls	r3, r3, #2
 80182ca:	440b      	add	r3, r1
 80182cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80182d0:	681a      	ldr	r2, [r3, #0]
 80182d2:	78fb      	ldrb	r3, [r7, #3]
 80182d4:	4619      	mov	r1, r3
 80182d6:	f7fe fce2 	bl	8016c9e <USBD_LL_DataOutStage>
}
 80182da:	bf00      	nop
 80182dc:	3708      	adds	r7, #8
 80182de:	46bd      	mov	sp, r7
 80182e0:	bd80      	pop	{r7, pc}

080182e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182e2:	b580      	push	{r7, lr}
 80182e4:	b082      	sub	sp, #8
 80182e6:	af00      	add	r7, sp, #0
 80182e8:	6078      	str	r0, [r7, #4]
 80182ea:	460b      	mov	r3, r1
 80182ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80182f4:	78fa      	ldrb	r2, [r7, #3]
 80182f6:	6879      	ldr	r1, [r7, #4]
 80182f8:	4613      	mov	r3, r2
 80182fa:	00db      	lsls	r3, r3, #3
 80182fc:	4413      	add	r3, r2
 80182fe:	009b      	lsls	r3, r3, #2
 8018300:	440b      	add	r3, r1
 8018302:	334c      	adds	r3, #76	; 0x4c
 8018304:	681a      	ldr	r2, [r3, #0]
 8018306:	78fb      	ldrb	r3, [r7, #3]
 8018308:	4619      	mov	r1, r3
 801830a:	f7fe fd2b 	bl	8016d64 <USBD_LL_DataInStage>
}
 801830e:	bf00      	nop
 8018310:	3708      	adds	r7, #8
 8018312:	46bd      	mov	sp, r7
 8018314:	bd80      	pop	{r7, pc}

08018316 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018316:	b580      	push	{r7, lr}
 8018318:	b082      	sub	sp, #8
 801831a:	af00      	add	r7, sp, #0
 801831c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018324:	4618      	mov	r0, r3
 8018326:	f7fe fe3f 	bl	8016fa8 <USBD_LL_SOF>
}
 801832a:	bf00      	nop
 801832c:	3708      	adds	r7, #8
 801832e:	46bd      	mov	sp, r7
 8018330:	bd80      	pop	{r7, pc}

08018332 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018332:	b580      	push	{r7, lr}
 8018334:	b084      	sub	sp, #16
 8018336:	af00      	add	r7, sp, #0
 8018338:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801833a:	2301      	movs	r3, #1
 801833c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	68db      	ldr	r3, [r3, #12]
 8018342:	2b02      	cmp	r3, #2
 8018344:	d001      	beq.n	801834a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018346:	f7e9 fc95 	bl	8001c74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018350:	7bfa      	ldrb	r2, [r7, #15]
 8018352:	4611      	mov	r1, r2
 8018354:	4618      	mov	r0, r3
 8018356:	f7fe fde9 	bl	8016f2c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018360:	4618      	mov	r0, r3
 8018362:	f7fe fd95 	bl	8016e90 <USBD_LL_Reset>
}
 8018366:	bf00      	nop
 8018368:	3710      	adds	r7, #16
 801836a:	46bd      	mov	sp, r7
 801836c:	bd80      	pop	{r7, pc}
	...

08018370 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018370:	b580      	push	{r7, lr}
 8018372:	b082      	sub	sp, #8
 8018374:	af00      	add	r7, sp, #0
 8018376:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	687a      	ldr	r2, [r7, #4]
 8018384:	6812      	ldr	r2, [r2, #0]
 8018386:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801838a:	f043 0301 	orr.w	r3, r3, #1
 801838e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018396:	4618      	mov	r0, r3
 8018398:	f7fe fdd8 	bl	8016f4c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	6a1b      	ldr	r3, [r3, #32]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d005      	beq.n	80183b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80183a4:	4b04      	ldr	r3, [pc, #16]	; (80183b8 <HAL_PCD_SuspendCallback+0x48>)
 80183a6:	691b      	ldr	r3, [r3, #16]
 80183a8:	4a03      	ldr	r2, [pc, #12]	; (80183b8 <HAL_PCD_SuspendCallback+0x48>)
 80183aa:	f043 0306 	orr.w	r3, r3, #6
 80183ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80183b0:	bf00      	nop
 80183b2:	3708      	adds	r7, #8
 80183b4:	46bd      	mov	sp, r7
 80183b6:	bd80      	pop	{r7, pc}
 80183b8:	e000ed00 	.word	0xe000ed00

080183bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183bc:	b580      	push	{r7, lr}
 80183be:	b082      	sub	sp, #8
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	687a      	ldr	r2, [r7, #4]
 80183d0:	6812      	ldr	r2, [r2, #0]
 80183d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80183d6:	f023 0301 	bic.w	r3, r3, #1
 80183da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	6a1b      	ldr	r3, [r3, #32]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d007      	beq.n	80183f4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80183e4:	4b08      	ldr	r3, [pc, #32]	; (8018408 <HAL_PCD_ResumeCallback+0x4c>)
 80183e6:	691b      	ldr	r3, [r3, #16]
 80183e8:	4a07      	ldr	r2, [pc, #28]	; (8018408 <HAL_PCD_ResumeCallback+0x4c>)
 80183ea:	f023 0306 	bic.w	r3, r3, #6
 80183ee:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80183f0:	f000 faf6 	bl	80189e0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80183fa:	4618      	mov	r0, r3
 80183fc:	f7fe fdbc 	bl	8016f78 <USBD_LL_Resume>
}
 8018400:	bf00      	nop
 8018402:	3708      	adds	r7, #8
 8018404:	46bd      	mov	sp, r7
 8018406:	bd80      	pop	{r7, pc}
 8018408:	e000ed00 	.word	0xe000ed00

0801840c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b082      	sub	sp, #8
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
 8018414:	460b      	mov	r3, r1
 8018416:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801841e:	78fa      	ldrb	r2, [r7, #3]
 8018420:	4611      	mov	r1, r2
 8018422:	4618      	mov	r0, r3
 8018424:	f7fe fe08 	bl	8017038 <USBD_LL_IsoOUTIncomplete>
}
 8018428:	bf00      	nop
 801842a:	3708      	adds	r7, #8
 801842c:	46bd      	mov	sp, r7
 801842e:	bd80      	pop	{r7, pc}

08018430 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018430:	b580      	push	{r7, lr}
 8018432:	b082      	sub	sp, #8
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
 8018438:	460b      	mov	r3, r1
 801843a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018442:	78fa      	ldrb	r2, [r7, #3]
 8018444:	4611      	mov	r1, r2
 8018446:	4618      	mov	r0, r3
 8018448:	f7fe fdd0 	bl	8016fec <USBD_LL_IsoINIncomplete>
}
 801844c:	bf00      	nop
 801844e:	3708      	adds	r7, #8
 8018450:	46bd      	mov	sp, r7
 8018452:	bd80      	pop	{r7, pc}

08018454 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018454:	b580      	push	{r7, lr}
 8018456:	b082      	sub	sp, #8
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018462:	4618      	mov	r0, r3
 8018464:	f7fe fe0e 	bl	8017084 <USBD_LL_DevConnected>
}
 8018468:	bf00      	nop
 801846a:	3708      	adds	r7, #8
 801846c:	46bd      	mov	sp, r7
 801846e:	bd80      	pop	{r7, pc}

08018470 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018470:	b580      	push	{r7, lr}
 8018472:	b082      	sub	sp, #8
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801847e:	4618      	mov	r0, r3
 8018480:	f7fe fe0b 	bl	801709a <USBD_LL_DevDisconnected>
}
 8018484:	bf00      	nop
 8018486:	3708      	adds	r7, #8
 8018488:	46bd      	mov	sp, r7
 801848a:	bd80      	pop	{r7, pc}

0801848c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801848c:	b580      	push	{r7, lr}
 801848e:	b082      	sub	sp, #8
 8018490:	af00      	add	r7, sp, #0
 8018492:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	781b      	ldrb	r3, [r3, #0]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d13c      	bne.n	8018516 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801849c:	4a20      	ldr	r2, [pc, #128]	; (8018520 <USBD_LL_Init+0x94>)
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	4a1e      	ldr	r2, [pc, #120]	; (8018520 <USBD_LL_Init+0x94>)
 80184a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80184ac:	4b1c      	ldr	r3, [pc, #112]	; (8018520 <USBD_LL_Init+0x94>)
 80184ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80184b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80184b4:	4b1a      	ldr	r3, [pc, #104]	; (8018520 <USBD_LL_Init+0x94>)
 80184b6:	2206      	movs	r2, #6
 80184b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80184ba:	4b19      	ldr	r3, [pc, #100]	; (8018520 <USBD_LL_Init+0x94>)
 80184bc:	2202      	movs	r2, #2
 80184be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80184c0:	4b17      	ldr	r3, [pc, #92]	; (8018520 <USBD_LL_Init+0x94>)
 80184c2:	2202      	movs	r2, #2
 80184c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80184c6:	4b16      	ldr	r3, [pc, #88]	; (8018520 <USBD_LL_Init+0x94>)
 80184c8:	2200      	movs	r2, #0
 80184ca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80184cc:	4b14      	ldr	r3, [pc, #80]	; (8018520 <USBD_LL_Init+0x94>)
 80184ce:	2200      	movs	r2, #0
 80184d0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80184d2:	4b13      	ldr	r3, [pc, #76]	; (8018520 <USBD_LL_Init+0x94>)
 80184d4:	2200      	movs	r2, #0
 80184d6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80184d8:	4b11      	ldr	r3, [pc, #68]	; (8018520 <USBD_LL_Init+0x94>)
 80184da:	2200      	movs	r2, #0
 80184dc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80184de:	4b10      	ldr	r3, [pc, #64]	; (8018520 <USBD_LL_Init+0x94>)
 80184e0:	2200      	movs	r2, #0
 80184e2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80184e4:	4b0e      	ldr	r3, [pc, #56]	; (8018520 <USBD_LL_Init+0x94>)
 80184e6:	2200      	movs	r2, #0
 80184e8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80184ea:	480d      	ldr	r0, [pc, #52]	; (8018520 <USBD_LL_Init+0x94>)
 80184ec:	f7f5 fc6d 	bl	800ddca <HAL_PCD_Init>
 80184f0:	4603      	mov	r3, r0
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d001      	beq.n	80184fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80184f6:	f7e9 fbbd 	bl	8001c74 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80184fa:	2180      	movs	r1, #128	; 0x80
 80184fc:	4808      	ldr	r0, [pc, #32]	; (8018520 <USBD_LL_Init+0x94>)
 80184fe:	f7f6 fdee 	bl	800f0de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018502:	2240      	movs	r2, #64	; 0x40
 8018504:	2100      	movs	r1, #0
 8018506:	4806      	ldr	r0, [pc, #24]	; (8018520 <USBD_LL_Init+0x94>)
 8018508:	f7f6 fda2 	bl	800f050 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801850c:	2280      	movs	r2, #128	; 0x80
 801850e:	2101      	movs	r1, #1
 8018510:	4803      	ldr	r0, [pc, #12]	; (8018520 <USBD_LL_Init+0x94>)
 8018512:	f7f6 fd9d 	bl	800f050 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018516:	2300      	movs	r3, #0
}
 8018518:	4618      	mov	r0, r3
 801851a:	3708      	adds	r7, #8
 801851c:	46bd      	mov	sp, r7
 801851e:	bd80      	pop	{r7, pc}
 8018520:	20002698 	.word	0x20002698

08018524 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b084      	sub	sp, #16
 8018528:	af00      	add	r7, sp, #0
 801852a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801852c:	2300      	movs	r3, #0
 801852e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018530:	2300      	movs	r3, #0
 8018532:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801853a:	4618      	mov	r0, r3
 801853c:	f7f5 fd69 	bl	800e012 <HAL_PCD_Start>
 8018540:	4603      	mov	r3, r0
 8018542:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018544:	7bbb      	ldrb	r3, [r7, #14]
 8018546:	2b03      	cmp	r3, #3
 8018548:	d816      	bhi.n	8018578 <USBD_LL_Start+0x54>
 801854a:	a201      	add	r2, pc, #4	; (adr r2, 8018550 <USBD_LL_Start+0x2c>)
 801854c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018550:	08018561 	.word	0x08018561
 8018554:	08018567 	.word	0x08018567
 8018558:	0801856d 	.word	0x0801856d
 801855c:	08018573 	.word	0x08018573
    case HAL_OK :
      usb_status = USBD_OK;
 8018560:	2300      	movs	r3, #0
 8018562:	73fb      	strb	r3, [r7, #15]
    break;
 8018564:	e00b      	b.n	801857e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018566:	2303      	movs	r3, #3
 8018568:	73fb      	strb	r3, [r7, #15]
    break;
 801856a:	e008      	b.n	801857e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801856c:	2301      	movs	r3, #1
 801856e:	73fb      	strb	r3, [r7, #15]
    break;
 8018570:	e005      	b.n	801857e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018572:	2303      	movs	r3, #3
 8018574:	73fb      	strb	r3, [r7, #15]
    break;
 8018576:	e002      	b.n	801857e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8018578:	2303      	movs	r3, #3
 801857a:	73fb      	strb	r3, [r7, #15]
    break;
 801857c:	bf00      	nop
  }
  return usb_status;
 801857e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018580:	4618      	mov	r0, r3
 8018582:	3710      	adds	r7, #16
 8018584:	46bd      	mov	sp, r7
 8018586:	bd80      	pop	{r7, pc}

08018588 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018588:	b580      	push	{r7, lr}
 801858a:	b084      	sub	sp, #16
 801858c:	af00      	add	r7, sp, #0
 801858e:	6078      	str	r0, [r7, #4]
 8018590:	4608      	mov	r0, r1
 8018592:	4611      	mov	r1, r2
 8018594:	461a      	mov	r2, r3
 8018596:	4603      	mov	r3, r0
 8018598:	70fb      	strb	r3, [r7, #3]
 801859a:	460b      	mov	r3, r1
 801859c:	70bb      	strb	r3, [r7, #2]
 801859e:	4613      	mov	r3, r2
 80185a0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185a2:	2300      	movs	r3, #0
 80185a4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185a6:	2300      	movs	r3, #0
 80185a8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80185b0:	78bb      	ldrb	r3, [r7, #2]
 80185b2:	883a      	ldrh	r2, [r7, #0]
 80185b4:	78f9      	ldrb	r1, [r7, #3]
 80185b6:	f7f6 fa13 	bl	800e9e0 <HAL_PCD_EP_Open>
 80185ba:	4603      	mov	r3, r0
 80185bc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80185be:	7bbb      	ldrb	r3, [r7, #14]
 80185c0:	2b03      	cmp	r3, #3
 80185c2:	d817      	bhi.n	80185f4 <USBD_LL_OpenEP+0x6c>
 80185c4:	a201      	add	r2, pc, #4	; (adr r2, 80185cc <USBD_LL_OpenEP+0x44>)
 80185c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185ca:	bf00      	nop
 80185cc:	080185dd 	.word	0x080185dd
 80185d0:	080185e3 	.word	0x080185e3
 80185d4:	080185e9 	.word	0x080185e9
 80185d8:	080185ef 	.word	0x080185ef
    case HAL_OK :
      usb_status = USBD_OK;
 80185dc:	2300      	movs	r3, #0
 80185de:	73fb      	strb	r3, [r7, #15]
    break;
 80185e0:	e00b      	b.n	80185fa <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80185e2:	2303      	movs	r3, #3
 80185e4:	73fb      	strb	r3, [r7, #15]
    break;
 80185e6:	e008      	b.n	80185fa <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80185e8:	2301      	movs	r3, #1
 80185ea:	73fb      	strb	r3, [r7, #15]
    break;
 80185ec:	e005      	b.n	80185fa <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80185ee:	2303      	movs	r3, #3
 80185f0:	73fb      	strb	r3, [r7, #15]
    break;
 80185f2:	e002      	b.n	80185fa <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80185f4:	2303      	movs	r3, #3
 80185f6:	73fb      	strb	r3, [r7, #15]
    break;
 80185f8:	bf00      	nop
  }
  return usb_status;
 80185fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80185fc:	4618      	mov	r0, r3
 80185fe:	3710      	adds	r7, #16
 8018600:	46bd      	mov	sp, r7
 8018602:	bd80      	pop	{r7, pc}

08018604 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018604:	b580      	push	{r7, lr}
 8018606:	b084      	sub	sp, #16
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
 801860c:	460b      	mov	r3, r1
 801860e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018610:	2300      	movs	r3, #0
 8018612:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018614:	2300      	movs	r3, #0
 8018616:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801861e:	78fa      	ldrb	r2, [r7, #3]
 8018620:	4611      	mov	r1, r2
 8018622:	4618      	mov	r0, r3
 8018624:	f7f6 fa44 	bl	800eab0 <HAL_PCD_EP_Close>
 8018628:	4603      	mov	r3, r0
 801862a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801862c:	7bbb      	ldrb	r3, [r7, #14]
 801862e:	2b03      	cmp	r3, #3
 8018630:	d816      	bhi.n	8018660 <USBD_LL_CloseEP+0x5c>
 8018632:	a201      	add	r2, pc, #4	; (adr r2, 8018638 <USBD_LL_CloseEP+0x34>)
 8018634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018638:	08018649 	.word	0x08018649
 801863c:	0801864f 	.word	0x0801864f
 8018640:	08018655 	.word	0x08018655
 8018644:	0801865b 	.word	0x0801865b
    case HAL_OK :
      usb_status = USBD_OK;
 8018648:	2300      	movs	r3, #0
 801864a:	73fb      	strb	r3, [r7, #15]
    break;
 801864c:	e00b      	b.n	8018666 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801864e:	2303      	movs	r3, #3
 8018650:	73fb      	strb	r3, [r7, #15]
    break;
 8018652:	e008      	b.n	8018666 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018654:	2301      	movs	r3, #1
 8018656:	73fb      	strb	r3, [r7, #15]
    break;
 8018658:	e005      	b.n	8018666 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801865a:	2303      	movs	r3, #3
 801865c:	73fb      	strb	r3, [r7, #15]
    break;
 801865e:	e002      	b.n	8018666 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8018660:	2303      	movs	r3, #3
 8018662:	73fb      	strb	r3, [r7, #15]
    break;
 8018664:	bf00      	nop
  }
  return usb_status;
 8018666:	7bfb      	ldrb	r3, [r7, #15]
}
 8018668:	4618      	mov	r0, r3
 801866a:	3710      	adds	r7, #16
 801866c:	46bd      	mov	sp, r7
 801866e:	bd80      	pop	{r7, pc}

08018670 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018670:	b580      	push	{r7, lr}
 8018672:	b084      	sub	sp, #16
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]
 8018678:	460b      	mov	r3, r1
 801867a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801867c:	2300      	movs	r3, #0
 801867e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018680:	2300      	movs	r3, #0
 8018682:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801868a:	78fa      	ldrb	r2, [r7, #3]
 801868c:	4611      	mov	r1, r2
 801868e:	4618      	mov	r0, r3
 8018690:	f7f6 faeb 	bl	800ec6a <HAL_PCD_EP_SetStall>
 8018694:	4603      	mov	r3, r0
 8018696:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018698:	7bbb      	ldrb	r3, [r7, #14]
 801869a:	2b03      	cmp	r3, #3
 801869c:	d816      	bhi.n	80186cc <USBD_LL_StallEP+0x5c>
 801869e:	a201      	add	r2, pc, #4	; (adr r2, 80186a4 <USBD_LL_StallEP+0x34>)
 80186a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186a4:	080186b5 	.word	0x080186b5
 80186a8:	080186bb 	.word	0x080186bb
 80186ac:	080186c1 	.word	0x080186c1
 80186b0:	080186c7 	.word	0x080186c7
    case HAL_OK :
      usb_status = USBD_OK;
 80186b4:	2300      	movs	r3, #0
 80186b6:	73fb      	strb	r3, [r7, #15]
    break;
 80186b8:	e00b      	b.n	80186d2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80186ba:	2303      	movs	r3, #3
 80186bc:	73fb      	strb	r3, [r7, #15]
    break;
 80186be:	e008      	b.n	80186d2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80186c0:	2301      	movs	r3, #1
 80186c2:	73fb      	strb	r3, [r7, #15]
    break;
 80186c4:	e005      	b.n	80186d2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80186c6:	2303      	movs	r3, #3
 80186c8:	73fb      	strb	r3, [r7, #15]
    break;
 80186ca:	e002      	b.n	80186d2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80186cc:	2303      	movs	r3, #3
 80186ce:	73fb      	strb	r3, [r7, #15]
    break;
 80186d0:	bf00      	nop
  }
  return usb_status;
 80186d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80186d4:	4618      	mov	r0, r3
 80186d6:	3710      	adds	r7, #16
 80186d8:	46bd      	mov	sp, r7
 80186da:	bd80      	pop	{r7, pc}

080186dc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80186dc:	b580      	push	{r7, lr}
 80186de:	b084      	sub	sp, #16
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	6078      	str	r0, [r7, #4]
 80186e4:	460b      	mov	r3, r1
 80186e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80186e8:	2300      	movs	r3, #0
 80186ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80186ec:	2300      	movs	r3, #0
 80186ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80186f6:	78fa      	ldrb	r2, [r7, #3]
 80186f8:	4611      	mov	r1, r2
 80186fa:	4618      	mov	r0, r3
 80186fc:	f7f6 fb17 	bl	800ed2e <HAL_PCD_EP_ClrStall>
 8018700:	4603      	mov	r3, r0
 8018702:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018704:	7bbb      	ldrb	r3, [r7, #14]
 8018706:	2b03      	cmp	r3, #3
 8018708:	d816      	bhi.n	8018738 <USBD_LL_ClearStallEP+0x5c>
 801870a:	a201      	add	r2, pc, #4	; (adr r2, 8018710 <USBD_LL_ClearStallEP+0x34>)
 801870c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018710:	08018721 	.word	0x08018721
 8018714:	08018727 	.word	0x08018727
 8018718:	0801872d 	.word	0x0801872d
 801871c:	08018733 	.word	0x08018733
    case HAL_OK :
      usb_status = USBD_OK;
 8018720:	2300      	movs	r3, #0
 8018722:	73fb      	strb	r3, [r7, #15]
    break;
 8018724:	e00b      	b.n	801873e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018726:	2303      	movs	r3, #3
 8018728:	73fb      	strb	r3, [r7, #15]
    break;
 801872a:	e008      	b.n	801873e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801872c:	2301      	movs	r3, #1
 801872e:	73fb      	strb	r3, [r7, #15]
    break;
 8018730:	e005      	b.n	801873e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018732:	2303      	movs	r3, #3
 8018734:	73fb      	strb	r3, [r7, #15]
    break;
 8018736:	e002      	b.n	801873e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8018738:	2303      	movs	r3, #3
 801873a:	73fb      	strb	r3, [r7, #15]
    break;
 801873c:	bf00      	nop
  }
  return usb_status;
 801873e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018740:	4618      	mov	r0, r3
 8018742:	3710      	adds	r7, #16
 8018744:	46bd      	mov	sp, r7
 8018746:	bd80      	pop	{r7, pc}

08018748 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018748:	b480      	push	{r7}
 801874a:	b085      	sub	sp, #20
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
 8018750:	460b      	mov	r3, r1
 8018752:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801875a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801875c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018760:	2b00      	cmp	r3, #0
 8018762:	da0b      	bge.n	801877c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018764:	78fb      	ldrb	r3, [r7, #3]
 8018766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801876a:	68f9      	ldr	r1, [r7, #12]
 801876c:	4613      	mov	r3, r2
 801876e:	00db      	lsls	r3, r3, #3
 8018770:	4413      	add	r3, r2
 8018772:	009b      	lsls	r3, r3, #2
 8018774:	440b      	add	r3, r1
 8018776:	333e      	adds	r3, #62	; 0x3e
 8018778:	781b      	ldrb	r3, [r3, #0]
 801877a:	e00b      	b.n	8018794 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801877c:	78fb      	ldrb	r3, [r7, #3]
 801877e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018782:	68f9      	ldr	r1, [r7, #12]
 8018784:	4613      	mov	r3, r2
 8018786:	00db      	lsls	r3, r3, #3
 8018788:	4413      	add	r3, r2
 801878a:	009b      	lsls	r3, r3, #2
 801878c:	440b      	add	r3, r1
 801878e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8018792:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018794:	4618      	mov	r0, r3
 8018796:	3714      	adds	r7, #20
 8018798:	46bd      	mov	sp, r7
 801879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801879e:	4770      	bx	lr

080187a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b084      	sub	sp, #16
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
 80187a8:	460b      	mov	r3, r1
 80187aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187ac:	2300      	movs	r3, #0
 80187ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80187b0:	2300      	movs	r3, #0
 80187b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80187ba:	78fa      	ldrb	r2, [r7, #3]
 80187bc:	4611      	mov	r1, r2
 80187be:	4618      	mov	r0, r3
 80187c0:	f7f6 f8e9 	bl	800e996 <HAL_PCD_SetAddress>
 80187c4:	4603      	mov	r3, r0
 80187c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80187c8:	7bbb      	ldrb	r3, [r7, #14]
 80187ca:	2b03      	cmp	r3, #3
 80187cc:	d816      	bhi.n	80187fc <USBD_LL_SetUSBAddress+0x5c>
 80187ce:	a201      	add	r2, pc, #4	; (adr r2, 80187d4 <USBD_LL_SetUSBAddress+0x34>)
 80187d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187d4:	080187e5 	.word	0x080187e5
 80187d8:	080187eb 	.word	0x080187eb
 80187dc:	080187f1 	.word	0x080187f1
 80187e0:	080187f7 	.word	0x080187f7
    case HAL_OK :
      usb_status = USBD_OK;
 80187e4:	2300      	movs	r3, #0
 80187e6:	73fb      	strb	r3, [r7, #15]
    break;
 80187e8:	e00b      	b.n	8018802 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80187ea:	2303      	movs	r3, #3
 80187ec:	73fb      	strb	r3, [r7, #15]
    break;
 80187ee:	e008      	b.n	8018802 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80187f0:	2301      	movs	r3, #1
 80187f2:	73fb      	strb	r3, [r7, #15]
    break;
 80187f4:	e005      	b.n	8018802 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80187f6:	2303      	movs	r3, #3
 80187f8:	73fb      	strb	r3, [r7, #15]
    break;
 80187fa:	e002      	b.n	8018802 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80187fc:	2303      	movs	r3, #3
 80187fe:	73fb      	strb	r3, [r7, #15]
    break;
 8018800:	bf00      	nop
  }
  return usb_status;
 8018802:	7bfb      	ldrb	r3, [r7, #15]
}
 8018804:	4618      	mov	r0, r3
 8018806:	3710      	adds	r7, #16
 8018808:	46bd      	mov	sp, r7
 801880a:	bd80      	pop	{r7, pc}

0801880c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b086      	sub	sp, #24
 8018810:	af00      	add	r7, sp, #0
 8018812:	60f8      	str	r0, [r7, #12]
 8018814:	607a      	str	r2, [r7, #4]
 8018816:	603b      	str	r3, [r7, #0]
 8018818:	460b      	mov	r3, r1
 801881a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801881c:	2300      	movs	r3, #0
 801881e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018820:	2300      	movs	r3, #0
 8018822:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801882a:	7af9      	ldrb	r1, [r7, #11]
 801882c:	683b      	ldr	r3, [r7, #0]
 801882e:	687a      	ldr	r2, [r7, #4]
 8018830:	f7f6 f9de 	bl	800ebf0 <HAL_PCD_EP_Transmit>
 8018834:	4603      	mov	r3, r0
 8018836:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8018838:	7dbb      	ldrb	r3, [r7, #22]
 801883a:	2b03      	cmp	r3, #3
 801883c:	d816      	bhi.n	801886c <USBD_LL_Transmit+0x60>
 801883e:	a201      	add	r2, pc, #4	; (adr r2, 8018844 <USBD_LL_Transmit+0x38>)
 8018840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018844:	08018855 	.word	0x08018855
 8018848:	0801885b 	.word	0x0801885b
 801884c:	08018861 	.word	0x08018861
 8018850:	08018867 	.word	0x08018867
    case HAL_OK :
      usb_status = USBD_OK;
 8018854:	2300      	movs	r3, #0
 8018856:	75fb      	strb	r3, [r7, #23]
    break;
 8018858:	e00b      	b.n	8018872 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801885a:	2303      	movs	r3, #3
 801885c:	75fb      	strb	r3, [r7, #23]
    break;
 801885e:	e008      	b.n	8018872 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018860:	2301      	movs	r3, #1
 8018862:	75fb      	strb	r3, [r7, #23]
    break;
 8018864:	e005      	b.n	8018872 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018866:	2303      	movs	r3, #3
 8018868:	75fb      	strb	r3, [r7, #23]
    break;
 801886a:	e002      	b.n	8018872 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 801886c:	2303      	movs	r3, #3
 801886e:	75fb      	strb	r3, [r7, #23]
    break;
 8018870:	bf00      	nop
  }
  return usb_status;
 8018872:	7dfb      	ldrb	r3, [r7, #23]
}
 8018874:	4618      	mov	r0, r3
 8018876:	3718      	adds	r7, #24
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}

0801887c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801887c:	b580      	push	{r7, lr}
 801887e:	b086      	sub	sp, #24
 8018880:	af00      	add	r7, sp, #0
 8018882:	60f8      	str	r0, [r7, #12]
 8018884:	607a      	str	r2, [r7, #4]
 8018886:	603b      	str	r3, [r7, #0]
 8018888:	460b      	mov	r3, r1
 801888a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801888c:	2300      	movs	r3, #0
 801888e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018890:	2300      	movs	r3, #0
 8018892:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801889a:	7af9      	ldrb	r1, [r7, #11]
 801889c:	683b      	ldr	r3, [r7, #0]
 801889e:	687a      	ldr	r2, [r7, #4]
 80188a0:	f7f6 f950 	bl	800eb44 <HAL_PCD_EP_Receive>
 80188a4:	4603      	mov	r3, r0
 80188a6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80188a8:	7dbb      	ldrb	r3, [r7, #22]
 80188aa:	2b03      	cmp	r3, #3
 80188ac:	d816      	bhi.n	80188dc <USBD_LL_PrepareReceive+0x60>
 80188ae:	a201      	add	r2, pc, #4	; (adr r2, 80188b4 <USBD_LL_PrepareReceive+0x38>)
 80188b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188b4:	080188c5 	.word	0x080188c5
 80188b8:	080188cb 	.word	0x080188cb
 80188bc:	080188d1 	.word	0x080188d1
 80188c0:	080188d7 	.word	0x080188d7
    case HAL_OK :
      usb_status = USBD_OK;
 80188c4:	2300      	movs	r3, #0
 80188c6:	75fb      	strb	r3, [r7, #23]
    break;
 80188c8:	e00b      	b.n	80188e2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80188ca:	2303      	movs	r3, #3
 80188cc:	75fb      	strb	r3, [r7, #23]
    break;
 80188ce:	e008      	b.n	80188e2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80188d0:	2301      	movs	r3, #1
 80188d2:	75fb      	strb	r3, [r7, #23]
    break;
 80188d4:	e005      	b.n	80188e2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80188d6:	2303      	movs	r3, #3
 80188d8:	75fb      	strb	r3, [r7, #23]
    break;
 80188da:	e002      	b.n	80188e2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80188dc:	2303      	movs	r3, #3
 80188de:	75fb      	strb	r3, [r7, #23]
    break;
 80188e0:	bf00      	nop
  }
  return usb_status;
 80188e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80188e4:	4618      	mov	r0, r3
 80188e6:	3718      	adds	r7, #24
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd80      	pop	{r7, pc}

080188ec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b082      	sub	sp, #8
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
 80188f4:	460b      	mov	r3, r1
 80188f6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80188fe:	78fa      	ldrb	r2, [r7, #3]
 8018900:	4611      	mov	r1, r2
 8018902:	4618      	mov	r0, r3
 8018904:	f7f6 f95c 	bl	800ebc0 <HAL_PCD_EP_GetRxCount>
 8018908:	4603      	mov	r3, r0
}
 801890a:	4618      	mov	r0, r3
 801890c:	3708      	adds	r7, #8
 801890e:	46bd      	mov	sp, r7
 8018910:	bd80      	pop	{r7, pc}
	...

08018914 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8018914:	b580      	push	{r7, lr}
 8018916:	b082      	sub	sp, #8
 8018918:	af00      	add	r7, sp, #0
 801891a:	6078      	str	r0, [r7, #4]
 801891c:	460b      	mov	r3, r1
 801891e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8018920:	78fb      	ldrb	r3, [r7, #3]
 8018922:	2b00      	cmp	r3, #0
 8018924:	d002      	beq.n	801892c <HAL_PCDEx_LPM_Callback+0x18>
 8018926:	2b01      	cmp	r3, #1
 8018928:	d01f      	beq.n	801896a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801892a:	e03b      	b.n	80189a4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	6a1b      	ldr	r3, [r3, #32]
 8018930:	2b00      	cmp	r3, #0
 8018932:	d007      	beq.n	8018944 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8018934:	f000 f854 	bl	80189e0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018938:	4b1c      	ldr	r3, [pc, #112]	; (80189ac <HAL_PCDEx_LPM_Callback+0x98>)
 801893a:	691b      	ldr	r3, [r3, #16]
 801893c:	4a1b      	ldr	r2, [pc, #108]	; (80189ac <HAL_PCDEx_LPM_Callback+0x98>)
 801893e:	f023 0306 	bic.w	r3, r3, #6
 8018942:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	687a      	ldr	r2, [r7, #4]
 8018950:	6812      	ldr	r2, [r2, #0]
 8018952:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018956:	f023 0301 	bic.w	r3, r3, #1
 801895a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018962:	4618      	mov	r0, r3
 8018964:	f7fe fb08 	bl	8016f78 <USBD_LL_Resume>
    break;
 8018968:	e01c      	b.n	80189a4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	687a      	ldr	r2, [r7, #4]
 8018976:	6812      	ldr	r2, [r2, #0]
 8018978:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801897c:	f043 0301 	orr.w	r3, r3, #1
 8018980:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018988:	4618      	mov	r0, r3
 801898a:	f7fe fadf 	bl	8016f4c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	6a1b      	ldr	r3, [r3, #32]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d005      	beq.n	80189a2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018996:	4b05      	ldr	r3, [pc, #20]	; (80189ac <HAL_PCDEx_LPM_Callback+0x98>)
 8018998:	691b      	ldr	r3, [r3, #16]
 801899a:	4a04      	ldr	r2, [pc, #16]	; (80189ac <HAL_PCDEx_LPM_Callback+0x98>)
 801899c:	f043 0306 	orr.w	r3, r3, #6
 80189a0:	6113      	str	r3, [r2, #16]
    break;
 80189a2:	bf00      	nop
}
 80189a4:	bf00      	nop
 80189a6:	3708      	adds	r7, #8
 80189a8:	46bd      	mov	sp, r7
 80189aa:	bd80      	pop	{r7, pc}
 80189ac:	e000ed00 	.word	0xe000ed00

080189b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80189b0:	b480      	push	{r7}
 80189b2:	b083      	sub	sp, #12
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80189b8:	4b03      	ldr	r3, [pc, #12]	; (80189c8 <USBD_static_malloc+0x18>)
}
 80189ba:	4618      	mov	r0, r3
 80189bc:	370c      	adds	r7, #12
 80189be:	46bd      	mov	sp, r7
 80189c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c4:	4770      	bx	lr
 80189c6:	bf00      	nop
 80189c8:	20002ba4 	.word	0x20002ba4

080189cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80189cc:	b480      	push	{r7}
 80189ce:	b083      	sub	sp, #12
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]

}
 80189d4:	bf00      	nop
 80189d6:	370c      	adds	r7, #12
 80189d8:	46bd      	mov	sp, r7
 80189da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189de:	4770      	bx	lr

080189e0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80189e4:	f7e9 f886 	bl	8001af4 <SystemClock_Config>
}
 80189e8:	bf00      	nop
 80189ea:	bd80      	pop	{r7, pc}

080189ec <__errno>:
 80189ec:	4b01      	ldr	r3, [pc, #4]	; (80189f4 <__errno+0x8>)
 80189ee:	6818      	ldr	r0, [r3, #0]
 80189f0:	4770      	bx	lr
 80189f2:	bf00      	nop
 80189f4:	200006d8 	.word	0x200006d8

080189f8 <__libc_init_array>:
 80189f8:	b570      	push	{r4, r5, r6, lr}
 80189fa:	4d0d      	ldr	r5, [pc, #52]	; (8018a30 <__libc_init_array+0x38>)
 80189fc:	4c0d      	ldr	r4, [pc, #52]	; (8018a34 <__libc_init_array+0x3c>)
 80189fe:	1b64      	subs	r4, r4, r5
 8018a00:	10a4      	asrs	r4, r4, #2
 8018a02:	2600      	movs	r6, #0
 8018a04:	42a6      	cmp	r6, r4
 8018a06:	d109      	bne.n	8018a1c <__libc_init_array+0x24>
 8018a08:	4d0b      	ldr	r5, [pc, #44]	; (8018a38 <__libc_init_array+0x40>)
 8018a0a:	4c0c      	ldr	r4, [pc, #48]	; (8018a3c <__libc_init_array+0x44>)
 8018a0c:	f001 f83a 	bl	8019a84 <_init>
 8018a10:	1b64      	subs	r4, r4, r5
 8018a12:	10a4      	asrs	r4, r4, #2
 8018a14:	2600      	movs	r6, #0
 8018a16:	42a6      	cmp	r6, r4
 8018a18:	d105      	bne.n	8018a26 <__libc_init_array+0x2e>
 8018a1a:	bd70      	pop	{r4, r5, r6, pc}
 8018a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a20:	4798      	blx	r3
 8018a22:	3601      	adds	r6, #1
 8018a24:	e7ee      	b.n	8018a04 <__libc_init_array+0xc>
 8018a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a2a:	4798      	blx	r3
 8018a2c:	3601      	adds	r6, #1
 8018a2e:	e7f2      	b.n	8018a16 <__libc_init_array+0x1e>
 8018a30:	0801bc08 	.word	0x0801bc08
 8018a34:	0801bc08 	.word	0x0801bc08
 8018a38:	0801bc08 	.word	0x0801bc08
 8018a3c:	0801bc0c 	.word	0x0801bc0c

08018a40 <memcpy>:
 8018a40:	440a      	add	r2, r1
 8018a42:	4291      	cmp	r1, r2
 8018a44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018a48:	d100      	bne.n	8018a4c <memcpy+0xc>
 8018a4a:	4770      	bx	lr
 8018a4c:	b510      	push	{r4, lr}
 8018a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018a56:	4291      	cmp	r1, r2
 8018a58:	d1f9      	bne.n	8018a4e <memcpy+0xe>
 8018a5a:	bd10      	pop	{r4, pc}

08018a5c <memset>:
 8018a5c:	4402      	add	r2, r0
 8018a5e:	4603      	mov	r3, r0
 8018a60:	4293      	cmp	r3, r2
 8018a62:	d100      	bne.n	8018a66 <memset+0xa>
 8018a64:	4770      	bx	lr
 8018a66:	f803 1b01 	strb.w	r1, [r3], #1
 8018a6a:	e7f9      	b.n	8018a60 <memset+0x4>

08018a6c <_free_r>:
 8018a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018a6e:	2900      	cmp	r1, #0
 8018a70:	d044      	beq.n	8018afc <_free_r+0x90>
 8018a72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a76:	9001      	str	r0, [sp, #4]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	f1a1 0404 	sub.w	r4, r1, #4
 8018a7e:	bfb8      	it	lt
 8018a80:	18e4      	addlt	r4, r4, r3
 8018a82:	f000 fc59 	bl	8019338 <__malloc_lock>
 8018a86:	4a1e      	ldr	r2, [pc, #120]	; (8018b00 <_free_r+0x94>)
 8018a88:	9801      	ldr	r0, [sp, #4]
 8018a8a:	6813      	ldr	r3, [r2, #0]
 8018a8c:	b933      	cbnz	r3, 8018a9c <_free_r+0x30>
 8018a8e:	6063      	str	r3, [r4, #4]
 8018a90:	6014      	str	r4, [r2, #0]
 8018a92:	b003      	add	sp, #12
 8018a94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018a98:	f000 bc54 	b.w	8019344 <__malloc_unlock>
 8018a9c:	42a3      	cmp	r3, r4
 8018a9e:	d908      	bls.n	8018ab2 <_free_r+0x46>
 8018aa0:	6825      	ldr	r5, [r4, #0]
 8018aa2:	1961      	adds	r1, r4, r5
 8018aa4:	428b      	cmp	r3, r1
 8018aa6:	bf01      	itttt	eq
 8018aa8:	6819      	ldreq	r1, [r3, #0]
 8018aaa:	685b      	ldreq	r3, [r3, #4]
 8018aac:	1949      	addeq	r1, r1, r5
 8018aae:	6021      	streq	r1, [r4, #0]
 8018ab0:	e7ed      	b.n	8018a8e <_free_r+0x22>
 8018ab2:	461a      	mov	r2, r3
 8018ab4:	685b      	ldr	r3, [r3, #4]
 8018ab6:	b10b      	cbz	r3, 8018abc <_free_r+0x50>
 8018ab8:	42a3      	cmp	r3, r4
 8018aba:	d9fa      	bls.n	8018ab2 <_free_r+0x46>
 8018abc:	6811      	ldr	r1, [r2, #0]
 8018abe:	1855      	adds	r5, r2, r1
 8018ac0:	42a5      	cmp	r5, r4
 8018ac2:	d10b      	bne.n	8018adc <_free_r+0x70>
 8018ac4:	6824      	ldr	r4, [r4, #0]
 8018ac6:	4421      	add	r1, r4
 8018ac8:	1854      	adds	r4, r2, r1
 8018aca:	42a3      	cmp	r3, r4
 8018acc:	6011      	str	r1, [r2, #0]
 8018ace:	d1e0      	bne.n	8018a92 <_free_r+0x26>
 8018ad0:	681c      	ldr	r4, [r3, #0]
 8018ad2:	685b      	ldr	r3, [r3, #4]
 8018ad4:	6053      	str	r3, [r2, #4]
 8018ad6:	4421      	add	r1, r4
 8018ad8:	6011      	str	r1, [r2, #0]
 8018ada:	e7da      	b.n	8018a92 <_free_r+0x26>
 8018adc:	d902      	bls.n	8018ae4 <_free_r+0x78>
 8018ade:	230c      	movs	r3, #12
 8018ae0:	6003      	str	r3, [r0, #0]
 8018ae2:	e7d6      	b.n	8018a92 <_free_r+0x26>
 8018ae4:	6825      	ldr	r5, [r4, #0]
 8018ae6:	1961      	adds	r1, r4, r5
 8018ae8:	428b      	cmp	r3, r1
 8018aea:	bf04      	itt	eq
 8018aec:	6819      	ldreq	r1, [r3, #0]
 8018aee:	685b      	ldreq	r3, [r3, #4]
 8018af0:	6063      	str	r3, [r4, #4]
 8018af2:	bf04      	itt	eq
 8018af4:	1949      	addeq	r1, r1, r5
 8018af6:	6021      	streq	r1, [r4, #0]
 8018af8:	6054      	str	r4, [r2, #4]
 8018afa:	e7ca      	b.n	8018a92 <_free_r+0x26>
 8018afc:	b003      	add	sp, #12
 8018afe:	bd30      	pop	{r4, r5, pc}
 8018b00:	20002dc4 	.word	0x20002dc4

08018b04 <sbrk_aligned>:
 8018b04:	b570      	push	{r4, r5, r6, lr}
 8018b06:	4e0e      	ldr	r6, [pc, #56]	; (8018b40 <sbrk_aligned+0x3c>)
 8018b08:	460c      	mov	r4, r1
 8018b0a:	6831      	ldr	r1, [r6, #0]
 8018b0c:	4605      	mov	r5, r0
 8018b0e:	b911      	cbnz	r1, 8018b16 <sbrk_aligned+0x12>
 8018b10:	f000 f91a 	bl	8018d48 <_sbrk_r>
 8018b14:	6030      	str	r0, [r6, #0]
 8018b16:	4621      	mov	r1, r4
 8018b18:	4628      	mov	r0, r5
 8018b1a:	f000 f915 	bl	8018d48 <_sbrk_r>
 8018b1e:	1c43      	adds	r3, r0, #1
 8018b20:	d00a      	beq.n	8018b38 <sbrk_aligned+0x34>
 8018b22:	1cc4      	adds	r4, r0, #3
 8018b24:	f024 0403 	bic.w	r4, r4, #3
 8018b28:	42a0      	cmp	r0, r4
 8018b2a:	d007      	beq.n	8018b3c <sbrk_aligned+0x38>
 8018b2c:	1a21      	subs	r1, r4, r0
 8018b2e:	4628      	mov	r0, r5
 8018b30:	f000 f90a 	bl	8018d48 <_sbrk_r>
 8018b34:	3001      	adds	r0, #1
 8018b36:	d101      	bne.n	8018b3c <sbrk_aligned+0x38>
 8018b38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018b3c:	4620      	mov	r0, r4
 8018b3e:	bd70      	pop	{r4, r5, r6, pc}
 8018b40:	20002dc8 	.word	0x20002dc8

08018b44 <_malloc_r>:
 8018b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b48:	1ccd      	adds	r5, r1, #3
 8018b4a:	f025 0503 	bic.w	r5, r5, #3
 8018b4e:	3508      	adds	r5, #8
 8018b50:	2d0c      	cmp	r5, #12
 8018b52:	bf38      	it	cc
 8018b54:	250c      	movcc	r5, #12
 8018b56:	2d00      	cmp	r5, #0
 8018b58:	4607      	mov	r7, r0
 8018b5a:	db01      	blt.n	8018b60 <_malloc_r+0x1c>
 8018b5c:	42a9      	cmp	r1, r5
 8018b5e:	d905      	bls.n	8018b6c <_malloc_r+0x28>
 8018b60:	230c      	movs	r3, #12
 8018b62:	603b      	str	r3, [r7, #0]
 8018b64:	2600      	movs	r6, #0
 8018b66:	4630      	mov	r0, r6
 8018b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b6c:	4e2e      	ldr	r6, [pc, #184]	; (8018c28 <_malloc_r+0xe4>)
 8018b6e:	f000 fbe3 	bl	8019338 <__malloc_lock>
 8018b72:	6833      	ldr	r3, [r6, #0]
 8018b74:	461c      	mov	r4, r3
 8018b76:	bb34      	cbnz	r4, 8018bc6 <_malloc_r+0x82>
 8018b78:	4629      	mov	r1, r5
 8018b7a:	4638      	mov	r0, r7
 8018b7c:	f7ff ffc2 	bl	8018b04 <sbrk_aligned>
 8018b80:	1c43      	adds	r3, r0, #1
 8018b82:	4604      	mov	r4, r0
 8018b84:	d14d      	bne.n	8018c22 <_malloc_r+0xde>
 8018b86:	6834      	ldr	r4, [r6, #0]
 8018b88:	4626      	mov	r6, r4
 8018b8a:	2e00      	cmp	r6, #0
 8018b8c:	d140      	bne.n	8018c10 <_malloc_r+0xcc>
 8018b8e:	6823      	ldr	r3, [r4, #0]
 8018b90:	4631      	mov	r1, r6
 8018b92:	4638      	mov	r0, r7
 8018b94:	eb04 0803 	add.w	r8, r4, r3
 8018b98:	f000 f8d6 	bl	8018d48 <_sbrk_r>
 8018b9c:	4580      	cmp	r8, r0
 8018b9e:	d13a      	bne.n	8018c16 <_malloc_r+0xd2>
 8018ba0:	6821      	ldr	r1, [r4, #0]
 8018ba2:	3503      	adds	r5, #3
 8018ba4:	1a6d      	subs	r5, r5, r1
 8018ba6:	f025 0503 	bic.w	r5, r5, #3
 8018baa:	3508      	adds	r5, #8
 8018bac:	2d0c      	cmp	r5, #12
 8018bae:	bf38      	it	cc
 8018bb0:	250c      	movcc	r5, #12
 8018bb2:	4629      	mov	r1, r5
 8018bb4:	4638      	mov	r0, r7
 8018bb6:	f7ff ffa5 	bl	8018b04 <sbrk_aligned>
 8018bba:	3001      	adds	r0, #1
 8018bbc:	d02b      	beq.n	8018c16 <_malloc_r+0xd2>
 8018bbe:	6823      	ldr	r3, [r4, #0]
 8018bc0:	442b      	add	r3, r5
 8018bc2:	6023      	str	r3, [r4, #0]
 8018bc4:	e00e      	b.n	8018be4 <_malloc_r+0xa0>
 8018bc6:	6822      	ldr	r2, [r4, #0]
 8018bc8:	1b52      	subs	r2, r2, r5
 8018bca:	d41e      	bmi.n	8018c0a <_malloc_r+0xc6>
 8018bcc:	2a0b      	cmp	r2, #11
 8018bce:	d916      	bls.n	8018bfe <_malloc_r+0xba>
 8018bd0:	1961      	adds	r1, r4, r5
 8018bd2:	42a3      	cmp	r3, r4
 8018bd4:	6025      	str	r5, [r4, #0]
 8018bd6:	bf18      	it	ne
 8018bd8:	6059      	strne	r1, [r3, #4]
 8018bda:	6863      	ldr	r3, [r4, #4]
 8018bdc:	bf08      	it	eq
 8018bde:	6031      	streq	r1, [r6, #0]
 8018be0:	5162      	str	r2, [r4, r5]
 8018be2:	604b      	str	r3, [r1, #4]
 8018be4:	4638      	mov	r0, r7
 8018be6:	f104 060b 	add.w	r6, r4, #11
 8018bea:	f000 fbab 	bl	8019344 <__malloc_unlock>
 8018bee:	f026 0607 	bic.w	r6, r6, #7
 8018bf2:	1d23      	adds	r3, r4, #4
 8018bf4:	1af2      	subs	r2, r6, r3
 8018bf6:	d0b6      	beq.n	8018b66 <_malloc_r+0x22>
 8018bf8:	1b9b      	subs	r3, r3, r6
 8018bfa:	50a3      	str	r3, [r4, r2]
 8018bfc:	e7b3      	b.n	8018b66 <_malloc_r+0x22>
 8018bfe:	6862      	ldr	r2, [r4, #4]
 8018c00:	42a3      	cmp	r3, r4
 8018c02:	bf0c      	ite	eq
 8018c04:	6032      	streq	r2, [r6, #0]
 8018c06:	605a      	strne	r2, [r3, #4]
 8018c08:	e7ec      	b.n	8018be4 <_malloc_r+0xa0>
 8018c0a:	4623      	mov	r3, r4
 8018c0c:	6864      	ldr	r4, [r4, #4]
 8018c0e:	e7b2      	b.n	8018b76 <_malloc_r+0x32>
 8018c10:	4634      	mov	r4, r6
 8018c12:	6876      	ldr	r6, [r6, #4]
 8018c14:	e7b9      	b.n	8018b8a <_malloc_r+0x46>
 8018c16:	230c      	movs	r3, #12
 8018c18:	603b      	str	r3, [r7, #0]
 8018c1a:	4638      	mov	r0, r7
 8018c1c:	f000 fb92 	bl	8019344 <__malloc_unlock>
 8018c20:	e7a1      	b.n	8018b66 <_malloc_r+0x22>
 8018c22:	6025      	str	r5, [r4, #0]
 8018c24:	e7de      	b.n	8018be4 <_malloc_r+0xa0>
 8018c26:	bf00      	nop
 8018c28:	20002dc4 	.word	0x20002dc4

08018c2c <iprintf>:
 8018c2c:	b40f      	push	{r0, r1, r2, r3}
 8018c2e:	4b0a      	ldr	r3, [pc, #40]	; (8018c58 <iprintf+0x2c>)
 8018c30:	b513      	push	{r0, r1, r4, lr}
 8018c32:	681c      	ldr	r4, [r3, #0]
 8018c34:	b124      	cbz	r4, 8018c40 <iprintf+0x14>
 8018c36:	69a3      	ldr	r3, [r4, #24]
 8018c38:	b913      	cbnz	r3, 8018c40 <iprintf+0x14>
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	f000 fa76 	bl	801912c <__sinit>
 8018c40:	ab05      	add	r3, sp, #20
 8018c42:	9a04      	ldr	r2, [sp, #16]
 8018c44:	68a1      	ldr	r1, [r4, #8]
 8018c46:	9301      	str	r3, [sp, #4]
 8018c48:	4620      	mov	r0, r4
 8018c4a:	f000 fbab 	bl	80193a4 <_vfiprintf_r>
 8018c4e:	b002      	add	sp, #8
 8018c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c54:	b004      	add	sp, #16
 8018c56:	4770      	bx	lr
 8018c58:	200006d8 	.word	0x200006d8

08018c5c <_puts_r>:
 8018c5c:	b570      	push	{r4, r5, r6, lr}
 8018c5e:	460e      	mov	r6, r1
 8018c60:	4605      	mov	r5, r0
 8018c62:	b118      	cbz	r0, 8018c6c <_puts_r+0x10>
 8018c64:	6983      	ldr	r3, [r0, #24]
 8018c66:	b90b      	cbnz	r3, 8018c6c <_puts_r+0x10>
 8018c68:	f000 fa60 	bl	801912c <__sinit>
 8018c6c:	69ab      	ldr	r3, [r5, #24]
 8018c6e:	68ac      	ldr	r4, [r5, #8]
 8018c70:	b913      	cbnz	r3, 8018c78 <_puts_r+0x1c>
 8018c72:	4628      	mov	r0, r5
 8018c74:	f000 fa5a 	bl	801912c <__sinit>
 8018c78:	4b2c      	ldr	r3, [pc, #176]	; (8018d2c <_puts_r+0xd0>)
 8018c7a:	429c      	cmp	r4, r3
 8018c7c:	d120      	bne.n	8018cc0 <_puts_r+0x64>
 8018c7e:	686c      	ldr	r4, [r5, #4]
 8018c80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c82:	07db      	lsls	r3, r3, #31
 8018c84:	d405      	bmi.n	8018c92 <_puts_r+0x36>
 8018c86:	89a3      	ldrh	r3, [r4, #12]
 8018c88:	0598      	lsls	r0, r3, #22
 8018c8a:	d402      	bmi.n	8018c92 <_puts_r+0x36>
 8018c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c8e:	f000 faeb 	bl	8019268 <__retarget_lock_acquire_recursive>
 8018c92:	89a3      	ldrh	r3, [r4, #12]
 8018c94:	0719      	lsls	r1, r3, #28
 8018c96:	d51d      	bpl.n	8018cd4 <_puts_r+0x78>
 8018c98:	6923      	ldr	r3, [r4, #16]
 8018c9a:	b1db      	cbz	r3, 8018cd4 <_puts_r+0x78>
 8018c9c:	3e01      	subs	r6, #1
 8018c9e:	68a3      	ldr	r3, [r4, #8]
 8018ca0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018ca4:	3b01      	subs	r3, #1
 8018ca6:	60a3      	str	r3, [r4, #8]
 8018ca8:	bb39      	cbnz	r1, 8018cfa <_puts_r+0x9e>
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	da38      	bge.n	8018d20 <_puts_r+0xc4>
 8018cae:	4622      	mov	r2, r4
 8018cb0:	210a      	movs	r1, #10
 8018cb2:	4628      	mov	r0, r5
 8018cb4:	f000 f860 	bl	8018d78 <__swbuf_r>
 8018cb8:	3001      	adds	r0, #1
 8018cba:	d011      	beq.n	8018ce0 <_puts_r+0x84>
 8018cbc:	250a      	movs	r5, #10
 8018cbe:	e011      	b.n	8018ce4 <_puts_r+0x88>
 8018cc0:	4b1b      	ldr	r3, [pc, #108]	; (8018d30 <_puts_r+0xd4>)
 8018cc2:	429c      	cmp	r4, r3
 8018cc4:	d101      	bne.n	8018cca <_puts_r+0x6e>
 8018cc6:	68ac      	ldr	r4, [r5, #8]
 8018cc8:	e7da      	b.n	8018c80 <_puts_r+0x24>
 8018cca:	4b1a      	ldr	r3, [pc, #104]	; (8018d34 <_puts_r+0xd8>)
 8018ccc:	429c      	cmp	r4, r3
 8018cce:	bf08      	it	eq
 8018cd0:	68ec      	ldreq	r4, [r5, #12]
 8018cd2:	e7d5      	b.n	8018c80 <_puts_r+0x24>
 8018cd4:	4621      	mov	r1, r4
 8018cd6:	4628      	mov	r0, r5
 8018cd8:	f000 f8a0 	bl	8018e1c <__swsetup_r>
 8018cdc:	2800      	cmp	r0, #0
 8018cde:	d0dd      	beq.n	8018c9c <_puts_r+0x40>
 8018ce0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8018ce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018ce6:	07da      	lsls	r2, r3, #31
 8018ce8:	d405      	bmi.n	8018cf6 <_puts_r+0x9a>
 8018cea:	89a3      	ldrh	r3, [r4, #12]
 8018cec:	059b      	lsls	r3, r3, #22
 8018cee:	d402      	bmi.n	8018cf6 <_puts_r+0x9a>
 8018cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018cf2:	f000 faba 	bl	801926a <__retarget_lock_release_recursive>
 8018cf6:	4628      	mov	r0, r5
 8018cf8:	bd70      	pop	{r4, r5, r6, pc}
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	da04      	bge.n	8018d08 <_puts_r+0xac>
 8018cfe:	69a2      	ldr	r2, [r4, #24]
 8018d00:	429a      	cmp	r2, r3
 8018d02:	dc06      	bgt.n	8018d12 <_puts_r+0xb6>
 8018d04:	290a      	cmp	r1, #10
 8018d06:	d004      	beq.n	8018d12 <_puts_r+0xb6>
 8018d08:	6823      	ldr	r3, [r4, #0]
 8018d0a:	1c5a      	adds	r2, r3, #1
 8018d0c:	6022      	str	r2, [r4, #0]
 8018d0e:	7019      	strb	r1, [r3, #0]
 8018d10:	e7c5      	b.n	8018c9e <_puts_r+0x42>
 8018d12:	4622      	mov	r2, r4
 8018d14:	4628      	mov	r0, r5
 8018d16:	f000 f82f 	bl	8018d78 <__swbuf_r>
 8018d1a:	3001      	adds	r0, #1
 8018d1c:	d1bf      	bne.n	8018c9e <_puts_r+0x42>
 8018d1e:	e7df      	b.n	8018ce0 <_puts_r+0x84>
 8018d20:	6823      	ldr	r3, [r4, #0]
 8018d22:	250a      	movs	r5, #10
 8018d24:	1c5a      	adds	r2, r3, #1
 8018d26:	6022      	str	r2, [r4, #0]
 8018d28:	701d      	strb	r5, [r3, #0]
 8018d2a:	e7db      	b.n	8018ce4 <_puts_r+0x88>
 8018d2c:	0801bb8c 	.word	0x0801bb8c
 8018d30:	0801bbac 	.word	0x0801bbac
 8018d34:	0801bb6c 	.word	0x0801bb6c

08018d38 <puts>:
 8018d38:	4b02      	ldr	r3, [pc, #8]	; (8018d44 <puts+0xc>)
 8018d3a:	4601      	mov	r1, r0
 8018d3c:	6818      	ldr	r0, [r3, #0]
 8018d3e:	f7ff bf8d 	b.w	8018c5c <_puts_r>
 8018d42:	bf00      	nop
 8018d44:	200006d8 	.word	0x200006d8

08018d48 <_sbrk_r>:
 8018d48:	b538      	push	{r3, r4, r5, lr}
 8018d4a:	4d06      	ldr	r5, [pc, #24]	; (8018d64 <_sbrk_r+0x1c>)
 8018d4c:	2300      	movs	r3, #0
 8018d4e:	4604      	mov	r4, r0
 8018d50:	4608      	mov	r0, r1
 8018d52:	602b      	str	r3, [r5, #0]
 8018d54:	f7e9 fbe0 	bl	8002518 <_sbrk>
 8018d58:	1c43      	adds	r3, r0, #1
 8018d5a:	d102      	bne.n	8018d62 <_sbrk_r+0x1a>
 8018d5c:	682b      	ldr	r3, [r5, #0]
 8018d5e:	b103      	cbz	r3, 8018d62 <_sbrk_r+0x1a>
 8018d60:	6023      	str	r3, [r4, #0]
 8018d62:	bd38      	pop	{r3, r4, r5, pc}
 8018d64:	20002dd0 	.word	0x20002dd0

08018d68 <strcpy>:
 8018d68:	4603      	mov	r3, r0
 8018d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018d6e:	f803 2b01 	strb.w	r2, [r3], #1
 8018d72:	2a00      	cmp	r2, #0
 8018d74:	d1f9      	bne.n	8018d6a <strcpy+0x2>
 8018d76:	4770      	bx	lr

08018d78 <__swbuf_r>:
 8018d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d7a:	460e      	mov	r6, r1
 8018d7c:	4614      	mov	r4, r2
 8018d7e:	4605      	mov	r5, r0
 8018d80:	b118      	cbz	r0, 8018d8a <__swbuf_r+0x12>
 8018d82:	6983      	ldr	r3, [r0, #24]
 8018d84:	b90b      	cbnz	r3, 8018d8a <__swbuf_r+0x12>
 8018d86:	f000 f9d1 	bl	801912c <__sinit>
 8018d8a:	4b21      	ldr	r3, [pc, #132]	; (8018e10 <__swbuf_r+0x98>)
 8018d8c:	429c      	cmp	r4, r3
 8018d8e:	d12b      	bne.n	8018de8 <__swbuf_r+0x70>
 8018d90:	686c      	ldr	r4, [r5, #4]
 8018d92:	69a3      	ldr	r3, [r4, #24]
 8018d94:	60a3      	str	r3, [r4, #8]
 8018d96:	89a3      	ldrh	r3, [r4, #12]
 8018d98:	071a      	lsls	r2, r3, #28
 8018d9a:	d52f      	bpl.n	8018dfc <__swbuf_r+0x84>
 8018d9c:	6923      	ldr	r3, [r4, #16]
 8018d9e:	b36b      	cbz	r3, 8018dfc <__swbuf_r+0x84>
 8018da0:	6923      	ldr	r3, [r4, #16]
 8018da2:	6820      	ldr	r0, [r4, #0]
 8018da4:	1ac0      	subs	r0, r0, r3
 8018da6:	6963      	ldr	r3, [r4, #20]
 8018da8:	b2f6      	uxtb	r6, r6
 8018daa:	4283      	cmp	r3, r0
 8018dac:	4637      	mov	r7, r6
 8018dae:	dc04      	bgt.n	8018dba <__swbuf_r+0x42>
 8018db0:	4621      	mov	r1, r4
 8018db2:	4628      	mov	r0, r5
 8018db4:	f000 f926 	bl	8019004 <_fflush_r>
 8018db8:	bb30      	cbnz	r0, 8018e08 <__swbuf_r+0x90>
 8018dba:	68a3      	ldr	r3, [r4, #8]
 8018dbc:	3b01      	subs	r3, #1
 8018dbe:	60a3      	str	r3, [r4, #8]
 8018dc0:	6823      	ldr	r3, [r4, #0]
 8018dc2:	1c5a      	adds	r2, r3, #1
 8018dc4:	6022      	str	r2, [r4, #0]
 8018dc6:	701e      	strb	r6, [r3, #0]
 8018dc8:	6963      	ldr	r3, [r4, #20]
 8018dca:	3001      	adds	r0, #1
 8018dcc:	4283      	cmp	r3, r0
 8018dce:	d004      	beq.n	8018dda <__swbuf_r+0x62>
 8018dd0:	89a3      	ldrh	r3, [r4, #12]
 8018dd2:	07db      	lsls	r3, r3, #31
 8018dd4:	d506      	bpl.n	8018de4 <__swbuf_r+0x6c>
 8018dd6:	2e0a      	cmp	r6, #10
 8018dd8:	d104      	bne.n	8018de4 <__swbuf_r+0x6c>
 8018dda:	4621      	mov	r1, r4
 8018ddc:	4628      	mov	r0, r5
 8018dde:	f000 f911 	bl	8019004 <_fflush_r>
 8018de2:	b988      	cbnz	r0, 8018e08 <__swbuf_r+0x90>
 8018de4:	4638      	mov	r0, r7
 8018de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018de8:	4b0a      	ldr	r3, [pc, #40]	; (8018e14 <__swbuf_r+0x9c>)
 8018dea:	429c      	cmp	r4, r3
 8018dec:	d101      	bne.n	8018df2 <__swbuf_r+0x7a>
 8018dee:	68ac      	ldr	r4, [r5, #8]
 8018df0:	e7cf      	b.n	8018d92 <__swbuf_r+0x1a>
 8018df2:	4b09      	ldr	r3, [pc, #36]	; (8018e18 <__swbuf_r+0xa0>)
 8018df4:	429c      	cmp	r4, r3
 8018df6:	bf08      	it	eq
 8018df8:	68ec      	ldreq	r4, [r5, #12]
 8018dfa:	e7ca      	b.n	8018d92 <__swbuf_r+0x1a>
 8018dfc:	4621      	mov	r1, r4
 8018dfe:	4628      	mov	r0, r5
 8018e00:	f000 f80c 	bl	8018e1c <__swsetup_r>
 8018e04:	2800      	cmp	r0, #0
 8018e06:	d0cb      	beq.n	8018da0 <__swbuf_r+0x28>
 8018e08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018e0c:	e7ea      	b.n	8018de4 <__swbuf_r+0x6c>
 8018e0e:	bf00      	nop
 8018e10:	0801bb8c 	.word	0x0801bb8c
 8018e14:	0801bbac 	.word	0x0801bbac
 8018e18:	0801bb6c 	.word	0x0801bb6c

08018e1c <__swsetup_r>:
 8018e1c:	4b32      	ldr	r3, [pc, #200]	; (8018ee8 <__swsetup_r+0xcc>)
 8018e1e:	b570      	push	{r4, r5, r6, lr}
 8018e20:	681d      	ldr	r5, [r3, #0]
 8018e22:	4606      	mov	r6, r0
 8018e24:	460c      	mov	r4, r1
 8018e26:	b125      	cbz	r5, 8018e32 <__swsetup_r+0x16>
 8018e28:	69ab      	ldr	r3, [r5, #24]
 8018e2a:	b913      	cbnz	r3, 8018e32 <__swsetup_r+0x16>
 8018e2c:	4628      	mov	r0, r5
 8018e2e:	f000 f97d 	bl	801912c <__sinit>
 8018e32:	4b2e      	ldr	r3, [pc, #184]	; (8018eec <__swsetup_r+0xd0>)
 8018e34:	429c      	cmp	r4, r3
 8018e36:	d10f      	bne.n	8018e58 <__swsetup_r+0x3c>
 8018e38:	686c      	ldr	r4, [r5, #4]
 8018e3a:	89a3      	ldrh	r3, [r4, #12]
 8018e3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018e40:	0719      	lsls	r1, r3, #28
 8018e42:	d42c      	bmi.n	8018e9e <__swsetup_r+0x82>
 8018e44:	06dd      	lsls	r5, r3, #27
 8018e46:	d411      	bmi.n	8018e6c <__swsetup_r+0x50>
 8018e48:	2309      	movs	r3, #9
 8018e4a:	6033      	str	r3, [r6, #0]
 8018e4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018e50:	81a3      	strh	r3, [r4, #12]
 8018e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e56:	e03e      	b.n	8018ed6 <__swsetup_r+0xba>
 8018e58:	4b25      	ldr	r3, [pc, #148]	; (8018ef0 <__swsetup_r+0xd4>)
 8018e5a:	429c      	cmp	r4, r3
 8018e5c:	d101      	bne.n	8018e62 <__swsetup_r+0x46>
 8018e5e:	68ac      	ldr	r4, [r5, #8]
 8018e60:	e7eb      	b.n	8018e3a <__swsetup_r+0x1e>
 8018e62:	4b24      	ldr	r3, [pc, #144]	; (8018ef4 <__swsetup_r+0xd8>)
 8018e64:	429c      	cmp	r4, r3
 8018e66:	bf08      	it	eq
 8018e68:	68ec      	ldreq	r4, [r5, #12]
 8018e6a:	e7e6      	b.n	8018e3a <__swsetup_r+0x1e>
 8018e6c:	0758      	lsls	r0, r3, #29
 8018e6e:	d512      	bpl.n	8018e96 <__swsetup_r+0x7a>
 8018e70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e72:	b141      	cbz	r1, 8018e86 <__swsetup_r+0x6a>
 8018e74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e78:	4299      	cmp	r1, r3
 8018e7a:	d002      	beq.n	8018e82 <__swsetup_r+0x66>
 8018e7c:	4630      	mov	r0, r6
 8018e7e:	f7ff fdf5 	bl	8018a6c <_free_r>
 8018e82:	2300      	movs	r3, #0
 8018e84:	6363      	str	r3, [r4, #52]	; 0x34
 8018e86:	89a3      	ldrh	r3, [r4, #12]
 8018e88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018e8c:	81a3      	strh	r3, [r4, #12]
 8018e8e:	2300      	movs	r3, #0
 8018e90:	6063      	str	r3, [r4, #4]
 8018e92:	6923      	ldr	r3, [r4, #16]
 8018e94:	6023      	str	r3, [r4, #0]
 8018e96:	89a3      	ldrh	r3, [r4, #12]
 8018e98:	f043 0308 	orr.w	r3, r3, #8
 8018e9c:	81a3      	strh	r3, [r4, #12]
 8018e9e:	6923      	ldr	r3, [r4, #16]
 8018ea0:	b94b      	cbnz	r3, 8018eb6 <__swsetup_r+0x9a>
 8018ea2:	89a3      	ldrh	r3, [r4, #12]
 8018ea4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018eac:	d003      	beq.n	8018eb6 <__swsetup_r+0x9a>
 8018eae:	4621      	mov	r1, r4
 8018eb0:	4630      	mov	r0, r6
 8018eb2:	f000 fa01 	bl	80192b8 <__smakebuf_r>
 8018eb6:	89a0      	ldrh	r0, [r4, #12]
 8018eb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018ebc:	f010 0301 	ands.w	r3, r0, #1
 8018ec0:	d00a      	beq.n	8018ed8 <__swsetup_r+0xbc>
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	60a3      	str	r3, [r4, #8]
 8018ec6:	6963      	ldr	r3, [r4, #20]
 8018ec8:	425b      	negs	r3, r3
 8018eca:	61a3      	str	r3, [r4, #24]
 8018ecc:	6923      	ldr	r3, [r4, #16]
 8018ece:	b943      	cbnz	r3, 8018ee2 <__swsetup_r+0xc6>
 8018ed0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018ed4:	d1ba      	bne.n	8018e4c <__swsetup_r+0x30>
 8018ed6:	bd70      	pop	{r4, r5, r6, pc}
 8018ed8:	0781      	lsls	r1, r0, #30
 8018eda:	bf58      	it	pl
 8018edc:	6963      	ldrpl	r3, [r4, #20]
 8018ede:	60a3      	str	r3, [r4, #8]
 8018ee0:	e7f4      	b.n	8018ecc <__swsetup_r+0xb0>
 8018ee2:	2000      	movs	r0, #0
 8018ee4:	e7f7      	b.n	8018ed6 <__swsetup_r+0xba>
 8018ee6:	bf00      	nop
 8018ee8:	200006d8 	.word	0x200006d8
 8018eec:	0801bb8c 	.word	0x0801bb8c
 8018ef0:	0801bbac 	.word	0x0801bbac
 8018ef4:	0801bb6c 	.word	0x0801bb6c

08018ef8 <__sflush_r>:
 8018ef8:	898a      	ldrh	r2, [r1, #12]
 8018efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018efe:	4605      	mov	r5, r0
 8018f00:	0710      	lsls	r0, r2, #28
 8018f02:	460c      	mov	r4, r1
 8018f04:	d458      	bmi.n	8018fb8 <__sflush_r+0xc0>
 8018f06:	684b      	ldr	r3, [r1, #4]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	dc05      	bgt.n	8018f18 <__sflush_r+0x20>
 8018f0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	dc02      	bgt.n	8018f18 <__sflush_r+0x20>
 8018f12:	2000      	movs	r0, #0
 8018f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018f1a:	2e00      	cmp	r6, #0
 8018f1c:	d0f9      	beq.n	8018f12 <__sflush_r+0x1a>
 8018f1e:	2300      	movs	r3, #0
 8018f20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018f24:	682f      	ldr	r7, [r5, #0]
 8018f26:	602b      	str	r3, [r5, #0]
 8018f28:	d032      	beq.n	8018f90 <__sflush_r+0x98>
 8018f2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018f2c:	89a3      	ldrh	r3, [r4, #12]
 8018f2e:	075a      	lsls	r2, r3, #29
 8018f30:	d505      	bpl.n	8018f3e <__sflush_r+0x46>
 8018f32:	6863      	ldr	r3, [r4, #4]
 8018f34:	1ac0      	subs	r0, r0, r3
 8018f36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018f38:	b10b      	cbz	r3, 8018f3e <__sflush_r+0x46>
 8018f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018f3c:	1ac0      	subs	r0, r0, r3
 8018f3e:	2300      	movs	r3, #0
 8018f40:	4602      	mov	r2, r0
 8018f42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018f44:	6a21      	ldr	r1, [r4, #32]
 8018f46:	4628      	mov	r0, r5
 8018f48:	47b0      	blx	r6
 8018f4a:	1c43      	adds	r3, r0, #1
 8018f4c:	89a3      	ldrh	r3, [r4, #12]
 8018f4e:	d106      	bne.n	8018f5e <__sflush_r+0x66>
 8018f50:	6829      	ldr	r1, [r5, #0]
 8018f52:	291d      	cmp	r1, #29
 8018f54:	d82c      	bhi.n	8018fb0 <__sflush_r+0xb8>
 8018f56:	4a2a      	ldr	r2, [pc, #168]	; (8019000 <__sflush_r+0x108>)
 8018f58:	40ca      	lsrs	r2, r1
 8018f5a:	07d6      	lsls	r6, r2, #31
 8018f5c:	d528      	bpl.n	8018fb0 <__sflush_r+0xb8>
 8018f5e:	2200      	movs	r2, #0
 8018f60:	6062      	str	r2, [r4, #4]
 8018f62:	04d9      	lsls	r1, r3, #19
 8018f64:	6922      	ldr	r2, [r4, #16]
 8018f66:	6022      	str	r2, [r4, #0]
 8018f68:	d504      	bpl.n	8018f74 <__sflush_r+0x7c>
 8018f6a:	1c42      	adds	r2, r0, #1
 8018f6c:	d101      	bne.n	8018f72 <__sflush_r+0x7a>
 8018f6e:	682b      	ldr	r3, [r5, #0]
 8018f70:	b903      	cbnz	r3, 8018f74 <__sflush_r+0x7c>
 8018f72:	6560      	str	r0, [r4, #84]	; 0x54
 8018f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018f76:	602f      	str	r7, [r5, #0]
 8018f78:	2900      	cmp	r1, #0
 8018f7a:	d0ca      	beq.n	8018f12 <__sflush_r+0x1a>
 8018f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018f80:	4299      	cmp	r1, r3
 8018f82:	d002      	beq.n	8018f8a <__sflush_r+0x92>
 8018f84:	4628      	mov	r0, r5
 8018f86:	f7ff fd71 	bl	8018a6c <_free_r>
 8018f8a:	2000      	movs	r0, #0
 8018f8c:	6360      	str	r0, [r4, #52]	; 0x34
 8018f8e:	e7c1      	b.n	8018f14 <__sflush_r+0x1c>
 8018f90:	6a21      	ldr	r1, [r4, #32]
 8018f92:	2301      	movs	r3, #1
 8018f94:	4628      	mov	r0, r5
 8018f96:	47b0      	blx	r6
 8018f98:	1c41      	adds	r1, r0, #1
 8018f9a:	d1c7      	bne.n	8018f2c <__sflush_r+0x34>
 8018f9c:	682b      	ldr	r3, [r5, #0]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d0c4      	beq.n	8018f2c <__sflush_r+0x34>
 8018fa2:	2b1d      	cmp	r3, #29
 8018fa4:	d001      	beq.n	8018faa <__sflush_r+0xb2>
 8018fa6:	2b16      	cmp	r3, #22
 8018fa8:	d101      	bne.n	8018fae <__sflush_r+0xb6>
 8018faa:	602f      	str	r7, [r5, #0]
 8018fac:	e7b1      	b.n	8018f12 <__sflush_r+0x1a>
 8018fae:	89a3      	ldrh	r3, [r4, #12]
 8018fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018fb4:	81a3      	strh	r3, [r4, #12]
 8018fb6:	e7ad      	b.n	8018f14 <__sflush_r+0x1c>
 8018fb8:	690f      	ldr	r7, [r1, #16]
 8018fba:	2f00      	cmp	r7, #0
 8018fbc:	d0a9      	beq.n	8018f12 <__sflush_r+0x1a>
 8018fbe:	0793      	lsls	r3, r2, #30
 8018fc0:	680e      	ldr	r6, [r1, #0]
 8018fc2:	bf08      	it	eq
 8018fc4:	694b      	ldreq	r3, [r1, #20]
 8018fc6:	600f      	str	r7, [r1, #0]
 8018fc8:	bf18      	it	ne
 8018fca:	2300      	movne	r3, #0
 8018fcc:	eba6 0807 	sub.w	r8, r6, r7
 8018fd0:	608b      	str	r3, [r1, #8]
 8018fd2:	f1b8 0f00 	cmp.w	r8, #0
 8018fd6:	dd9c      	ble.n	8018f12 <__sflush_r+0x1a>
 8018fd8:	6a21      	ldr	r1, [r4, #32]
 8018fda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018fdc:	4643      	mov	r3, r8
 8018fde:	463a      	mov	r2, r7
 8018fe0:	4628      	mov	r0, r5
 8018fe2:	47b0      	blx	r6
 8018fe4:	2800      	cmp	r0, #0
 8018fe6:	dc06      	bgt.n	8018ff6 <__sflush_r+0xfe>
 8018fe8:	89a3      	ldrh	r3, [r4, #12]
 8018fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018fee:	81a3      	strh	r3, [r4, #12]
 8018ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018ff4:	e78e      	b.n	8018f14 <__sflush_r+0x1c>
 8018ff6:	4407      	add	r7, r0
 8018ff8:	eba8 0800 	sub.w	r8, r8, r0
 8018ffc:	e7e9      	b.n	8018fd2 <__sflush_r+0xda>
 8018ffe:	bf00      	nop
 8019000:	20400001 	.word	0x20400001

08019004 <_fflush_r>:
 8019004:	b538      	push	{r3, r4, r5, lr}
 8019006:	690b      	ldr	r3, [r1, #16]
 8019008:	4605      	mov	r5, r0
 801900a:	460c      	mov	r4, r1
 801900c:	b913      	cbnz	r3, 8019014 <_fflush_r+0x10>
 801900e:	2500      	movs	r5, #0
 8019010:	4628      	mov	r0, r5
 8019012:	bd38      	pop	{r3, r4, r5, pc}
 8019014:	b118      	cbz	r0, 801901e <_fflush_r+0x1a>
 8019016:	6983      	ldr	r3, [r0, #24]
 8019018:	b90b      	cbnz	r3, 801901e <_fflush_r+0x1a>
 801901a:	f000 f887 	bl	801912c <__sinit>
 801901e:	4b14      	ldr	r3, [pc, #80]	; (8019070 <_fflush_r+0x6c>)
 8019020:	429c      	cmp	r4, r3
 8019022:	d11b      	bne.n	801905c <_fflush_r+0x58>
 8019024:	686c      	ldr	r4, [r5, #4]
 8019026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801902a:	2b00      	cmp	r3, #0
 801902c:	d0ef      	beq.n	801900e <_fflush_r+0xa>
 801902e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019030:	07d0      	lsls	r0, r2, #31
 8019032:	d404      	bmi.n	801903e <_fflush_r+0x3a>
 8019034:	0599      	lsls	r1, r3, #22
 8019036:	d402      	bmi.n	801903e <_fflush_r+0x3a>
 8019038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801903a:	f000 f915 	bl	8019268 <__retarget_lock_acquire_recursive>
 801903e:	4628      	mov	r0, r5
 8019040:	4621      	mov	r1, r4
 8019042:	f7ff ff59 	bl	8018ef8 <__sflush_r>
 8019046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019048:	07da      	lsls	r2, r3, #31
 801904a:	4605      	mov	r5, r0
 801904c:	d4e0      	bmi.n	8019010 <_fflush_r+0xc>
 801904e:	89a3      	ldrh	r3, [r4, #12]
 8019050:	059b      	lsls	r3, r3, #22
 8019052:	d4dd      	bmi.n	8019010 <_fflush_r+0xc>
 8019054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019056:	f000 f908 	bl	801926a <__retarget_lock_release_recursive>
 801905a:	e7d9      	b.n	8019010 <_fflush_r+0xc>
 801905c:	4b05      	ldr	r3, [pc, #20]	; (8019074 <_fflush_r+0x70>)
 801905e:	429c      	cmp	r4, r3
 8019060:	d101      	bne.n	8019066 <_fflush_r+0x62>
 8019062:	68ac      	ldr	r4, [r5, #8]
 8019064:	e7df      	b.n	8019026 <_fflush_r+0x22>
 8019066:	4b04      	ldr	r3, [pc, #16]	; (8019078 <_fflush_r+0x74>)
 8019068:	429c      	cmp	r4, r3
 801906a:	bf08      	it	eq
 801906c:	68ec      	ldreq	r4, [r5, #12]
 801906e:	e7da      	b.n	8019026 <_fflush_r+0x22>
 8019070:	0801bb8c 	.word	0x0801bb8c
 8019074:	0801bbac 	.word	0x0801bbac
 8019078:	0801bb6c 	.word	0x0801bb6c

0801907c <std>:
 801907c:	2300      	movs	r3, #0
 801907e:	b510      	push	{r4, lr}
 8019080:	4604      	mov	r4, r0
 8019082:	e9c0 3300 	strd	r3, r3, [r0]
 8019086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801908a:	6083      	str	r3, [r0, #8]
 801908c:	8181      	strh	r1, [r0, #12]
 801908e:	6643      	str	r3, [r0, #100]	; 0x64
 8019090:	81c2      	strh	r2, [r0, #14]
 8019092:	6183      	str	r3, [r0, #24]
 8019094:	4619      	mov	r1, r3
 8019096:	2208      	movs	r2, #8
 8019098:	305c      	adds	r0, #92	; 0x5c
 801909a:	f7ff fcdf 	bl	8018a5c <memset>
 801909e:	4b05      	ldr	r3, [pc, #20]	; (80190b4 <std+0x38>)
 80190a0:	6263      	str	r3, [r4, #36]	; 0x24
 80190a2:	4b05      	ldr	r3, [pc, #20]	; (80190b8 <std+0x3c>)
 80190a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80190a6:	4b05      	ldr	r3, [pc, #20]	; (80190bc <std+0x40>)
 80190a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80190aa:	4b05      	ldr	r3, [pc, #20]	; (80190c0 <std+0x44>)
 80190ac:	6224      	str	r4, [r4, #32]
 80190ae:	6323      	str	r3, [r4, #48]	; 0x30
 80190b0:	bd10      	pop	{r4, pc}
 80190b2:	bf00      	nop
 80190b4:	0801992d 	.word	0x0801992d
 80190b8:	0801994f 	.word	0x0801994f
 80190bc:	08019987 	.word	0x08019987
 80190c0:	080199ab 	.word	0x080199ab

080190c4 <_cleanup_r>:
 80190c4:	4901      	ldr	r1, [pc, #4]	; (80190cc <_cleanup_r+0x8>)
 80190c6:	f000 b8af 	b.w	8019228 <_fwalk_reent>
 80190ca:	bf00      	nop
 80190cc:	08019005 	.word	0x08019005

080190d0 <__sfmoreglue>:
 80190d0:	b570      	push	{r4, r5, r6, lr}
 80190d2:	2268      	movs	r2, #104	; 0x68
 80190d4:	1e4d      	subs	r5, r1, #1
 80190d6:	4355      	muls	r5, r2
 80190d8:	460e      	mov	r6, r1
 80190da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80190de:	f7ff fd31 	bl	8018b44 <_malloc_r>
 80190e2:	4604      	mov	r4, r0
 80190e4:	b140      	cbz	r0, 80190f8 <__sfmoreglue+0x28>
 80190e6:	2100      	movs	r1, #0
 80190e8:	e9c0 1600 	strd	r1, r6, [r0]
 80190ec:	300c      	adds	r0, #12
 80190ee:	60a0      	str	r0, [r4, #8]
 80190f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80190f4:	f7ff fcb2 	bl	8018a5c <memset>
 80190f8:	4620      	mov	r0, r4
 80190fa:	bd70      	pop	{r4, r5, r6, pc}

080190fc <__sfp_lock_acquire>:
 80190fc:	4801      	ldr	r0, [pc, #4]	; (8019104 <__sfp_lock_acquire+0x8>)
 80190fe:	f000 b8b3 	b.w	8019268 <__retarget_lock_acquire_recursive>
 8019102:	bf00      	nop
 8019104:	20002dcd 	.word	0x20002dcd

08019108 <__sfp_lock_release>:
 8019108:	4801      	ldr	r0, [pc, #4]	; (8019110 <__sfp_lock_release+0x8>)
 801910a:	f000 b8ae 	b.w	801926a <__retarget_lock_release_recursive>
 801910e:	bf00      	nop
 8019110:	20002dcd 	.word	0x20002dcd

08019114 <__sinit_lock_acquire>:
 8019114:	4801      	ldr	r0, [pc, #4]	; (801911c <__sinit_lock_acquire+0x8>)
 8019116:	f000 b8a7 	b.w	8019268 <__retarget_lock_acquire_recursive>
 801911a:	bf00      	nop
 801911c:	20002dce 	.word	0x20002dce

08019120 <__sinit_lock_release>:
 8019120:	4801      	ldr	r0, [pc, #4]	; (8019128 <__sinit_lock_release+0x8>)
 8019122:	f000 b8a2 	b.w	801926a <__retarget_lock_release_recursive>
 8019126:	bf00      	nop
 8019128:	20002dce 	.word	0x20002dce

0801912c <__sinit>:
 801912c:	b510      	push	{r4, lr}
 801912e:	4604      	mov	r4, r0
 8019130:	f7ff fff0 	bl	8019114 <__sinit_lock_acquire>
 8019134:	69a3      	ldr	r3, [r4, #24]
 8019136:	b11b      	cbz	r3, 8019140 <__sinit+0x14>
 8019138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801913c:	f7ff bff0 	b.w	8019120 <__sinit_lock_release>
 8019140:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019144:	6523      	str	r3, [r4, #80]	; 0x50
 8019146:	4b13      	ldr	r3, [pc, #76]	; (8019194 <__sinit+0x68>)
 8019148:	4a13      	ldr	r2, [pc, #76]	; (8019198 <__sinit+0x6c>)
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	62a2      	str	r2, [r4, #40]	; 0x28
 801914e:	42a3      	cmp	r3, r4
 8019150:	bf04      	itt	eq
 8019152:	2301      	moveq	r3, #1
 8019154:	61a3      	streq	r3, [r4, #24]
 8019156:	4620      	mov	r0, r4
 8019158:	f000 f820 	bl	801919c <__sfp>
 801915c:	6060      	str	r0, [r4, #4]
 801915e:	4620      	mov	r0, r4
 8019160:	f000 f81c 	bl	801919c <__sfp>
 8019164:	60a0      	str	r0, [r4, #8]
 8019166:	4620      	mov	r0, r4
 8019168:	f000 f818 	bl	801919c <__sfp>
 801916c:	2200      	movs	r2, #0
 801916e:	60e0      	str	r0, [r4, #12]
 8019170:	2104      	movs	r1, #4
 8019172:	6860      	ldr	r0, [r4, #4]
 8019174:	f7ff ff82 	bl	801907c <std>
 8019178:	68a0      	ldr	r0, [r4, #8]
 801917a:	2201      	movs	r2, #1
 801917c:	2109      	movs	r1, #9
 801917e:	f7ff ff7d 	bl	801907c <std>
 8019182:	68e0      	ldr	r0, [r4, #12]
 8019184:	2202      	movs	r2, #2
 8019186:	2112      	movs	r1, #18
 8019188:	f7ff ff78 	bl	801907c <std>
 801918c:	2301      	movs	r3, #1
 801918e:	61a3      	str	r3, [r4, #24]
 8019190:	e7d2      	b.n	8019138 <__sinit+0xc>
 8019192:	bf00      	nop
 8019194:	0801bb68 	.word	0x0801bb68
 8019198:	080190c5 	.word	0x080190c5

0801919c <__sfp>:
 801919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801919e:	4607      	mov	r7, r0
 80191a0:	f7ff ffac 	bl	80190fc <__sfp_lock_acquire>
 80191a4:	4b1e      	ldr	r3, [pc, #120]	; (8019220 <__sfp+0x84>)
 80191a6:	681e      	ldr	r6, [r3, #0]
 80191a8:	69b3      	ldr	r3, [r6, #24]
 80191aa:	b913      	cbnz	r3, 80191b2 <__sfp+0x16>
 80191ac:	4630      	mov	r0, r6
 80191ae:	f7ff ffbd 	bl	801912c <__sinit>
 80191b2:	3648      	adds	r6, #72	; 0x48
 80191b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80191b8:	3b01      	subs	r3, #1
 80191ba:	d503      	bpl.n	80191c4 <__sfp+0x28>
 80191bc:	6833      	ldr	r3, [r6, #0]
 80191be:	b30b      	cbz	r3, 8019204 <__sfp+0x68>
 80191c0:	6836      	ldr	r6, [r6, #0]
 80191c2:	e7f7      	b.n	80191b4 <__sfp+0x18>
 80191c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80191c8:	b9d5      	cbnz	r5, 8019200 <__sfp+0x64>
 80191ca:	4b16      	ldr	r3, [pc, #88]	; (8019224 <__sfp+0x88>)
 80191cc:	60e3      	str	r3, [r4, #12]
 80191ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80191d2:	6665      	str	r5, [r4, #100]	; 0x64
 80191d4:	f000 f847 	bl	8019266 <__retarget_lock_init_recursive>
 80191d8:	f7ff ff96 	bl	8019108 <__sfp_lock_release>
 80191dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80191e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80191e4:	6025      	str	r5, [r4, #0]
 80191e6:	61a5      	str	r5, [r4, #24]
 80191e8:	2208      	movs	r2, #8
 80191ea:	4629      	mov	r1, r5
 80191ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80191f0:	f7ff fc34 	bl	8018a5c <memset>
 80191f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80191f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80191fc:	4620      	mov	r0, r4
 80191fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019200:	3468      	adds	r4, #104	; 0x68
 8019202:	e7d9      	b.n	80191b8 <__sfp+0x1c>
 8019204:	2104      	movs	r1, #4
 8019206:	4638      	mov	r0, r7
 8019208:	f7ff ff62 	bl	80190d0 <__sfmoreglue>
 801920c:	4604      	mov	r4, r0
 801920e:	6030      	str	r0, [r6, #0]
 8019210:	2800      	cmp	r0, #0
 8019212:	d1d5      	bne.n	80191c0 <__sfp+0x24>
 8019214:	f7ff ff78 	bl	8019108 <__sfp_lock_release>
 8019218:	230c      	movs	r3, #12
 801921a:	603b      	str	r3, [r7, #0]
 801921c:	e7ee      	b.n	80191fc <__sfp+0x60>
 801921e:	bf00      	nop
 8019220:	0801bb68 	.word	0x0801bb68
 8019224:	ffff0001 	.word	0xffff0001

08019228 <_fwalk_reent>:
 8019228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801922c:	4606      	mov	r6, r0
 801922e:	4688      	mov	r8, r1
 8019230:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019234:	2700      	movs	r7, #0
 8019236:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801923a:	f1b9 0901 	subs.w	r9, r9, #1
 801923e:	d505      	bpl.n	801924c <_fwalk_reent+0x24>
 8019240:	6824      	ldr	r4, [r4, #0]
 8019242:	2c00      	cmp	r4, #0
 8019244:	d1f7      	bne.n	8019236 <_fwalk_reent+0xe>
 8019246:	4638      	mov	r0, r7
 8019248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801924c:	89ab      	ldrh	r3, [r5, #12]
 801924e:	2b01      	cmp	r3, #1
 8019250:	d907      	bls.n	8019262 <_fwalk_reent+0x3a>
 8019252:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019256:	3301      	adds	r3, #1
 8019258:	d003      	beq.n	8019262 <_fwalk_reent+0x3a>
 801925a:	4629      	mov	r1, r5
 801925c:	4630      	mov	r0, r6
 801925e:	47c0      	blx	r8
 8019260:	4307      	orrs	r7, r0
 8019262:	3568      	adds	r5, #104	; 0x68
 8019264:	e7e9      	b.n	801923a <_fwalk_reent+0x12>

08019266 <__retarget_lock_init_recursive>:
 8019266:	4770      	bx	lr

08019268 <__retarget_lock_acquire_recursive>:
 8019268:	4770      	bx	lr

0801926a <__retarget_lock_release_recursive>:
 801926a:	4770      	bx	lr

0801926c <__swhatbuf_r>:
 801926c:	b570      	push	{r4, r5, r6, lr}
 801926e:	460e      	mov	r6, r1
 8019270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019274:	2900      	cmp	r1, #0
 8019276:	b096      	sub	sp, #88	; 0x58
 8019278:	4614      	mov	r4, r2
 801927a:	461d      	mov	r5, r3
 801927c:	da08      	bge.n	8019290 <__swhatbuf_r+0x24>
 801927e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019282:	2200      	movs	r2, #0
 8019284:	602a      	str	r2, [r5, #0]
 8019286:	061a      	lsls	r2, r3, #24
 8019288:	d410      	bmi.n	80192ac <__swhatbuf_r+0x40>
 801928a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801928e:	e00e      	b.n	80192ae <__swhatbuf_r+0x42>
 8019290:	466a      	mov	r2, sp
 8019292:	f000 fbb1 	bl	80199f8 <_fstat_r>
 8019296:	2800      	cmp	r0, #0
 8019298:	dbf1      	blt.n	801927e <__swhatbuf_r+0x12>
 801929a:	9a01      	ldr	r2, [sp, #4]
 801929c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80192a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80192a4:	425a      	negs	r2, r3
 80192a6:	415a      	adcs	r2, r3
 80192a8:	602a      	str	r2, [r5, #0]
 80192aa:	e7ee      	b.n	801928a <__swhatbuf_r+0x1e>
 80192ac:	2340      	movs	r3, #64	; 0x40
 80192ae:	2000      	movs	r0, #0
 80192b0:	6023      	str	r3, [r4, #0]
 80192b2:	b016      	add	sp, #88	; 0x58
 80192b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080192b8 <__smakebuf_r>:
 80192b8:	898b      	ldrh	r3, [r1, #12]
 80192ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80192bc:	079d      	lsls	r5, r3, #30
 80192be:	4606      	mov	r6, r0
 80192c0:	460c      	mov	r4, r1
 80192c2:	d507      	bpl.n	80192d4 <__smakebuf_r+0x1c>
 80192c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80192c8:	6023      	str	r3, [r4, #0]
 80192ca:	6123      	str	r3, [r4, #16]
 80192cc:	2301      	movs	r3, #1
 80192ce:	6163      	str	r3, [r4, #20]
 80192d0:	b002      	add	sp, #8
 80192d2:	bd70      	pop	{r4, r5, r6, pc}
 80192d4:	ab01      	add	r3, sp, #4
 80192d6:	466a      	mov	r2, sp
 80192d8:	f7ff ffc8 	bl	801926c <__swhatbuf_r>
 80192dc:	9900      	ldr	r1, [sp, #0]
 80192de:	4605      	mov	r5, r0
 80192e0:	4630      	mov	r0, r6
 80192e2:	f7ff fc2f 	bl	8018b44 <_malloc_r>
 80192e6:	b948      	cbnz	r0, 80192fc <__smakebuf_r+0x44>
 80192e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192ec:	059a      	lsls	r2, r3, #22
 80192ee:	d4ef      	bmi.n	80192d0 <__smakebuf_r+0x18>
 80192f0:	f023 0303 	bic.w	r3, r3, #3
 80192f4:	f043 0302 	orr.w	r3, r3, #2
 80192f8:	81a3      	strh	r3, [r4, #12]
 80192fa:	e7e3      	b.n	80192c4 <__smakebuf_r+0xc>
 80192fc:	4b0d      	ldr	r3, [pc, #52]	; (8019334 <__smakebuf_r+0x7c>)
 80192fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8019300:	89a3      	ldrh	r3, [r4, #12]
 8019302:	6020      	str	r0, [r4, #0]
 8019304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019308:	81a3      	strh	r3, [r4, #12]
 801930a:	9b00      	ldr	r3, [sp, #0]
 801930c:	6163      	str	r3, [r4, #20]
 801930e:	9b01      	ldr	r3, [sp, #4]
 8019310:	6120      	str	r0, [r4, #16]
 8019312:	b15b      	cbz	r3, 801932c <__smakebuf_r+0x74>
 8019314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019318:	4630      	mov	r0, r6
 801931a:	f000 fb7f 	bl	8019a1c <_isatty_r>
 801931e:	b128      	cbz	r0, 801932c <__smakebuf_r+0x74>
 8019320:	89a3      	ldrh	r3, [r4, #12]
 8019322:	f023 0303 	bic.w	r3, r3, #3
 8019326:	f043 0301 	orr.w	r3, r3, #1
 801932a:	81a3      	strh	r3, [r4, #12]
 801932c:	89a0      	ldrh	r0, [r4, #12]
 801932e:	4305      	orrs	r5, r0
 8019330:	81a5      	strh	r5, [r4, #12]
 8019332:	e7cd      	b.n	80192d0 <__smakebuf_r+0x18>
 8019334:	080190c5 	.word	0x080190c5

08019338 <__malloc_lock>:
 8019338:	4801      	ldr	r0, [pc, #4]	; (8019340 <__malloc_lock+0x8>)
 801933a:	f7ff bf95 	b.w	8019268 <__retarget_lock_acquire_recursive>
 801933e:	bf00      	nop
 8019340:	20002dcc 	.word	0x20002dcc

08019344 <__malloc_unlock>:
 8019344:	4801      	ldr	r0, [pc, #4]	; (801934c <__malloc_unlock+0x8>)
 8019346:	f7ff bf90 	b.w	801926a <__retarget_lock_release_recursive>
 801934a:	bf00      	nop
 801934c:	20002dcc 	.word	0x20002dcc

08019350 <__sfputc_r>:
 8019350:	6893      	ldr	r3, [r2, #8]
 8019352:	3b01      	subs	r3, #1
 8019354:	2b00      	cmp	r3, #0
 8019356:	b410      	push	{r4}
 8019358:	6093      	str	r3, [r2, #8]
 801935a:	da08      	bge.n	801936e <__sfputc_r+0x1e>
 801935c:	6994      	ldr	r4, [r2, #24]
 801935e:	42a3      	cmp	r3, r4
 8019360:	db01      	blt.n	8019366 <__sfputc_r+0x16>
 8019362:	290a      	cmp	r1, #10
 8019364:	d103      	bne.n	801936e <__sfputc_r+0x1e>
 8019366:	f85d 4b04 	ldr.w	r4, [sp], #4
 801936a:	f7ff bd05 	b.w	8018d78 <__swbuf_r>
 801936e:	6813      	ldr	r3, [r2, #0]
 8019370:	1c58      	adds	r0, r3, #1
 8019372:	6010      	str	r0, [r2, #0]
 8019374:	7019      	strb	r1, [r3, #0]
 8019376:	4608      	mov	r0, r1
 8019378:	f85d 4b04 	ldr.w	r4, [sp], #4
 801937c:	4770      	bx	lr

0801937e <__sfputs_r>:
 801937e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019380:	4606      	mov	r6, r0
 8019382:	460f      	mov	r7, r1
 8019384:	4614      	mov	r4, r2
 8019386:	18d5      	adds	r5, r2, r3
 8019388:	42ac      	cmp	r4, r5
 801938a:	d101      	bne.n	8019390 <__sfputs_r+0x12>
 801938c:	2000      	movs	r0, #0
 801938e:	e007      	b.n	80193a0 <__sfputs_r+0x22>
 8019390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019394:	463a      	mov	r2, r7
 8019396:	4630      	mov	r0, r6
 8019398:	f7ff ffda 	bl	8019350 <__sfputc_r>
 801939c:	1c43      	adds	r3, r0, #1
 801939e:	d1f3      	bne.n	8019388 <__sfputs_r+0xa>
 80193a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080193a4 <_vfiprintf_r>:
 80193a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193a8:	460d      	mov	r5, r1
 80193aa:	b09d      	sub	sp, #116	; 0x74
 80193ac:	4614      	mov	r4, r2
 80193ae:	4698      	mov	r8, r3
 80193b0:	4606      	mov	r6, r0
 80193b2:	b118      	cbz	r0, 80193bc <_vfiprintf_r+0x18>
 80193b4:	6983      	ldr	r3, [r0, #24]
 80193b6:	b90b      	cbnz	r3, 80193bc <_vfiprintf_r+0x18>
 80193b8:	f7ff feb8 	bl	801912c <__sinit>
 80193bc:	4b89      	ldr	r3, [pc, #548]	; (80195e4 <_vfiprintf_r+0x240>)
 80193be:	429d      	cmp	r5, r3
 80193c0:	d11b      	bne.n	80193fa <_vfiprintf_r+0x56>
 80193c2:	6875      	ldr	r5, [r6, #4]
 80193c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80193c6:	07d9      	lsls	r1, r3, #31
 80193c8:	d405      	bmi.n	80193d6 <_vfiprintf_r+0x32>
 80193ca:	89ab      	ldrh	r3, [r5, #12]
 80193cc:	059a      	lsls	r2, r3, #22
 80193ce:	d402      	bmi.n	80193d6 <_vfiprintf_r+0x32>
 80193d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80193d2:	f7ff ff49 	bl	8019268 <__retarget_lock_acquire_recursive>
 80193d6:	89ab      	ldrh	r3, [r5, #12]
 80193d8:	071b      	lsls	r3, r3, #28
 80193da:	d501      	bpl.n	80193e0 <_vfiprintf_r+0x3c>
 80193dc:	692b      	ldr	r3, [r5, #16]
 80193de:	b9eb      	cbnz	r3, 801941c <_vfiprintf_r+0x78>
 80193e0:	4629      	mov	r1, r5
 80193e2:	4630      	mov	r0, r6
 80193e4:	f7ff fd1a 	bl	8018e1c <__swsetup_r>
 80193e8:	b1c0      	cbz	r0, 801941c <_vfiprintf_r+0x78>
 80193ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80193ec:	07dc      	lsls	r4, r3, #31
 80193ee:	d50e      	bpl.n	801940e <_vfiprintf_r+0x6a>
 80193f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80193f4:	b01d      	add	sp, #116	; 0x74
 80193f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193fa:	4b7b      	ldr	r3, [pc, #492]	; (80195e8 <_vfiprintf_r+0x244>)
 80193fc:	429d      	cmp	r5, r3
 80193fe:	d101      	bne.n	8019404 <_vfiprintf_r+0x60>
 8019400:	68b5      	ldr	r5, [r6, #8]
 8019402:	e7df      	b.n	80193c4 <_vfiprintf_r+0x20>
 8019404:	4b79      	ldr	r3, [pc, #484]	; (80195ec <_vfiprintf_r+0x248>)
 8019406:	429d      	cmp	r5, r3
 8019408:	bf08      	it	eq
 801940a:	68f5      	ldreq	r5, [r6, #12]
 801940c:	e7da      	b.n	80193c4 <_vfiprintf_r+0x20>
 801940e:	89ab      	ldrh	r3, [r5, #12]
 8019410:	0598      	lsls	r0, r3, #22
 8019412:	d4ed      	bmi.n	80193f0 <_vfiprintf_r+0x4c>
 8019414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019416:	f7ff ff28 	bl	801926a <__retarget_lock_release_recursive>
 801941a:	e7e9      	b.n	80193f0 <_vfiprintf_r+0x4c>
 801941c:	2300      	movs	r3, #0
 801941e:	9309      	str	r3, [sp, #36]	; 0x24
 8019420:	2320      	movs	r3, #32
 8019422:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019426:	f8cd 800c 	str.w	r8, [sp, #12]
 801942a:	2330      	movs	r3, #48	; 0x30
 801942c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80195f0 <_vfiprintf_r+0x24c>
 8019430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019434:	f04f 0901 	mov.w	r9, #1
 8019438:	4623      	mov	r3, r4
 801943a:	469a      	mov	sl, r3
 801943c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019440:	b10a      	cbz	r2, 8019446 <_vfiprintf_r+0xa2>
 8019442:	2a25      	cmp	r2, #37	; 0x25
 8019444:	d1f9      	bne.n	801943a <_vfiprintf_r+0x96>
 8019446:	ebba 0b04 	subs.w	fp, sl, r4
 801944a:	d00b      	beq.n	8019464 <_vfiprintf_r+0xc0>
 801944c:	465b      	mov	r3, fp
 801944e:	4622      	mov	r2, r4
 8019450:	4629      	mov	r1, r5
 8019452:	4630      	mov	r0, r6
 8019454:	f7ff ff93 	bl	801937e <__sfputs_r>
 8019458:	3001      	adds	r0, #1
 801945a:	f000 80aa 	beq.w	80195b2 <_vfiprintf_r+0x20e>
 801945e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019460:	445a      	add	r2, fp
 8019462:	9209      	str	r2, [sp, #36]	; 0x24
 8019464:	f89a 3000 	ldrb.w	r3, [sl]
 8019468:	2b00      	cmp	r3, #0
 801946a:	f000 80a2 	beq.w	80195b2 <_vfiprintf_r+0x20e>
 801946e:	2300      	movs	r3, #0
 8019470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019478:	f10a 0a01 	add.w	sl, sl, #1
 801947c:	9304      	str	r3, [sp, #16]
 801947e:	9307      	str	r3, [sp, #28]
 8019480:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019484:	931a      	str	r3, [sp, #104]	; 0x68
 8019486:	4654      	mov	r4, sl
 8019488:	2205      	movs	r2, #5
 801948a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801948e:	4858      	ldr	r0, [pc, #352]	; (80195f0 <_vfiprintf_r+0x24c>)
 8019490:	f7e6 feae 	bl	80001f0 <memchr>
 8019494:	9a04      	ldr	r2, [sp, #16]
 8019496:	b9d8      	cbnz	r0, 80194d0 <_vfiprintf_r+0x12c>
 8019498:	06d1      	lsls	r1, r2, #27
 801949a:	bf44      	itt	mi
 801949c:	2320      	movmi	r3, #32
 801949e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80194a2:	0713      	lsls	r3, r2, #28
 80194a4:	bf44      	itt	mi
 80194a6:	232b      	movmi	r3, #43	; 0x2b
 80194a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80194ac:	f89a 3000 	ldrb.w	r3, [sl]
 80194b0:	2b2a      	cmp	r3, #42	; 0x2a
 80194b2:	d015      	beq.n	80194e0 <_vfiprintf_r+0x13c>
 80194b4:	9a07      	ldr	r2, [sp, #28]
 80194b6:	4654      	mov	r4, sl
 80194b8:	2000      	movs	r0, #0
 80194ba:	f04f 0c0a 	mov.w	ip, #10
 80194be:	4621      	mov	r1, r4
 80194c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80194c4:	3b30      	subs	r3, #48	; 0x30
 80194c6:	2b09      	cmp	r3, #9
 80194c8:	d94e      	bls.n	8019568 <_vfiprintf_r+0x1c4>
 80194ca:	b1b0      	cbz	r0, 80194fa <_vfiprintf_r+0x156>
 80194cc:	9207      	str	r2, [sp, #28]
 80194ce:	e014      	b.n	80194fa <_vfiprintf_r+0x156>
 80194d0:	eba0 0308 	sub.w	r3, r0, r8
 80194d4:	fa09 f303 	lsl.w	r3, r9, r3
 80194d8:	4313      	orrs	r3, r2
 80194da:	9304      	str	r3, [sp, #16]
 80194dc:	46a2      	mov	sl, r4
 80194de:	e7d2      	b.n	8019486 <_vfiprintf_r+0xe2>
 80194e0:	9b03      	ldr	r3, [sp, #12]
 80194e2:	1d19      	adds	r1, r3, #4
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	9103      	str	r1, [sp, #12]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	bfbb      	ittet	lt
 80194ec:	425b      	neglt	r3, r3
 80194ee:	f042 0202 	orrlt.w	r2, r2, #2
 80194f2:	9307      	strge	r3, [sp, #28]
 80194f4:	9307      	strlt	r3, [sp, #28]
 80194f6:	bfb8      	it	lt
 80194f8:	9204      	strlt	r2, [sp, #16]
 80194fa:	7823      	ldrb	r3, [r4, #0]
 80194fc:	2b2e      	cmp	r3, #46	; 0x2e
 80194fe:	d10c      	bne.n	801951a <_vfiprintf_r+0x176>
 8019500:	7863      	ldrb	r3, [r4, #1]
 8019502:	2b2a      	cmp	r3, #42	; 0x2a
 8019504:	d135      	bne.n	8019572 <_vfiprintf_r+0x1ce>
 8019506:	9b03      	ldr	r3, [sp, #12]
 8019508:	1d1a      	adds	r2, r3, #4
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	9203      	str	r2, [sp, #12]
 801950e:	2b00      	cmp	r3, #0
 8019510:	bfb8      	it	lt
 8019512:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019516:	3402      	adds	r4, #2
 8019518:	9305      	str	r3, [sp, #20]
 801951a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019600 <_vfiprintf_r+0x25c>
 801951e:	7821      	ldrb	r1, [r4, #0]
 8019520:	2203      	movs	r2, #3
 8019522:	4650      	mov	r0, sl
 8019524:	f7e6 fe64 	bl	80001f0 <memchr>
 8019528:	b140      	cbz	r0, 801953c <_vfiprintf_r+0x198>
 801952a:	2340      	movs	r3, #64	; 0x40
 801952c:	eba0 000a 	sub.w	r0, r0, sl
 8019530:	fa03 f000 	lsl.w	r0, r3, r0
 8019534:	9b04      	ldr	r3, [sp, #16]
 8019536:	4303      	orrs	r3, r0
 8019538:	3401      	adds	r4, #1
 801953a:	9304      	str	r3, [sp, #16]
 801953c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019540:	482c      	ldr	r0, [pc, #176]	; (80195f4 <_vfiprintf_r+0x250>)
 8019542:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019546:	2206      	movs	r2, #6
 8019548:	f7e6 fe52 	bl	80001f0 <memchr>
 801954c:	2800      	cmp	r0, #0
 801954e:	d03f      	beq.n	80195d0 <_vfiprintf_r+0x22c>
 8019550:	4b29      	ldr	r3, [pc, #164]	; (80195f8 <_vfiprintf_r+0x254>)
 8019552:	bb1b      	cbnz	r3, 801959c <_vfiprintf_r+0x1f8>
 8019554:	9b03      	ldr	r3, [sp, #12]
 8019556:	3307      	adds	r3, #7
 8019558:	f023 0307 	bic.w	r3, r3, #7
 801955c:	3308      	adds	r3, #8
 801955e:	9303      	str	r3, [sp, #12]
 8019560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019562:	443b      	add	r3, r7
 8019564:	9309      	str	r3, [sp, #36]	; 0x24
 8019566:	e767      	b.n	8019438 <_vfiprintf_r+0x94>
 8019568:	fb0c 3202 	mla	r2, ip, r2, r3
 801956c:	460c      	mov	r4, r1
 801956e:	2001      	movs	r0, #1
 8019570:	e7a5      	b.n	80194be <_vfiprintf_r+0x11a>
 8019572:	2300      	movs	r3, #0
 8019574:	3401      	adds	r4, #1
 8019576:	9305      	str	r3, [sp, #20]
 8019578:	4619      	mov	r1, r3
 801957a:	f04f 0c0a 	mov.w	ip, #10
 801957e:	4620      	mov	r0, r4
 8019580:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019584:	3a30      	subs	r2, #48	; 0x30
 8019586:	2a09      	cmp	r2, #9
 8019588:	d903      	bls.n	8019592 <_vfiprintf_r+0x1ee>
 801958a:	2b00      	cmp	r3, #0
 801958c:	d0c5      	beq.n	801951a <_vfiprintf_r+0x176>
 801958e:	9105      	str	r1, [sp, #20]
 8019590:	e7c3      	b.n	801951a <_vfiprintf_r+0x176>
 8019592:	fb0c 2101 	mla	r1, ip, r1, r2
 8019596:	4604      	mov	r4, r0
 8019598:	2301      	movs	r3, #1
 801959a:	e7f0      	b.n	801957e <_vfiprintf_r+0x1da>
 801959c:	ab03      	add	r3, sp, #12
 801959e:	9300      	str	r3, [sp, #0]
 80195a0:	462a      	mov	r2, r5
 80195a2:	4b16      	ldr	r3, [pc, #88]	; (80195fc <_vfiprintf_r+0x258>)
 80195a4:	a904      	add	r1, sp, #16
 80195a6:	4630      	mov	r0, r6
 80195a8:	f3af 8000 	nop.w
 80195ac:	4607      	mov	r7, r0
 80195ae:	1c78      	adds	r0, r7, #1
 80195b0:	d1d6      	bne.n	8019560 <_vfiprintf_r+0x1bc>
 80195b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80195b4:	07d9      	lsls	r1, r3, #31
 80195b6:	d405      	bmi.n	80195c4 <_vfiprintf_r+0x220>
 80195b8:	89ab      	ldrh	r3, [r5, #12]
 80195ba:	059a      	lsls	r2, r3, #22
 80195bc:	d402      	bmi.n	80195c4 <_vfiprintf_r+0x220>
 80195be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80195c0:	f7ff fe53 	bl	801926a <__retarget_lock_release_recursive>
 80195c4:	89ab      	ldrh	r3, [r5, #12]
 80195c6:	065b      	lsls	r3, r3, #25
 80195c8:	f53f af12 	bmi.w	80193f0 <_vfiprintf_r+0x4c>
 80195cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80195ce:	e711      	b.n	80193f4 <_vfiprintf_r+0x50>
 80195d0:	ab03      	add	r3, sp, #12
 80195d2:	9300      	str	r3, [sp, #0]
 80195d4:	462a      	mov	r2, r5
 80195d6:	4b09      	ldr	r3, [pc, #36]	; (80195fc <_vfiprintf_r+0x258>)
 80195d8:	a904      	add	r1, sp, #16
 80195da:	4630      	mov	r0, r6
 80195dc:	f000 f880 	bl	80196e0 <_printf_i>
 80195e0:	e7e4      	b.n	80195ac <_vfiprintf_r+0x208>
 80195e2:	bf00      	nop
 80195e4:	0801bb8c 	.word	0x0801bb8c
 80195e8:	0801bbac 	.word	0x0801bbac
 80195ec:	0801bb6c 	.word	0x0801bb6c
 80195f0:	0801bbcc 	.word	0x0801bbcc
 80195f4:	0801bbd6 	.word	0x0801bbd6
 80195f8:	00000000 	.word	0x00000000
 80195fc:	0801937f 	.word	0x0801937f
 8019600:	0801bbd2 	.word	0x0801bbd2

08019604 <_printf_common>:
 8019604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019608:	4616      	mov	r6, r2
 801960a:	4699      	mov	r9, r3
 801960c:	688a      	ldr	r2, [r1, #8]
 801960e:	690b      	ldr	r3, [r1, #16]
 8019610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019614:	4293      	cmp	r3, r2
 8019616:	bfb8      	it	lt
 8019618:	4613      	movlt	r3, r2
 801961a:	6033      	str	r3, [r6, #0]
 801961c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019620:	4607      	mov	r7, r0
 8019622:	460c      	mov	r4, r1
 8019624:	b10a      	cbz	r2, 801962a <_printf_common+0x26>
 8019626:	3301      	adds	r3, #1
 8019628:	6033      	str	r3, [r6, #0]
 801962a:	6823      	ldr	r3, [r4, #0]
 801962c:	0699      	lsls	r1, r3, #26
 801962e:	bf42      	ittt	mi
 8019630:	6833      	ldrmi	r3, [r6, #0]
 8019632:	3302      	addmi	r3, #2
 8019634:	6033      	strmi	r3, [r6, #0]
 8019636:	6825      	ldr	r5, [r4, #0]
 8019638:	f015 0506 	ands.w	r5, r5, #6
 801963c:	d106      	bne.n	801964c <_printf_common+0x48>
 801963e:	f104 0a19 	add.w	sl, r4, #25
 8019642:	68e3      	ldr	r3, [r4, #12]
 8019644:	6832      	ldr	r2, [r6, #0]
 8019646:	1a9b      	subs	r3, r3, r2
 8019648:	42ab      	cmp	r3, r5
 801964a:	dc26      	bgt.n	801969a <_printf_common+0x96>
 801964c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019650:	1e13      	subs	r3, r2, #0
 8019652:	6822      	ldr	r2, [r4, #0]
 8019654:	bf18      	it	ne
 8019656:	2301      	movne	r3, #1
 8019658:	0692      	lsls	r2, r2, #26
 801965a:	d42b      	bmi.n	80196b4 <_printf_common+0xb0>
 801965c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019660:	4649      	mov	r1, r9
 8019662:	4638      	mov	r0, r7
 8019664:	47c0      	blx	r8
 8019666:	3001      	adds	r0, #1
 8019668:	d01e      	beq.n	80196a8 <_printf_common+0xa4>
 801966a:	6823      	ldr	r3, [r4, #0]
 801966c:	68e5      	ldr	r5, [r4, #12]
 801966e:	6832      	ldr	r2, [r6, #0]
 8019670:	f003 0306 	and.w	r3, r3, #6
 8019674:	2b04      	cmp	r3, #4
 8019676:	bf08      	it	eq
 8019678:	1aad      	subeq	r5, r5, r2
 801967a:	68a3      	ldr	r3, [r4, #8]
 801967c:	6922      	ldr	r2, [r4, #16]
 801967e:	bf0c      	ite	eq
 8019680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019684:	2500      	movne	r5, #0
 8019686:	4293      	cmp	r3, r2
 8019688:	bfc4      	itt	gt
 801968a:	1a9b      	subgt	r3, r3, r2
 801968c:	18ed      	addgt	r5, r5, r3
 801968e:	2600      	movs	r6, #0
 8019690:	341a      	adds	r4, #26
 8019692:	42b5      	cmp	r5, r6
 8019694:	d11a      	bne.n	80196cc <_printf_common+0xc8>
 8019696:	2000      	movs	r0, #0
 8019698:	e008      	b.n	80196ac <_printf_common+0xa8>
 801969a:	2301      	movs	r3, #1
 801969c:	4652      	mov	r2, sl
 801969e:	4649      	mov	r1, r9
 80196a0:	4638      	mov	r0, r7
 80196a2:	47c0      	blx	r8
 80196a4:	3001      	adds	r0, #1
 80196a6:	d103      	bne.n	80196b0 <_printf_common+0xac>
 80196a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80196ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196b0:	3501      	adds	r5, #1
 80196b2:	e7c6      	b.n	8019642 <_printf_common+0x3e>
 80196b4:	18e1      	adds	r1, r4, r3
 80196b6:	1c5a      	adds	r2, r3, #1
 80196b8:	2030      	movs	r0, #48	; 0x30
 80196ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80196be:	4422      	add	r2, r4
 80196c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80196c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80196c8:	3302      	adds	r3, #2
 80196ca:	e7c7      	b.n	801965c <_printf_common+0x58>
 80196cc:	2301      	movs	r3, #1
 80196ce:	4622      	mov	r2, r4
 80196d0:	4649      	mov	r1, r9
 80196d2:	4638      	mov	r0, r7
 80196d4:	47c0      	blx	r8
 80196d6:	3001      	adds	r0, #1
 80196d8:	d0e6      	beq.n	80196a8 <_printf_common+0xa4>
 80196da:	3601      	adds	r6, #1
 80196dc:	e7d9      	b.n	8019692 <_printf_common+0x8e>
	...

080196e0 <_printf_i>:
 80196e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80196e4:	7e0f      	ldrb	r7, [r1, #24]
 80196e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80196e8:	2f78      	cmp	r7, #120	; 0x78
 80196ea:	4691      	mov	r9, r2
 80196ec:	4680      	mov	r8, r0
 80196ee:	460c      	mov	r4, r1
 80196f0:	469a      	mov	sl, r3
 80196f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80196f6:	d807      	bhi.n	8019708 <_printf_i+0x28>
 80196f8:	2f62      	cmp	r7, #98	; 0x62
 80196fa:	d80a      	bhi.n	8019712 <_printf_i+0x32>
 80196fc:	2f00      	cmp	r7, #0
 80196fe:	f000 80d8 	beq.w	80198b2 <_printf_i+0x1d2>
 8019702:	2f58      	cmp	r7, #88	; 0x58
 8019704:	f000 80a3 	beq.w	801984e <_printf_i+0x16e>
 8019708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801970c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019710:	e03a      	b.n	8019788 <_printf_i+0xa8>
 8019712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019716:	2b15      	cmp	r3, #21
 8019718:	d8f6      	bhi.n	8019708 <_printf_i+0x28>
 801971a:	a101      	add	r1, pc, #4	; (adr r1, 8019720 <_printf_i+0x40>)
 801971c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019720:	08019779 	.word	0x08019779
 8019724:	0801978d 	.word	0x0801978d
 8019728:	08019709 	.word	0x08019709
 801972c:	08019709 	.word	0x08019709
 8019730:	08019709 	.word	0x08019709
 8019734:	08019709 	.word	0x08019709
 8019738:	0801978d 	.word	0x0801978d
 801973c:	08019709 	.word	0x08019709
 8019740:	08019709 	.word	0x08019709
 8019744:	08019709 	.word	0x08019709
 8019748:	08019709 	.word	0x08019709
 801974c:	08019899 	.word	0x08019899
 8019750:	080197bd 	.word	0x080197bd
 8019754:	0801987b 	.word	0x0801987b
 8019758:	08019709 	.word	0x08019709
 801975c:	08019709 	.word	0x08019709
 8019760:	080198bb 	.word	0x080198bb
 8019764:	08019709 	.word	0x08019709
 8019768:	080197bd 	.word	0x080197bd
 801976c:	08019709 	.word	0x08019709
 8019770:	08019709 	.word	0x08019709
 8019774:	08019883 	.word	0x08019883
 8019778:	682b      	ldr	r3, [r5, #0]
 801977a:	1d1a      	adds	r2, r3, #4
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	602a      	str	r2, [r5, #0]
 8019780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019788:	2301      	movs	r3, #1
 801978a:	e0a3      	b.n	80198d4 <_printf_i+0x1f4>
 801978c:	6820      	ldr	r0, [r4, #0]
 801978e:	6829      	ldr	r1, [r5, #0]
 8019790:	0606      	lsls	r6, r0, #24
 8019792:	f101 0304 	add.w	r3, r1, #4
 8019796:	d50a      	bpl.n	80197ae <_printf_i+0xce>
 8019798:	680e      	ldr	r6, [r1, #0]
 801979a:	602b      	str	r3, [r5, #0]
 801979c:	2e00      	cmp	r6, #0
 801979e:	da03      	bge.n	80197a8 <_printf_i+0xc8>
 80197a0:	232d      	movs	r3, #45	; 0x2d
 80197a2:	4276      	negs	r6, r6
 80197a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80197a8:	485e      	ldr	r0, [pc, #376]	; (8019924 <_printf_i+0x244>)
 80197aa:	230a      	movs	r3, #10
 80197ac:	e019      	b.n	80197e2 <_printf_i+0x102>
 80197ae:	680e      	ldr	r6, [r1, #0]
 80197b0:	602b      	str	r3, [r5, #0]
 80197b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80197b6:	bf18      	it	ne
 80197b8:	b236      	sxthne	r6, r6
 80197ba:	e7ef      	b.n	801979c <_printf_i+0xbc>
 80197bc:	682b      	ldr	r3, [r5, #0]
 80197be:	6820      	ldr	r0, [r4, #0]
 80197c0:	1d19      	adds	r1, r3, #4
 80197c2:	6029      	str	r1, [r5, #0]
 80197c4:	0601      	lsls	r1, r0, #24
 80197c6:	d501      	bpl.n	80197cc <_printf_i+0xec>
 80197c8:	681e      	ldr	r6, [r3, #0]
 80197ca:	e002      	b.n	80197d2 <_printf_i+0xf2>
 80197cc:	0646      	lsls	r6, r0, #25
 80197ce:	d5fb      	bpl.n	80197c8 <_printf_i+0xe8>
 80197d0:	881e      	ldrh	r6, [r3, #0]
 80197d2:	4854      	ldr	r0, [pc, #336]	; (8019924 <_printf_i+0x244>)
 80197d4:	2f6f      	cmp	r7, #111	; 0x6f
 80197d6:	bf0c      	ite	eq
 80197d8:	2308      	moveq	r3, #8
 80197da:	230a      	movne	r3, #10
 80197dc:	2100      	movs	r1, #0
 80197de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80197e2:	6865      	ldr	r5, [r4, #4]
 80197e4:	60a5      	str	r5, [r4, #8]
 80197e6:	2d00      	cmp	r5, #0
 80197e8:	bfa2      	ittt	ge
 80197ea:	6821      	ldrge	r1, [r4, #0]
 80197ec:	f021 0104 	bicge.w	r1, r1, #4
 80197f0:	6021      	strge	r1, [r4, #0]
 80197f2:	b90e      	cbnz	r6, 80197f8 <_printf_i+0x118>
 80197f4:	2d00      	cmp	r5, #0
 80197f6:	d04d      	beq.n	8019894 <_printf_i+0x1b4>
 80197f8:	4615      	mov	r5, r2
 80197fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80197fe:	fb03 6711 	mls	r7, r3, r1, r6
 8019802:	5dc7      	ldrb	r7, [r0, r7]
 8019804:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019808:	4637      	mov	r7, r6
 801980a:	42bb      	cmp	r3, r7
 801980c:	460e      	mov	r6, r1
 801980e:	d9f4      	bls.n	80197fa <_printf_i+0x11a>
 8019810:	2b08      	cmp	r3, #8
 8019812:	d10b      	bne.n	801982c <_printf_i+0x14c>
 8019814:	6823      	ldr	r3, [r4, #0]
 8019816:	07de      	lsls	r6, r3, #31
 8019818:	d508      	bpl.n	801982c <_printf_i+0x14c>
 801981a:	6923      	ldr	r3, [r4, #16]
 801981c:	6861      	ldr	r1, [r4, #4]
 801981e:	4299      	cmp	r1, r3
 8019820:	bfde      	ittt	le
 8019822:	2330      	movle	r3, #48	; 0x30
 8019824:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019828:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801982c:	1b52      	subs	r2, r2, r5
 801982e:	6122      	str	r2, [r4, #16]
 8019830:	f8cd a000 	str.w	sl, [sp]
 8019834:	464b      	mov	r3, r9
 8019836:	aa03      	add	r2, sp, #12
 8019838:	4621      	mov	r1, r4
 801983a:	4640      	mov	r0, r8
 801983c:	f7ff fee2 	bl	8019604 <_printf_common>
 8019840:	3001      	adds	r0, #1
 8019842:	d14c      	bne.n	80198de <_printf_i+0x1fe>
 8019844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019848:	b004      	add	sp, #16
 801984a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801984e:	4835      	ldr	r0, [pc, #212]	; (8019924 <_printf_i+0x244>)
 8019850:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019854:	6829      	ldr	r1, [r5, #0]
 8019856:	6823      	ldr	r3, [r4, #0]
 8019858:	f851 6b04 	ldr.w	r6, [r1], #4
 801985c:	6029      	str	r1, [r5, #0]
 801985e:	061d      	lsls	r5, r3, #24
 8019860:	d514      	bpl.n	801988c <_printf_i+0x1ac>
 8019862:	07df      	lsls	r7, r3, #31
 8019864:	bf44      	itt	mi
 8019866:	f043 0320 	orrmi.w	r3, r3, #32
 801986a:	6023      	strmi	r3, [r4, #0]
 801986c:	b91e      	cbnz	r6, 8019876 <_printf_i+0x196>
 801986e:	6823      	ldr	r3, [r4, #0]
 8019870:	f023 0320 	bic.w	r3, r3, #32
 8019874:	6023      	str	r3, [r4, #0]
 8019876:	2310      	movs	r3, #16
 8019878:	e7b0      	b.n	80197dc <_printf_i+0xfc>
 801987a:	6823      	ldr	r3, [r4, #0]
 801987c:	f043 0320 	orr.w	r3, r3, #32
 8019880:	6023      	str	r3, [r4, #0]
 8019882:	2378      	movs	r3, #120	; 0x78
 8019884:	4828      	ldr	r0, [pc, #160]	; (8019928 <_printf_i+0x248>)
 8019886:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801988a:	e7e3      	b.n	8019854 <_printf_i+0x174>
 801988c:	0659      	lsls	r1, r3, #25
 801988e:	bf48      	it	mi
 8019890:	b2b6      	uxthmi	r6, r6
 8019892:	e7e6      	b.n	8019862 <_printf_i+0x182>
 8019894:	4615      	mov	r5, r2
 8019896:	e7bb      	b.n	8019810 <_printf_i+0x130>
 8019898:	682b      	ldr	r3, [r5, #0]
 801989a:	6826      	ldr	r6, [r4, #0]
 801989c:	6961      	ldr	r1, [r4, #20]
 801989e:	1d18      	adds	r0, r3, #4
 80198a0:	6028      	str	r0, [r5, #0]
 80198a2:	0635      	lsls	r5, r6, #24
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	d501      	bpl.n	80198ac <_printf_i+0x1cc>
 80198a8:	6019      	str	r1, [r3, #0]
 80198aa:	e002      	b.n	80198b2 <_printf_i+0x1d2>
 80198ac:	0670      	lsls	r0, r6, #25
 80198ae:	d5fb      	bpl.n	80198a8 <_printf_i+0x1c8>
 80198b0:	8019      	strh	r1, [r3, #0]
 80198b2:	2300      	movs	r3, #0
 80198b4:	6123      	str	r3, [r4, #16]
 80198b6:	4615      	mov	r5, r2
 80198b8:	e7ba      	b.n	8019830 <_printf_i+0x150>
 80198ba:	682b      	ldr	r3, [r5, #0]
 80198bc:	1d1a      	adds	r2, r3, #4
 80198be:	602a      	str	r2, [r5, #0]
 80198c0:	681d      	ldr	r5, [r3, #0]
 80198c2:	6862      	ldr	r2, [r4, #4]
 80198c4:	2100      	movs	r1, #0
 80198c6:	4628      	mov	r0, r5
 80198c8:	f7e6 fc92 	bl	80001f0 <memchr>
 80198cc:	b108      	cbz	r0, 80198d2 <_printf_i+0x1f2>
 80198ce:	1b40      	subs	r0, r0, r5
 80198d0:	6060      	str	r0, [r4, #4]
 80198d2:	6863      	ldr	r3, [r4, #4]
 80198d4:	6123      	str	r3, [r4, #16]
 80198d6:	2300      	movs	r3, #0
 80198d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80198dc:	e7a8      	b.n	8019830 <_printf_i+0x150>
 80198de:	6923      	ldr	r3, [r4, #16]
 80198e0:	462a      	mov	r2, r5
 80198e2:	4649      	mov	r1, r9
 80198e4:	4640      	mov	r0, r8
 80198e6:	47d0      	blx	sl
 80198e8:	3001      	adds	r0, #1
 80198ea:	d0ab      	beq.n	8019844 <_printf_i+0x164>
 80198ec:	6823      	ldr	r3, [r4, #0]
 80198ee:	079b      	lsls	r3, r3, #30
 80198f0:	d413      	bmi.n	801991a <_printf_i+0x23a>
 80198f2:	68e0      	ldr	r0, [r4, #12]
 80198f4:	9b03      	ldr	r3, [sp, #12]
 80198f6:	4298      	cmp	r0, r3
 80198f8:	bfb8      	it	lt
 80198fa:	4618      	movlt	r0, r3
 80198fc:	e7a4      	b.n	8019848 <_printf_i+0x168>
 80198fe:	2301      	movs	r3, #1
 8019900:	4632      	mov	r2, r6
 8019902:	4649      	mov	r1, r9
 8019904:	4640      	mov	r0, r8
 8019906:	47d0      	blx	sl
 8019908:	3001      	adds	r0, #1
 801990a:	d09b      	beq.n	8019844 <_printf_i+0x164>
 801990c:	3501      	adds	r5, #1
 801990e:	68e3      	ldr	r3, [r4, #12]
 8019910:	9903      	ldr	r1, [sp, #12]
 8019912:	1a5b      	subs	r3, r3, r1
 8019914:	42ab      	cmp	r3, r5
 8019916:	dcf2      	bgt.n	80198fe <_printf_i+0x21e>
 8019918:	e7eb      	b.n	80198f2 <_printf_i+0x212>
 801991a:	2500      	movs	r5, #0
 801991c:	f104 0619 	add.w	r6, r4, #25
 8019920:	e7f5      	b.n	801990e <_printf_i+0x22e>
 8019922:	bf00      	nop
 8019924:	0801bbdd 	.word	0x0801bbdd
 8019928:	0801bbee 	.word	0x0801bbee

0801992c <__sread>:
 801992c:	b510      	push	{r4, lr}
 801992e:	460c      	mov	r4, r1
 8019930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019934:	f000 f894 	bl	8019a60 <_read_r>
 8019938:	2800      	cmp	r0, #0
 801993a:	bfab      	itete	ge
 801993c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801993e:	89a3      	ldrhlt	r3, [r4, #12]
 8019940:	181b      	addge	r3, r3, r0
 8019942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019946:	bfac      	ite	ge
 8019948:	6563      	strge	r3, [r4, #84]	; 0x54
 801994a:	81a3      	strhlt	r3, [r4, #12]
 801994c:	bd10      	pop	{r4, pc}

0801994e <__swrite>:
 801994e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019952:	461f      	mov	r7, r3
 8019954:	898b      	ldrh	r3, [r1, #12]
 8019956:	05db      	lsls	r3, r3, #23
 8019958:	4605      	mov	r5, r0
 801995a:	460c      	mov	r4, r1
 801995c:	4616      	mov	r6, r2
 801995e:	d505      	bpl.n	801996c <__swrite+0x1e>
 8019960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019964:	2302      	movs	r3, #2
 8019966:	2200      	movs	r2, #0
 8019968:	f000 f868 	bl	8019a3c <_lseek_r>
 801996c:	89a3      	ldrh	r3, [r4, #12]
 801996e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019976:	81a3      	strh	r3, [r4, #12]
 8019978:	4632      	mov	r2, r6
 801997a:	463b      	mov	r3, r7
 801997c:	4628      	mov	r0, r5
 801997e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019982:	f000 b817 	b.w	80199b4 <_write_r>

08019986 <__sseek>:
 8019986:	b510      	push	{r4, lr}
 8019988:	460c      	mov	r4, r1
 801998a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801998e:	f000 f855 	bl	8019a3c <_lseek_r>
 8019992:	1c43      	adds	r3, r0, #1
 8019994:	89a3      	ldrh	r3, [r4, #12]
 8019996:	bf15      	itete	ne
 8019998:	6560      	strne	r0, [r4, #84]	; 0x54
 801999a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801999e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80199a2:	81a3      	strheq	r3, [r4, #12]
 80199a4:	bf18      	it	ne
 80199a6:	81a3      	strhne	r3, [r4, #12]
 80199a8:	bd10      	pop	{r4, pc}

080199aa <__sclose>:
 80199aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199ae:	f000 b813 	b.w	80199d8 <_close_r>
	...

080199b4 <_write_r>:
 80199b4:	b538      	push	{r3, r4, r5, lr}
 80199b6:	4d07      	ldr	r5, [pc, #28]	; (80199d4 <_write_r+0x20>)
 80199b8:	4604      	mov	r4, r0
 80199ba:	4608      	mov	r0, r1
 80199bc:	4611      	mov	r1, r2
 80199be:	2200      	movs	r2, #0
 80199c0:	602a      	str	r2, [r5, #0]
 80199c2:	461a      	mov	r2, r3
 80199c4:	f7e8 fd57 	bl	8002476 <_write>
 80199c8:	1c43      	adds	r3, r0, #1
 80199ca:	d102      	bne.n	80199d2 <_write_r+0x1e>
 80199cc:	682b      	ldr	r3, [r5, #0]
 80199ce:	b103      	cbz	r3, 80199d2 <_write_r+0x1e>
 80199d0:	6023      	str	r3, [r4, #0]
 80199d2:	bd38      	pop	{r3, r4, r5, pc}
 80199d4:	20002dd0 	.word	0x20002dd0

080199d8 <_close_r>:
 80199d8:	b538      	push	{r3, r4, r5, lr}
 80199da:	4d06      	ldr	r5, [pc, #24]	; (80199f4 <_close_r+0x1c>)
 80199dc:	2300      	movs	r3, #0
 80199de:	4604      	mov	r4, r0
 80199e0:	4608      	mov	r0, r1
 80199e2:	602b      	str	r3, [r5, #0]
 80199e4:	f7e8 fd63 	bl	80024ae <_close>
 80199e8:	1c43      	adds	r3, r0, #1
 80199ea:	d102      	bne.n	80199f2 <_close_r+0x1a>
 80199ec:	682b      	ldr	r3, [r5, #0]
 80199ee:	b103      	cbz	r3, 80199f2 <_close_r+0x1a>
 80199f0:	6023      	str	r3, [r4, #0]
 80199f2:	bd38      	pop	{r3, r4, r5, pc}
 80199f4:	20002dd0 	.word	0x20002dd0

080199f8 <_fstat_r>:
 80199f8:	b538      	push	{r3, r4, r5, lr}
 80199fa:	4d07      	ldr	r5, [pc, #28]	; (8019a18 <_fstat_r+0x20>)
 80199fc:	2300      	movs	r3, #0
 80199fe:	4604      	mov	r4, r0
 8019a00:	4608      	mov	r0, r1
 8019a02:	4611      	mov	r1, r2
 8019a04:	602b      	str	r3, [r5, #0]
 8019a06:	f7e8 fd5e 	bl	80024c6 <_fstat>
 8019a0a:	1c43      	adds	r3, r0, #1
 8019a0c:	d102      	bne.n	8019a14 <_fstat_r+0x1c>
 8019a0e:	682b      	ldr	r3, [r5, #0]
 8019a10:	b103      	cbz	r3, 8019a14 <_fstat_r+0x1c>
 8019a12:	6023      	str	r3, [r4, #0]
 8019a14:	bd38      	pop	{r3, r4, r5, pc}
 8019a16:	bf00      	nop
 8019a18:	20002dd0 	.word	0x20002dd0

08019a1c <_isatty_r>:
 8019a1c:	b538      	push	{r3, r4, r5, lr}
 8019a1e:	4d06      	ldr	r5, [pc, #24]	; (8019a38 <_isatty_r+0x1c>)
 8019a20:	2300      	movs	r3, #0
 8019a22:	4604      	mov	r4, r0
 8019a24:	4608      	mov	r0, r1
 8019a26:	602b      	str	r3, [r5, #0]
 8019a28:	f7e8 fd5d 	bl	80024e6 <_isatty>
 8019a2c:	1c43      	adds	r3, r0, #1
 8019a2e:	d102      	bne.n	8019a36 <_isatty_r+0x1a>
 8019a30:	682b      	ldr	r3, [r5, #0]
 8019a32:	b103      	cbz	r3, 8019a36 <_isatty_r+0x1a>
 8019a34:	6023      	str	r3, [r4, #0]
 8019a36:	bd38      	pop	{r3, r4, r5, pc}
 8019a38:	20002dd0 	.word	0x20002dd0

08019a3c <_lseek_r>:
 8019a3c:	b538      	push	{r3, r4, r5, lr}
 8019a3e:	4d07      	ldr	r5, [pc, #28]	; (8019a5c <_lseek_r+0x20>)
 8019a40:	4604      	mov	r4, r0
 8019a42:	4608      	mov	r0, r1
 8019a44:	4611      	mov	r1, r2
 8019a46:	2200      	movs	r2, #0
 8019a48:	602a      	str	r2, [r5, #0]
 8019a4a:	461a      	mov	r2, r3
 8019a4c:	f7e8 fd56 	bl	80024fc <_lseek>
 8019a50:	1c43      	adds	r3, r0, #1
 8019a52:	d102      	bne.n	8019a5a <_lseek_r+0x1e>
 8019a54:	682b      	ldr	r3, [r5, #0]
 8019a56:	b103      	cbz	r3, 8019a5a <_lseek_r+0x1e>
 8019a58:	6023      	str	r3, [r4, #0]
 8019a5a:	bd38      	pop	{r3, r4, r5, pc}
 8019a5c:	20002dd0 	.word	0x20002dd0

08019a60 <_read_r>:
 8019a60:	b538      	push	{r3, r4, r5, lr}
 8019a62:	4d07      	ldr	r5, [pc, #28]	; (8019a80 <_read_r+0x20>)
 8019a64:	4604      	mov	r4, r0
 8019a66:	4608      	mov	r0, r1
 8019a68:	4611      	mov	r1, r2
 8019a6a:	2200      	movs	r2, #0
 8019a6c:	602a      	str	r2, [r5, #0]
 8019a6e:	461a      	mov	r2, r3
 8019a70:	f7e8 fce4 	bl	800243c <_read>
 8019a74:	1c43      	adds	r3, r0, #1
 8019a76:	d102      	bne.n	8019a7e <_read_r+0x1e>
 8019a78:	682b      	ldr	r3, [r5, #0]
 8019a7a:	b103      	cbz	r3, 8019a7e <_read_r+0x1e>
 8019a7c:	6023      	str	r3, [r4, #0]
 8019a7e:	bd38      	pop	{r3, r4, r5, pc}
 8019a80:	20002dd0 	.word	0x20002dd0

08019a84 <_init>:
 8019a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a86:	bf00      	nop
 8019a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a8a:	bc08      	pop	{r3}
 8019a8c:	469e      	mov	lr, r3
 8019a8e:	4770      	bx	lr

08019a90 <_fini>:
 8019a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a92:	bf00      	nop
 8019a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a96:	bc08      	pop	{r3}
 8019a98:	469e      	mov	lr, r3
 8019a9a:	4770      	bx	lr
